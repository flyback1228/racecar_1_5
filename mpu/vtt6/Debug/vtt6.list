
vtt6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005008  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080052e8  080052e8  000152e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080052ec  080052ec  000152ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  080052f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  08005300  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  08005300  000200c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000eeba  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001c45  00000000  00000000  0002ef3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000a10  00000000  00000000  00030b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000007be  00000000  00000000  00031590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00035a50  00000000  00000000  00031d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000d626  00000000  00000000  0006779e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001573d2  00000000  00000000  00074dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00002920  00000000  00000000  001cc198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000052  00000000  00000000  001ceab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005288 	.word	0x08005288

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005288 	.word	0x08005288

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 faa6 	bl	8000b28 <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005dc:	f000 f914 	bl	8000808 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f814 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 f8d8 	bl	8000798 <MX_GPIO_Init>
  MX_UART4_Init();
 80005e8:	f000 f88a 	bl	8000700 <MX_UART4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Transmit(&huart4, "Hello\n", 6, 10);
 80005ec:	230a      	movs	r3, #10
 80005ee:	2206      	movs	r2, #6
 80005f0:	4904      	ldr	r1, [pc, #16]	; (8000604 <main+0x30>)
 80005f2:	4805      	ldr	r0, [pc, #20]	; (8000608 <main+0x34>)
 80005f4:	f003 fd02 	bl	8003ffc <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005fc:	f000 fb26 	bl	8000c4c <HAL_Delay>
	  HAL_UART_Transmit(&huart4, "Hello\n", 6, 10);
 8000600:	e7f4      	b.n	80005ec <main+0x18>
 8000602:	bf00      	nop
 8000604:	080052a0 	.word	0x080052a0
 8000608:	2400002c 	.word	0x2400002c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b09c      	sub	sp, #112	; 0x70
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	224c      	movs	r2, #76	; 0x4c
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fe08 	bl	8005230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2220      	movs	r2, #32
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f004 fe02 	bl	8005230 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800062c:	2002      	movs	r0, #2
 800062e:	f000 fe49 	bl	80012c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000632:	2300      	movs	r3, #0
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	4b30      	ldr	r3, [pc, #192]	; (80006f8 <SystemClock_Config+0xec>)
 8000638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800063a:	4a2f      	ldr	r2, [pc, #188]	; (80006f8 <SystemClock_Config+0xec>)
 800063c:	f023 0301 	bic.w	r3, r3, #1
 8000640:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000642:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <SystemClock_Config+0xec>)
 8000644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000646:	f003 0301 	and.w	r3, r3, #1
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <SystemClock_Config+0xf0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a2a      	ldr	r2, [pc, #168]	; (80006fc <SystemClock_Config+0xf0>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <SystemClock_Config+0xf0>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000664:	bf00      	nop
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xf0>)
 8000668:	699b      	ldr	r3, [r3, #24]
 800066a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800066e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000672:	d1f8      	bne.n	8000666 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000674:	2301      	movs	r3, #1
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000682:	2302      	movs	r3, #2
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000686:	2305      	movs	r3, #5
 8000688:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 800068a:	2381      	movs	r3, #129	; 0x81
 800068c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800069a:	2308      	movs	r3, #8
 800069c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800069e:	2300      	movs	r3, #0
 80006a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fe44 	bl	8001338 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006b6:	f000 f8d3 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	233f      	movs	r3, #63	; 0x3f
 80006bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 80006c6:	2309      	movs	r3, #9
 80006c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fa84 	bl	8001bec <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006ea:	f000 f8b9 	bl	8000860 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3770      	adds	r7, #112	; 0x70
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	58000400 	.word	0x58000400
 80006fc:	58024800 	.word	0x58024800

08000700 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000704:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_UART4_Init+0x90>)
 8000706:	4a23      	ldr	r2, [pc, #140]	; (8000794 <MX_UART4_Init+0x94>)
 8000708:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_UART4_Init+0x90>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <MX_UART4_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <MX_UART4_Init+0x90>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <MX_UART4_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_UART4_Init+0x90>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b19      	ldr	r3, [pc, #100]	; (8000790 <MX_UART4_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_UART4_Init+0x90>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <MX_UART4_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_UART4_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_UART4_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000748:	4811      	ldr	r0, [pc, #68]	; (8000790 <MX_UART4_Init+0x90>)
 800074a:	f003 fc07 	bl	8003f5c <HAL_UART_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000754:	f000 f884 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000758:	2100      	movs	r1, #0
 800075a:	480d      	ldr	r0, [pc, #52]	; (8000790 <MX_UART4_Init+0x90>)
 800075c:	f004 fc9d 	bl	800509a <HAL_UARTEx_SetTxFifoThreshold>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000766:	f000 f87b 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076a:	2100      	movs	r1, #0
 800076c:	4808      	ldr	r0, [pc, #32]	; (8000790 <MX_UART4_Init+0x90>)
 800076e:	f004 fcd2 	bl	8005116 <HAL_UARTEx_SetRxFifoThreshold>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000778:	f000 f872 	bl	8000860 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800077c:	4804      	ldr	r0, [pc, #16]	; (8000790 <MX_UART4_Init+0x90>)
 800077e:	f004 fc53 	bl	8005028 <HAL_UARTEx_DisableFifoMode>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000788:	f000 f86a 	bl	8000860 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2400002c 	.word	0x2400002c
 8000794:	40004c00 	.word	0x40004c00

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a4:	4a17      	ldr	r2, [pc, #92]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007a6:	f043 0304 	orr.w	r3, r3, #4
 80007aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	f003 0304 	and.w	r3, r3, #4
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c2:	4a10      	ldr	r2, [pc, #64]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_GPIO_Init+0x6c>)
 80007ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f0:	f003 0301 	and.w	r3, r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f8:	bf00      	nop
 80007fa:	3714      	adds	r7, #20
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	58024400 	.word	0x58024400

08000808 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800080e:	463b      	mov	r3, r7
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800081a:	f000 fb2b 	bl	8000e74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800081e:	2301      	movs	r3, #1
 8000820:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000822:	2300      	movs	r3, #0
 8000824:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800082a:	231f      	movs	r3, #31
 800082c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800082e:	2387      	movs	r3, #135	; 0x87
 8000830:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000832:	2300      	movs	r3, #0
 8000834:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000836:	2300      	movs	r3, #0
 8000838:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800083a:	2301      	movs	r3, #1
 800083c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800083e:	2301      	movs	r3, #1
 8000840:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800084a:	463b      	mov	r3, r7
 800084c:	4618      	mov	r0, r3
 800084e:	f000 fb49 	bl	8000ee4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000852:	2004      	movs	r0, #4
 8000854:	f000 fb26 	bl	8000ea4 <HAL_MPU_Enable>

}
 8000858:	bf00      	nop
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x30>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000878:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_MspInit+0x30>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_MspInit+0x30>)
 8000884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	58024400 	.word	0x58024400

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0ba      	sub	sp, #232	; 0xe8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	22c0      	movs	r2, #192	; 0xc0
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 fcb5 	bl	8005230 <memset>
  if(huart->Instance==UART4)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a26      	ldr	r2, [pc, #152]	; (8000964 <HAL_UART_MspInit+0xc4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d145      	bne.n	800095c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80008d0:	f04f 0202 	mov.w	r2, #2
 80008d4:	f04f 0300 	mov.w	r3, #0
 80008d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fd0c 	bl	8002304 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80008f2:	f7ff ffb5 	bl	8000860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <HAL_UART_MspInit+0xc8>)
 80008f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_UART_MspInit+0xc8>)
 80008fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000902:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000906:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0xc8>)
 8000908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800090c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_UART_MspInit+0xc8>)
 8000916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <HAL_UART_MspInit+0xc8>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_UART_MspInit+0xc8>)
 8000926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000932:	2303      	movs	r3, #3
 8000934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800094a:	2308      	movs	r3, #8
 800094c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000950:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_UART_MspInit+0xcc>)
 8000958:	f000 fb04 	bl	8000f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800095c:	bf00      	nop
 800095e:	37e8      	adds	r7, #232	; 0xe8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40004c00 	.word	0x40004c00
 8000968:	58024400 	.word	0x58024400
 800096c:	58020000 	.word	0x58020000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f926 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <SystemInit+0xe4>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <SystemInit+0xe4>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009d8:	4b34      	ldr	r3, [pc, #208]	; (8000aac <SystemInit+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	2b06      	cmp	r3, #6
 80009e2:	d807      	bhi.n	80009f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009e4:	4b31      	ldr	r3, [pc, #196]	; (8000aac <SystemInit+0xe8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 030f 	bic.w	r3, r3, #15
 80009ec:	4a2f      	ldr	r2, [pc, #188]	; (8000aac <SystemInit+0xe8>)
 80009ee:	f043 0307 	orr.w	r3, r3, #7
 80009f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009f4:	4b2e      	ldr	r3, [pc, #184]	; (8000ab0 <SystemInit+0xec>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a2d      	ldr	r2, [pc, #180]	; (8000ab0 <SystemInit+0xec>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <SystemInit+0xec>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <SystemInit+0xec>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4929      	ldr	r1, [pc, #164]	; (8000ab0 <SystemInit+0xec>)
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <SystemInit+0xf0>)
 8000a0e:	4013      	ands	r3, r2
 8000a10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a12:	4b26      	ldr	r3, [pc, #152]	; (8000aac <SystemInit+0xe8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d007      	beq.n	8000a2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a1e:	4b23      	ldr	r3, [pc, #140]	; (8000aac <SystemInit+0xe8>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f023 030f 	bic.w	r3, r3, #15
 8000a26:	4a21      	ldr	r2, [pc, #132]	; (8000aac <SystemInit+0xe8>)
 8000a28:	f043 0307 	orr.w	r3, r3, #7
 8000a2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <SystemInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <SystemInit+0xec>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <SystemInit+0xec>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <SystemInit+0xec>)
 8000a42:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <SystemInit+0xf4>)
 8000a44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <SystemInit+0xec>)
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <SystemInit+0xf8>)
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <SystemInit+0xec>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <SystemInit+0xfc>)
 8000a50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a52:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <SystemInit+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <SystemInit+0xec>)
 8000a5a:	4a19      	ldr	r2, [pc, #100]	; (8000ac0 <SystemInit+0xfc>)
 8000a5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <SystemInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <SystemInit+0xec>)
 8000a66:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <SystemInit+0xfc>)
 8000a68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <SystemInit+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <SystemInit+0xec>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <SystemInit+0xec>)
 8000a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <SystemInit+0xec>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <SystemInit+0x100>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <SystemInit+0x104>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a8e:	d202      	bcs.n	8000a96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a90:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <SystemInit+0x108>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <SystemInit+0x10c>)
 8000a98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a9c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00
 8000aac:	52002000 	.word	0x52002000
 8000ab0:	58024400 	.word	0x58024400
 8000ab4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ab8:	02020200 	.word	0x02020200
 8000abc:	01ff0000 	.word	0x01ff0000
 8000ac0:	01010280 	.word	0x01010280
 8000ac4:	5c001000 	.word	0x5c001000
 8000ac8:	ffff0000 	.word	0xffff0000
 8000acc:	51008108 	.word	0x51008108
 8000ad0:	52004000 	.word	0x52004000

08000ad4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ad8:	f7ff ff74 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f004 fb9d 	bl	8005240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b06:	f7ff fd65 	bl	80005d4 <main>
  bx  lr
 8000b0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b14:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b18:	080052f0 	.word	0x080052f0
  ldr r2, =_sbss
 8000b1c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b20:	240000c4 	.word	0x240000c4

08000b24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC3_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2e:	2003      	movs	r0, #3
 8000b30:	f000 f96e 	bl	8000e10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b34:	f001 fa10 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_Init+0x68>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	0a1b      	lsrs	r3, r3, #8
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	4913      	ldr	r1, [pc, #76]	; (8000b94 <HAL_Init+0x6c>)
 8000b46:	5ccb      	ldrb	r3, [r1, r3]
 8000b48:	f003 031f 	and.w	r3, r3, #31
 8000b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_Init+0x68>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_Init+0x6c>)
 8000b5c:	5cd3      	ldrb	r3, [r2, r3]
 8000b5e:	f003 031f 	and.w	r3, r3, #31
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	fa22 f303 	lsr.w	r3, r2, r3
 8000b68:	4a0b      	ldr	r2, [pc, #44]	; (8000b98 <HAL_Init+0x70>)
 8000b6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b6c:	4a0b      	ldr	r2, [pc, #44]	; (8000b9c <HAL_Init+0x74>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b72:	200f      	movs	r0, #15
 8000b74:	f000 f814 	bl	8000ba0 <HAL_InitTick>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e002      	b.n	8000b88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b82:	f7ff fe73 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b86:	2300      	movs	r3, #0
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58024400 	.word	0x58024400
 8000b94:	080052a8 	.word	0x080052a8
 8000b98:	24000004 	.word	0x24000004
 8000b9c:	24000000 	.word	0x24000000

08000ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <HAL_InitTick+0x60>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d101      	bne.n	8000bb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e021      	b.n	8000bf8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_InitTick+0x64>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <HAL_InitTick+0x60>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f945 	bl	8000e5a <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	f000 f91d 	bl	8000e26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x68>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	2400000c 	.word	0x2400000c
 8000c04:	24000000 	.word	0x24000000
 8000c08:	24000008 	.word	0x24000008

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2400000c 	.word	0x2400000c
 8000c30:	240000c0 	.word	0x240000c0

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	240000c0 	.word	0x240000c0

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <HAL_Delay+0x44>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2400000c 	.word	0x2400000c

08000c94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <HAL_GetREVID+0x14>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	0c1b      	lsrs	r3, r3, #16
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	5c001000 	.word	0x5c001000

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <__NVIC_SetPriorityGrouping+0x40>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cda:	4a04      	ldr	r2, [pc, #16]	; (8000cec <__NVIC_SetPriorityGrouping+0x40>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	60d3      	str	r3, [r2, #12]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000ed00 	.word	0xe000ed00
 8000cf0:	05fa0000 	.word	0x05fa0000

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	db0a      	blt.n	8000d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	490c      	ldr	r1, [pc, #48]	; (8000d5c <__NVIC_SetPriority+0x4c>)
 8000d2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	b2d2      	uxtb	r2, r2
 8000d32:	440b      	add	r3, r1
 8000d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d38:	e00a      	b.n	8000d50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	b2da      	uxtb	r2, r3
 8000d3e:	4908      	ldr	r1, [pc, #32]	; (8000d60 <__NVIC_SetPriority+0x50>)
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	f003 030f 	and.w	r3, r3, #15
 8000d46:	3b04      	subs	r3, #4
 8000d48:	0112      	lsls	r2, r2, #4
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	440b      	add	r3, r1
 8000d4e:	761a      	strb	r2, [r3, #24]
}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000e100 	.word	0xe000e100
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	; 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	f1c3 0307 	rsb	r3, r3, #7
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	bf28      	it	cs
 8000d82:	2304      	movcs	r3, #4
 8000d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3304      	adds	r3, #4
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	d902      	bls.n	8000d94 <NVIC_EncodePriority+0x30>
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	3b03      	subs	r3, #3
 8000d92:	e000      	b.n	8000d96 <NVIC_EncodePriority+0x32>
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	43da      	mvns	r2, r3
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	43d9      	mvns	r1, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	4313      	orrs	r3, r2
         );
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3724      	adds	r7, #36	; 0x24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ddc:	d301      	bcc.n	8000de2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00f      	b.n	8000e02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <SysTick_Config+0x40>)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dea:	210f      	movs	r1, #15
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000df0:	f7ff ff8e 	bl	8000d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <SysTick_Config+0x40>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfa:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <SysTick_Config+0x40>)
 8000dfc:	2207      	movs	r2, #7
 8000dfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e00:	2300      	movs	r3, #0
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010

08000e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f7ff ff47 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e1e:	bf00      	nop
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b086      	sub	sp, #24
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
 8000e32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e34:	f7ff ff5e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	68b9      	ldr	r1, [r7, #8]
 8000e3e:	6978      	ldr	r0, [r7, #20]
 8000e40:	f7ff ff90 	bl	8000d64 <NVIC_EncodePriority>
 8000e44:	4602      	mov	r2, r0
 8000e46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff ff5f 	bl	8000d10 <__NVIC_SetPriority>
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff ffb2 	bl	8000dcc <SysTick_Config>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e78:	f3bf 8f5f 	dmb	sy
}
 8000e7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <HAL_MPU_Disable+0x28>)
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_MPU_Disable+0x28>)
 8000e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e88:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_MPU_Disable+0x2c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00
 8000ea0:	e000ed90 	.word	0xe000ed90

08000ea4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000eac:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <HAL_MPU_Enable+0x38>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_MPU_Enable+0x3c>)
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_MPU_Enable+0x3c>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec2:	f3bf 8f4f 	dsb	sy
}
 8000ec6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000ec8:	f3bf 8f6f 	isb	sy
}
 8000ecc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed90 	.word	0xe000ed90
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	785a      	ldrb	r2, [r3, #1]
 8000ef0:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <HAL_MPU_ConfigRegion+0x7c>)
 8000ef2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	; (8000f60 <HAL_MPU_ConfigRegion+0x7c>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4a19      	ldr	r2, [pc, #100]	; (8000f60 <HAL_MPU_ConfigRegion+0x7c>)
 8000efa:	f023 0301 	bic.w	r3, r3, #1
 8000efe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000f00:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_MPU_ConfigRegion+0x7c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	7b1b      	ldrb	r3, [r3, #12]
 8000f0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	7adb      	ldrb	r3, [r3, #11]
 8000f12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	7a9b      	ldrb	r3, [r3, #10]
 8000f1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000f1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	7b5b      	ldrb	r3, [r3, #13]
 8000f22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000f24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7b9b      	ldrb	r3, [r3, #14]
 8000f2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000f2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	7bdb      	ldrb	r3, [r3, #15]
 8000f32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000f34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	7a5b      	ldrb	r3, [r3, #9]
 8000f3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000f3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7a1b      	ldrb	r3, [r3, #8]
 8000f42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000f44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	7812      	ldrb	r2, [r2, #0]
 8000f4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000f4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000f50:	6113      	str	r3, [r2, #16]
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000ed90 	.word	0xe000ed90

08000f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f72:	4b89      	ldr	r3, [pc, #548]	; (8001198 <HAL_GPIO_Init+0x234>)
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f76:	e194      	b.n	80012a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8186 	beq.w	800129c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x44>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4013      	ands	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	69b9      	ldr	r1, [r7, #24]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80e0 	beq.w	800129c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <HAL_GPIO_Init+0x238>)
 80010de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010e2:	4a2e      	ldr	r2, [pc, #184]	; (800119c <HAL_GPIO_Init+0x238>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_GPIO_Init+0x238>)
 80010ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010fa:	4a29      	ldr	r2, [pc, #164]	; (80011a0 <HAL_GPIO_Init+0x23c>)
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	089b      	lsrs	r3, r3, #2
 8001100:	3302      	adds	r3, #2
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	220f      	movs	r2, #15
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4013      	ands	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a20      	ldr	r2, [pc, #128]	; (80011a4 <HAL_GPIO_Init+0x240>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d052      	beq.n	80011cc <HAL_GPIO_Init+0x268>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_GPIO_Init+0x244>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d031      	beq.n	8001192 <HAL_GPIO_Init+0x22e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_GPIO_Init+0x248>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d02b      	beq.n	800118e <HAL_GPIO_Init+0x22a>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a1d      	ldr	r2, [pc, #116]	; (80011b0 <HAL_GPIO_Init+0x24c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d025      	beq.n	800118a <HAL_GPIO_Init+0x226>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <HAL_GPIO_Init+0x250>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d01f      	beq.n	8001186 <HAL_GPIO_Init+0x222>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a1b      	ldr	r2, [pc, #108]	; (80011b8 <HAL_GPIO_Init+0x254>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d019      	beq.n	8001182 <HAL_GPIO_Init+0x21e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a1a      	ldr	r2, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x258>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d013      	beq.n	800117e <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x25c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d00d      	beq.n	800117a <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a18      	ldr	r2, [pc, #96]	; (80011c4 <HAL_GPIO_Init+0x260>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d007      	beq.n	8001176 <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_GPIO_Init+0x264>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d101      	bne.n	8001172 <HAL_GPIO_Init+0x20e>
 800116e:	2309      	movs	r3, #9
 8001170:	e02d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001172:	230a      	movs	r3, #10
 8001174:	e02b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001176:	2308      	movs	r3, #8
 8001178:	e029      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117a:	2307      	movs	r3, #7
 800117c:	e027      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800117e:	2306      	movs	r3, #6
 8001180:	e025      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001182:	2305      	movs	r3, #5
 8001184:	e023      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001186:	2304      	movs	r3, #4
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118a:	2303      	movs	r3, #3
 800118c:	e01f      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 800118e:	2302      	movs	r3, #2
 8001190:	e01d      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001192:	2301      	movs	r3, #1
 8001194:	e01b      	b.n	80011ce <HAL_GPIO_Init+0x26a>
 8001196:	bf00      	nop
 8001198:	58000080 	.word	0x58000080
 800119c:	58024400 	.word	0x58024400
 80011a0:	58000400 	.word	0x58000400
 80011a4:	58020000 	.word	0x58020000
 80011a8:	58020400 	.word	0x58020400
 80011ac:	58020800 	.word	0x58020800
 80011b0:	58020c00 	.word	0x58020c00
 80011b4:	58021000 	.word	0x58021000
 80011b8:	58021400 	.word	0x58021400
 80011bc:	58021800 	.word	0x58021800
 80011c0:	58021c00 	.word	0x58021c00
 80011c4:	58022000 	.word	0x58022000
 80011c8:	58022400 	.word	0x58022400
 80011cc:	2300      	movs	r3, #0
 80011ce:	69fa      	ldr	r2, [r7, #28]
 80011d0:	f002 0203 	and.w	r2, r2, #3
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	4093      	lsls	r3, r2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011de:	4938      	ldr	r1, [pc, #224]	; (80012c0 <HAL_GPIO_Init+0x35c>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001212:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800121a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001240:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	3301      	adds	r3, #1
 80012a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f47f ae63 	bne.w	8000f78 <HAL_GPIO_Init+0x14>
  }
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	; 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	58000400 	.word	0x58000400

080012c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <HAL_PWREx_ConfigSupply+0x70>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d00a      	beq.n	80012ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012d8:	4b16      	ldr	r3, [pc, #88]	; (8001334 <HAL_PWREx_ConfigSupply+0x70>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d001      	beq.n	80012ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e01f      	b.n	800132a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e01d      	b.n	800132a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_PWREx_ConfigSupply+0x70>)
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	f023 0207 	bic.w	r2, r3, #7
 80012f6:	490f      	ldr	r1, [pc, #60]	; (8001334 <HAL_PWREx_ConfigSupply+0x70>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012fe:	f7ff fc99 	bl	8000c34 <HAL_GetTick>
 8001302:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001304:	e009      	b.n	800131a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001306:	f7ff fc95 	bl	8000c34 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001314:	d901      	bls.n	800131a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e007      	b.n	800132a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_PWREx_ConfigSupply+0x70>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001326:	d1ee      	bne.n	8001306 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	58024800 	.word	0x58024800

08001338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08c      	sub	sp, #48	; 0x30
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 bc48 	b.w	8001bdc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8088 	beq.w	800146a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135a:	4b99      	ldr	r3, [pc, #612]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001364:	4b96      	ldr	r3, [pc, #600]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	2b10      	cmp	r3, #16
 800136e:	d007      	beq.n	8001380 <HAL_RCC_OscConfig+0x48>
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	2b18      	cmp	r3, #24
 8001374:	d111      	bne.n	800139a <HAL_RCC_OscConfig+0x62>
 8001376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d10c      	bne.n	800139a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b8f      	ldr	r3, [pc, #572]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d06d      	beq.n	8001468 <HAL_RCC_OscConfig+0x130>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d169      	bne.n	8001468 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	f000 bc21 	b.w	8001bdc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a2:	d106      	bne.n	80013b2 <HAL_RCC_OscConfig+0x7a>
 80013a4:	4b86      	ldr	r3, [pc, #536]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a85      	ldr	r2, [pc, #532]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e02e      	b.n	8001410 <HAL_RCC_OscConfig+0xd8>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x9c>
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a80      	ldr	r2, [pc, #512]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b7e      	ldr	r3, [pc, #504]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7d      	ldr	r2, [pc, #500]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e01d      	b.n	8001410 <HAL_RCC_OscConfig+0xd8>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013dc:	d10c      	bne.n	80013f8 <HAL_RCC_OscConfig+0xc0>
 80013de:	4b78      	ldr	r3, [pc, #480]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a77      	ldr	r2, [pc, #476]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	4b75      	ldr	r3, [pc, #468]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a74      	ldr	r2, [pc, #464]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	e00b      	b.n	8001410 <HAL_RCC_OscConfig+0xd8>
 80013f8:	4b71      	ldr	r3, [pc, #452]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a70      	ldr	r2, [pc, #448]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80013fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a6d      	ldr	r2, [pc, #436]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800140a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d013      	beq.n	8001440 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001418:	f7ff fc0c 	bl	8000c34 <HAL_GetTick>
 800141c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001420:	f7ff fc08 	bl	8000c34 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b64      	cmp	r3, #100	; 0x64
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e3d4      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001432:	4b63      	ldr	r3, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f0      	beq.n	8001420 <HAL_RCC_OscConfig+0xe8>
 800143e:	e014      	b.n	800146a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fbf8 	bl	8000c34 <HAL_GetTick>
 8001444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fbf4 	bl	8000c34 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	; 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e3c0      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800145a:	4b59      	ldr	r3, [pc, #356]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x110>
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001468:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80ca 	beq.w	800160c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001478:	4b51      	ldr	r3, [pc, #324]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001480:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001482:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001486:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001488:	6a3b      	ldr	r3, [r7, #32]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_RCC_OscConfig+0x166>
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	2b18      	cmp	r3, #24
 8001492:	d156      	bne.n	8001542 <HAL_RCC_OscConfig+0x20a>
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d151      	bne.n	8001542 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149e:	4b48      	ldr	r3, [pc, #288]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <HAL_RCC_OscConfig+0x17e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e392      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014b6:	4b42      	ldr	r3, [pc, #264]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0219 	bic.w	r2, r3, #25
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	493f      	ldr	r1, [pc, #252]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff fbb4 	bl	8000c34 <HAL_GetTick>
 80014cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fbb0 	bl	8000c34 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e37c      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e2:	4b37      	ldr	r3, [pc, #220]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ee:	f7ff fbd1 	bl	8000c94 <HAL_GetREVID>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d817      	bhi.n	800152c <HAL_RCC_OscConfig+0x1f4>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b40      	cmp	r3, #64	; 0x40
 8001502:	d108      	bne.n	8001516 <HAL_RCC_OscConfig+0x1de>
 8001504:	4b2e      	ldr	r3, [pc, #184]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800150c:	4a2c      	ldr	r2, [pc, #176]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800150e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001512:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001514:	e07a      	b.n	800160c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001516:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	031b      	lsls	r3, r3, #12
 8001524:	4926      	ldr	r1, [pc, #152]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001526:	4313      	orrs	r3, r2
 8001528:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800152a:	e06f      	b.n	800160c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800152c:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	061b      	lsls	r3, r3, #24
 800153a:	4921      	ldr	r1, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001540:	e064      	b.n	800160c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d047      	beq.n	80015da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800154a:	4b1d      	ldr	r3, [pc, #116]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 0219 	bic.w	r2, r3, #25
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	491a      	ldr	r1, [pc, #104]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fb6a 	bl	8000c34 <HAL_GetTick>
 8001560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fb66 	bl	8000c34 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e332      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001576:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	f7ff fb87 	bl	8000c94 <HAL_GetREVID>
 8001586:	4603      	mov	r3, r0
 8001588:	f241 0203 	movw	r2, #4099	; 0x1003
 800158c:	4293      	cmp	r3, r2
 800158e:	d819      	bhi.n	80015c4 <HAL_RCC_OscConfig+0x28c>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691b      	ldr	r3, [r3, #16]
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d108      	bne.n	80015aa <HAL_RCC_OscConfig+0x272>
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80015a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a6:	6053      	str	r3, [r2, #4]
 80015a8:	e030      	b.n	800160c <HAL_RCC_OscConfig+0x2d4>
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	031b      	lsls	r3, r3, #12
 80015b8:	4901      	ldr	r1, [pc, #4]	; (80015c0 <HAL_RCC_OscConfig+0x288>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
 80015be:	e025      	b.n	800160c <HAL_RCC_OscConfig+0x2d4>
 80015c0:	58024400 	.word	0x58024400
 80015c4:	4b9a      	ldr	r3, [pc, #616]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	4997      	ldr	r1, [pc, #604]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
 80015d8:	e018      	b.n	800160c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b95      	ldr	r3, [pc, #596]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a94      	ldr	r2, [pc, #592]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb25 	bl	8000c34 <HAL_GetTick>
 80015ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb21 	bl	8000c34 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e2ed      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001600:	4b8b      	ldr	r3, [pc, #556]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 80a9 	beq.w	800176c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800161a:	4b85      	ldr	r3, [pc, #532]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001622:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001624:	4b82      	ldr	r3, [pc, #520]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d007      	beq.n	8001640 <HAL_RCC_OscConfig+0x308>
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b18      	cmp	r3, #24
 8001634:	d13a      	bne.n	80016ac <HAL_RCC_OscConfig+0x374>
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	f003 0303 	and.w	r3, r3, #3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d135      	bne.n	80016ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001640:	4b7b      	ldr	r3, [pc, #492]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x320>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	2b80      	cmp	r3, #128	; 0x80
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e2c1      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001658:	f7ff fb1c 	bl	8000c94 <HAL_GetREVID>
 800165c:	4603      	mov	r3, r0
 800165e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001662:	4293      	cmp	r3, r2
 8001664:	d817      	bhi.n	8001696 <HAL_RCC_OscConfig+0x35e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
 800166a:	2b20      	cmp	r3, #32
 800166c:	d108      	bne.n	8001680 <HAL_RCC_OscConfig+0x348>
 800166e:	4b70      	ldr	r3, [pc, #448]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001676:	4a6e      	ldr	r2, [pc, #440]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800167c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800167e:	e075      	b.n	800176c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001680:	4b6b      	ldr	r3, [pc, #428]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	069b      	lsls	r3, r3, #26
 800168e:	4968      	ldr	r1, [pc, #416]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001694:	e06a      	b.n	800176c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	4962      	ldr	r1, [pc, #392]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016aa:	e05f      	b.n	800176c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d042      	beq.n	800173a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016b4:	4b5e      	ldr	r3, [pc, #376]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a5d      	ldr	r2, [pc, #372]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fab8 	bl	8000c34 <HAL_GetTick>
 80016c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016c8:	f7ff fab4 	bl	8000c34 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e280      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016da:	4b55      	ldr	r3, [pc, #340]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016e6:	f7ff fad5 	bl	8000c94 <HAL_GetREVID>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d817      	bhi.n	8001724 <HAL_RCC_OscConfig+0x3ec>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d108      	bne.n	800170e <HAL_RCC_OscConfig+0x3d6>
 80016fc:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001704:	4a4a      	ldr	r2, [pc, #296]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001706:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800170a:	6053      	str	r3, [r2, #4]
 800170c:	e02e      	b.n	800176c <HAL_RCC_OscConfig+0x434>
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	069b      	lsls	r3, r3, #26
 800171c:	4944      	ldr	r1, [pc, #272]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]
 8001722:	e023      	b.n	800176c <HAL_RCC_OscConfig+0x434>
 8001724:	4b42      	ldr	r3, [pc, #264]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	061b      	lsls	r3, r3, #24
 8001732:	493f      	ldr	r1, [pc, #252]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001734:	4313      	orrs	r3, r2
 8001736:	60cb      	str	r3, [r1, #12]
 8001738:	e018      	b.n	800176c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a3c      	ldr	r2, [pc, #240]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa75 	bl	8000c34 <HAL_GetTick>
 800174a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800174e:	f7ff fa71 	bl	8000c34 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e23d      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001760:	4b33      	ldr	r3, [pc, #204]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0308 	and.w	r3, r3, #8
 8001774:	2b00      	cmp	r3, #0
 8001776:	d036      	beq.n	80017e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d019      	beq.n	80017b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001784:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800178c:	f7ff fa52 	bl	8000c34 <HAL_GetTick>
 8001790:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fa4e 	bl	8000c34 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e21a      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017a6:	4b22      	ldr	r3, [pc, #136]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0x45c>
 80017b2:	e018      	b.n	80017e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017b4:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b8:	4a1d      	ldr	r2, [pc, #116]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	f023 0301 	bic.w	r3, r3, #1
 80017be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c0:	f7ff fa38 	bl	8000c34 <HAL_GetTick>
 80017c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fa34 	bl	8000c34 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e200      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80017dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f0      	bne.n	80017c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d039      	beq.n	8001866 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01c      	beq.n	8001834 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001804:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001806:	f7ff fa15 	bl	8000c34 <HAL_GetTick>
 800180a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800180e:	f7ff fa11 	bl	8000c34 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1dd      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x4d6>
 800182c:	e01b      	b.n	8001866 <HAL_RCC_OscConfig+0x52e>
 800182e:	bf00      	nop
 8001830:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001834:	4b9b      	ldr	r3, [pc, #620]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a9a      	ldr	r2, [pc, #616]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 800183a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800183e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001840:	f7ff f9f8 	bl	8000c34 <HAL_GetTick>
 8001844:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001848:	f7ff f9f4 	bl	8000c34 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1c0      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800185a:	4b92      	ldr	r3, [pc, #584]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	2b00      	cmp	r3, #0
 8001870:	f000 8081 	beq.w	8001976 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001874:	4b8c      	ldr	r3, [pc, #560]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a8b      	ldr	r2, [pc, #556]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001880:	f7ff f9d8 	bl	8000c34 <HAL_GetTick>
 8001884:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001888:	f7ff f9d4 	bl	8000c34 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e1a0      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800189a:	4b83      	ldr	r3, [pc, #524]	; (8001aa8 <HAL_RCC_OscConfig+0x770>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d106      	bne.n	80018bc <HAL_RCC_OscConfig+0x584>
 80018ae:	4b7d      	ldr	r3, [pc, #500]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	e02d      	b.n	8001918 <HAL_RCC_OscConfig+0x5e0>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x5a6>
 80018c4:	4b77      	ldr	r3, [pc, #476]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c8:	4a76      	ldr	r2, [pc, #472]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018ca:	f023 0301 	bic.w	r3, r3, #1
 80018ce:	6713      	str	r3, [r2, #112]	; 0x70
 80018d0:	4b74      	ldr	r3, [pc, #464]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d4:	4a73      	ldr	r2, [pc, #460]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018d6:	f023 0304 	bic.w	r3, r3, #4
 80018da:	6713      	str	r3, [r2, #112]	; 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x5e0>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x5c8>
 80018e6:	4b6f      	ldr	r3, [pc, #444]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ea:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	; 0x70
 80018f2:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f6:	4a6b      	ldr	r2, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	; 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x5e0>
 8001900:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a67      	ldr	r2, [pc, #412]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	4b65      	ldr	r3, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001910:	4a64      	ldr	r2, [pc, #400]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f988 	bl	8000c34 <HAL_GetTick>
 8001924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f984 	bl	8000c34 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e14e      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800193e:	4b59      	ldr	r3, [pc, #356]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x5f0>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800194c:	f7ff f972 	bl	8000c34 <HAL_GetTick>
 8001950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f96e 	bl	8000c34 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e138      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 812d 	beq.w	8001bda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001980:	4b48      	ldr	r3, [pc, #288]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001988:	2b18      	cmp	r3, #24
 800198a:	f000 80bd 	beq.w	8001b08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	2b02      	cmp	r3, #2
 8001994:	f040 809e 	bne.w	8001ad4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001998:	4b42      	ldr	r3, [pc, #264]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a41      	ldr	r2, [pc, #260]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 800199e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff f946 	bl	8000c34 <HAL_GetTick>
 80019a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff f942 	bl	8000c34 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e10e      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019be:	4b39      	ldr	r3, [pc, #228]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80019cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x774>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	430a      	orrs	r2, r1
 80019de:	4931      	ldr	r1, [pc, #196]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	628b      	str	r3, [r1, #40]	; 0x28
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	3b01      	subs	r3, #1
 80019ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f2:	3b01      	subs	r3, #1
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019fe:	3b01      	subs	r3, #1
 8001a00:	041b      	lsls	r3, r3, #16
 8001a02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	061b      	lsls	r3, r3, #24
 8001a10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a14:	4923      	ldr	r1, [pc, #140]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a1a:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a20:	f023 0301 	bic.w	r3, r3, #1
 8001a24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <HAL_RCC_OscConfig+0x778>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a32:	00d2      	lsls	r2, r2, #3
 8001a34:	491b      	ldr	r1, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3e:	f023 020c 	bic.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4917      	ldr	r1, [pc, #92]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f023 0202 	bic.w	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	4912      	ldr	r1, [pc, #72]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a62:	4a10      	ldr	r2, [pc, #64]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	4a0d      	ldr	r2, [pc, #52]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a76:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f8cb 	bl	8000c34 <HAL_GetTick>
 8001a9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa0:	e011      	b.n	8001ac6 <HAL_RCC_OscConfig+0x78e>
 8001aa2:	bf00      	nop
 8001aa4:	58024400 	.word	0x58024400
 8001aa8:	58024800 	.word	0x58024800
 8001aac:	fffffc0c 	.word	0xfffffc0c
 8001ab0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab4:	f7ff f8be 	bl	8000c34 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e08a      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac6:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x77c>
 8001ad2:	e082      	b.n	8001bda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f8a8 	bl	8000c34 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f8a4 	bl	8000c34 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e070      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x7b0>
 8001b06:	e068      	b.n	8001bda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b08:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d031      	beq.n	8001b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d12a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d122      	bne.n	8001b80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d11a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0a5b      	lsrs	r3, r3, #9
 8001b4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d111      	bne.n	8001b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0e1b      	lsrs	r3, r3, #24
 8001b72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d001      	beq.n	8001b84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e02b      	b.n	8001bdc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001b84:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b88:	08db      	lsrs	r3, r3, #3
 8001b8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001b8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d01f      	beq.n	8001bda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b9a:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	4a11      	ldr	r2, [pc, #68]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba6:	f7ff f845 	bl	8000c34 <HAL_GetTick>
 8001baa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bac:	bf00      	nop
 8001bae:	f7ff f841 	bl	8000c34 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d0f9      	beq.n	8001bae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bba:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_RCC_OscConfig+0x8b0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bc6:	00d2      	lsls	r2, r2, #3
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_OscConfig+0x8ac>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3730      	adds	r7, #48	; 0x30
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58024400 	.word	0x58024400
 8001be8:	ffff0007 	.word	0xffff0007

08001bec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e19c      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b8a      	ldr	r3, [pc, #552]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 030f 	and.w	r3, r3, #15
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b87      	ldr	r3, [pc, #540]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 020f 	bic.w	r2, r3, #15
 8001c16:	4985      	ldr	r1, [pc, #532]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e184      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b7b      	ldr	r3, [pc, #492]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c4c:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4975      	ldr	r1, [pc, #468]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d010      	beq.n	8001c8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	4b70      	ldr	r3, [pc, #448]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d908      	bls.n	8001c8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c7a:	4b6d      	ldr	r3, [pc, #436]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	496a      	ldr	r1, [pc, #424]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d010      	beq.n	8001cba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	699a      	ldr	r2, [r3, #24]
 8001c9c:	4b64      	ldr	r3, [pc, #400]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001c9e:	69db      	ldr	r3, [r3, #28]
 8001ca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d908      	bls.n	8001cba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ca8:	4b61      	ldr	r3, [pc, #388]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	495e      	ldr	r1, [pc, #376]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d010      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	4b59      	ldr	r3, [pc, #356]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d908      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cd6:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	4953      	ldr	r1, [pc, #332]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d010      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d908      	bls.n	8001d16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f023 020f 	bic.w	r2, r3, #15
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	4947      	ldr	r1, [pc, #284]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d055      	beq.n	8001dce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d22:	4b43      	ldr	r3, [pc, #268]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	4940      	ldr	r1, [pc, #256]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d3c:	4b3c      	ldr	r3, [pc, #240]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d121      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0f6      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d54:	4b36      	ldr	r3, [pc, #216]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d115      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0ea      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d109      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0de      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0d6      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d8c:	4b28      	ldr	r3, [pc, #160]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	4925      	ldr	r1, [pc, #148]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d9e:	f7fe ff49 	bl	8000c34 <HAL_GetTick>
 8001da2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da6:	f7fe ff45 	bl	8000c34 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0be      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d1eb      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d208      	bcs.n	8001dfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f023 020f 	bic.w	r2, r3, #15
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	490e      	ldr	r1, [pc, #56]	; (8001e30 <HAL_RCC_ClockConfig+0x244>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d214      	bcs.n	8001e34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	4906      	ldr	r1, [pc, #24]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <HAL_RCC_ClockConfig+0x240>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e086      	b.n	8001f3a <HAL_RCC_ClockConfig+0x34e>
 8001e2c:	52002000 	.word	0x52002000
 8001e30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d010      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d208      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e50:	4b3c      	ldr	r3, [pc, #240]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	4939      	ldr	r1, [pc, #228]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d010      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	4b34      	ldr	r3, [pc, #208]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e74:	69db      	ldr	r3, [r3, #28]
 8001e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d208      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	492e      	ldr	r1, [pc, #184]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0310 	and.w	r3, r3, #16
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d208      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eac:	4b25      	ldr	r3, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4922      	ldr	r1, [pc, #136]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d010      	beq.n	8001eec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69da      	ldr	r2, [r3, #28]
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d208      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eda:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	4917      	ldr	r1, [pc, #92]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001eec:	f000 f834 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	4912      	ldr	r1, [pc, #72]	; (8001f48 <HAL_RCC_ClockConfig+0x35c>)
 8001efe:	5ccb      	ldrb	r3, [r1, r3]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	fa22 f303 	lsr.w	r3, r2, r3
 8001f08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x358>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <HAL_RCC_ClockConfig+0x35c>)
 8001f14:	5cd3      	ldrb	r3, [r2, r3]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f20:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x360>)
 8001f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_RCC_ClockConfig+0x364>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <HAL_RCC_ClockConfig+0x368>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fe36 	bl	8000ba0 <HAL_InitTick>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	58024400 	.word	0x58024400
 8001f48:	080052a8 	.word	0x080052a8
 8001f4c:	24000004 	.word	0x24000004
 8001f50:	24000000 	.word	0x24000000
 8001f54:	24000008 	.word	0x24000008

08001f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b089      	sub	sp, #36	; 0x24
 8001f5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5e:	4bb3      	ldr	r3, [pc, #716]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f66:	2b18      	cmp	r3, #24
 8001f68:	f200 8155 	bhi.w	8002216 <HAL_RCC_GetSysClockFreq+0x2be>
 8001f6c:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f72:	bf00      	nop
 8001f74:	08001fd9 	.word	0x08001fd9
 8001f78:	08002217 	.word	0x08002217
 8001f7c:	08002217 	.word	0x08002217
 8001f80:	08002217 	.word	0x08002217
 8001f84:	08002217 	.word	0x08002217
 8001f88:	08002217 	.word	0x08002217
 8001f8c:	08002217 	.word	0x08002217
 8001f90:	08002217 	.word	0x08002217
 8001f94:	08001fff 	.word	0x08001fff
 8001f98:	08002217 	.word	0x08002217
 8001f9c:	08002217 	.word	0x08002217
 8001fa0:	08002217 	.word	0x08002217
 8001fa4:	08002217 	.word	0x08002217
 8001fa8:	08002217 	.word	0x08002217
 8001fac:	08002217 	.word	0x08002217
 8001fb0:	08002217 	.word	0x08002217
 8001fb4:	08002005 	.word	0x08002005
 8001fb8:	08002217 	.word	0x08002217
 8001fbc:	08002217 	.word	0x08002217
 8001fc0:	08002217 	.word	0x08002217
 8001fc4:	08002217 	.word	0x08002217
 8001fc8:	08002217 	.word	0x08002217
 8001fcc:	08002217 	.word	0x08002217
 8001fd0:	08002217 	.word	0x08002217
 8001fd4:	0800200b 	.word	0x0800200b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fd8:	4b94      	ldr	r3, [pc, #592]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d009      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fe4:	4b91      	ldr	r3, [pc, #580]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	08db      	lsrs	r3, r3, #3
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	4a90      	ldr	r2, [pc, #576]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ff6:	e111      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ff8:	4b8d      	ldr	r3, [pc, #564]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ffa:	61bb      	str	r3, [r7, #24]
      break;
 8001ffc:	e10e      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001ffe:	4b8d      	ldr	r3, [pc, #564]	; (8002234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002000:	61bb      	str	r3, [r7, #24]
      break;
 8002002:	e10b      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002004:	4b8c      	ldr	r3, [pc, #560]	; (8002238 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002006:	61bb      	str	r3, [r7, #24]
      break;
 8002008:	e108      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800200a:	4b88      	ldr	r3, [pc, #544]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002014:	4b85      	ldr	r3, [pc, #532]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800201e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800202a:	4b80      	ldr	r3, [pc, #512]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	ee07 3a90 	vmov	s15, r3
 800203e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002042:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80e1 	beq.w	8002210 <HAL_RCC_GetSysClockFreq+0x2b8>
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2b02      	cmp	r3, #2
 8002052:	f000 8083 	beq.w	800215c <HAL_RCC_GetSysClockFreq+0x204>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	2b02      	cmp	r3, #2
 800205a:	f200 80a1 	bhi.w	80021a0 <HAL_RCC_GetSysClockFreq+0x248>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x114>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d056      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x1c0>
 800206a:	e099      	b.n	80021a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d02d      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002078:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	08db      	lsrs	r3, r3, #3
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	4a6b      	ldr	r2, [pc, #428]	; (8002230 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	ee07 3a90 	vmov	s15, r3
 8002090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800209e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020aa:	ee07 3a90 	vmov	s15, r3
 80020ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80020b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80020d2:	e087      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	ee07 3a90 	vmov	s15, r3
 80020da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002240 <HAL_RCC_GetSysClockFreq+0x2e8>
 80020e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80020fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 80020fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800210a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800210e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002112:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002116:	e065      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002122:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002244 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800212a:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800213a:	ed97 6a02 	vldr	s12, [r7, #8]
 800213e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800214a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800214e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800215a:	e043      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002166:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002248 <HAL_RCC_GetSysClockFreq+0x2f0>
 800216a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216e:	4b2f      	ldr	r3, [pc, #188]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002176:	ee07 3a90 	vmov	s15, r3
 800217a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800217e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002182:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800218a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800218e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800219a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800219e:	e021      	b.n	80021e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002244 <HAL_RCC_GetSysClockFreq+0x2ec>
 80021ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80021c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800223c <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80021e4:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e8:	0a5b      	lsrs	r3, r3, #9
 80021ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ee:	3301      	adds	r3, #1
 80021f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002208:	ee17 3a90 	vmov	r3, s15
 800220c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800220e:	e005      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
      break;
 8002214:	e002      	b.n	800221c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002218:	61bb      	str	r3, [r7, #24]
      break;
 800221a:	bf00      	nop
  }

  return sysclockfreq;
 800221c:	69bb      	ldr	r3, [r7, #24]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	58024400 	.word	0x58024400
 8002230:	03d09000 	.word	0x03d09000
 8002234:	003d0900 	.word	0x003d0900
 8002238:	017d7840 	.word	0x017d7840
 800223c:	46000000 	.word	0x46000000
 8002240:	4c742400 	.word	0x4c742400
 8002244:	4a742400 	.word	0x4a742400
 8002248:	4bbebc20 	.word	0x4bbebc20

0800224c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002252:	f7ff fe81 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8002256:	4602      	mov	r2, r0
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCC_GetHCLKFreq+0x50>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	490f      	ldr	r1, [pc, #60]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002264:	5ccb      	ldrb	r3, [r1, r3]
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	fa22 f303 	lsr.w	r3, r2, r3
 800226e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCC_GetHCLKFreq+0x50>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	4a09      	ldr	r2, [pc, #36]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800227a:	5cd3      	ldrb	r3, [r2, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	fa22 f303 	lsr.w	r3, r2, r3
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002288:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	58024400 	.word	0x58024400
 80022a0:	080052a8 	.word	0x080052a8
 80022a4:	24000004 	.word	0x24000004
 80022a8:	24000000 	.word	0x24000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80022b0:	f7ff ffcc 	bl	800224c <HAL_RCC_GetHCLKFreq>
 80022b4:	4602      	mov	r2, r0
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	091b      	lsrs	r3, r3, #4
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4904      	ldr	r1, [pc, #16]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022c2:	5ccb      	ldrb	r3, [r1, r3]
 80022c4:	f003 031f 	and.w	r3, r3, #31
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	58024400 	.word	0x58024400
 80022d4:	080052a8 	.word	0x080052a8

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80022dc:	f7ff ffb6 	bl	800224c <HAL_RCC_GetHCLKFreq>
 80022e0:	4602      	mov	r2, r0
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	4904      	ldr	r1, [pc, #16]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ee:	5ccb      	ldrb	r3, [r1, r3]
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58024400 	.word	0x58024400
 8002300:	080052a8 	.word	0x080052a8

08002304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002308:	b0ca      	sub	sp, #296	; 0x128
 800230a:	af00      	add	r7, sp, #0
 800230c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002310:	2300      	movs	r3, #0
 8002312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002316:	2300      	movs	r3, #0
 8002318:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800231c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002324:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002328:	2500      	movs	r5, #0
 800232a:	ea54 0305 	orrs.w	r3, r4, r5
 800232e:	d049      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800233a:	d02f      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800233c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002340:	d828      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002346:	d01a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800234c:	d822      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002356:	d007      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002358:	e01c      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800235a:	4bb8      	ldr	r3, [pc, #736]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800235c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235e:	4ab7      	ldr	r2, [pc, #732]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002366:	e01a      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800236c:	3308      	adds	r3, #8
 800236e:	2102      	movs	r1, #2
 8002370:	4618      	mov	r0, r3
 8002372:	f001 fc8f 	bl	8003c94 <RCCEx_PLL2_Config>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800237c:	e00f      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800237e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002382:	3328      	adds	r3, #40	; 0x28
 8002384:	2102      	movs	r1, #2
 8002386:	4618      	mov	r0, r3
 8002388:	f001 fd36 	bl	8003df8 <RCCEx_PLL3_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002392:	e004      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800239a:	e000      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800239c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800239e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10a      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80023a6:	4ba5      	ldr	r3, [pc, #660]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80023ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023b4:	4aa1      	ldr	r2, [pc, #644]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6513      	str	r3, [r2, #80]	; 0x50
 80023ba:	e003      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80023c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80023d0:	f04f 0900 	mov.w	r9, #0
 80023d4:	ea58 0309 	orrs.w	r3, r8, r9
 80023d8:	d047      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80023da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d82a      	bhi.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80023e4:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80023e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ea:	bf00      	nop
 80023ec:	08002401 	.word	0x08002401
 80023f0:	0800240f 	.word	0x0800240f
 80023f4:	08002425 	.word	0x08002425
 80023f8:	08002443 	.word	0x08002443
 80023fc:	08002443 	.word	0x08002443
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002400:	4b8e      	ldr	r3, [pc, #568]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	4a8d      	ldr	r2, [pc, #564]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800240c:	e01a      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800240e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002412:	3308      	adds	r3, #8
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f001 fc3c 	bl	8003c94 <RCCEx_PLL2_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002422:	e00f      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002428:	3328      	adds	r3, #40	; 0x28
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fce3 	bl	8003df8 <RCCEx_PLL3_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002438:	e004      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002440:	e000      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800244c:	4b7b      	ldr	r3, [pc, #492]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800244e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002450:	f023 0107 	bic.w	r1, r3, #7
 8002454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245a:	4a78      	ldr	r2, [pc, #480]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800245c:	430b      	orrs	r3, r1
 800245e:	6513      	str	r3, [r2, #80]	; 0x50
 8002460:	e003      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002466:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800246a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002476:	f04f 0b00 	mov.w	fp, #0
 800247a:	ea5a 030b 	orrs.w	r3, sl, fp
 800247e:	d04c      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002480:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800248a:	d030      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d829      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002492:	2bc0      	cmp	r3, #192	; 0xc0
 8002494:	d02d      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002496:	2bc0      	cmp	r3, #192	; 0xc0
 8002498:	d825      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800249a:	2b80      	cmp	r3, #128	; 0x80
 800249c:	d018      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800249e:	2b80      	cmp	r3, #128	; 0x80
 80024a0:	d821      	bhi.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d007      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80024aa:	e01c      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ac:	4b63      	ldr	r3, [pc, #396]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	4a62      	ldr	r2, [pc, #392]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024b8:	e01c      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80024ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024be:	3308      	adds	r3, #8
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fbe6 	bl	8003c94 <RCCEx_PLL2_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024ce:	e011      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80024d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80024d4:	3328      	adds	r3, #40	; 0x28
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f001 fc8d 	bl	8003df8 <RCCEx_PLL3_Config>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80024e4:	e006      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80024ec:	e002      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80024ee:	bf00      	nop
 80024f0:	e000      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80024f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002500:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250a:	4a4c      	ldr	r2, [pc, #304]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800250c:	430b      	orrs	r3, r1
 800250e:	6513      	str	r3, [r2, #80]	; 0x50
 8002510:	e003      	b.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002516:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800251a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002526:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800252a:	2300      	movs	r3, #0
 800252c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002530:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002534:	460b      	mov	r3, r1
 8002536:	4313      	orrs	r3, r2
 8002538:	d053      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800253a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800253e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002546:	d035      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800254c:	d82e      	bhi.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800254e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002552:	d031      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002554:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002558:	d828      	bhi.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800255a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255e:	d01a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d822      	bhi.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800256a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800256e:	d007      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002570:	e01c      	b.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002572:	4b32      	ldr	r3, [pc, #200]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002576:	4a31      	ldr	r2, [pc, #196]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800257e:	e01c      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002584:	3308      	adds	r3, #8
 8002586:	2100      	movs	r1, #0
 8002588:	4618      	mov	r0, r3
 800258a:	f001 fb83 	bl	8003c94 <RCCEx_PLL2_Config>
 800258e:	4603      	mov	r3, r0
 8002590:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002594:	e011      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800259a:	3328      	adds	r3, #40	; 0x28
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 fc2a 	bl	8003df8 <RCCEx_PLL3_Config>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025aa:	e006      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80025b2:	e002      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025b4:	bf00      	nop
 80025b6:	e000      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80025b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80025ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80025d2:	4a1a      	ldr	r2, [pc, #104]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025d4:	430b      	orrs	r3, r1
 80025d6:	6593      	str	r3, [r2, #88]	; 0x58
 80025d8:	e003      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80025de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80025e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80025e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80025ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80025f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80025fc:	460b      	mov	r3, r1
 80025fe:	4313      	orrs	r3, r2
 8002600:	d056      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002606:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800260a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800260e:	d038      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002614:	d831      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800261a:	d034      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800261c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002620:	d82b      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002626:	d01d      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800262c:	d825      	bhi.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002636:	d00a      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002638:	e01f      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800263a:	bf00      	nop
 800263c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002640:	4ba2      	ldr	r3, [pc, #648]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002644:	4aa1      	ldr	r2, [pc, #644]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800264a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800264c:	e01c      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800264e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002652:	3308      	adds	r3, #8
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f001 fb1c 	bl	8003c94 <RCCEx_PLL2_Config>
 800265c:	4603      	mov	r3, r0
 800265e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002662:	e011      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002668:	3328      	adds	r3, #40	; 0x28
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f001 fbc3 	bl	8003df8 <RCCEx_PLL3_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002678:	e006      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002680:	e002      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002682:	bf00      	nop
 8002684:	e000      	b.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002688:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002690:	4b8e      	ldr	r3, [pc, #568]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800269c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026a0:	4a8a      	ldr	r2, [pc, #552]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026a2:	430b      	orrs	r3, r1
 80026a4:	6593      	str	r3, [r2, #88]	; 0x58
 80026a6:	e003      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80026ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80026bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80026c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80026ca:	460b      	mov	r3, r1
 80026cc:	4313      	orrs	r3, r2
 80026ce:	d03a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	2b30      	cmp	r3, #48	; 0x30
 80026d8:	d01f      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80026da:	2b30      	cmp	r3, #48	; 0x30
 80026dc:	d819      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d00c      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80026e2:	2b20      	cmp	r3, #32
 80026e4:	d815      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d019      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80026ea:	2b10      	cmp	r3, #16
 80026ec:	d111      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ee:	4b77      	ldr	r3, [pc, #476]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	4a76      	ldr	r2, [pc, #472]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80026fa:	e011      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80026fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002700:	3308      	adds	r3, #8
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fac5 	bl	8003c94 <RCCEx_PLL2_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002710:	e006      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002718:	e002      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800271a:	bf00      	nop
 800271c:	e000      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800271e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002728:	4b68      	ldr	r3, [pc, #416]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002736:	4a65      	ldr	r2, [pc, #404]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002738:	430b      	orrs	r3, r1
 800273a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800273c:	e003      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800273e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002752:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002756:	2300      	movs	r3, #0
 8002758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800275c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002760:	460b      	mov	r3, r1
 8002762:	4313      	orrs	r3, r2
 8002764:	d051      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800276a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002770:	d035      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002776:	d82e      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800277c:	d031      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800277e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002782:	d828      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002788:	d01a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800278a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800278e:	d822      	bhi.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002798:	d007      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800279a:	e01c      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279c:	4b4b      	ldr	r3, [pc, #300]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a0:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027a8:	e01c      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80027aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ae:	3308      	adds	r3, #8
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fa6e 	bl	8003c94 <RCCEx_PLL2_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027be:	e011      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027c4:	3328      	adds	r3, #40	; 0x28
 80027c6:	2100      	movs	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f001 fb15 	bl	8003df8 <RCCEx_PLL3_Config>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80027d4:	e006      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027dc:	e002      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80027de:	bf00      	nop
 80027e0:	e000      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80027e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10a      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80027ec:	4b37      	ldr	r3, [pc, #220]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80027f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	4a34      	ldr	r2, [pc, #208]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6513      	str	r3, [r2, #80]	; 0x50
 8002800:	e003      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002802:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002806:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800280a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002816:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800281a:	2300      	movs	r3, #0
 800281c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002820:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002824:	460b      	mov	r3, r1
 8002826:	4313      	orrs	r3, r2
 8002828:	d056      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800282a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800282e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002834:	d033      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800283a:	d82c      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800283c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002840:	d02f      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002846:	d826      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800284c:	d02b      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800284e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002852:	d820      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002858:	d012      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800285a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800285e:	d81a      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d022      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002868:	d115      	bne.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800286a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800286e:	3308      	adds	r3, #8
 8002870:	2101      	movs	r1, #1
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fa0e 	bl	8003c94 <RCCEx_PLL2_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800287e:	e015      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002884:	3328      	adds	r3, #40	; 0x28
 8002886:	2101      	movs	r1, #1
 8002888:	4618      	mov	r0, r3
 800288a:	f001 fab5 	bl	8003df8 <RCCEx_PLL3_Config>
 800288e:	4603      	mov	r3, r0
 8002890:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002894:	e00a      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800289c:	e006      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800289e:	bf00      	nop
 80028a0:	e004      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028a2:	bf00      	nop
 80028a4:	e002      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028a6:	bf00      	nop
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80028aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10d      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028b4:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80028bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028c2:	4a02      	ldr	r2, [pc, #8]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6513      	str	r3, [r2, #80]	; 0x50
 80028c8:	e006      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80028d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028e8:	2300      	movs	r3, #0
 80028ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4313      	orrs	r3, r2
 80028f6:	d055      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80028f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002904:	d033      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800290a:	d82c      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d02f      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002916:	d826      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800291c:	d02b      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800291e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002922:	d820      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002928:	d012      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800292a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800292e:	d81a      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002930:	2b00      	cmp	r3, #0
 8002932:	d022      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002938:	d115      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800293a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800293e:	3308      	adds	r3, #8
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f001 f9a6 	bl	8003c94 <RCCEx_PLL2_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800294e:	e015      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002954:	3328      	adds	r3, #40	; 0x28
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f001 fa4d 	bl	8003df8 <RCCEx_PLL3_Config>
 800295e:	4603      	mov	r3, r0
 8002960:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002964:	e00a      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800296c:	e006      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800296e:	bf00      	nop
 8002970:	e004      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002972:	bf00      	nop
 8002974:	e002      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002976:	bf00      	nop
 8002978:	e000      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800297a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800297c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10b      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002984:	4ba3      	ldr	r3, [pc, #652]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002988:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002994:	4a9f      	ldr	r2, [pc, #636]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002996:	430b      	orrs	r3, r1
 8002998:	6593      	str	r3, [r2, #88]	; 0x58
 800299a:	e003      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80029b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80029ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80029be:	460b      	mov	r3, r1
 80029c0:	4313      	orrs	r3, r2
 80029c2:	d037      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80029c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ce:	d00e      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80029d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029d4:	d816      	bhi.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d018      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80029da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029de:	d111      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e0:	4b8c      	ldr	r3, [pc, #560]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e4:	4a8b      	ldr	r2, [pc, #556]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80029e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80029ec:	e00f      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029f2:	3308      	adds	r3, #8
 80029f4:	2101      	movs	r1, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	f001 f94c 	bl	8003c94 <RCCEx_PLL2_Config>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002a02:	e004      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a0a:	e000      	b.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002a0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002a16:	4b7f      	ldr	r3, [pc, #508]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a1a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a24:	4a7b      	ldr	r2, [pc, #492]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a26:	430b      	orrs	r3, r1
 8002a28:	6513      	str	r3, [r2, #80]	; 0x50
 8002a2a:	e003      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a30:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002a4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4313      	orrs	r3, r2
 8002a52:	d039      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5a:	2b03      	cmp	r3, #3
 8002a5c:	d81c      	bhi.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002aa1 	.word	0x08002aa1
 8002a68:	08002a75 	.word	0x08002a75
 8002a6c:	08002a83 	.word	0x08002a83
 8002a70:	08002aa1 	.word	0x08002aa1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a74:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a80:	e00f      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a86:	3308      	adds	r3, #8
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f001 f902 	bl	8003c94 <RCCEx_PLL2_Config>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002a96:	e004      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a9e:	e000      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10a      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002aaa:	4b5a      	ldr	r3, [pc, #360]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	f023 0103 	bic.w	r1, r3, #3
 8002ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab8:	4a56      	ldr	r2, [pc, #344]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002aba:	430b      	orrs	r3, r1
 8002abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abe:	e003      	b.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ac4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002ade:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f000 809f 	beq.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aea:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a4a      	ldr	r2, [pc, #296]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af6:	f7fe f89d 	bl	8000c34 <HAL_GetTick>
 8002afa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afe:	e00b      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7fe f898 	bl	8000c34 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d903      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b16:	e005      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ed      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d179      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b2c:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b38:	4053      	eors	r3, r2
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b42:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a30      	ldr	r2, [pc, #192]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5a:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002b66:	4a2b      	ldr	r2, [pc, #172]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b7a:	d118      	bne.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe f85a 	bl	8000c34 <HAL_GetTick>
 8002b80:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b84:	e00d      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe f855 	bl	8000c34 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b90:	1ad2      	subs	r2, r2, r3
 8002b92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d903      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0eb      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002bae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d129      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002bc6:	d10e      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bd8:	091a      	lsrs	r2, r3, #4
 8002bda:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6113      	str	r3, [r2, #16]
 8002be4:	e005      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bf0:	6113      	str	r3, [r2, #16]
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bfa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	e00e      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8002c12:	e009      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002c14:	58024400 	.word	0x58024400
 8002c18:	58024800 	.word	0x58024800
 8002c1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f002 0301 	and.w	r3, r2, #1
 8002c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4313      	orrs	r3, r2
 8002c46:	f000 8089 	beq.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c50:	2b28      	cmp	r3, #40	; 0x28
 8002c52:	d86b      	bhi.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002d35 	.word	0x08002d35
 8002c60:	08002d2d 	.word	0x08002d2d
 8002c64:	08002d2d 	.word	0x08002d2d
 8002c68:	08002d2d 	.word	0x08002d2d
 8002c6c:	08002d2d 	.word	0x08002d2d
 8002c70:	08002d2d 	.word	0x08002d2d
 8002c74:	08002d2d 	.word	0x08002d2d
 8002c78:	08002d2d 	.word	0x08002d2d
 8002c7c:	08002d01 	.word	0x08002d01
 8002c80:	08002d2d 	.word	0x08002d2d
 8002c84:	08002d2d 	.word	0x08002d2d
 8002c88:	08002d2d 	.word	0x08002d2d
 8002c8c:	08002d2d 	.word	0x08002d2d
 8002c90:	08002d2d 	.word	0x08002d2d
 8002c94:	08002d2d 	.word	0x08002d2d
 8002c98:	08002d2d 	.word	0x08002d2d
 8002c9c:	08002d17 	.word	0x08002d17
 8002ca0:	08002d2d 	.word	0x08002d2d
 8002ca4:	08002d2d 	.word	0x08002d2d
 8002ca8:	08002d2d 	.word	0x08002d2d
 8002cac:	08002d2d 	.word	0x08002d2d
 8002cb0:	08002d2d 	.word	0x08002d2d
 8002cb4:	08002d2d 	.word	0x08002d2d
 8002cb8:	08002d2d 	.word	0x08002d2d
 8002cbc:	08002d35 	.word	0x08002d35
 8002cc0:	08002d2d 	.word	0x08002d2d
 8002cc4:	08002d2d 	.word	0x08002d2d
 8002cc8:	08002d2d 	.word	0x08002d2d
 8002ccc:	08002d2d 	.word	0x08002d2d
 8002cd0:	08002d2d 	.word	0x08002d2d
 8002cd4:	08002d2d 	.word	0x08002d2d
 8002cd8:	08002d2d 	.word	0x08002d2d
 8002cdc:	08002d35 	.word	0x08002d35
 8002ce0:	08002d2d 	.word	0x08002d2d
 8002ce4:	08002d2d 	.word	0x08002d2d
 8002ce8:	08002d2d 	.word	0x08002d2d
 8002cec:	08002d2d 	.word	0x08002d2d
 8002cf0:	08002d2d 	.word	0x08002d2d
 8002cf4:	08002d2d 	.word	0x08002d2d
 8002cf8:	08002d2d 	.word	0x08002d2d
 8002cfc:	08002d35 	.word	0x08002d35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d04:	3308      	adds	r3, #8
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 ffc3 	bl	8003c94 <RCCEx_PLL2_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d14:	e00f      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1a:	3328      	adds	r3, #40	; 0x28
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f86a 	bl	8003df8 <RCCEx_PLL3_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002d2a:	e004      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d32:	e000      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10a      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d3e:	4bbf      	ldr	r3, [pc, #764]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4c:	4abb      	ldr	r2, [pc, #748]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002d4e:	430b      	orrs	r3, r1
 8002d50:	6553      	str	r3, [r2, #84]	; 0x54
 8002d52:	e003      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f002 0302 	and.w	r3, r2, #2
 8002d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002d72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002d76:	460b      	mov	r3, r1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	d041      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d82:	2b05      	cmp	r3, #5
 8002d84:	d824      	bhi.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002d86:	a201      	add	r2, pc, #4	; (adr r2, 8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d8c:	08002dd9 	.word	0x08002dd9
 8002d90:	08002da5 	.word	0x08002da5
 8002d94:	08002dbb 	.word	0x08002dbb
 8002d98:	08002dd9 	.word	0x08002dd9
 8002d9c:	08002dd9 	.word	0x08002dd9
 8002da0:	08002dd9 	.word	0x08002dd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da8:	3308      	adds	r3, #8
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 ff71 	bl	8003c94 <RCCEx_PLL2_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002db8:	e00f      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dbe:	3328      	adds	r3, #40	; 0x28
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f818 	bl	8003df8 <RCCEx_PLL3_Config>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002dce:	e004      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dd6:	e000      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002de2:	4b96      	ldr	r3, [pc, #600]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de6:	f023 0107 	bic.w	r1, r3, #7
 8002dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df0:	4a92      	ldr	r2, [pc, #584]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002df2:	430b      	orrs	r3, r1
 8002df4:	6553      	str	r3, [r2, #84]	; 0x54
 8002df6:	e003      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f002 0304 	and.w	r3, r2, #4
 8002e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	d044      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e28:	2b05      	cmp	r3, #5
 8002e2a:	d825      	bhi.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002e2c:	a201      	add	r2, pc, #4	; (adr r2, 8002e34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002e81 	.word	0x08002e81
 8002e38:	08002e4d 	.word	0x08002e4d
 8002e3c:	08002e63 	.word	0x08002e63
 8002e40:	08002e81 	.word	0x08002e81
 8002e44:	08002e81 	.word	0x08002e81
 8002e48:	08002e81 	.word	0x08002e81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e50:	3308      	adds	r3, #8
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 ff1d 	bl	8003c94 <RCCEx_PLL2_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e60:	e00f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e66:	3328      	adds	r3, #40	; 0x28
 8002e68:	2101      	movs	r1, #1
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 ffc4 	bl	8003df8 <RCCEx_PLL3_Config>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002e76:	e004      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e7e:	e000      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002e80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10b      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e8a:	4b6c      	ldr	r3, [pc, #432]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f023 0107 	bic.w	r1, r3, #7
 8002e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	4a68      	ldr	r2, [pc, #416]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f002 0320 	and.w	r3, r2, #32
 8002eb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	d055      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ed6:	d033      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8002ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002edc:	d82c      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d02f      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d826      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002eea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eee:	d02b      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8002ef0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ef4:	d820      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002ef6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002efa:	d012      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8002efc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f00:	d81a      	bhi.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d022      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8002f06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f0a:	d115      	bne.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f10:	3308      	adds	r3, #8
 8002f12:	2100      	movs	r1, #0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 febd 	bl	8003c94 <RCCEx_PLL2_Config>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f20:	e015      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f26:	3328      	adds	r3, #40	; 0x28
 8002f28:	2102      	movs	r1, #2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 ff64 	bl	8003df8 <RCCEx_PLL3_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002f36:	e00a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f3e:	e006      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f40:	bf00      	nop
 8002f42:	e004      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8002f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10b      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f56:	4b39      	ldr	r3, [pc, #228]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f66:	4a35      	ldr	r2, [pc, #212]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6553      	str	r3, [r2, #84]	; 0x54
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002f8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	d058      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fa2:	d033      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8002fa4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002fa8:	d82c      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fae:	d02f      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d826      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fba:	d02b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8002fbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fc0:	d820      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fc6:	d012      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8002fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fcc:	d81a      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d022      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8002fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fd6:	d115      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fdc:	3308      	adds	r3, #8
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fe57 	bl	8003c94 <RCCEx_PLL2_Config>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002fec:	e015      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff2:	3328      	adds	r3, #40	; 0x28
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fefe 	bl	8003df8 <RCCEx_PLL3_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003002:	e00a      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800300a:	e006      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800300c:	bf00      	nop
 800300e:	e004      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003010:	bf00      	nop
 8003012:	e002      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003014:	bf00      	nop
 8003016:	e000      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800301a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003022:	4b06      	ldr	r3, [pc, #24]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003026:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800302e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003032:	4a02      	ldr	r2, [pc, #8]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003034:	430b      	orrs	r3, r1
 8003036:	6593      	str	r3, [r2, #88]	; 0x58
 8003038:	e006      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800303a:	bf00      	nop
 800303c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800305e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	d055      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800306c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003070:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003074:	d033      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003076:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800307a:	d82c      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003080:	d02f      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003086:	d826      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003088:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800308c:	d02b      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800308e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003092:	d820      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003098:	d012      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800309a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800309e:	d81a      	bhi.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d022      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a8:	d115      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ae:	3308      	adds	r3, #8
 80030b0:	2100      	movs	r1, #0
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fdee 	bl	8003c94 <RCCEx_PLL2_Config>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030be:	e015      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c4:	3328      	adds	r3, #40	; 0x28
 80030c6:	2102      	movs	r1, #2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fe95 	bl	8003df8 <RCCEx_PLL3_Config>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80030d4:	e00a      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030dc:	e006      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030de:	bf00      	nop
 80030e0:	e004      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80030ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10b      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80030f4:	4ba1      	ldr	r3, [pc, #644]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80030f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80030fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003100:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003104:	4a9d      	ldr	r2, [pc, #628]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003106:	430b      	orrs	r3, r1
 8003108:	6593      	str	r3, [r2, #88]	; 0x58
 800310a:	e003      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800310c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003110:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003114:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311c:	f002 0308 	and.w	r3, r2, #8
 8003120:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003124:	2300      	movs	r3, #0
 8003126:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800312a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800312e:	460b      	mov	r3, r1
 8003130:	4313      	orrs	r3, r2
 8003132:	d01e      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003140:	d10c      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003146:	3328      	adds	r3, #40	; 0x28
 8003148:	2102      	movs	r1, #2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 fe54 	bl	8003df8 <RCCEx_PLL3_Config>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800315c:	4b87      	ldr	r3, [pc, #540]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800315e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003160:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316c:	4a83      	ldr	r2, [pc, #524]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f002 0310 	and.w	r3, r2, #16
 800317e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003182:	2300      	movs	r3, #0
 8003184:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003188:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800318c:	460b      	mov	r3, r1
 800318e:	4313      	orrs	r3, r2
 8003190:	d01e      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003196:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d10c      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a4:	3328      	adds	r3, #40	; 0x28
 80031a6:	2102      	movs	r1, #2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 fe25 	bl	8003df8 <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ba:	4b70      	ldr	r3, [pc, #448]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031ca:	4a6c      	ldr	r2, [pc, #432]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80031dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031e0:	2300      	movs	r3, #0
 80031e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80031ea:	460b      	mov	r3, r1
 80031ec:	4313      	orrs	r3, r2
 80031ee:	d03e      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80031f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031fc:	d022      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80031fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003202:	d81b      	bhi.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320c:	d00b      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800320e:	e015      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003214:	3308      	adds	r3, #8
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fd3b 	bl	8003c94 <RCCEx_PLL2_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003224:	e00f      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800322a:	3328      	adds	r3, #40	; 0x28
 800322c:	2102      	movs	r1, #2
 800322e:	4618      	mov	r0, r3
 8003230:	f000 fde2 	bl	8003df8 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800323a:	e004      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003246:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10b      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800324e:	4b4b      	ldr	r3, [pc, #300]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800325a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800325e:	4a47      	ldr	r2, [pc, #284]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003260:	430b      	orrs	r3, r1
 8003262:	6593      	str	r3, [r2, #88]	; 0x58
 8003264:	e003      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800326a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800327a:	67bb      	str	r3, [r7, #120]	; 0x78
 800327c:	2300      	movs	r3, #0
 800327e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003280:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003284:	460b      	mov	r3, r1
 8003286:	4313      	orrs	r3, r2
 8003288:	d03b      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800328a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003296:	d01f      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800329c:	d818      	bhi.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800329e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a2:	d003      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80032a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a8:	d007      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80032aa:	e011      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ac:	4b33      	ldr	r3, [pc, #204]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b0:	4a32      	ldr	r2, [pc, #200]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80032b8:	e00f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032be:	3328      	adds	r3, #40	; 0x28
 80032c0:	2101      	movs	r1, #1
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fd98 	bl	8003df8 <RCCEx_PLL3_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80032ce:	e004      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032d6:	e000      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80032d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10b      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032e2:	4b26      	ldr	r3, [pc, #152]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f2:	4a22      	ldr	r2, [pc, #136]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032f4:	430b      	orrs	r3, r1
 80032f6:	6553      	str	r3, [r2, #84]	; 0x54
 80032f8:	e003      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800330e:	673b      	str	r3, [r7, #112]	; 0x70
 8003310:	2300      	movs	r3, #0
 8003312:	677b      	str	r3, [r7, #116]	; 0x74
 8003314:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003318:	460b      	mov	r3, r1
 800331a:	4313      	orrs	r3, r2
 800331c:	d034      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	2b00      	cmp	r3, #0
 8003326:	d003      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d007      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800332e:	e011      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	4a11      	ldr	r2, [pc, #68]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800333c:	e00e      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003342:	3308      	adds	r3, #8
 8003344:	2102      	movs	r1, #2
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fca4 	bl	8003c94 <RCCEx_PLL2_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003352:	e003      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800335a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003372:	4a02      	ldr	r2, [pc, #8]	; (800337c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003374:	430b      	orrs	r3, r1
 8003376:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003378:	e006      	b.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800337a:	bf00      	nop
 800337c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003390:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003394:	66bb      	str	r3, [r7, #104]	; 0x68
 8003396:	2300      	movs	r3, #0
 8003398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800339a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800339e:	460b      	mov	r3, r1
 80033a0:	4313      	orrs	r3, r2
 80033a2:	d00c      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a8:	3328      	adds	r3, #40	; 0x28
 80033aa:	2102      	movs	r1, #2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 fd23 	bl	8003df8 <RCCEx_PLL3_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80033be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80033ca:	663b      	str	r3, [r7, #96]	; 0x60
 80033cc:	2300      	movs	r3, #0
 80033ce:	667b      	str	r3, [r7, #100]	; 0x64
 80033d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80033d4:	460b      	mov	r3, r1
 80033d6:	4313      	orrs	r3, r2
 80033d8:	d038      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e6:	d018      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80033e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ec:	d811      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80033ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f2:	d014      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80033f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033f8:	d80b      	bhi.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d011      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d106      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4bc3      	ldr	r3, [pc, #780]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4ac2      	ldr	r2, [pc, #776]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003410:	e008      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800341a:	bf00      	nop
 800341c:	e002      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800341e:	bf00      	nop
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003424:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10b      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800342c:	4bb9      	ldr	r3, [pc, #740]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003438:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343c:	4ab5      	ldr	r2, [pc, #724]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800343e:	430b      	orrs	r3, r1
 8003440:	6553      	str	r3, [r2, #84]	; 0x54
 8003442:	e003      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003448:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003458:	65bb      	str	r3, [r7, #88]	; 0x58
 800345a:	2300      	movs	r3, #0
 800345c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003462:	460b      	mov	r3, r1
 8003464:	4313      	orrs	r3, r2
 8003466:	d009      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003468:	4baa      	ldr	r3, [pc, #680]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003476:	4aa7      	ldr	r2, [pc, #668]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003478:	430b      	orrs	r3, r1
 800347a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003484:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003488:	653b      	str	r3, [r7, #80]	; 0x50
 800348a:	2300      	movs	r3, #0
 800348c:	657b      	str	r3, [r7, #84]	; 0x54
 800348e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003492:	460b      	mov	r3, r1
 8003494:	4313      	orrs	r3, r2
 8003496:	d00a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003498:	4b9e      	ldr	r3, [pc, #632]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80034a8:	4a9a      	ldr	r2, [pc, #616]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034aa:	430b      	orrs	r3, r1
 80034ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80034ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80034bc:	2300      	movs	r3, #0
 80034be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80034c4:	460b      	mov	r3, r1
 80034c6:	4313      	orrs	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034ca:	4b92      	ldr	r3, [pc, #584]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ce:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d8:	4a8e      	ldr	r2, [pc, #568]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034da:	430b      	orrs	r3, r1
 80034dc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80034ea:	643b      	str	r3, [r7, #64]	; 0x40
 80034ec:	2300      	movs	r3, #0
 80034ee:	647b      	str	r3, [r7, #68]	; 0x44
 80034f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80034f4:	460b      	mov	r3, r1
 80034f6:	4313      	orrs	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034fa:	4b86      	ldr	r3, [pc, #536]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	4a85      	ldr	r2, [pc, #532]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003500:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003504:	6113      	str	r3, [r2, #16]
 8003506:	4b83      	ldr	r3, [pc, #524]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003508:	6919      	ldr	r1, [r3, #16]
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003512:	4a80      	ldr	r2, [pc, #512]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003514:	430b      	orrs	r3, r1
 8003516:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
 8003526:	2300      	movs	r3, #0
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800352e:	460b      	mov	r3, r1
 8003530:	4313      	orrs	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003534:	4b77      	ldr	r3, [pc, #476]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003538:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800353c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003542:	4a74      	ldr	r2, [pc, #464]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003544:	430b      	orrs	r3, r1
 8003546:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003554:	633b      	str	r3, [r7, #48]	; 0x30
 8003556:	2300      	movs	r3, #0
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
 800355a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800355e:	460b      	mov	r3, r1
 8003560:	4313      	orrs	r3, r2
 8003562:	d00a      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003564:	4b6b      	ldr	r3, [pc, #428]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003574:	4a67      	ldr	r2, [pc, #412]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003576:	430b      	orrs	r3, r1
 8003578:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800357a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	2100      	movs	r1, #0
 8003584:	62b9      	str	r1, [r7, #40]	; 0x28
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003590:	460b      	mov	r3, r1
 8003592:	4313      	orrs	r3, r2
 8003594:	d011      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359a:	3308      	adds	r3, #8
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fb78 	bl	8003c94 <RCCEx_PLL2_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80035aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80035ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	2100      	movs	r1, #0
 80035c4:	6239      	str	r1, [r7, #32]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80035d0:	460b      	mov	r3, r1
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d011      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	3308      	adds	r3, #8
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fb58 	bl	8003c94 <RCCEx_PLL2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80035ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	2100      	movs	r1, #0
 8003604:	61b9      	str	r1, [r7, #24]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	61fb      	str	r3, [r7, #28]
 800360c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003610:	460b      	mov	r3, r1
 8003612:	4313      	orrs	r3, r2
 8003614:	d011      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800361a:	3308      	adds	r3, #8
 800361c:	2102      	movs	r1, #2
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fb38 	bl	8003c94 <RCCEx_PLL2_Config>
 8003624:	4603      	mov	r3, r0
 8003626:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800362a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003636:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800363a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	2100      	movs	r1, #0
 8003644:	6139      	str	r1, [r7, #16]
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003650:	460b      	mov	r3, r1
 8003652:	4313      	orrs	r3, r2
 8003654:	d011      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365a:	3328      	adds	r3, #40	; 0x28
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fbca 	bl	8003df8 <RCCEx_PLL3_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800366a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003676:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800367a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003682:	2100      	movs	r1, #0
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003690:	460b      	mov	r3, r1
 8003692:	4313      	orrs	r3, r2
 8003694:	d011      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369a:	3328      	adds	r3, #40	; 0x28
 800369c:	2101      	movs	r1, #1
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fbaa 	bl	8003df8 <RCCEx_PLL3_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80036aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c2:	2100      	movs	r1, #0
 80036c4:	6039      	str	r1, [r7, #0]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036d0:	460b      	mov	r3, r1
 80036d2:	4313      	orrs	r3, r2
 80036d4:	d011      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036da:	3328      	adds	r3, #40	; 0x28
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb8a 	bl	8003df8 <RCCEx_PLL3_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80036ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80036fa:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	e000      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
}
 8003708:	4618      	mov	r0, r3
 800370a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800370e:	46bd      	mov	sp, r7
 8003710:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003714:	58024400 	.word	0x58024400

08003718 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800371c:	f7fe fd96 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8003720:	4602      	mov	r2, r0
 8003722:	4b06      	ldr	r3, [pc, #24]	; (800373c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	091b      	lsrs	r3, r3, #4
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	4904      	ldr	r1, [pc, #16]	; (8003740 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800372e:	5ccb      	ldrb	r3, [r1, r3]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	58024400 	.word	0x58024400
 8003740:	080052a8 	.word	0x080052a8

08003744 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800374c:	4ba1      	ldr	r3, [pc, #644]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003756:	4b9f      	ldr	r3, [pc, #636]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	0b1b      	lsrs	r3, r3, #12
 800375c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003760:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003762:	4b9c      	ldr	r3, [pc, #624]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800376e:	4b99      	ldr	r3, [pc, #612]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	ee07 3a90 	vmov	s15, r3
 8003782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003786:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8111 	beq.w	80039b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2b02      	cmp	r3, #2
 8003796:	f000 8083 	beq.w	80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b02      	cmp	r3, #2
 800379e:	f200 80a1 	bhi.w	80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d056      	beq.n	800385c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80037ae:	e099      	b.n	80038e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037b0:	4b88      	ldr	r3, [pc, #544]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d02d      	beq.n	8003818 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037bc:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	08db      	lsrs	r3, r3, #3
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	4a84      	ldr	r2, [pc, #528]	; (80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	ee07 3a90 	vmov	s15, r3
 80037d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b7b      	ldr	r3, [pc, #492]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003816:	e087      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b6a      	ldr	r3, [pc, #424]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800382c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a03 	vldr	s12, [r7, #12]
 800383e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800385a:	e065      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b59      	ldr	r3, [pc, #356]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003882:	eddf 5a56 	vldr	s11, [pc, #344]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800389e:	e043      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80039e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b48      	ldr	r3, [pc, #288]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038e2:	e021      	b.n	8003928 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80039e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80038f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f6:	4b37      	ldr	r3, [pc, #220]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003906:	ed97 6a03 	vldr	s12, [r7, #12]
 800390a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80039dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800390e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800391a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003926:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003928:	4b2a      	ldr	r3, [pc, #168]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	0a5b      	lsrs	r3, r3, #9
 800392e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800393e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003942:	edd7 6a07 	vldr	s13, [r7, #28]
 8003946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800394a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800394e:	ee17 2a90 	vmov	r2, s15
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003956:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395a:	0c1b      	lsrs	r3, r3, #16
 800395c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	edd7 6a07 	vldr	s13, [r7, #28]
 8003974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003978:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397c:	ee17 2a90 	vmov	r2, s15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003984:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800399e:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039aa:	ee17 2a90 	vmov	r2, s15
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80039b2:	e008      	b.n	80039c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	609a      	str	r2, [r3, #8]
}
 80039c6:	bf00      	nop
 80039c8:	3724      	adds	r7, #36	; 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	58024400 	.word	0x58024400
 80039d8:	03d09000 	.word	0x03d09000
 80039dc:	46000000 	.word	0x46000000
 80039e0:	4c742400 	.word	0x4c742400
 80039e4:	4a742400 	.word	0x4a742400
 80039e8:	4bbebc20 	.word	0x4bbebc20

080039ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b089      	sub	sp, #36	; 0x24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039f4:	4ba1      	ldr	r3, [pc, #644]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80039fe:	4b9f      	ldr	r3, [pc, #636]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	0d1b      	lsrs	r3, r3, #20
 8003a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003a0a:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	0a1b      	lsrs	r3, r3, #8
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003a16:	4b99      	ldr	r3, [pc, #612]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	08db      	lsrs	r3, r3, #3
 8003a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	fb02 f303 	mul.w	r3, r2, r3
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8111 	beq.w	8003c5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	f000 8083 	beq.w	8003b48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	f200 80a1 	bhi.w	8003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d056      	beq.n	8003b04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003a56:	e099      	b.n	8003b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a58:	4b88      	ldr	r3, [pc, #544]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d02d      	beq.n	8003ac0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a64:	4b85      	ldr	r3, [pc, #532]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	08db      	lsrs	r3, r3, #3
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	4a84      	ldr	r2, [pc, #528]	; (8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003a70:	fa22 f303 	lsr.w	r3, r2, r3
 8003a74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8e:	4b7b      	ldr	r3, [pc, #492]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a96:	ee07 3a90 	vmov	s15, r3
 8003a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003abe:	e087      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ad2:	4b6a      	ldr	r3, [pc, #424]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b02:	e065      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b16:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b46:	e043      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003c90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b5a:	4b48      	ldr	r3, [pc, #288]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b8a:	e021      	b.n	8003bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003c8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba6:	ee07 3a90 	vmov	s15, r3
 8003baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003c84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd4:	0a5b      	lsrs	r3, r3, #9
 8003bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bda:	ee07 3a90 	vmov	s15, r3
 8003bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003be6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bea:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf6:	ee17 2a90 	vmov	r2, s15
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003bfe:	4b1f      	ldr	r3, [pc, #124]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	0c1b      	lsrs	r3, r3, #16
 8003c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c08:	ee07 3a90 	vmov	s15, r3
 8003c0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c18:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c24:	ee17 2a90 	vmov	r2, s15
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	0e1b      	lsrs	r3, r3, #24
 8003c32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c36:	ee07 3a90 	vmov	s15, r3
 8003c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c52:	ee17 2a90 	vmov	r2, s15
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003c5a:	e008      	b.n	8003c6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
}
 8003c6e:	bf00      	nop
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	03d09000 	.word	0x03d09000
 8003c84:	46000000 	.word	0x46000000
 8003c88:	4c742400 	.word	0x4c742400
 8003c8c:	4a742400 	.word	0x4a742400
 8003c90:	4bbebc20 	.word	0x4bbebc20

08003c94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ca2:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca6:	f003 0303 	and.w	r3, r3, #3
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d101      	bne.n	8003cb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e099      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a4e      	ldr	r2, [pc, #312]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cbe:	f7fc ffb9 	bl	8000c34 <HAL_GetTick>
 8003cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cc4:	e008      	b.n	8003cd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003cc6:	f7fc ffb5 	bl	8000c34 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e086      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	031b      	lsls	r3, r3, #12
 8003cf2:	493f      	ldr	r1, [pc, #252]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	628b      	str	r3, [r1, #40]	; 0x28
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	025b      	lsls	r3, r3, #9
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	041b      	lsls	r3, r3, #16
 8003d16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	3b01      	subs	r3, #1
 8003d22:	061b      	lsls	r3, r3, #24
 8003d24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d28:	4931      	ldr	r1, [pc, #196]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	492d      	ldr	r1, [pc, #180]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003d40:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f023 0220 	bic.w	r2, r3, #32
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4928      	ldr	r1, [pc, #160]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003d52:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	4a26      	ldr	r2, [pc, #152]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d58:	f023 0310 	bic.w	r3, r3, #16
 8003d5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d62:	4b24      	ldr	r3, [pc, #144]	; (8003df4 <RCCEx_PLL2_Config+0x160>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	69d2      	ldr	r2, [r2, #28]
 8003d6a:	00d2      	lsls	r2, r2, #3
 8003d6c:	4920      	ldr	r1, [pc, #128]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003d72:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d78:	f043 0310 	orr.w	r3, r3, #16
 8003d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d106      	bne.n	8003d92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003d84:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a19      	ldr	r2, [pc, #100]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003d90:	e00f      	b.n	8003db2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d106      	bne.n	8003da6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003da2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003da4:	e005      	b.n	8003db2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003daa:	4a11      	ldr	r2, [pc, #68]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003db0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a0e      	ldr	r2, [pc, #56]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003db8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbe:	f7fc ff39 	bl	8000c34 <HAL_GetTick>
 8003dc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dc4:	e008      	b.n	8003dd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dc6:	f7fc ff35 	bl	8000c34 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e006      	b.n	8003de6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <RCCEx_PLL2_Config+0x15c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0f0      	beq.n	8003dc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58024400 	.word	0x58024400
 8003df4:	ffff0007 	.word	0xffff0007

08003df8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e06:	4b53      	ldr	r3, [pc, #332]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	f003 0303 	and.w	r3, r3, #3
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d101      	bne.n	8003e16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e099      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003e16:	4b4f      	ldr	r3, [pc, #316]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a4e      	ldr	r2, [pc, #312]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e22:	f7fc ff07 	bl	8000c34 <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e28:	e008      	b.n	8003e3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003e2a:	f7fc ff03 	bl	8000c34 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e086      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003e3c:	4b45      	ldr	r3, [pc, #276]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003e48:	4b42      	ldr	r3, [pc, #264]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	051b      	lsls	r3, r3, #20
 8003e56:	493f      	ldr	r1, [pc, #252]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	025b      	lsls	r3, r3, #9
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e8c:	4931      	ldr	r1, [pc, #196]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003e92:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	492d      	ldr	r1, [pc, #180]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003ea4:	4b2b      	ldr	r3, [pc, #172]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	4928      	ldr	r1, [pc, #160]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003eb6:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ec2:	4b24      	ldr	r3, [pc, #144]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	4b24      	ldr	r3, [pc, #144]	; (8003f58 <RCCEx_PLL3_Config+0x160>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	69d2      	ldr	r2, [r2, #28]
 8003ece:	00d2      	lsls	r2, r2, #3
 8003ed0:	4920      	ldr	r1, [pc, #128]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	4a1e      	ldr	r2, [pc, #120]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ee8:	4b1a      	ldr	r3, [pc, #104]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4a19      	ldr	r2, [pc, #100]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ef2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ef4:	e00f      	b.n	8003f16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d106      	bne.n	8003f0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003efc:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	4a14      	ldr	r2, [pc, #80]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f02:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f08:	e005      	b.n	8003f16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	4a11      	ldr	r2, [pc, #68]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003f16:	4b0f      	ldr	r3, [pc, #60]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a0e      	ldr	r2, [pc, #56]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f22:	f7fc fe87 	bl	8000c34 <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f28:	e008      	b.n	8003f3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f2a:	f7fc fe83 	bl	8000c34 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d901      	bls.n	8003f3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e006      	b.n	8003f4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003f3c:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <RCCEx_PLL3_Config+0x15c>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0f0      	beq.n	8003f2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	58024400 	.word	0x58024400
 8003f58:	ffff0007 	.word	0xffff0007

08003f5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e042      	b.n	8003ff4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d106      	bne.n	8003f86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fc fc8d 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2224      	movs	r2, #36	; 0x24
 8003f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0201 	bic.w	r2, r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fe1e 	bl	8004be8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f8b3 	bl	8004118 <UART_SetConfig>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e01b      	b.n	8003ff4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 fe9d 	bl	8004d2c <UART_CheckIdleState>
 8003ff2:	4603      	mov	r3, r0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	; 0x28
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	2b20      	cmp	r3, #32
 8004014:	d17b      	bne.n	800410e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_UART_Transmit+0x26>
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e074      	b.n	8004110 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2221      	movs	r2, #33	; 0x21
 8004032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004036:	f7fc fdfd 	bl	8000c34 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004054:	d108      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d104      	bne.n	8004068 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800405e:	2300      	movs	r3, #0
 8004060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e003      	b.n	8004070 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004070:	e030      	b.n	80040d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 feff 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e03d      	b.n	8004110 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10b      	bne.n	80040b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	461a      	mov	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	3302      	adds	r3, #2
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	e007      	b.n	80040c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	781a      	ldrb	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80040da:	b29b      	uxth	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d1c8      	bne.n	8004072 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2200      	movs	r2, #0
 80040e8:	2140      	movs	r1, #64	; 0x40
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fec8 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2220      	movs	r2, #32
 80040fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e006      	b.n	8004110 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	e000      	b.n	8004110 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800410e:	2302      	movs	r3, #2
  }
}
 8004110:	4618      	mov	r0, r3
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800411c:	b092      	sub	sp, #72	; 0x48
 800411e:	af00      	add	r7, sp, #0
 8004120:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	431a      	orrs	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	431a      	orrs	r2, r3
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	69db      	ldr	r3, [r3, #28]
 800413c:	4313      	orrs	r3, r2
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4bbe      	ldr	r3, [pc, #760]	; (8004440 <UART_SetConfig+0x328>)
 8004148:	4013      	ands	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004150:	430b      	orrs	r3, r1
 8004152:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4ab3      	ldr	r2, [pc, #716]	; (8004444 <UART_SetConfig+0x32c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004180:	4313      	orrs	r3, r2
 8004182:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	4baf      	ldr	r3, [pc, #700]	; (8004448 <UART_SetConfig+0x330>)
 800418c:	4013      	ands	r3, r2
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	6812      	ldr	r2, [r2, #0]
 8004192:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004194:	430b      	orrs	r3, r1
 8004196:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	f023 010f 	bic.w	r1, r3, #15
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4aa6      	ldr	r2, [pc, #664]	; (800444c <UART_SetConfig+0x334>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d177      	bne.n	80042a8 <UART_SetConfig+0x190>
 80041b8:	4ba5      	ldr	r3, [pc, #660]	; (8004450 <UART_SetConfig+0x338>)
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041c0:	2b28      	cmp	r3, #40	; 0x28
 80041c2:	d86d      	bhi.n	80042a0 <UART_SetConfig+0x188>
 80041c4:	a201      	add	r2, pc, #4	; (adr r2, 80041cc <UART_SetConfig+0xb4>)
 80041c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ca:	bf00      	nop
 80041cc:	08004271 	.word	0x08004271
 80041d0:	080042a1 	.word	0x080042a1
 80041d4:	080042a1 	.word	0x080042a1
 80041d8:	080042a1 	.word	0x080042a1
 80041dc:	080042a1 	.word	0x080042a1
 80041e0:	080042a1 	.word	0x080042a1
 80041e4:	080042a1 	.word	0x080042a1
 80041e8:	080042a1 	.word	0x080042a1
 80041ec:	08004279 	.word	0x08004279
 80041f0:	080042a1 	.word	0x080042a1
 80041f4:	080042a1 	.word	0x080042a1
 80041f8:	080042a1 	.word	0x080042a1
 80041fc:	080042a1 	.word	0x080042a1
 8004200:	080042a1 	.word	0x080042a1
 8004204:	080042a1 	.word	0x080042a1
 8004208:	080042a1 	.word	0x080042a1
 800420c:	08004281 	.word	0x08004281
 8004210:	080042a1 	.word	0x080042a1
 8004214:	080042a1 	.word	0x080042a1
 8004218:	080042a1 	.word	0x080042a1
 800421c:	080042a1 	.word	0x080042a1
 8004220:	080042a1 	.word	0x080042a1
 8004224:	080042a1 	.word	0x080042a1
 8004228:	080042a1 	.word	0x080042a1
 800422c:	08004289 	.word	0x08004289
 8004230:	080042a1 	.word	0x080042a1
 8004234:	080042a1 	.word	0x080042a1
 8004238:	080042a1 	.word	0x080042a1
 800423c:	080042a1 	.word	0x080042a1
 8004240:	080042a1 	.word	0x080042a1
 8004244:	080042a1 	.word	0x080042a1
 8004248:	080042a1 	.word	0x080042a1
 800424c:	08004291 	.word	0x08004291
 8004250:	080042a1 	.word	0x080042a1
 8004254:	080042a1 	.word	0x080042a1
 8004258:	080042a1 	.word	0x080042a1
 800425c:	080042a1 	.word	0x080042a1
 8004260:	080042a1 	.word	0x080042a1
 8004264:	080042a1 	.word	0x080042a1
 8004268:	080042a1 	.word	0x080042a1
 800426c:	08004299 	.word	0x08004299
 8004270:	2301      	movs	r3, #1
 8004272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004276:	e222      	b.n	80046be <UART_SetConfig+0x5a6>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800427e:	e21e      	b.n	80046be <UART_SetConfig+0x5a6>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004286:	e21a      	b.n	80046be <UART_SetConfig+0x5a6>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800428e:	e216      	b.n	80046be <UART_SetConfig+0x5a6>
 8004290:	2320      	movs	r3, #32
 8004292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004296:	e212      	b.n	80046be <UART_SetConfig+0x5a6>
 8004298:	2340      	movs	r3, #64	; 0x40
 800429a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800429e:	e20e      	b.n	80046be <UART_SetConfig+0x5a6>
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042a6:	e20a      	b.n	80046be <UART_SetConfig+0x5a6>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a69      	ldr	r2, [pc, #420]	; (8004454 <UART_SetConfig+0x33c>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d130      	bne.n	8004314 <UART_SetConfig+0x1fc>
 80042b2:	4b67      	ldr	r3, [pc, #412]	; (8004450 <UART_SetConfig+0x338>)
 80042b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b6:	f003 0307 	and.w	r3, r3, #7
 80042ba:	2b05      	cmp	r3, #5
 80042bc:	d826      	bhi.n	800430c <UART_SetConfig+0x1f4>
 80042be:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x1ac>)
 80042c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c4:	080042dd 	.word	0x080042dd
 80042c8:	080042e5 	.word	0x080042e5
 80042cc:	080042ed 	.word	0x080042ed
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	080042fd 	.word	0x080042fd
 80042d8:	08004305 	.word	0x08004305
 80042dc:	2300      	movs	r3, #0
 80042de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e2:	e1ec      	b.n	80046be <UART_SetConfig+0x5a6>
 80042e4:	2304      	movs	r3, #4
 80042e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ea:	e1e8      	b.n	80046be <UART_SetConfig+0x5a6>
 80042ec:	2308      	movs	r3, #8
 80042ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f2:	e1e4      	b.n	80046be <UART_SetConfig+0x5a6>
 80042f4:	2310      	movs	r3, #16
 80042f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fa:	e1e0      	b.n	80046be <UART_SetConfig+0x5a6>
 80042fc:	2320      	movs	r3, #32
 80042fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004302:	e1dc      	b.n	80046be <UART_SetConfig+0x5a6>
 8004304:	2340      	movs	r3, #64	; 0x40
 8004306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430a:	e1d8      	b.n	80046be <UART_SetConfig+0x5a6>
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004312:	e1d4      	b.n	80046be <UART_SetConfig+0x5a6>
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a4f      	ldr	r2, [pc, #316]	; (8004458 <UART_SetConfig+0x340>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d130      	bne.n	8004380 <UART_SetConfig+0x268>
 800431e:	4b4c      	ldr	r3, [pc, #304]	; (8004450 <UART_SetConfig+0x338>)
 8004320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004322:	f003 0307 	and.w	r3, r3, #7
 8004326:	2b05      	cmp	r3, #5
 8004328:	d826      	bhi.n	8004378 <UART_SetConfig+0x260>
 800432a:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <UART_SetConfig+0x218>)
 800432c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004330:	08004349 	.word	0x08004349
 8004334:	08004351 	.word	0x08004351
 8004338:	08004359 	.word	0x08004359
 800433c:	08004361 	.word	0x08004361
 8004340:	08004369 	.word	0x08004369
 8004344:	08004371 	.word	0x08004371
 8004348:	2300      	movs	r3, #0
 800434a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434e:	e1b6      	b.n	80046be <UART_SetConfig+0x5a6>
 8004350:	2304      	movs	r3, #4
 8004352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004356:	e1b2      	b.n	80046be <UART_SetConfig+0x5a6>
 8004358:	2308      	movs	r3, #8
 800435a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435e:	e1ae      	b.n	80046be <UART_SetConfig+0x5a6>
 8004360:	2310      	movs	r3, #16
 8004362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004366:	e1aa      	b.n	80046be <UART_SetConfig+0x5a6>
 8004368:	2320      	movs	r3, #32
 800436a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436e:	e1a6      	b.n	80046be <UART_SetConfig+0x5a6>
 8004370:	2340      	movs	r3, #64	; 0x40
 8004372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004376:	e1a2      	b.n	80046be <UART_SetConfig+0x5a6>
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437e:	e19e      	b.n	80046be <UART_SetConfig+0x5a6>
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a35      	ldr	r2, [pc, #212]	; (800445c <UART_SetConfig+0x344>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d130      	bne.n	80043ec <UART_SetConfig+0x2d4>
 800438a:	4b31      	ldr	r3, [pc, #196]	; (8004450 <UART_SetConfig+0x338>)
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	2b05      	cmp	r3, #5
 8004394:	d826      	bhi.n	80043e4 <UART_SetConfig+0x2cc>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <UART_SetConfig+0x284>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	080043c5 	.word	0x080043c5
 80043a8:	080043cd 	.word	0x080043cd
 80043ac:	080043d5 	.word	0x080043d5
 80043b0:	080043dd 	.word	0x080043dd
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ba:	e180      	b.n	80046be <UART_SetConfig+0x5a6>
 80043bc:	2304      	movs	r3, #4
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c2:	e17c      	b.n	80046be <UART_SetConfig+0x5a6>
 80043c4:	2308      	movs	r3, #8
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ca:	e178      	b.n	80046be <UART_SetConfig+0x5a6>
 80043cc:	2310      	movs	r3, #16
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d2:	e174      	b.n	80046be <UART_SetConfig+0x5a6>
 80043d4:	2320      	movs	r3, #32
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043da:	e170      	b.n	80046be <UART_SetConfig+0x5a6>
 80043dc:	2340      	movs	r3, #64	; 0x40
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e2:	e16c      	b.n	80046be <UART_SetConfig+0x5a6>
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ea:	e168      	b.n	80046be <UART_SetConfig+0x5a6>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a1b      	ldr	r2, [pc, #108]	; (8004460 <UART_SetConfig+0x348>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d142      	bne.n	800447c <UART_SetConfig+0x364>
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <UART_SetConfig+0x338>)
 80043f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	2b05      	cmp	r3, #5
 8004400:	d838      	bhi.n	8004474 <UART_SetConfig+0x35c>
 8004402:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <UART_SetConfig+0x2f0>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004421 	.word	0x08004421
 800440c:	08004429 	.word	0x08004429
 8004410:	08004431 	.word	0x08004431
 8004414:	08004439 	.word	0x08004439
 8004418:	08004465 	.word	0x08004465
 800441c:	0800446d 	.word	0x0800446d
 8004420:	2300      	movs	r3, #0
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004426:	e14a      	b.n	80046be <UART_SetConfig+0x5a6>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442e:	e146      	b.n	80046be <UART_SetConfig+0x5a6>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004436:	e142      	b.n	80046be <UART_SetConfig+0x5a6>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443e:	e13e      	b.n	80046be <UART_SetConfig+0x5a6>
 8004440:	cfff69f3 	.word	0xcfff69f3
 8004444:	58000c00 	.word	0x58000c00
 8004448:	11fff4ff 	.word	0x11fff4ff
 800444c:	40011000 	.word	0x40011000
 8004450:	58024400 	.word	0x58024400
 8004454:	40004400 	.word	0x40004400
 8004458:	40004800 	.word	0x40004800
 800445c:	40004c00 	.word	0x40004c00
 8004460:	40005000 	.word	0x40005000
 8004464:	2320      	movs	r3, #32
 8004466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446a:	e128      	b.n	80046be <UART_SetConfig+0x5a6>
 800446c:	2340      	movs	r3, #64	; 0x40
 800446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004472:	e124      	b.n	80046be <UART_SetConfig+0x5a6>
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447a:	e120      	b.n	80046be <UART_SetConfig+0x5a6>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4acb      	ldr	r2, [pc, #812]	; (80047b0 <UART_SetConfig+0x698>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d176      	bne.n	8004574 <UART_SetConfig+0x45c>
 8004486:	4bcb      	ldr	r3, [pc, #812]	; (80047b4 <UART_SetConfig+0x69c>)
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800448e:	2b28      	cmp	r3, #40	; 0x28
 8004490:	d86c      	bhi.n	800456c <UART_SetConfig+0x454>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x380>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	0800453d 	.word	0x0800453d
 800449c:	0800456d 	.word	0x0800456d
 80044a0:	0800456d 	.word	0x0800456d
 80044a4:	0800456d 	.word	0x0800456d
 80044a8:	0800456d 	.word	0x0800456d
 80044ac:	0800456d 	.word	0x0800456d
 80044b0:	0800456d 	.word	0x0800456d
 80044b4:	0800456d 	.word	0x0800456d
 80044b8:	08004545 	.word	0x08004545
 80044bc:	0800456d 	.word	0x0800456d
 80044c0:	0800456d 	.word	0x0800456d
 80044c4:	0800456d 	.word	0x0800456d
 80044c8:	0800456d 	.word	0x0800456d
 80044cc:	0800456d 	.word	0x0800456d
 80044d0:	0800456d 	.word	0x0800456d
 80044d4:	0800456d 	.word	0x0800456d
 80044d8:	0800454d 	.word	0x0800454d
 80044dc:	0800456d 	.word	0x0800456d
 80044e0:	0800456d 	.word	0x0800456d
 80044e4:	0800456d 	.word	0x0800456d
 80044e8:	0800456d 	.word	0x0800456d
 80044ec:	0800456d 	.word	0x0800456d
 80044f0:	0800456d 	.word	0x0800456d
 80044f4:	0800456d 	.word	0x0800456d
 80044f8:	08004555 	.word	0x08004555
 80044fc:	0800456d 	.word	0x0800456d
 8004500:	0800456d 	.word	0x0800456d
 8004504:	0800456d 	.word	0x0800456d
 8004508:	0800456d 	.word	0x0800456d
 800450c:	0800456d 	.word	0x0800456d
 8004510:	0800456d 	.word	0x0800456d
 8004514:	0800456d 	.word	0x0800456d
 8004518:	0800455d 	.word	0x0800455d
 800451c:	0800456d 	.word	0x0800456d
 8004520:	0800456d 	.word	0x0800456d
 8004524:	0800456d 	.word	0x0800456d
 8004528:	0800456d 	.word	0x0800456d
 800452c:	0800456d 	.word	0x0800456d
 8004530:	0800456d 	.word	0x0800456d
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004565 	.word	0x08004565
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004542:	e0bc      	b.n	80046be <UART_SetConfig+0x5a6>
 8004544:	2304      	movs	r3, #4
 8004546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800454a:	e0b8      	b.n	80046be <UART_SetConfig+0x5a6>
 800454c:	2308      	movs	r3, #8
 800454e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004552:	e0b4      	b.n	80046be <UART_SetConfig+0x5a6>
 8004554:	2310      	movs	r3, #16
 8004556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800455a:	e0b0      	b.n	80046be <UART_SetConfig+0x5a6>
 800455c:	2320      	movs	r3, #32
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004562:	e0ac      	b.n	80046be <UART_SetConfig+0x5a6>
 8004564:	2340      	movs	r3, #64	; 0x40
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800456a:	e0a8      	b.n	80046be <UART_SetConfig+0x5a6>
 800456c:	2380      	movs	r3, #128	; 0x80
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004572:	e0a4      	b.n	80046be <UART_SetConfig+0x5a6>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a8f      	ldr	r2, [pc, #572]	; (80047b8 <UART_SetConfig+0x6a0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d130      	bne.n	80045e0 <UART_SetConfig+0x4c8>
 800457e:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <UART_SetConfig+0x69c>)
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b05      	cmp	r3, #5
 8004588:	d826      	bhi.n	80045d8 <UART_SetConfig+0x4c0>
 800458a:	a201      	add	r2, pc, #4	; (adr r2, 8004590 <UART_SetConfig+0x478>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	080045a9 	.word	0x080045a9
 8004594:	080045b1 	.word	0x080045b1
 8004598:	080045b9 	.word	0x080045b9
 800459c:	080045c1 	.word	0x080045c1
 80045a0:	080045c9 	.word	0x080045c9
 80045a4:	080045d1 	.word	0x080045d1
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ae:	e086      	b.n	80046be <UART_SetConfig+0x5a6>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b6:	e082      	b.n	80046be <UART_SetConfig+0x5a6>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045be:	e07e      	b.n	80046be <UART_SetConfig+0x5a6>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c6:	e07a      	b.n	80046be <UART_SetConfig+0x5a6>
 80045c8:	2320      	movs	r3, #32
 80045ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ce:	e076      	b.n	80046be <UART_SetConfig+0x5a6>
 80045d0:	2340      	movs	r3, #64	; 0x40
 80045d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d6:	e072      	b.n	80046be <UART_SetConfig+0x5a6>
 80045d8:	2380      	movs	r3, #128	; 0x80
 80045da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045de:	e06e      	b.n	80046be <UART_SetConfig+0x5a6>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a75      	ldr	r2, [pc, #468]	; (80047bc <UART_SetConfig+0x6a4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d130      	bne.n	800464c <UART_SetConfig+0x534>
 80045ea:	4b72      	ldr	r3, [pc, #456]	; (80047b4 <UART_SetConfig+0x69c>)
 80045ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	2b05      	cmp	r3, #5
 80045f4:	d826      	bhi.n	8004644 <UART_SetConfig+0x52c>
 80045f6:	a201      	add	r2, pc, #4	; (adr r2, 80045fc <UART_SetConfig+0x4e4>)
 80045f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fc:	08004615 	.word	0x08004615
 8004600:	0800461d 	.word	0x0800461d
 8004604:	08004625 	.word	0x08004625
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004635 	.word	0x08004635
 8004610:	0800463d 	.word	0x0800463d
 8004614:	2300      	movs	r3, #0
 8004616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461a:	e050      	b.n	80046be <UART_SetConfig+0x5a6>
 800461c:	2304      	movs	r3, #4
 800461e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004622:	e04c      	b.n	80046be <UART_SetConfig+0x5a6>
 8004624:	2308      	movs	r3, #8
 8004626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462a:	e048      	b.n	80046be <UART_SetConfig+0x5a6>
 800462c:	2310      	movs	r3, #16
 800462e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004632:	e044      	b.n	80046be <UART_SetConfig+0x5a6>
 8004634:	2320      	movs	r3, #32
 8004636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463a:	e040      	b.n	80046be <UART_SetConfig+0x5a6>
 800463c:	2340      	movs	r3, #64	; 0x40
 800463e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004642:	e03c      	b.n	80046be <UART_SetConfig+0x5a6>
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800464a:	e038      	b.n	80046be <UART_SetConfig+0x5a6>
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a5b      	ldr	r2, [pc, #364]	; (80047c0 <UART_SetConfig+0x6a8>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d130      	bne.n	80046b8 <UART_SetConfig+0x5a0>
 8004656:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <UART_SetConfig+0x69c>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	2b05      	cmp	r3, #5
 8004660:	d826      	bhi.n	80046b0 <UART_SetConfig+0x598>
 8004662:	a201      	add	r2, pc, #4	; (adr r2, 8004668 <UART_SetConfig+0x550>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	08004681 	.word	0x08004681
 800466c:	08004689 	.word	0x08004689
 8004670:	08004691 	.word	0x08004691
 8004674:	08004699 	.word	0x08004699
 8004678:	080046a1 	.word	0x080046a1
 800467c:	080046a9 	.word	0x080046a9
 8004680:	2302      	movs	r3, #2
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004686:	e01a      	b.n	80046be <UART_SetConfig+0x5a6>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468e:	e016      	b.n	80046be <UART_SetConfig+0x5a6>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e012      	b.n	80046be <UART_SetConfig+0x5a6>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469e:	e00e      	b.n	80046be <UART_SetConfig+0x5a6>
 80046a0:	2320      	movs	r3, #32
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a6:	e00a      	b.n	80046be <UART_SetConfig+0x5a6>
 80046a8:	2340      	movs	r3, #64	; 0x40
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ae:	e006      	b.n	80046be <UART_SetConfig+0x5a6>
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b6:	e002      	b.n	80046be <UART_SetConfig+0x5a6>
 80046b8:	2380      	movs	r3, #128	; 0x80
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3f      	ldr	r2, [pc, #252]	; (80047c0 <UART_SetConfig+0x6a8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	f040 80f8 	bne.w	80048ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	dc46      	bgt.n	8004760 <UART_SetConfig+0x648>
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	f2c0 8082 	blt.w	80047dc <UART_SetConfig+0x6c4>
 80046d8:	3b02      	subs	r3, #2
 80046da:	2b1e      	cmp	r3, #30
 80046dc:	d87e      	bhi.n	80047dc <UART_SetConfig+0x6c4>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x5cc>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	08004767 	.word	0x08004767
 80046e8:	080047dd 	.word	0x080047dd
 80046ec:	0800476f 	.word	0x0800476f
 80046f0:	080047dd 	.word	0x080047dd
 80046f4:	080047dd 	.word	0x080047dd
 80046f8:	080047dd 	.word	0x080047dd
 80046fc:	0800477f 	.word	0x0800477f
 8004700:	080047dd 	.word	0x080047dd
 8004704:	080047dd 	.word	0x080047dd
 8004708:	080047dd 	.word	0x080047dd
 800470c:	080047dd 	.word	0x080047dd
 8004710:	080047dd 	.word	0x080047dd
 8004714:	080047dd 	.word	0x080047dd
 8004718:	080047dd 	.word	0x080047dd
 800471c:	0800478f 	.word	0x0800478f
 8004720:	080047dd 	.word	0x080047dd
 8004724:	080047dd 	.word	0x080047dd
 8004728:	080047dd 	.word	0x080047dd
 800472c:	080047dd 	.word	0x080047dd
 8004730:	080047dd 	.word	0x080047dd
 8004734:	080047dd 	.word	0x080047dd
 8004738:	080047dd 	.word	0x080047dd
 800473c:	080047dd 	.word	0x080047dd
 8004740:	080047dd 	.word	0x080047dd
 8004744:	080047dd 	.word	0x080047dd
 8004748:	080047dd 	.word	0x080047dd
 800474c:	080047dd 	.word	0x080047dd
 8004750:	080047dd 	.word	0x080047dd
 8004754:	080047dd 	.word	0x080047dd
 8004758:	080047dd 	.word	0x080047dd
 800475c:	080047cf 	.word	0x080047cf
 8004760:	2b40      	cmp	r3, #64	; 0x40
 8004762:	d037      	beq.n	80047d4 <UART_SetConfig+0x6bc>
 8004764:	e03a      	b.n	80047dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004766:	f7fe ffd7 	bl	8003718 <HAL_RCCEx_GetD3PCLK1Freq>
 800476a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800476c:	e03c      	b.n	80047e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800476e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe ffe6 	bl	8003744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800477c:	e034      	b.n	80047e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800477e:	f107 0318 	add.w	r3, r7, #24
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff f932 	bl	80039ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800478c:	e02c      	b.n	80047e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800478e:	4b09      	ldr	r3, [pc, #36]	; (80047b4 <UART_SetConfig+0x69c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d016      	beq.n	80047c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800479a:	4b06      	ldr	r3, [pc, #24]	; (80047b4 <UART_SetConfig+0x69c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	08db      	lsrs	r3, r3, #3
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <UART_SetConfig+0x6ac>)
 80047a6:	fa22 f303 	lsr.w	r3, r2, r3
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047ac:	e01c      	b.n	80047e8 <UART_SetConfig+0x6d0>
 80047ae:	bf00      	nop
 80047b0:	40011400 	.word	0x40011400
 80047b4:	58024400 	.word	0x58024400
 80047b8:	40007800 	.word	0x40007800
 80047bc:	40007c00 	.word	0x40007c00
 80047c0:	58000c00 	.word	0x58000c00
 80047c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b9d      	ldr	r3, [pc, #628]	; (8004a40 <UART_SetConfig+0x928>)
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047cc:	e00c      	b.n	80047e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047ce:	4b9d      	ldr	r3, [pc, #628]	; (8004a44 <UART_SetConfig+0x92c>)
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047d2:	e009      	b.n	80047e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047da:	e005      	b.n	80047e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80047e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 81de 	beq.w	8004bac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	4a94      	ldr	r2, [pc, #592]	; (8004a48 <UART_SetConfig+0x930>)
 80047f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004802:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	4613      	mov	r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4413      	add	r3, r2
 800480e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004810:	429a      	cmp	r2, r3
 8004812:	d305      	bcc.n	8004820 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800481a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800481c:	429a      	cmp	r2, r3
 800481e:	d903      	bls.n	8004828 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004826:	e1c1      	b.n	8004bac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482a:	2200      	movs	r2, #0
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	60fa      	str	r2, [r7, #12]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	4a84      	ldr	r2, [pc, #528]	; (8004a48 <UART_SetConfig+0x930>)
 8004836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800483a:	b29b      	uxth	r3, r3
 800483c:	2200      	movs	r2, #0
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	607a      	str	r2, [r7, #4]
 8004842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004846:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800484a:	f7fb fd45 	bl	80002d8 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f04f 0200 	mov.w	r2, #0
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	020b      	lsls	r3, r1, #8
 8004860:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004864:	0202      	lsls	r2, r0, #8
 8004866:	6979      	ldr	r1, [r7, #20]
 8004868:	6849      	ldr	r1, [r1, #4]
 800486a:	0849      	lsrs	r1, r1, #1
 800486c:	2000      	movs	r0, #0
 800486e:	460c      	mov	r4, r1
 8004870:	4605      	mov	r5, r0
 8004872:	eb12 0804 	adds.w	r8, r2, r4
 8004876:	eb43 0905 	adc.w	r9, r3, r5
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	469a      	mov	sl, r3
 8004882:	4693      	mov	fp, r2
 8004884:	4652      	mov	r2, sl
 8004886:	465b      	mov	r3, fp
 8004888:	4640      	mov	r0, r8
 800488a:	4649      	mov	r1, r9
 800488c:	f7fb fd24 	bl	80002d8 <__aeabi_uldivmod>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	4613      	mov	r3, r2
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489e:	d308      	bcc.n	80048b2 <UART_SetConfig+0x79a>
 80048a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a6:	d204      	bcs.n	80048b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048ae:	60da      	str	r2, [r3, #12]
 80048b0:	e17c      	b.n	8004bac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80048b8:	e178      	b.n	8004bac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048c2:	f040 80c5 	bne.w	8004a50 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80048c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	dc48      	bgt.n	8004960 <UART_SetConfig+0x848>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	db7b      	blt.n	80049ca <UART_SetConfig+0x8b2>
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d879      	bhi.n	80049ca <UART_SetConfig+0x8b2>
 80048d6:	a201      	add	r2, pc, #4	; (adr r2, 80048dc <UART_SetConfig+0x7c4>)
 80048d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048dc:	08004967 	.word	0x08004967
 80048e0:	0800496f 	.word	0x0800496f
 80048e4:	080049cb 	.word	0x080049cb
 80048e8:	080049cb 	.word	0x080049cb
 80048ec:	08004977 	.word	0x08004977
 80048f0:	080049cb 	.word	0x080049cb
 80048f4:	080049cb 	.word	0x080049cb
 80048f8:	080049cb 	.word	0x080049cb
 80048fc:	08004987 	.word	0x08004987
 8004900:	080049cb 	.word	0x080049cb
 8004904:	080049cb 	.word	0x080049cb
 8004908:	080049cb 	.word	0x080049cb
 800490c:	080049cb 	.word	0x080049cb
 8004910:	080049cb 	.word	0x080049cb
 8004914:	080049cb 	.word	0x080049cb
 8004918:	080049cb 	.word	0x080049cb
 800491c:	08004997 	.word	0x08004997
 8004920:	080049cb 	.word	0x080049cb
 8004924:	080049cb 	.word	0x080049cb
 8004928:	080049cb 	.word	0x080049cb
 800492c:	080049cb 	.word	0x080049cb
 8004930:	080049cb 	.word	0x080049cb
 8004934:	080049cb 	.word	0x080049cb
 8004938:	080049cb 	.word	0x080049cb
 800493c:	080049cb 	.word	0x080049cb
 8004940:	080049cb 	.word	0x080049cb
 8004944:	080049cb 	.word	0x080049cb
 8004948:	080049cb 	.word	0x080049cb
 800494c:	080049cb 	.word	0x080049cb
 8004950:	080049cb 	.word	0x080049cb
 8004954:	080049cb 	.word	0x080049cb
 8004958:	080049cb 	.word	0x080049cb
 800495c:	080049bd 	.word	0x080049bd
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d02e      	beq.n	80049c2 <UART_SetConfig+0x8aa>
 8004964:	e031      	b.n	80049ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004966:	f7fd fca1 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800496a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800496c:	e033      	b.n	80049d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800496e:	f7fd fcb3 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8004972:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004974:	e02f      	b.n	80049d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fee2 	bl	8003744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004984:	e027      	b.n	80049d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004986:	f107 0318 	add.w	r3, r7, #24
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff f82e 	bl	80039ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004994:	e01f      	b.n	80049d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004996:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <UART_SetConfig+0x934>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d009      	beq.n	80049b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80049a2:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <UART_SetConfig+0x934>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	08db      	lsrs	r3, r3, #3
 80049a8:	f003 0303 	and.w	r3, r3, #3
 80049ac:	4a24      	ldr	r2, [pc, #144]	; (8004a40 <UART_SetConfig+0x928>)
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80049b4:	e00f      	b.n	80049d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80049b6:	4b22      	ldr	r3, [pc, #136]	; (8004a40 <UART_SetConfig+0x928>)
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ba:	e00c      	b.n	80049d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80049bc:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <UART_SetConfig+0x92c>)
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049c0:	e009      	b.n	80049d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049c8:	e005      	b.n	80049d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80049d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 80e7 	beq.w	8004bac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	4a19      	ldr	r2, [pc, #100]	; (8004a48 <UART_SetConfig+0x930>)
 80049e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e8:	461a      	mov	r2, r3
 80049ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f0:	005a      	lsls	r2, r3, #1
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	085b      	lsrs	r3, r3, #1
 80049f8:	441a      	add	r2, r3
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a02:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a06:	2b0f      	cmp	r3, #15
 8004a08:	d916      	bls.n	8004a38 <UART_SetConfig+0x920>
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a10:	d212      	bcs.n	8004a38 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f023 030f 	bic.w	r3, r3, #15
 8004a1a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004a34:	60da      	str	r2, [r3, #12]
 8004a36:	e0b9      	b.n	8004bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004a3e:	e0b5      	b.n	8004bac <UART_SetConfig+0xa94>
 8004a40:	03d09000 	.word	0x03d09000
 8004a44:	003d0900 	.word	0x003d0900
 8004a48:	080052b8 	.word	0x080052b8
 8004a4c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a54:	2b20      	cmp	r3, #32
 8004a56:	dc49      	bgt.n	8004aec <UART_SetConfig+0x9d4>
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	db7c      	blt.n	8004b56 <UART_SetConfig+0xa3e>
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d87a      	bhi.n	8004b56 <UART_SetConfig+0xa3e>
 8004a60:	a201      	add	r2, pc, #4	; (adr r2, 8004a68 <UART_SetConfig+0x950>)
 8004a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a66:	bf00      	nop
 8004a68:	08004af3 	.word	0x08004af3
 8004a6c:	08004afb 	.word	0x08004afb
 8004a70:	08004b57 	.word	0x08004b57
 8004a74:	08004b57 	.word	0x08004b57
 8004a78:	08004b03 	.word	0x08004b03
 8004a7c:	08004b57 	.word	0x08004b57
 8004a80:	08004b57 	.word	0x08004b57
 8004a84:	08004b57 	.word	0x08004b57
 8004a88:	08004b13 	.word	0x08004b13
 8004a8c:	08004b57 	.word	0x08004b57
 8004a90:	08004b57 	.word	0x08004b57
 8004a94:	08004b57 	.word	0x08004b57
 8004a98:	08004b57 	.word	0x08004b57
 8004a9c:	08004b57 	.word	0x08004b57
 8004aa0:	08004b57 	.word	0x08004b57
 8004aa4:	08004b57 	.word	0x08004b57
 8004aa8:	08004b23 	.word	0x08004b23
 8004aac:	08004b57 	.word	0x08004b57
 8004ab0:	08004b57 	.word	0x08004b57
 8004ab4:	08004b57 	.word	0x08004b57
 8004ab8:	08004b57 	.word	0x08004b57
 8004abc:	08004b57 	.word	0x08004b57
 8004ac0:	08004b57 	.word	0x08004b57
 8004ac4:	08004b57 	.word	0x08004b57
 8004ac8:	08004b57 	.word	0x08004b57
 8004acc:	08004b57 	.word	0x08004b57
 8004ad0:	08004b57 	.word	0x08004b57
 8004ad4:	08004b57 	.word	0x08004b57
 8004ad8:	08004b57 	.word	0x08004b57
 8004adc:	08004b57 	.word	0x08004b57
 8004ae0:	08004b57 	.word	0x08004b57
 8004ae4:	08004b57 	.word	0x08004b57
 8004ae8:	08004b49 	.word	0x08004b49
 8004aec:	2b40      	cmp	r3, #64	; 0x40
 8004aee:	d02e      	beq.n	8004b4e <UART_SetConfig+0xa36>
 8004af0:	e031      	b.n	8004b56 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004af2:	f7fd fbdb 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8004af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004af8:	e033      	b.n	8004b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004afa:	f7fd fbed 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8004afe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b00:	e02f      	b.n	8004b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe fe1c 	bl	8003744 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b10:	e027      	b.n	8004b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b12:	f107 0318 	add.w	r3, r7, #24
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe ff68 	bl	80039ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b20:	e01f      	b.n	8004b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b22:	4b2d      	ldr	r3, [pc, #180]	; (8004bd8 <UART_SetConfig+0xac0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d009      	beq.n	8004b42 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b2e:	4b2a      	ldr	r3, [pc, #168]	; (8004bd8 <UART_SetConfig+0xac0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	08db      	lsrs	r3, r3, #3
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <UART_SetConfig+0xac4>)
 8004b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b40:	e00f      	b.n	8004b62 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004b42:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <UART_SetConfig+0xac4>)
 8004b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b46:	e00c      	b.n	8004b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <UART_SetConfig+0xac8>)
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b4c:	e009      	b.n	8004b62 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b54:	e005      	b.n	8004b62 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004b56:	2300      	movs	r3, #0
 8004b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004b60:	bf00      	nop
    }

    if (pclk != 0U)
 8004b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d021      	beq.n	8004bac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <UART_SetConfig+0xacc>)
 8004b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b76:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	441a      	add	r2, r3
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	2b0f      	cmp	r3, #15
 8004b90:	d909      	bls.n	8004ba6 <UART_SetConfig+0xa8e>
 8004b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b98:	d205      	bcs.n	8004ba6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60da      	str	r2, [r3, #12]
 8004ba4:	e002      	b.n	8004bac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004bc8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3748      	adds	r7, #72	; 0x48
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	03d09000 	.word	0x03d09000
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	080052b8 	.word	0x080052b8

08004be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	f003 0308 	and.w	r3, r3, #8
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d10a      	bne.n	8004cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b098      	sub	sp, #96	; 0x60
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d3c:	f7fb ff7a 	bl	8000c34 <HAL_GetTick>
 8004d40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d12f      	bne.n	8004db0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f88e 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d022      	beq.n	8004db0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e063      	b.n	8004e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d149      	bne.n	8004e52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f857 	bl	8004e80 <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d03c      	beq.n	8004e52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	e853 3f00 	ldrex	r3, [r3]
 8004de4:	623b      	str	r3, [r7, #32]
   return(result);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df6:	633b      	str	r3, [r7, #48]	; 0x30
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dfe:	e841 2300 	strex	r3, r2, [r1]
 8004e02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1e6      	bne.n	8004dd8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3308      	adds	r3, #8
 8004e28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e2a:	61fa      	str	r2, [r7, #28]
 8004e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2e:	69b9      	ldr	r1, [r7, #24]
 8004e30:	69fa      	ldr	r2, [r7, #28]
 8004e32:	e841 2300 	strex	r3, r2, [r1]
 8004e36:	617b      	str	r3, [r7, #20]
   return(result);
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1e5      	bne.n	8004e0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e012      	b.n	8004e78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3758      	adds	r7, #88	; 0x58
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e90:	e04f      	b.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e98:	d04b      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e9a:	f7fb fecb 	bl	8000c34 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e04e      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0304 	and.w	r3, r3, #4
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d037      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b80      	cmp	r3, #128	; 0x80
 8004ec6:	d034      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b40      	cmp	r3, #64	; 0x40
 8004ecc:	d031      	beq.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d110      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2208      	movs	r2, #8
 8004ee2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f839 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2208      	movs	r2, #8
 8004eee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e029      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0c:	d111      	bne.n	8004f32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f000 f81f 	bl	8004f5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e00f      	b.n	8004f52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	bf0c      	ite	eq
 8004f42:	2301      	moveq	r3, #1
 8004f44:	2300      	movne	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d0a0      	beq.n	8004e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b095      	sub	sp, #84	; 0x54
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	e853 3f00 	ldrex	r3, [r3]
 8004f70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f82:	643b      	str	r3, [r7, #64]	; 0x40
 8004f84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1e6      	bne.n	8004f64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	4b1e      	ldr	r3, [pc, #120]	; (8005024 <UART_EndRxTransfer+0xc8>)
 8004faa:	4013      	ands	r3, r2
 8004fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	3308      	adds	r3, #8
 8004fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e5      	bne.n	8004f96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d118      	bne.n	8005004 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ff0:	61bb      	str	r3, [r7, #24]
 8004ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	6979      	ldr	r1, [r7, #20]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2220      	movs	r2, #32
 8005008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005018:	bf00      	nop
 800501a:	3754      	adds	r7, #84	; 0x54
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr
 8005024:	effffffe 	.word	0xeffffffe

08005028 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_UARTEx_DisableFifoMode+0x16>
 800503a:	2302      	movs	r3, #2
 800503c:	e027      	b.n	800508e <HAL_UARTEx_DisableFifoMode+0x66>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2224      	movs	r2, #36	; 0x24
 800504a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0201 	bic.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800506c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d101      	bne.n	80050b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050ae:	2302      	movs	r3, #2
 80050b0:	e02d      	b.n	800510e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2224      	movs	r2, #36	; 0x24
 80050be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	683a      	ldr	r2, [r7, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f850 	bl	8005194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800512a:	2302      	movs	r3, #2
 800512c:	e02d      	b.n	800518a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	; 0x24
 800513a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f000 f812 	bl	8005194 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d108      	bne.n	80051b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80051b4:	e031      	b.n	800521a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80051b6:	2310      	movs	r3, #16
 80051b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80051ba:	2310      	movs	r3, #16
 80051bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	0e5b      	lsrs	r3, r3, #25
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	0f5b      	lsrs	r3, r3, #29
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051de:	7bbb      	ldrb	r3, [r7, #14]
 80051e0:	7b3a      	ldrb	r2, [r7, #12]
 80051e2:	4911      	ldr	r1, [pc, #68]	; (8005228 <UARTEx_SetNbDataToProcess+0x94>)
 80051e4:	5c8a      	ldrb	r2, [r1, r2]
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051ea:	7b3a      	ldrb	r2, [r7, #12]
 80051ec:	490f      	ldr	r1, [pc, #60]	; (800522c <UARTEx_SetNbDataToProcess+0x98>)
 80051ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	7b7a      	ldrb	r2, [r7, #13]
 8005200:	4909      	ldr	r1, [pc, #36]	; (8005228 <UARTEx_SetNbDataToProcess+0x94>)
 8005202:	5c8a      	ldrb	r2, [r1, r2]
 8005204:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005208:	7b7a      	ldrb	r2, [r7, #13]
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <UARTEx_SetNbDataToProcess+0x98>)
 800520c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800520e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800521a:	bf00      	nop
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	080052d0 	.word	0x080052d0
 800522c:	080052d8 	.word	0x080052d8

08005230 <memset>:
 8005230:	4402      	add	r2, r0
 8005232:	4603      	mov	r3, r0
 8005234:	4293      	cmp	r3, r2
 8005236:	d100      	bne.n	800523a <memset+0xa>
 8005238:	4770      	bx	lr
 800523a:	f803 1b01 	strb.w	r1, [r3], #1
 800523e:	e7f9      	b.n	8005234 <memset+0x4>

08005240 <__libc_init_array>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	4d0d      	ldr	r5, [pc, #52]	; (8005278 <__libc_init_array+0x38>)
 8005244:	4c0d      	ldr	r4, [pc, #52]	; (800527c <__libc_init_array+0x3c>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	2600      	movs	r6, #0
 800524c:	42a6      	cmp	r6, r4
 800524e:	d109      	bne.n	8005264 <__libc_init_array+0x24>
 8005250:	4d0b      	ldr	r5, [pc, #44]	; (8005280 <__libc_init_array+0x40>)
 8005252:	4c0c      	ldr	r4, [pc, #48]	; (8005284 <__libc_init_array+0x44>)
 8005254:	f000 f818 	bl	8005288 <_init>
 8005258:	1b64      	subs	r4, r4, r5
 800525a:	10a4      	asrs	r4, r4, #2
 800525c:	2600      	movs	r6, #0
 800525e:	42a6      	cmp	r6, r4
 8005260:	d105      	bne.n	800526e <__libc_init_array+0x2e>
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	f855 3b04 	ldr.w	r3, [r5], #4
 8005268:	4798      	blx	r3
 800526a:	3601      	adds	r6, #1
 800526c:	e7ee      	b.n	800524c <__libc_init_array+0xc>
 800526e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005272:	4798      	blx	r3
 8005274:	3601      	adds	r6, #1
 8005276:	e7f2      	b.n	800525e <__libc_init_array+0x1e>
 8005278:	080052e8 	.word	0x080052e8
 800527c:	080052e8 	.word	0x080052e8
 8005280:	080052e8 	.word	0x080052e8
 8005284:	080052ec 	.word	0x080052ec

08005288 <_init>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr

08005294 <_fini>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr
