
racecar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ea8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08017148  08017148  00027148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017a2c  08017a2c  00027a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08017a34  08017a34  00027a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017a40  08017a40  00027a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000021c  24000000  08017a44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004580  2400021c  08017c60  0003021c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400479c  08017c60  0003479c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003024a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002f650  00000000  00000000  0003028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004848  00000000  00000000  0005f8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ed0  00000000  00000000  00064128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001809  00000000  00000000  00065ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f810  00000000  00000000  00067801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025091  00000000  00000000  000a7011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018673a  00000000  00000000  000cc0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000094fc  00000000  00000000  002527dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  0025bcd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400021c 	.word	0x2400021c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017130 	.word	0x08017130

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000220 	.word	0x24000220
 80002dc:	08017130 	.word	0x08017130

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <_ZL6millisv>:

static inline uint32_t micros(void){
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

static inline uint32_t millis(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_ZL6millisv+0x24>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL6millisv+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <_ZL6millisv+0x2c>)
 800069a:	fba1 1303 	umull	r1, r3, r1, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	24000044 	.word	0x24000044
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>:
#include <jy901/JY901_Control.h>
#include <jy901/JY901_Serial.h>
#include <string.h>
#include "utility.h"

CJY901::CJY901(UART_HandleTypeDef* huart) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	_huart=huart;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  _lastTime = millis();
 80006cc:	f7ff ffde 	bl	800068c <_ZL6millisv>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN6CJY9019parseDataEPh>:


bool CJY901::parseData(uint8_t* rxBuffer) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]

  // do sum check to confirm data is not corrupted
  uint8_t sum = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <_ZN6CJY9019parseDataEPh+0x28>
    sum += rxBuffer[cnt];
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4413      	add	r3, r2
 8000700:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2b09      	cmp	r3, #9
 800070c:	d9f2      	bls.n	80006f4 <_ZN6CJY9019parseDataEPh+0x14>
  if (sum != rxBuffer[10])
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	330a      	adds	r3, #10
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	429a      	cmp	r2, r3
 8000718:	d001      	beq.n	800071e <_ZN6CJY9019parseDataEPh+0x3e>
    return false;
 800071a:	2300      	movs	r3, #0
 800071c:	e0a5      	b.n	800086a <_ZN6CJY9019parseDataEPh+0x18a>

  switch (rxBuffer[1]) {  // these cases are based on Manual p26,27,28,29 and 30
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b50      	subs	r3, #80	; 0x50
 8000726:	2b0a      	cmp	r3, #10
 8000728:	f200 8099 	bhi.w	800085e <_ZN6CJY9019parseDataEPh+0x17e>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <_ZN6CJY9019parseDataEPh+0x54>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	08000761 	.word	0x08000761
 8000738:	08000775 	.word	0x08000775
 800073c:	08000789 	.word	0x08000789
 8000740:	0800079d 	.word	0x0800079d
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007c5 	.word	0x080007c5
 800074c:	080007d9 	.word	0x080007d9
 8000750:	080007f3 	.word	0x080007f3
 8000754:	0800080d 	.word	0x0800080d
 8000758:	08000837 	.word	0x08000837
 800075c:	0800084b 	.word	0x0800084b
    case 0x50:
      memcpy(&JY901_data.time, &rxBuffer[2], 8);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	2208      	movs	r2, #8
 800076c:	4619      	mov	r1, r3
 800076e:	f015 f830 	bl	80157d2 <memcpy>
      break;  // time
 8000772:	e074      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x51:
      memcpy(&JY901_data.acc, &rxBuffer[2], 8);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3302      	adds	r3, #2
 800077e:	2208      	movs	r2, #8
 8000780:	4619      	mov	r1, r3
 8000782:	f015 f826 	bl	80157d2 <memcpy>
      break;  // acceleration
 8000786:	e06a      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x52:
      memcpy(&JY901_data.gyro, &rxBuffer[2], 8);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	2208      	movs	r2, #8
 8000794:	4619      	mov	r1, r3
 8000796:	f015 f81c 	bl	80157d2 <memcpy>
      break;  // angular velocity
 800079a:	e060      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x53:
      memcpy(&JY901_data.angle, &rxBuffer[2], 8);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3302      	adds	r3, #2
 80007a6:	2208      	movs	r2, #8
 80007a8:	4619      	mov	r1, r3
 80007aa:	f015 f812 	bl	80157d2 <memcpy>
      break;  // angle
 80007ae:	e056      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x54:
      memcpy(&JY901_data.mag, &rxBuffer[2], 8);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	f015 f808 	bl	80157d2 <memcpy>
      break;  // magnetic field and temperature
 80007c2:	e04c      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x55:
      memcpy(&JY901_data.dStatus, &rxBuffer[2], 8);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	2208      	movs	r2, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	f014 fffe 	bl	80157d2 <memcpy>
      break;  // D port status
 80007d6:	e042      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x56:
      memcpy(&JY901_data.pressure, &rxBuffer[2], 4);  // pressure
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	335c      	adds	r3, #92	; 0x5c
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	3202      	adds	r2, #2
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.altitude, &rxBuffer[6], 4);  // altitude
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3360      	adds	r3, #96	; 0x60
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	3206      	adds	r2, #6
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	601a      	str	r2, [r3, #0]
      break;
 80007f0:	e035      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x57:
      memcpy(&JY901_data.lon, &rxBuffer[2], 4);  // longtitude
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3364      	adds	r3, #100	; 0x64
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	3202      	adds	r2, #2
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.lat, &rxBuffer[6], 4);  // latitude
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3368      	adds	r3, #104	; 0x68
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	3206      	adds	r2, #6
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	601a      	str	r2, [r3, #0]
      break;
 800080a:	e028      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x58:
      memcpy(&JY901_data.GPSHeight, &rxBuffer[2], 2);    //
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	336c      	adds	r3, #108	; 0x6c
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	3202      	adds	r2, #2
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	b292      	uxth	r2, r2
 8000818:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSYaw, &rxBuffer[4], 2);       // GPS data
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	336e      	adds	r3, #110	; 0x6e
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	3204      	adds	r2, #4
 8000822:	8812      	ldrh	r2, [r2, #0]
 8000824:	b292      	uxth	r2, r2
 8000826:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSVelocity, &rxBuffer[6], 4);  //
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3370      	adds	r3, #112	; 0x70
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	3206      	adds	r2, #6
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	601a      	str	r2, [r3, #0]
      break;
 8000834:	e013      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x59:
      memcpy(&JY901_data.quater, &rxBuffer[2], 8);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3302      	adds	r3, #2
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	f014 ffc5 	bl	80157d2 <memcpy>
      break;  // quaternion
 8000848:	e009      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x5A:
      memcpy(&JY901_data.GPS_DOP, &rxBuffer[2], 8);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3302      	adds	r3, #2
 8000854:	2208      	movs	r2, #8
 8000856:	4619      	mov	r1, r3
 8000858:	f014 ffbb 	bl	80157d2 <memcpy>
      break;  // GPS DOP
 800085c:	bf00      	nop
  }
  _lastTime = millis();  // last receive time
 800085e:	f7ff ff15 	bl	800068c <_ZL6millisv>
 8000862:	4602      	mov	r2, r0
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  return true;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0000      	movs	r0, r0
	...

08000878 <_ZN6CJY9017getAccXEv>:
double CJY901::getTemp() {
  return JY901_data.mag.temperature /
         100.0;  // are all the data(from mag acc gyro) same?
}  // may need further test

double CJY901::getAccX() {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.x / (32768.0 / 16.0);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800088e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008a8 <_ZN6CJY9017getAccXEv+0x30>
 8000892:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000896:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccX() unit: G(gravity)
 800089a:	eeb0 0b47 	vmov.f64	d0, d7
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	00000000 	.word	0x00000000
 80008ac:	40a00000 	.word	0x40a00000

080008b0 <_ZN6CJY9017getAccYEv>:

double CJY901::getAccY() {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.y / (32768.0 / 16.0);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008c6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008e0 <_ZN6CJY9017getAccYEv+0x30>
 80008ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80008ce:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccY() unit: G(gravity)
 80008d2:	eeb0 0b47 	vmov.f64	d0, d7
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40a00000 	.word	0x40a00000

080008e8 <_ZN6CJY9017getAccZEv>:

double CJY901::getAccZ() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.z / (32768.0 / 16.0);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008fe:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000918 <_ZN6CJY9017getAccZEv+0x30>
 8000902:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000906:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccZ() unit: G(gravity)
 800090a:	eeb0 0b47 	vmov.f64	d0, d7
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	00000000 	.word	0x00000000
 800091c:	40a00000 	.word	0x40a00000

08000920 <_ZN6CJY9018getGyroXEv>:

double CJY901::getGyroX() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.x / (32768.0 / 2000.0);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000936:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000950 <_ZN6CJY9018getGyroXEv+0x30>
 800093a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800093e:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroX() unit: degree(s) per second
 8000942:	eeb0 0b47 	vmov.f64	d0, d7
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	d2f1a9fc 	.word	0xd2f1a9fc
 8000954:	4030624d 	.word	0x4030624d

08000958 <_ZN6CJY9018getGyroYEv>:

double CJY901::getGyroY() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.y / (32768.0 / 2000.0);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800096e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000988 <_ZN6CJY9018getGyroYEv+0x30>
 8000972:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000976:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroY() unit: degree(s) per second
 800097a:	eeb0 0b47 	vmov.f64	d0, d7
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	d2f1a9fc 	.word	0xd2f1a9fc
 800098c:	4030624d 	.word	0x4030624d

08000990 <_ZN6CJY9018getGyroZEv>:

double CJY901::getGyroZ() {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.z / (32768.0 / 2000.0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009a6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009c0 <_ZN6CJY9018getGyroZEv+0x30>
 80009aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80009ae:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroZ() unit: degree(s) per second
 80009b2:	eeb0 0b47 	vmov.f64	d0, d7
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009c4:	4030624d 	.word	0x4030624d

080009c8 <_ZN6CJY9017getRollEv>:

/* -- Noticed that The Euler angles' order here is ---- */
/* ----------- Z-Y-X, for more please visit ----------- */
/* --- http://web.mit.edu/2.05/www/Handout/HO2.PDF ---- */
double CJY901::getRoll() {  // X-axis
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.roll / (32768.0 / 180.0);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009de:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009f8 <_ZN6CJY9017getRollEv+0x30>
 80009e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80009e6:	eeb0 7b45 	vmov.f64	d7, d5
}  // getRoll() unit: degree(s)
 80009ea:	eeb0 0b47 	vmov.f64	d0, d7
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	16c16c17 	.word	0x16c16c17
 80009fc:	4066c16c 	.word	0x4066c16c

08000a00 <_ZN6CJY9018getPitchEv>:

double CJY901::getPitch() {  // Y-axis
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.pitch / (32768.0 / 180.0);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a16:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a30 <_ZN6CJY9018getPitchEv+0x30>
 8000a1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000a1e:	eeb0 7b45 	vmov.f64	d7, d5
}  // getPitch() unit: degree(s)
 8000a22:	eeb0 0b47 	vmov.f64	d0, d7
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	16c16c17 	.word	0x16c16c17
 8000a34:	4066c16c 	.word	0x4066c16c

08000a38 <_ZN6CJY9016getYawEv>:

double CJY901::getYaw() {  // Z-axis
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.yaw / (32768.0 / 180.0);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a68 <_ZN6CJY9016getYawEv+0x30>
 8000a52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000a56:	eeb0 7b45 	vmov.f64	d7, d5
}  // getYaw() unit: degree(s)
 8000a5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	16c16c17 	.word	0x16c16c17
 8000a6c:	4066c16c 	.word	0x4066c16c

08000a70 <_Z41__static_initialization_and_destruction_0ii>:
	  HAL_UART_Transmit(_huart, JY901_GPSBAUDRATE, 5, 10);
  }
  //Serial1.write(JY901_GPSBAUDRATE, 5);
}

CJY901 JY901;
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d103      	bne.n	8000a92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000a8e:	f7ff fe15 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000238 	.word	0x24000238

08000aa0 <_GLOBAL__sub_I_JY901_SAVECONF>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffe1 	bl	8000a70 <_Z41__static_initialization_and_destruction_0ii>
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_ZN3PIDIfEC1EPfS1_S1_fffh>:

template <typename T>
PID<T>::PID() { }

template <typename T>
PID<T>::PID(T *input, T *output, T *setpoint, T kp, T ki, T kd,uint8_t add_input)
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	61f8      	str	r0, [r7, #28]
 8000ab8:	61b9      	str	r1, [r7, #24]
 8000aba:	617a      	str	r2, [r7, #20]
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ac2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ac6:	ed87 1a01 	vstr	s2, [r7, #4]
{
	output_   = output;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	619a      	str	r2, [r3, #24]
	input_    = input;
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	615a      	str	r2, [r3, #20]
	setpoint_ = setpoint;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	61da      	str	r2, [r3, #28]
//	mode_     = PID_MODE_MANUAL;
	
	PID<T>::set_tunings(kp, ki, kd, add_input);
 8000adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	ed97 1a01 	vldr	s2, [r7, #4]
 8000ae6:	edd7 0a02 	vldr	s1, [r7, #8]
 8000aea:	ed97 0a03 	vldr	s0, [r7, #12]
 8000aee:	69f8      	ldr	r0, [r7, #28]
 8000af0:	f000 f80a 	bl	8000b08 <_ZN3PIDIfE11set_tuningsEfffh>
	
	last_time_ = HAL_GetTick();
 8000af4:	f006 fc2e 	bl	8007354 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	605a      	str	r2, [r3, #4]
}
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	4618      	mov	r0, r3
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_ZN3PIDIfE11set_tuningsEfffh>:
}



template <typename T>
void PID<T>::set_tunings(T kp, T ki, T kd, uint8_t add_input)
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6178      	str	r0, [r7, #20]
 8000b10:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b14:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b18:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
{
	kp_=kp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	609a      	str	r2, [r3, #8]
	ki_=ki;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	60da      	str	r2, [r3, #12]
	kd_=kd;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	611a      	str	r2, [r3, #16]
	add_input_error_to_proportional_=add_input;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	2238      	movs	r2, #56	; 0x38
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f014 fd69 	bl	801562c <memset>
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 8000b6c:	f107 0408 	add.w	r4, r7, #8
 8000b70:	461d      	mov	r5, r3
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b7a:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 0120 	add.w	r1, r7, #32
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8000b8a:	f00b fd9a 	bl	800c6c2 <HAL_QSPI_AutoPolling>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b98:	e000      	b.n	8000b9c <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3758      	adds	r7, #88	; 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba4:	08017148 	.word	0x08017148
 8000ba8:	2400195c 	.word	0x2400195c

08000bac <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2238      	movs	r2, #56	; 0x38
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f014 fd36 	bl	801562c <memset>
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000bd6:	f00b fbe7 	bl	800c3a8 <HAL_QSPI_Command>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be4:	e023      	b.n	8000c2e <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8000bec:	2305      	movs	r3, #5
 8000bee:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8000bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <QSPI_W25Q64JV_WriteEnable+0x90>)
 8000c00:	463c      	mov	r4, r7
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c0c:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c10:	463a      	mov	r2, r7
 8000c12:	f107 0118 	add.w	r1, r7, #24
 8000c16:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000c1c:	f00b fd51 	bl	800c6c2 <HAL_QSPI_AutoPolling>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2a:	e000      	b.n	8000c2e <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3750      	adds	r7, #80	; 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bdb0      	pop	{r4, r5, r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2400195c 	.word	0x2400195c
 8000c3c:	08017160 	.word	0x08017160

08000c40 <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000c56:	463b      	mov	r3, r7
 8000c58:	2238      	movs	r2, #56	; 0x38
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f014 fce5 	bl	801562c <memset>
 8000c62:	2366      	movs	r3, #102	; 0x66
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c72:	4619      	mov	r1, r3
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <QSPI_W25Q64JV_Reset+0x78>)
 8000c76:	f00b fb97 	bl	800c3a8 <HAL_QSPI_Command>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c84:	e01c      	b.n	8000cc0 <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8a:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8000c8c:	2399      	movs	r3, #153	; 0x99
 8000c8e:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c90:	463b      	mov	r3, r7
 8000c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <QSPI_W25Q64JV_Reset+0x78>)
 8000c9a:	f00b fb85 	bl	800c3a8 <HAL_QSPI_Command>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	e00a      	b.n	8000cc0 <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000caa:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cae:	f7ff ff49 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbc:	e000      	b.n	8000cc0 <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2400195c 	.word	0x2400195c

08000ccc <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000cd4:	f7ff ff6a 	bl	8000bac <QSPI_W25Q64JV_WriteEnable>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce2:	e02c      	b.n	8000d3e <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	2238      	movs	r2, #56	; 0x38
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f014 fc9d 	bl	801562c <memset>
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d04:	623b      	str	r3, [r7, #32]
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <QSPI_W25Q64JV_EraseSector+0x7c>)
 8000d18:	f00b fb46 	bl	800c3a8 <HAL_QSPI_Command>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d26:	e00a      	b.n	8000d3e <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d28:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d2c:	f7ff ff0a 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	e000      	b.n	8000d3e <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3740      	adds	r7, #64	; 0x40
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2400195c 	.word	0x2400195c

08000d4c <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b092      	sub	sp, #72	; 0x48
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d58:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d5c:	f7ff fef2 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e044      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2238      	movs	r2, #56	; 0x38
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f014 fc59 	bl	801562c <memset>
 8000d7a:	23eb      	movs	r3, #235	; 0xeb
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	23f0      	movs	r3, #240	; 0xf0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
 8000da2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db4:	4619      	mov	r1, r3
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <QSPI_W25Q64JV_Read+0xb4>)
 8000db8:	f00b faf6 	bl	800c3a8 <HAL_QSPI_Command>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	e016      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <QSPI_W25Q64JV_Read+0xb4>)
 8000dd0:	f00b fbda 	bl	800c588 <HAL_QSPI_Receive>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	e00a      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000de0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000de4:	f7ff feae 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df2:	e000      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3748      	adds	r7, #72	; 0x48
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2400195c 	.word	0x2400195c

08000e04 <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b092      	sub	sp, #72	; 0x48
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e10:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e14:	f7ff fe96 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e22:	e045      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000e24:	f7ff fec2 	bl	8000bac <QSPI_W25Q64JV_WriteEnable>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e32:	e03d      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2238      	movs	r2, #56	; 0x38
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f014 fbf5 	bl	801562c <memset>
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000e72:	f00b fa99 	bl	800c3a8 <HAL_QSPI_Command>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e80:	e016      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	68f9      	ldr	r1, [r7, #12]
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000e8a:	f00b faeb 	bl	800c464 <HAL_QSPI_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e98:	e00a      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e9e:	f7ff fe51 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eac:	e000      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3748      	adds	r7, #72	; 0x48
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400195c 	.word	0x2400195c

08000ebc <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000ed4:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d801      	bhi.n	8000ee2 <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f7ff ff8c 	bl	8000e04 <QSPI_W25Q64JV_PageProgram>
 8000eec:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d117      	bne.n	8000f24 <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d013      	beq.n	8000f24 <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	4413      	add	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f1a:	bf28      	it	cs
 8000f1c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000f20:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000f22:	e7de      	b.n	8000ee2 <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8000f24:	693b      	ldr	r3, [r7, #16]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	0b1b      	lsrs	r3, r3, #12
 8000f44:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4e:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8000f50:	8afb      	ldrh	r3, [r7, #22]
 8000f52:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000f56:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8000f58:	8abb      	ldrh	r3, [r7, #20]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d801      	bhi.n	8000f64 <QSPI_W25Q64JV_Write+0x34>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	031b      	lsls	r3, r3, #12
 8000f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4835      	ldr	r0, [pc, #212]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000f70:	f7ff feec 	bl	8000d4c <QSPI_W25Q64JV_Read>
 8000f74:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d157      	bne.n	800102c <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	e009      	b.n	8000f96 <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000f82:	8afa      	ldrh	r2, [r7, #22]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a2e      	ldr	r2, [pc, #184]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d107      	bne.n	8000fa0 <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	3301      	adds	r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	8abb      	ldrh	r3, [r7, #20]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3f1      	bcc.n	8000f82 <QSPI_W25Q64JV_Write+0x52>
 8000f9e:	e000      	b.n	8000fa2 <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000fa0:	bf00      	nop
        }
        if (i < secremain) {
 8000fa2:	8abb      	ldrh	r3, [r7, #20]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d21d      	bcs.n	8000fe6 <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	031b      	lsls	r3, r3, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe8c 	bl	8000ccc <QSPI_W25Q64JV_EraseSector>
 8000fb4:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d139      	bne.n	8001030 <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	8aba      	ldrh	r2, [r7, #20]
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f014 fc03 	bl	80157d2 <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000fd8:	f7ff ff70 	bl	8000ebc <QSPI_W25Q64JV_Write_NoCheck>
 8000fdc:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00a      	beq.n	8000ffa <QSPI_W25Q64JV_Write+0xca>
 8000fe4:	e029      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 8000fe6:	8abb      	ldrh	r3, [r7, #20]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f7ff ff65 	bl	8000ebc <QSPI_W25Q64JV_Write_NoCheck>
 8000ff2:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d11c      	bne.n	8001034 <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 8000ffa:	8abb      	ldrh	r3, [r7, #20]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d01a      	beq.n	8001038 <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	3301      	adds	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 800100c:	8abb      	ldrh	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8001014:	8abb      	ldrh	r3, [r7, #20]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 800101c:	8abb      	ldrh	r3, [r7, #20]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 800102a:	e795      	b.n	8000f58 <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 800102c:	bf00      	nop
 800102e:	e004      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 8001038:	bf00      	nop
    }
    return ret;
 800103a:	69fb      	ldr	r3, [r7, #28]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	240002bc 	.word	0x240002bc

08001048 <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2238      	movs	r2, #56	; 0x38
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f014 fae7 	bl	801562c <memset>
 800105e:	2390      	movs	r3, #144	; 0x90
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107a:	2302      	movs	r3, #2
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	f241 3288 	movw	r2, #5000	; 0x1388
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <QSPI_W25Q64JV_DeviceID+0x74>)
 800108a:	f00b f98d 	bl	800c3a8 <HAL_QSPI_Command>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001098:	e00c      	b.n	80010b4 <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800109a:	f241 3288 	movw	r2, #5000	; 0x1388
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <QSPI_W25Q64JV_DeviceID+0x74>)
 80010a2:	f00b fa71 	bl	800c588 <HAL_QSPI_Receive>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b0:	e000      	b.n	80010b4 <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3740      	adds	r7, #64	; 0x40
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2400195c 	.word	0x2400195c

080010c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010c8:	1d39      	adds	r1, r7, #4
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	2201      	movs	r2, #1
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <__io_putchar+0x20>)
 80010d2:	f011 fac3 	bl	801265c <HAL_UART_Transmit>
  return ch;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24001564 	.word	0x24001564

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f006 f8ae 	bl	8007248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f828 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f000 fe7a 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f4:	f000 fe30 	bl	8001d58 <MX_DMA_Init>
  MX_BDMA_Init();
 80010f8:	f000 fe0e 	bl	8001d18 <MX_BDMA_Init>
  MX_UART8_Init();
 80010fc:	f000 fada 	bl	80016b4 <MX_UART8_Init>
  MX_UART4_Init();
 8001100:	f000 f9f4 	bl	80014ec <MX_UART4_Init>
  MX_QUADSPI_Init();
 8001104:	f000 fb22 	bl	800174c <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8001108:	f000 f896 	bl	8001238 <MX_ADC1_Init>
  MX_UART5_Init();
 800110c:	f000 fa3a 	bl	8001584 <MX_UART5_Init>
  MX_UART7_Init();
 8001110:	f000 fa84 	bl	800161c <MX_UART7_Init>
  MX_LPUART1_UART_Init();
 8001114:	f000 f99c 	bl	8001450 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001118:	f000 fb44 	bl	80017a4 <MX_TIM2_Init>
  MX_TIM16_Init();
 800111c:	f000 fdd4 	bl	8001cc8 <MX_TIM16_Init>
  MX_TIM3_Init();
 8001120:	f000 fbd8 	bl	80018d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001124:	f000 fc58 	bl	80019d8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001128:	f000 fd2c 	bl	8001b84 <MX_TIM15_Init>
  MX_IWDG1_Init();
 800112c:	f000 f972 	bl	8001414 <MX_IWDG1_Init>
  MX_TIM6_Init();
 8001130:	f000 fcf0 	bl	8001b14 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001134:	f003 ff2c 	bl	8004f90 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001138:	f003 ff54 	bl	8004fe4 <loop>
  {
 800113c:	e7fc      	b.n	8001138 <main+0x54>
	...

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	; 0x70
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	224c      	movs	r2, #76	; 0x4c
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f014 fa6c 	bl	801562c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2220      	movs	r2, #32
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f014 fa66 	bl	801562c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001160:	2002      	movs	r0, #2
 8001162:	f00b f873 	bl	800c24c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <SystemClock_Config+0xf0>)
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	4a30      	ldr	r2, [pc, #192]	; (8001230 <SystemClock_Config+0xf0>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <SystemClock_Config+0xf0>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <SystemClock_Config+0xf4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <SystemClock_Config+0xf4>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <SystemClock_Config+0xf4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001198:	bf00      	nop
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <SystemClock_Config+0xf4>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a6:	d1f8      	bne.n	800119a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011a8:	2309      	movs	r3, #9
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80011be:	2305      	movs	r3, #5
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011d2:	2308      	movs	r3, #8
 80011d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00b fcb0 	bl	800cb48 <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011ee:	f000 fec1 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	233f      	movs	r3, #63	; 0x3f
 80011f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f6:	2303      	movs	r3, #3
 80011f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011fe:	2308      	movs	r3, #8
 8001200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001206:	2350      	movs	r3, #80	; 0x50
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800120a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800120e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001210:	2350      	movs	r3, #80	; 0x50
 8001212:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f00c f8ef 	bl	800d3fc <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001224:	f000 fea6 	bl	8001f74 <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3770      	adds	r7, #112	; 0x70
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	58000400 	.word	0x58000400
 8001234:	58024800 	.word	0x58024800

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125c:	4b63      	ldr	r3, [pc, #396]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800125e:	4a64      	ldr	r2, [pc, #400]	; (80013f0 <MX_ADC1_Init+0x1b8>)
 8001260:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001264:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001268:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001272:	2201      	movs	r2, #1
 8001274:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001278:	2204      	movs	r2, #4
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001282:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001284:	2201      	movs	r2, #1
 8001286:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800128a:	2208      	movs	r2, #8
 800128c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001290:	2200      	movs	r2, #0
 8001292:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001294:	4b55      	ldr	r3, [pc, #340]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012a2:	2203      	movs	r2, #3
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ba:	484c      	ldr	r0, [pc, #304]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012bc:	f006 fa8e 	bl	80077dc <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012c6:	f000 fe55 	bl	8001f74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012d6:	f007 fd1b 	bl	8008d10 <HAL_ADCEx_MultiModeConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012e0:	f000 fe48 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <MX_ADC1_Init+0x1bc>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e8:	2306      	movs	r3, #6
 80012ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80012ec:	2304      	movs	r3, #4
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f6:	2304      	movs	r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4839      	ldr	r0, [pc, #228]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001308:	f006 ff30 	bl	800816c <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001312:	f000 fe2f 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <MX_ADC1_Init+0x1c0>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800131a:	230c      	movs	r3, #12
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4832      	ldr	r0, [pc, #200]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001324:	f006 ff22 	bl	800816c <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800132e:	f000 fe21 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <MX_ADC1_Init+0x1c4>)
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001336:	2312      	movs	r3, #18
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	482b      	ldr	r0, [pc, #172]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001340:	f006 ff14 	bl	800816c <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800134a:	f000 fe13 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_ADC1_Init+0x1c8>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001352:	2318      	movs	r3, #24
 8001354:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800135c:	f006 ff06 	bl	800816c <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001366:	f000 fe05 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_ADC1_Init+0x1cc>)
 800136c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800137a:	f006 fef7 	bl	800816c <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001384:	f000 fdf6 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_ADC1_Init+0x1d0>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800138c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4815      	ldr	r0, [pc, #84]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001398:	f006 fee8 	bl	800816c <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80013a2:	f000 fde7 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_ADC1_Init+0x1d4>)
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013aa:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80013b6:	f006 fed9 	bl	800816c <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80013c0:	f000 fdd8 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_ADC1_Init+0x1d8>)
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013c8:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80013d4:	f006 feca 	bl	800816c <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80013de:	f000 fdc9 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	240012bc 	.word	0x240012bc
 80013f0:	40022000 	.word	0x40022000
 80013f4:	0c900008 	.word	0x0c900008
 80013f8:	10c00010 	.word	0x10c00010
 80013fc:	14f00020 	.word	0x14f00020
 8001400:	21800100 	.word	0x21800100
 8001404:	25b00200 	.word	0x25b00200
 8001408:	2a000400 	.word	0x2a000400
 800140c:	2e300800 	.word	0x2e300800
 8001410:	4b840000 	.word	0x4b840000

08001414 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_IWDG1_Init+0x34>)
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <MX_IWDG1_Init+0x38>)
 800141c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_IWDG1_Init+0x34>)
 8001420:	2203      	movs	r2, #3
 8001422:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 1999;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_IWDG1_Init+0x34>)
 8001426:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800142a:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 1999;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_IWDG1_Init+0x34>)
 800142e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001432:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_IWDG1_Init+0x34>)
 8001436:	f00a feaa 	bl	800c18e <HAL_IWDG_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001440:	f000 fd98 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	24001398 	.word	0x24001398
 800144c:	58004800 	.word	0x58004800

08001450 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <MX_LPUART1_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <MX_LPUART1_UART_Init+0x98>)
 800145e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001474:	220c      	movs	r2, #12
 8001476:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001498:	f011 f890 	bl	80125bc <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80014a2:	f000 fd67 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 80014aa:	f013 f84d 	bl	8014548 <HAL_UARTEx_SetTxFifoThreshold>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80014b4:	f000 fd5e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 80014bc:	f013 f882 	bl	80145c4 <HAL_UARTEx_SetRxFifoThreshold>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80014c6:	f000 fd55 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 80014cc:	f013 f803 	bl	80144d6 <HAL_UARTEx_DisableFifoMode>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80014d6:	f000 fd4d 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	240013a8 	.word	0x240013a8
 80014e4:	58000c00 	.word	0x58000c00
 80014e8:	00033324 	.word	0x00033324

080014ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_UART4_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_UART4_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_UART4_Init+0x90>)
 80014f8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80014fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_UART4_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_UART4_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_UART4_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_UART4_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_UART4_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_UART4_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_UART4_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_UART4_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_UART4_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_UART4_Init+0x90>)
 8001536:	f011 f841 	bl	80125bc <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 fd18 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_UART4_Init+0x90>)
 8001548:	f012 fffe 	bl	8014548 <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 fd0f 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_UART4_Init+0x90>)
 800155a:	f013 f833 	bl	80145c4 <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 fd06 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_UART4_Init+0x90>)
 800156a:	f012 ffb4 	bl	80144d6 <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 fcfe 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2400143c 	.word	0x2400143c
 8001580:	40004c00 	.word	0x40004c00

08001584 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_UART5_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_UART5_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_UART5_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_UART5_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_UART5_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_UART5_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_UART5_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_UART5_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_UART5_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_UART5_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_UART5_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_UART5_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_UART5_Init+0x90>)
 80015ce:	f010 fff5 	bl	80125bc <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 fccc 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_UART5_Init+0x90>)
 80015e0:	f012 ffb2 	bl	8014548 <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 fcc3 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <MX_UART5_Init+0x90>)
 80015f2:	f012 ffe7 	bl	80145c4 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 fcba 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_UART5_Init+0x90>)
 8001602:	f012 ff68 	bl	80144d6 <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 fcb2 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	240014d0 	.word	0x240014d0
 8001618:	40005000 	.word	0x40005000

0800161c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_UART7_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <MX_UART7_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_UART7_Init+0x90>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_UART7_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_UART7_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_UART7_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_UART7_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_UART7_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_UART7_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_UART7_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_UART7_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_UART7_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <MX_UART7_Init+0x90>)
 8001666:	f010 ffa9 	bl	80125bc <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001670:	f000 fc80 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_UART7_Init+0x90>)
 8001678:	f012 ff66 	bl	8014548 <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001682:	f000 fc77 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <MX_UART7_Init+0x90>)
 800168a:	f012 ff9b 	bl	80145c4 <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001694:	f000 fc6e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_UART7_Init+0x90>)
 800169a:	f012 ff1c 	bl	80144d6 <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f000 fc66 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24001564 	.word	0x24001564
 80016b0:	40007800 	.word	0x40007800

080016b4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <MX_UART8_Init+0x90>)
 80016ba:	4a23      	ldr	r2, [pc, #140]	; (8001748 <MX_UART8_Init+0x94>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_UART8_Init+0x90>)
 80016c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_UART8_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_UART8_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_UART8_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_UART8_Init+0x90>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_UART8_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_UART8_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_UART8_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_UART8_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_UART8_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <MX_UART8_Init+0x90>)
 80016fe:	f010 ff5d 	bl	80125bc <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001708:	f000 fc34 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_UART8_Init+0x90>)
 8001710:	f012 ff1a 	bl	8014548 <HAL_UARTEx_SetTxFifoThreshold>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800171a:	f000 fc2b 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <MX_UART8_Init+0x90>)
 8001722:	f012 ff4f 	bl	80145c4 <HAL_UARTEx_SetRxFifoThreshold>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800172c:	f000 fc22 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_UART8_Init+0x90>)
 8001732:	f012 fed0 	bl	80144d6 <HAL_UARTEx_DisableFifoMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800173c:	f000 fc1a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	240015f8 	.word	0x240015f8
 8001748:	40007c00 	.word	0x40007c00

0800174c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MX_QUADSPI_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001758:	220a      	movs	r2, #10
 800175a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_QUADSPI_Init+0x50>)
 800175e:	2201      	movs	r2, #1
 8001760:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001764:	2210      	movs	r2, #16
 8001766:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_QUADSPI_Init+0x50>)
 800176a:	2216      	movs	r2, #22
 800176c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001774:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_QUADSPI_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_QUADSPI_Init+0x50>)
 800178a:	f00a fd99 	bl	800c2c0 <HAL_QSPI_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 fbee 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2400195c 	.word	0x2400195c
 80017a0:	52005000 	.word	0x52005000

080017a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017e0:	2263      	movs	r2, #99	; 0x63
 80017e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fe:	4834      	ldr	r0, [pc, #208]	; (80018d0 <MX_TIM2_Init+0x12c>)
 8001800:	f00e fe86 	bl	8010510 <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800180a:	f000 fbb3 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001818:	4619      	mov	r1, r3
 800181a:	482d      	ldr	r0, [pc, #180]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800181c:	f00f fe3e 	bl	801149c <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001826:	f000 fba5 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800182a:	4829      	ldr	r0, [pc, #164]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800182c:	f00e ff40 	bl	80106b0 <HAL_TIM_PWM_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001836:	f000 fb9d 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4821      	ldr	r0, [pc, #132]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800184a:	f010 fe0b 	bl	8012464 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001854:	f000 fb8e 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001858:	2360      	movs	r3, #96	; 0x60
 800185a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MX_TIM2_Init+0x12c>)
 8001870:	f00f fd00 	bl	8011274 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800187a:	f000 fb7b 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	2204      	movs	r2, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <MX_TIM2_Init+0x12c>)
 8001886:	f00f fcf5 	bl	8011274 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001890:	f000 fb70 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	2208      	movs	r2, #8
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800189c:	f00f fcea 	bl	8011274 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80018a6:	f000 fb65 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	220c      	movs	r2, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80018b2:	f00f fcdf 	bl	8011274 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80018bc:	f000 fb5a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80018c2:	f005 f9df 	bl	8006c84 <HAL_TIM_MspPostInit>

}
 80018c6:	bf00      	nop
 80018c8:	3738      	adds	r7, #56	; 0x38
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	240019a8 	.word	0x240019a8

080018d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <MX_TIM3_Init+0x100>)
 800190a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800190e:	2263      	movs	r2, #99	; 0x63
 8001910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800191a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800192e:	f00e fdef 	bl	8010510 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001938:	f000 fb1c 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001946:	4619      	mov	r1, r3
 8001948:	4821      	ldr	r0, [pc, #132]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800194a:	f00f fda7 	bl	801149c <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001954:	f000 fb0e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001958:	481d      	ldr	r0, [pc, #116]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800195a:	f00e fea9 	bl	80106b0 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001964:	f000 fb06 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001978:	f010 fd74 	bl	8012464 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001982:	f000 faf7 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	; 0x60
 8001988:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800199e:	f00f fc69 	bl	8011274 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019a8:	f000 fae4 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	2204      	movs	r2, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM3_Init+0xfc>)
 80019b4:	f00f fc5e 	bl	8011274 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019be:	f000 fad9 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM3_Init+0xfc>)
 80019c4:	f005 f95e 	bl	8006c84 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240019f4 	.word	0x240019f4
 80019d4:	40000400 	.word	0x40000400

080019d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b090      	sub	sp, #64	; 0x40
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a14:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a16:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <MX_TIM5_Init+0x138>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a1c:	2263      	movs	r2, #99	; 0x63
 8001a1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a3a:	4834      	ldr	r0, [pc, #208]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a3c:	f00e fd68 	bl	8010510 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001a46:	f000 fa95 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a54:	4619      	mov	r1, r3
 8001a56:	482d      	ldr	r0, [pc, #180]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a58:	f00f fd20 	bl	801149c <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001a62:	f000 fa87 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001a66:	4829      	ldr	r0, [pc, #164]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a68:	f00e ff92 	bl	8010990 <HAL_TIM_IC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001a72:	f000 fa7f 	bl	8001f74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a76:	2304      	movs	r3, #4
 8001a78:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a7a:	2350      	movs	r3, #80	; 0x50
 8001a7c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a92:	f00f fdfb 	bl	801168c <HAL_TIM_SlaveConfigSynchro>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001a9c:	f000 fa6a 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001aba:	f00f fb3e 	bl	801113a <HAL_TIM_IC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001ac4:	f000 fa56 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001ada:	f00f fb2e 	bl	801113a <HAL_TIM_IC_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001ae4:	f000 fa46 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001af6:	f010 fcb5 	bl	8012464 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001b00:	f000 fa38 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3740      	adds	r7, #64	; 0x40
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	24001a40 	.word	0x24001a40
 8001b10:	40000c00 	.word	0x40000c00

08001b14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <MX_TIM6_Init+0x6c>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b48:	f00e fce2 	bl	8010510 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001b52:	f000 fa0f 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b64:	f010 fc7e 	bl	8012464 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001b6e:	f000 fa01 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24001a8c 	.word	0x24001a8c
 8001b80:	40001000 	.word	0x40001000

08001b84 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b090      	sub	sp, #64	; 0x40
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bc2:	4a40      	ldr	r2, [pc, #256]	; (8001cc4 <MX_TIM15_Init+0x140>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bc8:	2263      	movs	r2, #99	; 0x63
 8001bca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001bec:	4834      	ldr	r0, [pc, #208]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bee:	f00e fc8f 	bl	8010510 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001bf8:	f000 f9bc 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c06:	4619      	mov	r1, r3
 8001c08:	482d      	ldr	r0, [pc, #180]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c0a:	f00f fc47 	bl	801149c <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c14:	f000 f9ae 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001c18:	4829      	ldr	r0, [pc, #164]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c1a:	f00e feb9 	bl	8010990 <HAL_TIM_IC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001c24:	f000 f9a6 	bl	8001f74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c2c:	2350      	movs	r3, #80	; 0x50
 8001c2e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c44:	f00f fd22 	bl	801168c <HAL_TIM_SlaveConfigSynchro>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001c4e:	f000 f991 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c56:	2301      	movs	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c6c:	f00f fa65 	bl	801113a <HAL_TIM_IC_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001c76:	f000 f97d 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c8c:	f00f fa55 	bl	801113a <HAL_TIM_IC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001c96:	f000 f96d 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001ca8:	f010 fbdc 	bl	8012464 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001cb2:	f000 f95f 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3740      	adds	r7, #64	; 0x40
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	24001ad8 	.word	0x24001ad8
 8001cc4:	40014000 	.word	0x40014000

08001cc8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <MX_TIM16_Init+0x4c>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cd8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cfc:	f00e fc08 	bl	8010510 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001d06:	f000 f935 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24001b24 	.word	0x24001b24
 8001d14:	40014400 	.word	0x40014400

08001d18 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <MX_BDMA_Init+0x3c>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <MX_BDMA_Init+0x3c>)
 8001d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_BDMA_Init+0x3c>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2081      	movs	r0, #129	; 0x81
 8001d42:	f007 f99e 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001d46:	2081      	movs	r0, #129	; 0x81
 8001d48:	f007 f9b5 	bl	80090b6 <HAL_NVIC_EnableIRQ>

}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	58024400 	.word	0x58024400

08001d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <MX_DMA_Init+0x8c>)
 8001d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <MX_DMA_Init+0x8c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_DMA_Init+0x8c>)
 8001d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	200b      	movs	r0, #11
 8001d82:	f007 f97e 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d86:	200b      	movs	r0, #11
 8001d88:	f007 f995 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	200c      	movs	r0, #12
 8001d92:	f007 f976 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d96:	200c      	movs	r0, #12
 8001d98:	f007 f98d 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	200d      	movs	r0, #13
 8001da2:	f007 f96e 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001da6:	200d      	movs	r0, #13
 8001da8:	f007 f985 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	200e      	movs	r0, #14
 8001db2:	f007 f966 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001db6:	200e      	movs	r0, #14
 8001db8:	f007 f97d 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	200f      	movs	r0, #15
 8001dc2:	f007 f95e 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f007 f975 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2010      	movs	r0, #16
 8001dd2:	f007 f956 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f007 f96d 	bl	80090b6 <HAL_NVIC_EnableIRQ>

}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58024400 	.word	0x58024400

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a57      	ldr	r2, [pc, #348]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1c:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a41      	ldr	r2, [pc, #260]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2168      	movs	r1, #104	; 0x68
 8001eb6:	482c      	ldr	r0, [pc, #176]	; (8001f68 <MX_GPIO_Init+0x180>)
 8001eb8:	f00a f91c 	bl	800c0f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2120      	movs	r1, #32
 8001ec0:	482a      	ldr	r0, [pc, #168]	; (8001f6c <MX_GPIO_Init+0x184>)
 8001ec2:	f00a f917 	bl	800c0f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4825      	ldr	r0, [pc, #148]	; (8001f70 <MX_GPIO_Init+0x188>)
 8001eda:	f009 ff43 	bl	800bd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PID_MODE_INPUT_Pin */
  GPIO_InitStruct.Pin = PID_MODE_INPUT_Pin;
 8001ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ee4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PID_MODE_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	481e      	ldr	r0, [pc, #120]	; (8001f70 <MX_GPIO_Init+0x188>)
 8001ef6:	f009 ff35 	bl	800bd64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8001efa:	2368      	movs	r3, #104	; 0x68
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4815      	ldr	r0, [pc, #84]	; (8001f68 <MX_GPIO_Init+0x180>)
 8001f12:	f009 ff27 	bl	800bd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 8001f16:	2320      	movs	r3, #32
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <MX_GPIO_Init+0x184>)
 8001f2e:	f009 ff19 	bl	800bd64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <MX_GPIO_Init+0x184>)
 8001f46:	f009 ff0d 	bl	800bd64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2017      	movs	r0, #23
 8001f50:	f007 f897 	bl	8009082 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f54:	2017      	movs	r0, #23
 8001f56:	f007 f8ae 	bl	80090b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3730      	adds	r7, #48	; 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58020400 	.word	0x58020400
 8001f70:	58021000 	.word	0x58021000

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <Error_Handler+0x8>

08001f7e <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bfb8      	it	lt
 8001f8c:	425b      	neglt	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	08017668 	.word	0x08017668

08001fdc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
      data()
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ffe8 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ffcf 	bl	8001f9a <_ZN3ros4TimeC1Ev>
    {
    }
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	08017650 	.word	0x08017650

0800200c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0a19      	lsrs	r1, r3, #8
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0c19      	lsrs	r1, r3, #16
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3302      	adds	r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0e19      	lsrs	r1, r3, #24
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3303      	adds	r3, #3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a19      	lsrs	r1, r3, #8
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	b2ca      	uxtb	r2, r1
 8002082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	0c19      	lsrs	r1, r3, #16
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3302      	adds	r3, #2
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0e19      	lsrs	r1, r3, #24
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3303      	adds	r3, #3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	b2ca      	uxtb	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
      return offset;
 80020ae:	68fb      	ldr	r3, [r7, #12]
    }
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	440b      	add	r3, r1
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3302      	adds	r3, #2
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3303      	adds	r3, #3
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	440b      	add	r3, r1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	061b      	lsls	r3, r3, #24
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	440b      	add	r3, r1
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3302      	adds	r3, #2
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	440b      	add	r3, r1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3303      	adds	r3, #3
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	440b      	add	r3, r1
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3304      	adds	r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
     return offset;
 8002176:	68fb      	ldr	r3, [r7, #12]
    }
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	08017178 	.word	0x08017178

080021a0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	08017188 	.word	0x08017188

080021bc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fef8 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021dc:	609a      	str	r2, [r3, #8]
      message_type(""),
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021e2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a06      	ldr	r2, [pc, #24]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021e8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
    {
    }
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08017638 	.word	0x08017638
 8002200:	080171ac 	.word	0x080171ac

08002204 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8899      	ldrh	r1, [r3, #4]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	b2ca      	uxtb	r2, r1
 800221e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	b299      	uxth	r1, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3301      	adds	r3, #1
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	b2ca      	uxtb	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3302      	adds	r3, #2
 8002238:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f89e 	bl	8000380 <strlen>
 8002244:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 ff28 	bl	80050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3304      	adds	r3, #4
 8002258:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	18d0      	adds	r0, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4619      	mov	r1, r3
 8002268:	f013 fab3 	bl	80157d2 <memcpy>
      offset += length_topic_name;
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f881 	bl	8000380 <strlen>
 800227e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 ff0b 	bl	80050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	18d0      	adds	r0, r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f013 fa96 	bl	80157d2 <memcpy>
      offset += length_message_type;
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4413      	add	r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f864 	bl	8000380 <strlen>
 80022b8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 feee 	bl	80050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3304      	adds	r3, #4
 80022cc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	18d0      	adds	r0, r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4619      	mov	r1, r3
 80022dc:	f013 fa79 	bl	80157d2 <memcpy>
      offset += length_md5sum;
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0a19      	lsrs	r1, r3, #8
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	b2ca      	uxtb	r2, r1
 8002308:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0c19      	lsrs	r1, r3, #16
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3302      	adds	r3, #2
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	b2ca      	uxtb	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0e19      	lsrs	r1, r3, #24
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3303      	adds	r3, #3
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002330:	69fb      	ldr	r3, [r7, #28]
    }
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800233a:	b580      	push	{r7, lr}
 800233c:	b08a      	sub	sp, #40	; 0x28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	b21a      	sxth	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3301      	adds	r3, #1
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	440b      	add	r3, r1
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21b      	sxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b21b      	sxth	r3, r3
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3302      	adds	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	441a      	add	r2, r3
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f002 feab 	bl	80050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3304      	adds	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	e00b      	b.n	80023b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	441a      	add	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3b01      	subs	r3, #1
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	440b      	add	r3, r1
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	3301      	adds	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4413      	add	r3, r2
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3ed      	bcc.n	8002398 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	3b01      	subs	r3, #1
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	441a      	add	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	441a      	add	r2, r3
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fe78 	bl	80050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3304      	adds	r3, #4
 80023f6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	e00b      	b.n	8002416 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	441a      	add	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	3b01      	subs	r3, #1
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	440b      	add	r3, r1
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	3301      	adds	r3, #1
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	6a3a      	ldr	r2, [r7, #32]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3ed      	bcc.n	80023fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	3b01      	subs	r3, #1
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	3b01      	subs	r3, #1
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	441a      	add	r2, r3
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fe45 	bl	80050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	3304      	adds	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e00b      	b.n	800247c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	441a      	add	r2, r3
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b01      	subs	r3, #1
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	440b      	add	r3, r1
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3ed      	bcc.n	8002464 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	3b01      	subs	r3, #1
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4413      	add	r3, r2
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3b01      	subs	r3, #1
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	441a      	add	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	440a      	add	r2, r1
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	3301      	adds	r3, #1
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	440b      	add	r3, r1
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	3302      	adds	r3, #2
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	440b      	add	r3, r1
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	4313      	orrs	r3, r2
 80024e0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	3303      	adds	r3, #3
 80024e8:	6839      	ldr	r1, [r7, #0]
 80024ea:	440b      	add	r3, r1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	3304      	adds	r3, #4
 80024fe:	61bb      	str	r3, [r7, #24]
     return offset;
 8002500:	69bb      	ldr	r3, [r7, #24]
    }
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	080171b0 	.word	0x080171b0

08002528 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	080171cc 	.word	0x080171cc

08002544 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fd34 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
      level(0),
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002564:	609a      	str	r2, [r3, #8]
    {
    }
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	08017620 	.word	0x08017620
 8002574:	080171ac 	.word	0x080171ac

08002578 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	7912      	ldrb	r2, [r2, #4]
 8002590:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd feef 	bl	8000380 <strlen>
 80025a2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fd79 	bl	80050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3304      	adds	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	18d0      	adds	r0, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f013 f904 	bl	80157d2 <memcpy>
      offset += length_msg;
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80025d2:	68fb      	ldr	r3, [r7, #12]
    }
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3301      	adds	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	441a      	add	r2, r3
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fd6a 	bl	80050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3304      	adds	r3, #4
 8002612:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e00b      	b.n	8002632 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	441a      	add	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3b01      	subs	r3, #1
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	440b      	add	r3, r1
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3ed      	bcc.n	800261a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	3b01      	subs	r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3b01      	subs	r3, #1
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
     return offset;
 8002662:	693b      	ldr	r3, [r7, #16]
    }
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	080171f0 	.word	0x080171f0

08002688 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	08017204 	.word	0x08017204

080026a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fc84 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	08017608 	.word	0x08017608

08002700 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	4413      	add	r3, r2
 8002718:	b2ca      	uxtb	r2, r1
 800271a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0a19      	lsrs	r1, r3, #8
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	4413      	add	r3, r2
 800272a:	b2ca      	uxtb	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0c19      	lsrs	r1, r3, #16
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3302      	adds	r3, #2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4413      	add	r3, r2
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0e19      	lsrs	r1, r3, #24
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	3303      	adds	r3, #3
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	b2ca      	uxtb	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3304      	adds	r3, #4
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	e02a      	b.n	80027b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800276c:	6939      	ldr	r1, [r7, #16]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	b2ca      	uxtb	r2, r1
 8002776:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	0a19      	lsrs	r1, r3, #8
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	3301      	adds	r3, #1
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	4413      	add	r3, r2
 8002784:	b2ca      	uxtb	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	0c19      	lsrs	r1, r3, #16
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3302      	adds	r3, #2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	0e19      	lsrs	r1, r3, #24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	3303      	adds	r3, #3
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3304      	adds	r3, #4
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	3301      	adds	r3, #1
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3cf      	bcc.n	800275e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	0a19      	lsrs	r1, r3, #8
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	0c19      	lsrs	r1, r3, #16
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3302      	adds	r3, #2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	0e19      	lsrs	r1, r3, #24
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3303      	adds	r3, #3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	b2ca      	uxtb	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3304      	adds	r3, #4
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	e02a      	b.n	8002864 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0a19      	lsrs	r1, r3, #8
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	3301      	adds	r3, #1
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	b2ca      	uxtb	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0c19      	lsrs	r1, r3, #16
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	3302      	adds	r3, #2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0e19      	lsrs	r1, r3, #24
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3303      	adds	r3, #3
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	b2ca      	uxtb	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3304      	adds	r3, #4
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	429a      	cmp	r2, r3
 800286c:	d3cf      	bcc.n	800280e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69d9      	ldr	r1, [r3, #28]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	0a19      	lsrs	r1, r3, #8
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	4413      	add	r3, r2
 800288a:	b2ca      	uxtb	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	0c19      	lsrs	r1, r3, #16
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3302      	adds	r3, #2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	0e19      	lsrs	r1, r3, #24
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3303      	adds	r3, #3
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3304      	adds	r3, #4
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e027      	b.n	800290e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fd58 	bl	8000380 <strlen>
 80028d0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	6979      	ldr	r1, [r7, #20]
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fbe2 	bl	80050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3304      	adds	r3, #4
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	18d0      	adds	r0, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4619      	mov	r1, r3
 80028fc:	f012 ff69 	bl	80157d2 <memcpy>
      offset += length_stringsi;
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	4413      	add	r3, r2
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	3301      	adds	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	429a      	cmp	r2, r3
 8002916:	d3d2      	bcc.n	80028be <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800291a:	4618      	mov	r0, r3
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002922:	b580      	push	{r7, lr}
 8002924:	b08e      	sub	sp, #56	; 0x38
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	3301      	adds	r3, #1
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	4313      	orrs	r3, r2
 800294a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	3302      	adds	r3, #2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	4313      	orrs	r3, r2
 800295c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002960:	3303      	adds	r3, #3
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	4313      	orrs	r3, r2
 800296e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	3304      	adds	r3, #4
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d90a      	bls.n	8002996 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f011 ffd2 	bl	8014934 <realloc>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800299c:	2300      	movs	r3, #0
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
 80029a0:	e035      	b.n	8002a0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	440a      	add	r2, r1
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	3301      	adds	r3, #1
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	440b      	add	r3, r1
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ca:	3302      	adds	r3, #2
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	440b      	add	r3, r1
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029dc:	3303      	adds	r3, #3
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	440b      	add	r3, r1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	3304      	adds	r3, #4
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3c4      	bcc.n	80029a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	3301      	adds	r3, #1
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	3302      	adds	r3, #2
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	3303      	adds	r3, #3
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d90a      	bls.n	8002a7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f011 ff5e 	bl	8014934 <realloc>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	e035      	b.n	8002af6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	440a      	add	r2, r1
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	440b      	add	r3, r1
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	3304      	adds	r3, #4
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	3214      	adds	r2, #20
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	3301      	adds	r3, #1
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3c4      	bcc.n	8002a8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	3302      	adds	r3, #2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	3303      	adds	r3, #3
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b42:	3304      	adds	r3, #4
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d90a      	bls.n	8002b66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f011 feea 	bl	8014934 <realloc>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b70:	e03e      	b.n	8002bf0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	441a      	add	r2, r3
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 faaf 	bl	80050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	3304      	adds	r3, #4
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e00b      	b.n	8002ba8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	441a      	add	r2, r3
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3ed      	bcc.n	8002b90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	441a      	add	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	3220      	adds	r2, #32
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	3301      	adds	r3, #1
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3bb      	bcc.n	8002b72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3738      	adds	r7, #56	; 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	080174e4 	.word	0x080174e4

08002c20 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	08017228 	.word	0x08017228

08002c3c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	611a      	str	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68d8      	ldr	r0, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6891      	ldr	r1, [r2, #8]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	4798      	blx	r3
 8002c88:	4603      	mov	r3, r0
  };
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
  }
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d077      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d06f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a45      	ldr	r2, [pc, #276]	; (8002df4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d067      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a42      	ldr	r2, [pc, #264]	; (8002df8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d05f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d057      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d04f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a39      	ldr	r2, [pc, #228]	; (8002e04 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d047      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a36      	ldr	r2, [pc, #216]	; (8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a33      	ldr	r2, [pc, #204]	; (8002e0c <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d037      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d027      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d017      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10a      	bne.n	8002dca <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	e009      	b.n	8002dde <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40020010 	.word	0x40020010
 8002df0:	40020028 	.word	0x40020028
 8002df4:	40020040 	.word	0x40020040
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	40020070 	.word	0x40020070
 8002e00:	40020088 	.word	0x40020088
 8002e04:	400200a0 	.word	0x400200a0
 8002e08:	400200b8 	.word	0x400200b8
 8002e0c:	40020410 	.word	0x40020410
 8002e10:	40020428 	.word	0x40020428
 8002e14:	40020440 	.word	0x40020440
 8002e18:	40020458 	.word	0x40020458
 8002e1c:	40020470 	.word	0x40020470
 8002e20:	40020488 	.word	0x40020488
 8002e24:	400204a0 	.word	0x400204a0
 8002e28:	400204b8 	.word	0x400204b8

08002e2c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <_ZN13STM32HardwareC1Ev+0x34>)
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	2400143c 	.word	0x2400143c

08002e64 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f804 	bl	8002e7a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f00f fcf2 	bl	8012878 <HAL_UART_Receive_DMA>
    }
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fefb 	bl	8002cac <_ZN13STM32Hardware10getRdmaIndEv>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ecc:	1c59      	adds	r1, r3, #1
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	791b      	ldrb	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002eec:	68fb      	ldr	r3, [r7, #12]
    }
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
	...

08002ef8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d108      	bne.n	8002f1e <_ZN13STM32Hardware5flushEv+0x26>
 8002f0c:	4b27      	ldr	r3, [pc, #156]	; (8002fac <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <_ZN13STM32Hardware5flushEv+0x26>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <_ZN13STM32Hardware5flushEv+0x28>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03f      	beq.n	8002fa4 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d031      	beq.n	8002f9e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d20a      	bcs.n	8002f60 <_ZN13STM32Hardware5flushEv+0x68>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	e006      	b.n	8002f6e <_ZN13STM32Hardware5flushEv+0x76>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	89fa      	ldrh	r2, [r7, #14]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f00f fbf7 	bl	8012778 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	4413      	add	r3, r2
 8002f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <_ZN13STM32Hardware5flushEv+0xb4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
      }
    }
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	24001b70 	.word	0x24001b70

08002fb0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
      int n = length;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	bfa8      	it	ge
 8002fc8:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002fcc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fd4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bf28      	it	cs
 8002fde:	4613      	movcs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f012 fbec 	bl	80157d2 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4413      	add	r3, r2
 8003004:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	d00b      	beq.n	800302e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	18d1      	adds	r1, r2, r3
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	461a      	mov	r2, r3
 800302a:	f012 fbd2 	bl	80157d2 <memcpy>
      }

      flush();
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff ff62 	bl	8002ef8 <_ZN13STM32Hardware5flushEv>
    }
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	f004 f986 	bl	8007354 <HAL_GetTick>
 8003048:	4603      	mov	r3, r0
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe ffac 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8003064:	4a08      	ldr	r2, [pc, #32]	; (8003088 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
      label(""),
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800306e:	605a      	str	r2, [r3, #4]
      size(0),
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
      stride(0)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
    {
    }
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	080175c4 	.word	0x080175c4
 800308c:	080171ac 	.word	0x080171ac

08003090 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f96c 	bl	8000380 <strlen>
 80030a8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fff6 	bl	80050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	18d0      	adds	r0, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	4619      	mov	r1, r3
 80030cc:	f012 fb81 	bl	80157d2 <memcpy>
      offset += length_label;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	b2ca      	uxtb	r2, r1
 80030e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a19      	lsrs	r1, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3301      	adds	r3, #1
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	b2ca      	uxtb	r2, r1
 80030f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	0c19      	lsrs	r1, r3, #16
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3302      	adds	r3, #2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	b2ca      	uxtb	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0e19      	lsrs	r1, r3, #24
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3303      	adds	r3, #3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	b2ca      	uxtb	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3304      	adds	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	4413      	add	r3, r2
 800312c:	b2ca      	uxtb	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a19      	lsrs	r1, r3, #8
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	b2ca      	uxtb	r2, r1
 8003140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	0c19      	lsrs	r1, r3, #16
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3302      	adds	r3, #2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	b2ca      	uxtb	r2, r1
 8003152:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0e19      	lsrs	r1, r3, #24
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3303      	adds	r3, #3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	4413      	add	r3, r2
 8003162:	b2ca      	uxtb	r2, r1
 8003164:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
      return offset;
 800316c:	68fb      	ldr	r3, [r7, #12]
    }
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	441a      	add	r2, r3
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f001 ffa6 	bl	80050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3304      	adds	r3, #4
 800319a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e00b      	b.n	80031ba <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	441a      	add	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	440b      	add	r3, r1
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3ed      	bcc.n	80031a2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	3b01      	subs	r3, #1
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3b01      	subs	r3, #1
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	441a      	add	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	3301      	adds	r3, #1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	440b      	add	r3, r1
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3302      	adds	r3, #2
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	440b      	add	r3, r1
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3303      	adds	r3, #3
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	440b      	add	r3, r1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3304      	adds	r3, #4
 800323e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	3301      	adds	r3, #1
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	440b      	add	r3, r1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3302      	adds	r3, #2
 800326c:	6839      	ldr	r1, [r7, #0]
 800326e:	440b      	add	r3, r1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3303      	adds	r3, #3
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	440b      	add	r3, r1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	3304      	adds	r3, #4
 8003294:	613b      	str	r3, [r7, #16]
     return offset;
 8003296:	693b      	ldr	r3, [r7, #16]
    }
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	0801724c 	.word	0x0801724c

080032bc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	0801726c 	.word	0x0801726c

080032d8 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fe6a 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3308      	adds	r3, #8
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff feab 	bl	8003054 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
    {
    }
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	080175ac 	.word	0x080175ac

08003318 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	4413      	add	r3, r2
 8003330:	b2ca      	uxtb	r2, r1
 8003332:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0a19      	lsrs	r1, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3301      	adds	r3, #1
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	b2ca      	uxtb	r2, r1
 8003344:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c19      	lsrs	r1, r3, #16
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3302      	adds	r3, #2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	b2ca      	uxtb	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0e19      	lsrs	r1, r3, #24
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3303      	adds	r3, #3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	b2ca      	uxtb	r2, r1
 8003368:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3304      	adds	r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	e017      	b.n	80033a6 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	18d0      	adds	r0, r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	440a      	add	r2, r1
 8003394:	4611      	mov	r1, r2
 8003396:	4798      	blx	r3
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3e2      	bcc.n	8003376 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	b2ca      	uxtb	r2, r1
 80033bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	0a19      	lsrs	r1, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	b2ca      	uxtb	r2, r1
 80033ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	0c19      	lsrs	r1, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3302      	adds	r3, #2
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	b2ca      	uxtb	r2, r1
 80033e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	0e19      	lsrs	r1, r3, #24
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3303      	adds	r3, #3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80033fa:	68fb      	ldr	r3, [r7, #12]
    }
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3301      	adds	r3, #1
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3302      	adds	r3, #2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3303      	adds	r3, #3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3304      	adds	r3, #4
 8003456:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90a      	bls.n	8003478 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f011 fa61 	bl	8014934 <realloc>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e01a      	b.n	80034ba <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0008 	add.w	r0, r3, #8
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7ff fe70 	bl	8003176 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4413      	add	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	18d0      	adds	r0, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3308      	adds	r3, #8
 80034ac:	2210      	movs	r2, #16
 80034ae:	4619      	mov	r1, r3
 80034b0:	f012 f98f 	bl	80157d2 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3301      	adds	r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3df      	bcc.n	8003484 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	440b      	add	r3, r1
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3302      	adds	r3, #2
 80034f0:	6839      	ldr	r1, [r7, #0]
 80034f2:	440b      	add	r3, r1
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3303      	adds	r3, #3
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	440b      	add	r3, r1
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3304      	adds	r3, #4
 8003518:	617b      	str	r3, [r7, #20]
     return offset;
 800351a:	697b      	ldr	r3, [r7, #20]
    }
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	08017290 	.word	0x08017290

08003540 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	080172ac 	.word	0x080172ac

0800355c <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fd28 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 800356c:	4a0b      	ldr	r2, [pc, #44]	; (800359c <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
      layout(),
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff feae 	bl	80032d8 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	08017594 	.word	0x08017594

080035a0 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1d18      	adds	r0, r3, #4
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7ff fead 	bl	8003318 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80035be:	4602      	mov	r2, r0
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	b2ca      	uxtb	r2, r1
 80035d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	0a19      	lsrs	r1, r3, #8
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	b2ca      	uxtb	r2, r1
 80035e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	0c19      	lsrs	r1, r3, #16
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3302      	adds	r3, #2
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	b2ca      	uxtb	r2, r1
 80035f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	0e19      	lsrs	r1, r3, #24
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3303      	adds	r3, #3
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4413      	add	r3, r2
 8003606:	b2ca      	uxtb	r2, r1
 8003608:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3304      	adds	r3, #4
 800360e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e02a      	b.n	800366c <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	4413      	add	r3, r2
 800362c:	b2ca      	uxtb	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0a19      	lsrs	r1, r3, #8
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	b2ca      	uxtb	r2, r1
 800363e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0c19      	lsrs	r1, r3, #16
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3302      	adds	r3, #2
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4413      	add	r3, r2
 800364c:	b2ca      	uxtb	r2, r1
 800364e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	0e19      	lsrs	r1, r3, #24
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3303      	adds	r3, #3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	b2ca      	uxtb	r2, r1
 800365e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3304      	adds	r3, #4
 8003664:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	d3cf      	bcc.n	8003616 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8003676:	697b      	ldr	r3, [r7, #20]
    }
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1d18      	adds	r0, r3, #4
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7ff feb3 	bl	8003404 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4413      	add	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3301      	adds	r3, #1
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3302      	adds	r3, #2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3303      	adds	r3, #3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3304      	adds	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d90a      	bls.n	800370c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f011 f917 	bl	8014934 <realloc>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e035      	b.n	8003784 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	440a      	add	r2, r1
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3301      	adds	r3, #1
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	440b      	add	r3, r1
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3302      	adds	r3, #2
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	440b      	add	r3, r1
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3303      	adds	r3, #3
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	440b      	add	r3, r1
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	061b      	lsls	r3, r3, #24
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3304      	adds	r3, #4
 800376a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	3228      	adds	r2, #40	; 0x28
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3c4      	bcc.n	8003718 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 800378e:	697b      	ldr	r3, [r7, #20]
    }
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	080172d0 	.word	0x080172d0

080037b4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	080172ec 	.word	0x080172ec

080037d0 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
      data(0)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fbee 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80037e0:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	605a      	str	r2, [r3, #4]
    {
    }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	0801757c 	.word	0x0801757c

080037fc <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	4413      	add	r3, r2
 8003818:	b2ca      	uxtb	r2, r1
 800381a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0a19      	lsrs	r1, r3, #8
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	4413      	add	r3, r2
 8003828:	b2ca      	uxtb	r2, r1
 800382a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	0c19      	lsrs	r1, r3, #16
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3302      	adds	r3, #2
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4413      	add	r3, r2
 8003838:	b2ca      	uxtb	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	0e19      	lsrs	r1, r3, #24
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3303      	adds	r3, #3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4413      	add	r3, r2
 8003848:	b2ca      	uxtb	r2, r1
 800384a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3304      	adds	r3, #4
 8003850:	60fb      	str	r3, [r7, #12]
      return offset;
 8003852:	68fb      	ldr	r3, [r7, #12]
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	440a      	add	r2, r1
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	440b      	add	r3, r1
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	4313      	orrs	r3, r2
 8003890:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3302      	adds	r3, #2
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	440b      	add	r3, r1
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3303      	adds	r3, #3
 80038aa:	6839      	ldr	r1, [r7, #0]
 80038ac:	440b      	add	r3, r1
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
     return offset;
 80038c2:	68fb      	ldr	r3, [r7, #12]
    }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	08017310 	.word	0x08017310

080038ec <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	08017324 	.word	0x08017324

08003908 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
      data(0)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fb52 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_ZN8std_msgs4BoolC1Ev+0x28>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	711a      	strb	r2, [r3, #4]
    {
    }
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	08017564 	.word	0x08017564

08003934 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	791b      	ldrb	r3, [r3, #4]
 8003946:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	7a3a      	ldrb	r2, [r7, #8]
 8003950:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
      return offset;
 8003958:	68fb      	ldr	r3, [r7, #12]
    }
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003978:	7a3a      	ldrb	r2, [r7, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	440b      	add	r3, r1
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003988:	7a3a      	ldrb	r2, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3301      	adds	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
     return offset;
 8003994:	68fb      	ldr	r3, [r7, #12]
    }
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	08017348 	.word	0x08017348

080039c0 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	08017358 	.word	0x08017358

080039dc <_ZL8DWT_Initv>:
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_ZL8DWT_Initv+0x28>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <_ZL8DWT_Initv+0x28>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ea:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <_ZL8DWT_Initv+0x2c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <_ZL8DWT_Initv+0x2c>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000edf0 	.word	0xe000edf0
 8003a08:	e0001000 	.word	0xe0001000

08003a0c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	080175f4 	.word	0x080175f4

08003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffe8 	bl	8003a0c <_ZN3ros15NodeHandleBase_C1Ev>
 8003a3c:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev+0x134>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff f9f0 	bl	8002e2c <_ZN13STM32HardwareC1Ev>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f011 fdd7 	bl	801562c <memset>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a84:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f011 fdcc 	bl	801562c <memset>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a9a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f011 fdc1 	bl	801562c <memset>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ab0:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8003ab4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f011 fdb6 	bl	801562c <memset>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003af0:	461a      	mov	r2, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003afe:	461a      	mov	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	f242 736c 	movw	r3, #10092	; 0x276c
 8003b4e:	4413      	add	r3, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fda7 	bl	80026a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	08017550 	.word	0x08017550

08003b64 <_Z13read_ble_dataPh>:
//uint8_t publish_frequency = 20;
//uint8_t pid_frequency = 10;


//read esc data from ble
HAL_StatusTypeDef read_ble_data(uint8_t* data){
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e01e      	b.n	8003bb2 <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2bfe      	cmp	r3, #254	; 0xfe
 8003b7e:	d115      	bne.n	8003bac <_Z13read_ble_dataPh+0x48>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	3301      	adds	r3, #1
 8003b84:	425a      	negs	r2, r3
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	bf58      	it	pl
 8003b90:	4253      	negpl	r3, r2
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d106      	bne.n	8003bac <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003ba8:	701a      	strb	r2, [r3, #0]
			break;
 8003baa:	e009      	b.n	8003bc0 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	f103 021f 	add.w	r2, r3, #31
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	dad9      	bge.n	8003b74 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	425a      	negs	r2, r3
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	f002 021f 	and.w	r2, r2, #31
 8003bd0:	bf58      	it	pl
 8003bd2:	4253      	negpl	r3, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <_Z13read_ble_dataPh+0x80>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e129      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	3303      	adds	r3, #3
 8003bea:	425a      	negs	r2, r3
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	f002 021f 	and.w	r2, r2, #31
 8003bf4:	bf58      	it	pl
 8003bf6:	4253      	negpl	r3, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d001      	beq.n	8003c08 <_Z13read_ble_dataPh+0xa4>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e117      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	425a      	negs	r2, r3
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	f002 021f 	and.w	r2, r2, #31
 8003c18:	bf58      	it	pl
 8003c1a:	4253      	negpl	r3, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d001      	beq.n	8003c2c <_Z13read_ble_dataPh+0xc8>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e105      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	3305      	adds	r3, #5
 8003c32:	425a      	negs	r2, r3
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	f002 021f 	and.w	r2, r2, #31
 8003c3c:	bf58      	it	pl
 8003c3e:	4253      	negpl	r3, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b5c      	cmp	r3, #92	; 0x5c
 8003c4a:	d001      	beq.n	8003c50 <_Z13read_ble_dataPh+0xec>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0f3      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	3306      	adds	r3, #6
 8003c56:	425a      	negs	r2, r3
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	f002 021f 	and.w	r2, r2, #31
 8003c60:	bf58      	it	pl
 8003c62:	4253      	negpl	r3, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b17      	cmp	r3, #23
 8003c6e:	d001      	beq.n	8003c74 <_Z13read_ble_dataPh+0x110>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0e1      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	3307      	adds	r3, #7
 8003c7a:	425a      	negs	r2, r3
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	bf58      	it	pl
 8003c86:	4253      	negpl	r3, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d003      	beq.n	8003c9c <_Z13read_ble_dataPh+0x138>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0cf      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
 8003c98:	2400456c 	.word	0x2400456c

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003c9c:	4b69      	ldr	r3, [pc, #420]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3309      	adds	r3, #9
 8003ca2:	425a      	negs	r2, r3
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	f002 021f 	and.w	r2, r2, #31
 8003cac:	bf58      	it	pl
 8003cae:	4253      	negpl	r3, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b21a      	sxth	r2, r3
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003cbc:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003cbe:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	330b      	adds	r3, #11
 8003cc4:	425a      	negs	r2, r3
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	f002 021f 	and.w	r2, r2, #31
 8003cce:	bf58      	it	pl
 8003cd0:	4253      	negpl	r3, r2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d008      	beq.n	8003cf0 <_Z13read_ble_dataPh+0x18c>
 8003cde:	4b5a      	ldr	r3, [pc, #360]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	425b      	negs	r3, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003cee:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003cf0:	4b54      	ldr	r3, [pc, #336]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	330e      	adds	r3, #14
 8003cf6:	425a      	negs	r2, r3
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	f002 021f 	and.w	r2, r2, #31
 8003d00:	bf58      	it	pl
 8003d02:	4253      	negpl	r3, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	330d      	adds	r3, #13
 8003d16:	425a      	negs	r2, r3
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	f002 021f 	and.w	r2, r2, #31
 8003d20:	bf58      	it	pl
 8003d22:	4253      	negpl	r3, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	ea41 0203 	orr.w	r2, r1, r3
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003d3c:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	330f      	adds	r3, #15
 8003d44:	425a      	negs	r2, r3
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	f002 021f 	and.w	r2, r2, #31
 8003d4e:	bf58      	it	pl
 8003d50:	4253      	negpl	r3, r2
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d62:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003d6c:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 8003d70:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3310      	adds	r3, #16
 8003d76:	425a      	negs	r2, r3
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	f002 021f 	and.w	r2, r2, #31
 8003d80:	bf58      	it	pl
 8003d82:	4253      	negpl	r3, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	3311      	adds	r3, #17
 8003d9a:	425a      	negs	r2, r3
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	f002 021f 	and.w	r2, r2, #31
 8003da4:	bf58      	it	pl
 8003da6:	4253      	negpl	r3, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dba:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003dbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003dc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003dc8:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	3312      	adds	r3, #18
 8003dd2:	425a      	negs	r2, r3
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	f002 021f 	and.w	r2, r2, #31
 8003ddc:	bf58      	it	pl
 8003dde:	4253      	negpl	r3, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3313      	adds	r3, #19
 8003df4:	4259      	negs	r1, r3
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	f001 011f 	and.w	r1, r1, #31
 8003dfe:	bf58      	it	pl
 8003e00:	424b      	negpl	r3, r1
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	440b      	add	r3, r1
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003e12:	821a      	strh	r2, [r3, #16]

	current_esc_speed = esc_sensor.rpm/parameters.esc_rpm_to_speed_ratio;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <_Z13read_ble_dataPh+0x2e8>)
 8003e22:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <_Z13read_ble_dataPh+0x2ec>)
 8003e2c:	edc3 7a00 	vstr	s15, [r3]
	esc_receive_indicator = 0;
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <_Z13read_ble_dataPh+0x2f0>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	2400456c 	.word	0x2400456c
 8003e48:	2400434c 	.word	0x2400434c
 8003e4c:	24000004 	.word	0x24000004
 8003e50:	24004414 	.word	0x24004414
 8003e54:	24004381 	.word	0x24004381

08003e58 <_Z15read_speed_dataPh>:

//read speed data from f103
//the first data are "acsr", then the fifth is the integer part of speed1, and the sixth is the decimal part of speed1..
HAL_StatusTypeDef read_speed_data(uint8_t* data){
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e01d      	b.n	8003ea2 <_Z15read_speed_dataPh+0x4a>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b41      	cmp	r3, #65	; 0x41
 8003e70:	d114      	bne.n	8003e9c <_Z15read_speed_dataPh+0x44>
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3301      	adds	r3, #1
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b43      	cmp	r3, #67	; 0x43
 8003e7e:	d10d      	bne.n	8003e9c <_Z15read_speed_dataPh+0x44>
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	3302      	adds	r3, #2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b53      	cmp	r3, #83	; 0x53
 8003e8c:	d106      	bne.n	8003e9c <_Z15read_speed_dataPh+0x44>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3303      	adds	r3, #3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b52      	cmp	r3, #82	; 0x52
 8003e9a:	d006      	beq.n	8003eaa <_Z15read_speed_dataPh+0x52>
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b1f      	cmp	r3, #31
 8003ea6:	d9de      	bls.n	8003e66 <_Z15read_speed_dataPh+0xe>
 8003ea8:	e000      	b.n	8003eac <_Z15read_speed_dataPh+0x54>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003eaa:	bf00      	nop
	}
	if(i==2*SPEED_PIN_COUNT)return HAL_ERROR;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d101      	bne.n	8003eb6 <_Z15read_speed_dataPh+0x5e>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e048      	b.n	8003f48 <_Z15read_speed_dataPh+0xf0>

	for(int j=0;j<SPEED_PIN_COUNT;++j){
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	e041      	b.n	8003f40 <_Z15read_speed_dataPh+0xe8>
		speed[j] = data[(2*j+i+4)%(2*SPEED_PIN_COUNT+4)]+data[(2*j+1+i+4)%(2*SPEED_PIN_COUNT+4)]/100.0;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	005a      	lsls	r2, r3, #1
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	1d1a      	adds	r2, r3, #4
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <_Z15read_speed_dataPh+0x108>)
 8003ec8:	fb83 1302 	smull	r1, r3, r3, r2
 8003ecc:	10d9      	asrs	r1, r3, #3
 8003ece:	17d3      	asrs	r3, r2, #31
 8003ed0:	1ac9      	subs	r1, r1, r3
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	1ad1      	subs	r1, r2, r3
 8003edc:	460a      	mov	r2, r1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	1d1a      	adds	r2, r3, #4
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <_Z15read_speed_dataPh+0x108>)
 8003efa:	fb83 1302 	smull	r1, r3, r3, r2
 8003efe:	10d9      	asrs	r1, r3, #3
 8003f00:	17d3      	asrs	r3, r2, #31
 8003f02:	1ac9      	subs	r1, r1, r3
 8003f04:	460b      	mov	r3, r1
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	1ad1      	subs	r1, r2, r3
 8003f0e:	460a      	mov	r2, r1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003f1e:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8003f58 <_Z15read_speed_dataPh+0x100>
 8003f22:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003f26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f2e:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <_Z15read_speed_dataPh+0x10c>)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	edc3 7a00 	vstr	s15, [r3]
	for(int j=0;j<SPEED_PIN_COUNT;++j){
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	ddba      	ble.n	8003ebc <_Z15read_speed_dataPh+0x64>
	}
	return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3714      	adds	r7, #20
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	f3af 8000 	nop.w
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	40590000 	.word	0x40590000
 8003f60:	38e38e39 	.word	0x38e38e39
 8003f64:	240043a8 	.word	0x240043a8

08003f68 <HAL_UART_TxCpltCallback>:

//ros structure required
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a07      	ldr	r2, [pc, #28]	; (8003f90 <HAL_UART_TxCpltCallback+0x28>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d106      	bne.n	8003f86 <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003f78:	4806      	ldr	r0, [pc, #24]	; (8003f94 <HAL_UART_TxCpltCallback+0x2c>)
 8003f7a:	f001 f8d8 	bl	800512e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7fe ffb9 	bl	8002ef8 <_ZN13STM32Hardware5flushEv>
	}
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2400143c 	.word	0x2400143c
 8003f94:	24001b74 	.word	0x24001b74

08003f98 <HAL_UART_RxCpltCallback>:

//uart data receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart4.Instance){
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4b34      	ldr	r3, [pc, #208]	; (8004078 <HAL_UART_RxCpltCallback+0xe0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d107      	bne.n	8003fbc <HAL_UART_RxCpltCallback+0x24>
		nh.getHardware()->reset_rbuf();
 8003fac:	4833      	ldr	r0, [pc, #204]	; (800407c <HAL_UART_RxCpltCallback+0xe4>)
 8003fae:	f001 f8be 	bl	800512e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7fe ff60 	bl	8002e7a <_ZN13STM32Hardware10reset_rbufEv>

			jy901_data_length = i;
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
		}
	}
}
 8003fba:	e059      	b.n	8004070 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_esc.Instance){
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b2f      	ldr	r3, [pc, #188]	; (8004080 <HAL_UART_RxCpltCallback+0xe8>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d103      	bne.n	8003fd0 <HAL_UART_RxCpltCallback+0x38>
		read_ble_data(esc_receive);
 8003fc8:	482e      	ldr	r0, [pc, #184]	; (8004084 <HAL_UART_RxCpltCallback+0xec>)
 8003fca:	f7ff fdcb 	bl	8003b64 <_Z13read_ble_dataPh>
}
 8003fce:	e04f      	b.n	8004070 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_f103.Instance){
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_UART_RxCpltCallback+0xf0>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d103      	bne.n	8003fe4 <HAL_UART_RxCpltCallback+0x4c>
		read_speed_data(speed_receive);
 8003fdc:	482b      	ldr	r0, [pc, #172]	; (800408c <HAL_UART_RxCpltCallback+0xf4>)
 8003fde:	f7ff ff3b 	bl	8003e58 <_Z15read_speed_dataPh>
}
 8003fe2:	e045      	b.n	8004070 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_imu.Instance){
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	4b29      	ldr	r3, [pc, #164]	; (8004090 <HAL_UART_RxCpltCallback+0xf8>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d13f      	bne.n	8004070 <HAL_UART_RxCpltCallback+0xd8>
		if(jy901_data[0]==0x55 && jy901_data_length==11){
 8003ff0:	4b28      	ldr	r3, [pc, #160]	; (8004094 <HAL_UART_RxCpltCallback+0xfc>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b55      	cmp	r3, #85	; 0x55
 8003ff6:	d110      	bne.n	800401a <HAL_UART_RxCpltCallback+0x82>
 8003ff8:	4b27      	ldr	r3, [pc, #156]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b0b      	cmp	r3, #11
 8003ffe:	d10c      	bne.n	800401a <HAL_UART_RxCpltCallback+0x82>
			jy901.parseData(jy901_data);
 8004000:	4924      	ldr	r1, [pc, #144]	; (8004094 <HAL_UART_RxCpltCallback+0xfc>)
 8004002:	4826      	ldr	r0, [pc, #152]	; (800409c <HAL_UART_RxCpltCallback+0x104>)
 8004004:	f7fc fb6c 	bl	80006e0 <_ZN6CJY9019parseDataEPh>
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004008:	4b23      	ldr	r3, [pc, #140]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	4920      	ldr	r1, [pc, #128]	; (8004094 <HAL_UART_RxCpltCallback+0xfc>)
 8004012:	481f      	ldr	r0, [pc, #124]	; (8004090 <HAL_UART_RxCpltCallback+0xf8>)
 8004014:	f00e fc30 	bl	8012878 <HAL_UART_Receive_DMA>
}
 8004018:	e02a      	b.n	8004070 <HAL_UART_RxCpltCallback+0xd8>
		}else if(jy901_data_length!=11){
 800401a:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b0b      	cmp	r3, #11
 8004020:	d00b      	beq.n	800403a <HAL_UART_RxCpltCallback+0xa2>
			jy901_data_length = 11;
 8004022:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 8004024:	220b      	movs	r2, #11
 8004026:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b29b      	uxth	r3, r3
 800402e:	461a      	mov	r2, r3
 8004030:	4918      	ldr	r1, [pc, #96]	; (8004094 <HAL_UART_RxCpltCallback+0xfc>)
 8004032:	4817      	ldr	r0, [pc, #92]	; (8004090 <HAL_UART_RxCpltCallback+0xf8>)
 8004034:	f00e fc20 	bl	8012878 <HAL_UART_Receive_DMA>
}
 8004038:	e01a      	b.n	8004070 <HAL_UART_RxCpltCallback+0xd8>
			uint8_t i = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	73fb      	strb	r3, [r7, #15]
			for(;i<11;++i){
 800403e:	e007      	b.n	8004050 <HAL_UART_RxCpltCallback+0xb8>
				if(jy901_data[i]==0x55)break;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	4a14      	ldr	r2, [pc, #80]	; (8004094 <HAL_UART_RxCpltCallback+0xfc>)
 8004044:	5cd3      	ldrb	r3, [r2, r3]
 8004046:	2b55      	cmp	r3, #85	; 0x55
 8004048:	d006      	beq.n	8004058 <HAL_UART_RxCpltCallback+0xc0>
			for(;i<11;++i){
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	3301      	adds	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	2b0a      	cmp	r3, #10
 8004054:	d9f4      	bls.n	8004040 <HAL_UART_RxCpltCallback+0xa8>
 8004056:	e000      	b.n	800405a <HAL_UART_RxCpltCallback+0xc2>
				if(jy901_data[i]==0x55)break;
 8004058:	bf00      	nop
			jy901_data_length = i;
 800405a:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_UART_RxCpltCallback+0x100>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_UART_RxCpltCallback+0xfc>)
 800406a:	4809      	ldr	r0, [pc, #36]	; (8004090 <HAL_UART_RxCpltCallback+0xf8>)
 800406c:	f00e fc04 	bl	8012878 <HAL_UART_Receive_DMA>
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	2400143c 	.word	0x2400143c
 800407c:	24001b74 	.word	0x24001b74
 8004080:	240013a8 	.word	0x240013a8
 8004084:	24004360 	.word	0x24004360
 8004088:	240014d0 	.word	0x240014d0
 800408c:	24004384 	.word	0x24004384
 8004090:	240015f8 	.word	0x240015f8
 8004094:	240044ac 	.word	0x240044ac
 8004098:	24000000 	.word	0x24000000
 800409c:	240044b8 	.word	0x240044b8

080040a0 <HAL_UARTEx_RxEventCallback>:

//uart receive callback for cp2102
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	460b      	mov	r3, r1
 80040aa:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a68      	ldr	r2, [pc, #416]	; (8004254 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	f040 80c9 	bne.w	800424a <HAL_UARTEx_RxEventCallback+0x1aa>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 80040b8:	4b67      	ldr	r3, [pc, #412]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b78      	cmp	r3, #120	; 0x78
 80040be:	d116      	bne.n	80040ee <HAL_UARTEx_RxEventCallback+0x4e>
 80040c0:	4b65      	ldr	r3, [pc, #404]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b69      	cmp	r3, #105	; 0x69
 80040c6:	d112      	bne.n	80040ee <HAL_UARTEx_RxEventCallback+0x4e>
 80040c8:	4b63      	ldr	r3, [pc, #396]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040ca:	789b      	ldrb	r3, [r3, #2]
 80040cc:	2b6c      	cmp	r3, #108	; 0x6c
 80040ce:	d10e      	bne.n	80040ee <HAL_UARTEx_RxEventCallback+0x4e>
 80040d0:	4b61      	ldr	r3, [pc, #388]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040d2:	78db      	ldrb	r3, [r3, #3]
 80040d4:	2b69      	cmp	r3, #105	; 0x69
 80040d6:	d10a      	bne.n	80040ee <HAL_UARTEx_RxEventCallback+0x4e>
 80040d8:	4b5f      	ldr	r3, [pc, #380]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	2b6e      	cmp	r3, #110	; 0x6e
 80040de:	d106      	bne.n	80040ee <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 80040e0:	230a      	movs	r3, #10
 80040e2:	2240      	movs	r2, #64	; 0x40
 80040e4:	495d      	ldr	r1, [pc, #372]	; (800425c <HAL_UARTEx_RxEventCallback+0x1bc>)
 80040e6:	485e      	ldr	r0, [pc, #376]	; (8004260 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80040e8:	f00e fab8 	bl	801265c <HAL_UART_Transmit>
 80040ec:	e047      	b.n	800417e <HAL_UARTEx_RxEventCallback+0xde>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 80040ee:	4b5a      	ldr	r3, [pc, #360]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b61      	cmp	r3, #97	; 0x61
 80040f4:	d140      	bne.n	8004178 <HAL_UARTEx_RxEventCallback+0xd8>
 80040f6:	4b58      	ldr	r3, [pc, #352]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b63      	cmp	r3, #99	; 0x63
 80040fc:	d13c      	bne.n	8004178 <HAL_UARTEx_RxEventCallback+0xd8>
 80040fe:	4b56      	ldr	r3, [pc, #344]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004100:	789b      	ldrb	r3, [r3, #2]
 8004102:	2b73      	cmp	r3, #115	; 0x73
 8004104:	d138      	bne.n	8004178 <HAL_UARTEx_RxEventCallback+0xd8>
 8004106:	4b54      	ldr	r3, [pc, #336]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004108:	78db      	ldrb	r3, [r3, #3]
 800410a:	2b72      	cmp	r3, #114	; 0x72
 800410c:	d134      	bne.n	8004178 <HAL_UARTEx_RxEventCallback+0xd8>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 800410e:	233c      	movs	r3, #60	; 0x3c
 8004110:	60fb      	str	r3, [r7, #12]
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 8004112:	4a51      	ldr	r2, [pc, #324]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b62      	cmp	r3, #98	; 0x62
 800411c:	d111      	bne.n	8004142 <HAL_UARTEx_RxEventCallback+0xa2>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3301      	adds	r3, #1
 8004122:	4a4d      	ldr	r2, [pc, #308]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004124:	5cd3      	ldrb	r3, [r2, r3]
 8004126:	2b34      	cmp	r3, #52	; 0x34
 8004128:	d10b      	bne.n	8004142 <HAL_UARTEx_RxEventCallback+0xa2>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3302      	adds	r3, #2
 800412e:	4a4a      	ldr	r2, [pc, #296]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d105      	bne.n	8004142 <HAL_UARTEx_RxEventCallback+0xa2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3303      	adds	r3, #3
 800413a:	4a47      	ldr	r2, [pc, #284]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	2b31      	cmp	r3, #49	; 0x31
 8004140:	d003      	beq.n	800414a <HAL_UARTEx_RxEventCallback+0xaa>
				printf("Receive Wrong Data\n");
 8004142:	4848      	ldr	r0, [pc, #288]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8004144:	f011 f992 	bl	801546c <puts>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
				printf("Write the Configuration Complete!\n");
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
			}

		}else{
 8004148:	e019      	b.n	800417e <HAL_UARTEx_RxEventCallback+0xde>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 800414a:	4a44      	ldr	r2, [pc, #272]	; (800425c <HAL_UARTEx_RxEventCallback+0x1bc>)
 800414c:	4b42      	ldr	r3, [pc, #264]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800414e:	4614      	mov	r4, r2
 8004150:	461d      	mov	r5, r3
 8004152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004156:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800415a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800415c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800415e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004162:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				printf("Write the Configuration Complete!\n");
 8004166:	4840      	ldr	r0, [pc, #256]	; (8004268 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8004168:	f011 f980 	bl	801546c <puts>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	2100      	movs	r1, #0
 8004170:	483a      	ldr	r0, [pc, #232]	; (800425c <HAL_UARTEx_RxEventCallback+0x1bc>)
 8004172:	f7fc fedd 	bl	8000f30 <QSPI_W25Q64JV_Write>
		}else{
 8004176:	e002      	b.n	800417e <HAL_UARTEx_RxEventCallback+0xde>
			printf("Receive Wrong Data\n");
 8004178:	483a      	ldr	r0, [pc, #232]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1c4>)
 800417a:	f011 f977 	bl	801546c <puts>
			//HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 800417e:	2264      	movs	r2, #100	; 0x64
 8004180:	4935      	ldr	r1, [pc, #212]	; (8004258 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004182:	4837      	ldr	r0, [pc, #220]	; (8004260 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8004184:	f010 fa5c 	bl	8014640 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004188:	4b38      	ldr	r3, [pc, #224]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a38      	ldr	r2, [pc, #224]	; (8004270 <HAL_UARTEx_RxEventCallback+0x1d0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d04a      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 8004192:	4b36      	ldr	r3, [pc, #216]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a37      	ldr	r2, [pc, #220]	; (8004274 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d045      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 800419c:	4b33      	ldr	r3, [pc, #204]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a35      	ldr	r2, [pc, #212]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d040      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041a6:	4b31      	ldr	r3, [pc, #196]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a34      	ldr	r2, [pc, #208]	; (800427c <HAL_UARTEx_RxEventCallback+0x1dc>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d03b      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041b0:	4b2e      	ldr	r3, [pc, #184]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d036      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041ba:	4b2c      	ldr	r3, [pc, #176]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a31      	ldr	r2, [pc, #196]	; (8004284 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d031      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041c4:	4b29      	ldr	r3, [pc, #164]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2f      	ldr	r2, [pc, #188]	; (8004288 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d02c      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2e      	ldr	r2, [pc, #184]	; (800428c <HAL_UARTEx_RxEventCallback+0x1ec>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d027      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041d8:	4b24      	ldr	r3, [pc, #144]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2c      	ldr	r2, [pc, #176]	; (8004290 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041e2:	4b22      	ldr	r3, [pc, #136]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2b      	ldr	r2, [pc, #172]	; (8004294 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d01d      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041ec:	4b1f      	ldr	r3, [pc, #124]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a29      	ldr	r2, [pc, #164]	; (8004298 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a28      	ldr	r2, [pc, #160]	; (800429c <HAL_UARTEx_RxEventCallback+0x1fc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a26      	ldr	r2, [pc, #152]	; (80042a0 <HAL_UARTEx_RxEventCallback+0x200>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 800420a:	4b18      	ldr	r3, [pc, #96]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a25      	ldr	r2, [pc, #148]	; (80042a4 <HAL_UARTEx_RxEventCallback+0x204>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a23      	ldr	r2, [pc, #140]	; (80042a8 <HAL_UARTEx_RxEventCallback+0x208>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_UARTEx_RxEventCallback+0x188>
 800421e:	4b13      	ldr	r3, [pc, #76]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a22      	ldr	r2, [pc, #136]	; (80042ac <HAL_UARTEx_RxEventCallback+0x20c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d108      	bne.n	800423a <HAL_UARTEx_RxEventCallback+0x19a>
 8004228:	4b10      	ldr	r3, [pc, #64]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b0f      	ldr	r3, [pc, #60]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0208 	bic.w	r2, r2, #8
 8004236:	601a      	str	r2, [r3, #0]
	}
}
 8004238:	e007      	b.n	800424a <HAL_UARTEx_RxEventCallback+0x1aa>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b0a      	ldr	r3, [pc, #40]	; (800426c <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0204 	bic.w	r2, r2, #4
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bdb0      	pop	{r4, r5, r7, pc}
 8004252:	bf00      	nop
 8004254:	40007800 	.word	0x40007800
 8004258:	24004418 	.word	0x24004418
 800425c:	24000004 	.word	0x24000004
 8004260:	24001564 	.word	0x24001564
 8004264:	0801737c 	.word	0x0801737c
 8004268:	08017390 	.word	0x08017390
 800426c:	2400186c 	.word	0x2400186c
 8004270:	40020010 	.word	0x40020010
 8004274:	40020028 	.word	0x40020028
 8004278:	40020040 	.word	0x40020040
 800427c:	40020058 	.word	0x40020058
 8004280:	40020070 	.word	0x40020070
 8004284:	40020088 	.word	0x40020088
 8004288:	400200a0 	.word	0x400200a0
 800428c:	400200b8 	.word	0x400200b8
 8004290:	40020410 	.word	0x40020410
 8004294:	40020428 	.word	0x40020428
 8004298:	40020440 	.word	0x40020440
 800429c:	40020458 	.word	0x40020458
 80042a0:	40020470 	.word	0x40020470
 80042a4:	40020488 	.word	0x40020488
 80042a8:	400204a0 	.word	0x400204a0
 80042ac:	400204b8 	.word	0x400204b8

080042b0 <HAL_UART_ErrorCallback>:

//error handle of uart
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==huart_esc.Instance) {
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	4b48      	ldr	r3, [pc, #288]	; (80043e0 <HAL_UART_ErrorCallback+0x130>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d105      	bne.n	80042d0 <HAL_UART_ErrorCallback+0x20>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80042c4:	2220      	movs	r2, #32
 80042c6:	4947      	ldr	r1, [pc, #284]	; (80043e4 <HAL_UART_ErrorCallback+0x134>)
 80042c8:	4845      	ldr	r0, [pc, #276]	; (80043e0 <HAL_UART_ErrorCallback+0x130>)
 80042ca:	f00e fad5 	bl	8012878 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
	}else if(UartHandle->Instance==UART7){
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
	}
}
 80042ce:	e082      	b.n	80043d6 <HAL_UART_ErrorCallback+0x126>
    }else if(UartHandle->Instance==huart_f103.Instance) {
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_UART_ErrorCallback+0x138>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d105      	bne.n	80042e8 <HAL_UART_ErrorCallback+0x38>
    	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+1);
 80042dc:	2221      	movs	r2, #33	; 0x21
 80042de:	4943      	ldr	r1, [pc, #268]	; (80043ec <HAL_UART_ErrorCallback+0x13c>)
 80042e0:	4841      	ldr	r0, [pc, #260]	; (80043e8 <HAL_UART_ErrorCallback+0x138>)
 80042e2:	f00e fac9 	bl	8012878 <HAL_UART_Receive_DMA>
}
 80042e6:	e076      	b.n	80043d6 <HAL_UART_ErrorCallback+0x126>
    else if(UartHandle->Instance==huart_imu.Instance) {
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <HAL_UART_ErrorCallback+0x140>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d105      	bne.n	8004300 <HAL_UART_ErrorCallback+0x50>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
 80042f4:	220b      	movs	r2, #11
 80042f6:	493f      	ldr	r1, [pc, #252]	; (80043f4 <HAL_UART_ErrorCallback+0x144>)
 80042f8:	483d      	ldr	r0, [pc, #244]	; (80043f0 <HAL_UART_ErrorCallback+0x140>)
 80042fa:	f00e fabd 	bl	8012878 <HAL_UART_Receive_DMA>
}
 80042fe:	e06a      	b.n	80043d6 <HAL_UART_ErrorCallback+0x126>
	}else if(UartHandle->Instance==UART7){
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <HAL_UART_ErrorCallback+0x148>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d165      	bne.n	80043d6 <HAL_UART_ErrorCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 800430a:	2264      	movs	r2, #100	; 0x64
 800430c:	493b      	ldr	r1, [pc, #236]	; (80043fc <HAL_UART_ErrorCallback+0x14c>)
 800430e:	483c      	ldr	r0, [pc, #240]	; (8004400 <HAL_UART_ErrorCallback+0x150>)
 8004310:	f010 f996 	bl	8014640 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004314:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a3b      	ldr	r2, [pc, #236]	; (8004408 <HAL_UART_ErrorCallback+0x158>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d04a      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 800431e:	4b39      	ldr	r3, [pc, #228]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a3a      	ldr	r2, [pc, #232]	; (800440c <HAL_UART_ErrorCallback+0x15c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d045      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004328:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a38      	ldr	r2, [pc, #224]	; (8004410 <HAL_UART_ErrorCallback+0x160>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d040      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004332:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a37      	ldr	r2, [pc, #220]	; (8004414 <HAL_UART_ErrorCallback+0x164>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d03b      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 800433c:	4b31      	ldr	r3, [pc, #196]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a35      	ldr	r2, [pc, #212]	; (8004418 <HAL_UART_ErrorCallback+0x168>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d036      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a34      	ldr	r2, [pc, #208]	; (800441c <HAL_UART_ErrorCallback+0x16c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d031      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004350:	4b2c      	ldr	r3, [pc, #176]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a32      	ldr	r2, [pc, #200]	; (8004420 <HAL_UART_ErrorCallback+0x170>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d02c      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 800435a:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a31      	ldr	r2, [pc, #196]	; (8004424 <HAL_UART_ErrorCallback+0x174>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d027      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004364:	4b27      	ldr	r3, [pc, #156]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2f      	ldr	r2, [pc, #188]	; (8004428 <HAL_UART_ErrorCallback+0x178>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d022      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 800436e:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2e      	ldr	r2, [pc, #184]	; (800442c <HAL_UART_ErrorCallback+0x17c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d01d      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004378:	4b22      	ldr	r3, [pc, #136]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2c      	ldr	r2, [pc, #176]	; (8004430 <HAL_UART_ErrorCallback+0x180>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2b      	ldr	r2, [pc, #172]	; (8004434 <HAL_UART_ErrorCallback+0x184>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 800438c:	4b1d      	ldr	r3, [pc, #116]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <HAL_UART_ErrorCallback+0x188>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a28      	ldr	r2, [pc, #160]	; (800443c <HAL_UART_ErrorCallback+0x18c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a26      	ldr	r2, [pc, #152]	; (8004440 <HAL_UART_ErrorCallback+0x190>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_UART_ErrorCallback+0x104>
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a25      	ldr	r2, [pc, #148]	; (8004444 <HAL_UART_ErrorCallback+0x194>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d108      	bne.n	80043c6 <HAL_UART_ErrorCallback+0x116>
 80043b4:	4b13      	ldr	r3, [pc, #76]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b12      	ldr	r3, [pc, #72]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0208 	bic.w	r2, r2, #8
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	e007      	b.n	80043d6 <HAL_UART_ErrorCallback+0x126>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_UART_ErrorCallback+0x154>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0204 	bic.w	r2, r2, #4
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	240013a8 	.word	0x240013a8
 80043e4:	24004360 	.word	0x24004360
 80043e8:	240014d0 	.word	0x240014d0
 80043ec:	24004384 	.word	0x24004384
 80043f0:	240015f8 	.word	0x240015f8
 80043f4:	240044ac 	.word	0x240044ac
 80043f8:	40007800 	.word	0x40007800
 80043fc:	24004418 	.word	0x24004418
 8004400:	24001564 	.word	0x24001564
 8004404:	2400186c 	.word	0x2400186c
 8004408:	40020010 	.word	0x40020010
 800440c:	40020028 	.word	0x40020028
 8004410:	40020040 	.word	0x40020040
 8004414:	40020058 	.word	0x40020058
 8004418:	40020070 	.word	0x40020070
 800441c:	40020088 	.word	0x40020088
 8004420:	400200a0 	.word	0x400200a0
 8004424:	400200b8 	.word	0x400200b8
 8004428:	40020410 	.word	0x40020410
 800442c:	40020428 	.word	0x40020428
 8004430:	40020440 	.word	0x40020440
 8004434:	40020458 	.word	0x40020458
 8004438:	40020470 	.word	0x40020470
 800443c:	40020488 	.word	0x40020488
 8004440:	400204a0 	.word	0x400204a0
 8004444:	400204b8 	.word	0x400204b8

08004448 <HAL_TIM_IC_CaptureCallback>:

//pwm input capture callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]

	if(input_mode == INPUT_MODE_SOFTWARE)return;
 8004450:	4b4e      	ldr	r3, [pc, #312]	; (800458c <HAL_TIM_IC_CaptureCallback+0x144>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 8095 	beq.w	8004584 <HAL_TIM_IC_CaptureCallback+0x13c>

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a4c      	ldr	r2, [pc, #304]	; (8004590 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d131      	bne.n	80044c8 <HAL_TIM_IC_CaptureCallback+0x80>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7f1b      	ldrb	r3, [r3, #28]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d12d      	bne.n	80044c8 <HAL_TIM_IC_CaptureCallback+0x80>
		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800446c:	2100      	movs	r1, #0
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f00d f94e 	bl	8011710 <HAL_TIM_ReadCapturedValue>
 8004474:	61f8      	str	r0, [r7, #28]
		uint32_t temp_servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8004476:	2104      	movs	r1, #4
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f00d f949 	bl	8011710 <HAL_TIM_ReadCapturedValue>
 800447e:	61b8      	str	r0, [r7, #24]
		int32_t diff = temp_servo_duty - servo_duty;
 8004480:	4b44      	ldr	r3, [pc, #272]	; (8004594 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
		if(abs(diff) > 2){
 800448a:	6978      	ldr	r0, [r7, #20]
 800448c:	f7fd fd77 	bl	8001f7e <_ZSt3absl>
 8004490:	4603      	mov	r3, r0
 8004492:	2b02      	cmp	r3, #2
 8004494:	bfcc      	ite	gt
 8004496:	2301      	movgt	r3, #1
 8004498:	2300      	movle	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d006      	beq.n	80044ae <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,temp_servo_duty);
 80044a0:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x150>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	635a      	str	r2, [r3, #52]	; 0x34
			servo_duty = temp_servo_duty;
 80044a8:	4a3a      	ldr	r2, [pc, #232]	; (8004594 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80044b6:	2100      	movs	r1, #0
 80044b8:	4838      	ldr	r0, [pc, #224]	; (800459c <HAL_TIM_IC_CaptureCallback+0x154>)
 80044ba:	f00c fbcf 	bl	8010c5c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80044be:	2104      	movs	r1, #4
 80044c0:	4836      	ldr	r0, [pc, #216]	; (800459c <HAL_TIM_IC_CaptureCallback+0x154>)
 80044c2:	f00c fac7 	bl	8010a54 <HAL_TIM_IC_Start>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80044c6:	e035      	b.n	8004534 <HAL_TIM_IC_CaptureCallback+0xec>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <HAL_TIM_IC_CaptureCallback+0x158>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d130      	bne.n	8004534 <HAL_TIM_IC_CaptureCallback+0xec>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	7f1b      	ldrb	r3, [r3, #28]
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d12c      	bne.n	8004534 <HAL_TIM_IC_CaptureCallback+0xec>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80044da:	2100      	movs	r1, #0
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f00d f917 	bl	8011710 <HAL_TIM_ReadCapturedValue>
 80044e2:	61f8      	str	r0, [r7, #28]
		uint32_t temp_esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80044e4:	2104      	movs	r1, #4
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f00d f912 	bl	8011710 <HAL_TIM_ReadCapturedValue>
 80044ec:	6138      	str	r0, [r7, #16]
		int32_t diff = temp_esc_duty - esc_duty;
 80044ee:	4b2d      	ldr	r3, [pc, #180]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	60fb      	str	r3, [r7, #12]
		if(abs(diff) >2){
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7fd fd40 	bl	8001f7e <_ZSt3absl>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b02      	cmp	r3, #2
 8004502:	bfcc      	ite	gt
 8004504:	2301      	movgt	r3, #1
 8004506:	2300      	movle	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d006      	beq.n	800451c <HAL_TIM_IC_CaptureCallback+0xd4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,temp_esc_duty);
 800450e:	4b22      	ldr	r3, [pc, #136]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
			esc_duty = temp_esc_duty;
 8004516:	4a23      	ldr	r2, [pc, #140]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004524:	2100      	movs	r1, #0
 8004526:	4820      	ldr	r0, [pc, #128]	; (80045a8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004528:	f00c fb98 	bl	8010c5c <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 800452c:	2104      	movs	r1, #4
 800452e:	481e      	ldr	r0, [pc, #120]	; (80045a8 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004530:	f00c fa90 	bl	8010a54 <HAL_TIM_IC_Start>

	}
	int32_t diff = temp_freq-input_freq;
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <HAL_TIM_IC_CaptureCallback+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	60bb      	str	r3, [r7, #8]
	if(input_freq<1000 || abs(diff)>50){
 800453e:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <HAL_TIM_IC_CaptureCallback+0x164>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004546:	d305      	bcc.n	8004554 <HAL_TIM_IC_CaptureCallback+0x10c>
 8004548:	68b8      	ldr	r0, [r7, #8]
 800454a:	f7fd fd18 	bl	8001f7e <_ZSt3absl>
 800454e:	4603      	mov	r3, r0
 8004550:	2b32      	cmp	r3, #50	; 0x32
 8004552:	dd01      	ble.n	8004558 <HAL_TIM_IC_CaptureCallback+0x110>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <HAL_TIM_IC_CaptureCallback+0x112>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d013      	beq.n	8004586 <HAL_TIM_IC_CaptureCallback+0x13e>
		input_freq=temp_freq;
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <HAL_TIM_IC_CaptureCallback+0x164>)
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	69fa      	ldr	r2, [r7, #28]
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x150>)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	60d3      	str	r3, [r2, #12]
		esc_servo_arr = 1000000/input_freq-1;
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_TIM_IC_CaptureCallback+0x164>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a0e      	ldr	r2, [pc, #56]	; (80045b0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	e000      	b.n	8004586 <HAL_TIM_IC_CaptureCallback+0x13e>
	if(input_mode == INPUT_MODE_SOFTWARE)return;
 8004584:	bf00      	nop
	}


}
 8004586:	3720      	adds	r7, #32
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	2400447c 	.word	0x2400447c
 8004590:	40000c00 	.word	0x40000c00
 8004594:	240044a0 	.word	0x240044a0
 8004598:	240019f4 	.word	0x240019f4
 800459c:	24001a40 	.word	0x24001a40
 80045a0:	40014000 	.word	0x40014000
 80045a4:	240044a4 	.word	0x240044a4
 80045a8:	24001ad8 	.word	0x24001ad8
 80045ac:	240044a8 	.word	0x240044a8
 80045b0:	000f4240 	.word	0x000f4240
 80045b4:	24004484 	.word	0x24004484

080045b8 <HAL_TIM_PeriodElapsedCallback>:

//timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

	//ros publish
	if(htim->Instance==TIM16){
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a7a      	ldr	r2, [pc, #488]	; (80047b0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	f040 80d4 	bne.w	8004774 <HAL_TIM_PeriodElapsedCallback+0x1bc>
		memcpy(&sensor_msg.data[0],speed,wheel_speed_size*sizeof(float));
 80045cc:	4b79      	ldr	r3, [pc, #484]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	2240      	movs	r2, #64	; 0x40
 80045d2:	4979      	ldr	r1, [pc, #484]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80045d4:	4618      	mov	r0, r3
 80045d6:	f011 f8fc 	bl	80157d2 <memcpy>
		for(uint8_t i=0;i<force_size;++i){
 80045da:	2300      	movs	r3, #0
 80045dc:	73fb      	strb	r3, [r7, #15]
 80045de:	e01e      	b.n	800461e <HAL_TIM_PeriodElapsedCallback+0x66>
			sensor_msg.data[wheel_speed_size+i]=(float)force_raw[i]*3.3/0xFFFF;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	4a76      	ldr	r2, [pc, #472]	; (80047bc <HAL_TIM_PeriodElapsedCallback+0x204>)
 80045e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e8:	ee07 3a90 	vmov	s15, r3
 80045ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80045f4:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8004798 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 80045f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80045fc:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80047a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8004600:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004604:	4b6b      	ldr	r3, [pc, #428]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	3310      	adds	r3, #16
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004614:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<force_size;++i){
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	3301      	adds	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	2b07      	cmp	r3, #7
 8004622:	d9dd      	bls.n	80045e0 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		sensor_msg.data[wheel_speed_size+force_size]=esc_sensor.throttle/100.0;
 8004624:	4b66      	ldr	r3, [pc, #408]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004632:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 80047a8 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8004636:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800463a:	4b5e      	ldr	r3, [pc, #376]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	3360      	adds	r3, #96	; 0x60
 8004640:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004644:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size+force_size + 1] = esc_sensor.voltage;
 8004648:	4b5a      	ldr	r3, [pc, #360]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	3364      	adds	r3, #100	; 0x64
 800464e:	4a5c      	ldr	r2, [pc, #368]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004650:	6892      	ldr	r2, [r2, #8]
 8004652:	601a      	str	r2, [r3, #0]
		sensor_msg.data[wheel_speed_size+force_size + 2] = esc_sensor.current;
 8004654:	4b57      	ldr	r3, [pc, #348]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	3368      	adds	r3, #104	; 0x68
 800465a:	4a59      	ldr	r2, [pc, #356]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800465c:	68d2      	ldr	r2, [r2, #12]
 800465e:	601a      	str	r2, [r3, #0]
		sensor_msg.data[wheel_speed_size+force_size + 3] = (float)esc_sensor.temperature;
 8004660:	4b57      	ldr	r3, [pc, #348]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004662:	8a1a      	ldrh	r2, [r3, #16]
 8004664:	4b53      	ldr	r3, [pc, #332]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	336c      	adds	r3, #108	; 0x6c
 800466a:	ee07 2a90 	vmov	s15, r2
 800466e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004672:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size+force_size + 4] = (float)esc_sensor.rpm;
 8004676:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004678:	685a      	ldr	r2, [r3, #4]
 800467a:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	3370      	adds	r3, #112	; 0x70
 8004680:	ee07 2a90 	vmov	s15, r2
 8004684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004688:	edc3 7a00 	vstr	s15, [r3]

		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 0] = jy901.getAccX();
 800468c:	484d      	ldr	r0, [pc, #308]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800468e:	f7fc f8f3 	bl	8000878 <_ZN6CJY9017getAccXEv>
 8004692:	eeb0 7b40 	vmov.f64	d7, d0
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	3374      	adds	r3, #116	; 0x74
 800469c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046a0:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 1] = jy901.getAccY();
 80046a4:	4847      	ldr	r0, [pc, #284]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046a6:	f7fc f903 	bl	80008b0 <_ZN6CJY9017getAccYEv>
 80046aa:	eeb0 7b40 	vmov.f64	d7, d0
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	3378      	adds	r3, #120	; 0x78
 80046b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046b8:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 2] = jy901.getAccZ();
 80046bc:	4841      	ldr	r0, [pc, #260]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046be:	f7fc f913 	bl	80008e8 <_ZN6CJY9017getAccZEv>
 80046c2:	eeb0 7b40 	vmov.f64	d7, d0
 80046c6:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ca:	337c      	adds	r3, #124	; 0x7c
 80046cc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046d0:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 3] = jy901.getGyroX();
 80046d4:	483b      	ldr	r0, [pc, #236]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046d6:	f7fc f923 	bl	8000920 <_ZN6CJY9018getGyroXEv>
 80046da:	eeb0 7b40 	vmov.f64	d7, d0
 80046de:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	3380      	adds	r3, #128	; 0x80
 80046e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046e8:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 4] = jy901.getGyroY();
 80046ec:	4835      	ldr	r0, [pc, #212]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046ee:	f7fc f933 	bl	8000958 <_ZN6CJY9018getGyroYEv>
 80046f2:	eeb0 7b40 	vmov.f64	d7, d0
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	3384      	adds	r3, #132	; 0x84
 80046fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004700:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 5] = jy901.getGyroZ();
 8004704:	482f      	ldr	r0, [pc, #188]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004706:	f7fc f943 	bl	8000990 <_ZN6CJY9018getGyroZEv>
 800470a:	eeb0 7b40 	vmov.f64	d7, d0
 800470e:	4b29      	ldr	r3, [pc, #164]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004712:	3388      	adds	r3, #136	; 0x88
 8004714:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004718:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 6] = jy901.getRoll();
 800471c:	4829      	ldr	r0, [pc, #164]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800471e:	f7fc f953 	bl	80009c8 <_ZN6CJY9017getRollEv>
 8004722:	eeb0 7b40 	vmov.f64	d7, d0
 8004726:	4b23      	ldr	r3, [pc, #140]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	338c      	adds	r3, #140	; 0x8c
 800472c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004730:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 7] = jy901.getPitch();
 8004734:	4823      	ldr	r0, [pc, #140]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004736:	f7fc f963 	bl	8000a00 <_ZN6CJY9018getPitchEv>
 800473a:	eeb0 7b40 	vmov.f64	d7, d0
 800473e:	4b1d      	ldr	r3, [pc, #116]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004742:	3390      	adds	r3, #144	; 0x90
 8004744:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004748:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 8] = jy901.getYaw();
 800474c:	481d      	ldr	r0, [pc, #116]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800474e:	f7fc f973 	bl	8000a38 <_ZN6CJY9016getYawEv>
 8004752:	eeb0 7b40 	vmov.f64	d7, d0
 8004756:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475a:	3394      	adds	r3, #148	; 0x94
 800475c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004760:	edc3 7a00 	vstr	s15, [r3]

		ros_pub.publish(&sensor_msg);
 8004764:	4913      	ldr	r1, [pc, #76]	; (80047b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004766:	4818      	ldr	r0, [pc, #96]	; (80047c8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004768:	f7fe fa7f 	bl	8002c6a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 800476c:	4817      	ldr	r0, [pc, #92]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0x214>)
 800476e:	f000 fcea 	bl	8005146 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>
 8004772:	e00d      	b.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x1d8>
	}else if(htim->Instance==TIM6)//pid computation
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d108      	bne.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x1d8>
	{
		if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d003      	beq.n	800478e <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 800478e:	bf00      	nop
		}*/


	}

}
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	66666666 	.word	0x66666666
 800479c:	400a6666 	.word	0x400a6666
 80047a0:	00000000 	.word	0x00000000
 80047a4:	40efffe0 	.word	0x40efffe0
 80047a8:	00000000 	.word	0x00000000
 80047ac:	40590000 	.word	0x40590000
 80047b0:	40014400 	.word	0x40014400
 80047b4:	24004308 	.word	0x24004308
 80047b8:	240043a8 	.word	0x240043a8
 80047bc:	240043e8 	.word	0x240043e8
 80047c0:	2400434c 	.word	0x2400434c
 80047c4:	240044b8 	.word	0x240044b8
 80047c8:	24004338 	.word	0x24004338
 80047cc:	24001b74 	.word	0x24001b74
 80047d0:	40001000 	.word	0x40001000
 80047d4:	2400447c 	.word	0x2400447c
 80047d8:	24004408 	.word	0x24004408

080047dc <_Z14speed_callbackRKN8std_msgs7Float32E>:
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
	}
}

//ros speed subscriber callback
void speed_callback(const std_msgs::Float32& msg){
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <_Z14speed_callbackRKN8std_msgs7Float32E+0x34>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d00b      	beq.n	8004804 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>
 80047ec:	4b09      	ldr	r3, [pc, #36]	; (8004814 <_Z14speed_callbackRKN8std_msgs7Float32E+0x38>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>
	pid_its=0;
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <_Z14speed_callbackRKN8std_msgs7Float32E+0x3c>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a07      	ldr	r2, [pc, #28]	; (800481c <_Z14speed_callbackRKN8std_msgs7Float32E+0x40>)
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e000      	b.n	8004806 <_Z14speed_callbackRKN8std_msgs7Float32E+0x2a>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 8004804:	bf00      	nop
}
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	2400447c 	.word	0x2400447c
 8004814:	24004408 	.word	0x24004408
 8004818:	24004409 	.word	0x24004409
 800481c:	2400440c 	.word	0x2400440c

08004820 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

//ros duty cycle subscriber callback
void duty_cycle_callback(const std_msgs::Float32& msg){
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 8004828:	4b1b      	ldr	r3, [pc, #108]	; (8004898 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x78>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d02e      	beq.n	800488e <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x6e>
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x7c>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d02a      	beq.n	800488e <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x6e>
	duty_cycle_output = msg.data;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	4a18      	ldr	r2, [pc, #96]	; (80048a0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x80>)
 800483e:	6013      	str	r3, [r2, #0]
	int32_t esc_count = duty_cycle_output * esc_servo_arr;
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x84>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800484c:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x80>)
 800484e:	edd3 7a00 	vldr	s15, [r3]
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485a:	ee17 3a90 	vmov	r3, s15
 800485e:	60fb      	str	r3, [r7, #12]
	if(abs(esc_count - pre_esc_ccr)>5){
 8004860:	4b11      	ldr	r3, [pc, #68]	; (80048a8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x88>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	4618      	mov	r0, r3
 800486a:	f7fd fb88 	bl	8001f7e <_ZSt3absl>
 800486e:	4603      	mov	r3, r0
 8004870:	2b05      	cmp	r3, #5
 8004872:	bfcc      	ite	gt
 8004874:	2301      	movgt	r3, #1
 8004876:	2300      	movle	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x70>
		pre_esc_ccr = esc_count;
 800487e:	4a0a      	ldr	r2, [pc, #40]	; (80048a8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x88>)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_count);
 8004884:	4b09      	ldr	r3, [pc, #36]	; (80048ac <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x8c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	639a      	str	r2, [r3, #56]	; 0x38
 800488c:	e000      	b.n	8004890 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x70>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 800488e:	bf00      	nop
	}
}
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	2400447c 	.word	0x2400447c
 800489c:	24004408 	.word	0x24004408
 80048a0:	24004410 	.word	0x24004410
 80048a4:	24004484 	.word	0x24004484
 80048a8:	2400448c 	.word	0x2400448c
 80048ac:	240019f4 	.word	0x240019f4

080048b0 <_Z17steering_callbackRKN8std_msgs7Float32E>:

//ros steering subscriber callback
void steering_callback(const std_msgs::Float32& msg){
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 80048b8:	4b19      	ldr	r3, [pc, #100]	; (8004920 <_Z17steering_callbackRKN8std_msgs7Float32E+0x70>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d02b      	beq.n	8004918 <_Z17steering_callbackRKN8std_msgs7Float32E+0x68>
	int32_t steering_pulse = parameters.steering_ratio*msg.data + parameters.steering_offset;
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <_Z17steering_callbackRKN8std_msgs7Float32E+0x74>)
 80048c2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80048cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048d0:	4b14      	ldr	r3, [pc, #80]	; (8004924 <_Z17steering_callbackRKN8std_msgs7Float32E+0x74>)
 80048d2:	8c1b      	ldrh	r3, [r3, #32]
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048e4:	ee17 3a90 	vmov	r3, s15
 80048e8:	60fb      	str	r3, [r7, #12]
	if(abs(steering_pulse - pre_servo_ccr)>5){
 80048ea:	4b0f      	ldr	r3, [pc, #60]	; (8004928 <_Z17steering_callbackRKN8std_msgs7Float32E+0x78>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fd fb43 	bl	8001f7e <_ZSt3absl>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	bfcc      	ite	gt
 80048fe:	2301      	movgt	r3, #1
 8004900:	2300      	movle	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d008      	beq.n	800491a <_Z17steering_callbackRKN8std_msgs7Float32E+0x6a>
		pre_servo_ccr = steering_pulse;
 8004908:	4a07      	ldr	r2, [pc, #28]	; (8004928 <_Z17steering_callbackRKN8std_msgs7Float32E+0x78>)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,steering_pulse);
 800490e:	4b07      	ldr	r3, [pc, #28]	; (800492c <_Z17steering_callbackRKN8std_msgs7Float32E+0x7c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	635a      	str	r2, [r3, #52]	; 0x34
 8004916:	e000      	b.n	800491a <_Z17steering_callbackRKN8std_msgs7Float32E+0x6a>
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 8004918:	bf00      	nop
	}
}
 800491a:	3710      	adds	r7, #16
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	2400447c 	.word	0x2400447c
 8004924:	24000004 	.word	0x24000004
 8004928:	24004488 	.word	0x24004488
 800492c:	240019f4 	.word	0x240019f4

08004930 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

//ros brake subscriber callback
void brake_callback(const std_msgs::Float32MultiArray& msg){
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*brake_arr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493c:	ed93 7a00 	vldr	s14, [r3]
 8004940:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004954:	ee17 3a90 	vmov	r3, s15
 8004958:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 800495a:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d006      	beq.n	8004972 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 8004964:	4a34      	ldr	r2, [pc, #208]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 800496a:	4b34      	ldr	r3, [pc, #208]	; (8004a3c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*brake_arr;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004976:	3304      	adds	r3, #4
 8004978:	ed93 7a00 	vldr	s14, [r3]
 800497c:	4b2d      	ldr	r3, [pc, #180]	; (8004a34 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004990:	ee17 3a90 	vmov	r3, s15
 8004994:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 8004996:	4b28      	ldr	r3, [pc, #160]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	429a      	cmp	r2, r3
 800499e:	d006      	beq.n	80049ae <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 80049a0:	4a25      	ldr	r2, [pc, #148]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 80049a6:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*brake_arr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	3308      	adds	r3, #8
 80049b4:	ed93 7a00 	vldr	s14, [r3]
 80049b8:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049cc:	ee17 3a90 	vmov	r3, s15
 80049d0:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d006      	beq.n	80049ea <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 80049dc:	4a16      	ldr	r2, [pc, #88]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 80049e2:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*brake_arr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	330c      	adds	r3, #12
 80049f0:	ed93 7a00 	vldr	s14, [r3]
 80049f4:	4b0f      	ldr	r3, [pc, #60]	; (8004a34 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	ee07 3a90 	vmov	s15, r3
 80049fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 3a90 	vmov	r3, s15
 8004a0c:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d006      	beq.n	8004a26 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 8004a18:	4a07      	ldr	r2, [pc, #28]	; (8004a38 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 8004a1e:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8004a26:	bf00      	nop
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	24004480 	.word	0x24004480
 8004a38:	24004490 	.word	0x24004490
 8004a3c:	240019a8 	.word	0x240019a8

08004a40 <_Z19input_mode_callbackRKN8std_msgs4BoolE>:

void input_mode_callback(const std_msgs::Bool& msg){
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, (GPIO_PinState)msg.data);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	791b      	ldrb	r3, [r3, #4]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2120      	movs	r1, #32
 8004a50:	4803      	ldr	r0, [pc, #12]	; (8004a60 <_Z19input_mode_callbackRKN8std_msgs4BoolE+0x20>)
 8004a52:	f007 fb4f 	bl	800c0f4 <HAL_GPIO_WritePin>

}
 8004a56:	bf00      	nop
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	58020400 	.word	0x58020400

08004a64 <_Z17pid_mode_callbackRKN8std_msgs4BoolE>:

void pid_mode_callback(const std_msgs::Bool& msg){
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
	if(msg.data != (bool)pid_mode){
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	791b      	ldrb	r3, [r3, #4]
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x40>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	bf14      	ite	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	2300      	moveq	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d00b      	beq.n	8004a9c <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x38>
		pid_mode = (PIDMode_TypeDef)msg.data;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	791b      	ldrb	r3, [r3, #4]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x40>)
 8004a8c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)msg.data);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	791b      	ldrb	r3, [r3, #4]
 8004a92:	461a      	mov	r2, r3
 8004a94:	2120      	movs	r1, #32
 8004a96:	4804      	ldr	r0, [pc, #16]	; (8004aa8 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x44>)
 8004a98:	f007 fb2c 	bl	800c0f4 <HAL_GPIO_WritePin>
	}
}
 8004a9c:	bf00      	nop
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	24004408 	.word	0x24004408
 8004aa8:	58020c00 	.word	0x58020c00

08004aac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_9) {
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004abc:	d116      	bne.n	8004aec <HAL_GPIO_EXTI_Callback+0x40>
	  auto state = HAL_GPIO_ReadPin(PID_MODE_INPUT_GPIO_Port, PID_MODE_INPUT_Pin);
 8004abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ac2:	480c      	ldr	r0, [pc, #48]	; (8004af4 <HAL_GPIO_EXTI_Callback+0x48>)
 8004ac4:	f007 fafe 	bl	800c0c4 <HAL_GPIO_ReadPin>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	73fb      	strb	r3, [r7, #15]
	  if(state==GPIO_PIN_SET){
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d103      	bne.n	8004ada <HAL_GPIO_EXTI_Callback+0x2e>
		  pid_mode = PID_MODE_AUTOMATIC;
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
 8004ad8:	e002      	b.n	8004ae0 <HAL_GPIO_EXTI_Callback+0x34>
	  }else{
		  pid_mode = PID_MODE_MANUAL;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2120      	movs	r1, #32
 8004ae6:	4805      	ldr	r0, [pc, #20]	; (8004afc <HAL_GPIO_EXTI_Callback+0x50>)
 8004ae8:	f007 fb04 	bl	800c0f4 <HAL_GPIO_WritePin>
  }
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	58021000 	.word	0x58021000
 8004af8:	24004408 	.word	0x24004408
 8004afc:	58020c00 	.word	0x58020c00

08004b00 <_Z9adc_setupv>:

void adc_setup(){
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
 8004b04:	2208      	movs	r2, #8
 8004b06:	4903      	ldr	r1, [pc, #12]	; (8004b14 <_Z9adc_setupv+0x14>)
 8004b08:	4803      	ldr	r0, [pc, #12]	; (8004b18 <_Z9adc_setupv+0x18>)
 8004b0a:	f003 f809 	bl	8007b20 <HAL_ADC_Start_DMA>
}
 8004b0e:	bf00      	nop
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	240043e8 	.word	0x240043e8
 8004b18:	240012bc 	.word	0x240012bc

08004b1c <_Z10uart_setupv>:

void uart_setup(){
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8004b20:	2220      	movs	r2, #32
 8004b22:	493b      	ldr	r1, [pc, #236]	; (8004c10 <_Z10uart_setupv+0xf4>)
 8004b24:	483b      	ldr	r0, [pc, #236]	; (8004c14 <_Z10uart_setupv+0xf8>)
 8004b26:	f00d fea7 	bl	8012878 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+4);
 8004b2a:	2224      	movs	r2, #36	; 0x24
 8004b2c:	493a      	ldr	r1, [pc, #232]	; (8004c18 <_Z10uart_setupv+0xfc>)
 8004b2e:	483b      	ldr	r0, [pc, #236]	; (8004c1c <_Z10uart_setupv+0x100>)
 8004b30:	f00d fea2 	bl	8012878 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8004b34:	220b      	movs	r2, #11
 8004b36:	493a      	ldr	r1, [pc, #232]	; (8004c20 <_Z10uart_setupv+0x104>)
 8004b38:	483a      	ldr	r0, [pc, #232]	; (8004c24 <_Z10uart_setupv+0x108>)
 8004b3a:	f00d fe9d 	bl	8012878 <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 8004b3e:	2264      	movs	r2, #100	; 0x64
 8004b40:	4939      	ldr	r1, [pc, #228]	; (8004c28 <_Z10uart_setupv+0x10c>)
 8004b42:	483a      	ldr	r0, [pc, #232]	; (8004c2c <_Z10uart_setupv+0x110>)
 8004b44:	f00f fd7c 	bl	8014640 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004b48:	4b39      	ldr	r3, [pc, #228]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a39      	ldr	r2, [pc, #228]	; (8004c34 <_Z10uart_setupv+0x118>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d04a      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b52:	4b37      	ldr	r3, [pc, #220]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a38      	ldr	r2, [pc, #224]	; (8004c38 <_Z10uart_setupv+0x11c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d045      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b5c:	4b34      	ldr	r3, [pc, #208]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a36      	ldr	r2, [pc, #216]	; (8004c3c <_Z10uart_setupv+0x120>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d040      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b66:	4b32      	ldr	r3, [pc, #200]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a35      	ldr	r2, [pc, #212]	; (8004c40 <_Z10uart_setupv+0x124>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d03b      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b70:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a33      	ldr	r2, [pc, #204]	; (8004c44 <_Z10uart_setupv+0x128>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d036      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a32      	ldr	r2, [pc, #200]	; (8004c48 <_Z10uart_setupv+0x12c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d031      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b84:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a30      	ldr	r2, [pc, #192]	; (8004c4c <_Z10uart_setupv+0x130>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d02c      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b8e:	4b28      	ldr	r3, [pc, #160]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a2f      	ldr	r2, [pc, #188]	; (8004c50 <_Z10uart_setupv+0x134>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d027      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004b98:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	; (8004c54 <_Z10uart_setupv+0x138>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d022      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <_Z10uart_setupv+0x13c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d01d      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004bac:	4b20      	ldr	r3, [pc, #128]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a2a      	ldr	r2, [pc, #168]	; (8004c5c <_Z10uart_setupv+0x140>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d018      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004bb6:	4b1e      	ldr	r3, [pc, #120]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a29      	ldr	r2, [pc, #164]	; (8004c60 <_Z10uart_setupv+0x144>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d013      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004bc0:	4b1b      	ldr	r3, [pc, #108]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a27      	ldr	r2, [pc, #156]	; (8004c64 <_Z10uart_setupv+0x148>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d00e      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004bca:	4b19      	ldr	r3, [pc, #100]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a26      	ldr	r2, [pc, #152]	; (8004c68 <_Z10uart_setupv+0x14c>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d009      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004bd4:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	; (8004c6c <_Z10uart_setupv+0x150>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d004      	beq.n	8004be8 <_Z10uart_setupv+0xcc>
 8004bde:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <_Z10uart_setupv+0x154>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d108      	bne.n	8004bfa <_Z10uart_setupv+0xde>
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 0208 	bic.w	r2, r2, #8
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	e008      	b.n	8004c0c <_Z10uart_setupv+0xf0>
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <_Z10uart_setupv+0x114>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0204 	bic.w	r2, r2, #4
 8004c08:	601a      	str	r2, [r3, #0]
}
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	24004360 	.word	0x24004360
 8004c14:	240013a8 	.word	0x240013a8
 8004c18:	24004384 	.word	0x24004384
 8004c1c:	240014d0 	.word	0x240014d0
 8004c20:	240044ac 	.word	0x240044ac
 8004c24:	240015f8 	.word	0x240015f8
 8004c28:	24004418 	.word	0x24004418
 8004c2c:	24001564 	.word	0x24001564
 8004c30:	2400186c 	.word	0x2400186c
 8004c34:	40020010 	.word	0x40020010
 8004c38:	40020028 	.word	0x40020028
 8004c3c:	40020040 	.word	0x40020040
 8004c40:	40020058 	.word	0x40020058
 8004c44:	40020070 	.word	0x40020070
 8004c48:	40020088 	.word	0x40020088
 8004c4c:	400200a0 	.word	0x400200a0
 8004c50:	400200b8 	.word	0x400200b8
 8004c54:	40020410 	.word	0x40020410
 8004c58:	40020428 	.word	0x40020428
 8004c5c:	40020440 	.word	0x40020440
 8004c60:	40020458 	.word	0x40020458
 8004c64:	40020470 	.word	0x40020470
 8004c68:	40020488 	.word	0x40020488
 8004c6c:	400204a0 	.word	0x400204a0
 8004c70:	400204b8 	.word	0x400204b8

08004c74 <_Z11timer_setupv>:

void timer_setup(){
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0

	//set tim16 ARR value based on topic publish frequency and start tim16, 10000 = 100M/(9999+1), where 9999 is the prescale of timer16
	__HAL_TIM_SET_PRESCALER(&htim16,9999);
 8004c78:	4b65      	ldr	r3, [pc, #404]	; (8004e10 <_Z11timer_setupv+0x19c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c80:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim16,10000/parameters.publish_frequency-1);
 8004c82:	4b64      	ldr	r3, [pc, #400]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004c84:	7d1b      	ldrb	r3, [r3, #20]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f242 7310 	movw	r3, #10000	; 0x2710
 8004c8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	4b5f      	ldr	r3, [pc, #380]	; (8004e10 <_Z11timer_setupv+0x19c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c98:	4b5e      	ldr	r3, [pc, #376]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004c9a:	7d1b      	ldrb	r3, [r3, #20]
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	461a      	mov	r2, r3
 8004caa:	4b59      	ldr	r3, [pc, #356]	; (8004e10 <_Z11timer_setupv+0x19c>)
 8004cac:	60da      	str	r2, [r3, #12]

	//set tim6 ARR value based on PID calculation frequency and start tim7
	__HAL_TIM_SET_PRESCALER(&htim6,9999);
 8004cae:	4b5a      	ldr	r3, [pc, #360]	; (8004e18 <_Z11timer_setupv+0x1a4>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim6,uint32_t(10000/parameters.pid_frequency-1));
 8004cb8:	4b56      	ldr	r3, [pc, #344]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004cba:	7d5b      	ldrb	r3, [r3, #21]
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cc6:	1e5a      	subs	r2, r3, #1
 8004cc8:	4b53      	ldr	r3, [pc, #332]	; (8004e18 <_Z11timer_setupv+0x1a4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cce:	4b51      	ldr	r3, [pc, #324]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004cd0:	7d5b      	ldrb	r3, [r3, #21]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b4d      	ldr	r3, [pc, #308]	; (8004e18 <_Z11timer_setupv+0x1a4>)
 8004ce2:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 8004ce4:	484c      	ldr	r0, [pc, #304]	; (8004e18 <_Z11timer_setupv+0x1a4>)
 8004ce6:	f00b fc6b 	bl	80105c0 <HAL_TIM_Base_Start_IT>

	//start esc and steering servo pwm output
	input_freq = parameters.steering_esc_pwm_frequency;
 8004cea:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004cec:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 2a90 	vmov	r2, s15
 8004cf8:	4b48      	ldr	r3, [pc, #288]	; (8004e1c <_Z11timer_setupv+0x1a8>)
 8004cfa:	601a      	str	r2, [r3, #0]
	esc_servo_arr = 1000000/parameters.steering_esc_pwm_frequency-1;
 8004cfc:	4b45      	ldr	r3, [pc, #276]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004cfe:	ed93 7a07 	vldr	s14, [r3, #28]
 8004d02:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004e20 <_Z11timer_setupv+0x1ac>
 8004d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d16:	ee17 2a90 	vmov	r2, s15
 8004d1a:	4b42      	ldr	r3, [pc, #264]	; (8004e24 <_Z11timer_setupv+0x1b0>)
 8004d1c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3,esc_servo_arr);
 8004d1e:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <_Z11timer_setupv+0x1b4>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <_Z11timer_setupv+0x1b0>)
 8004d24:	6812      	ldr	r2, [r2, #0]
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d28:	4b3e      	ldr	r3, [pc, #248]	; (8004e24 <_Z11timer_setupv+0x1b0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a3e      	ldr	r2, [pc, #248]	; (8004e28 <_Z11timer_setupv+0x1b4>)
 8004d2e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 8004d30:	4b38      	ldr	r3, [pc, #224]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004d32:	8c1a      	ldrh	r2, [r3, #32]
 8004d34:	4b3c      	ldr	r3, [pc, #240]	; (8004e28 <_Z11timer_setupv+0x1b4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	635a      	str	r2, [r3, #52]	; 0x34
	pre_servo_ccr = parameters.steering_offset;
 8004d3a:	4b36      	ldr	r3, [pc, #216]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004d3c:	8c1b      	ldrh	r3, [r3, #32]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b3a      	ldr	r3, [pc, #232]	; (8004e2c <_Z11timer_setupv+0x1b8>)
 8004d42:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 8004d44:	4b33      	ldr	r3, [pc, #204]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004d46:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004d48:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <_Z11timer_setupv+0x1b4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
	pre_esc_ccr = parameters.esc_offset;
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004d50:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004d52:	461a      	mov	r2, r3
 8004d54:	4b36      	ldr	r3, [pc, #216]	; (8004e30 <_Z11timer_setupv+0x1bc>)
 8004d56:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004d58:	2100      	movs	r1, #0
 8004d5a:	4833      	ldr	r0, [pc, #204]	; (8004e28 <_Z11timer_setupv+0x1b4>)
 8004d5c:	f00b fd0a 	bl	8010774 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004d60:	2104      	movs	r1, #4
 8004d62:	4831      	ldr	r0, [pc, #196]	; (8004e28 <_Z11timer_setupv+0x1b4>)
 8004d64:	f00b fd06 	bl	8010774 <HAL_TIM_PWM_Start>

	//set brake pwm, prescaler 99, timer frequency is 100MHz
	__HAL_TIM_SET_PRESCALER(&htim2,99);
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2263      	movs	r2, #99	; 0x63
 8004d6e:	629a      	str	r2, [r3, #40]	; 0x28
	//set tim2 ARR value based on brake frequency and start tim6, 1000000 = 100M/(99+1)
	brake_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <_Z11timer_setupv+0x1a0>)
 8004d72:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8004d76:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004e20 <_Z11timer_setupv+0x1ac>
 8004d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d8a:	ee17 2a90 	vmov	r2, s15
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <_Z11timer_setupv+0x1c4>)
 8004d90:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,brake_arr);
 8004d92:	4b28      	ldr	r3, [pc, #160]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a28      	ldr	r2, [pc, #160]	; (8004e38 <_Z11timer_setupv+0x1c4>)
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d9c:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <_Z11timer_setupv+0x1c4>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004da2:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004da4:	2100      	movs	r1, #0
 8004da6:	4823      	ldr	r0, [pc, #140]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004da8:	f00b fce4 	bl	8010774 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004dac:	2104      	movs	r1, #4
 8004dae:	4821      	ldr	r0, [pc, #132]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004db0:	f00b fce0 	bl	8010774 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004db4:	2108      	movs	r1, #8
 8004db6:	481f      	ldr	r0, [pc, #124]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004db8:	f00b fcdc 	bl	8010774 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004dbc:	210c      	movs	r1, #12
 8004dbe:	481d      	ldr	r0, [pc, #116]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004dc0:	f00b fcd8 	bl	8010774 <HAL_TIM_PWM_Start>
	//initial value zeros
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8004dd4:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 8004ddc:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <_Z11timer_setupv+0x1c0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40

	//pwm input capture for servo and esc
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004de4:	2100      	movs	r1, #0
 8004de6:	4815      	ldr	r0, [pc, #84]	; (8004e3c <_Z11timer_setupv+0x1c8>)
 8004de8:	f00b ff38 	bl	8010c5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004dec:	2104      	movs	r1, #4
 8004dee:	4813      	ldr	r0, [pc, #76]	; (8004e3c <_Z11timer_setupv+0x1c8>)
 8004df0:	f00b fe30 	bl	8010a54 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004df4:	2100      	movs	r1, #0
 8004df6:	4812      	ldr	r0, [pc, #72]	; (8004e40 <_Z11timer_setupv+0x1cc>)
 8004df8:	f00b ff30 	bl	8010c5c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4810      	ldr	r0, [pc, #64]	; (8004e40 <_Z11timer_setupv+0x1cc>)
 8004e00:	f00b fe28 	bl	8010a54 <HAL_TIM_IC_Start>

	//start ros publish
	//this timer should start as the last one.
	HAL_TIM_Base_Start_IT(&htim16);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <_Z11timer_setupv+0x19c>)
 8004e06:	f00b fbdb 	bl	80105c0 <HAL_TIM_Base_Start_IT>


}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	24001b24 	.word	0x24001b24
 8004e14:	24000004 	.word	0x24000004
 8004e18:	24001a8c 	.word	0x24001a8c
 8004e1c:	240044a8 	.word	0x240044a8
 8004e20:	49742400 	.word	0x49742400
 8004e24:	24004484 	.word	0x24004484
 8004e28:	240019f4 	.word	0x240019f4
 8004e2c:	24004488 	.word	0x24004488
 8004e30:	2400448c 	.word	0x2400448c
 8004e34:	240019a8 	.word	0x240019a8
 8004e38:	24004480 	.word	0x24004480
 8004e3c:	24001a40 	.word	0x24001a40
 8004e40:	24001ad8 	.word	0x24001ad8

08004e44 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );

void ros_setup(){
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0

	//setup the sensor message, the first 16 data are speed, next 8 data are force, next
	sensor_msg.data_length = wheel_speed_size + force_size + vesc_size + imu_size;
 8004e48:	4b1a      	ldr	r3, [pc, #104]	; (8004eb4 <_Z9ros_setupv+0x70>)
 8004e4a:	2226      	movs	r2, #38	; 0x26
 8004e4c:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_msg.data = new std_msgs::Float32MultiArray::_data_type[sensor_msg.data_length];
 8004e4e:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <_Z9ros_setupv+0x70>)
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d201      	bcs.n	8004e5e <_Z9ros_setupv+0x1a>
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	e001      	b.n	8004e62 <_Z9ros_setupv+0x1e>
 8004e5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e62:	4618      	mov	r0, r3
 8004e64:	f00f fc8e 	bl	8014784 <_Znaj>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4b11      	ldr	r3, [pc, #68]	; (8004eb4 <_Z9ros_setupv+0x70>)
 8004e6e:	62da      	str	r2, [r3, #44]	; 0x2c

	nh.initNode();
 8004e70:	4811      	ldr	r0, [pc, #68]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004e72:	f000 fc55 	bl	8005720 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(speed_sub);
 8004e76:	4911      	ldr	r1, [pc, #68]	; (8004ebc <_Z9ros_setupv+0x78>)
 8004e78:	480f      	ldr	r0, [pc, #60]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004e7a:	f000 fc7a 	bl	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(input_mode_sub);
 8004e7e:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <_Z9ros_setupv+0x7c>)
 8004e80:	480d      	ldr	r0, [pc, #52]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004e82:	f000 fc76 	bl	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(brake_sub);
 8004e86:	490f      	ldr	r1, [pc, #60]	; (8004ec4 <_Z9ros_setupv+0x80>)
 8004e88:	480b      	ldr	r0, [pc, #44]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004e8a:	f000 fc72 	bl	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(steering_sub);
 8004e8e:	490e      	ldr	r1, [pc, #56]	; (8004ec8 <_Z9ros_setupv+0x84>)
 8004e90:	4809      	ldr	r0, [pc, #36]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004e92:	f000 fc6e 	bl	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(duty_cycle_sub);
 8004e96:	490d      	ldr	r1, [pc, #52]	; (8004ecc <_Z9ros_setupv+0x88>)
 8004e98:	4807      	ldr	r0, [pc, #28]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004e9a:	f000 fc6a 	bl	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(pid_mode_sub);
 8004e9e:	490c      	ldr	r1, [pc, #48]	; (8004ed0 <_Z9ros_setupv+0x8c>)
 8004ea0:	4805      	ldr	r0, [pc, #20]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004ea2:	f000 fc66 	bl	8005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>

	nh.advertise(ros_pub);
 8004ea6:	490b      	ldr	r1, [pc, #44]	; (8004ed4 <_Z9ros_setupv+0x90>)
 8004ea8:	4803      	ldr	r0, [pc, #12]	; (8004eb8 <_Z9ros_setupv+0x74>)
 8004eaa:	f000 fc8f 	bl	80057cc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	24004308 	.word	0x24004308
 8004eb8:	24001b74 	.word	0x24001b74
 8004ebc:	24004570 	.word	0x24004570
 8004ec0:	24004608 	.word	0x24004608
 8004ec4:	240045c4 	.word	0x240045c4
 8004ec8:	240045a8 	.word	0x240045a8
 8004ecc:	2400458c 	.word	0x2400458c
 8004ed0:	24004624 	.word	0x24004624
 8004ed4:	24004338 	.word	0x24004338

08004ed8 <_Z15read_parametersv>:
	//blue and yellow led, default off
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
}

void read_parameters(){
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 8004ede:	f7fb feaf 	bl	8000c40 <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 8004ee2:	f7fb feb5 	bl	8000c50 <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004ee6:	1d3b      	adds	r3, r7, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fc f8ad 	bl	8001048 <QSPI_W25Q64JV_DeviceID>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	bf14      	ite	ne
 8004ef4:	2301      	movne	r3, #1
 8004ef6:	2300      	moveq	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <_Z15read_parametersv+0x2c>
	    printf("Initializing ROM\n");
 8004efe:	4820      	ldr	r0, [pc, #128]	; (8004f80 <_Z15read_parametersv+0xa8>)
 8004f00:	f010 fab4 	bl	801546c <puts>
	}
	printf("Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 8004f04:	793b      	ldrb	r3, [r7, #4]
 8004f06:	4619      	mov	r1, r3
 8004f08:	797b      	ldrb	r3, [r7, #5]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	481d      	ldr	r0, [pc, #116]	; (8004f84 <_Z15read_parametersv+0xac>)
 8004f0e:	f010 fa47 	bl	80153a0 <iprintf>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 8004f12:	463b      	mov	r3, r7
 8004f14:	2204      	movs	r2, #4
 8004f16:	2100      	movs	r1, #0
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb ff17 	bl	8000d4c <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 8004f1e:	783b      	ldrb	r3, [r7, #0]
 8004f20:	2b61      	cmp	r3, #97	; 0x61
 8004f22:	d108      	bne.n	8004f36 <_Z15read_parametersv+0x5e>
 8004f24:	787b      	ldrb	r3, [r7, #1]
 8004f26:	2b63      	cmp	r3, #99	; 0x63
 8004f28:	d105      	bne.n	8004f36 <_Z15read_parametersv+0x5e>
 8004f2a:	78bb      	ldrb	r3, [r7, #2]
 8004f2c:	2b73      	cmp	r3, #115	; 0x73
 8004f2e:	d102      	bne.n	8004f36 <_Z15read_parametersv+0x5e>
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b72      	cmp	r3, #114	; 0x72
 8004f34:	d003      	beq.n	8004f3e <_Z15read_parametersv+0x66>
		printf("Reading parameters fails, use default parameters\n");
 8004f36:	4814      	ldr	r0, [pc, #80]	; (8004f88 <_Z15read_parametersv+0xb0>)
 8004f38:	f010 fa98 	bl	801546c <puts>
		return;
 8004f3c:	e01c      	b.n	8004f78 <_Z15read_parametersv+0xa0>
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 8004f3e:	2240      	movs	r2, #64	; 0x40
 8004f40:	2100      	movs	r1, #0
 8004f42:	4812      	ldr	r0, [pc, #72]	; (8004f8c <_Z15read_parametersv+0xb4>)
 8004f44:	f7fb ff02 	bl	8000d4c <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004f48:	4b10      	ldr	r3, [pc, #64]	; (8004f8c <_Z15read_parametersv+0xb4>)
 8004f4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4e:	2b62      	cmp	r3, #98	; 0x62
 8004f50:	d10e      	bne.n	8004f70 <_Z15read_parametersv+0x98>
 8004f52:	4b0e      	ldr	r3, [pc, #56]	; (8004f8c <_Z15read_parametersv+0xb4>)
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f58:	2b34      	cmp	r3, #52	; 0x34
 8004f5a:	d109      	bne.n	8004f70 <_Z15read_parametersv+0x98>
 8004f5c:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <_Z15read_parametersv+0xb4>)
 8004f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f62:	2b30      	cmp	r3, #48	; 0x30
 8004f64:	d104      	bne.n	8004f70 <_Z15read_parametersv+0x98>
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <_Z15read_parametersv+0xb4>)
 8004f68:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f6c:	2b31      	cmp	r3, #49	; 0x31
 8004f6e:	d003      	beq.n	8004f78 <_Z15read_parametersv+0xa0>
		printf("Reading parameters fails, use default parameters\n");
 8004f70:	4805      	ldr	r0, [pc, #20]	; (8004f88 <_Z15read_parametersv+0xb0>)
 8004f72:	f010 fa7b 	bl	801546c <puts>
		return;
 8004f76:	bf00      	nop
	}
}
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	080173b4 	.word	0x080173b4
 8004f84:	080173c8 	.word	0x080173c8
 8004f88:	080173f4 	.word	0x080173f4
 8004f8c:	24000004 	.word	0x24000004

08004f90 <setup>:


void setup(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
	DWT_Init();
 8004f94:	f7fe fd22 	bl	80039dc <_ZL8DWT_Initv>
	read_parameters();
 8004f98:	f7ff ff9e 	bl	8004ed8 <_Z15read_parametersv>
	uart_setup();
 8004f9c:	f7ff fdbe 	bl	8004b1c <_Z10uart_setupv>
	adc_setup();
 8004fa0:	f7ff fdae 	bl	8004b00 <_Z9adc_setupv>
	ros_setup();
 8004fa4:	f7ff ff4e 	bl	8004e44 <_Z9ros_setupv>
	timer_setup();
 8004fa8:	f7ff fe64 	bl	8004c74 <_Z11timer_setupv>
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8004fac:	2200      	movs	r2, #0
 8004fae:	2120      	movs	r1, #32
 8004fb0:	4808      	ldr	r0, [pc, #32]	; (8004fd4 <setup+0x44>)
 8004fb2:	f007 f89f 	bl	800c0f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	2108      	movs	r1, #8
 8004fba:	4807      	ldr	r0, [pc, #28]	; (8004fd8 <setup+0x48>)
 8004fbc:	f007 f89a 	bl	800c0f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)pid_mode);
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <setup+0x4c>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	2120      	movs	r1, #32
 8004fc8:	4805      	ldr	r0, [pc, #20]	; (8004fe0 <setup+0x50>)
 8004fca:	f007 f893 	bl	800c0f4 <HAL_GPIO_WritePin>
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	58020400 	.word	0x58020400
 8004fd8:	58021000 	.word	0x58021000
 8004fdc:	24004408 	.word	0x24004408
 8004fe0:	58020c00 	.word	0x58020c00

08004fe4 <loop>:

uint8_t loop_index = 0;

void loop(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
	auto state = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin);
 8004fea:	2180      	movs	r1, #128	; 0x80
 8004fec:	4826      	ldr	r0, [pc, #152]	; (8005088 <loop+0xa4>)
 8004fee:	f007 f869 	bl	800c0c4 <HAL_GPIO_ReadPin>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	71fb      	strb	r3, [r7, #7]

	if(state==GPIO_PIN_SET){
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d103      	bne.n	8005004 <loop+0x20>
		input_mode = INPUT_MODE_CONTROLLER;
 8004ffc:	4b23      	ldr	r3, [pc, #140]	; (800508c <loop+0xa8>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e005      	b.n	8005010 <loop+0x2c>
	}else if(state==GPIO_PIN_RESET){
 8005004:	79fb      	ldrb	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d102      	bne.n	8005010 <loop+0x2c>
		input_mode = INPUT_MODE_SOFTWARE;
 800500a:	4b20      	ldr	r3, [pc, #128]	; (800508c <loop+0xa8>)
 800500c:	2200      	movs	r2, #0
 800500e:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, state);
 8005010:	79fb      	ldrb	r3, [r7, #7]
 8005012:	461a      	mov	r2, r3
 8005014:	2108      	movs	r1, #8
 8005016:	481e      	ldr	r0, [pc, #120]	; (8005090 <loop+0xac>)
 8005018:	f007 f86c 	bl	800c0f4 <HAL_GPIO_WritePin>

	loop_index++;
 800501c:	4b1d      	ldr	r3, [pc, #116]	; (8005094 <loop+0xb0>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <loop+0xb0>)
 8005026:	701a      	strb	r2, [r3, #0]
	if(esc_receive_indicator <=5 )esc_receive_indicator++;
 8005028:	4b1b      	ldr	r3, [pc, #108]	; (8005098 <loop+0xb4>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b05      	cmp	r3, #5
 800502e:	d805      	bhi.n	800503c <loop+0x58>
 8005030:	4b19      	ldr	r3, [pc, #100]	; (8005098 <loop+0xb4>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	3301      	adds	r3, #1
 8005036:	b2da      	uxtb	r2, r3
 8005038:	4b17      	ldr	r3, [pc, #92]	; (8005098 <loop+0xb4>)
 800503a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800503c:	2064      	movs	r0, #100	; 0x64
 800503e:	f002 f995 	bl	800736c <HAL_Delay>
	if(loop_index==5){
 8005042:	4b14      	ldr	r3, [pc, #80]	; (8005094 <loop+0xb0>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b05      	cmp	r3, #5
 8005048:	d116      	bne.n	8005078 <loop+0x94>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800504a:	2140      	movs	r1, #64	; 0x40
 800504c:	4810      	ldr	r0, [pc, #64]	; (8005090 <loop+0xac>)
 800504e:	f007 f86a 	bl	800c126 <HAL_GPIO_TogglePin>
		loop_index=0;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <loop+0xb0>)
 8005054:	2200      	movs	r2, #0
 8005056:	701a      	strb	r2, [r3, #0]
		if(esc_receive_indicator>=5)error_code = error_code & 0xFF;
 8005058:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <loop+0xb4>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d904      	bls.n	800506a <loop+0x86>
 8005060:	4b0e      	ldr	r3, [pc, #56]	; (800509c <loop+0xb8>)
 8005062:	781a      	ldrb	r2, [r3, #0]
 8005064:	4b0d      	ldr	r3, [pc, #52]	; (800509c <loop+0xb8>)
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e006      	b.n	8005078 <loop+0x94>
		else error_code = error_code & 0b11111110;
 800506a:	4b0c      	ldr	r3, [pc, #48]	; (800509c <loop+0xb8>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f023 0301 	bic.w	r3, r3, #1
 8005072:	b2da      	uxtb	r2, r3
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <loop+0xb8>)
 8005076:	701a      	strb	r2, [r3, #0]
	}
	HAL_IWDG_Refresh(&hiwdg1);
 8005078:	4809      	ldr	r0, [pc, #36]	; (80050a0 <loop+0xbc>)
 800507a:	f007 f8d7 	bl	800c22c <HAL_IWDG_Refresh>
}
 800507e:	bf00      	nop
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	58020400 	.word	0x58020400
 800508c:	2400447c 	.word	0x2400447c
 8005090:	58020c00 	.word	0x58020c00
 8005094:	24004640 	.word	0x24004640
 8005098:	24004381 	.word	0x24004381
 800509c:	24004380 	.word	0x24004380
 80050a0:	24001398 	.word	0x24001398

080050a4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	e00c      	b.n	80050ce <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	fa22 f103 	lsr.w	r1, r2, r3
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	b2ca      	uxtb	r2, r1
 80050c6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3301      	adds	r3, #1
 80050cc:	60fb      	str	r3, [r7, #12]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d9ef      	bls.n	80050b4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80050d4:	bf00      	nop
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	e010      	b.n	800511a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6839      	ldr	r1, [r7, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	440a      	add	r2, r1
 8005102:	7812      	ldrb	r2, [r2, #0]
 8005104:	4611      	mov	r1, r2
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	00d2      	lsls	r2, r2, #3
 800510a:	fa01 f202 	lsl.w	r2, r1, r2
 800510e:	431a      	orrs	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	3301      	adds	r3, #1
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b03      	cmp	r3, #3
 800511e:	d9eb      	bls.n	80050f8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8005120:	bf00      	nop
 8005122:	bf00      	nop
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
  }
 800513a:	4618      	mov	r0, r3
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8005146:	b580      	push	{r7, lr}
 8005148:	b084      	sub	sp, #16
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	3304      	adds	r3, #4
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd ff72 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005158:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005160:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800516c:	4293      	cmp	r3, r2
 800516e:	d905      	bls.n	800517c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005182:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00e      	beq.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005190:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	429a      	cmp	r2, r3
 8005198:	d906      	bls.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d014      	beq.n	80051dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fd ff40 	bl	800303c <_ZN13STM32Hardware4timeEv>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80051c8:	429a      	cmp	r2, r3
 80051ca:	bf8c      	ite	hi
 80051cc:	2301      	movhi	r3, #1
 80051ce:	2300      	movls	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 80051d6:	f06f 0301 	mvn.w	r3, #1
 80051da:	e221      	b.n	8005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7fd fe5b 	bl	8002e9c <_ZN13STM32Hardware4readEv>
 80051e6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f2c0 81fa 	blt.w	80055e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051f6:	f8d3 2754 	ldr.w	r2, [r3, #1876]	; 0x754
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	4413      	add	r3, r2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005204:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800520e:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005212:	2b07      	cmp	r3, #7
 8005214:	d12b      	bne.n	800526e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800521c:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8005228:	f8c1 2750 	str.w	r2, [r1, #1872]	; 0x750
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	b2d1      	uxtb	r1, r2
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	460a      	mov	r2, r1
 8005236:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005240:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005244:	3b01      	subs	r3, #1
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800524c:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005256:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1a4      	bne.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005264:	461a      	mov	r2, r3
 8005266:	2308      	movs	r3, #8
 8005268:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 800526c:	e79c      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005274:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005278:	2b00      	cmp	r3, #0
 800527a:	d130      	bne.n	80052de <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2bff      	cmp	r3, #255	; 0xff
 8005280:	d112      	bne.n	80052a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x162>
        {
          mode_++;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005288:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800528c:	3301      	adds	r3, #1
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005294:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	3314      	adds	r3, #20
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80052a2:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 80052a6:	e77f      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fd fec5 	bl	800303c <_ZN13STM32Hardware4timeEv>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf8c      	ite	hi
 80052c0:	2301      	movhi	r3, #1
 80052c2:	2300      	movls	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f43f af6e 	beq.w	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
          return SPIN_TIMEOUT;
 80052d8:	f06f 0301 	mvn.w	r3, #1
 80052dc:	e1a0      	b.n	8005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052e4:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d121      	bne.n	8005330 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2bfe      	cmp	r3, #254	; 0xfe
 80052f0:	d10b      	bne.n	800530a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1c4>
        {
          mode_++;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052f8:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052fc:	3301      	adds	r3, #1
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005304:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005308:	e74e      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          if (configured_ == false)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800531e:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005322:	2b00      	cmp	r3, #0
 8005324:	f47f af40 	bne.w	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa7f 	bl	800582c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
 800532e:	e73b      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005336:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800533a:	2b02      	cmp	r3, #2
 800533c:	d120      	bne.n	8005380 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005344:	461a      	mov	r2, r3
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        index_ = 0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005352:	461a      	mov	r2, r3
 8005354:	2300      	movs	r3, #0
 8005356:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
        mode_++;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005360:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005364:	3301      	adds	r3, #1
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800536c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte for calculating size checksum */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005376:	461a      	mov	r2, r3
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 800537e:	e713      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005386:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800538a:	2b03      	cmp	r3, #3
 800538c:	d118      	bne.n	80053c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005394:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	021b      	lsls	r3, r3, #8
 800539c:	4413      	add	r3, r2
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053a4:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        mode_++;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ae:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053b2:	3301      	adds	r3, #1
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053ba:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80053be:	e6f3      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053c6:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d11f      	bne.n	800540e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053d4:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80053d8:	425a      	negs	r2, r3
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	b2d2      	uxtb	r2, r2
 80053de:	bf58      	it	pl
 80053e0:	4253      	negpl	r3, r2
 80053e2:	2bff      	cmp	r3, #255	; 0xff
 80053e4:	d10b      	bne.n	80053fe <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2b8>
          mode_++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ec:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053f0:	3301      	adds	r3, #1
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053f8:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80053fc:	e6d4      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005404:	461a      	mov	r2, r3
 8005406:	2300      	movs	r3, #0
 8005408:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 800540c:	e6cc      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005414:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005418:	2b05      	cmp	r3, #5
 800541a:	d119      	bne.n	8005450 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005422:	461a      	mov	r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_++;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005430:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005434:	3301      	adds	r3, #1
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800543c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte included in checksum */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005446:	461a      	mov	r2, r3
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 800544e:	e6ab      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005456:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800545a:	2b06      	cmp	r3, #6
 800545c:	d123      	bne.n	80054a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005464:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	4413      	add	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005474:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_ = MODE_MESSAGE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800547e:	461a      	mov	r2, r3
 8005480:	2307      	movs	r3, #7
 8005482:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if (bytes_ == 0)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800548c:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005490:	2b00      	cmp	r3, #0
 8005492:	f47f ae89 	bne.w	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800549c:	461a      	mov	r2, r3
 800549e:	2308      	movs	r3, #8
 80054a0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80054a4:	e680      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054ac:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	f47f ae79 	bne.w	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054bc:	461a      	mov	r2, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if ((checksum_ % 256) == 255)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054ca:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80054ce:	425a      	negs	r2, r3
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	bf58      	it	pl
 80054d6:	4253      	negpl	r3, r2
 80054d8:	2bff      	cmp	r3, #255	; 0xff
 80054da:	f47f ae65 	bne.w	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054e4:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f99d 	bl	800582c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f9b8 	bl	8005868 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054fe:	461a      	mov	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
            last_sync_receive_time = c_time;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800550c:	461a      	mov	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
            return SPIN_ERR;
 8005514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005518:	e082      	b.n	8005620 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005520:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005524:	2b0a      	cmp	r3, #10
 8005526:	d107      	bne.n	8005538 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800552e:	4619      	mov	r1, r3
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fa83 	bl	8005a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>
 8005536:	e637      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800553e:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005542:	2b06      	cmp	r3, #6
 8005544:	d111      	bne.n	800556a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	f242 736c 	movw	r3, #10092	; 0x276c
 800554c:	4413      	add	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005554:	4611      	mov	r1, r2
 8005556:	4618      	mov	r0, r3
 8005558:	f7fd f9e3 	bl	8002922 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8005568:	e61e      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005570:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005574:	2b0b      	cmp	r3, #11
 8005576:	d106      	bne.n	8005586 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x440>
          {
            configured_ = false;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8005584:	e610      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800558c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005590:	3b64      	subs	r3, #100	; 0x64
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f43f ae02 	beq.w	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055aa:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055ae:	3b64      	subs	r3, #100	; 0x64
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	6858      	ldr	r0, [r3, #4]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055c2:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055c6:	3b64      	subs	r3, #100	; 0x64
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80055de:	4611      	mov	r1, r2
 80055e0:	4798      	blx	r3
    while (true)
 80055e2:	e5e1      	b.n	80051a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 80055e4:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055ec:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d014      	beq.n	800561e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055fa:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005606:	4293      	cmp	r3, r2
 8005608:	d909      	bls.n	800561e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f90e 	bl	800582c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005616:	461a      	mov	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
    }

    return SPIN_OK;
 800561e:	2300      	movs	r3, #0
  }
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	4a04      	ldr	r2, [pc, #16]	; (8005644 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr
 8005644:	080175dc 	.word	0x080175dc

08005648 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ffe5 	bl	8005628 <_ZN3ros11Subscriber_C1Ev>
 800565e:	4a0b      	ldr	r2, [pc, #44]	; (800568c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	330c      	adds	r3, #12
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe f8b1 	bl	80037d0 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
  };
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	08017538 	.word	0x08017538

08005690 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff ffc1 	bl	8005628 <_ZN3ros11Subscriber_C1Ev>
 80056a6:	4a0b      	ldr	r2, [pc, #44]	; (80056d4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	330c      	adds	r3, #12
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fd ff53 	bl	800355c <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	609a      	str	r2, [r3, #8]
  };
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	08017520 	.word	0x08017520

080056d8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff ff9d 	bl	8005628 <_ZN3ros11Subscriber_C1Ev>
 80056ee:	4a0b      	ldr	r2, [pc, #44]	; (800571c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	330c      	adds	r3, #12
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe f905 	bl	8003908 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  };
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	08017508 	.word	0x08017508

08005720 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	3304      	adds	r3, #4
 800572c:	4618      	mov	r0, r3
 800572e:	f7fd fb99 	bl	8002e64 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005738:	461a      	mov	r2, r3
 800573a:	2300      	movs	r3, #0
 800573c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
    bytes_ = 0;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005746:	461a      	mov	r2, r3
 8005748:	2300      	movs	r3, #0
 800574a:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
    index_ = 0;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005754:	461a      	mov	r2, r3
 8005756:	2300      	movs	r3, #0
 8005758:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
    topic_ = 0;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005762:	461a      	mov	r2, r3
 8005764:	2300      	movs	r3, #0
 8005766:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
  };
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	e01a      	b.n	80057b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10e      	bne.n	80057b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	605a      	str	r2, [r3, #4]
        return true;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e006      	b.n	80057c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2b63      	cmp	r3, #99	; 0x63
 80057bc:	dde1      	ble.n	8005782 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80057be:	2300      	movs	r3, #0
  }
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	e01d      	b.n	8005818 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	4413      	add	r3, r2
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d111      	bne.n	8005812 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4413      	add	r3, r2
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	60da      	str	r2, [r3, #12]
        return true;
 800580e:	2301      	movs	r3, #1
 8005810:	e006      	b.n	8005820 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2b63      	cmp	r3, #99	; 0x63
 800581c:	ddde      	ble.n	80057dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 800581e:	2300      	movs	r3, #0
  }
 8005820:	4618      	mov	r0, r3
 8005822:	3714      	adds	r7, #20
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005834:	f107 030c 	add.w	r3, r7, #12
 8005838:	4618      	mov	r0, r3
 800583a:	f7fc fbcf 	bl	8001fdc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f107 020c 	add.w	r2, r7, #12
 8005848:	210a      	movs	r1, #10
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	4798      	blx	r3
    rt_time = hardware_.time();
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	4618      	mov	r0, r3
 8005854:	f7fd fbf2 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005858:	4602      	mov	r2, r0
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8005860:	bf00      	nop
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b08b      	sub	sp, #44	; 0x2c
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005870:	f107 030c 	add.w	r3, r7, #12
 8005874:	4618      	mov	r0, r3
 8005876:	f7fc fca1 	bl	80021bc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	627b      	str	r3, [r7, #36]	; 0x24
 800587e:	e062      	b.n	8005946 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	4413      	add	r3, r2
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d056      	beq.n	8005940 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005896:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058bc:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3308      	adds	r3, #8
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4608      	mov	r0, r1
 80058e0:	4798      	blx	r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	6859      	ldr	r1, [r3, #4]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4608      	mov	r0, r1
 800590e:	4798      	blx	r3
 8005910:	4603      	mov	r3, r0
 8005912:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005918:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681c      	ldr	r4, [r3, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005924:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fd f9af 	bl	8002c92 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005934:	4601      	mov	r1, r0
 8005936:	f107 030c 	add.w	r3, r7, #12
 800593a:	461a      	mov	r2, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	3301      	adds	r3, #1
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	2b63      	cmp	r3, #99	; 0x63
 800594a:	dd99      	ble.n	8005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800594c:	2300      	movs	r3, #0
 800594e:	627b      	str	r3, [r7, #36]	; 0x24
 8005950:	e067      	b.n	8005a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d05b      	beq.n	8005a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4413      	add	r3, r2
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	b29b      	uxth	r3, r3
 8005976:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	6859      	ldr	r1, [r3, #4]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4608      	mov	r0, r1
 80059ae:	4798      	blx	r3
 80059b0:	4603      	mov	r3, r0
 80059b2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c6:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4608      	mov	r0, r1
 80059d8:	4798      	blx	r3
 80059da:	4603      	mov	r3, r0
 80059dc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80059de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059e2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681c      	ldr	r4, [r3, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4608      	mov	r0, r1
 8005a0e:	4798      	blx	r3
 8005a10:	4601      	mov	r1, r0
 8005a12:	f107 030c 	add.w	r3, r7, #12
 8005a16:	461a      	mov	r2, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1e:	3301      	adds	r3, #1
 8005a20:	627b      	str	r3, [r7, #36]	; 0x24
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	2b63      	cmp	r3, #99	; 0x63
 8005a26:	dd94      	ble.n	8005952 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
  }
 8005a34:	bf00      	nop
 8005a36:	372c      	adds	r7, #44	; 0x2c
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd90      	pop	{r4, r7, pc}

08005a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b086      	sub	sp, #24
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005a46:	f107 0308 	add.w	r3, r7, #8
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fc fac6 	bl	8001fdc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fd faf1 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005a66:	f107 0308 	add.w	r3, r7, #8
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fc fb25 	bl	80020bc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4916      	ldr	r1, [pc, #88]	; (8005ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005a78:	fba1 1303 	umull	r1, r3, r1, r3
 8005a7c:	099b      	lsrs	r3, r3, #6
 8005a7e:	4413      	add	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005a82:	6939      	ldr	r1, [r7, #16]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005a88:	fba3 0302 	umull	r0, r3, r3, r2
 8005a8c:	099b      	lsrs	r3, r3, #6
 8005a8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a92:	fb00 f303 	mul.w	r3, r0, r3
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	4a0e      	ldr	r2, [pc, #56]	; (8005ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x98>)
 8005a9a:	fb02 f303 	mul.w	r3, r2, r3
 8005a9e:	440b      	add	r3, r1
 8005aa0:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f8c0 	bl	8005c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fd fac1 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005aba:	4602      	mov	r2, r0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ac2:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  }
 8005ac6:	bf00      	nop
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	10624dd3 	.word	0x10624dd3
 8005ad4:	000f4240 	.word	0x000f4240

08005ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b63      	cmp	r3, #99	; 0x63
 8005ae8:	dd0b      	ble.n	8005b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005af0:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005af4:	f083 0301 	eor.w	r3, r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e090      	b.n	8005c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	f241 4324 	movw	r3, #5156	; 0x1424
 8005b0e:	440b      	add	r3, r1
 8005b10:	3307      	adds	r3, #7
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4790      	blx	r2
 8005b18:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b20:	22ff      	movs	r2, #255	; 0xff
 8005b22:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2c:	22fe      	movs	r2, #254	; 0xfe
 8005b2e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	b2da      	uxtb	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b3c:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	0a1b      	lsrs	r3, r3, #8
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b50:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b5a:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b64:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8005b68:	4413      	add	r3, r2
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	43db      	mvns	r3, r3
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b76:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	b2da      	uxtb	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	b21b      	sxth	r3, r3
 8005b8c:	121b      	asrs	r3, r3, #8
 8005b8e:	b21b      	sxth	r3, r3
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b98:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005ba0:	2305      	movs	r3, #5
 8005ba2:	61bb      	str	r3, [r7, #24]
 8005ba4:	e00d      	b.n	8005bc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	441a      	add	r2, r3
 8005bac:	f241 4324 	movw	r3, #5156	; 0x1424
 8005bb0:	4413      	add	r3, r2
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61bb      	str	r3, [r7, #24]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	3306      	adds	r3, #6
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	ddec      	ble.n	8005ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	3307      	adds	r3, #7
 8005bd0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	425a      	negs	r2, r3
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	b2d2      	uxtb	r2, r2
 8005bda:	bf58      	it	pl
 8005bdc:	4253      	negpl	r3, r2
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	1c59      	adds	r1, r3, #1
 8005be4:	6179      	str	r1, [r7, #20]
 8005be6:	43d2      	mvns	r2, r2
 8005be8:	b2d1      	uxtb	r1, r2
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	441a      	add	r2, r3
 8005bee:	f241 4324 	movw	r3, #5156	; 0x1424
 8005bf2:	4413      	add	r3, r2
 8005bf4:	460a      	mov	r2, r1
 8005bf6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfe:	dc0b      	bgt.n	8005c18 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1d18      	adds	r0, r3, #4
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f241 4324 	movw	r3, #5156	; 0x1424
 8005c0a:	4413      	add	r3, r2
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f7fd f9ce 	bl	8002fb0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	e005      	b.n	8005c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005c18:	4904      	ldr	r1, [pc, #16]	; (8005c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f848 	bl	8005cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8005c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	08017428 	.word	0x08017428

08005c30 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fd f9fc 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005c44:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4915      	ldr	r1, [pc, #84]	; (8005ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005c4e:	fba1 1303 	umull	r1, r3, r1, r3
 8005c52:	099b      	lsrs	r3, r3, #6
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	1e5a      	subs	r2, r3, #1
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6859      	ldr	r1, [r3, #4]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005c66:	fba3 0302 	umull	r0, r3, r3, r2
 8005c6a:	099b      	lsrs	r3, r3, #6
 8005c6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c70:	fb00 f303 	mul.w	r3, r0, r3
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	4a0c      	ldr	r2, [pc, #48]	; (8005ca8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8005c78:	fb02 f303 	mul.w	r3, r2, r3
 8005c7c:	1aca      	subs	r2, r1, r3
 8005c7e:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8005c80:	4413      	add	r3, r2
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005c94:	4619      	mov	r1, r3
 8005c96:	4610      	mov	r0, r2
 8005c98:	f001 fa80 	bl	800719c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005c9c:	bf00      	nop
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	10624dd3 	.word	0x10624dd3
 8005ca8:	000f4240 	.word	0x000f4240
 8005cac:	3b9aca00 	.word	0x3b9aca00

08005cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	2103      	movs	r1, #3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f804 	bl	8005ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>
  }
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005cda:	f107 0314 	add.w	r3, r7, #20
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fc fc30 	bl	8002544 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005ce4:	7afb      	ldrb	r3, [r7, #11]
 8005ce6:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f107 0214 	add.w	r2, r7, #20
 8005cf6:	2107      	movs	r1, #7
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	4798      	blx	r3
  }
 8005cfc:	bf00      	nop
 8005cfe:	3720      	adds	r7, #32
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <_Z41__static_initialization_and_destruction_0ii>:
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d14f      	bne.n	8005db4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d14a      	bne.n	8005db4 <_Z41__static_initialization_and_destruction_0ii+0xb0>
ros::NodeHandle nh;
 8005d1e:	4827      	ldr	r0, [pc, #156]	; (8005dbc <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005d20:	f7fd fe84 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>
std_msgs::Float32MultiArray sensor_msg;
 8005d24:	4826      	ldr	r0, [pc, #152]	; (8005dc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005d26:	f7fd fc19 	bl	800355c <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher ros_pub("stm32_sensor", &sensor_msg);
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	4a24      	ldr	r2, [pc, #144]	; (8005dc0 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005d2e:	4925      	ldr	r1, [pc, #148]	; (8005dc4 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005d30:	4825      	ldr	r0, [pc, #148]	; (8005dc8 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005d32:	f7fc ff83 	bl	8002c3c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
CJY901 jy901(&huart8);
 8005d36:	4925      	ldr	r1, [pc, #148]	; (8005dcc <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005d38:	4825      	ldr	r0, [pc, #148]	; (8005dd0 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005d3a:	f7fa fcbf 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
PID<float> pid(&current_esc_speed,&duty_cycle_output,&speed_set,parameters.kp,parameters.ki,parameters.kd);
 8005d3e:	4b25      	ldr	r3, [pc, #148]	; (8005dd4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005d40:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005d46:	ed93 7a03 	vldr	s14, [r3, #12]
 8005d4a:	4b22      	ldr	r3, [pc, #136]	; (8005dd4 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005d4c:	edd3 6a04 	vldr	s13, [r3, #16]
 8005d50:	2300      	movs	r3, #0
 8005d52:	9300      	str	r3, [sp, #0]
 8005d54:	eeb0 1a66 	vmov.f32	s2, s13
 8005d58:	eef0 0a47 	vmov.f32	s1, s14
 8005d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005d60:	4b1d      	ldr	r3, [pc, #116]	; (8005dd8 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8005d64:	491e      	ldr	r1, [pc, #120]	; (8005de0 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8005d66:	481f      	ldr	r0, [pc, #124]	; (8005de4 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8005d68:	f7fa fea2 	bl	8000ab0 <_ZN3PIDIfEC1EPfS1_S1_fffh>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4a1e      	ldr	r2, [pc, #120]	; (8005de8 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8005d70:	491e      	ldr	r1, [pc, #120]	; (8005dec <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8005d72:	481f      	ldr	r0, [pc, #124]	; (8005df0 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8005d74:	f7ff fc68 	bl	8005648 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8005d7c:	491e      	ldr	r1, [pc, #120]	; (8005df8 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8005d7e:	481f      	ldr	r0, [pc, #124]	; (8005dfc <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8005d80:	f7ff fc62 	bl	8005648 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 8005d84:	2301      	movs	r3, #1
 8005d86:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8005d88:	491e      	ldr	r1, [pc, #120]	; (8005e04 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8005d8a:	481f      	ldr	r0, [pc, #124]	; (8005e08 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8005d8c:	f7ff fc5c 	bl	8005648 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 8005d90:	2301      	movs	r3, #1
 8005d92:	4a1e      	ldr	r2, [pc, #120]	; (8005e0c <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8005d94:	491e      	ldr	r1, [pc, #120]	; (8005e10 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8005d96:	481f      	ldr	r0, [pc, #124]	; (8005e14 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8005d98:	f7ff fc7a 	bl	8005690 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4a1e      	ldr	r2, [pc, #120]	; (8005e18 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8005da0:	491e      	ldr	r1, [pc, #120]	; (8005e1c <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8005da2:	481f      	ldr	r0, [pc, #124]	; (8005e20 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8005da4:	f7ff fc98 	bl	80056d8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );
 8005da8:	2301      	movs	r3, #1
 8005daa:	4a1e      	ldr	r2, [pc, #120]	; (8005e24 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8005dac:	491e      	ldr	r1, [pc, #120]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8005dae:	481f      	ldr	r0, [pc, #124]	; (8005e2c <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8005db0:	f7ff fc92 	bl	80056d8 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8005db4:	bf00      	nop
 8005db6:	3708      	adds	r7, #8
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	24001b74 	.word	0x24001b74
 8005dc0:	24004308 	.word	0x24004308
 8005dc4:	08017464 	.word	0x08017464
 8005dc8:	24004338 	.word	0x24004338
 8005dcc:	240015f8 	.word	0x240015f8
 8005dd0:	240044b8 	.word	0x240044b8
 8005dd4:	24000004 	.word	0x24000004
 8005dd8:	2400440c 	.word	0x2400440c
 8005ddc:	24004410 	.word	0x24004410
 8005de0:	24004414 	.word	0x24004414
 8005de4:	2400453c 	.word	0x2400453c
 8005de8:	080047dd 	.word	0x080047dd
 8005dec:	08017474 	.word	0x08017474
 8005df0:	24004570 	.word	0x24004570
 8005df4:	08004821 	.word	0x08004821
 8005df8:	08017484 	.word	0x08017484
 8005dfc:	2400458c 	.word	0x2400458c
 8005e00:	080048b1 	.word	0x080048b1
 8005e04:	08017498 	.word	0x08017498
 8005e08:	240045a8 	.word	0x240045a8
 8005e0c:	08004931 	.word	0x08004931
 8005e10:	080174ac 	.word	0x080174ac
 8005e14:	240045c4 	.word	0x240045c4
 8005e18:	08004a41 	.word	0x08004a41
 8005e1c:	080174bc 	.word	0x080174bc
 8005e20:	24004608 	.word	0x24004608
 8005e24:	08004a65 	.word	0x08004a65
 8005e28:	080174d0 	.word	0x080174d0
 8005e2c:	24004624 	.word	0x24004624

08005e30 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	330c      	adds	r3, #12
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fd fd90 	bl	8003966 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	320c      	adds	r2, #12
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4798      	blx	r3
  }
 8005e52:	bf00      	nop
 8005e54:	3708      	adds	r7, #8
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8005e5a:	b480      	push	{r7}
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
  }
 8005e66:	4618      	mov	r0, r3
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	330c      	adds	r3, #12
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fd fd90 	bl	80039a4 <_ZN8std_msgs4Bool7getTypeEv>
 8005e84:	4603      	mov	r3, r0
  }
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b082      	sub	sp, #8
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f7fd fd90 	bl	80039c0 <_ZN8std_msgs4Bool6getMD5Ev>
 8005ea0:	4603      	mov	r3, r0
  }
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd fbe0 	bl	8003680 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	320c      	adds	r2, #12
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
  }
 8005ecc:	bf00      	nop
 8005ece:	3708      	adds	r7, #8
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	330c      	adds	r3, #12
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fd fc4d 	bl	8003798 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8005efe:	4603      	mov	r3, r0
  }
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	330c      	adds	r3, #12
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fd fc4d 	bl	80037b4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8005f1a:	4603      	mov	r3, r0
  }
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3708      	adds	r7, #8
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	330c      	adds	r3, #12
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fd fc93 	bl	8003860 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	320c      	adds	r2, #12
 8005f42:	4610      	mov	r0, r2
 8005f44:	4798      	blx	r3
  }
 8005f46:	bf00      	nop
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	699b      	ldr	r3, [r3, #24]
  }
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	330c      	adds	r3, #12
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fd fcac 	bl	80038d0 <_ZN8std_msgs7Float327getTypeEv>
 8005f78:	4603      	mov	r3, r0
  }
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b082      	sub	sp, #8
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fd fcac 	bl	80038ec <_ZN8std_msgs7Float326getMD5Ev>
 8005f94:	4603      	mov	r3, r0
  }
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
    return configured_;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005fac:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
  };
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <_GLOBAL__sub_I_nh>:
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005fc4:	2001      	movs	r0, #1
 8005fc6:	f7ff fe9d 	bl	8005d04 <_Z41__static_initialization_and_destruction_0ii>
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd2:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <HAL_MspInit+0x30>)
 8005fd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fd8:	4a08      	ldr	r2, [pc, #32]	; (8005ffc <HAL_MspInit+0x30>)
 8005fda:	f043 0302 	orr.w	r3, r3, #2
 8005fde:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005fe2:	4b06      	ldr	r3, [pc, #24]	; (8005ffc <HAL_MspInit+0x30>)
 8005fe4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr
 8005ffc:	58024400 	.word	0x58024400

08006000 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b0bc      	sub	sp, #240	; 0xf0
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006018:	f107 0318 	add.w	r3, r7, #24
 800601c:	22c0      	movs	r2, #192	; 0xc0
 800601e:	2100      	movs	r1, #0
 8006020:	4618      	mov	r0, r3
 8006022:	f00f fb03 	bl	801562c <memset>
  if(hadc->Instance==ADC1)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a67      	ldr	r2, [pc, #412]	; (80061c8 <HAL_ADC_MspInit+0x1c8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	f040 80c6 	bne.w	80061be <HAL_ADC_MspInit+0x1be>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006032:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 800603e:	230a      	movs	r3, #10
 8006040:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 128;
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006046:	2302      	movs	r3, #2
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800604a:	2302      	movs	r3, #2
 800604c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 8;
 800604e:	2308      	movs	r3, #8
 8006050:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8006052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006056:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8006058:	2300      	movs	r3, #0
 800605a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8006060:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006064:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006068:	f107 0318 	add.w	r3, r7, #24
 800606c:	4618      	mov	r0, r3
 800606e:	f007 fd51 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8006078:	f7fb ff7c 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800607c:	4b53      	ldr	r3, [pc, #332]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 800607e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006082:	4a52      	ldr	r2, [pc, #328]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 8006084:	f043 0320 	orr.w	r3, r3, #32
 8006088:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800608c:	4b4f      	ldr	r3, [pc, #316]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 800608e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800609a:	4b4c      	ldr	r3, [pc, #304]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 800609c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060a0:	4a4a      	ldr	r2, [pc, #296]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060a2:	f043 0304 	orr.w	r3, r3, #4
 80060a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060aa:	4b48      	ldr	r3, [pc, #288]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060b0:	f003 0304 	and.w	r3, r3, #4
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b8:	4b44      	ldr	r3, [pc, #272]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060be:	4a43      	ldr	r2, [pc, #268]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060c8:	4b40      	ldr	r3, [pc, #256]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d6:	4b3d      	ldr	r3, [pc, #244]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060dc:	4a3b      	ldr	r2, [pc, #236]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <HAL_ADC_MspInit+0x1cc>)
 80060e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 80060f4:	2333      	movs	r3, #51	; 0x33
 80060f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060fa:	2303      	movs	r3, #3
 80060fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006100:	2300      	movs	r3, #0
 8006102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006106:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800610a:	4619      	mov	r1, r3
 800610c:	4830      	ldr	r0, [pc, #192]	; (80061d0 <HAL_ADC_MspInit+0x1d0>)
 800610e:	f005 fe29 	bl	800bd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8006112:	2350      	movs	r3, #80	; 0x50
 8006114:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006118:	2303      	movs	r3, #3
 800611a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611e:	2300      	movs	r3, #0
 8006120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006124:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006128:	4619      	mov	r1, r3
 800612a:	482a      	ldr	r0, [pc, #168]	; (80061d4 <HAL_ADC_MspInit+0x1d4>)
 800612c:	f005 fe1a 	bl	800bd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8006130:	2303      	movs	r3, #3
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006136:	2303      	movs	r3, #3
 8006138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613c:	2300      	movs	r3, #0
 800613e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006142:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006146:	4619      	mov	r1, r3
 8006148:	4823      	ldr	r0, [pc, #140]	; (80061d8 <HAL_ADC_MspInit+0x1d8>)
 800614a:	f005 fe0b 	bl	800bd64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 800614e:	4b23      	ldr	r3, [pc, #140]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006150:	4a23      	ldr	r2, [pc, #140]	; (80061e0 <HAL_ADC_MspInit+0x1e0>)
 8006152:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006154:	4b21      	ldr	r3, [pc, #132]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006156:	2209      	movs	r2, #9
 8006158:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800615a:	4b20      	ldr	r3, [pc, #128]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 800615c:	2200      	movs	r2, #0
 800615e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006162:	2200      	movs	r2, #0
 8006164:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006166:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006168:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800616c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800616e:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006174:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006176:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006178:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800617c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800617e:	4b17      	ldr	r3, [pc, #92]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006184:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006188:	2200      	movs	r2, #0
 800618a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800618c:	4b13      	ldr	r3, [pc, #76]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 800618e:	2200      	movs	r2, #0
 8006190:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006192:	4812      	ldr	r0, [pc, #72]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 8006194:	f002 ffaa 	bl	80090ec <HAL_DMA_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 800619e:	f7fb fee9 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a0d      	ldr	r2, [pc, #52]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 80061a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80061a8:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <HAL_ADC_MspInit+0x1dc>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80061ae:	2200      	movs	r2, #0
 80061b0:	2100      	movs	r1, #0
 80061b2:	2012      	movs	r0, #18
 80061b4:	f002 ff65 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80061b8:	2012      	movs	r0, #18
 80061ba:	f002 ff7c 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80061be:	bf00      	nop
 80061c0:	37f0      	adds	r7, #240	; 0xf0
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	40022000 	.word	0x40022000
 80061cc:	58024400 	.word	0x58024400
 80061d0:	58020800 	.word	0x58020800
 80061d4:	58020000 	.word	0x58020000
 80061d8:	58020400 	.word	0x58020400
 80061dc:	24001320 	.word	0x24001320
 80061e0:	40020028 	.word	0x40020028

080061e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b0c4      	sub	sp, #272	; 0x110
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061f2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006208:	22c0      	movs	r2, #192	; 0xc0
 800620a:	2100      	movs	r1, #0
 800620c:	4618      	mov	r0, r3
 800620e:	f00f fa0d 	bl	801562c <memset>
  if(huart->Instance==LPUART1)
 8006212:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006216:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4aa7      	ldr	r2, [pc, #668]	; (80064bc <HAL_UART_MspInit+0x2d8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	f040 8084 	bne.w	800632e <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006226:	f04f 0204 	mov.w	r2, #4
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8006232:	2300      	movs	r3, #0
 8006234:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006238:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800623c:	4618      	mov	r0, r3
 800623e:	f007 fc69 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8006248:	f7fb fe94 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800624c:	4b9c      	ldr	r3, [pc, #624]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800624e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006252:	4a9b      	ldr	r2, [pc, #620]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 8006254:	f043 0308 	orr.w	r3, r3, #8
 8006258:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800625c:	4b98      	ldr	r3, [pc, #608]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800625e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006262:	f003 0308 	and.w	r3, r3, #8
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
 8006268:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800626a:	4b95      	ldr	r3, [pc, #596]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800626c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006270:	4a93      	ldr	r2, [pc, #588]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 8006272:	f043 0301 	orr.w	r3, r3, #1
 8006276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800627a:	4b91      	ldr	r3, [pc, #580]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800627c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	633b      	str	r3, [r7, #48]	; 0x30
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006288:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800628c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006290:	2302      	movs	r3, #2
 8006292:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006296:	2300      	movs	r3, #0
 8006298:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 80062a2:	2303      	movs	r3, #3
 80062a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80062ac:	4619      	mov	r1, r3
 80062ae:	4885      	ldr	r0, [pc, #532]	; (80064c4 <HAL_UART_MspInit+0x2e0>)
 80062b0:	f005 fd58 	bl	800bd64 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 80062b4:	4b84      	ldr	r3, [pc, #528]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062b6:	4a85      	ldr	r2, [pc, #532]	; (80064cc <HAL_UART_MspInit+0x2e8>)
 80062b8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 80062ba:	4b83      	ldr	r3, [pc, #524]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062bc:	2209      	movs	r2, #9
 80062be:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062c0:	4b81      	ldr	r3, [pc, #516]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062c6:	4b80      	ldr	r3, [pc, #512]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062cc:	4b7e      	ldr	r3, [pc, #504]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062d2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062d4:	4b7c      	ldr	r3, [pc, #496]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062da:	4b7b      	ldr	r3, [pc, #492]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062dc:	2200      	movs	r2, #0
 80062de:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80062e0:	4b79      	ldr	r3, [pc, #484]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80062e6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062e8:	4b77      	ldr	r3, [pc, #476]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80062ee:	4876      	ldr	r0, [pc, #472]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 80062f0:	f002 fefc 	bl	80090ec <HAL_DMA_Init>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 80062fa:	f7fb fe3b 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80062fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006302:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6f      	ldr	r2, [pc, #444]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 800630a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800630e:	4a6e      	ldr	r2, [pc, #440]	; (80064c8 <HAL_UART_MspInit+0x2e4>)
 8006310:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006314:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	208e      	movs	r0, #142	; 0x8e
 8006322:	f002 feae 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006326:	208e      	movs	r0, #142	; 0x8e
 8006328:	f002 fec5 	bl	80090b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 800632c:	e2d4      	b.n	80068d8 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART4)
 800632e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006332:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a65      	ldr	r2, [pc, #404]	; (80064d0 <HAL_UART_MspInit+0x2ec>)
 800633c:	4293      	cmp	r3, r2
 800633e:	f040 80d3 	bne.w	80064e8 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006342:	f04f 0202 	mov.w	r2, #2
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800634e:	2300      	movs	r3, #0
 8006350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006354:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006358:	4618      	mov	r0, r3
 800635a:	f007 fbdb 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8006364:	f7fb fe06 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8006368:	4b55      	ldr	r3, [pc, #340]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800636a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800636e:	4a54      	ldr	r2, [pc, #336]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 8006370:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006374:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006378:	4b51      	ldr	r3, [pc, #324]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800637a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800637e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006386:	4b4e      	ldr	r3, [pc, #312]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 8006388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800638c:	4a4c      	ldr	r2, [pc, #304]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 800638e:	f043 0308 	orr.w	r3, r3, #8
 8006392:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006396:	4b4a      	ldr	r3, [pc, #296]	; (80064c0 <HAL_UART_MspInit+0x2dc>)
 8006398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063a4:	2303      	movs	r3, #3
 80063a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063aa:	2302      	movs	r3, #2
 80063ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063b6:	2300      	movs	r3, #0
 80063b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80063bc:	2308      	movs	r3, #8
 80063be:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063c2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80063c6:	4619      	mov	r1, r3
 80063c8:	4842      	ldr	r0, [pc, #264]	; (80064d4 <HAL_UART_MspInit+0x2f0>)
 80063ca:	f005 fccb 	bl	800bd64 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80063ce:	4b42      	ldr	r3, [pc, #264]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063d0:	4a42      	ldr	r2, [pc, #264]	; (80064dc <HAL_UART_MspInit+0x2f8>)
 80063d2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80063d4:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063d6:	223f      	movs	r2, #63	; 0x3f
 80063d8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063da:	4b3f      	ldr	r3, [pc, #252]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063dc:	2200      	movs	r2, #0
 80063de:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063e0:	4b3d      	ldr	r3, [pc, #244]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063e6:	4b3c      	ldr	r3, [pc, #240]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ec:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063ee:	4b3a      	ldr	r3, [pc, #232]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063f4:	4b38      	ldr	r3, [pc, #224]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80063fa:	4b37      	ldr	r3, [pc, #220]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006400:	4b35      	ldr	r3, [pc, #212]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 8006402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006406:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006408:	4b33      	ldr	r3, [pc, #204]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 800640a:	2200      	movs	r2, #0
 800640c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800640e:	4832      	ldr	r0, [pc, #200]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 8006410:	f002 fe6c 	bl	80090ec <HAL_DMA_Init>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d001      	beq.n	800641e <HAL_UART_MspInit+0x23a>
      Error_Handler();
 800641a:	f7fb fdab 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800641e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006422:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2b      	ldr	r2, [pc, #172]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 800642a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <HAL_UART_MspInit+0x2f4>)
 8006430:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006434:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800643c:	4b28      	ldr	r3, [pc, #160]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 800643e:	4a29      	ldr	r2, [pc, #164]	; (80064e4 <HAL_UART_MspInit+0x300>)
 8006440:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006442:	4b27      	ldr	r3, [pc, #156]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006444:	2240      	movs	r2, #64	; 0x40
 8006446:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006448:	4b25      	ldr	r3, [pc, #148]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 800644a:	2240      	movs	r2, #64	; 0x40
 800644c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800644e:	4b24      	ldr	r3, [pc, #144]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006450:	2200      	movs	r2, #0
 8006452:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006454:	4b22      	ldr	r3, [pc, #136]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800645a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800645c:	4b20      	ldr	r3, [pc, #128]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 800645e:	2200      	movs	r2, #0
 8006460:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006462:	4b1f      	ldr	r3, [pc, #124]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006464:	2200      	movs	r2, #0
 8006466:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006468:	4b1d      	ldr	r3, [pc, #116]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 800646a:	2200      	movs	r2, #0
 800646c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800646e:	4b1c      	ldr	r3, [pc, #112]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006470:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006474:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006476:	4b1a      	ldr	r3, [pc, #104]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006478:	2200      	movs	r2, #0
 800647a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800647c:	4818      	ldr	r0, [pc, #96]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 800647e:	f002 fe35 	bl	80090ec <HAL_DMA_Init>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <HAL_UART_MspInit+0x2a8>
      Error_Handler();
 8006488:	f7fb fd74 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800648c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006490:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a12      	ldr	r2, [pc, #72]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 8006498:	67da      	str	r2, [r3, #124]	; 0x7c
 800649a:	4a11      	ldr	r2, [pc, #68]	; (80064e0 <HAL_UART_MspInit+0x2fc>)
 800649c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80064a8:	2200      	movs	r2, #0
 80064aa:	2100      	movs	r1, #0
 80064ac:	2034      	movs	r0, #52	; 0x34
 80064ae:	f002 fde8 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80064b2:	2034      	movs	r0, #52	; 0x34
 80064b4:	f002 fdff 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 80064b8:	e20e      	b.n	80068d8 <HAL_UART_MspInit+0x6f4>
 80064ba:	bf00      	nop
 80064bc:	58000c00 	.word	0x58000c00
 80064c0:	58024400 	.word	0x58024400
 80064c4:	58020000 	.word	0x58020000
 80064c8:	2400168c 	.word	0x2400168c
 80064cc:	58025408 	.word	0x58025408
 80064d0:	40004c00 	.word	0x40004c00
 80064d4:	58020c00 	.word	0x58020c00
 80064d8:	24001704 	.word	0x24001704
 80064dc:	40020058 	.word	0x40020058
 80064e0:	2400177c 	.word	0x2400177c
 80064e4:	40020070 	.word	0x40020070
  else if(huart->Instance==UART5)
 80064e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a9f      	ldr	r2, [pc, #636]	; (8006774 <HAL_UART_MspInit+0x590>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	f040 8087 	bne.w	800660a <HAL_UART_MspInit+0x426>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80064fc:	f04f 0202 	mov.w	r2, #2
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006508:	2300      	movs	r3, #0
 800650a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800650e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006512:	4618      	mov	r0, r3
 8006514:	f007 fafe 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 800651e:	f7fb fd29 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006522:	4b95      	ldr	r3, [pc, #596]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006524:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006528:	4a93      	ldr	r2, [pc, #588]	; (8006778 <HAL_UART_MspInit+0x594>)
 800652a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800652e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006532:	4b91      	ldr	r3, [pc, #580]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006534:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800653c:	627b      	str	r3, [r7, #36]	; 0x24
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006540:	4b8d      	ldr	r3, [pc, #564]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006546:	4a8c      	ldr	r2, [pc, #560]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006548:	f043 0302 	orr.w	r3, r3, #2
 800654c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006550:	4b89      	ldr	r3, [pc, #548]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006556:	f003 0302 	and.w	r3, r3, #2
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800655e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006562:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006566:	2302      	movs	r3, #2
 8006568:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656c:	2300      	movs	r3, #0
 800656e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006572:	2300      	movs	r3, #0
 8006574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8006578:	230e      	movs	r3, #14
 800657a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800657e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006582:	4619      	mov	r1, r3
 8006584:	487d      	ldr	r0, [pc, #500]	; (800677c <HAL_UART_MspInit+0x598>)
 8006586:	f005 fbed 	bl	800bd64 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream5;
 800658a:	4b7d      	ldr	r3, [pc, #500]	; (8006780 <HAL_UART_MspInit+0x59c>)
 800658c:	4a7d      	ldr	r2, [pc, #500]	; (8006784 <HAL_UART_MspInit+0x5a0>)
 800658e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8006590:	4b7b      	ldr	r3, [pc, #492]	; (8006780 <HAL_UART_MspInit+0x59c>)
 8006592:	2241      	movs	r2, #65	; 0x41
 8006594:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006596:	4b7a      	ldr	r3, [pc, #488]	; (8006780 <HAL_UART_MspInit+0x59c>)
 8006598:	2200      	movs	r2, #0
 800659a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800659c:	4b78      	ldr	r3, [pc, #480]	; (8006780 <HAL_UART_MspInit+0x59c>)
 800659e:	2200      	movs	r2, #0
 80065a0:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065a2:	4b77      	ldr	r3, [pc, #476]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a8:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065aa:	4b75      	ldr	r3, [pc, #468]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065b0:	4b73      	ldr	r3, [pc, #460]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80065b6:	4b72      	ldr	r3, [pc, #456]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065bc:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80065be:	4b70      	ldr	r3, [pc, #448]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065c0:	2200      	movs	r2, #0
 80065c2:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065c4:	4b6e      	ldr	r3, [pc, #440]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80065ca:	486d      	ldr	r0, [pc, #436]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065cc:	f002 fd8e 	bl	80090ec <HAL_DMA_Init>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_UART_MspInit+0x3f6>
      Error_Handler();
 80065d6:	f7fb fccd 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80065da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a66      	ldr	r2, [pc, #408]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80065ea:	4a65      	ldr	r2, [pc, #404]	; (8006780 <HAL_UART_MspInit+0x59c>)
 80065ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065f0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80065f8:	2200      	movs	r2, #0
 80065fa:	2100      	movs	r1, #0
 80065fc:	2035      	movs	r0, #53	; 0x35
 80065fe:	f002 fd40 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006602:	2035      	movs	r0, #53	; 0x35
 8006604:	f002 fd57 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 8006608:	e166      	b.n	80068d8 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART7)
 800660a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800660e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a5c      	ldr	r2, [pc, #368]	; (8006788 <HAL_UART_MspInit+0x5a4>)
 8006618:	4293      	cmp	r3, r2
 800661a:	f040 80bf 	bne.w	800679c <HAL_UART_MspInit+0x5b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800661e:	f04f 0202 	mov.w	r2, #2
 8006622:	f04f 0300 	mov.w	r3, #0
 8006626:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800662a:	2300      	movs	r3, #0
 800662c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006630:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006634:	4618      	mov	r0, r3
 8006636:	f007 fa6d 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 800663a:	4603      	mov	r3, r0
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <HAL_UART_MspInit+0x460>
      Error_Handler();
 8006640:	f7fb fc98 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006644:	4b4c      	ldr	r3, [pc, #304]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800664a:	4a4b      	ldr	r2, [pc, #300]	; (8006778 <HAL_UART_MspInit+0x594>)
 800664c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006650:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006654:	4b48      	ldr	r3, [pc, #288]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800665a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006662:	4b45      	ldr	r3, [pc, #276]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006668:	4a43      	ldr	r2, [pc, #268]	; (8006778 <HAL_UART_MspInit+0x594>)
 800666a:	f043 0310 	orr.w	r3, r3, #16
 800666e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006672:	4b41      	ldr	r3, [pc, #260]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006678:	f003 0310 	and.w	r3, r3, #16
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006680:	4b3d      	ldr	r3, [pc, #244]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006686:	4a3c      	ldr	r2, [pc, #240]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006688:	f043 0301 	orr.w	r3, r3, #1
 800668c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006690:	4b39      	ldr	r3, [pc, #228]	; (8006778 <HAL_UART_MspInit+0x594>)
 8006692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800669e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066a6:	2302      	movs	r3, #2
 80066a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066b2:	2300      	movs	r3, #0
 80066b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80066b8:	2307      	movs	r3, #7
 80066ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80066be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80066c2:	4619      	mov	r1, r3
 80066c4:	4831      	ldr	r0, [pc, #196]	; (800678c <HAL_UART_MspInit+0x5a8>)
 80066c6:	f005 fb4d 	bl	800bd64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d2:	2302      	movs	r3, #2
 80066d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d8:	2300      	movs	r3, #0
 80066da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066de:	2300      	movs	r3, #0
 80066e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80066e4:	230b      	movs	r3, #11
 80066e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ea:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80066ee:	4619      	mov	r1, r3
 80066f0:	4827      	ldr	r0, [pc, #156]	; (8006790 <HAL_UART_MspInit+0x5ac>)
 80066f2:	f005 fb37 	bl	800bd64 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 80066f6:	4b27      	ldr	r3, [pc, #156]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 80066f8:	4a27      	ldr	r2, [pc, #156]	; (8006798 <HAL_UART_MspInit+0x5b4>)
 80066fa:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 80066fe:	224f      	movs	r2, #79	; 0x4f
 8006700:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006702:	4b24      	ldr	r3, [pc, #144]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006704:	2200      	movs	r2, #0
 8006706:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006708:	4b22      	ldr	r3, [pc, #136]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 800670a:	2200      	movs	r2, #0
 800670c:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800670e:	4b21      	ldr	r3, [pc, #132]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006710:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006714:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006716:	4b1f      	ldr	r3, [pc, #124]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006718:	2200      	movs	r2, #0
 800671a:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800671c:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 800671e:	2200      	movs	r2, #0
 8006720:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8006722:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006724:	2200      	movs	r2, #0
 8006726:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 800672a:	2200      	movs	r2, #0
 800672c:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006730:	2200      	movs	r2, #0
 8006732:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8006734:	4817      	ldr	r0, [pc, #92]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006736:	f002 fcd9 	bl	80090ec <HAL_DMA_Init>
 800673a:	4603      	mov	r3, r0
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <HAL_UART_MspInit+0x560>
      Error_Handler();
 8006740:	f7fb fc18 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8006744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006748:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a11      	ldr	r2, [pc, #68]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006750:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006754:	4a0f      	ldr	r2, [pc, #60]	; (8006794 <HAL_UART_MspInit+0x5b0>)
 8006756:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800675a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8006762:	2200      	movs	r2, #0
 8006764:	2100      	movs	r1, #0
 8006766:	2052      	movs	r0, #82	; 0x52
 8006768:	f002 fc8b 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800676c:	2052      	movs	r0, #82	; 0x52
 800676e:	f002 fca2 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 8006772:	e0b1      	b.n	80068d8 <HAL_UART_MspInit+0x6f4>
 8006774:	40005000 	.word	0x40005000
 8006778:	58024400 	.word	0x58024400
 800677c:	58020400 	.word	0x58020400
 8006780:	240017f4 	.word	0x240017f4
 8006784:	40020088 	.word	0x40020088
 8006788:	40007800 	.word	0x40007800
 800678c:	58021000 	.word	0x58021000
 8006790:	58020000 	.word	0x58020000
 8006794:	2400186c 	.word	0x2400186c
 8006798:	40020040 	.word	0x40020040
  else if(huart->Instance==UART8)
 800679c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067a0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a4e      	ldr	r2, [pc, #312]	; (80068e4 <HAL_UART_MspInit+0x700>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f040 8094 	bne.w	80068d8 <HAL_UART_MspInit+0x6f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80067b0:	f04f 0202 	mov.w	r2, #2
 80067b4:	f04f 0300 	mov.w	r3, #0
 80067b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80067bc:	2300      	movs	r3, #0
 80067be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80067c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067c6:	4618      	mov	r0, r3
 80067c8:	f007 f9a4 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 80067d2:	f7fb fbcf 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80067d6:	4b44      	ldr	r3, [pc, #272]	; (80068e8 <HAL_UART_MspInit+0x704>)
 80067d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067dc:	4a42      	ldr	r2, [pc, #264]	; (80068e8 <HAL_UART_MspInit+0x704>)
 80067de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80067e6:	4b40      	ldr	r3, [pc, #256]	; (80068e8 <HAL_UART_MspInit+0x704>)
 80067e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067ec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80067f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067f4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006802:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006804:	4b38      	ldr	r3, [pc, #224]	; (80068e8 <HAL_UART_MspInit+0x704>)
 8006806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800680a:	4a37      	ldr	r2, [pc, #220]	; (80068e8 <HAL_UART_MspInit+0x704>)
 800680c:	f043 0310 	orr.w	r3, r3, #16
 8006810:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006814:	4b34      	ldr	r3, [pc, #208]	; (80068e8 <HAL_UART_MspInit+0x704>)
 8006816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800681a:	f003 0210 	and.w	r2, r3, #16
 800681e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800682c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006830:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006832:	2303      	movs	r3, #3
 8006834:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006838:	2302      	movs	r3, #2
 800683a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800683e:	2300      	movs	r3, #0
 8006840:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006844:	2300      	movs	r3, #0
 8006846:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800684a:	2308      	movs	r3, #8
 800684c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006850:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006854:	4619      	mov	r1, r3
 8006856:	4825      	ldr	r0, [pc, #148]	; (80068ec <HAL_UART_MspInit+0x708>)
 8006858:	f005 fa84 	bl	800bd64 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 800685c:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 800685e:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <HAL_UART_MspInit+0x710>)
 8006860:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8006862:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 8006864:	2251      	movs	r2, #81	; 0x51
 8006866:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006868:	4b21      	ldr	r3, [pc, #132]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 800686a:	2200      	movs	r2, #0
 800686c:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800686e:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 8006870:	2200      	movs	r2, #0
 8006872:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006874:	4b1e      	ldr	r3, [pc, #120]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 8006876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800687a:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800687c:	4b1c      	ldr	r3, [pc, #112]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 800687e:	2200      	movs	r2, #0
 8006880:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006882:	4b1b      	ldr	r3, [pc, #108]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 8006884:	2200      	movs	r2, #0
 8006886:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8006888:	4b19      	ldr	r3, [pc, #100]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 800688a:	2200      	movs	r2, #0
 800688c:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800688e:	4b18      	ldr	r3, [pc, #96]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 8006890:	2200      	movs	r2, #0
 8006892:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006894:	4b16      	ldr	r3, [pc, #88]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 8006896:	2200      	movs	r2, #0
 8006898:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800689a:	4815      	ldr	r0, [pc, #84]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 800689c:	f002 fc26 	bl	80090ec <HAL_DMA_Init>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_UART_MspInit+0x6c6>
      Error_Handler();
 80068a6:	f7fb fb65 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80068aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 80068b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80068ba:	4a0d      	ldr	r2, [pc, #52]	; (80068f0 <HAL_UART_MspInit+0x70c>)
 80068bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80068c8:	2200      	movs	r2, #0
 80068ca:	2100      	movs	r1, #0
 80068cc:	2053      	movs	r0, #83	; 0x53
 80068ce:	f002 fbd8 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80068d2:	2053      	movs	r0, #83	; 0x53
 80068d4:	f002 fbef 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 80068d8:	bf00      	nop
 80068da:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40007c00 	.word	0x40007c00
 80068e8:	58024400 	.word	0x58024400
 80068ec:	58021000 	.word	0x58021000
 80068f0:	240018e4 	.word	0x240018e4
 80068f4:	40020010 	.word	0x40020010

080068f8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b0bc      	sub	sp, #240	; 0xf0
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006900:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
 8006908:	605a      	str	r2, [r3, #4]
 800690a:	609a      	str	r2, [r3, #8]
 800690c:	60da      	str	r2, [r3, #12]
 800690e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006910:	f107 0318 	add.w	r3, r7, #24
 8006914:	22c0      	movs	r2, #192	; 0xc0
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f00e fe87 	bl	801562c <memset>
  if(hqspi->Instance==QUADSPI)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a55      	ldr	r2, [pc, #340]	; (8006a78 <HAL_QSPI_MspInit+0x180>)
 8006924:	4293      	cmp	r3, r2
 8006926:	f040 80a3 	bne.w	8006a70 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800692a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800692e:	f04f 0300 	mov.w	r3, #0
 8006932:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8006936:	2300      	movs	r3, #0
 8006938:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800693a:	f107 0318 	add.w	r3, r7, #24
 800693e:	4618      	mov	r0, r3
 8006940:	f007 f8e8 	bl	800db14 <HAL_RCCEx_PeriphCLKConfig>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800694a:	f7fb fb13 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800694e:	4b4b      	ldr	r3, [pc, #300]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 8006950:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006954:	4a49      	ldr	r2, [pc, #292]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 8006956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800695a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800695e:	4b47      	ldr	r3, [pc, #284]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 8006960:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800696c:	4b43      	ldr	r3, [pc, #268]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 800696e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006972:	4a42      	ldr	r2, [pc, #264]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 8006974:	f043 0310 	orr.w	r3, r3, #16
 8006978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800697c:	4b3f      	ldr	r3, [pc, #252]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 800697e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698a:	4b3c      	ldr	r3, [pc, #240]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 800698c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006990:	4a3a      	ldr	r2, [pc, #232]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 8006992:	f043 0302 	orr.w	r3, r3, #2
 8006996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800699a:	4b38      	ldr	r3, [pc, #224]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 800699c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069a8:	4b34      	ldr	r3, [pc, #208]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 80069aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ae:	4a33      	ldr	r2, [pc, #204]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 80069b0:	f043 0308 	orr.w	r3, r3, #8
 80069b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069b8:	4b30      	ldr	r3, [pc, #192]	; (8006a7c <HAL_QSPI_MspInit+0x184>)
 80069ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069be:	f003 0308 	and.w	r3, r3, #8
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80069c6:	2304      	movs	r3, #4
 80069c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069cc:	2302      	movs	r3, #2
 80069ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d8:	2300      	movs	r3, #0
 80069da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80069de:	2309      	movs	r3, #9
 80069e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80069e8:	4619      	mov	r1, r3
 80069ea:	4825      	ldr	r0, [pc, #148]	; (8006a80 <HAL_QSPI_MspInit+0x188>)
 80069ec:	f005 f9ba 	bl	800bd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80069f0:	2304      	movs	r3, #4
 80069f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069f6:	2302      	movs	r3, #2
 80069f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069fc:	2300      	movs	r3, #0
 80069fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006a08:	2309      	movs	r3, #9
 8006a0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a12:	4619      	mov	r1, r3
 8006a14:	481b      	ldr	r0, [pc, #108]	; (8006a84 <HAL_QSPI_MspInit+0x18c>)
 8006a16:	f005 f9a5 	bl	800bd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006a1a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006a1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a22:	2302      	movs	r3, #2
 8006a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006a34:	2309      	movs	r3, #9
 8006a36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4811      	ldr	r0, [pc, #68]	; (8006a88 <HAL_QSPI_MspInit+0x190>)
 8006a42:	f005 f98f 	bl	800bd64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a52:	2300      	movs	r3, #0
 8006a54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006a5e:	230a      	movs	r3, #10
 8006a60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4806      	ldr	r0, [pc, #24]	; (8006a84 <HAL_QSPI_MspInit+0x18c>)
 8006a6c:	f005 f97a 	bl	800bd64 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006a70:	bf00      	nop
 8006a72:	37f0      	adds	r7, #240	; 0xf0
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	52005000 	.word	0x52005000
 8006a7c:	58024400 	.word	0x58024400
 8006a80:	58021000 	.word	0x58021000
 8006a84:	58020400 	.word	0x58020400
 8006a88:	58020c00 	.word	0x58020c00

08006a8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b090      	sub	sp, #64	; 0x40
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a98:	2200      	movs	r2, #0
 8006a9a:	601a      	str	r2, [r3, #0]
 8006a9c:	605a      	str	r2, [r3, #4]
 8006a9e:	609a      	str	r2, [r3, #8]
 8006aa0:	60da      	str	r2, [r3, #12]
 8006aa2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aac:	d10f      	bne.n	8006ace <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006aae:	4b6d      	ldr	r3, [pc, #436]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006ab0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ab4:	4a6b      	ldr	r2, [pc, #428]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006ab6:	f043 0301 	orr.w	r3, r3, #1
 8006aba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006abe:	4b69      	ldr	r3, [pc, #420]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006ac0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006acc:	e0c5      	b.n	8006c5a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a65      	ldr	r2, [pc, #404]	; (8006c68 <HAL_TIM_Base_MspInit+0x1dc>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d10f      	bne.n	8006af8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006ad8:	4b62      	ldr	r3, [pc, #392]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ade:	4a61      	ldr	r2, [pc, #388]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006ae0:	f043 0302 	orr.w	r3, r3, #2
 8006ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006ae8:	4b5e      	ldr	r3, [pc, #376]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006af6:	e0b0      	b.n	8006c5a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM5)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a5b      	ldr	r2, [pc, #364]	; (8006c6c <HAL_TIM_Base_MspInit+0x1e0>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d136      	bne.n	8006b70 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b02:	4b58      	ldr	r3, [pc, #352]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b08:	4a56      	ldr	r2, [pc, #344]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b0a:	f043 0308 	orr.w	r3, r3, #8
 8006b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b12:	4b54      	ldr	r3, [pc, #336]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	623b      	str	r3, [r7, #32]
 8006b1e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b20:	4b50      	ldr	r3, [pc, #320]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b26:	4a4f      	ldr	r2, [pc, #316]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b30:	4b4c      	ldr	r3, [pc, #304]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	61fb      	str	r3, [r7, #28]
 8006b3c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b42:	2302      	movs	r3, #2
 8006b44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b46:	2300      	movs	r3, #0
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006b4e:	2302      	movs	r3, #2
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b56:	4619      	mov	r1, r3
 8006b58:	4845      	ldr	r0, [pc, #276]	; (8006c70 <HAL_TIM_Base_MspInit+0x1e4>)
 8006b5a:	f005 f903 	bl	800bd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	2032      	movs	r0, #50	; 0x32
 8006b64:	f002 fa8d 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006b68:	2032      	movs	r0, #50	; 0x32
 8006b6a:	f002 faa4 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 8006b6e:	e074      	b.n	8006c5a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM6)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a3f      	ldr	r2, [pc, #252]	; (8006c74 <HAL_TIM_Base_MspInit+0x1e8>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d117      	bne.n	8006baa <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b7a:	4b3a      	ldr	r3, [pc, #232]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b80:	4a38      	ldr	r2, [pc, #224]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b82:	f043 0310 	orr.w	r3, r3, #16
 8006b86:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b8a:	4b36      	ldr	r3, [pc, #216]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	61bb      	str	r3, [r7, #24]
 8006b96:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2036      	movs	r0, #54	; 0x36
 8006b9e:	f002 fa70 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006ba2:	2036      	movs	r0, #54	; 0x36
 8006ba4:	f002 fa87 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 8006ba8:	e057      	b.n	8006c5a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM15)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a32      	ldr	r2, [pc, #200]	; (8006c78 <HAL_TIM_Base_MspInit+0x1ec>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d136      	bne.n	8006c22 <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bba:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006bc4:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006bd2:	4b24      	ldr	r3, [pc, #144]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bd8:	4a22      	ldr	r2, [pc, #136]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bda:	f043 0310 	orr.w	r3, r3, #16
 8006bde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006be2:	4b20      	ldr	r3, [pc, #128]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006bf0:	2320      	movs	r3, #32
 8006bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006c00:	2304      	movs	r3, #4
 8006c02:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c08:	4619      	mov	r1, r3
 8006c0a:	481c      	ldr	r0, [pc, #112]	; (8006c7c <HAL_TIM_Base_MspInit+0x1f0>)
 8006c0c:	f005 f8aa 	bl	800bd64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8006c10:	2200      	movs	r2, #0
 8006c12:	2100      	movs	r1, #0
 8006c14:	2074      	movs	r0, #116	; 0x74
 8006c16:	f002 fa34 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006c1a:	2074      	movs	r0, #116	; 0x74
 8006c1c:	f002 fa4b 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 8006c20:	e01b      	b.n	8006c5a <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM16)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a16      	ldr	r2, [pc, #88]	; (8006c80 <HAL_TIM_Base_MspInit+0x1f4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d116      	bne.n	8006c5a <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c2c:	4b0d      	ldr	r3, [pc, #52]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c32:	4a0c      	ldr	r2, [pc, #48]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c38:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	2075      	movs	r0, #117	; 0x75
 8006c50:	f002 fa17 	bl	8009082 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006c54:	2075      	movs	r0, #117	; 0x75
 8006c56:	f002 fa2e 	bl	80090b6 <HAL_NVIC_EnableIRQ>
}
 8006c5a:	bf00      	nop
 8006c5c:	3740      	adds	r7, #64	; 0x40
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
 8006c68:	40000400 	.word	0x40000400
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	58020000 	.word	0x58020000
 8006c74:	40001000 	.word	0x40001000
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	58021000 	.word	0x58021000
 8006c80:	40014400 	.word	0x40014400

08006c84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	; 0x28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c8c:	f107 0314 	add.w	r3, r7, #20
 8006c90:	2200      	movs	r2, #0
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	605a      	str	r2, [r3, #4]
 8006c96:	609a      	str	r2, [r3, #8]
 8006c98:	60da      	str	r2, [r3, #12]
 8006c9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca4:	d120      	bne.n	8006ce8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ca6:	4b24      	ldr	r3, [pc, #144]	; (8006d38 <HAL_TIM_MspPostInit+0xb4>)
 8006ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <HAL_TIM_MspPostInit+0xb4>)
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006cb6:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <HAL_TIM_MspPostInit+0xb4>)
 8006cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	613b      	str	r3, [r7, #16]
 8006cc2:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8006cc4:	f248 030e 	movw	r3, #32782	; 0x800e
 8006cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cca:	2302      	movs	r3, #2
 8006ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cda:	f107 0314 	add.w	r3, r7, #20
 8006cde:	4619      	mov	r1, r3
 8006ce0:	4816      	ldr	r0, [pc, #88]	; (8006d3c <HAL_TIM_MspPostInit+0xb8>)
 8006ce2:	f005 f83f 	bl	800bd64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006ce6:	e023      	b.n	8006d30 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <HAL_TIM_MspPostInit+0xbc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d11e      	bne.n	8006d30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cf2:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <HAL_TIM_MspPostInit+0xb4>)
 8006cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cf8:	4a0f      	ldr	r2, [pc, #60]	; (8006d38 <HAL_TIM_MspPostInit+0xb4>)
 8006cfa:	f043 0304 	orr.w	r3, r3, #4
 8006cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d02:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <HAL_TIM_MspPostInit+0xb4>)
 8006d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d10:	23c0      	movs	r3, #192	; 0xc0
 8006d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d14:	2302      	movs	r3, #2
 8006d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d20:	2302      	movs	r3, #2
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d24:	f107 0314 	add.w	r3, r7, #20
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4806      	ldr	r0, [pc, #24]	; (8006d44 <HAL_TIM_MspPostInit+0xc0>)
 8006d2c:	f005 f81a 	bl	800bd64 <HAL_GPIO_Init>
}
 8006d30:	bf00      	nop
 8006d32:	3728      	adds	r7, #40	; 0x28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	58024400 	.word	0x58024400
 8006d3c:	58020000 	.word	0x58020000
 8006d40:	40000400 	.word	0x40000400
 8006d44:	58020800 	.word	0x58020800

08006d48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006d4c:	e7fe      	b.n	8006d4c <NMI_Handler+0x4>

08006d4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d52:	e7fe      	b.n	8006d52 <HardFault_Handler+0x4>

08006d54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d58:	e7fe      	b.n	8006d58 <MemManage_Handler+0x4>

08006d5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d5e:	e7fe      	b.n	8006d5e <BusFault_Handler+0x4>

08006d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006d64:	e7fe      	b.n	8006d64 <UsageFault_Handler+0x4>

08006d66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006d66:	b480      	push	{r7}
 8006d68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006d6a:	bf00      	nop
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006d78:	bf00      	nop
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006d82:	b480      	push	{r7}
 8006d84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006d86:	bf00      	nop
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006d94:	f000 faca 	bl	800732c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006d98:	bf00      	nop
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8006da0:	4802      	ldr	r0, [pc, #8]	; (8006dac <DMA1_Stream0_IRQHandler+0x10>)
 8006da2:	f003 fccd 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006da6:	bf00      	nop
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	240018e4 	.word	0x240018e4

08006db0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006db4:	4802      	ldr	r0, [pc, #8]	; (8006dc0 <DMA1_Stream1_IRQHandler+0x10>)
 8006db6:	f003 fcc3 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006dba:	bf00      	nop
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	24001320 	.word	0x24001320

08006dc4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006dc8:	4802      	ldr	r0, [pc, #8]	; (8006dd4 <DMA1_Stream2_IRQHandler+0x10>)
 8006dca:	f003 fcb9 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006dce:	bf00      	nop
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	2400186c 	.word	0x2400186c

08006dd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006ddc:	4802      	ldr	r0, [pc, #8]	; (8006de8 <DMA1_Stream3_IRQHandler+0x10>)
 8006dde:	f003 fcaf 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	24001704 	.word	0x24001704

08006dec <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006df0:	4802      	ldr	r0, [pc, #8]	; (8006dfc <DMA1_Stream4_IRQHandler+0x10>)
 8006df2:	f003 fca5 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006df6:	bf00      	nop
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	2400177c 	.word	0x2400177c

08006e00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006e04:	4802      	ldr	r0, [pc, #8]	; (8006e10 <DMA1_Stream5_IRQHandler+0x10>)
 8006e06:	f003 fc9b 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006e0a:	bf00      	nop
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	240017f4 	.word	0x240017f4

08006e14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006e18:	4802      	ldr	r0, [pc, #8]	; (8006e24 <ADC_IRQHandler+0x10>)
 8006e1a:	f000 ff45 	bl	8007ca8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006e1e:	bf00      	nop
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	240012bc 	.word	0x240012bc

08006e28 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PID_MODE_INPUT_Pin);
 8006e2c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e30:	f005 f993 	bl	800c15a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006e34:	bf00      	nop
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006e3c:	4802      	ldr	r0, [pc, #8]	; (8006e48 <TIM5_IRQHandler+0x10>)
 8006e3e:	f00a f85d 	bl	8010efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	24001a40 	.word	0x24001a40

08006e4c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006e50:	4802      	ldr	r0, [pc, #8]	; (8006e5c <UART4_IRQHandler+0x10>)
 8006e52:	f00b fd5d 	bl	8012910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006e56:	bf00      	nop
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2400143c 	.word	0x2400143c

08006e60 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006e64:	4802      	ldr	r0, [pc, #8]	; (8006e70 <UART5_IRQHandler+0x10>)
 8006e66:	f00b fd53 	bl	8012910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	240014d0 	.word	0x240014d0

08006e74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006e78:	4802      	ldr	r0, [pc, #8]	; (8006e84 <TIM6_DAC_IRQHandler+0x10>)
 8006e7a:	f00a f83f 	bl	8010efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006e7e:	bf00      	nop
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	24001a8c 	.word	0x24001a8c

08006e88 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006e8c:	4802      	ldr	r0, [pc, #8]	; (8006e98 <UART7_IRQHandler+0x10>)
 8006e8e:	f00b fd3f 	bl	8012910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8006e92:	bf00      	nop
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	24001564 	.word	0x24001564

08006e9c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006ea0:	4802      	ldr	r0, [pc, #8]	; (8006eac <UART8_IRQHandler+0x10>)
 8006ea2:	f00b fd35 	bl	8012910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006ea6:	bf00      	nop
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	240015f8 	.word	0x240015f8

08006eb0 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006eb4:	4802      	ldr	r0, [pc, #8]	; (8006ec0 <TIM15_IRQHandler+0x10>)
 8006eb6:	f00a f821 	bl	8010efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006eba:	bf00      	nop
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	24001ad8 	.word	0x24001ad8

08006ec4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006ec8:	4802      	ldr	r0, [pc, #8]	; (8006ed4 <TIM16_IRQHandler+0x10>)
 8006eca:	f00a f817 	bl	8010efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	24001b24 	.word	0x24001b24

08006ed8 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006edc:	4802      	ldr	r0, [pc, #8]	; (8006ee8 <BDMA_Channel0_IRQHandler+0x10>)
 8006ede:	f003 fc2f 	bl	800a740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006ee2:	bf00      	nop
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	2400168c 	.word	0x2400168c

08006eec <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006ef0:	4802      	ldr	r0, [pc, #8]	; (8006efc <LPUART1_IRQHandler+0x10>)
 8006ef2:	f00b fd0d 	bl	8012910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006ef6:	bf00      	nop
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	240013a8 	.word	0x240013a8

08006f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f00:	b480      	push	{r7}
 8006f02:	af00      	add	r7, sp, #0
  return 1;
 8006f04:	2301      	movs	r3, #1
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <_kill>:

int _kill(int pid, int sig)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f1a:	f00e fc2d 	bl	8015778 <__errno>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2216      	movs	r2, #22
 8006f22:	601a      	str	r2, [r3, #0]
  return -1;
 8006f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <_exit>:

void _exit (int status)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff ffe7 	bl	8006f10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f42:	e7fe      	b.n	8006f42 <_exit+0x12>

08006f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e00a      	b.n	8006f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006f56:	f3af 8000 	nop.w
 8006f5a:	4601      	mov	r1, r0
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	1c5a      	adds	r2, r3, #1
 8006f60:	60ba      	str	r2, [r7, #8]
 8006f62:	b2ca      	uxtb	r2, r1
 8006f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	dbf0      	blt.n	8006f56 <_read+0x12>
  }

  return len;
 8006f74:	687b      	ldr	r3, [r7, #4]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3718      	adds	r7, #24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e009      	b.n	8006fa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	1c5a      	adds	r2, r3, #1
 8006f94:	60ba      	str	r2, [r7, #8]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f7fa f891 	bl	80010c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	dbf1      	blt.n	8006f90 <_write+0x12>
  }
  return len;
 8006fac:	687b      	ldr	r3, [r7, #4]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <_close>:

int _close(int file)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b083      	sub	sp, #12
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fde:	605a      	str	r2, [r3, #4]
  return 0;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <_isatty>:

int _isatty(int file)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006ff6:	2301      	movs	r3, #1
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
	...

08007020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007028:	4a14      	ldr	r2, [pc, #80]	; (800707c <_sbrk+0x5c>)
 800702a:	4b15      	ldr	r3, [pc, #84]	; (8007080 <_sbrk+0x60>)
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007034:	4b13      	ldr	r3, [pc, #76]	; (8007084 <_sbrk+0x64>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d102      	bne.n	8007042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800703c:	4b11      	ldr	r3, [pc, #68]	; (8007084 <_sbrk+0x64>)
 800703e:	4a12      	ldr	r2, [pc, #72]	; (8007088 <_sbrk+0x68>)
 8007040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007042:	4b10      	ldr	r3, [pc, #64]	; (8007084 <_sbrk+0x64>)
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	429a      	cmp	r2, r3
 800704e:	d207      	bcs.n	8007060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007050:	f00e fb92 	bl	8015778 <__errno>
 8007054:	4603      	mov	r3, r0
 8007056:	220c      	movs	r2, #12
 8007058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800705a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800705e:	e009      	b.n	8007074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007060:	4b08      	ldr	r3, [pc, #32]	; (8007084 <_sbrk+0x64>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <_sbrk+0x64>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4413      	add	r3, r2
 800706e:	4a05      	ldr	r2, [pc, #20]	; (8007084 <_sbrk+0x64>)
 8007070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	24080000 	.word	0x24080000
 8007080:	00000400 	.word	0x00000400
 8007084:	24004644 	.word	0x24004644
 8007088:	240047a0 	.word	0x240047a0

0800708c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007090:	4b37      	ldr	r3, [pc, #220]	; (8007170 <SystemInit+0xe4>)
 8007092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007096:	4a36      	ldr	r2, [pc, #216]	; (8007170 <SystemInit+0xe4>)
 8007098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800709c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80070a0:	4b34      	ldr	r3, [pc, #208]	; (8007174 <SystemInit+0xe8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	2b06      	cmp	r3, #6
 80070aa:	d807      	bhi.n	80070bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80070ac:	4b31      	ldr	r3, [pc, #196]	; (8007174 <SystemInit+0xe8>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f023 030f 	bic.w	r3, r3, #15
 80070b4:	4a2f      	ldr	r2, [pc, #188]	; (8007174 <SystemInit+0xe8>)
 80070b6:	f043 0307 	orr.w	r3, r3, #7
 80070ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80070bc:	4b2e      	ldr	r3, [pc, #184]	; (8007178 <SystemInit+0xec>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a2d      	ldr	r2, [pc, #180]	; (8007178 <SystemInit+0xec>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80070c8:	4b2b      	ldr	r3, [pc, #172]	; (8007178 <SystemInit+0xec>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80070ce:	4b2a      	ldr	r3, [pc, #168]	; (8007178 <SystemInit+0xec>)
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4929      	ldr	r1, [pc, #164]	; (8007178 <SystemInit+0xec>)
 80070d4:	4b29      	ldr	r3, [pc, #164]	; (800717c <SystemInit+0xf0>)
 80070d6:	4013      	ands	r3, r2
 80070d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80070da:	4b26      	ldr	r3, [pc, #152]	; (8007174 <SystemInit+0xe8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80070e6:	4b23      	ldr	r3, [pc, #140]	; (8007174 <SystemInit+0xe8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f023 030f 	bic.w	r3, r3, #15
 80070ee:	4a21      	ldr	r2, [pc, #132]	; (8007174 <SystemInit+0xe8>)
 80070f0:	f043 0307 	orr.w	r3, r3, #7
 80070f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <SystemInit+0xec>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80070fc:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <SystemInit+0xec>)
 80070fe:	2200      	movs	r2, #0
 8007100:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <SystemInit+0xec>)
 8007104:	2200      	movs	r2, #0
 8007106:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8007108:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <SystemInit+0xec>)
 800710a:	4a1d      	ldr	r2, [pc, #116]	; (8007180 <SystemInit+0xf4>)
 800710c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <SystemInit+0xec>)
 8007110:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <SystemInit+0xf8>)
 8007112:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007114:	4b18      	ldr	r3, [pc, #96]	; (8007178 <SystemInit+0xec>)
 8007116:	4a1c      	ldr	r2, [pc, #112]	; (8007188 <SystemInit+0xfc>)
 8007118:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800711a:	4b17      	ldr	r3, [pc, #92]	; (8007178 <SystemInit+0xec>)
 800711c:	2200      	movs	r2, #0
 800711e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <SystemInit+0xec>)
 8007122:	4a19      	ldr	r2, [pc, #100]	; (8007188 <SystemInit+0xfc>)
 8007124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007126:	4b14      	ldr	r3, [pc, #80]	; (8007178 <SystemInit+0xec>)
 8007128:	2200      	movs	r2, #0
 800712a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800712c:	4b12      	ldr	r3, [pc, #72]	; (8007178 <SystemInit+0xec>)
 800712e:	4a16      	ldr	r2, [pc, #88]	; (8007188 <SystemInit+0xfc>)
 8007130:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007132:	4b11      	ldr	r3, [pc, #68]	; (8007178 <SystemInit+0xec>)
 8007134:	2200      	movs	r2, #0
 8007136:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <SystemInit+0xec>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a0e      	ldr	r2, [pc, #56]	; (8007178 <SystemInit+0xec>)
 800713e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007142:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <SystemInit+0xec>)
 8007146:	2200      	movs	r2, #0
 8007148:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <SystemInit+0x100>)
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	4b10      	ldr	r3, [pc, #64]	; (8007190 <SystemInit+0x104>)
 8007150:	4013      	ands	r3, r2
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d202      	bcs.n	800715e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8007158:	4b0e      	ldr	r3, [pc, #56]	; (8007194 <SystemInit+0x108>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800715e:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <SystemInit+0x10c>)
 8007160:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8007164:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8007166:	bf00      	nop
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	e000ed00 	.word	0xe000ed00
 8007174:	52002000 	.word	0x52002000
 8007178:	58024400 	.word	0x58024400
 800717c:	eaf6ed7f 	.word	0xeaf6ed7f
 8007180:	02020200 	.word	0x02020200
 8007184:	01ff0000 	.word	0x01ff0000
 8007188:	01010280 	.word	0x01010280
 800718c:	5c001000 	.word	0x5c001000
 8007190:	ffff0000 	.word	0xffff0000
 8007194:	51008108 	.word	0x51008108
 8007198:	52004000 	.word	0x52004000

0800719c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	0a5a      	lsrs	r2, r3, #9
 80071ac:	490f      	ldr	r1, [pc, #60]	; (80071ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80071ae:	fba1 1202 	umull	r1, r2, r1, r2
 80071b2:	09d2      	lsrs	r2, r2, #7
 80071b4:	490e      	ldr	r1, [pc, #56]	; (80071f0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80071b6:	fb01 f202 	mul.w	r2, r1, r2
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	0a5b      	lsrs	r3, r3, #9
 80071c4:	4a09      	ldr	r2, [pc, #36]	; (80071ec <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	09db      	lsrs	r3, r3, #7
 80071cc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	441a      	add	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]
}
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	00044b83 	.word	0x00044b83
 80071f0:	3b9aca00 	.word	0x3b9aca00

080071f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80071f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800722c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80071f8:	f7ff ff48 	bl	800708c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80071fc:	480c      	ldr	r0, [pc, #48]	; (8007230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80071fe:	490d      	ldr	r1, [pc, #52]	; (8007234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007200:	4a0d      	ldr	r2, [pc, #52]	; (8007238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007204:	e002      	b.n	800720c <LoopCopyDataInit>

08007206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800720a:	3304      	adds	r3, #4

0800720c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800720c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800720e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007210:	d3f9      	bcc.n	8007206 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007212:	4a0a      	ldr	r2, [pc, #40]	; (800723c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007214:	4c0a      	ldr	r4, [pc, #40]	; (8007240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007218:	e001      	b.n	800721e <LoopFillZerobss>

0800721a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800721a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800721c:	3204      	adds	r2, #4

0800721e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800721e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007220:	d3fb      	bcc.n	800721a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007222:	f00e faaf 	bl	8015784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007226:	f7f9 ff5d 	bl	80010e4 <main>
  bx  lr
 800722a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800722c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007230:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007234:	2400021c 	.word	0x2400021c
  ldr r2, =_sidata
 8007238:	08017a44 	.word	0x08017a44
  ldr r2, =_sbss
 800723c:	2400021c 	.word	0x2400021c
  ldr r4, =_ebss
 8007240:	2400479c 	.word	0x2400479c

08007244 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007244:	e7fe      	b.n	8007244 <ADC3_IRQHandler>
	...

08007248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800724e:	2003      	movs	r0, #3
 8007250:	f001 ff0c 	bl	800906c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007254:	f006 fa88 	bl	800d768 <HAL_RCC_GetSysClockFreq>
 8007258:	4602      	mov	r2, r0
 800725a:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <HAL_Init+0x68>)
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	0a1b      	lsrs	r3, r3, #8
 8007260:	f003 030f 	and.w	r3, r3, #15
 8007264:	4913      	ldr	r1, [pc, #76]	; (80072b4 <HAL_Init+0x6c>)
 8007266:	5ccb      	ldrb	r3, [r1, r3]
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <HAL_Init+0x68>)
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	4a0e      	ldr	r2, [pc, #56]	; (80072b4 <HAL_Init+0x6c>)
 800727c:	5cd3      	ldrb	r3, [r2, r3]
 800727e:	f003 031f 	and.w	r3, r3, #31
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	fa22 f303 	lsr.w	r3, r2, r3
 8007288:	4a0b      	ldr	r2, [pc, #44]	; (80072b8 <HAL_Init+0x70>)
 800728a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800728c:	4a0b      	ldr	r2, [pc, #44]	; (80072bc <HAL_Init+0x74>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007292:	200f      	movs	r0, #15
 8007294:	f000 f814 	bl	80072c0 <HAL_InitTick>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e002      	b.n	80072a8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80072a2:	f7fe fe93 	bl	8005fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	58024400 	.word	0x58024400
 80072b4:	08017678 	.word	0x08017678
 80072b8:	24000048 	.word	0x24000048
 80072bc:	24000044 	.word	0x24000044

080072c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <HAL_InitTick+0x60>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e021      	b.n	8007318 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80072d4:	4b13      	ldr	r3, [pc, #76]	; (8007324 <HAL_InitTick+0x64>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <HAL_InitTick+0x60>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	4619      	mov	r1, r3
 80072de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80072e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ea:	4618      	mov	r0, r3
 80072ec:	f001 fef1 	bl	80090d2 <HAL_SYSTICK_Config>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e00e      	b.n	8007318 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b0f      	cmp	r3, #15
 80072fe:	d80a      	bhi.n	8007316 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007300:	2200      	movs	r2, #0
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007308:	f001 febb 	bl	8009082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800730c:	4a06      	ldr	r2, [pc, #24]	; (8007328 <HAL_InitTick+0x68>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007312:	2300      	movs	r3, #0
 8007314:	e000      	b.n	8007318 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
}
 8007318:	4618      	mov	r0, r3
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	24000050 	.word	0x24000050
 8007324:	24000044 	.word	0x24000044
 8007328:	2400004c 	.word	0x2400004c

0800732c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007330:	4b06      	ldr	r3, [pc, #24]	; (800734c <HAL_IncTick+0x20>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	461a      	mov	r2, r3
 8007336:	4b06      	ldr	r3, [pc, #24]	; (8007350 <HAL_IncTick+0x24>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4413      	add	r3, r2
 800733c:	4a04      	ldr	r2, [pc, #16]	; (8007350 <HAL_IncTick+0x24>)
 800733e:	6013      	str	r3, [r2, #0]
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	24000050 	.word	0x24000050
 8007350:	24004648 	.word	0x24004648

08007354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return uwTick;
 8007358:	4b03      	ldr	r3, [pc, #12]	; (8007368 <HAL_GetTick+0x14>)
 800735a:	681b      	ldr	r3, [r3, #0]
}
 800735c:	4618      	mov	r0, r3
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop
 8007368:	24004648 	.word	0x24004648

0800736c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007374:	f7ff ffee 	bl	8007354 <HAL_GetTick>
 8007378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007384:	d005      	beq.n	8007392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007386:	4b0a      	ldr	r3, [pc, #40]	; (80073b0 <HAL_Delay+0x44>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007392:	bf00      	nop
 8007394:	f7ff ffde 	bl	8007354 <HAL_GetTick>
 8007398:	4602      	mov	r2, r0
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	1ad3      	subs	r3, r2, r3
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d8f7      	bhi.n	8007394 <HAL_Delay+0x28>
  {
  }
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	24000050 	.word	0x24000050

080073b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80073b8:	4b03      	ldr	r3, [pc, #12]	; (80073c8 <HAL_GetREVID+0x14>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	0c1b      	lsrs	r3, r3, #16
}
 80073be:	4618      	mov	r0, r3
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	5c001000 	.word	0x5c001000

080073cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	609a      	str	r2, [r3, #8]
}
 80073e6:	bf00      	nop
 80073e8:	370c      	adds	r7, #12
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80073f2:	b480      	push	{r7}
 80073f4:	b083      	sub	sp, #12
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	609a      	str	r2, [r3, #8]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007428:	4618      	mov	r0, r3
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
 8007440:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3360      	adds	r3, #96	; 0x60
 8007446:	461a      	mov	r2, r3
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	430b      	orrs	r3, r1
 8007462:	431a      	orrs	r2, r3
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007468:	bf00      	nop
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007474:	b480      	push	{r7}
 8007476:	b085      	sub	sp, #20
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 031f 	and.w	r3, r3, #31
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	fa01 f303 	lsl.w	r3, r1, r3
 8007494:	431a      	orrs	r2, r3
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	611a      	str	r2, [r3, #16]
}
 800749a:	bf00      	nop
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3360      	adds	r3, #96	; 0x60
 80074b6:	461a      	mov	r2, r3
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	4413      	add	r3, r2
 80074be:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	431a      	orrs	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	601a      	str	r2, [r3, #0]
  }
}
 80074d0:	bf00      	nop
 80074d2:	371c      	adds	r7, #28
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	370c      	adds	r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3330      	adds	r3, #48	; 0x30
 8007512:	461a      	mov	r2, r3
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	f003 030c 	and.w	r3, r3, #12
 800751e:	4413      	add	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	f003 031f 	and.w	r3, r3, #31
 800752c:	211f      	movs	r1, #31
 800752e:	fa01 f303 	lsl.w	r3, r1, r3
 8007532:	43db      	mvns	r3, r3
 8007534:	401a      	ands	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	0e9b      	lsrs	r3, r3, #26
 800753a:	f003 011f 	and.w	r1, r3, #31
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	fa01 f303 	lsl.w	r3, r1, r3
 8007548:	431a      	orrs	r2, r3
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800754e:	bf00      	nop
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800755a:	b480      	push	{r7}
 800755c:	b083      	sub	sp, #12
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
 8007562:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	f023 0203 	bic.w	r2, r3, #3
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	431a      	orrs	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60da      	str	r2, [r3, #12]
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800758c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007594:	2301      	movs	r3, #1
 8007596:	e000      	b.n	800759a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b087      	sub	sp, #28
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	3314      	adds	r3, #20
 80075b6:	461a      	mov	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	0e5b      	lsrs	r3, r3, #25
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	f003 0304 	and.w	r3, r3, #4
 80075c2:	4413      	add	r3, r2
 80075c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	0d1b      	lsrs	r3, r3, #20
 80075ce:	f003 031f 	and.w	r3, r3, #31
 80075d2:	2107      	movs	r1, #7
 80075d4:	fa01 f303 	lsl.w	r3, r1, r3
 80075d8:	43db      	mvns	r3, r3
 80075da:	401a      	ands	r2, r3
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	0d1b      	lsrs	r3, r3, #20
 80075e0:	f003 031f 	and.w	r3, r3, #31
 80075e4:	6879      	ldr	r1, [r7, #4]
 80075e6:	fa01 f303 	lsl.w	r3, r1, r3
 80075ea:	431a      	orrs	r2, r3
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80075f0:	bf00      	nop
 80075f2:	371c      	adds	r7, #28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007614:	43db      	mvns	r3, r3
 8007616:	401a      	ands	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f003 0318 	and.w	r3, r3, #24
 800761e:	4908      	ldr	r1, [pc, #32]	; (8007640 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007620:	40d9      	lsrs	r1, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	400b      	ands	r3, r1
 8007626:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800762a:	431a      	orrs	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007632:	bf00      	nop
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	000fffff 	.word	0x000fffff

08007644 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 031f 	and.w	r3, r3, #31
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007670:	4618      	mov	r0, r3
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	689a      	ldr	r2, [r3, #8]
 8007688:	4b04      	ldr	r3, [pc, #16]	; (800769c <LL_ADC_DisableDeepPowerDown+0x20>)
 800768a:	4013      	ands	r3, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6093      	str	r3, [r2, #8]
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr
 800769c:	5fffffc0 	.word	0x5fffffc0

080076a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076b4:	d101      	bne.n	80076ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80076b6:	2301      	movs	r3, #1
 80076b8:	e000      	b.n	80076bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <LL_ADC_EnableInternalRegulator+0x24>)
 80076d6:	4013      	ands	r3, r2
 80076d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	6fffffc0 	.word	0x6fffffc0

080076f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b083      	sub	sp, #12
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007700:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007704:	d101      	bne.n	800770a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007706:	2301      	movs	r3, #1
 8007708:	e000      	b.n	800770c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	689a      	ldr	r2, [r3, #8]
 8007724:	4b05      	ldr	r3, [pc, #20]	; (800773c <LL_ADC_Enable+0x24>)
 8007726:	4013      	ands	r3, r2
 8007728:	f043 0201 	orr.w	r2, r3, #1
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	7fffffc0 	.word	0x7fffffc0

08007740 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d101      	bne.n	8007758 <LL_ADC_IsEnabled+0x18>
 8007754:	2301      	movs	r3, #1
 8007756:	e000      	b.n	800775a <LL_ADC_IsEnabled+0x1a>
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
	...

08007768 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	689a      	ldr	r2, [r3, #8]
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <LL_ADC_REG_StartConversion+0x24>)
 8007776:	4013      	ands	r3, r2
 8007778:	f043 0204 	orr.w	r2, r3, #4
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	7fffffc0 	.word	0x7fffffc0

08007790 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d101      	bne.n	80077a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80077a4:	2301      	movs	r3, #1
 80077a6:	e000      	b.n	80077aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr

080077b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b08      	cmp	r3, #8
 80077c8:	d101      	bne.n	80077ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b089      	sub	sp, #36	; 0x24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077e4:	2300      	movs	r3, #0
 80077e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e18f      	b.n	8007b16 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007800:	2b00      	cmp	r3, #0
 8007802:	d109      	bne.n	8007818 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7fe fbfb 	bl	8006000 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f7ff ff3f 	bl	80076a0 <LL_ADC_IsDeepPowerDownEnabled>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f7ff ff25 	bl	800767c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7ff ff5a 	bl	80076f0 <LL_ADC_IsInternalRegulatorEnabled>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d114      	bne.n	800786c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff ff3e 	bl	80076c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800784c:	4b87      	ldr	r3, [pc, #540]	; (8007a6c <HAL_ADC_Init+0x290>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	099b      	lsrs	r3, r3, #6
 8007852:	4a87      	ldr	r2, [pc, #540]	; (8007a70 <HAL_ADC_Init+0x294>)
 8007854:	fba2 2303 	umull	r2, r3, r2, r3
 8007858:	099b      	lsrs	r3, r3, #6
 800785a:	3301      	adds	r3, #1
 800785c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800785e:	e002      	b.n	8007866 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3b01      	subs	r3, #1
 8007864:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1f9      	bne.n	8007860 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff3d 	bl	80076f0 <LL_ADC_IsInternalRegulatorEnabled>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10d      	bne.n	8007898 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	f043 0210 	orr.w	r2, r3, #16
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788c:	f043 0201 	orr.w	r2, r3, #1
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ff77 	bl	8007790 <LL_ADC_REG_IsConversionOngoing>
 80078a2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a8:	f003 0310 	and.w	r3, r3, #16
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f040 8129 	bne.w	8007b04 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 8125 	bne.w	8007b04 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078be:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80078c2:	f043 0202 	orr.w	r2, r3, #2
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7ff ff36 	bl	8007740 <LL_ADC_IsEnabled>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d136      	bne.n	8007948 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a65      	ldr	r2, [pc, #404]	; (8007a74 <HAL_ADC_Init+0x298>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d004      	beq.n	80078ee <HAL_ADC_Init+0x112>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a63      	ldr	r2, [pc, #396]	; (8007a78 <HAL_ADC_Init+0x29c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d10e      	bne.n	800790c <HAL_ADC_Init+0x130>
 80078ee:	4861      	ldr	r0, [pc, #388]	; (8007a74 <HAL_ADC_Init+0x298>)
 80078f0:	f7ff ff26 	bl	8007740 <LL_ADC_IsEnabled>
 80078f4:	4604      	mov	r4, r0
 80078f6:	4860      	ldr	r0, [pc, #384]	; (8007a78 <HAL_ADC_Init+0x29c>)
 80078f8:	f7ff ff22 	bl	8007740 <LL_ADC_IsEnabled>
 80078fc:	4603      	mov	r3, r0
 80078fe:	4323      	orrs	r3, r4
 8007900:	2b00      	cmp	r3, #0
 8007902:	bf0c      	ite	eq
 8007904:	2301      	moveq	r3, #1
 8007906:	2300      	movne	r3, #0
 8007908:	b2db      	uxtb	r3, r3
 800790a:	e008      	b.n	800791e <HAL_ADC_Init+0x142>
 800790c:	485b      	ldr	r0, [pc, #364]	; (8007a7c <HAL_ADC_Init+0x2a0>)
 800790e:	f7ff ff17 	bl	8007740 <LL_ADC_IsEnabled>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d012      	beq.n	8007948 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a53      	ldr	r2, [pc, #332]	; (8007a74 <HAL_ADC_Init+0x298>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d004      	beq.n	8007936 <HAL_ADC_Init+0x15a>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a51      	ldr	r2, [pc, #324]	; (8007a78 <HAL_ADC_Init+0x29c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d101      	bne.n	800793a <HAL_ADC_Init+0x15e>
 8007936:	4a52      	ldr	r2, [pc, #328]	; (8007a80 <HAL_ADC_Init+0x2a4>)
 8007938:	e000      	b.n	800793c <HAL_ADC_Init+0x160>
 800793a:	4a52      	ldr	r2, [pc, #328]	; (8007a84 <HAL_ADC_Init+0x2a8>)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7ff fd42 	bl	80073cc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007948:	f7ff fd34 	bl	80073b4 <HAL_GetREVID>
 800794c:	4603      	mov	r3, r0
 800794e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007952:	4293      	cmp	r3, r2
 8007954:	d914      	bls.n	8007980 <HAL_ADC_Init+0x1a4>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	2b10      	cmp	r3, #16
 800795c:	d110      	bne.n	8007980 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	7d5b      	ldrb	r3, [r3, #21]
 8007962:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007968:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800796e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	7f1b      	ldrb	r3, [r3, #28]
 8007974:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007976:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007978:	f043 030c 	orr.w	r3, r3, #12
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	e00d      	b.n	800799c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	7d5b      	ldrb	r3, [r3, #21]
 8007984:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800798a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007990:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7f1b      	ldrb	r3, [r3, #28]
 8007996:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007998:	4313      	orrs	r3, r2
 800799a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7f1b      	ldrb	r3, [r3, #28]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d106      	bne.n	80079b2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	045b      	lsls	r3, r3, #17
 80079ac:	69ba      	ldr	r2, [r7, #24]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d009      	beq.n	80079ce <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80079c8:	69ba      	ldr	r2, [r7, #24]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	4b2c      	ldr	r3, [pc, #176]	; (8007a88 <HAL_ADC_Init+0x2ac>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	6812      	ldr	r2, [r2, #0]
 80079dc:	69b9      	ldr	r1, [r7, #24]
 80079de:	430b      	orrs	r3, r1
 80079e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fed2 	bl	8007790 <LL_ADC_REG_IsConversionOngoing>
 80079ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fedf 	bl	80077b6 <LL_ADC_INJ_IsConversionOngoing>
 80079f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d15f      	bne.n	8007ac0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d15c      	bne.n	8007ac0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	7d1b      	ldrb	r3, [r3, #20]
 8007a0a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68da      	ldr	r2, [r3, #12]
 8007a1a:	4b1c      	ldr	r3, [pc, #112]	; (8007a8c <HAL_ADC_Init+0x2b0>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	69b9      	ldr	r1, [r7, #24]
 8007a24:	430b      	orrs	r3, r1
 8007a26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d130      	bne.n	8007a94 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691a      	ldr	r2, [r3, #16]
 8007a3e:	4b14      	ldr	r3, [pc, #80]	; (8007a90 <HAL_ADC_Init+0x2b4>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a46:	3a01      	subs	r2, #1
 8007a48:	0411      	lsls	r1, r2, #16
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007a4e:	4311      	orrs	r1, r2
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a54:	4311      	orrs	r1, r2
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f042 0201 	orr.w	r2, r2, #1
 8007a66:	611a      	str	r2, [r3, #16]
 8007a68:	e01c      	b.n	8007aa4 <HAL_ADC_Init+0x2c8>
 8007a6a:	bf00      	nop
 8007a6c:	24000044 	.word	0x24000044
 8007a70:	053e2d63 	.word	0x053e2d63
 8007a74:	40022000 	.word	0x40022000
 8007a78:	40022100 	.word	0x40022100
 8007a7c:	58026000 	.word	0x58026000
 8007a80:	40022300 	.word	0x40022300
 8007a84:	58026300 	.word	0x58026300
 8007a88:	fff0c003 	.word	0xfff0c003
 8007a8c:	ffffbffc 	.word	0xffffbffc
 8007a90:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691a      	ldr	r2, [r3, #16]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f022 0201 	bic.w	r2, r2, #1
 8007aa2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 ffc4 	bl	8008a48 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d10c      	bne.n	8007ae2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ace:	f023 010f 	bic.w	r1, r3, #15
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	1e5a      	subs	r2, r3, #1
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	430a      	orrs	r2, r1
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30
 8007ae0:	e007      	b.n	8007af2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f022 020f 	bic.w	r2, r2, #15
 8007af0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af6:	f023 0303 	bic.w	r3, r3, #3
 8007afa:	f043 0201 	orr.w	r2, r3, #1
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	655a      	str	r2, [r3, #84]	; 0x54
 8007b02:	e007      	b.n	8007b14 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b08:	f043 0210 	orr.w	r2, r3, #16
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007b14:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3724      	adds	r7, #36	; 0x24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd90      	pop	{r4, r7, pc}
 8007b1e:	bf00      	nop

08007b20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a55      	ldr	r2, [pc, #340]	; (8007c88 <HAL_ADC_Start_DMA+0x168>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_ADC_Start_DMA+0x20>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a54      	ldr	r2, [pc, #336]	; (8007c8c <HAL_ADC_Start_DMA+0x16c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <HAL_ADC_Start_DMA+0x24>
 8007b40:	4b53      	ldr	r3, [pc, #332]	; (8007c90 <HAL_ADC_Start_DMA+0x170>)
 8007b42:	e000      	b.n	8007b46 <HAL_ADC_Start_DMA+0x26>
 8007b44:	4b53      	ldr	r3, [pc, #332]	; (8007c94 <HAL_ADC_Start_DMA+0x174>)
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff fd7c 	bl	8007644 <LL_ADC_GetMultimode>
 8007b4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff fe1c 	bl	8007790 <LL_ADC_REG_IsConversionOngoing>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f040 808c 	bne.w	8007c78 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d101      	bne.n	8007b6e <HAL_ADC_Start_DMA+0x4e>
 8007b6a:	2302      	movs	r3, #2
 8007b6c:	e087      	b.n	8007c7e <HAL_ADC_Start_DMA+0x15e>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d005      	beq.n	8007b88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	2b05      	cmp	r3, #5
 8007b80:	d002      	beq.n	8007b88 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d170      	bne.n	8007c6a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f000 fe3f 	bl	800880c <ADC_Enable>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d163      	bne.n	8007c60 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b9c:	4b3e      	ldr	r3, [pc, #248]	; (8007c98 <HAL_ADC_Start_DMA+0x178>)
 8007b9e:	4013      	ands	r3, r2
 8007ba0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a37      	ldr	r2, [pc, #220]	; (8007c8c <HAL_ADC_Start_DMA+0x16c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d002      	beq.n	8007bb8 <HAL_ADC_Start_DMA+0x98>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	e000      	b.n	8007bba <HAL_ADC_Start_DMA+0x9a>
 8007bb8:	4b33      	ldr	r3, [pc, #204]	; (8007c88 <HAL_ADC_Start_DMA+0x168>)
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d002      	beq.n	8007bc8 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d105      	bne.n	8007bd4 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bcc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be4:	f023 0206 	bic.w	r2, r3, #6
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	659a      	str	r2, [r3, #88]	; 0x58
 8007bec:	e002      	b.n	8007bf4 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf8:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <HAL_ADC_Start_DMA+0x17c>)
 8007bfa:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c00:	4a27      	ldr	r2, [pc, #156]	; (8007ca0 <HAL_ADC_Start_DMA+0x180>)
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c08:	4a26      	ldr	r2, [pc, #152]	; (8007ca4 <HAL_ADC_Start_DMA+0x184>)
 8007c0a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	221c      	movs	r2, #28
 8007c12:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0210 	orr.w	r2, r2, #16
 8007c2a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c34:	4619      	mov	r1, r3
 8007c36:	4610      	mov	r0, r2
 8007c38:	f7ff fc8f 	bl	800755a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3340      	adds	r3, #64	; 0x40
 8007c46:	4619      	mov	r1, r3
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f001 fdaa 	bl	80097a4 <HAL_DMA_Start_IT>
 8007c50:	4603      	mov	r3, r0
 8007c52:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fd85 	bl	8007768 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007c5e:	e00d      	b.n	8007c7c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8007c68:	e008      	b.n	8007c7c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007c76:	e001      	b.n	8007c7c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	40022000 	.word	0x40022000
 8007c8c:	40022100 	.word	0x40022100
 8007c90:	40022300 	.word	0x40022300
 8007c94:	58026300 	.word	0x58026300
 8007c98:	fffff0fe 	.word	0xfffff0fe
 8007c9c:	08008921 	.word	0x08008921
 8007ca0:	080089f9 	.word	0x080089f9
 8007ca4:	08008a15 	.word	0x08008a15

08007ca8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a87      	ldr	r2, [pc, #540]	; (8007ee8 <HAL_ADC_IRQHandler+0x240>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d004      	beq.n	8007cd8 <HAL_ADC_IRQHandler+0x30>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a86      	ldr	r2, [pc, #536]	; (8007eec <HAL_ADC_IRQHandler+0x244>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d101      	bne.n	8007cdc <HAL_ADC_IRQHandler+0x34>
 8007cd8:	4b85      	ldr	r3, [pc, #532]	; (8007ef0 <HAL_ADC_IRQHandler+0x248>)
 8007cda:	e000      	b.n	8007cde <HAL_ADC_IRQHandler+0x36>
 8007cdc:	4b85      	ldr	r3, [pc, #532]	; (8007ef4 <HAL_ADC_IRQHandler+0x24c>)
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fcb0 	bl	8007644 <LL_ADC_GetMultimode>
 8007ce4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d017      	beq.n	8007d20 <HAL_ADC_IRQHandler+0x78>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfe:	f003 0310 	and.w	r3, r3, #16
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d105      	bne.n	8007d12 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fff2 	bl	8008cfc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	f003 0304 	and.w	r3, r3, #4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d004      	beq.n	8007d34 <HAL_ADC_IRQHandler+0x8c>
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	f003 0304 	and.w	r3, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	f000 8083 	beq.w	8007e46 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d07d      	beq.n	8007e46 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d105      	bne.n	8007d62 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7ff fbb8 	bl	80074dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d062      	beq.n	8007e38 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a5d      	ldr	r2, [pc, #372]	; (8007eec <HAL_ADC_IRQHandler+0x244>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d002      	beq.n	8007d82 <HAL_ADC_IRQHandler+0xda>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	e000      	b.n	8007d84 <HAL_ADC_IRQHandler+0xdc>
 8007d82:	4b59      	ldr	r3, [pc, #356]	; (8007ee8 <HAL_ADC_IRQHandler+0x240>)
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d008      	beq.n	8007d9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d002      	beq.n	8007d9e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b09      	cmp	r3, #9
 8007d9c:	d104      	bne.n	8007da8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	623b      	str	r3, [r7, #32]
 8007da6:	e00c      	b.n	8007dc2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a4f      	ldr	r2, [pc, #316]	; (8007eec <HAL_ADC_IRQHandler+0x244>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d002      	beq.n	8007db8 <HAL_ADC_IRQHandler+0x110>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	e000      	b.n	8007dba <HAL_ADC_IRQHandler+0x112>
 8007db8:	4b4b      	ldr	r3, [pc, #300]	; (8007ee8 <HAL_ADC_IRQHandler+0x240>)
 8007dba:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d135      	bne.n	8007e38 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d12e      	bne.n	8007e38 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7ff fcd6 	bl	8007790 <LL_ADC_REG_IsConversionOngoing>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d11a      	bne.n	8007e20 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 020c 	bic.w	r2, r2, #12
 8007df8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d112      	bne.n	8007e38 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e16:	f043 0201 	orr.w	r2, r3, #1
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54
 8007e1e:	e00b      	b.n	8007e38 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e24:	f043 0210 	orr.w	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e30:	f043 0201 	orr.w	r2, r3, #1
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f96f 	bl	800811c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	220c      	movs	r2, #12
 8007e44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <HAL_ADC_IRQHandler+0x1b2>
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 80a0 	beq.w	8007fa6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 809a 	beq.w	8007fa6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e76:	f003 0310 	and.w	r3, r3, #16
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d105      	bne.n	8007e8a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff fb76 	bl	8007580 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007e94:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7ff fb1e 	bl	80074dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ea0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a11      	ldr	r2, [pc, #68]	; (8007eec <HAL_ADC_IRQHandler+0x244>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d002      	beq.n	8007eb2 <HAL_ADC_IRQHandler+0x20a>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	e000      	b.n	8007eb4 <HAL_ADC_IRQHandler+0x20c>
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	; (8007ee8 <HAL_ADC_IRQHandler+0x240>)
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6812      	ldr	r2, [r2, #0]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d008      	beq.n	8007ece <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d005      	beq.n	8007ece <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	2b06      	cmp	r3, #6
 8007ec6:	d002      	beq.n	8007ece <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2b07      	cmp	r3, #7
 8007ecc:	d104      	bne.n	8007ed8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	623b      	str	r3, [r7, #32]
 8007ed6:	e014      	b.n	8007f02 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a03      	ldr	r2, [pc, #12]	; (8007eec <HAL_ADC_IRQHandler+0x244>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00a      	beq.n	8007ef8 <HAL_ADC_IRQHandler+0x250>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	e008      	b.n	8007efa <HAL_ADC_IRQHandler+0x252>
 8007ee8:	40022000 	.word	0x40022000
 8007eec:	40022100 	.word	0x40022100
 8007ef0:	40022300 	.word	0x40022300
 8007ef4:	58026300 	.word	0x58026300
 8007ef8:	4b84      	ldr	r3, [pc, #528]	; (800810c <HAL_ADC_IRQHandler+0x464>)
 8007efa:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d047      	beq.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <HAL_ADC_IRQHandler+0x27a>
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d03f      	beq.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d13a      	bne.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	d133      	bne.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d12e      	bne.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7ff fc39 	bl	80077b6 <LL_ADC_INJ_IsConversionOngoing>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11a      	bne.n	8007f80 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007f58:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d112      	bne.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f76:	f043 0201 	orr.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54
 8007f7e:	e00b      	b.n	8007f98 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f84:	f043 0210 	orr.w	r2, r3, #16
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f90:	f043 0201 	orr.w	r2, r3, #1
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fe87 	bl	8008cac <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2260      	movs	r2, #96	; 0x60
 8007fa4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_ADC_IRQHandler+0x32c>
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00c      	beq.n	8007fd4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8bc 	bl	8008144 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2280      	movs	r2, #128	; 0x80
 8007fd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d012      	beq.n	8008004 <HAL_ADC_IRQHandler+0x35c>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 fe6d 	bl	8008cd4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008002:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800800a:	2b00      	cmp	r3, #0
 800800c:	d012      	beq.n	8008034 <HAL_ADC_IRQHandler+0x38c>
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00d      	beq.n	8008034 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800801c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fe5f 	bl	8008ce8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008032:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	2b00      	cmp	r3, #0
 800803c:	d043      	beq.n	80080c6 <HAL_ADC_IRQHandler+0x41e>
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	f003 0310 	and.w	r3, r3, #16
 8008044:	2b00      	cmp	r3, #0
 8008046:	d03e      	beq.n	80080c6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804c:	2b00      	cmp	r3, #0
 800804e:	d102      	bne.n	8008056 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8008050:	2301      	movs	r3, #1
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
 8008054:	e021      	b.n	800809a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d015      	beq.n	8008088 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2a      	ldr	r2, [pc, #168]	; (800810c <HAL_ADC_IRQHandler+0x464>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d004      	beq.n	8008070 <HAL_ADC_IRQHandler+0x3c8>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a29      	ldr	r2, [pc, #164]	; (8008110 <HAL_ADC_IRQHandler+0x468>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d101      	bne.n	8008074 <HAL_ADC_IRQHandler+0x3cc>
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <HAL_ADC_IRQHandler+0x46c>)
 8008072:	e000      	b.n	8008076 <HAL_ADC_IRQHandler+0x3ce>
 8008074:	4b28      	ldr	r3, [pc, #160]	; (8008118 <HAL_ADC_IRQHandler+0x470>)
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff faf2 	bl	8007660 <LL_ADC_GetMultiDMATransfer>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00b      	beq.n	800809a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8008082:	2301      	movs	r3, #1
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	e008      	b.n	800809a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d001      	beq.n	800809a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8008096:	2301      	movs	r3, #1
 8008098:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800809a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809c:	2b01      	cmp	r3, #1
 800809e:	d10e      	bne.n	80080be <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b0:	f043 0202 	orr.w	r2, r3, #2
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f84d 	bl	8008158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2210      	movs	r2, #16
 80080c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d018      	beq.n	8008102 <HAL_ADC_IRQHandler+0x45a>
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d013      	beq.n	8008102 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080de:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ea:	f043 0208 	orr.w	r2, r3, #8
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080fa:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 fddf 	bl	8008cc0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008102:	bf00      	nop
 8008104:	3728      	adds	r7, #40	; 0x28
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	40022000 	.word	0x40022000
 8008110:	40022100 	.word	0x40022100
 8008114:	40022300 	.word	0x40022300
 8008118:	58026300 	.word	0x58026300

0800811c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008124:	bf00      	nop
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008160:	bf00      	nop
 8008162:	370c      	adds	r7, #12
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b0a1      	sub	sp, #132	; 0x84
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800817c:	2300      	movs	r3, #0
 800817e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	4a9d      	ldr	r2, [pc, #628]	; (80083fc <HAL_ADC_ConfigChannel+0x290>)
 8008186:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800818e:	2b01      	cmp	r3, #1
 8008190:	d101      	bne.n	8008196 <HAL_ADC_ConfigChannel+0x2a>
 8008192:	2302      	movs	r3, #2
 8008194:	e321      	b.n	80087da <HAL_ADC_ConfigChannel+0x66e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff faf4 	bl	8007790 <LL_ADC_REG_IsConversionOngoing>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f040 8306 	bne.w	80087bc <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d108      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x62>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	0e9b      	lsrs	r3, r3, #26
 80081c2:	f003 031f 	and.w	r3, r3, #31
 80081c6:	2201      	movs	r2, #1
 80081c8:	fa02 f303 	lsl.w	r3, r2, r3
 80081cc:	e016      	b.n	80081fc <HAL_ADC_ConfigChannel+0x90>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081d6:	fa93 f3a3 	rbit	r3, r3
 80081da:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80081dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081de:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80081e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80081e6:	2320      	movs	r3, #32
 80081e8:	e003      	b.n	80081f2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80081ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80081ec:	fab3 f383 	clz	r3, r3
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	f003 031f 	and.w	r3, r3, #31
 80081f6:	2201      	movs	r2, #1
 80081f8:	fa02 f303 	lsl.w	r3, r2, r3
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6812      	ldr	r2, [r2, #0]
 8008200:	69d1      	ldr	r1, [r2, #28]
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	430b      	orrs	r3, r1
 8008208:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6818      	ldr	r0, [r3, #0]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	6859      	ldr	r1, [r3, #4]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7ff f973 	bl	8007502 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f7ff fab5 	bl	8007790 <LL_ADC_REG_IsConversionOngoing>
 8008226:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff fac2 	bl	80077b6 <LL_ADC_INJ_IsConversionOngoing>
 8008232:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008236:	2b00      	cmp	r3, #0
 8008238:	f040 80b3 	bne.w	80083a2 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800823c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800823e:	2b00      	cmp	r3, #0
 8008240:	f040 80af 	bne.w	80083a2 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	461a      	mov	r2, r3
 8008252:	f7ff f9a8 	bl	80075a6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008256:	4b6a      	ldr	r3, [pc, #424]	; (8008400 <HAL_ADC_ConfigChannel+0x294>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800825e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008262:	d10b      	bne.n	800827c <HAL_ADC_ConfigChannel+0x110>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	695a      	ldr	r2, [r3, #20]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	089b      	lsrs	r3, r3, #2
 8008270:	f003 0307 	and.w	r3, r3, #7
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	fa02 f303 	lsl.w	r3, r2, r3
 800827a:	e01d      	b.n	80082b8 <HAL_ADC_ConfigChannel+0x14c>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f003 0310 	and.w	r3, r3, #16
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <HAL_ADC_ConfigChannel+0x136>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	695a      	ldr	r2, [r3, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	089b      	lsrs	r3, r3, #2
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	e00a      	b.n	80082b8 <HAL_ADC_ConfigChannel+0x14c>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	695a      	ldr	r2, [r3, #20]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	089b      	lsrs	r3, r3, #2
 80082ae:	f003 0304 	and.w	r3, r3, #4
 80082b2:	005b      	lsls	r3, r3, #1
 80082b4:	fa02 f303 	lsl.w	r3, r2, r3
 80082b8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	2b04      	cmp	r3, #4
 80082c0:	d027      	beq.n	8008312 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	6919      	ldr	r1, [r3, #16]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d0:	f7ff f8b0 	bl	8007434 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	6919      	ldr	r1, [r3, #16]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	7e5b      	ldrb	r3, [r3, #25]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d102      	bne.n	80082ea <HAL_ADC_ConfigChannel+0x17e>
 80082e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082e8:	e000      	b.n	80082ec <HAL_ADC_ConfigChannel+0x180>
 80082ea:	2300      	movs	r3, #0
 80082ec:	461a      	mov	r2, r3
 80082ee:	f7ff f8da 	bl	80074a6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6818      	ldr	r0, [r3, #0]
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	6919      	ldr	r1, [r3, #16]
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	7e1b      	ldrb	r3, [r3, #24]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d102      	bne.n	8008308 <HAL_ADC_ConfigChannel+0x19c>
 8008302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008306:	e000      	b.n	800830a <HAL_ADC_ConfigChannel+0x19e>
 8008308:	2300      	movs	r3, #0
 800830a:	461a      	mov	r2, r3
 800830c:	f7ff f8b2 	bl	8007474 <LL_ADC_SetDataRightShift>
 8008310:	e047      	b.n	80083a2 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008318:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	069b      	lsls	r3, r3, #26
 8008322:	429a      	cmp	r2, r3
 8008324:	d107      	bne.n	8008336 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008334:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800833c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	069b      	lsls	r3, r3, #26
 8008346:	429a      	cmp	r2, r3
 8008348:	d107      	bne.n	800835a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008358:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008360:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	069b      	lsls	r3, r3, #26
 800836a:	429a      	cmp	r2, r3
 800836c:	d107      	bne.n	800837e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800837c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008384:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	069b      	lsls	r3, r3, #26
 800838e:	429a      	cmp	r2, r3
 8008390:	d107      	bne.n	80083a2 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083a0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7ff f9ca 	bl	8007740 <LL_ADC_IsEnabled>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f040 820d 	bne.w	80087ce <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6818      	ldr	r0, [r3, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	6819      	ldr	r1, [r3, #0]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	461a      	mov	r2, r3
 80083c2:	f7ff f91b 	bl	80075fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	68db      	ldr	r3, [r3, #12]
 80083ca:	4a0c      	ldr	r2, [pc, #48]	; (80083fc <HAL_ADC_ConfigChannel+0x290>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	f040 8133 	bne.w	8008638 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d110      	bne.n	8008404 <HAL_ADC_ConfigChannel+0x298>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	0e9b      	lsrs	r3, r3, #26
 80083e8:	3301      	adds	r3, #1
 80083ea:	f003 031f 	and.w	r3, r3, #31
 80083ee:	2b09      	cmp	r3, #9
 80083f0:	bf94      	ite	ls
 80083f2:	2301      	movls	r3, #1
 80083f4:	2300      	movhi	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	e01e      	b.n	8008438 <HAL_ADC_ConfigChannel+0x2cc>
 80083fa:	bf00      	nop
 80083fc:	47ff0000 	.word	0x47ff0000
 8008400:	5c001000 	.word	0x5c001000
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800840a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800840c:	fa93 f3a3 	rbit	r3, r3
 8008410:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008414:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800841c:	2320      	movs	r3, #32
 800841e:	e003      	b.n	8008428 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008422:	fab3 f383 	clz	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	3301      	adds	r3, #1
 800842a:	f003 031f 	and.w	r3, r3, #31
 800842e:	2b09      	cmp	r3, #9
 8008430:	bf94      	ite	ls
 8008432:	2301      	movls	r3, #1
 8008434:	2300      	movhi	r3, #0
 8008436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008438:	2b00      	cmp	r3, #0
 800843a:	d079      	beq.n	8008530 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <HAL_ADC_ConfigChannel+0x2ec>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	0e9b      	lsrs	r3, r3, #26
 800844e:	3301      	adds	r3, #1
 8008450:	069b      	lsls	r3, r3, #26
 8008452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008456:	e015      	b.n	8008484 <HAL_ADC_ConfigChannel+0x318>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008460:	fa93 f3a3 	rbit	r3, r3
 8008464:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008468:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800846a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8008470:	2320      	movs	r3, #32
 8008472:	e003      	b.n	800847c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8008474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008476:	fab3 f383 	clz	r3, r3
 800847a:	b2db      	uxtb	r3, r3
 800847c:	3301      	adds	r3, #1
 800847e:	069b      	lsls	r3, r3, #26
 8008480:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800848c:	2b00      	cmp	r3, #0
 800848e:	d109      	bne.n	80084a4 <HAL_ADC_ConfigChannel+0x338>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	0e9b      	lsrs	r3, r3, #26
 8008496:	3301      	adds	r3, #1
 8008498:	f003 031f 	and.w	r3, r3, #31
 800849c:	2101      	movs	r1, #1
 800849e:	fa01 f303 	lsl.w	r3, r1, r3
 80084a2:	e017      	b.n	80084d4 <HAL_ADC_ConfigChannel+0x368>
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ac:	fa93 f3a3 	rbit	r3, r3
 80084b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80084b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80084b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d101      	bne.n	80084c0 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 80084bc:	2320      	movs	r3, #32
 80084be:	e003      	b.n	80084c8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 80084c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084c2:	fab3 f383 	clz	r3, r3
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	3301      	adds	r3, #1
 80084ca:	f003 031f 	and.w	r3, r3, #31
 80084ce:	2101      	movs	r1, #1
 80084d0:	fa01 f303 	lsl.w	r3, r1, r3
 80084d4:	ea42 0103 	orr.w	r1, r2, r3
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <HAL_ADC_ConfigChannel+0x38e>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	0e9b      	lsrs	r3, r3, #26
 80084ea:	3301      	adds	r3, #1
 80084ec:	f003 021f 	and.w	r2, r3, #31
 80084f0:	4613      	mov	r3, r2
 80084f2:	005b      	lsls	r3, r3, #1
 80084f4:	4413      	add	r3, r2
 80084f6:	051b      	lsls	r3, r3, #20
 80084f8:	e018      	b.n	800852c <HAL_ADC_ConfigChannel+0x3c0>
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	fa93 f3a3 	rbit	r3, r3
 8008506:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	2b00      	cmp	r3, #0
 8008510:	d101      	bne.n	8008516 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8008512:	2320      	movs	r3, #32
 8008514:	e003      	b.n	800851e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	fab3 f383 	clz	r3, r3
 800851c:	b2db      	uxtb	r3, r3
 800851e:	3301      	adds	r3, #1
 8008520:	f003 021f 	and.w	r2, r3, #31
 8008524:	4613      	mov	r3, r2
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	4413      	add	r3, r2
 800852a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800852c:	430b      	orrs	r3, r1
 800852e:	e07e      	b.n	800862e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008538:	2b00      	cmp	r3, #0
 800853a:	d107      	bne.n	800854c <HAL_ADC_ConfigChannel+0x3e0>
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	0e9b      	lsrs	r3, r3, #26
 8008542:	3301      	adds	r3, #1
 8008544:	069b      	lsls	r3, r3, #26
 8008546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800854a:	e015      	b.n	8008578 <HAL_ADC_ConfigChannel+0x40c>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	fa93 f3a3 	rbit	r3, r3
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d101      	bne.n	8008568 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8008564:	2320      	movs	r3, #32
 8008566:	e003      	b.n	8008570 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	fab3 f383 	clz	r3, r3
 800856e:	b2db      	uxtb	r3, r3
 8008570:	3301      	adds	r3, #1
 8008572:	069b      	lsls	r3, r3, #26
 8008574:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008580:	2b00      	cmp	r3, #0
 8008582:	d109      	bne.n	8008598 <HAL_ADC_ConfigChannel+0x42c>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	0e9b      	lsrs	r3, r3, #26
 800858a:	3301      	adds	r3, #1
 800858c:	f003 031f 	and.w	r3, r3, #31
 8008590:	2101      	movs	r1, #1
 8008592:	fa01 f303 	lsl.w	r3, r1, r3
 8008596:	e017      	b.n	80085c8 <HAL_ADC_ConfigChannel+0x45c>
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	fa93 f3a3 	rbit	r3, r3
 80085a4:	61bb      	str	r3, [r7, #24]
  return result;
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80085aa:	6a3b      	ldr	r3, [r7, #32]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80085b0:	2320      	movs	r3, #32
 80085b2:	e003      	b.n	80085bc <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	fab3 f383 	clz	r3, r3
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	3301      	adds	r3, #1
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2101      	movs	r1, #1
 80085c4:	fa01 f303 	lsl.w	r3, r1, r3
 80085c8:	ea42 0103 	orr.w	r1, r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10d      	bne.n	80085f4 <HAL_ADC_ConfigChannel+0x488>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	0e9b      	lsrs	r3, r3, #26
 80085de:	3301      	adds	r3, #1
 80085e0:	f003 021f 	and.w	r2, r3, #31
 80085e4:	4613      	mov	r3, r2
 80085e6:	005b      	lsls	r3, r3, #1
 80085e8:	4413      	add	r3, r2
 80085ea:	3b1e      	subs	r3, #30
 80085ec:	051b      	lsls	r3, r3, #20
 80085ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085f2:	e01b      	b.n	800862c <HAL_ADC_ConfigChannel+0x4c0>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	fa93 f3a3 	rbit	r3, r3
 8008600:	60fb      	str	r3, [r7, #12]
  return result;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800860c:	2320      	movs	r3, #32
 800860e:	e003      	b.n	8008618 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	fab3 f383 	clz	r3, r3
 8008616:	b2db      	uxtb	r3, r3
 8008618:	3301      	adds	r3, #1
 800861a:	f003 021f 	and.w	r2, r3, #31
 800861e:	4613      	mov	r3, r2
 8008620:	005b      	lsls	r3, r3, #1
 8008622:	4413      	add	r3, r2
 8008624:	3b1e      	subs	r3, #30
 8008626:	051b      	lsls	r3, r3, #20
 8008628:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800862c:	430b      	orrs	r3, r1
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	6892      	ldr	r2, [r2, #8]
 8008632:	4619      	mov	r1, r3
 8008634:	f7fe ffb7 	bl	80075a6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	f280 80c6 	bge.w	80087ce <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a67      	ldr	r2, [pc, #412]	; (80087e4 <HAL_ADC_ConfigChannel+0x678>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d004      	beq.n	8008656 <HAL_ADC_ConfigChannel+0x4ea>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a65      	ldr	r2, [pc, #404]	; (80087e8 <HAL_ADC_ConfigChannel+0x67c>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d101      	bne.n	800865a <HAL_ADC_ConfigChannel+0x4ee>
 8008656:	4b65      	ldr	r3, [pc, #404]	; (80087ec <HAL_ADC_ConfigChannel+0x680>)
 8008658:	e000      	b.n	800865c <HAL_ADC_ConfigChannel+0x4f0>
 800865a:	4b65      	ldr	r3, [pc, #404]	; (80087f0 <HAL_ADC_ConfigChannel+0x684>)
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe fedb 	bl	8007418 <LL_ADC_GetCommonPathInternalCh>
 8008662:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a5e      	ldr	r2, [pc, #376]	; (80087e4 <HAL_ADC_ConfigChannel+0x678>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d004      	beq.n	8008678 <HAL_ADC_ConfigChannel+0x50c>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a5d      	ldr	r2, [pc, #372]	; (80087e8 <HAL_ADC_ConfigChannel+0x67c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d10e      	bne.n	8008696 <HAL_ADC_ConfigChannel+0x52a>
 8008678:	485a      	ldr	r0, [pc, #360]	; (80087e4 <HAL_ADC_ConfigChannel+0x678>)
 800867a:	f7ff f861 	bl	8007740 <LL_ADC_IsEnabled>
 800867e:	4604      	mov	r4, r0
 8008680:	4859      	ldr	r0, [pc, #356]	; (80087e8 <HAL_ADC_ConfigChannel+0x67c>)
 8008682:	f7ff f85d 	bl	8007740 <LL_ADC_IsEnabled>
 8008686:	4603      	mov	r3, r0
 8008688:	4323      	orrs	r3, r4
 800868a:	2b00      	cmp	r3, #0
 800868c:	bf0c      	ite	eq
 800868e:	2301      	moveq	r3, #1
 8008690:	2300      	movne	r3, #0
 8008692:	b2db      	uxtb	r3, r3
 8008694:	e008      	b.n	80086a8 <HAL_ADC_ConfigChannel+0x53c>
 8008696:	4857      	ldr	r0, [pc, #348]	; (80087f4 <HAL_ADC_ConfigChannel+0x688>)
 8008698:	f7ff f852 	bl	8007740 <LL_ADC_IsEnabled>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf0c      	ite	eq
 80086a2:	2301      	moveq	r3, #1
 80086a4:	2300      	movne	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d07d      	beq.n	80087a8 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a51      	ldr	r2, [pc, #324]	; (80087f8 <HAL_ADC_ConfigChannel+0x68c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d130      	bne.n	8008718 <HAL_ADC_ConfigChannel+0x5ac>
 80086b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d12b      	bne.n	8008718 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a4b      	ldr	r2, [pc, #300]	; (80087f4 <HAL_ADC_ConfigChannel+0x688>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	f040 8081 	bne.w	80087ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a44      	ldr	r2, [pc, #272]	; (80087e4 <HAL_ADC_ConfigChannel+0x678>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_ADC_ConfigChannel+0x574>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a43      	ldr	r2, [pc, #268]	; (80087e8 <HAL_ADC_ConfigChannel+0x67c>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d101      	bne.n	80086e4 <HAL_ADC_ConfigChannel+0x578>
 80086e0:	4a42      	ldr	r2, [pc, #264]	; (80087ec <HAL_ADC_ConfigChannel+0x680>)
 80086e2:	e000      	b.n	80086e6 <HAL_ADC_ConfigChannel+0x57a>
 80086e4:	4a42      	ldr	r2, [pc, #264]	; (80087f0 <HAL_ADC_ConfigChannel+0x684>)
 80086e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086ec:	4619      	mov	r1, r3
 80086ee:	4610      	mov	r0, r2
 80086f0:	f7fe fe7f 	bl	80073f2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80086f4:	4b41      	ldr	r3, [pc, #260]	; (80087fc <HAL_ADC_ConfigChannel+0x690>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	099b      	lsrs	r3, r3, #6
 80086fa:	4a41      	ldr	r2, [pc, #260]	; (8008800 <HAL_ADC_ConfigChannel+0x694>)
 80086fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008700:	099b      	lsrs	r3, r3, #6
 8008702:	3301      	adds	r3, #1
 8008704:	005b      	lsls	r3, r3, #1
 8008706:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008708:	e002      	b.n	8008710 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	3b01      	subs	r3, #1
 800870e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1f9      	bne.n	800870a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008716:	e05a      	b.n	80087ce <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a39      	ldr	r2, [pc, #228]	; (8008804 <HAL_ADC_ConfigChannel+0x698>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d11e      	bne.n	8008760 <HAL_ADC_ConfigChannel+0x5f4>
 8008722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d119      	bne.n	8008760 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a30      	ldr	r2, [pc, #192]	; (80087f4 <HAL_ADC_ConfigChannel+0x688>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d14b      	bne.n	80087ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <HAL_ADC_ConfigChannel+0x678>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d004      	beq.n	800874a <HAL_ADC_ConfigChannel+0x5de>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a28      	ldr	r2, [pc, #160]	; (80087e8 <HAL_ADC_ConfigChannel+0x67c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d101      	bne.n	800874e <HAL_ADC_ConfigChannel+0x5e2>
 800874a:	4a28      	ldr	r2, [pc, #160]	; (80087ec <HAL_ADC_ConfigChannel+0x680>)
 800874c:	e000      	b.n	8008750 <HAL_ADC_ConfigChannel+0x5e4>
 800874e:	4a28      	ldr	r2, [pc, #160]	; (80087f0 <HAL_ADC_ConfigChannel+0x684>)
 8008750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008756:	4619      	mov	r1, r3
 8008758:	4610      	mov	r0, r2
 800875a:	f7fe fe4a 	bl	80073f2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800875e:	e036      	b.n	80087ce <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a28      	ldr	r2, [pc, #160]	; (8008808 <HAL_ADC_ConfigChannel+0x69c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d131      	bne.n	80087ce <HAL_ADC_ConfigChannel+0x662>
 800876a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800876c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d12c      	bne.n	80087ce <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a1e      	ldr	r2, [pc, #120]	; (80087f4 <HAL_ADC_ConfigChannel+0x688>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d127      	bne.n	80087ce <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a18      	ldr	r2, [pc, #96]	; (80087e4 <HAL_ADC_ConfigChannel+0x678>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d004      	beq.n	8008792 <HAL_ADC_ConfigChannel+0x626>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a16      	ldr	r2, [pc, #88]	; (80087e8 <HAL_ADC_ConfigChannel+0x67c>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d101      	bne.n	8008796 <HAL_ADC_ConfigChannel+0x62a>
 8008792:	4a16      	ldr	r2, [pc, #88]	; (80087ec <HAL_ADC_ConfigChannel+0x680>)
 8008794:	e000      	b.n	8008798 <HAL_ADC_ConfigChannel+0x62c>
 8008796:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <HAL_ADC_ConfigChannel+0x684>)
 8008798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800879a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800879e:	4619      	mov	r1, r3
 80087a0:	4610      	mov	r0, r2
 80087a2:	f7fe fe26 	bl	80073f2 <LL_ADC_SetCommonPathInternalCh>
 80087a6:	e012      	b.n	80087ce <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ac:	f043 0220 	orr.w	r2, r3, #32
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80087ba:	e008      	b.n	80087ce <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c0:	f043 0220 	orr.w	r2, r3, #32
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80087d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3784      	adds	r7, #132	; 0x84
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd90      	pop	{r4, r7, pc}
 80087e2:	bf00      	nop
 80087e4:	40022000 	.word	0x40022000
 80087e8:	40022100 	.word	0x40022100
 80087ec:	40022300 	.word	0x40022300
 80087f0:	58026300 	.word	0x58026300
 80087f4:	58026000 	.word	0x58026000
 80087f8:	cb840000 	.word	0xcb840000
 80087fc:	24000044 	.word	0x24000044
 8008800:	053e2d63 	.word	0x053e2d63
 8008804:	c7520000 	.word	0xc7520000
 8008808:	cfb80000 	.word	0xcfb80000

0800880c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f7fe ff91 	bl	8007740 <LL_ADC_IsEnabled>
 800881e:	4603      	mov	r3, r0
 8008820:	2b00      	cmp	r3, #0
 8008822:	d16e      	bne.n	8008902 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689a      	ldr	r2, [r3, #8]
 800882a:	4b38      	ldr	r3, [pc, #224]	; (800890c <ADC_Enable+0x100>)
 800882c:	4013      	ands	r3, r2
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00d      	beq.n	800884e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008836:	f043 0210 	orr.w	r2, r3, #16
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008842:	f043 0201 	orr.w	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e05a      	b.n	8008904 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4618      	mov	r0, r3
 8008854:	f7fe ff60 	bl	8007718 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008858:	f7fe fd7c 	bl	8007354 <HAL_GetTick>
 800885c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a2b      	ldr	r2, [pc, #172]	; (8008910 <ADC_Enable+0x104>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <ADC_Enable+0x66>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a29      	ldr	r2, [pc, #164]	; (8008914 <ADC_Enable+0x108>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d101      	bne.n	8008876 <ADC_Enable+0x6a>
 8008872:	4b29      	ldr	r3, [pc, #164]	; (8008918 <ADC_Enable+0x10c>)
 8008874:	e000      	b.n	8008878 <ADC_Enable+0x6c>
 8008876:	4b29      	ldr	r3, [pc, #164]	; (800891c <ADC_Enable+0x110>)
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe fee3 	bl	8007644 <LL_ADC_GetMultimode>
 800887e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a23      	ldr	r2, [pc, #140]	; (8008914 <ADC_Enable+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d002      	beq.n	8008890 <ADC_Enable+0x84>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	e000      	b.n	8008892 <ADC_Enable+0x86>
 8008890:	4b1f      	ldr	r3, [pc, #124]	; (8008910 <ADC_Enable+0x104>)
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	6812      	ldr	r2, [r2, #0]
 8008896:	4293      	cmp	r3, r2
 8008898:	d02c      	beq.n	80088f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d130      	bne.n	8008902 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088a0:	e028      	b.n	80088f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe ff4a 	bl	8007740 <LL_ADC_IsEnabled>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d104      	bne.n	80088bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f7fe ff2e 	bl	8007718 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80088bc:	f7fe fd4a 	bl	8007354 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d914      	bls.n	80088f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 0301 	and.w	r3, r3, #1
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d00d      	beq.n	80088f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088dc:	f043 0210 	orr.w	r2, r3, #16
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e8:	f043 0201 	orr.w	r2, r3, #1
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e007      	b.n	8008904 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d1cf      	bne.n	80088a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	8000003f 	.word	0x8000003f
 8008910:	40022000 	.word	0x40022000
 8008914:	40022100 	.word	0x40022100
 8008918:	40022300 	.word	0x40022300
 800891c:	58026300 	.word	0x58026300

08008920 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008932:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008936:	2b00      	cmp	r3, #0
 8008938:	d14b      	bne.n	80089d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0308 	and.w	r3, r3, #8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d021      	beq.n	8008998 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe fdbf 	bl	80074dc <LL_ADC_REG_IsTriggerSourceSWStart>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d032      	beq.n	80089ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d12b      	bne.n	80089ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d11f      	bne.n	80089ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800898e:	f043 0201 	orr.w	r2, r3, #1
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	655a      	str	r2, [r3, #84]	; 0x54
 8008996:	e018      	b.n	80089ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d111      	bne.n	80089ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d105      	bne.n	80089ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c2:	f043 0201 	orr.w	r2, r3, #1
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f7ff fba6 	bl	800811c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80089d0:	e00e      	b.n	80089f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	f7ff fbba 	bl	8008158 <HAL_ADC_ErrorCallback>
}
 80089e4:	e004      	b.n	80089f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
}
 80089f0:	bf00      	nop
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a04:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff fb92 	bl	8008130 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a32:	f043 0204 	orr.w	r2, r3, #4
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f7ff fb8c 	bl	8008158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a40:	bf00      	nop
 8008a42:	3710      	adds	r7, #16
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	4a7a      	ldr	r2, [pc, #488]	; (8008c40 <ADC_ConfigureBoostMode+0x1f8>)
 8008a56:	4293      	cmp	r3, r2
 8008a58:	d004      	beq.n	8008a64 <ADC_ConfigureBoostMode+0x1c>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a79      	ldr	r2, [pc, #484]	; (8008c44 <ADC_ConfigureBoostMode+0x1fc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d109      	bne.n	8008a78 <ADC_ConfigureBoostMode+0x30>
 8008a64:	4b78      	ldr	r3, [pc, #480]	; (8008c48 <ADC_ConfigureBoostMode+0x200>)
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	bf14      	ite	ne
 8008a70:	2301      	movne	r3, #1
 8008a72:	2300      	moveq	r3, #0
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	e008      	b.n	8008a8a <ADC_ConfigureBoostMode+0x42>
 8008a78:	4b74      	ldr	r3, [pc, #464]	; (8008c4c <ADC_ConfigureBoostMode+0x204>)
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	bf14      	ite	ne
 8008a84:	2301      	movne	r3, #1
 8008a86:	2300      	moveq	r3, #0
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01c      	beq.n	8008ac8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008a8e:	f004 ffe5 	bl	800da5c <HAL_RCC_GetHCLKFreq>
 8008a92:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a9c:	d010      	beq.n	8008ac0 <ADC_ConfigureBoostMode+0x78>
 8008a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008aa2:	d873      	bhi.n	8008b8c <ADC_ConfigureBoostMode+0x144>
 8008aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aa8:	d002      	beq.n	8008ab0 <ADC_ConfigureBoostMode+0x68>
 8008aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008aae:	d16d      	bne.n	8008b8c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	0c1b      	lsrs	r3, r3, #16
 8008ab6:	68fa      	ldr	r2, [r7, #12]
 8008ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008abc:	60fb      	str	r3, [r7, #12]
        break;
 8008abe:	e068      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	089b      	lsrs	r3, r3, #2
 8008ac4:	60fb      	str	r3, [r7, #12]
        break;
 8008ac6:	e064      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008ac8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008acc:	f04f 0100 	mov.w	r1, #0
 8008ad0:	f006 fa2a 	bl	800ef28 <HAL_RCCEx_GetPeriphCLKFreq>
 8008ad4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008ade:	d051      	beq.n	8008b84 <ADC_ConfigureBoostMode+0x13c>
 8008ae0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008ae4:	d854      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008ae6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008aea:	d047      	beq.n	8008b7c <ADC_ConfigureBoostMode+0x134>
 8008aec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008af0:	d84e      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008af2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008af6:	d03d      	beq.n	8008b74 <ADC_ConfigureBoostMode+0x12c>
 8008af8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008afc:	d848      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b02:	d033      	beq.n	8008b6c <ADC_ConfigureBoostMode+0x124>
 8008b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b08:	d842      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008b0a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008b0e:	d029      	beq.n	8008b64 <ADC_ConfigureBoostMode+0x11c>
 8008b10:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008b14:	d83c      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008b16:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008b1a:	d01a      	beq.n	8008b52 <ADC_ConfigureBoostMode+0x10a>
 8008b1c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008b20:	d836      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008b22:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008b26:	d014      	beq.n	8008b52 <ADC_ConfigureBoostMode+0x10a>
 8008b28:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008b2c:	d830      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b32:	d00e      	beq.n	8008b52 <ADC_ConfigureBoostMode+0x10a>
 8008b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b38:	d82a      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008b3a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b3e:	d008      	beq.n	8008b52 <ADC_ConfigureBoostMode+0x10a>
 8008b40:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b44:	d824      	bhi.n	8008b90 <ADC_ConfigureBoostMode+0x148>
 8008b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b4a:	d002      	beq.n	8008b52 <ADC_ConfigureBoostMode+0x10a>
 8008b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b50:	d11e      	bne.n	8008b90 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	0c9b      	lsrs	r3, r3, #18
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b60:	60fb      	str	r3, [r7, #12]
        break;
 8008b62:	e016      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	091b      	lsrs	r3, r3, #4
 8008b68:	60fb      	str	r3, [r7, #12]
        break;
 8008b6a:	e012      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	095b      	lsrs	r3, r3, #5
 8008b70:	60fb      	str	r3, [r7, #12]
        break;
 8008b72:	e00e      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	099b      	lsrs	r3, r3, #6
 8008b78:	60fb      	str	r3, [r7, #12]
        break;
 8008b7a:	e00a      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	09db      	lsrs	r3, r3, #7
 8008b80:	60fb      	str	r3, [r7, #12]
        break;
 8008b82:	e006      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	0a1b      	lsrs	r3, r3, #8
 8008b88:	60fb      	str	r3, [r7, #12]
        break;
 8008b8a:	e002      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
        break;
 8008b8c:	bf00      	nop
 8008b8e:	e000      	b.n	8008b92 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008b90:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008b92:	f7fe fc0f 	bl	80073b4 <HAL_GetREVID>
 8008b96:	4603      	mov	r3, r0
 8008b98:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d815      	bhi.n	8008bcc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4a2b      	ldr	r2, [pc, #172]	; (8008c50 <ADC_ConfigureBoostMode+0x208>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d908      	bls.n	8008bba <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689a      	ldr	r2, [r3, #8]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bb6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008bb8:	e03e      	b.n	8008c38 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bc8:	609a      	str	r2, [r3, #8]
}
 8008bca:	e035      	b.n	8008c38 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	085b      	lsrs	r3, r3, #1
 8008bd0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4a1f      	ldr	r2, [pc, #124]	; (8008c54 <ADC_ConfigureBoostMode+0x20c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d808      	bhi.n	8008bec <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689a      	ldr	r2, [r3, #8]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008be8:	609a      	str	r2, [r3, #8]
}
 8008bea:	e025      	b.n	8008c38 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4a1a      	ldr	r2, [pc, #104]	; (8008c58 <ADC_ConfigureBoostMode+0x210>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d80a      	bhi.n	8008c0a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c06:	609a      	str	r2, [r3, #8]
}
 8008c08:	e016      	b.n	8008c38 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4a13      	ldr	r2, [pc, #76]	; (8008c5c <ADC_ConfigureBoostMode+0x214>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d80a      	bhi.n	8008c28 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c24:	609a      	str	r2, [r3, #8]
}
 8008c26:	e007      	b.n	8008c38 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689a      	ldr	r2, [r3, #8]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008c36:	609a      	str	r2, [r3, #8]
}
 8008c38:	bf00      	nop
 8008c3a:	3710      	adds	r7, #16
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	40022000 	.word	0x40022000
 8008c44:	40022100 	.word	0x40022100
 8008c48:	40022300 	.word	0x40022300
 8008c4c:	58026300 	.word	0x58026300
 8008c50:	01312d00 	.word	0x01312d00
 8008c54:	005f5e10 	.word	0x005f5e10
 8008c58:	00bebc20 	.word	0x00bebc20
 8008c5c:	017d7840 	.word	0x017d7840

08008c60 <LL_ADC_IsEnabled>:
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d101      	bne.n	8008c78 <LL_ADC_IsEnabled+0x18>
 8008c74:	2301      	movs	r3, #1
 8008c76:	e000      	b.n	8008c7a <LL_ADC_IsEnabled+0x1a>
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <LL_ADC_REG_IsConversionOngoing>:
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f003 0304 	and.w	r3, r3, #4
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d101      	bne.n	8008c9e <LL_ADC_REG_IsConversionOngoing+0x18>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008cb4:	bf00      	nop
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008d10:	b590      	push	{r4, r7, lr}
 8008d12:	b09f      	sub	sp, #124	; 0x7c
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d101      	bne.n	8008d2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e0be      	b.n	8008eac <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008d36:	2300      	movs	r3, #0
 8008d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a5c      	ldr	r2, [pc, #368]	; (8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d102      	bne.n	8008d4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008d48:	4b5b      	ldr	r3, [pc, #364]	; (8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008d4a:	60bb      	str	r3, [r7, #8]
 8008d4c:	e001      	b.n	8008d52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d5c:	f043 0220 	orr.w	r2, r3, #32
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e09d      	b.n	8008eac <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7ff ff87 	bl	8008c86 <LL_ADC_REG_IsConversionOngoing>
 8008d78:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff ff81 	bl	8008c86 <LL_ADC_REG_IsConversionOngoing>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d17f      	bne.n	8008e8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008d8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d17c      	bne.n	8008e8a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a47      	ldr	r2, [pc, #284]	; (8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d004      	beq.n	8008da4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a46      	ldr	r2, [pc, #280]	; (8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d101      	bne.n	8008da8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008da4:	4b45      	ldr	r3, [pc, #276]	; (8008ebc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008da6:	e000      	b.n	8008daa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008da8:	4b45      	ldr	r3, [pc, #276]	; (8008ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008daa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d039      	beq.n	8008e28 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a3a      	ldr	r2, [pc, #232]	; (8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d004      	beq.n	8008dda <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a38      	ldr	r2, [pc, #224]	; (8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d10e      	bne.n	8008df8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008dda:	4836      	ldr	r0, [pc, #216]	; (8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008ddc:	f7ff ff40 	bl	8008c60 <LL_ADC_IsEnabled>
 8008de0:	4604      	mov	r4, r0
 8008de2:	4835      	ldr	r0, [pc, #212]	; (8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008de4:	f7ff ff3c 	bl	8008c60 <LL_ADC_IsEnabled>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4323      	orrs	r3, r4
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bf0c      	ite	eq
 8008df0:	2301      	moveq	r3, #1
 8008df2:	2300      	movne	r3, #0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	e008      	b.n	8008e0a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008df8:	4832      	ldr	r0, [pc, #200]	; (8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008dfa:	f7ff ff31 	bl	8008c60 <LL_ADC_IsEnabled>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	bf0c      	ite	eq
 8008e04:	2301      	moveq	r3, #1
 8008e06:	2300      	movne	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d047      	beq.n	8008e9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	4b2d      	ldr	r3, [pc, #180]	; (8008ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	6811      	ldr	r1, [r2, #0]
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	6892      	ldr	r2, [r2, #8]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	431a      	orrs	r2, r3
 8008e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e24:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e26:	e03a      	b.n	8008e9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a1e      	ldr	r2, [pc, #120]	; (8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d004      	beq.n	8008e48 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a1d      	ldr	r2, [pc, #116]	; (8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d10e      	bne.n	8008e66 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008e48:	481a      	ldr	r0, [pc, #104]	; (8008eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e4a:	f7ff ff09 	bl	8008c60 <LL_ADC_IsEnabled>
 8008e4e:	4604      	mov	r4, r0
 8008e50:	4819      	ldr	r0, [pc, #100]	; (8008eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e52:	f7ff ff05 	bl	8008c60 <LL_ADC_IsEnabled>
 8008e56:	4603      	mov	r3, r0
 8008e58:	4323      	orrs	r3, r4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	bf0c      	ite	eq
 8008e5e:	2301      	moveq	r3, #1
 8008e60:	2300      	movne	r3, #0
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	e008      	b.n	8008e78 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008e66:	4817      	ldr	r0, [pc, #92]	; (8008ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008e68:	f7ff fefa 	bl	8008c60 <LL_ADC_IsEnabled>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bf0c      	ite	eq
 8008e72:	2301      	moveq	r3, #1
 8008e74:	2300      	movne	r3, #0
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d010      	beq.n	8008e9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7e:	689a      	ldr	r2, [r3, #8]
 8008e80:	4b11      	ldr	r3, [pc, #68]	; (8008ec8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008e82:	4013      	ands	r3, r2
 8008e84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e86:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e88:	e009      	b.n	8008e9e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	f043 0220 	orr.w	r2, r3, #32
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008e9c:	e000      	b.n	8008ea0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e9e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008ea8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	377c      	adds	r7, #124	; 0x7c
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd90      	pop	{r4, r7, pc}
 8008eb4:	40022000 	.word	0x40022000
 8008eb8:	40022100 	.word	0x40022100
 8008ebc:	40022300 	.word	0x40022300
 8008ec0:	58026300 	.word	0x58026300
 8008ec4:	58026000 	.word	0x58026000
 8008ec8:	fffff0e0 	.word	0xfffff0e0

08008ecc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008edc:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <__NVIC_SetPriorityGrouping+0x40>)
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ee8:	4013      	ands	r3, r2
 8008eea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008ef4:	4b06      	ldr	r3, [pc, #24]	; (8008f10 <__NVIC_SetPriorityGrouping+0x44>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008efa:	4a04      	ldr	r2, [pc, #16]	; (8008f0c <__NVIC_SetPriorityGrouping+0x40>)
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	60d3      	str	r3, [r2, #12]
}
 8008f00:	bf00      	nop
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	e000ed00 	.word	0xe000ed00
 8008f10:	05fa0000 	.word	0x05fa0000

08008f14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f18:	4b04      	ldr	r3, [pc, #16]	; (8008f2c <__NVIC_GetPriorityGrouping+0x18>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	0a1b      	lsrs	r3, r3, #8
 8008f1e:	f003 0307 	and.w	r3, r3, #7
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	e000ed00 	.word	0xe000ed00

08008f30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b083      	sub	sp, #12
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	4603      	mov	r3, r0
 8008f38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	db0b      	blt.n	8008f5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	f003 021f 	and.w	r2, r3, #31
 8008f48:	4907      	ldr	r1, [pc, #28]	; (8008f68 <__NVIC_EnableIRQ+0x38>)
 8008f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	2001      	movs	r0, #1
 8008f52:	fa00 f202 	lsl.w	r2, r0, r2
 8008f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	e000e100 	.word	0xe000e100

08008f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	4603      	mov	r3, r0
 8008f74:	6039      	str	r1, [r7, #0]
 8008f76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	db0a      	blt.n	8008f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	490c      	ldr	r1, [pc, #48]	; (8008fb8 <__NVIC_SetPriority+0x4c>)
 8008f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f8a:	0112      	lsls	r2, r2, #4
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	440b      	add	r3, r1
 8008f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008f94:	e00a      	b.n	8008fac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	4908      	ldr	r1, [pc, #32]	; (8008fbc <__NVIC_SetPriority+0x50>)
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	f003 030f 	and.w	r3, r3, #15
 8008fa2:	3b04      	subs	r3, #4
 8008fa4:	0112      	lsls	r2, r2, #4
 8008fa6:	b2d2      	uxtb	r2, r2
 8008fa8:	440b      	add	r3, r1
 8008faa:	761a      	strb	r2, [r3, #24]
}
 8008fac:	bf00      	nop
 8008fae:	370c      	adds	r7, #12
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	e000e100 	.word	0xe000e100
 8008fbc:	e000ed00 	.word	0xe000ed00

08008fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b089      	sub	sp, #36	; 0x24
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f003 0307 	and.w	r3, r3, #7
 8008fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f1c3 0307 	rsb	r3, r3, #7
 8008fda:	2b04      	cmp	r3, #4
 8008fdc:	bf28      	it	cs
 8008fde:	2304      	movcs	r3, #4
 8008fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	2b06      	cmp	r3, #6
 8008fe8:	d902      	bls.n	8008ff0 <NVIC_EncodePriority+0x30>
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	3b03      	subs	r3, #3
 8008fee:	e000      	b.n	8008ff2 <NVIC_EncodePriority+0x32>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffe:	43da      	mvns	r2, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	401a      	ands	r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009008:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	fa01 f303 	lsl.w	r3, r1, r3
 8009012:	43d9      	mvns	r1, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009018:	4313      	orrs	r3, r2
         );
}
 800901a:	4618      	mov	r0, r3
 800901c:	3724      	adds	r7, #36	; 0x24
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3b01      	subs	r3, #1
 8009034:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009038:	d301      	bcc.n	800903e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800903a:	2301      	movs	r3, #1
 800903c:	e00f      	b.n	800905e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800903e:	4a0a      	ldr	r2, [pc, #40]	; (8009068 <SysTick_Config+0x40>)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	3b01      	subs	r3, #1
 8009044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009046:	210f      	movs	r1, #15
 8009048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800904c:	f7ff ff8e 	bl	8008f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <SysTick_Config+0x40>)
 8009052:	2200      	movs	r2, #0
 8009054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009056:	4b04      	ldr	r3, [pc, #16]	; (8009068 <SysTick_Config+0x40>)
 8009058:	2207      	movs	r2, #7
 800905a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	e000e010 	.word	0xe000e010

0800906c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f7ff ff29 	bl	8008ecc <__NVIC_SetPriorityGrouping>
}
 800907a:	bf00      	nop
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009082:	b580      	push	{r7, lr}
 8009084:	b086      	sub	sp, #24
 8009086:	af00      	add	r7, sp, #0
 8009088:	4603      	mov	r3, r0
 800908a:	60b9      	str	r1, [r7, #8]
 800908c:	607a      	str	r2, [r7, #4]
 800908e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009090:	f7ff ff40 	bl	8008f14 <__NVIC_GetPriorityGrouping>
 8009094:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	68b9      	ldr	r1, [r7, #8]
 800909a:	6978      	ldr	r0, [r7, #20]
 800909c:	f7ff ff90 	bl	8008fc0 <NVIC_EncodePriority>
 80090a0:	4602      	mov	r2, r0
 80090a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090a6:	4611      	mov	r1, r2
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff ff5f 	bl	8008f6c <__NVIC_SetPriority>
}
 80090ae:	bf00      	nop
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b082      	sub	sp, #8
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	4603      	mov	r3, r0
 80090be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80090c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7ff ff33 	bl	8008f30 <__NVIC_EnableIRQ>
}
 80090ca:	bf00      	nop
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f7ff ffa4 	bl	8009028 <SysTick_Config>
 80090e0:	4603      	mov	r3, r0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
	...

080090ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80090f4:	f7fe f92e 	bl	8007354 <HAL_GetTick>
 80090f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d101      	bne.n	8009104 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e316      	b.n	8009732 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a66      	ldr	r2, [pc, #408]	; (80092a4 <HAL_DMA_Init+0x1b8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d04a      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a65      	ldr	r2, [pc, #404]	; (80092a8 <HAL_DMA_Init+0x1bc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d045      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a63      	ldr	r2, [pc, #396]	; (80092ac <HAL_DMA_Init+0x1c0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d040      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a62      	ldr	r2, [pc, #392]	; (80092b0 <HAL_DMA_Init+0x1c4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d03b      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a60      	ldr	r2, [pc, #384]	; (80092b4 <HAL_DMA_Init+0x1c8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d036      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a5f      	ldr	r2, [pc, #380]	; (80092b8 <HAL_DMA_Init+0x1cc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d031      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a5d      	ldr	r2, [pc, #372]	; (80092bc <HAL_DMA_Init+0x1d0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d02c      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a5c      	ldr	r2, [pc, #368]	; (80092c0 <HAL_DMA_Init+0x1d4>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d027      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a5a      	ldr	r2, [pc, #360]	; (80092c4 <HAL_DMA_Init+0x1d8>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d022      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a59      	ldr	r2, [pc, #356]	; (80092c8 <HAL_DMA_Init+0x1dc>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d01d      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a57      	ldr	r2, [pc, #348]	; (80092cc <HAL_DMA_Init+0x1e0>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d018      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a56      	ldr	r2, [pc, #344]	; (80092d0 <HAL_DMA_Init+0x1e4>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d013      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a54      	ldr	r2, [pc, #336]	; (80092d4 <HAL_DMA_Init+0x1e8>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d00e      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a53      	ldr	r2, [pc, #332]	; (80092d8 <HAL_DMA_Init+0x1ec>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d009      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a51      	ldr	r2, [pc, #324]	; (80092dc <HAL_DMA_Init+0x1f0>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d004      	beq.n	80091a4 <HAL_DMA_Init+0xb8>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a50      	ldr	r2, [pc, #320]	; (80092e0 <HAL_DMA_Init+0x1f4>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d101      	bne.n	80091a8 <HAL_DMA_Init+0xbc>
 80091a4:	2301      	movs	r3, #1
 80091a6:	e000      	b.n	80091aa <HAL_DMA_Init+0xbe>
 80091a8:	2300      	movs	r3, #0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f000 813b 	beq.w	8009426 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a37      	ldr	r2, [pc, #220]	; (80092a4 <HAL_DMA_Init+0x1b8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d04a      	beq.n	8009260 <HAL_DMA_Init+0x174>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a36      	ldr	r2, [pc, #216]	; (80092a8 <HAL_DMA_Init+0x1bc>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d045      	beq.n	8009260 <HAL_DMA_Init+0x174>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a34      	ldr	r2, [pc, #208]	; (80092ac <HAL_DMA_Init+0x1c0>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d040      	beq.n	8009260 <HAL_DMA_Init+0x174>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a33      	ldr	r2, [pc, #204]	; (80092b0 <HAL_DMA_Init+0x1c4>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d03b      	beq.n	8009260 <HAL_DMA_Init+0x174>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a31      	ldr	r2, [pc, #196]	; (80092b4 <HAL_DMA_Init+0x1c8>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d036      	beq.n	8009260 <HAL_DMA_Init+0x174>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a30      	ldr	r2, [pc, #192]	; (80092b8 <HAL_DMA_Init+0x1cc>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d031      	beq.n	8009260 <HAL_DMA_Init+0x174>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a2e      	ldr	r2, [pc, #184]	; (80092bc <HAL_DMA_Init+0x1d0>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d02c      	beq.n	8009260 <HAL_DMA_Init+0x174>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a2d      	ldr	r2, [pc, #180]	; (80092c0 <HAL_DMA_Init+0x1d4>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d027      	beq.n	8009260 <HAL_DMA_Init+0x174>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a2b      	ldr	r2, [pc, #172]	; (80092c4 <HAL_DMA_Init+0x1d8>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <HAL_DMA_Init+0x174>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a2a      	ldr	r2, [pc, #168]	; (80092c8 <HAL_DMA_Init+0x1dc>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d01d      	beq.n	8009260 <HAL_DMA_Init+0x174>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a28      	ldr	r2, [pc, #160]	; (80092cc <HAL_DMA_Init+0x1e0>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <HAL_DMA_Init+0x174>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a27      	ldr	r2, [pc, #156]	; (80092d0 <HAL_DMA_Init+0x1e4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <HAL_DMA_Init+0x174>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a25      	ldr	r2, [pc, #148]	; (80092d4 <HAL_DMA_Init+0x1e8>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_DMA_Init+0x174>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a24      	ldr	r2, [pc, #144]	; (80092d8 <HAL_DMA_Init+0x1ec>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <HAL_DMA_Init+0x174>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a22      	ldr	r2, [pc, #136]	; (80092dc <HAL_DMA_Init+0x1f0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_DMA_Init+0x174>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a21      	ldr	r2, [pc, #132]	; (80092e0 <HAL_DMA_Init+0x1f4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d108      	bne.n	8009272 <HAL_DMA_Init+0x186>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	e007      	b.n	8009282 <HAL_DMA_Init+0x196>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 0201 	bic.w	r2, r2, #1
 8009280:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009282:	e02f      	b.n	80092e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009284:	f7fe f866 	bl	8007354 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b05      	cmp	r3, #5
 8009290:	d928      	bls.n	80092e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2203      	movs	r2, #3
 800929c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e246      	b.n	8009732 <HAL_DMA_Init+0x646>
 80092a4:	40020010 	.word	0x40020010
 80092a8:	40020028 	.word	0x40020028
 80092ac:	40020040 	.word	0x40020040
 80092b0:	40020058 	.word	0x40020058
 80092b4:	40020070 	.word	0x40020070
 80092b8:	40020088 	.word	0x40020088
 80092bc:	400200a0 	.word	0x400200a0
 80092c0:	400200b8 	.word	0x400200b8
 80092c4:	40020410 	.word	0x40020410
 80092c8:	40020428 	.word	0x40020428
 80092cc:	40020440 	.word	0x40020440
 80092d0:	40020458 	.word	0x40020458
 80092d4:	40020470 	.word	0x40020470
 80092d8:	40020488 	.word	0x40020488
 80092dc:	400204a0 	.word	0x400204a0
 80092e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0301 	and.w	r3, r3, #1
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1c8      	bne.n	8009284 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4b83      	ldr	r3, [pc, #524]	; (800950c <HAL_DMA_Init+0x420>)
 80092fe:	4013      	ands	r3, r2
 8009300:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800930a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	691b      	ldr	r3, [r3, #16]
 8009310:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009316:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009322:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800932a:	697a      	ldr	r2, [r7, #20]
 800932c:	4313      	orrs	r3, r2
 800932e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	2b04      	cmp	r3, #4
 8009336:	d107      	bne.n	8009348 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009340:	4313      	orrs	r3, r2
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	4313      	orrs	r3, r2
 8009346:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009348:	4b71      	ldr	r3, [pc, #452]	; (8009510 <HAL_DMA_Init+0x424>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	4b71      	ldr	r3, [pc, #452]	; (8009514 <HAL_DMA_Init+0x428>)
 800934e:	4013      	ands	r3, r2
 8009350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009354:	d328      	bcc.n	80093a8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	2b28      	cmp	r3, #40	; 0x28
 800935c:	d903      	bls.n	8009366 <HAL_DMA_Init+0x27a>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	2b2e      	cmp	r3, #46	; 0x2e
 8009364:	d917      	bls.n	8009396 <HAL_DMA_Init+0x2aa>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b3e      	cmp	r3, #62	; 0x3e
 800936c:	d903      	bls.n	8009376 <HAL_DMA_Init+0x28a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b42      	cmp	r3, #66	; 0x42
 8009374:	d90f      	bls.n	8009396 <HAL_DMA_Init+0x2aa>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	685b      	ldr	r3, [r3, #4]
 800937a:	2b46      	cmp	r3, #70	; 0x46
 800937c:	d903      	bls.n	8009386 <HAL_DMA_Init+0x29a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2b48      	cmp	r3, #72	; 0x48
 8009384:	d907      	bls.n	8009396 <HAL_DMA_Init+0x2aa>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2b4e      	cmp	r3, #78	; 0x4e
 800938c:	d905      	bls.n	800939a <HAL_DMA_Init+0x2ae>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	2b52      	cmp	r3, #82	; 0x52
 8009394:	d801      	bhi.n	800939a <HAL_DMA_Init+0x2ae>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <HAL_DMA_Init+0x2b0>
 800939a:	2300      	movs	r3, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d003      	beq.n	80093a8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093a6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	697a      	ldr	r2, [r7, #20]
 80093ae:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f023 0307 	bic.w	r3, r3, #7
 80093be:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d117      	bne.n	8009402 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d6:	697a      	ldr	r2, [r7, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00e      	beq.n	8009402 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f002 fb33 	bl	800ba50 <DMA_CheckFifoParam>
 80093ea:	4603      	mov	r3, r0
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d008      	beq.n	8009402 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2240      	movs	r2, #64	; 0x40
 80093f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e197      	b.n	8009732 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f002 fa6e 	bl	800b8ec <DMA_CalcBaseAndBitshift>
 8009410:	4603      	mov	r3, r0
 8009412:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009418:	f003 031f 	and.w	r3, r3, #31
 800941c:	223f      	movs	r2, #63	; 0x3f
 800941e:	409a      	lsls	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	609a      	str	r2, [r3, #8]
 8009424:	e0cd      	b.n	80095c2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a3b      	ldr	r2, [pc, #236]	; (8009518 <HAL_DMA_Init+0x42c>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d022      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a39      	ldr	r2, [pc, #228]	; (800951c <HAL_DMA_Init+0x430>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d01d      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a38      	ldr	r2, [pc, #224]	; (8009520 <HAL_DMA_Init+0x434>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d018      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a36      	ldr	r2, [pc, #216]	; (8009524 <HAL_DMA_Init+0x438>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d013      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a35      	ldr	r2, [pc, #212]	; (8009528 <HAL_DMA_Init+0x43c>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00e      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a33      	ldr	r2, [pc, #204]	; (800952c <HAL_DMA_Init+0x440>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d009      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a32      	ldr	r2, [pc, #200]	; (8009530 <HAL_DMA_Init+0x444>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d004      	beq.n	8009476 <HAL_DMA_Init+0x38a>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a30      	ldr	r2, [pc, #192]	; (8009534 <HAL_DMA_Init+0x448>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d101      	bne.n	800947a <HAL_DMA_Init+0x38e>
 8009476:	2301      	movs	r3, #1
 8009478:	e000      	b.n	800947c <HAL_DMA_Init+0x390>
 800947a:	2300      	movs	r3, #0
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8097 	beq.w	80095b0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a24      	ldr	r2, [pc, #144]	; (8009518 <HAL_DMA_Init+0x42c>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d021      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a22      	ldr	r2, [pc, #136]	; (800951c <HAL_DMA_Init+0x430>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d01c      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a21      	ldr	r2, [pc, #132]	; (8009520 <HAL_DMA_Init+0x434>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d017      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a1f      	ldr	r2, [pc, #124]	; (8009524 <HAL_DMA_Init+0x438>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d012      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a1e      	ldr	r2, [pc, #120]	; (8009528 <HAL_DMA_Init+0x43c>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d00d      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a1c      	ldr	r2, [pc, #112]	; (800952c <HAL_DMA_Init+0x440>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d008      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a1b      	ldr	r2, [pc, #108]	; (8009530 <HAL_DMA_Init+0x444>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d003      	beq.n	80094d0 <HAL_DMA_Init+0x3e4>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a19      	ldr	r2, [pc, #100]	; (8009534 <HAL_DMA_Init+0x448>)
 80094ce:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80094e8:	697a      	ldr	r2, [r7, #20]
 80094ea:	4b13      	ldr	r3, [pc, #76]	; (8009538 <HAL_DMA_Init+0x44c>)
 80094ec:	4013      	ands	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	2b40      	cmp	r3, #64	; 0x40
 80094f6:	d021      	beq.n	800953c <HAL_DMA_Init+0x450>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b80      	cmp	r3, #128	; 0x80
 80094fe:	d102      	bne.n	8009506 <HAL_DMA_Init+0x41a>
 8009500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009504:	e01b      	b.n	800953e <HAL_DMA_Init+0x452>
 8009506:	2300      	movs	r3, #0
 8009508:	e019      	b.n	800953e <HAL_DMA_Init+0x452>
 800950a:	bf00      	nop
 800950c:	fe10803f 	.word	0xfe10803f
 8009510:	5c001000 	.word	0x5c001000
 8009514:	ffff0000 	.word	0xffff0000
 8009518:	58025408 	.word	0x58025408
 800951c:	5802541c 	.word	0x5802541c
 8009520:	58025430 	.word	0x58025430
 8009524:	58025444 	.word	0x58025444
 8009528:	58025458 	.word	0x58025458
 800952c:	5802546c 	.word	0x5802546c
 8009530:	58025480 	.word	0x58025480
 8009534:	58025494 	.word	0x58025494
 8009538:	fffe000f 	.word	0xfffe000f
 800953c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	68d2      	ldr	r2, [r2, #12]
 8009542:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009544:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800954c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009554:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800955c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	69db      	ldr	r3, [r3, #28]
 8009562:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009564:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800956c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	4313      	orrs	r3, r2
 8009572:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	461a      	mov	r2, r3
 8009582:	4b6e      	ldr	r3, [pc, #440]	; (800973c <HAL_DMA_Init+0x650>)
 8009584:	4413      	add	r3, r2
 8009586:	4a6e      	ldr	r2, [pc, #440]	; (8009740 <HAL_DMA_Init+0x654>)
 8009588:	fba2 2303 	umull	r2, r3, r2, r3
 800958c:	091b      	lsrs	r3, r3, #4
 800958e:	009a      	lsls	r2, r3, #2
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f002 f9a9 	bl	800b8ec <DMA_CalcBaseAndBitshift>
 800959a:	4603      	mov	r3, r0
 800959c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095a2:	f003 031f 	and.w	r3, r3, #31
 80095a6:	2201      	movs	r2, #1
 80095a8:	409a      	lsls	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	605a      	str	r2, [r3, #4]
 80095ae:	e008      	b.n	80095c2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2240      	movs	r2, #64	; 0x40
 80095b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2203      	movs	r2, #3
 80095ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e0b7      	b.n	8009732 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a5f      	ldr	r2, [pc, #380]	; (8009744 <HAL_DMA_Init+0x658>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d072      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a5d      	ldr	r2, [pc, #372]	; (8009748 <HAL_DMA_Init+0x65c>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d06d      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a5c      	ldr	r2, [pc, #368]	; (800974c <HAL_DMA_Init+0x660>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d068      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a5a      	ldr	r2, [pc, #360]	; (8009750 <HAL_DMA_Init+0x664>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d063      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a59      	ldr	r2, [pc, #356]	; (8009754 <HAL_DMA_Init+0x668>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d05e      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a57      	ldr	r2, [pc, #348]	; (8009758 <HAL_DMA_Init+0x66c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d059      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a56      	ldr	r2, [pc, #344]	; (800975c <HAL_DMA_Init+0x670>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d054      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a54      	ldr	r2, [pc, #336]	; (8009760 <HAL_DMA_Init+0x674>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d04f      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a53      	ldr	r2, [pc, #332]	; (8009764 <HAL_DMA_Init+0x678>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d04a      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a51      	ldr	r2, [pc, #324]	; (8009768 <HAL_DMA_Init+0x67c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d045      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a50      	ldr	r2, [pc, #320]	; (800976c <HAL_DMA_Init+0x680>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d040      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a4e      	ldr	r2, [pc, #312]	; (8009770 <HAL_DMA_Init+0x684>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d03b      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a4d      	ldr	r2, [pc, #308]	; (8009774 <HAL_DMA_Init+0x688>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d036      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a4b      	ldr	r2, [pc, #300]	; (8009778 <HAL_DMA_Init+0x68c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d031      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a4a      	ldr	r2, [pc, #296]	; (800977c <HAL_DMA_Init+0x690>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d02c      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a48      	ldr	r2, [pc, #288]	; (8009780 <HAL_DMA_Init+0x694>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d027      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a47      	ldr	r2, [pc, #284]	; (8009784 <HAL_DMA_Init+0x698>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d022      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a45      	ldr	r2, [pc, #276]	; (8009788 <HAL_DMA_Init+0x69c>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d01d      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a44      	ldr	r2, [pc, #272]	; (800978c <HAL_DMA_Init+0x6a0>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d018      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a42      	ldr	r2, [pc, #264]	; (8009790 <HAL_DMA_Init+0x6a4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d013      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a41      	ldr	r2, [pc, #260]	; (8009794 <HAL_DMA_Init+0x6a8>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d00e      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a3f      	ldr	r2, [pc, #252]	; (8009798 <HAL_DMA_Init+0x6ac>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d009      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a3e      	ldr	r2, [pc, #248]	; (800979c <HAL_DMA_Init+0x6b0>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d004      	beq.n	80096b2 <HAL_DMA_Init+0x5c6>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a3c      	ldr	r2, [pc, #240]	; (80097a0 <HAL_DMA_Init+0x6b4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d101      	bne.n	80096b6 <HAL_DMA_Init+0x5ca>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <HAL_DMA_Init+0x5cc>
 80096b6:	2300      	movs	r3, #0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d032      	beq.n	8009722 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f002 fa43 	bl	800bb48 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	2b80      	cmp	r3, #128	; 0x80
 80096c8:	d102      	bne.n	80096d0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685a      	ldr	r2, [r3, #4]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d8:	b2d2      	uxtb	r2, r2
 80096da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80096e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <HAL_DMA_Init+0x624>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d80c      	bhi.n	8009710 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f002 fac0 	bl	800bc7c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009700:	2200      	movs	r2, #0
 8009702:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800970c:	605a      	str	r2, [r3, #4]
 800970e:	e008      	b.n	8009722 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009730:	2300      	movs	r3, #0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3718      	adds	r7, #24
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	a7fdabf8 	.word	0xa7fdabf8
 8009740:	cccccccd 	.word	0xcccccccd
 8009744:	40020010 	.word	0x40020010
 8009748:	40020028 	.word	0x40020028
 800974c:	40020040 	.word	0x40020040
 8009750:	40020058 	.word	0x40020058
 8009754:	40020070 	.word	0x40020070
 8009758:	40020088 	.word	0x40020088
 800975c:	400200a0 	.word	0x400200a0
 8009760:	400200b8 	.word	0x400200b8
 8009764:	40020410 	.word	0x40020410
 8009768:	40020428 	.word	0x40020428
 800976c:	40020440 	.word	0x40020440
 8009770:	40020458 	.word	0x40020458
 8009774:	40020470 	.word	0x40020470
 8009778:	40020488 	.word	0x40020488
 800977c:	400204a0 	.word	0x400204a0
 8009780:	400204b8 	.word	0x400204b8
 8009784:	58025408 	.word	0x58025408
 8009788:	5802541c 	.word	0x5802541c
 800978c:	58025430 	.word	0x58025430
 8009790:	58025444 	.word	0x58025444
 8009794:	58025458 	.word	0x58025458
 8009798:	5802546c 	.word	0x5802546c
 800979c:	58025480 	.word	0x58025480
 80097a0:	58025494 	.word	0x58025494

080097a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b086      	sub	sp, #24
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	60f8      	str	r0, [r7, #12]
 80097ac:	60b9      	str	r1, [r7, #8]
 80097ae:	607a      	str	r2, [r7, #4]
 80097b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e226      	b.n	8009c0e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d101      	bne.n	80097ce <HAL_DMA_Start_IT+0x2a>
 80097ca:	2302      	movs	r3, #2
 80097cc:	e21f      	b.n	8009c0e <HAL_DMA_Start_IT+0x46a>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b01      	cmp	r3, #1
 80097e0:	f040 820a 	bne.w	8009bf8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a68      	ldr	r2, [pc, #416]	; (8009998 <HAL_DMA_Start_IT+0x1f4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d04a      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a66      	ldr	r2, [pc, #408]	; (800999c <HAL_DMA_Start_IT+0x1f8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d045      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a65      	ldr	r2, [pc, #404]	; (80099a0 <HAL_DMA_Start_IT+0x1fc>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d040      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a63      	ldr	r2, [pc, #396]	; (80099a4 <HAL_DMA_Start_IT+0x200>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d03b      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a62      	ldr	r2, [pc, #392]	; (80099a8 <HAL_DMA_Start_IT+0x204>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d036      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a60      	ldr	r2, [pc, #384]	; (80099ac <HAL_DMA_Start_IT+0x208>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d031      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a5f      	ldr	r2, [pc, #380]	; (80099b0 <HAL_DMA_Start_IT+0x20c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d02c      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a5d      	ldr	r2, [pc, #372]	; (80099b4 <HAL_DMA_Start_IT+0x210>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d027      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a5c      	ldr	r2, [pc, #368]	; (80099b8 <HAL_DMA_Start_IT+0x214>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d022      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a5a      	ldr	r2, [pc, #360]	; (80099bc <HAL_DMA_Start_IT+0x218>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d01d      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a59      	ldr	r2, [pc, #356]	; (80099c0 <HAL_DMA_Start_IT+0x21c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d018      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a57      	ldr	r2, [pc, #348]	; (80099c4 <HAL_DMA_Start_IT+0x220>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d013      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a56      	ldr	r2, [pc, #344]	; (80099c8 <HAL_DMA_Start_IT+0x224>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d00e      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a54      	ldr	r2, [pc, #336]	; (80099cc <HAL_DMA_Start_IT+0x228>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d009      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a53      	ldr	r2, [pc, #332]	; (80099d0 <HAL_DMA_Start_IT+0x22c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d004      	beq.n	8009892 <HAL_DMA_Start_IT+0xee>
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a51      	ldr	r2, [pc, #324]	; (80099d4 <HAL_DMA_Start_IT+0x230>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d108      	bne.n	80098a4 <HAL_DMA_Start_IT+0x100>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	e007      	b.n	80098b4 <HAL_DMA_Start_IT+0x110>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f022 0201 	bic.w	r2, r2, #1
 80098b2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f001 fe6a 	bl	800b594 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a34      	ldr	r2, [pc, #208]	; (8009998 <HAL_DMA_Start_IT+0x1f4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d04a      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a33      	ldr	r2, [pc, #204]	; (800999c <HAL_DMA_Start_IT+0x1f8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d045      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a31      	ldr	r2, [pc, #196]	; (80099a0 <HAL_DMA_Start_IT+0x1fc>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d040      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a30      	ldr	r2, [pc, #192]	; (80099a4 <HAL_DMA_Start_IT+0x200>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d03b      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a2e      	ldr	r2, [pc, #184]	; (80099a8 <HAL_DMA_Start_IT+0x204>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d036      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a2d      	ldr	r2, [pc, #180]	; (80099ac <HAL_DMA_Start_IT+0x208>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d031      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a2b      	ldr	r2, [pc, #172]	; (80099b0 <HAL_DMA_Start_IT+0x20c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d02c      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a2a      	ldr	r2, [pc, #168]	; (80099b4 <HAL_DMA_Start_IT+0x210>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d027      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a28      	ldr	r2, [pc, #160]	; (80099b8 <HAL_DMA_Start_IT+0x214>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d022      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a27      	ldr	r2, [pc, #156]	; (80099bc <HAL_DMA_Start_IT+0x218>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d01d      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a25      	ldr	r2, [pc, #148]	; (80099c0 <HAL_DMA_Start_IT+0x21c>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d018      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a24      	ldr	r2, [pc, #144]	; (80099c4 <HAL_DMA_Start_IT+0x220>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d013      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a22      	ldr	r2, [pc, #136]	; (80099c8 <HAL_DMA_Start_IT+0x224>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d00e      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a21      	ldr	r2, [pc, #132]	; (80099cc <HAL_DMA_Start_IT+0x228>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d009      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a1f      	ldr	r2, [pc, #124]	; (80099d0 <HAL_DMA_Start_IT+0x22c>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d004      	beq.n	8009960 <HAL_DMA_Start_IT+0x1bc>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a1e      	ldr	r2, [pc, #120]	; (80099d4 <HAL_DMA_Start_IT+0x230>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d101      	bne.n	8009964 <HAL_DMA_Start_IT+0x1c0>
 8009960:	2301      	movs	r3, #1
 8009962:	e000      	b.n	8009966 <HAL_DMA_Start_IT+0x1c2>
 8009964:	2300      	movs	r3, #0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d036      	beq.n	80099d8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f023 021e 	bic.w	r2, r3, #30
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f042 0216 	orr.w	r2, r2, #22
 800997c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009982:	2b00      	cmp	r3, #0
 8009984:	d03e      	beq.n	8009a04 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f042 0208 	orr.w	r2, r2, #8
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	e035      	b.n	8009a04 <HAL_DMA_Start_IT+0x260>
 8009998:	40020010 	.word	0x40020010
 800999c:	40020028 	.word	0x40020028
 80099a0:	40020040 	.word	0x40020040
 80099a4:	40020058 	.word	0x40020058
 80099a8:	40020070 	.word	0x40020070
 80099ac:	40020088 	.word	0x40020088
 80099b0:	400200a0 	.word	0x400200a0
 80099b4:	400200b8 	.word	0x400200b8
 80099b8:	40020410 	.word	0x40020410
 80099bc:	40020428 	.word	0x40020428
 80099c0:	40020440 	.word	0x40020440
 80099c4:	40020458 	.word	0x40020458
 80099c8:	40020470 	.word	0x40020470
 80099cc:	40020488 	.word	0x40020488
 80099d0:	400204a0 	.word	0x400204a0
 80099d4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f023 020e 	bic.w	r2, r3, #14
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f042 020a 	orr.w	r2, r2, #10
 80099ea:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d007      	beq.n	8009a04 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f042 0204 	orr.w	r2, r2, #4
 8009a02:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a83      	ldr	r2, [pc, #524]	; (8009c18 <HAL_DMA_Start_IT+0x474>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d072      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a82      	ldr	r2, [pc, #520]	; (8009c1c <HAL_DMA_Start_IT+0x478>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d06d      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a80      	ldr	r2, [pc, #512]	; (8009c20 <HAL_DMA_Start_IT+0x47c>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d068      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a7f      	ldr	r2, [pc, #508]	; (8009c24 <HAL_DMA_Start_IT+0x480>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d063      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a7d      	ldr	r2, [pc, #500]	; (8009c28 <HAL_DMA_Start_IT+0x484>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d05e      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a7c      	ldr	r2, [pc, #496]	; (8009c2c <HAL_DMA_Start_IT+0x488>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d059      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a7a      	ldr	r2, [pc, #488]	; (8009c30 <HAL_DMA_Start_IT+0x48c>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d054      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	4a79      	ldr	r2, [pc, #484]	; (8009c34 <HAL_DMA_Start_IT+0x490>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d04f      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a77      	ldr	r2, [pc, #476]	; (8009c38 <HAL_DMA_Start_IT+0x494>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d04a      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a76      	ldr	r2, [pc, #472]	; (8009c3c <HAL_DMA_Start_IT+0x498>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d045      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a74      	ldr	r2, [pc, #464]	; (8009c40 <HAL_DMA_Start_IT+0x49c>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d040      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	4a73      	ldr	r2, [pc, #460]	; (8009c44 <HAL_DMA_Start_IT+0x4a0>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d03b      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a71      	ldr	r2, [pc, #452]	; (8009c48 <HAL_DMA_Start_IT+0x4a4>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d036      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a70      	ldr	r2, [pc, #448]	; (8009c4c <HAL_DMA_Start_IT+0x4a8>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d031      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	4a6e      	ldr	r2, [pc, #440]	; (8009c50 <HAL_DMA_Start_IT+0x4ac>)
 8009a96:	4293      	cmp	r3, r2
 8009a98:	d02c      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a6d      	ldr	r2, [pc, #436]	; (8009c54 <HAL_DMA_Start_IT+0x4b0>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d027      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4a6b      	ldr	r2, [pc, #428]	; (8009c58 <HAL_DMA_Start_IT+0x4b4>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d022      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a6a      	ldr	r2, [pc, #424]	; (8009c5c <HAL_DMA_Start_IT+0x4b8>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d01d      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a68      	ldr	r2, [pc, #416]	; (8009c60 <HAL_DMA_Start_IT+0x4bc>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d018      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a67      	ldr	r2, [pc, #412]	; (8009c64 <HAL_DMA_Start_IT+0x4c0>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d013      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a65      	ldr	r2, [pc, #404]	; (8009c68 <HAL_DMA_Start_IT+0x4c4>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d00e      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a64      	ldr	r2, [pc, #400]	; (8009c6c <HAL_DMA_Start_IT+0x4c8>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d009      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a62      	ldr	r2, [pc, #392]	; (8009c70 <HAL_DMA_Start_IT+0x4cc>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d004      	beq.n	8009af4 <HAL_DMA_Start_IT+0x350>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a61      	ldr	r2, [pc, #388]	; (8009c74 <HAL_DMA_Start_IT+0x4d0>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d101      	bne.n	8009af8 <HAL_DMA_Start_IT+0x354>
 8009af4:	2301      	movs	r3, #1
 8009af6:	e000      	b.n	8009afa <HAL_DMA_Start_IT+0x356>
 8009af8:	2300      	movs	r3, #0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d01a      	beq.n	8009b34 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d007      	beq.n	8009b1c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b1a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b32:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a37      	ldr	r2, [pc, #220]	; (8009c18 <HAL_DMA_Start_IT+0x474>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d04a      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a36      	ldr	r2, [pc, #216]	; (8009c1c <HAL_DMA_Start_IT+0x478>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d045      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a34      	ldr	r2, [pc, #208]	; (8009c20 <HAL_DMA_Start_IT+0x47c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d040      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a33      	ldr	r2, [pc, #204]	; (8009c24 <HAL_DMA_Start_IT+0x480>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d03b      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a31      	ldr	r2, [pc, #196]	; (8009c28 <HAL_DMA_Start_IT+0x484>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d036      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a30      	ldr	r2, [pc, #192]	; (8009c2c <HAL_DMA_Start_IT+0x488>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d031      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a2e      	ldr	r2, [pc, #184]	; (8009c30 <HAL_DMA_Start_IT+0x48c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d02c      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a2d      	ldr	r2, [pc, #180]	; (8009c34 <HAL_DMA_Start_IT+0x490>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d027      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a2b      	ldr	r2, [pc, #172]	; (8009c38 <HAL_DMA_Start_IT+0x494>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d022      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a2a      	ldr	r2, [pc, #168]	; (8009c3c <HAL_DMA_Start_IT+0x498>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d01d      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a28      	ldr	r2, [pc, #160]	; (8009c40 <HAL_DMA_Start_IT+0x49c>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d018      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a27      	ldr	r2, [pc, #156]	; (8009c44 <HAL_DMA_Start_IT+0x4a0>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d013      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a25      	ldr	r2, [pc, #148]	; (8009c48 <HAL_DMA_Start_IT+0x4a4>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d00e      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a24      	ldr	r2, [pc, #144]	; (8009c4c <HAL_DMA_Start_IT+0x4a8>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d009      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a22      	ldr	r2, [pc, #136]	; (8009c50 <HAL_DMA_Start_IT+0x4ac>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d004      	beq.n	8009bd4 <HAL_DMA_Start_IT+0x430>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a21      	ldr	r2, [pc, #132]	; (8009c54 <HAL_DMA_Start_IT+0x4b0>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d108      	bne.n	8009be6 <HAL_DMA_Start_IT+0x442>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f042 0201 	orr.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	e012      	b.n	8009c0c <HAL_DMA_Start_IT+0x468>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f042 0201 	orr.w	r2, r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	e009      	b.n	8009c0c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009bfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	40020010 	.word	0x40020010
 8009c1c:	40020028 	.word	0x40020028
 8009c20:	40020040 	.word	0x40020040
 8009c24:	40020058 	.word	0x40020058
 8009c28:	40020070 	.word	0x40020070
 8009c2c:	40020088 	.word	0x40020088
 8009c30:	400200a0 	.word	0x400200a0
 8009c34:	400200b8 	.word	0x400200b8
 8009c38:	40020410 	.word	0x40020410
 8009c3c:	40020428 	.word	0x40020428
 8009c40:	40020440 	.word	0x40020440
 8009c44:	40020458 	.word	0x40020458
 8009c48:	40020470 	.word	0x40020470
 8009c4c:	40020488 	.word	0x40020488
 8009c50:	400204a0 	.word	0x400204a0
 8009c54:	400204b8 	.word	0x400204b8
 8009c58:	58025408 	.word	0x58025408
 8009c5c:	5802541c 	.word	0x5802541c
 8009c60:	58025430 	.word	0x58025430
 8009c64:	58025444 	.word	0x58025444
 8009c68:	58025458 	.word	0x58025458
 8009c6c:	5802546c 	.word	0x5802546c
 8009c70:	58025480 	.word	0x58025480
 8009c74:	58025494 	.word	0x58025494

08009c78 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b086      	sub	sp, #24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009c80:	f7fd fb68 	bl	8007354 <HAL_GetTick>
 8009c84:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d101      	bne.n	8009c90 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e2dc      	b.n	800a24a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	2b02      	cmp	r3, #2
 8009c9a:	d008      	beq.n	8009cae <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2280      	movs	r2, #128	; 0x80
 8009ca0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	e2cd      	b.n	800a24a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a76      	ldr	r2, [pc, #472]	; (8009e8c <HAL_DMA_Abort+0x214>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d04a      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4a74      	ldr	r2, [pc, #464]	; (8009e90 <HAL_DMA_Abort+0x218>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d045      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a73      	ldr	r2, [pc, #460]	; (8009e94 <HAL_DMA_Abort+0x21c>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d040      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a71      	ldr	r2, [pc, #452]	; (8009e98 <HAL_DMA_Abort+0x220>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d03b      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a70      	ldr	r2, [pc, #448]	; (8009e9c <HAL_DMA_Abort+0x224>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d036      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4a6e      	ldr	r2, [pc, #440]	; (8009ea0 <HAL_DMA_Abort+0x228>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d031      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a6d      	ldr	r2, [pc, #436]	; (8009ea4 <HAL_DMA_Abort+0x22c>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d02c      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a6b      	ldr	r2, [pc, #428]	; (8009ea8 <HAL_DMA_Abort+0x230>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d027      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	4a6a      	ldr	r2, [pc, #424]	; (8009eac <HAL_DMA_Abort+0x234>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d022      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a68      	ldr	r2, [pc, #416]	; (8009eb0 <HAL_DMA_Abort+0x238>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d01d      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a67      	ldr	r2, [pc, #412]	; (8009eb4 <HAL_DMA_Abort+0x23c>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d018      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a65      	ldr	r2, [pc, #404]	; (8009eb8 <HAL_DMA_Abort+0x240>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d013      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a64      	ldr	r2, [pc, #400]	; (8009ebc <HAL_DMA_Abort+0x244>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00e      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a62      	ldr	r2, [pc, #392]	; (8009ec0 <HAL_DMA_Abort+0x248>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d009      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a61      	ldr	r2, [pc, #388]	; (8009ec4 <HAL_DMA_Abort+0x24c>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d004      	beq.n	8009d4e <HAL_DMA_Abort+0xd6>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a5f      	ldr	r2, [pc, #380]	; (8009ec8 <HAL_DMA_Abort+0x250>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d101      	bne.n	8009d52 <HAL_DMA_Abort+0xda>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e000      	b.n	8009d54 <HAL_DMA_Abort+0xdc>
 8009d52:	2300      	movs	r3, #0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d013      	beq.n	8009d80 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f022 021e 	bic.w	r2, r2, #30
 8009d66:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695a      	ldr	r2, [r3, #20]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d76:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	e00a      	b.n	8009d96 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 020e 	bic.w	r2, r2, #14
 8009d8e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a3c      	ldr	r2, [pc, #240]	; (8009e8c <HAL_DMA_Abort+0x214>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d072      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a3a      	ldr	r2, [pc, #232]	; (8009e90 <HAL_DMA_Abort+0x218>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d06d      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a39      	ldr	r2, [pc, #228]	; (8009e94 <HAL_DMA_Abort+0x21c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d068      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a37      	ldr	r2, [pc, #220]	; (8009e98 <HAL_DMA_Abort+0x220>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d063      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a36      	ldr	r2, [pc, #216]	; (8009e9c <HAL_DMA_Abort+0x224>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d05e      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a34      	ldr	r2, [pc, #208]	; (8009ea0 <HAL_DMA_Abort+0x228>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d059      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a33      	ldr	r2, [pc, #204]	; (8009ea4 <HAL_DMA_Abort+0x22c>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d054      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a31      	ldr	r2, [pc, #196]	; (8009ea8 <HAL_DMA_Abort+0x230>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d04f      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a30      	ldr	r2, [pc, #192]	; (8009eac <HAL_DMA_Abort+0x234>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d04a      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a2e      	ldr	r2, [pc, #184]	; (8009eb0 <HAL_DMA_Abort+0x238>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d045      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4a2d      	ldr	r2, [pc, #180]	; (8009eb4 <HAL_DMA_Abort+0x23c>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d040      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a2b      	ldr	r2, [pc, #172]	; (8009eb8 <HAL_DMA_Abort+0x240>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d03b      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a2a      	ldr	r2, [pc, #168]	; (8009ebc <HAL_DMA_Abort+0x244>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d036      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a28      	ldr	r2, [pc, #160]	; (8009ec0 <HAL_DMA_Abort+0x248>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d031      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a27      	ldr	r2, [pc, #156]	; (8009ec4 <HAL_DMA_Abort+0x24c>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d02c      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a25      	ldr	r2, [pc, #148]	; (8009ec8 <HAL_DMA_Abort+0x250>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d027      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a24      	ldr	r2, [pc, #144]	; (8009ecc <HAL_DMA_Abort+0x254>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d022      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a22      	ldr	r2, [pc, #136]	; (8009ed0 <HAL_DMA_Abort+0x258>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d01d      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a21      	ldr	r2, [pc, #132]	; (8009ed4 <HAL_DMA_Abort+0x25c>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d018      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <HAL_DMA_Abort+0x260>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d013      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1e      	ldr	r2, [pc, #120]	; (8009edc <HAL_DMA_Abort+0x264>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d00e      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a1c      	ldr	r2, [pc, #112]	; (8009ee0 <HAL_DMA_Abort+0x268>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d009      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a1b      	ldr	r2, [pc, #108]	; (8009ee4 <HAL_DMA_Abort+0x26c>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d004      	beq.n	8009e86 <HAL_DMA_Abort+0x20e>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a19      	ldr	r2, [pc, #100]	; (8009ee8 <HAL_DMA_Abort+0x270>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d132      	bne.n	8009eec <HAL_DMA_Abort+0x274>
 8009e86:	2301      	movs	r3, #1
 8009e88:	e031      	b.n	8009eee <HAL_DMA_Abort+0x276>
 8009e8a:	bf00      	nop
 8009e8c:	40020010 	.word	0x40020010
 8009e90:	40020028 	.word	0x40020028
 8009e94:	40020040 	.word	0x40020040
 8009e98:	40020058 	.word	0x40020058
 8009e9c:	40020070 	.word	0x40020070
 8009ea0:	40020088 	.word	0x40020088
 8009ea4:	400200a0 	.word	0x400200a0
 8009ea8:	400200b8 	.word	0x400200b8
 8009eac:	40020410 	.word	0x40020410
 8009eb0:	40020428 	.word	0x40020428
 8009eb4:	40020440 	.word	0x40020440
 8009eb8:	40020458 	.word	0x40020458
 8009ebc:	40020470 	.word	0x40020470
 8009ec0:	40020488 	.word	0x40020488
 8009ec4:	400204a0 	.word	0x400204a0
 8009ec8:	400204b8 	.word	0x400204b8
 8009ecc:	58025408 	.word	0x58025408
 8009ed0:	5802541c 	.word	0x5802541c
 8009ed4:	58025430 	.word	0x58025430
 8009ed8:	58025444 	.word	0x58025444
 8009edc:	58025458 	.word	0x58025458
 8009ee0:	5802546c 	.word	0x5802546c
 8009ee4:	58025480 	.word	0x58025480
 8009ee8:	58025494 	.word	0x58025494
 8009eec:	2300      	movs	r3, #0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f00:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a6d      	ldr	r2, [pc, #436]	; (800a0bc <HAL_DMA_Abort+0x444>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d04a      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a6b      	ldr	r2, [pc, #428]	; (800a0c0 <HAL_DMA_Abort+0x448>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d045      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a6a      	ldr	r2, [pc, #424]	; (800a0c4 <HAL_DMA_Abort+0x44c>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d040      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a68      	ldr	r2, [pc, #416]	; (800a0c8 <HAL_DMA_Abort+0x450>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d03b      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a67      	ldr	r2, [pc, #412]	; (800a0cc <HAL_DMA_Abort+0x454>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d036      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a65      	ldr	r2, [pc, #404]	; (800a0d0 <HAL_DMA_Abort+0x458>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d031      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a64      	ldr	r2, [pc, #400]	; (800a0d4 <HAL_DMA_Abort+0x45c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d02c      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a62      	ldr	r2, [pc, #392]	; (800a0d8 <HAL_DMA_Abort+0x460>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d027      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a61      	ldr	r2, [pc, #388]	; (800a0dc <HAL_DMA_Abort+0x464>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d022      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a5f      	ldr	r2, [pc, #380]	; (800a0e0 <HAL_DMA_Abort+0x468>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d01d      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a5e      	ldr	r2, [pc, #376]	; (800a0e4 <HAL_DMA_Abort+0x46c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d018      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a5c      	ldr	r2, [pc, #368]	; (800a0e8 <HAL_DMA_Abort+0x470>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d013      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a5b      	ldr	r2, [pc, #364]	; (800a0ec <HAL_DMA_Abort+0x474>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d00e      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a59      	ldr	r2, [pc, #356]	; (800a0f0 <HAL_DMA_Abort+0x478>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d009      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a58      	ldr	r2, [pc, #352]	; (800a0f4 <HAL_DMA_Abort+0x47c>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d004      	beq.n	8009fa2 <HAL_DMA_Abort+0x32a>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a56      	ldr	r2, [pc, #344]	; (800a0f8 <HAL_DMA_Abort+0x480>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d108      	bne.n	8009fb4 <HAL_DMA_Abort+0x33c>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	681a      	ldr	r2, [r3, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0201 	bic.w	r2, r2, #1
 8009fb0:	601a      	str	r2, [r3, #0]
 8009fb2:	e007      	b.n	8009fc4 <HAL_DMA_Abort+0x34c>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f022 0201 	bic.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009fc4:	e013      	b.n	8009fee <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009fc6:	f7fd f9c5 	bl	8007354 <HAL_GetTick>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	1ad3      	subs	r3, r2, r3
 8009fd0:	2b05      	cmp	r3, #5
 8009fd2:	d90c      	bls.n	8009fee <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2220      	movs	r2, #32
 8009fd8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e12d      	b.n	800a24a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d1e5      	bne.n	8009fc6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a2f      	ldr	r2, [pc, #188]	; (800a0bc <HAL_DMA_Abort+0x444>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d04a      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4a2d      	ldr	r2, [pc, #180]	; (800a0c0 <HAL_DMA_Abort+0x448>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d045      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a2c      	ldr	r2, [pc, #176]	; (800a0c4 <HAL_DMA_Abort+0x44c>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d040      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a2a      	ldr	r2, [pc, #168]	; (800a0c8 <HAL_DMA_Abort+0x450>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d03b      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a29      	ldr	r2, [pc, #164]	; (800a0cc <HAL_DMA_Abort+0x454>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d036      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a27      	ldr	r2, [pc, #156]	; (800a0d0 <HAL_DMA_Abort+0x458>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d031      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a26      	ldr	r2, [pc, #152]	; (800a0d4 <HAL_DMA_Abort+0x45c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d02c      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a24      	ldr	r2, [pc, #144]	; (800a0d8 <HAL_DMA_Abort+0x460>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d027      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a23      	ldr	r2, [pc, #140]	; (800a0dc <HAL_DMA_Abort+0x464>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d022      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a21      	ldr	r2, [pc, #132]	; (800a0e0 <HAL_DMA_Abort+0x468>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d01d      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <HAL_DMA_Abort+0x46c>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d018      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a1e      	ldr	r2, [pc, #120]	; (800a0e8 <HAL_DMA_Abort+0x470>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d013      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a1d      	ldr	r2, [pc, #116]	; (800a0ec <HAL_DMA_Abort+0x474>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d00e      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a1b      	ldr	r2, [pc, #108]	; (800a0f0 <HAL_DMA_Abort+0x478>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d009      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a1a      	ldr	r2, [pc, #104]	; (800a0f4 <HAL_DMA_Abort+0x47c>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d004      	beq.n	800a09a <HAL_DMA_Abort+0x422>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a18      	ldr	r2, [pc, #96]	; (800a0f8 <HAL_DMA_Abort+0x480>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d101      	bne.n	800a09e <HAL_DMA_Abort+0x426>
 800a09a:	2301      	movs	r3, #1
 800a09c:	e000      	b.n	800a0a0 <HAL_DMA_Abort+0x428>
 800a09e:	2300      	movs	r3, #0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d02b      	beq.n	800a0fc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0ae:	f003 031f 	and.w	r3, r3, #31
 800a0b2:	223f      	movs	r2, #63	; 0x3f
 800a0b4:	409a      	lsls	r2, r3
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	609a      	str	r2, [r3, #8]
 800a0ba:	e02a      	b.n	800a112 <HAL_DMA_Abort+0x49a>
 800a0bc:	40020010 	.word	0x40020010
 800a0c0:	40020028 	.word	0x40020028
 800a0c4:	40020040 	.word	0x40020040
 800a0c8:	40020058 	.word	0x40020058
 800a0cc:	40020070 	.word	0x40020070
 800a0d0:	40020088 	.word	0x40020088
 800a0d4:	400200a0 	.word	0x400200a0
 800a0d8:	400200b8 	.word	0x400200b8
 800a0dc:	40020410 	.word	0x40020410
 800a0e0:	40020428 	.word	0x40020428
 800a0e4:	40020440 	.word	0x40020440
 800a0e8:	40020458 	.word	0x40020458
 800a0ec:	40020470 	.word	0x40020470
 800a0f0:	40020488 	.word	0x40020488
 800a0f4:	400204a0 	.word	0x400204a0
 800a0f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a100:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a106:	f003 031f 	and.w	r3, r3, #31
 800a10a:	2201      	movs	r2, #1
 800a10c:	409a      	lsls	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a4f      	ldr	r2, [pc, #316]	; (800a254 <HAL_DMA_Abort+0x5dc>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d072      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a4d      	ldr	r2, [pc, #308]	; (800a258 <HAL_DMA_Abort+0x5e0>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d06d      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a4c      	ldr	r2, [pc, #304]	; (800a25c <HAL_DMA_Abort+0x5e4>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d068      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a4a      	ldr	r2, [pc, #296]	; (800a260 <HAL_DMA_Abort+0x5e8>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d063      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a49      	ldr	r2, [pc, #292]	; (800a264 <HAL_DMA_Abort+0x5ec>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d05e      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a47      	ldr	r2, [pc, #284]	; (800a268 <HAL_DMA_Abort+0x5f0>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d059      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a46      	ldr	r2, [pc, #280]	; (800a26c <HAL_DMA_Abort+0x5f4>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d054      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a44      	ldr	r2, [pc, #272]	; (800a270 <HAL_DMA_Abort+0x5f8>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d04f      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a43      	ldr	r2, [pc, #268]	; (800a274 <HAL_DMA_Abort+0x5fc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d04a      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a41      	ldr	r2, [pc, #260]	; (800a278 <HAL_DMA_Abort+0x600>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d045      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a40      	ldr	r2, [pc, #256]	; (800a27c <HAL_DMA_Abort+0x604>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d040      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a3e      	ldr	r2, [pc, #248]	; (800a280 <HAL_DMA_Abort+0x608>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d03b      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a3d      	ldr	r2, [pc, #244]	; (800a284 <HAL_DMA_Abort+0x60c>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d036      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a3b      	ldr	r2, [pc, #236]	; (800a288 <HAL_DMA_Abort+0x610>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d031      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a3a      	ldr	r2, [pc, #232]	; (800a28c <HAL_DMA_Abort+0x614>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d02c      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a38      	ldr	r2, [pc, #224]	; (800a290 <HAL_DMA_Abort+0x618>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d027      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a37      	ldr	r2, [pc, #220]	; (800a294 <HAL_DMA_Abort+0x61c>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d022      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a35      	ldr	r2, [pc, #212]	; (800a298 <HAL_DMA_Abort+0x620>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d01d      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a34      	ldr	r2, [pc, #208]	; (800a29c <HAL_DMA_Abort+0x624>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d018      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a32      	ldr	r2, [pc, #200]	; (800a2a0 <HAL_DMA_Abort+0x628>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d013      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a31      	ldr	r2, [pc, #196]	; (800a2a4 <HAL_DMA_Abort+0x62c>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00e      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a2f      	ldr	r2, [pc, #188]	; (800a2a8 <HAL_DMA_Abort+0x630>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d009      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a2e      	ldr	r2, [pc, #184]	; (800a2ac <HAL_DMA_Abort+0x634>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d004      	beq.n	800a202 <HAL_DMA_Abort+0x58a>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a2c      	ldr	r2, [pc, #176]	; (800a2b0 <HAL_DMA_Abort+0x638>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d101      	bne.n	800a206 <HAL_DMA_Abort+0x58e>
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <HAL_DMA_Abort+0x590>
 800a206:	2300      	movs	r3, #0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d015      	beq.n	800a238 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a214:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00c      	beq.n	800a238 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a22c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a236:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2200      	movs	r2, #0
 800a244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3718      	adds	r7, #24
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40020010 	.word	0x40020010
 800a258:	40020028 	.word	0x40020028
 800a25c:	40020040 	.word	0x40020040
 800a260:	40020058 	.word	0x40020058
 800a264:	40020070 	.word	0x40020070
 800a268:	40020088 	.word	0x40020088
 800a26c:	400200a0 	.word	0x400200a0
 800a270:	400200b8 	.word	0x400200b8
 800a274:	40020410 	.word	0x40020410
 800a278:	40020428 	.word	0x40020428
 800a27c:	40020440 	.word	0x40020440
 800a280:	40020458 	.word	0x40020458
 800a284:	40020470 	.word	0x40020470
 800a288:	40020488 	.word	0x40020488
 800a28c:	400204a0 	.word	0x400204a0
 800a290:	400204b8 	.word	0x400204b8
 800a294:	58025408 	.word	0x58025408
 800a298:	5802541c 	.word	0x5802541c
 800a29c:	58025430 	.word	0x58025430
 800a2a0:	58025444 	.word	0x58025444
 800a2a4:	58025458 	.word	0x58025458
 800a2a8:	5802546c 	.word	0x5802546c
 800a2ac:	58025480 	.word	0x58025480
 800a2b0:	58025494 	.word	0x58025494

0800a2b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d101      	bne.n	800a2c6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e237      	b.n	800a736 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d004      	beq.n	800a2dc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2280      	movs	r2, #128	; 0x80
 800a2d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a2d8:	2301      	movs	r3, #1
 800a2da:	e22c      	b.n	800a736 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a5c      	ldr	r2, [pc, #368]	; (800a454 <HAL_DMA_Abort_IT+0x1a0>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d04a      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a5b      	ldr	r2, [pc, #364]	; (800a458 <HAL_DMA_Abort_IT+0x1a4>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d045      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a59      	ldr	r2, [pc, #356]	; (800a45c <HAL_DMA_Abort_IT+0x1a8>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d040      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a58      	ldr	r2, [pc, #352]	; (800a460 <HAL_DMA_Abort_IT+0x1ac>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d03b      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a56      	ldr	r2, [pc, #344]	; (800a464 <HAL_DMA_Abort_IT+0x1b0>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d036      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	4a55      	ldr	r2, [pc, #340]	; (800a468 <HAL_DMA_Abort_IT+0x1b4>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d031      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	4a53      	ldr	r2, [pc, #332]	; (800a46c <HAL_DMA_Abort_IT+0x1b8>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d02c      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4a52      	ldr	r2, [pc, #328]	; (800a470 <HAL_DMA_Abort_IT+0x1bc>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d027      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4a50      	ldr	r2, [pc, #320]	; (800a474 <HAL_DMA_Abort_IT+0x1c0>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d022      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a4f      	ldr	r2, [pc, #316]	; (800a478 <HAL_DMA_Abort_IT+0x1c4>)
 800a33c:	4293      	cmp	r3, r2
 800a33e:	d01d      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a4d      	ldr	r2, [pc, #308]	; (800a47c <HAL_DMA_Abort_IT+0x1c8>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d018      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a4c      	ldr	r2, [pc, #304]	; (800a480 <HAL_DMA_Abort_IT+0x1cc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d013      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a4a      	ldr	r2, [pc, #296]	; (800a484 <HAL_DMA_Abort_IT+0x1d0>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d00e      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a49      	ldr	r2, [pc, #292]	; (800a488 <HAL_DMA_Abort_IT+0x1d4>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d009      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a47      	ldr	r2, [pc, #284]	; (800a48c <HAL_DMA_Abort_IT+0x1d8>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d004      	beq.n	800a37c <HAL_DMA_Abort_IT+0xc8>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a46      	ldr	r2, [pc, #280]	; (800a490 <HAL_DMA_Abort_IT+0x1dc>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d101      	bne.n	800a380 <HAL_DMA_Abort_IT+0xcc>
 800a37c:	2301      	movs	r3, #1
 800a37e:	e000      	b.n	800a382 <HAL_DMA_Abort_IT+0xce>
 800a380:	2300      	movs	r3, #0
 800a382:	2b00      	cmp	r3, #0
 800a384:	f000 8086 	beq.w	800a494 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2204      	movs	r2, #4
 800a38c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a2f      	ldr	r2, [pc, #188]	; (800a454 <HAL_DMA_Abort_IT+0x1a0>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d04a      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a2e      	ldr	r2, [pc, #184]	; (800a458 <HAL_DMA_Abort_IT+0x1a4>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d045      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a2c      	ldr	r2, [pc, #176]	; (800a45c <HAL_DMA_Abort_IT+0x1a8>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d040      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a2b      	ldr	r2, [pc, #172]	; (800a460 <HAL_DMA_Abort_IT+0x1ac>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d03b      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a29      	ldr	r2, [pc, #164]	; (800a464 <HAL_DMA_Abort_IT+0x1b0>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d036      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a28      	ldr	r2, [pc, #160]	; (800a468 <HAL_DMA_Abort_IT+0x1b4>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d031      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a26      	ldr	r2, [pc, #152]	; (800a46c <HAL_DMA_Abort_IT+0x1b8>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d02c      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a25      	ldr	r2, [pc, #148]	; (800a470 <HAL_DMA_Abort_IT+0x1bc>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d027      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a23      	ldr	r2, [pc, #140]	; (800a474 <HAL_DMA_Abort_IT+0x1c0>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d022      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4a22      	ldr	r2, [pc, #136]	; (800a478 <HAL_DMA_Abort_IT+0x1c4>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d01d      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a20      	ldr	r2, [pc, #128]	; (800a47c <HAL_DMA_Abort_IT+0x1c8>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d018      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a1f      	ldr	r2, [pc, #124]	; (800a480 <HAL_DMA_Abort_IT+0x1cc>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d013      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <HAL_DMA_Abort_IT+0x1d0>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d00e      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	4a1c      	ldr	r2, [pc, #112]	; (800a488 <HAL_DMA_Abort_IT+0x1d4>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d009      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <HAL_DMA_Abort_IT+0x1d8>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d004      	beq.n	800a430 <HAL_DMA_Abort_IT+0x17c>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	4a19      	ldr	r2, [pc, #100]	; (800a490 <HAL_DMA_Abort_IT+0x1dc>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d108      	bne.n	800a442 <HAL_DMA_Abort_IT+0x18e>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f022 0201 	bic.w	r2, r2, #1
 800a43e:	601a      	str	r2, [r3, #0]
 800a440:	e178      	b.n	800a734 <HAL_DMA_Abort_IT+0x480>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 0201 	bic.w	r2, r2, #1
 800a450:	601a      	str	r2, [r3, #0]
 800a452:	e16f      	b.n	800a734 <HAL_DMA_Abort_IT+0x480>
 800a454:	40020010 	.word	0x40020010
 800a458:	40020028 	.word	0x40020028
 800a45c:	40020040 	.word	0x40020040
 800a460:	40020058 	.word	0x40020058
 800a464:	40020070 	.word	0x40020070
 800a468:	40020088 	.word	0x40020088
 800a46c:	400200a0 	.word	0x400200a0
 800a470:	400200b8 	.word	0x400200b8
 800a474:	40020410 	.word	0x40020410
 800a478:	40020428 	.word	0x40020428
 800a47c:	40020440 	.word	0x40020440
 800a480:	40020458 	.word	0x40020458
 800a484:	40020470 	.word	0x40020470
 800a488:	40020488 	.word	0x40020488
 800a48c:	400204a0 	.word	0x400204a0
 800a490:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f022 020e 	bic.w	r2, r2, #14
 800a4a2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a6c      	ldr	r2, [pc, #432]	; (800a65c <HAL_DMA_Abort_IT+0x3a8>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d04a      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a6b      	ldr	r2, [pc, #428]	; (800a660 <HAL_DMA_Abort_IT+0x3ac>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d045      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a69      	ldr	r2, [pc, #420]	; (800a664 <HAL_DMA_Abort_IT+0x3b0>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d040      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a68      	ldr	r2, [pc, #416]	; (800a668 <HAL_DMA_Abort_IT+0x3b4>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d03b      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a66      	ldr	r2, [pc, #408]	; (800a66c <HAL_DMA_Abort_IT+0x3b8>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d036      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a65      	ldr	r2, [pc, #404]	; (800a670 <HAL_DMA_Abort_IT+0x3bc>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d031      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a63      	ldr	r2, [pc, #396]	; (800a674 <HAL_DMA_Abort_IT+0x3c0>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d02c      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a62      	ldr	r2, [pc, #392]	; (800a678 <HAL_DMA_Abort_IT+0x3c4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d027      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a60      	ldr	r2, [pc, #384]	; (800a67c <HAL_DMA_Abort_IT+0x3c8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d022      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a5f      	ldr	r2, [pc, #380]	; (800a680 <HAL_DMA_Abort_IT+0x3cc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d01d      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a5d      	ldr	r2, [pc, #372]	; (800a684 <HAL_DMA_Abort_IT+0x3d0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d018      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a5c      	ldr	r2, [pc, #368]	; (800a688 <HAL_DMA_Abort_IT+0x3d4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d013      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a5a      	ldr	r2, [pc, #360]	; (800a68c <HAL_DMA_Abort_IT+0x3d8>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d00e      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a59      	ldr	r2, [pc, #356]	; (800a690 <HAL_DMA_Abort_IT+0x3dc>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d009      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a57      	ldr	r2, [pc, #348]	; (800a694 <HAL_DMA_Abort_IT+0x3e0>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d004      	beq.n	800a544 <HAL_DMA_Abort_IT+0x290>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a56      	ldr	r2, [pc, #344]	; (800a698 <HAL_DMA_Abort_IT+0x3e4>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d108      	bne.n	800a556 <HAL_DMA_Abort_IT+0x2a2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f022 0201 	bic.w	r2, r2, #1
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	e007      	b.n	800a566 <HAL_DMA_Abort_IT+0x2b2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681a      	ldr	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f022 0201 	bic.w	r2, r2, #1
 800a564:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a3c      	ldr	r2, [pc, #240]	; (800a65c <HAL_DMA_Abort_IT+0x3a8>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d072      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a3a      	ldr	r2, [pc, #232]	; (800a660 <HAL_DMA_Abort_IT+0x3ac>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d06d      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a39      	ldr	r2, [pc, #228]	; (800a664 <HAL_DMA_Abort_IT+0x3b0>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d068      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a37      	ldr	r2, [pc, #220]	; (800a668 <HAL_DMA_Abort_IT+0x3b4>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d063      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a36      	ldr	r2, [pc, #216]	; (800a66c <HAL_DMA_Abort_IT+0x3b8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d05e      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	4a34      	ldr	r2, [pc, #208]	; (800a670 <HAL_DMA_Abort_IT+0x3bc>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d059      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a33      	ldr	r2, [pc, #204]	; (800a674 <HAL_DMA_Abort_IT+0x3c0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d054      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a31      	ldr	r2, [pc, #196]	; (800a678 <HAL_DMA_Abort_IT+0x3c4>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d04f      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a30      	ldr	r2, [pc, #192]	; (800a67c <HAL_DMA_Abort_IT+0x3c8>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d04a      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a2e      	ldr	r2, [pc, #184]	; (800a680 <HAL_DMA_Abort_IT+0x3cc>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d045      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a2d      	ldr	r2, [pc, #180]	; (800a684 <HAL_DMA_Abort_IT+0x3d0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d040      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a2b      	ldr	r2, [pc, #172]	; (800a688 <HAL_DMA_Abort_IT+0x3d4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d03b      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a2a      	ldr	r2, [pc, #168]	; (800a68c <HAL_DMA_Abort_IT+0x3d8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d036      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a28      	ldr	r2, [pc, #160]	; (800a690 <HAL_DMA_Abort_IT+0x3dc>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d031      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a27      	ldr	r2, [pc, #156]	; (800a694 <HAL_DMA_Abort_IT+0x3e0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d02c      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a25      	ldr	r2, [pc, #148]	; (800a698 <HAL_DMA_Abort_IT+0x3e4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d027      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a24      	ldr	r2, [pc, #144]	; (800a69c <HAL_DMA_Abort_IT+0x3e8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d022      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a22      	ldr	r2, [pc, #136]	; (800a6a0 <HAL_DMA_Abort_IT+0x3ec>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d01d      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a21      	ldr	r2, [pc, #132]	; (800a6a4 <HAL_DMA_Abort_IT+0x3f0>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d018      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a1f      	ldr	r2, [pc, #124]	; (800a6a8 <HAL_DMA_Abort_IT+0x3f4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d013      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a1e      	ldr	r2, [pc, #120]	; (800a6ac <HAL_DMA_Abort_IT+0x3f8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d00e      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a1c      	ldr	r2, [pc, #112]	; (800a6b0 <HAL_DMA_Abort_IT+0x3fc>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d009      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a1b      	ldr	r2, [pc, #108]	; (800a6b4 <HAL_DMA_Abort_IT+0x400>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d004      	beq.n	800a656 <HAL_DMA_Abort_IT+0x3a2>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4a19      	ldr	r2, [pc, #100]	; (800a6b8 <HAL_DMA_Abort_IT+0x404>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d132      	bne.n	800a6bc <HAL_DMA_Abort_IT+0x408>
 800a656:	2301      	movs	r3, #1
 800a658:	e031      	b.n	800a6be <HAL_DMA_Abort_IT+0x40a>
 800a65a:	bf00      	nop
 800a65c:	40020010 	.word	0x40020010
 800a660:	40020028 	.word	0x40020028
 800a664:	40020040 	.word	0x40020040
 800a668:	40020058 	.word	0x40020058
 800a66c:	40020070 	.word	0x40020070
 800a670:	40020088 	.word	0x40020088
 800a674:	400200a0 	.word	0x400200a0
 800a678:	400200b8 	.word	0x400200b8
 800a67c:	40020410 	.word	0x40020410
 800a680:	40020428 	.word	0x40020428
 800a684:	40020440 	.word	0x40020440
 800a688:	40020458 	.word	0x40020458
 800a68c:	40020470 	.word	0x40020470
 800a690:	40020488 	.word	0x40020488
 800a694:	400204a0 	.word	0x400204a0
 800a698:	400204b8 	.word	0x400204b8
 800a69c:	58025408 	.word	0x58025408
 800a6a0:	5802541c 	.word	0x5802541c
 800a6a4:	58025430 	.word	0x58025430
 800a6a8:	58025444 	.word	0x58025444
 800a6ac:	58025458 	.word	0x58025458
 800a6b0:	5802546c 	.word	0x5802546c
 800a6b4:	58025480 	.word	0x58025480
 800a6b8:	58025494 	.word	0x58025494
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d028      	beq.n	800a714 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6dc:	f003 031f 	and.w	r3, r3, #31
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	409a      	lsls	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6ec:	687a      	ldr	r2, [r7, #4]
 800a6ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a6f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00c      	beq.n	800a714 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a708:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70e:	687a      	ldr	r2, [r7, #4]
 800a710:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a712:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a734:	2300      	movs	r3, #0
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop

0800a740 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b08a      	sub	sp, #40	; 0x28
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a74c:	4b67      	ldr	r3, [pc, #412]	; (800a8ec <HAL_DMA_IRQHandler+0x1ac>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a67      	ldr	r2, [pc, #412]	; (800a8f0 <HAL_DMA_IRQHandler+0x1b0>)
 800a752:	fba2 2303 	umull	r2, r3, r2, r3
 800a756:	0a9b      	lsrs	r3, r3, #10
 800a758:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a75e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a764:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a76c:	69fb      	ldr	r3, [r7, #28]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a5f      	ldr	r2, [pc, #380]	; (800a8f4 <HAL_DMA_IRQHandler+0x1b4>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d04a      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a5d      	ldr	r2, [pc, #372]	; (800a8f8 <HAL_DMA_IRQHandler+0x1b8>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d045      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a5c      	ldr	r2, [pc, #368]	; (800a8fc <HAL_DMA_IRQHandler+0x1bc>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d040      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a5a      	ldr	r2, [pc, #360]	; (800a900 <HAL_DMA_IRQHandler+0x1c0>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d03b      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a59      	ldr	r2, [pc, #356]	; (800a904 <HAL_DMA_IRQHandler+0x1c4>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d036      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a57      	ldr	r2, [pc, #348]	; (800a908 <HAL_DMA_IRQHandler+0x1c8>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d031      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a56      	ldr	r2, [pc, #344]	; (800a90c <HAL_DMA_IRQHandler+0x1cc>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d02c      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a54      	ldr	r2, [pc, #336]	; (800a910 <HAL_DMA_IRQHandler+0x1d0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d027      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a53      	ldr	r2, [pc, #332]	; (800a914 <HAL_DMA_IRQHandler+0x1d4>)
 800a7c8:	4293      	cmp	r3, r2
 800a7ca:	d022      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a51      	ldr	r2, [pc, #324]	; (800a918 <HAL_DMA_IRQHandler+0x1d8>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d01d      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a50      	ldr	r2, [pc, #320]	; (800a91c <HAL_DMA_IRQHandler+0x1dc>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d018      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a4e      	ldr	r2, [pc, #312]	; (800a920 <HAL_DMA_IRQHandler+0x1e0>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d013      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a4d      	ldr	r2, [pc, #308]	; (800a924 <HAL_DMA_IRQHandler+0x1e4>)
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	d00e      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	4a4b      	ldr	r2, [pc, #300]	; (800a928 <HAL_DMA_IRQHandler+0x1e8>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d009      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a4a      	ldr	r2, [pc, #296]	; (800a92c <HAL_DMA_IRQHandler+0x1ec>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d004      	beq.n	800a812 <HAL_DMA_IRQHandler+0xd2>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	4a48      	ldr	r2, [pc, #288]	; (800a930 <HAL_DMA_IRQHandler+0x1f0>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d101      	bne.n	800a816 <HAL_DMA_IRQHandler+0xd6>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <HAL_DMA_IRQHandler+0xd8>
 800a816:	2300      	movs	r3, #0
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f000 842b 	beq.w	800b074 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a822:	f003 031f 	and.w	r3, r3, #31
 800a826:	2208      	movs	r2, #8
 800a828:	409a      	lsls	r2, r3
 800a82a:	69bb      	ldr	r3, [r7, #24]
 800a82c:	4013      	ands	r3, r2
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 80a2 	beq.w	800a978 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a2e      	ldr	r2, [pc, #184]	; (800a8f4 <HAL_DMA_IRQHandler+0x1b4>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d04a      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a2d      	ldr	r2, [pc, #180]	; (800a8f8 <HAL_DMA_IRQHandler+0x1b8>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d045      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a2b      	ldr	r2, [pc, #172]	; (800a8fc <HAL_DMA_IRQHandler+0x1bc>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d040      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a2a      	ldr	r2, [pc, #168]	; (800a900 <HAL_DMA_IRQHandler+0x1c0>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d03b      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a28      	ldr	r2, [pc, #160]	; (800a904 <HAL_DMA_IRQHandler+0x1c4>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d036      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a27      	ldr	r2, [pc, #156]	; (800a908 <HAL_DMA_IRQHandler+0x1c8>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d031      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	4a25      	ldr	r2, [pc, #148]	; (800a90c <HAL_DMA_IRQHandler+0x1cc>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d02c      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4a24      	ldr	r2, [pc, #144]	; (800a910 <HAL_DMA_IRQHandler+0x1d0>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d027      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a22      	ldr	r2, [pc, #136]	; (800a914 <HAL_DMA_IRQHandler+0x1d4>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d022      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a21      	ldr	r2, [pc, #132]	; (800a918 <HAL_DMA_IRQHandler+0x1d8>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d01d      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a1f      	ldr	r2, [pc, #124]	; (800a91c <HAL_DMA_IRQHandler+0x1dc>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d018      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a1e      	ldr	r2, [pc, #120]	; (800a920 <HAL_DMA_IRQHandler+0x1e0>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d013      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a1c      	ldr	r2, [pc, #112]	; (800a924 <HAL_DMA_IRQHandler+0x1e4>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d00e      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <HAL_DMA_IRQHandler+0x1e8>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d009      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a19      	ldr	r2, [pc, #100]	; (800a92c <HAL_DMA_IRQHandler+0x1ec>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d004      	beq.n	800a8d4 <HAL_DMA_IRQHandler+0x194>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a18      	ldr	r2, [pc, #96]	; (800a930 <HAL_DMA_IRQHandler+0x1f0>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d12f      	bne.n	800a934 <HAL_DMA_IRQHandler+0x1f4>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 0304 	and.w	r3, r3, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bf14      	ite	ne
 800a8e2:	2301      	movne	r3, #1
 800a8e4:	2300      	moveq	r3, #0
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	e02e      	b.n	800a948 <HAL_DMA_IRQHandler+0x208>
 800a8ea:	bf00      	nop
 800a8ec:	24000044 	.word	0x24000044
 800a8f0:	1b4e81b5 	.word	0x1b4e81b5
 800a8f4:	40020010 	.word	0x40020010
 800a8f8:	40020028 	.word	0x40020028
 800a8fc:	40020040 	.word	0x40020040
 800a900:	40020058 	.word	0x40020058
 800a904:	40020070 	.word	0x40020070
 800a908:	40020088 	.word	0x40020088
 800a90c:	400200a0 	.word	0x400200a0
 800a910:	400200b8 	.word	0x400200b8
 800a914:	40020410 	.word	0x40020410
 800a918:	40020428 	.word	0x40020428
 800a91c:	40020440 	.word	0x40020440
 800a920:	40020458 	.word	0x40020458
 800a924:	40020470 	.word	0x40020470
 800a928:	40020488 	.word	0x40020488
 800a92c:	400204a0 	.word	0x400204a0
 800a930:	400204b8 	.word	0x400204b8
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0308 	and.w	r3, r3, #8
 800a93e:	2b00      	cmp	r3, #0
 800a940:	bf14      	ite	ne
 800a942:	2301      	movne	r3, #1
 800a944:	2300      	moveq	r3, #0
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d015      	beq.n	800a978 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 0204 	bic.w	r2, r2, #4
 800a95a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a960:	f003 031f 	and.w	r3, r3, #31
 800a964:	2208      	movs	r2, #8
 800a966:	409a      	lsls	r2, r3
 800a968:	6a3b      	ldr	r3, [r7, #32]
 800a96a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a970:	f043 0201 	orr.w	r2, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a97c:	f003 031f 	and.w	r3, r3, #31
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	fa22 f303 	lsr.w	r3, r2, r3
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d06e      	beq.n	800aa6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	4a69      	ldr	r2, [pc, #420]	; (800ab38 <HAL_DMA_IRQHandler+0x3f8>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d04a      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a67      	ldr	r2, [pc, #412]	; (800ab3c <HAL_DMA_IRQHandler+0x3fc>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d045      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a66      	ldr	r2, [pc, #408]	; (800ab40 <HAL_DMA_IRQHandler+0x400>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d040      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a64      	ldr	r2, [pc, #400]	; (800ab44 <HAL_DMA_IRQHandler+0x404>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d03b      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a63      	ldr	r2, [pc, #396]	; (800ab48 <HAL_DMA_IRQHandler+0x408>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d036      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a61      	ldr	r2, [pc, #388]	; (800ab4c <HAL_DMA_IRQHandler+0x40c>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d031      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a60      	ldr	r2, [pc, #384]	; (800ab50 <HAL_DMA_IRQHandler+0x410>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d02c      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a5e      	ldr	r2, [pc, #376]	; (800ab54 <HAL_DMA_IRQHandler+0x414>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d027      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a5d      	ldr	r2, [pc, #372]	; (800ab58 <HAL_DMA_IRQHandler+0x418>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d022      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a5b      	ldr	r2, [pc, #364]	; (800ab5c <HAL_DMA_IRQHandler+0x41c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d01d      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a5a      	ldr	r2, [pc, #360]	; (800ab60 <HAL_DMA_IRQHandler+0x420>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d018      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a58      	ldr	r2, [pc, #352]	; (800ab64 <HAL_DMA_IRQHandler+0x424>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d013      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a57      	ldr	r2, [pc, #348]	; (800ab68 <HAL_DMA_IRQHandler+0x428>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d00e      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a55      	ldr	r2, [pc, #340]	; (800ab6c <HAL_DMA_IRQHandler+0x42c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d009      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a54      	ldr	r2, [pc, #336]	; (800ab70 <HAL_DMA_IRQHandler+0x430>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d004      	beq.n	800aa2e <HAL_DMA_IRQHandler+0x2ee>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a52      	ldr	r2, [pc, #328]	; (800ab74 <HAL_DMA_IRQHandler+0x434>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d10a      	bne.n	800aa44 <HAL_DMA_IRQHandler+0x304>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bf14      	ite	ne
 800aa3c:	2301      	movne	r3, #1
 800aa3e:	2300      	moveq	r3, #0
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	e003      	b.n	800aa4c <HAL_DMA_IRQHandler+0x30c>
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00d      	beq.n	800aa6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	2201      	movs	r2, #1
 800aa5a:	409a      	lsls	r2, r3
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa64:	f043 0202 	orr.w	r2, r3, #2
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa70:	f003 031f 	and.w	r3, r3, #31
 800aa74:	2204      	movs	r2, #4
 800aa76:	409a      	lsls	r2, r3
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	4013      	ands	r3, r2
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 808f 	beq.w	800aba0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a2c      	ldr	r2, [pc, #176]	; (800ab38 <HAL_DMA_IRQHandler+0x3f8>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d04a      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a2a      	ldr	r2, [pc, #168]	; (800ab3c <HAL_DMA_IRQHandler+0x3fc>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d045      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a29      	ldr	r2, [pc, #164]	; (800ab40 <HAL_DMA_IRQHandler+0x400>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d040      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <HAL_DMA_IRQHandler+0x404>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d03b      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a26      	ldr	r2, [pc, #152]	; (800ab48 <HAL_DMA_IRQHandler+0x408>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d036      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a24      	ldr	r2, [pc, #144]	; (800ab4c <HAL_DMA_IRQHandler+0x40c>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d031      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a23      	ldr	r2, [pc, #140]	; (800ab50 <HAL_DMA_IRQHandler+0x410>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d02c      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a21      	ldr	r2, [pc, #132]	; (800ab54 <HAL_DMA_IRQHandler+0x414>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d027      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a20      	ldr	r2, [pc, #128]	; (800ab58 <HAL_DMA_IRQHandler+0x418>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d022      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1e      	ldr	r2, [pc, #120]	; (800ab5c <HAL_DMA_IRQHandler+0x41c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d01d      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4a1d      	ldr	r2, [pc, #116]	; (800ab60 <HAL_DMA_IRQHandler+0x420>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d018      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4a1b      	ldr	r2, [pc, #108]	; (800ab64 <HAL_DMA_IRQHandler+0x424>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d013      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a1a      	ldr	r2, [pc, #104]	; (800ab68 <HAL_DMA_IRQHandler+0x428>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d00e      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a18      	ldr	r2, [pc, #96]	; (800ab6c <HAL_DMA_IRQHandler+0x42c>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d009      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a17      	ldr	r2, [pc, #92]	; (800ab70 <HAL_DMA_IRQHandler+0x430>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d004      	beq.n	800ab22 <HAL_DMA_IRQHandler+0x3e2>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a15      	ldr	r2, [pc, #84]	; (800ab74 <HAL_DMA_IRQHandler+0x434>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d12a      	bne.n	800ab78 <HAL_DMA_IRQHandler+0x438>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f003 0302 	and.w	r3, r3, #2
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	bf14      	ite	ne
 800ab30:	2301      	movne	r3, #1
 800ab32:	2300      	moveq	r3, #0
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	e023      	b.n	800ab80 <HAL_DMA_IRQHandler+0x440>
 800ab38:	40020010 	.word	0x40020010
 800ab3c:	40020028 	.word	0x40020028
 800ab40:	40020040 	.word	0x40020040
 800ab44:	40020058 	.word	0x40020058
 800ab48:	40020070 	.word	0x40020070
 800ab4c:	40020088 	.word	0x40020088
 800ab50:	400200a0 	.word	0x400200a0
 800ab54:	400200b8 	.word	0x400200b8
 800ab58:	40020410 	.word	0x40020410
 800ab5c:	40020428 	.word	0x40020428
 800ab60:	40020440 	.word	0x40020440
 800ab64:	40020458 	.word	0x40020458
 800ab68:	40020470 	.word	0x40020470
 800ab6c:	40020488 	.word	0x40020488
 800ab70:	400204a0 	.word	0x400204a0
 800ab74:	400204b8 	.word	0x400204b8
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00d      	beq.n	800aba0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab88:	f003 031f 	and.w	r3, r3, #31
 800ab8c:	2204      	movs	r2, #4
 800ab8e:	409a      	lsls	r2, r3
 800ab90:	6a3b      	ldr	r3, [r7, #32]
 800ab92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab98:	f043 0204 	orr.w	r2, r3, #4
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	2210      	movs	r2, #16
 800abaa:	409a      	lsls	r2, r3
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	4013      	ands	r3, r2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f000 80a6 	beq.w	800ad02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a85      	ldr	r2, [pc, #532]	; (800add0 <HAL_DMA_IRQHandler+0x690>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d04a      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a83      	ldr	r2, [pc, #524]	; (800add4 <HAL_DMA_IRQHandler+0x694>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d045      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a82      	ldr	r2, [pc, #520]	; (800add8 <HAL_DMA_IRQHandler+0x698>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d040      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a80      	ldr	r2, [pc, #512]	; (800addc <HAL_DMA_IRQHandler+0x69c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d03b      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a7f      	ldr	r2, [pc, #508]	; (800ade0 <HAL_DMA_IRQHandler+0x6a0>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d036      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a7d      	ldr	r2, [pc, #500]	; (800ade4 <HAL_DMA_IRQHandler+0x6a4>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d031      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a7c      	ldr	r2, [pc, #496]	; (800ade8 <HAL_DMA_IRQHandler+0x6a8>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d02c      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4a7a      	ldr	r2, [pc, #488]	; (800adec <HAL_DMA_IRQHandler+0x6ac>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d027      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4a79      	ldr	r2, [pc, #484]	; (800adf0 <HAL_DMA_IRQHandler+0x6b0>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	d022      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	4a77      	ldr	r2, [pc, #476]	; (800adf4 <HAL_DMA_IRQHandler+0x6b4>)
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d01d      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	4a76      	ldr	r2, [pc, #472]	; (800adf8 <HAL_DMA_IRQHandler+0x6b8>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d018      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4a74      	ldr	r2, [pc, #464]	; (800adfc <HAL_DMA_IRQHandler+0x6bc>)
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	d013      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a73      	ldr	r2, [pc, #460]	; (800ae00 <HAL_DMA_IRQHandler+0x6c0>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d00e      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	4a71      	ldr	r2, [pc, #452]	; (800ae04 <HAL_DMA_IRQHandler+0x6c4>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d009      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	4a70      	ldr	r2, [pc, #448]	; (800ae08 <HAL_DMA_IRQHandler+0x6c8>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d004      	beq.n	800ac56 <HAL_DMA_IRQHandler+0x516>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a6e      	ldr	r2, [pc, #440]	; (800ae0c <HAL_DMA_IRQHandler+0x6cc>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d10a      	bne.n	800ac6c <HAL_DMA_IRQHandler+0x52c>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	bf14      	ite	ne
 800ac64:	2301      	movne	r3, #1
 800ac66:	2300      	moveq	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	e009      	b.n	800ac80 <HAL_DMA_IRQHandler+0x540>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0304 	and.w	r3, r3, #4
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	bf14      	ite	ne
 800ac7a:	2301      	movne	r3, #1
 800ac7c:	2300      	moveq	r3, #0
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d03e      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac88:	f003 031f 	and.w	r3, r3, #31
 800ac8c:	2210      	movs	r2, #16
 800ac8e:	409a      	lsls	r2, r3
 800ac90:	6a3b      	ldr	r3, [r7, #32]
 800ac92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d018      	beq.n	800acd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d108      	bne.n	800acc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d024      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	4798      	blx	r3
 800acc0:	e01f      	b.n	800ad02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d01b      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
 800acd2:	e016      	b.n	800ad02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d107      	bne.n	800acf2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f022 0208 	bic.w	r2, r2, #8
 800acf0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad06:	f003 031f 	and.w	r3, r3, #31
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	409a      	lsls	r2, r3
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	4013      	ands	r3, r2
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 8110 	beq.w	800af38 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a2c      	ldr	r2, [pc, #176]	; (800add0 <HAL_DMA_IRQHandler+0x690>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d04a      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a2b      	ldr	r2, [pc, #172]	; (800add4 <HAL_DMA_IRQHandler+0x694>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d045      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a29      	ldr	r2, [pc, #164]	; (800add8 <HAL_DMA_IRQHandler+0x698>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d040      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a28      	ldr	r2, [pc, #160]	; (800addc <HAL_DMA_IRQHandler+0x69c>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d03b      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a26      	ldr	r2, [pc, #152]	; (800ade0 <HAL_DMA_IRQHandler+0x6a0>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d036      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a25      	ldr	r2, [pc, #148]	; (800ade4 <HAL_DMA_IRQHandler+0x6a4>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d031      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	4a23      	ldr	r2, [pc, #140]	; (800ade8 <HAL_DMA_IRQHandler+0x6a8>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d02c      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a22      	ldr	r2, [pc, #136]	; (800adec <HAL_DMA_IRQHandler+0x6ac>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d027      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a20      	ldr	r2, [pc, #128]	; (800adf0 <HAL_DMA_IRQHandler+0x6b0>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d022      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a1f      	ldr	r2, [pc, #124]	; (800adf4 <HAL_DMA_IRQHandler+0x6b4>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d01d      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	4a1d      	ldr	r2, [pc, #116]	; (800adf8 <HAL_DMA_IRQHandler+0x6b8>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d018      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4a1c      	ldr	r2, [pc, #112]	; (800adfc <HAL_DMA_IRQHandler+0x6bc>)
 800ad8c:	4293      	cmp	r3, r2
 800ad8e:	d013      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a1a      	ldr	r2, [pc, #104]	; (800ae00 <HAL_DMA_IRQHandler+0x6c0>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00e      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a19      	ldr	r2, [pc, #100]	; (800ae04 <HAL_DMA_IRQHandler+0x6c4>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d009      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a17      	ldr	r2, [pc, #92]	; (800ae08 <HAL_DMA_IRQHandler+0x6c8>)
 800adaa:	4293      	cmp	r3, r2
 800adac:	d004      	beq.n	800adb8 <HAL_DMA_IRQHandler+0x678>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	4a16      	ldr	r2, [pc, #88]	; (800ae0c <HAL_DMA_IRQHandler+0x6cc>)
 800adb4:	4293      	cmp	r3, r2
 800adb6:	d12b      	bne.n	800ae10 <HAL_DMA_IRQHandler+0x6d0>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0310 	and.w	r3, r3, #16
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bf14      	ite	ne
 800adc6:	2301      	movne	r3, #1
 800adc8:	2300      	moveq	r3, #0
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	e02a      	b.n	800ae24 <HAL_DMA_IRQHandler+0x6e4>
 800adce:	bf00      	nop
 800add0:	40020010 	.word	0x40020010
 800add4:	40020028 	.word	0x40020028
 800add8:	40020040 	.word	0x40020040
 800addc:	40020058 	.word	0x40020058
 800ade0:	40020070 	.word	0x40020070
 800ade4:	40020088 	.word	0x40020088
 800ade8:	400200a0 	.word	0x400200a0
 800adec:	400200b8 	.word	0x400200b8
 800adf0:	40020410 	.word	0x40020410
 800adf4:	40020428 	.word	0x40020428
 800adf8:	40020440 	.word	0x40020440
 800adfc:	40020458 	.word	0x40020458
 800ae00:	40020470 	.word	0x40020470
 800ae04:	40020488 	.word	0x40020488
 800ae08:	400204a0 	.word	0x400204a0
 800ae0c:	400204b8 	.word	0x400204b8
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f003 0302 	and.w	r3, r3, #2
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	bf14      	ite	ne
 800ae1e:	2301      	movne	r3, #1
 800ae20:	2300      	moveq	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8087 	beq.w	800af38 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae2e:	f003 031f 	and.w	r3, r3, #31
 800ae32:	2220      	movs	r2, #32
 800ae34:	409a      	lsls	r2, r3
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae40:	b2db      	uxtb	r3, r3
 800ae42:	2b04      	cmp	r3, #4
 800ae44:	d139      	bne.n	800aeba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f022 0216 	bic.w	r2, r2, #22
 800ae54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	695a      	ldr	r2, [r3, #20]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d103      	bne.n	800ae76 <HAL_DMA_IRQHandler+0x736>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	681a      	ldr	r2, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f022 0208 	bic.w	r2, r2, #8
 800ae84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8a:	f003 031f 	and.w	r3, r3, #31
 800ae8e:	223f      	movs	r2, #63	; 0x3f
 800ae90:	409a      	lsls	r2, r3
 800ae92:	6a3b      	ldr	r3, [r7, #32]
 800ae94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2201      	movs	r2, #1
 800ae9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	f000 834a 	beq.w	800b544 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	4798      	blx	r3
          }
          return;
 800aeb8:	e344      	b.n	800b544 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d018      	beq.n	800aefa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d108      	bne.n	800aee8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d02c      	beq.n	800af38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
 800aee6:	e027      	b.n	800af38 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d023      	beq.n	800af38 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	4798      	blx	r3
 800aef8:	e01e      	b.n	800af38 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10f      	bne.n	800af28 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f022 0210 	bic.w	r2, r2, #16
 800af16:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d003      	beq.n	800af38 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8306 	beq.w	800b54e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	f000 8088 	beq.w	800b060 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2204      	movs	r2, #4
 800af54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4a7a      	ldr	r2, [pc, #488]	; (800b148 <HAL_DMA_IRQHandler+0xa08>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d04a      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a79      	ldr	r2, [pc, #484]	; (800b14c <HAL_DMA_IRQHandler+0xa0c>)
 800af68:	4293      	cmp	r3, r2
 800af6a:	d045      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a77      	ldr	r2, [pc, #476]	; (800b150 <HAL_DMA_IRQHandler+0xa10>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d040      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	4a76      	ldr	r2, [pc, #472]	; (800b154 <HAL_DMA_IRQHandler+0xa14>)
 800af7c:	4293      	cmp	r3, r2
 800af7e:	d03b      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a74      	ldr	r2, [pc, #464]	; (800b158 <HAL_DMA_IRQHandler+0xa18>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d036      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a73      	ldr	r2, [pc, #460]	; (800b15c <HAL_DMA_IRQHandler+0xa1c>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d031      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a71      	ldr	r2, [pc, #452]	; (800b160 <HAL_DMA_IRQHandler+0xa20>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d02c      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a70      	ldr	r2, [pc, #448]	; (800b164 <HAL_DMA_IRQHandler+0xa24>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d027      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4a6e      	ldr	r2, [pc, #440]	; (800b168 <HAL_DMA_IRQHandler+0xa28>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d022      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a6d      	ldr	r2, [pc, #436]	; (800b16c <HAL_DMA_IRQHandler+0xa2c>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d01d      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a6b      	ldr	r2, [pc, #428]	; (800b170 <HAL_DMA_IRQHandler+0xa30>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d018      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a6a      	ldr	r2, [pc, #424]	; (800b174 <HAL_DMA_IRQHandler+0xa34>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d013      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a68      	ldr	r2, [pc, #416]	; (800b178 <HAL_DMA_IRQHandler+0xa38>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d00e      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	4a67      	ldr	r2, [pc, #412]	; (800b17c <HAL_DMA_IRQHandler+0xa3c>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d009      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	4a65      	ldr	r2, [pc, #404]	; (800b180 <HAL_DMA_IRQHandler+0xa40>)
 800afea:	4293      	cmp	r3, r2
 800afec:	d004      	beq.n	800aff8 <HAL_DMA_IRQHandler+0x8b8>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4a64      	ldr	r2, [pc, #400]	; (800b184 <HAL_DMA_IRQHandler+0xa44>)
 800aff4:	4293      	cmp	r3, r2
 800aff6:	d108      	bne.n	800b00a <HAL_DMA_IRQHandler+0x8ca>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	681a      	ldr	r2, [r3, #0]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0201 	bic.w	r2, r2, #1
 800b006:	601a      	str	r2, [r3, #0]
 800b008:	e007      	b.n	800b01a <HAL_DMA_IRQHandler+0x8da>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681a      	ldr	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 0201 	bic.w	r2, r2, #1
 800b018:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	3301      	adds	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b022:	429a      	cmp	r2, r3
 800b024:	d307      	bcc.n	800b036 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0301 	and.w	r3, r3, #1
 800b030:	2b00      	cmp	r3, #0
 800b032:	d1f2      	bne.n	800b01a <HAL_DMA_IRQHandler+0x8da>
 800b034:	e000      	b.n	800b038 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b036:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d004      	beq.n	800b050 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2203      	movs	r2, #3
 800b04a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b04e:	e003      	b.n	800b058 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 8272 	beq.w	800b54e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	4798      	blx	r3
 800b072:	e26c      	b.n	800b54e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a43      	ldr	r2, [pc, #268]	; (800b188 <HAL_DMA_IRQHandler+0xa48>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d022      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a42      	ldr	r2, [pc, #264]	; (800b18c <HAL_DMA_IRQHandler+0xa4c>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d01d      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a40      	ldr	r2, [pc, #256]	; (800b190 <HAL_DMA_IRQHandler+0xa50>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d018      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a3f      	ldr	r2, [pc, #252]	; (800b194 <HAL_DMA_IRQHandler+0xa54>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d013      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a3d      	ldr	r2, [pc, #244]	; (800b198 <HAL_DMA_IRQHandler+0xa58>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d00e      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a3c      	ldr	r2, [pc, #240]	; (800b19c <HAL_DMA_IRQHandler+0xa5c>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d009      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a3a      	ldr	r2, [pc, #232]	; (800b1a0 <HAL_DMA_IRQHandler+0xa60>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d004      	beq.n	800b0c4 <HAL_DMA_IRQHandler+0x984>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a39      	ldr	r2, [pc, #228]	; (800b1a4 <HAL_DMA_IRQHandler+0xa64>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d101      	bne.n	800b0c8 <HAL_DMA_IRQHandler+0x988>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e000      	b.n	800b0ca <HAL_DMA_IRQHandler+0x98a>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 823f 	beq.w	800b54e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0dc:	f003 031f 	and.w	r3, r3, #31
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	409a      	lsls	r2, r3
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 80cd 	beq.w	800b288 <HAL_DMA_IRQHandler+0xb48>
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 80c7 	beq.w	800b288 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0fe:	f003 031f 	and.w	r3, r3, #31
 800b102:	2204      	movs	r2, #4
 800b104:	409a      	lsls	r2, r3
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d049      	beq.n	800b1a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d109      	bne.n	800b132 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b122:	2b00      	cmp	r3, #0
 800b124:	f000 8210 	beq.w	800b548 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b130:	e20a      	b.n	800b548 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 8206 	beq.w	800b548 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b144:	e200      	b.n	800b548 <HAL_DMA_IRQHandler+0xe08>
 800b146:	bf00      	nop
 800b148:	40020010 	.word	0x40020010
 800b14c:	40020028 	.word	0x40020028
 800b150:	40020040 	.word	0x40020040
 800b154:	40020058 	.word	0x40020058
 800b158:	40020070 	.word	0x40020070
 800b15c:	40020088 	.word	0x40020088
 800b160:	400200a0 	.word	0x400200a0
 800b164:	400200b8 	.word	0x400200b8
 800b168:	40020410 	.word	0x40020410
 800b16c:	40020428 	.word	0x40020428
 800b170:	40020440 	.word	0x40020440
 800b174:	40020458 	.word	0x40020458
 800b178:	40020470 	.word	0x40020470
 800b17c:	40020488 	.word	0x40020488
 800b180:	400204a0 	.word	0x400204a0
 800b184:	400204b8 	.word	0x400204b8
 800b188:	58025408 	.word	0x58025408
 800b18c:	5802541c 	.word	0x5802541c
 800b190:	58025430 	.word	0x58025430
 800b194:	58025444 	.word	0x58025444
 800b198:	58025458 	.word	0x58025458
 800b19c:	5802546c 	.word	0x5802546c
 800b1a0:	58025480 	.word	0x58025480
 800b1a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f003 0320 	and.w	r3, r3, #32
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d160      	bne.n	800b274 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a7f      	ldr	r2, [pc, #508]	; (800b3b4 <HAL_DMA_IRQHandler+0xc74>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d04a      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a7d      	ldr	r2, [pc, #500]	; (800b3b8 <HAL_DMA_IRQHandler+0xc78>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d045      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a7c      	ldr	r2, [pc, #496]	; (800b3bc <HAL_DMA_IRQHandler+0xc7c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d040      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a7a      	ldr	r2, [pc, #488]	; (800b3c0 <HAL_DMA_IRQHandler+0xc80>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d03b      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a79      	ldr	r2, [pc, #484]	; (800b3c4 <HAL_DMA_IRQHandler+0xc84>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d036      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a77      	ldr	r2, [pc, #476]	; (800b3c8 <HAL_DMA_IRQHandler+0xc88>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d031      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a76      	ldr	r2, [pc, #472]	; (800b3cc <HAL_DMA_IRQHandler+0xc8c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d02c      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a74      	ldr	r2, [pc, #464]	; (800b3d0 <HAL_DMA_IRQHandler+0xc90>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d027      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a73      	ldr	r2, [pc, #460]	; (800b3d4 <HAL_DMA_IRQHandler+0xc94>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d022      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a71      	ldr	r2, [pc, #452]	; (800b3d8 <HAL_DMA_IRQHandler+0xc98>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d01d      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a70      	ldr	r2, [pc, #448]	; (800b3dc <HAL_DMA_IRQHandler+0xc9c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d018      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a6e      	ldr	r2, [pc, #440]	; (800b3e0 <HAL_DMA_IRQHandler+0xca0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d013      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a6d      	ldr	r2, [pc, #436]	; (800b3e4 <HAL_DMA_IRQHandler+0xca4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d00e      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a6b      	ldr	r2, [pc, #428]	; (800b3e8 <HAL_DMA_IRQHandler+0xca8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d009      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a6a      	ldr	r2, [pc, #424]	; (800b3ec <HAL_DMA_IRQHandler+0xcac>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d004      	beq.n	800b252 <HAL_DMA_IRQHandler+0xb12>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a68      	ldr	r2, [pc, #416]	; (800b3f0 <HAL_DMA_IRQHandler+0xcb0>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d108      	bne.n	800b264 <HAL_DMA_IRQHandler+0xb24>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	681a      	ldr	r2, [r3, #0]
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 0208 	bic.w	r2, r2, #8
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e007      	b.n	800b274 <HAL_DMA_IRQHandler+0xb34>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f022 0204 	bic.w	r2, r2, #4
 800b272:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 8165 	beq.w	800b548 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b286:	e15f      	b.n	800b548 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b28c:	f003 031f 	and.w	r3, r3, #31
 800b290:	2202      	movs	r2, #2
 800b292:	409a      	lsls	r2, r3
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	4013      	ands	r3, r2
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80c5 	beq.w	800b428 <HAL_DMA_IRQHandler+0xce8>
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f003 0302 	and.w	r3, r3, #2
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	f000 80bf 	beq.w	800b428 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ae:	f003 031f 	and.w	r3, r3, #31
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	409a      	lsls	r2, r3
 800b2b6:	69fb      	ldr	r3, [r7, #28]
 800b2b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d018      	beq.n	800b2f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d109      	bne.n	800b2e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	f000 813a 	beq.w	800b54c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2e0:	e134      	b.n	800b54c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 8130 	beq.w	800b54c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2f4:	e12a      	b.n	800b54c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f003 0320 	and.w	r3, r3, #32
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f040 8089 	bne.w	800b414 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a2b      	ldr	r2, [pc, #172]	; (800b3b4 <HAL_DMA_IRQHandler+0xc74>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d04a      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a29      	ldr	r2, [pc, #164]	; (800b3b8 <HAL_DMA_IRQHandler+0xc78>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d045      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a28      	ldr	r2, [pc, #160]	; (800b3bc <HAL_DMA_IRQHandler+0xc7c>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d040      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a26      	ldr	r2, [pc, #152]	; (800b3c0 <HAL_DMA_IRQHandler+0xc80>)
 800b326:	4293      	cmp	r3, r2
 800b328:	d03b      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a25      	ldr	r2, [pc, #148]	; (800b3c4 <HAL_DMA_IRQHandler+0xc84>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d036      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a23      	ldr	r2, [pc, #140]	; (800b3c8 <HAL_DMA_IRQHandler+0xc88>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d031      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a22      	ldr	r2, [pc, #136]	; (800b3cc <HAL_DMA_IRQHandler+0xc8c>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d02c      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	4a20      	ldr	r2, [pc, #128]	; (800b3d0 <HAL_DMA_IRQHandler+0xc90>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d027      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a1f      	ldr	r2, [pc, #124]	; (800b3d4 <HAL_DMA_IRQHandler+0xc94>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d022      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a1d      	ldr	r2, [pc, #116]	; (800b3d8 <HAL_DMA_IRQHandler+0xc98>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d01d      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a1c      	ldr	r2, [pc, #112]	; (800b3dc <HAL_DMA_IRQHandler+0xc9c>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d018      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a1a      	ldr	r2, [pc, #104]	; (800b3e0 <HAL_DMA_IRQHandler+0xca0>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d013      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a19      	ldr	r2, [pc, #100]	; (800b3e4 <HAL_DMA_IRQHandler+0xca4>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d00e      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	4a17      	ldr	r2, [pc, #92]	; (800b3e8 <HAL_DMA_IRQHandler+0xca8>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d009      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a16      	ldr	r2, [pc, #88]	; (800b3ec <HAL_DMA_IRQHandler+0xcac>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d004      	beq.n	800b3a2 <HAL_DMA_IRQHandler+0xc62>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a14      	ldr	r2, [pc, #80]	; (800b3f0 <HAL_DMA_IRQHandler+0xcb0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d128      	bne.n	800b3f4 <HAL_DMA_IRQHandler+0xcb4>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f022 0214 	bic.w	r2, r2, #20
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	e027      	b.n	800b404 <HAL_DMA_IRQHandler+0xcc4>
 800b3b4:	40020010 	.word	0x40020010
 800b3b8:	40020028 	.word	0x40020028
 800b3bc:	40020040 	.word	0x40020040
 800b3c0:	40020058 	.word	0x40020058
 800b3c4:	40020070 	.word	0x40020070
 800b3c8:	40020088 	.word	0x40020088
 800b3cc:	400200a0 	.word	0x400200a0
 800b3d0:	400200b8 	.word	0x400200b8
 800b3d4:	40020410 	.word	0x40020410
 800b3d8:	40020428 	.word	0x40020428
 800b3dc:	40020440 	.word	0x40020440
 800b3e0:	40020458 	.word	0x40020458
 800b3e4:	40020470 	.word	0x40020470
 800b3e8:	40020488 	.word	0x40020488
 800b3ec:	400204a0 	.word	0x400204a0
 800b3f0:	400204b8 	.word	0x400204b8
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f022 020a 	bic.w	r2, r2, #10
 800b402:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b418:	2b00      	cmp	r3, #0
 800b41a:	f000 8097 	beq.w	800b54c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b426:	e091      	b.n	800b54c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b42c:	f003 031f 	and.w	r3, r3, #31
 800b430:	2208      	movs	r2, #8
 800b432:	409a      	lsls	r2, r3
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	4013      	ands	r3, r2
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 8088 	beq.w	800b54e <HAL_DMA_IRQHandler+0xe0e>
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f003 0308 	and.w	r3, r3, #8
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8082 	beq.w	800b54e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a41      	ldr	r2, [pc, #260]	; (800b554 <HAL_DMA_IRQHandler+0xe14>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d04a      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a3f      	ldr	r2, [pc, #252]	; (800b558 <HAL_DMA_IRQHandler+0xe18>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d045      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	4a3e      	ldr	r2, [pc, #248]	; (800b55c <HAL_DMA_IRQHandler+0xe1c>)
 800b464:	4293      	cmp	r3, r2
 800b466:	d040      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a3c      	ldr	r2, [pc, #240]	; (800b560 <HAL_DMA_IRQHandler+0xe20>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d03b      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a3b      	ldr	r2, [pc, #236]	; (800b564 <HAL_DMA_IRQHandler+0xe24>)
 800b478:	4293      	cmp	r3, r2
 800b47a:	d036      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a39      	ldr	r2, [pc, #228]	; (800b568 <HAL_DMA_IRQHandler+0xe28>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d031      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a38      	ldr	r2, [pc, #224]	; (800b56c <HAL_DMA_IRQHandler+0xe2c>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d02c      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a36      	ldr	r2, [pc, #216]	; (800b570 <HAL_DMA_IRQHandler+0xe30>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d027      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	4a35      	ldr	r2, [pc, #212]	; (800b574 <HAL_DMA_IRQHandler+0xe34>)
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	d022      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a33      	ldr	r2, [pc, #204]	; (800b578 <HAL_DMA_IRQHandler+0xe38>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d01d      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	4a32      	ldr	r2, [pc, #200]	; (800b57c <HAL_DMA_IRQHandler+0xe3c>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d018      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a30      	ldr	r2, [pc, #192]	; (800b580 <HAL_DMA_IRQHandler+0xe40>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d013      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a2f      	ldr	r2, [pc, #188]	; (800b584 <HAL_DMA_IRQHandler+0xe44>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00e      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a2d      	ldr	r2, [pc, #180]	; (800b588 <HAL_DMA_IRQHandler+0xe48>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d009      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a2c      	ldr	r2, [pc, #176]	; (800b58c <HAL_DMA_IRQHandler+0xe4c>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d004      	beq.n	800b4ea <HAL_DMA_IRQHandler+0xdaa>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a2a      	ldr	r2, [pc, #168]	; (800b590 <HAL_DMA_IRQHandler+0xe50>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d108      	bne.n	800b4fc <HAL_DMA_IRQHandler+0xdbc>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f022 021c 	bic.w	r2, r2, #28
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	e007      	b.n	800b50c <HAL_DMA_IRQHandler+0xdcc>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 020e 	bic.w	r2, r2, #14
 800b50a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b510:	f003 031f 	and.w	r3, r3, #31
 800b514:	2201      	movs	r2, #1
 800b516:	409a      	lsls	r2, r3
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	4798      	blx	r3
 800b542:	e004      	b.n	800b54e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b544:	bf00      	nop
 800b546:	e002      	b.n	800b54e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b548:	bf00      	nop
 800b54a:	e000      	b.n	800b54e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b54c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b54e:	3728      	adds	r7, #40	; 0x28
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	40020010 	.word	0x40020010
 800b558:	40020028 	.word	0x40020028
 800b55c:	40020040 	.word	0x40020040
 800b560:	40020058 	.word	0x40020058
 800b564:	40020070 	.word	0x40020070
 800b568:	40020088 	.word	0x40020088
 800b56c:	400200a0 	.word	0x400200a0
 800b570:	400200b8 	.word	0x400200b8
 800b574:	40020410 	.word	0x40020410
 800b578:	40020428 	.word	0x40020428
 800b57c:	40020440 	.word	0x40020440
 800b580:	40020458 	.word	0x40020458
 800b584:	40020470 	.word	0x40020470
 800b588:	40020488 	.word	0x40020488
 800b58c:	400204a0 	.word	0x400204a0
 800b590:	400204b8 	.word	0x400204b8

0800b594 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b594:	b480      	push	{r7}
 800b596:	b087      	sub	sp, #28
 800b598:	af00      	add	r7, sp, #0
 800b59a:	60f8      	str	r0, [r7, #12]
 800b59c:	60b9      	str	r1, [r7, #8]
 800b59e:	607a      	str	r2, [r7, #4]
 800b5a0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ac:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a7f      	ldr	r2, [pc, #508]	; (800b7b0 <DMA_SetConfig+0x21c>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d072      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a7d      	ldr	r2, [pc, #500]	; (800b7b4 <DMA_SetConfig+0x220>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d06d      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a7c      	ldr	r2, [pc, #496]	; (800b7b8 <DMA_SetConfig+0x224>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d068      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a7a      	ldr	r2, [pc, #488]	; (800b7bc <DMA_SetConfig+0x228>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d063      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a79      	ldr	r2, [pc, #484]	; (800b7c0 <DMA_SetConfig+0x22c>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d05e      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a77      	ldr	r2, [pc, #476]	; (800b7c4 <DMA_SetConfig+0x230>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d059      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a76      	ldr	r2, [pc, #472]	; (800b7c8 <DMA_SetConfig+0x234>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d054      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a74      	ldr	r2, [pc, #464]	; (800b7cc <DMA_SetConfig+0x238>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d04f      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a73      	ldr	r2, [pc, #460]	; (800b7d0 <DMA_SetConfig+0x23c>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d04a      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a71      	ldr	r2, [pc, #452]	; (800b7d4 <DMA_SetConfig+0x240>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d045      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a70      	ldr	r2, [pc, #448]	; (800b7d8 <DMA_SetConfig+0x244>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d040      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a6e      	ldr	r2, [pc, #440]	; (800b7dc <DMA_SetConfig+0x248>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d03b      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a6d      	ldr	r2, [pc, #436]	; (800b7e0 <DMA_SetConfig+0x24c>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d036      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a6b      	ldr	r2, [pc, #428]	; (800b7e4 <DMA_SetConfig+0x250>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d031      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a6a      	ldr	r2, [pc, #424]	; (800b7e8 <DMA_SetConfig+0x254>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d02c      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4a68      	ldr	r2, [pc, #416]	; (800b7ec <DMA_SetConfig+0x258>)
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d027      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a67      	ldr	r2, [pc, #412]	; (800b7f0 <DMA_SetConfig+0x25c>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d022      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a65      	ldr	r2, [pc, #404]	; (800b7f4 <DMA_SetConfig+0x260>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d01d      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a64      	ldr	r2, [pc, #400]	; (800b7f8 <DMA_SetConfig+0x264>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d018      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a62      	ldr	r2, [pc, #392]	; (800b7fc <DMA_SetConfig+0x268>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d013      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a61      	ldr	r2, [pc, #388]	; (800b800 <DMA_SetConfig+0x26c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d00e      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a5f      	ldr	r2, [pc, #380]	; (800b804 <DMA_SetConfig+0x270>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d009      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a5e      	ldr	r2, [pc, #376]	; (800b808 <DMA_SetConfig+0x274>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d004      	beq.n	800b69e <DMA_SetConfig+0x10a>
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a5c      	ldr	r2, [pc, #368]	; (800b80c <DMA_SetConfig+0x278>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d101      	bne.n	800b6a2 <DMA_SetConfig+0x10e>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e000      	b.n	800b6a4 <DMA_SetConfig+0x110>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00d      	beq.n	800b6c4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b6b0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d004      	beq.n	800b6c4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b6c2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a39      	ldr	r2, [pc, #228]	; (800b7b0 <DMA_SetConfig+0x21c>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d04a      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4a38      	ldr	r2, [pc, #224]	; (800b7b4 <DMA_SetConfig+0x220>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d045      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4a36      	ldr	r2, [pc, #216]	; (800b7b8 <DMA_SetConfig+0x224>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d040      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a35      	ldr	r2, [pc, #212]	; (800b7bc <DMA_SetConfig+0x228>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d03b      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a33      	ldr	r2, [pc, #204]	; (800b7c0 <DMA_SetConfig+0x22c>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d036      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a32      	ldr	r2, [pc, #200]	; (800b7c4 <DMA_SetConfig+0x230>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d031      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a30      	ldr	r2, [pc, #192]	; (800b7c8 <DMA_SetConfig+0x234>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d02c      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a2f      	ldr	r2, [pc, #188]	; (800b7cc <DMA_SetConfig+0x238>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d027      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a2d      	ldr	r2, [pc, #180]	; (800b7d0 <DMA_SetConfig+0x23c>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d022      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a2c      	ldr	r2, [pc, #176]	; (800b7d4 <DMA_SetConfig+0x240>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d01d      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a2a      	ldr	r2, [pc, #168]	; (800b7d8 <DMA_SetConfig+0x244>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d018      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a29      	ldr	r2, [pc, #164]	; (800b7dc <DMA_SetConfig+0x248>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d013      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a27      	ldr	r2, [pc, #156]	; (800b7e0 <DMA_SetConfig+0x24c>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d00e      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a26      	ldr	r2, [pc, #152]	; (800b7e4 <DMA_SetConfig+0x250>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d009      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a24      	ldr	r2, [pc, #144]	; (800b7e8 <DMA_SetConfig+0x254>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d004      	beq.n	800b764 <DMA_SetConfig+0x1d0>
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a23      	ldr	r2, [pc, #140]	; (800b7ec <DMA_SetConfig+0x258>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d101      	bne.n	800b768 <DMA_SetConfig+0x1d4>
 800b764:	2301      	movs	r3, #1
 800b766:	e000      	b.n	800b76a <DMA_SetConfig+0x1d6>
 800b768:	2300      	movs	r3, #0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d059      	beq.n	800b822 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b772:	f003 031f 	and.w	r3, r3, #31
 800b776:	223f      	movs	r2, #63	; 0x3f
 800b778:	409a      	lsls	r2, r3
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b78c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	683a      	ldr	r2, [r7, #0]
 800b794:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	2b40      	cmp	r3, #64	; 0x40
 800b79c:	d138      	bne.n	800b810 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b7ae:	e086      	b.n	800b8be <DMA_SetConfig+0x32a>
 800b7b0:	40020010 	.word	0x40020010
 800b7b4:	40020028 	.word	0x40020028
 800b7b8:	40020040 	.word	0x40020040
 800b7bc:	40020058 	.word	0x40020058
 800b7c0:	40020070 	.word	0x40020070
 800b7c4:	40020088 	.word	0x40020088
 800b7c8:	400200a0 	.word	0x400200a0
 800b7cc:	400200b8 	.word	0x400200b8
 800b7d0:	40020410 	.word	0x40020410
 800b7d4:	40020428 	.word	0x40020428
 800b7d8:	40020440 	.word	0x40020440
 800b7dc:	40020458 	.word	0x40020458
 800b7e0:	40020470 	.word	0x40020470
 800b7e4:	40020488 	.word	0x40020488
 800b7e8:	400204a0 	.word	0x400204a0
 800b7ec:	400204b8 	.word	0x400204b8
 800b7f0:	58025408 	.word	0x58025408
 800b7f4:	5802541c 	.word	0x5802541c
 800b7f8:	58025430 	.word	0x58025430
 800b7fc:	58025444 	.word	0x58025444
 800b800:	58025458 	.word	0x58025458
 800b804:	5802546c 	.word	0x5802546c
 800b808:	58025480 	.word	0x58025480
 800b80c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68ba      	ldr	r2, [r7, #8]
 800b816:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	60da      	str	r2, [r3, #12]
}
 800b820:	e04d      	b.n	800b8be <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a29      	ldr	r2, [pc, #164]	; (800b8cc <DMA_SetConfig+0x338>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d022      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a27      	ldr	r2, [pc, #156]	; (800b8d0 <DMA_SetConfig+0x33c>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d01d      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a26      	ldr	r2, [pc, #152]	; (800b8d4 <DMA_SetConfig+0x340>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d018      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a24      	ldr	r2, [pc, #144]	; (800b8d8 <DMA_SetConfig+0x344>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d013      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a23      	ldr	r2, [pc, #140]	; (800b8dc <DMA_SetConfig+0x348>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d00e      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a21      	ldr	r2, [pc, #132]	; (800b8e0 <DMA_SetConfig+0x34c>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d009      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a20      	ldr	r2, [pc, #128]	; (800b8e4 <DMA_SetConfig+0x350>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d004      	beq.n	800b872 <DMA_SetConfig+0x2de>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <DMA_SetConfig+0x354>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d101      	bne.n	800b876 <DMA_SetConfig+0x2e2>
 800b872:	2301      	movs	r3, #1
 800b874:	e000      	b.n	800b878 <DMA_SetConfig+0x2e4>
 800b876:	2300      	movs	r3, #0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d020      	beq.n	800b8be <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b880:	f003 031f 	and.w	r3, r3, #31
 800b884:	2201      	movs	r2, #1
 800b886:	409a      	lsls	r2, r3
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	2b40      	cmp	r3, #64	; 0x40
 800b89a:	d108      	bne.n	800b8ae <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	60da      	str	r2, [r3, #12]
}
 800b8ac:	e007      	b.n	800b8be <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	68ba      	ldr	r2, [r7, #8]
 800b8b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	60da      	str	r2, [r3, #12]
}
 800b8be:	bf00      	nop
 800b8c0:	371c      	adds	r7, #28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	58025408 	.word	0x58025408
 800b8d0:	5802541c 	.word	0x5802541c
 800b8d4:	58025430 	.word	0x58025430
 800b8d8:	58025444 	.word	0x58025444
 800b8dc:	58025458 	.word	0x58025458
 800b8e0:	5802546c 	.word	0x5802546c
 800b8e4:	58025480 	.word	0x58025480
 800b8e8:	58025494 	.word	0x58025494

0800b8ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a42      	ldr	r2, [pc, #264]	; (800ba04 <DMA_CalcBaseAndBitshift+0x118>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d04a      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a41      	ldr	r2, [pc, #260]	; (800ba08 <DMA_CalcBaseAndBitshift+0x11c>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d045      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a3f      	ldr	r2, [pc, #252]	; (800ba0c <DMA_CalcBaseAndBitshift+0x120>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d040      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a3e      	ldr	r2, [pc, #248]	; (800ba10 <DMA_CalcBaseAndBitshift+0x124>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d03b      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	4a3c      	ldr	r2, [pc, #240]	; (800ba14 <DMA_CalcBaseAndBitshift+0x128>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d036      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a3b      	ldr	r2, [pc, #236]	; (800ba18 <DMA_CalcBaseAndBitshift+0x12c>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d031      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a39      	ldr	r2, [pc, #228]	; (800ba1c <DMA_CalcBaseAndBitshift+0x130>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d02c      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a38      	ldr	r2, [pc, #224]	; (800ba20 <DMA_CalcBaseAndBitshift+0x134>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d027      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a36      	ldr	r2, [pc, #216]	; (800ba24 <DMA_CalcBaseAndBitshift+0x138>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d022      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a35      	ldr	r2, [pc, #212]	; (800ba28 <DMA_CalcBaseAndBitshift+0x13c>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d01d      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a33      	ldr	r2, [pc, #204]	; (800ba2c <DMA_CalcBaseAndBitshift+0x140>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d018      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a32      	ldr	r2, [pc, #200]	; (800ba30 <DMA_CalcBaseAndBitshift+0x144>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d013      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a30      	ldr	r2, [pc, #192]	; (800ba34 <DMA_CalcBaseAndBitshift+0x148>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d00e      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a2f      	ldr	r2, [pc, #188]	; (800ba38 <DMA_CalcBaseAndBitshift+0x14c>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d009      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a2d      	ldr	r2, [pc, #180]	; (800ba3c <DMA_CalcBaseAndBitshift+0x150>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d004      	beq.n	800b994 <DMA_CalcBaseAndBitshift+0xa8>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a2c      	ldr	r2, [pc, #176]	; (800ba40 <DMA_CalcBaseAndBitshift+0x154>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d101      	bne.n	800b998 <DMA_CalcBaseAndBitshift+0xac>
 800b994:	2301      	movs	r3, #1
 800b996:	e000      	b.n	800b99a <DMA_CalcBaseAndBitshift+0xae>
 800b998:	2300      	movs	r3, #0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d024      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	3b10      	subs	r3, #16
 800b9a6:	4a27      	ldr	r2, [pc, #156]	; (800ba44 <DMA_CalcBaseAndBitshift+0x158>)
 800b9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ac:	091b      	lsrs	r3, r3, #4
 800b9ae:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f003 0307 	and.w	r3, r3, #7
 800b9b6:	4a24      	ldr	r2, [pc, #144]	; (800ba48 <DMA_CalcBaseAndBitshift+0x15c>)
 800b9b8:	5cd3      	ldrb	r3, [r2, r3]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2b03      	cmp	r3, #3
 800b9c4:	d908      	bls.n	800b9d8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4b1f      	ldr	r3, [pc, #124]	; (800ba4c <DMA_CalcBaseAndBitshift+0x160>)
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	1d1a      	adds	r2, r3, #4
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	659a      	str	r2, [r3, #88]	; 0x58
 800b9d6:	e00d      	b.n	800b9f4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b1b      	ldr	r3, [pc, #108]	; (800ba4c <DMA_CalcBaseAndBitshift+0x160>)
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b9e6:	e005      	b.n	800b9f4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	40020010 	.word	0x40020010
 800ba08:	40020028 	.word	0x40020028
 800ba0c:	40020040 	.word	0x40020040
 800ba10:	40020058 	.word	0x40020058
 800ba14:	40020070 	.word	0x40020070
 800ba18:	40020088 	.word	0x40020088
 800ba1c:	400200a0 	.word	0x400200a0
 800ba20:	400200b8 	.word	0x400200b8
 800ba24:	40020410 	.word	0x40020410
 800ba28:	40020428 	.word	0x40020428
 800ba2c:	40020440 	.word	0x40020440
 800ba30:	40020458 	.word	0x40020458
 800ba34:	40020470 	.word	0x40020470
 800ba38:	40020488 	.word	0x40020488
 800ba3c:	400204a0 	.word	0x400204a0
 800ba40:	400204b8 	.word	0x400204b8
 800ba44:	aaaaaaab 	.word	0xaaaaaaab
 800ba48:	08017688 	.word	0x08017688
 800ba4c:	fffffc00 	.word	0xfffffc00

0800ba50 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d120      	bne.n	800baa6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d858      	bhi.n	800bb1e <DMA_CheckFifoParam+0xce>
 800ba6c:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <DMA_CheckFifoParam+0x24>)
 800ba6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba72:	bf00      	nop
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800ba97 	.word	0x0800ba97
 800ba7c:	0800ba85 	.word	0x0800ba85
 800ba80:	0800bb1f 	.word	0x0800bb1f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d048      	beq.n	800bb22 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800ba94:	e045      	b.n	800bb22 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ba9e:	d142      	bne.n	800bb26 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800baa4:	e03f      	b.n	800bb26 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baae:	d123      	bne.n	800baf8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab4:	2b03      	cmp	r3, #3
 800bab6:	d838      	bhi.n	800bb2a <DMA_CheckFifoParam+0xda>
 800bab8:	a201      	add	r2, pc, #4	; (adr r2, 800bac0 <DMA_CheckFifoParam+0x70>)
 800baba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800babe:	bf00      	nop
 800bac0:	0800bad1 	.word	0x0800bad1
 800bac4:	0800bad7 	.word	0x0800bad7
 800bac8:	0800bad1 	.word	0x0800bad1
 800bacc:	0800bae9 	.word	0x0800bae9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	73fb      	strb	r3, [r7, #15]
        break;
 800bad4:	e030      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bada:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d025      	beq.n	800bb2e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bae6:	e022      	b.n	800bb2e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800baf0:	d11f      	bne.n	800bb32 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800baf6:	e01c      	b.n	800bb32 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	2b02      	cmp	r3, #2
 800bafe:	d902      	bls.n	800bb06 <DMA_CheckFifoParam+0xb6>
 800bb00:	2b03      	cmp	r3, #3
 800bb02:	d003      	beq.n	800bb0c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bb04:	e018      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bb06:	2301      	movs	r3, #1
 800bb08:	73fb      	strb	r3, [r7, #15]
        break;
 800bb0a:	e015      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00e      	beq.n	800bb36 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	73fb      	strb	r3, [r7, #15]
    break;
 800bb1c:	e00b      	b.n	800bb36 <DMA_CheckFifoParam+0xe6>
        break;
 800bb1e:	bf00      	nop
 800bb20:	e00a      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        break;
 800bb22:	bf00      	nop
 800bb24:	e008      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        break;
 800bb26:	bf00      	nop
 800bb28:	e006      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        break;
 800bb2a:	bf00      	nop
 800bb2c:	e004      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        break;
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
        break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <DMA_CheckFifoParam+0xe8>
    break;
 800bb36:	bf00      	nop
    }
  }

  return status;
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop

0800bb48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a38      	ldr	r2, [pc, #224]	; (800bc3c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d022      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a36      	ldr	r2, [pc, #216]	; (800bc40 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d01d      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a35      	ldr	r2, [pc, #212]	; (800bc44 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d018      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a33      	ldr	r2, [pc, #204]	; (800bc48 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d013      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a32      	ldr	r2, [pc, #200]	; (800bc4c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d00e      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a30      	ldr	r2, [pc, #192]	; (800bc50 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d009      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a2f      	ldr	r2, [pc, #188]	; (800bc54 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d004      	beq.n	800bba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	4a2d      	ldr	r2, [pc, #180]	; (800bc58 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bba2:	4293      	cmp	r3, r2
 800bba4:	d101      	bne.n	800bbaa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e000      	b.n	800bbac <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d01a      	beq.n	800bbe6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	3b08      	subs	r3, #8
 800bbb8:	4a28      	ldr	r2, [pc, #160]	; (800bc5c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bbba:	fba2 2303 	umull	r2, r3, r2, r3
 800bbbe:	091b      	lsrs	r3, r3, #4
 800bbc0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4b26      	ldr	r3, [pc, #152]	; (800bc60 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	461a      	mov	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a24      	ldr	r2, [pc, #144]	; (800bc64 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bbd4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f003 031f 	and.w	r3, r3, #31
 800bbdc:	2201      	movs	r2, #1
 800bbde:	409a      	lsls	r2, r3
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bbe4:	e024      	b.n	800bc30 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	3b10      	subs	r3, #16
 800bbee:	4a1e      	ldr	r2, [pc, #120]	; (800bc68 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bbf0:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf4:	091b      	lsrs	r3, r3, #4
 800bbf6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4a1c      	ldr	r2, [pc, #112]	; (800bc6c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d806      	bhi.n	800bc0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	4a1b      	ldr	r2, [pc, #108]	; (800bc70 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d902      	bls.n	800bc0e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3308      	adds	r3, #8
 800bc0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	4b18      	ldr	r3, [pc, #96]	; (800bc74 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	461a      	mov	r2, r3
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a16      	ldr	r2, [pc, #88]	; (800bc78 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bc20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f003 031f 	and.w	r3, r3, #31
 800bc28:	2201      	movs	r2, #1
 800bc2a:	409a      	lsls	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bc30:	bf00      	nop
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	58025408 	.word	0x58025408
 800bc40:	5802541c 	.word	0x5802541c
 800bc44:	58025430 	.word	0x58025430
 800bc48:	58025444 	.word	0x58025444
 800bc4c:	58025458 	.word	0x58025458
 800bc50:	5802546c 	.word	0x5802546c
 800bc54:	58025480 	.word	0x58025480
 800bc58:	58025494 	.word	0x58025494
 800bc5c:	cccccccd 	.word	0xcccccccd
 800bc60:	16009600 	.word	0x16009600
 800bc64:	58025880 	.word	0x58025880
 800bc68:	aaaaaaab 	.word	0xaaaaaaab
 800bc6c:	400204b8 	.word	0x400204b8
 800bc70:	4002040f 	.word	0x4002040f
 800bc74:	10008200 	.word	0x10008200
 800bc78:	40020880 	.word	0x40020880

0800bc7c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b085      	sub	sp, #20
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d04a      	beq.n	800bd28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	d847      	bhi.n	800bd28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a25      	ldr	r2, [pc, #148]	; (800bd34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d022      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a24      	ldr	r2, [pc, #144]	; (800bd38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d01d      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a22      	ldr	r2, [pc, #136]	; (800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d018      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a21      	ldr	r2, [pc, #132]	; (800bd40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d013      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a1f      	ldr	r2, [pc, #124]	; (800bd44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d00e      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	4a1e      	ldr	r2, [pc, #120]	; (800bd48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bcd0:	4293      	cmp	r3, r2
 800bcd2:	d009      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	4a1c      	ldr	r2, [pc, #112]	; (800bd4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d004      	beq.n	800bce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	4a1b      	ldr	r2, [pc, #108]	; (800bd50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d101      	bne.n	800bcec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bce8:	2301      	movs	r3, #1
 800bcea:	e000      	b.n	800bcee <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bcec:	2300      	movs	r3, #0
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d00a      	beq.n	800bd08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	4b17      	ldr	r3, [pc, #92]	; (800bd54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a15      	ldr	r2, [pc, #84]	; (800bd58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bd04:	671a      	str	r2, [r3, #112]	; 0x70
 800bd06:	e009      	b.n	800bd1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	4b14      	ldr	r3, [pc, #80]	; (800bd5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bd0c:	4413      	add	r3, r2
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	461a      	mov	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a11      	ldr	r2, [pc, #68]	; (800bd60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bd1a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	2201      	movs	r2, #1
 800bd22:	409a      	lsls	r2, r3
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800bd28:	bf00      	nop
 800bd2a:	3714      	adds	r7, #20
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	58025408 	.word	0x58025408
 800bd38:	5802541c 	.word	0x5802541c
 800bd3c:	58025430 	.word	0x58025430
 800bd40:	58025444 	.word	0x58025444
 800bd44:	58025458 	.word	0x58025458
 800bd48:	5802546c 	.word	0x5802546c
 800bd4c:	58025480 	.word	0x58025480
 800bd50:	58025494 	.word	0x58025494
 800bd54:	1600963f 	.word	0x1600963f
 800bd58:	58025940 	.word	0x58025940
 800bd5c:	1000823f 	.word	0x1000823f
 800bd60:	40020940 	.word	0x40020940

0800bd64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b089      	sub	sp, #36	; 0x24
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800bd72:	4b89      	ldr	r3, [pc, #548]	; (800bf98 <HAL_GPIO_Init+0x234>)
 800bd74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bd76:	e194      	b.n	800c0a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	69fb      	ldr	r3, [r7, #28]
 800bd80:	fa01 f303 	lsl.w	r3, r1, r3
 800bd84:	4013      	ands	r3, r2
 800bd86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	f000 8186 	beq.w	800c09c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d005      	beq.n	800bda8 <HAL_GPIO_Init+0x44>
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f003 0303 	and.w	r3, r3, #3
 800bda4:	2b02      	cmp	r3, #2
 800bda6:	d130      	bne.n	800be0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	005b      	lsls	r3, r3, #1
 800bdb2:	2203      	movs	r2, #3
 800bdb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb8:	43db      	mvns	r3, r3
 800bdba:	69ba      	ldr	r2, [r7, #24]
 800bdbc:	4013      	ands	r3, r2
 800bdbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	68da      	ldr	r2, [r3, #12]
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	005b      	lsls	r3, r3, #1
 800bdc8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdcc:	69ba      	ldr	r2, [r7, #24]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	69ba      	ldr	r2, [r7, #24]
 800bdd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bdde:	2201      	movs	r2, #1
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	fa02 f303 	lsl.w	r3, r2, r3
 800bde6:	43db      	mvns	r3, r3
 800bde8:	69ba      	ldr	r2, [r7, #24]
 800bdea:	4013      	ands	r3, r2
 800bdec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	091b      	lsrs	r3, r3, #4
 800bdf4:	f003 0201 	and.w	r2, r3, #1
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfe:	69ba      	ldr	r2, [r7, #24]
 800be00:	4313      	orrs	r3, r2
 800be02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	685b      	ldr	r3, [r3, #4]
 800be0e:	f003 0303 	and.w	r3, r3, #3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d017      	beq.n	800be46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	2203      	movs	r2, #3
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	43db      	mvns	r3, r3
 800be28:	69ba      	ldr	r2, [r7, #24]
 800be2a:	4013      	ands	r3, r2
 800be2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	005b      	lsls	r3, r3, #1
 800be36:	fa02 f303 	lsl.w	r3, r2, r3
 800be3a:	69ba      	ldr	r2, [r7, #24]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	69ba      	ldr	r2, [r7, #24]
 800be44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	685b      	ldr	r3, [r3, #4]
 800be4a:	f003 0303 	and.w	r3, r3, #3
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d123      	bne.n	800be9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	08da      	lsrs	r2, r3, #3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	3208      	adds	r2, #8
 800be5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	f003 0307 	and.w	r3, r3, #7
 800be66:	009b      	lsls	r3, r3, #2
 800be68:	220f      	movs	r2, #15
 800be6a:	fa02 f303 	lsl.w	r3, r2, r3
 800be6e:	43db      	mvns	r3, r3
 800be70:	69ba      	ldr	r2, [r7, #24]
 800be72:	4013      	ands	r3, r2
 800be74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	691a      	ldr	r2, [r3, #16]
 800be7a:	69fb      	ldr	r3, [r7, #28]
 800be7c:	f003 0307 	and.w	r3, r3, #7
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	fa02 f303 	lsl.w	r3, r2, r3
 800be86:	69ba      	ldr	r2, [r7, #24]
 800be88:	4313      	orrs	r3, r2
 800be8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	08da      	lsrs	r2, r3, #3
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	3208      	adds	r2, #8
 800be94:	69b9      	ldr	r1, [r7, #24]
 800be96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bea0:	69fb      	ldr	r3, [r7, #28]
 800bea2:	005b      	lsls	r3, r3, #1
 800bea4:	2203      	movs	r2, #3
 800bea6:	fa02 f303 	lsl.w	r3, r2, r3
 800beaa:	43db      	mvns	r3, r3
 800beac:	69ba      	ldr	r2, [r7, #24]
 800beae:	4013      	ands	r3, r2
 800beb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f003 0203 	and.w	r2, r3, #3
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	005b      	lsls	r3, r3, #1
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	f000 80e0 	beq.w	800c09c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bedc:	4b2f      	ldr	r3, [pc, #188]	; (800bf9c <HAL_GPIO_Init+0x238>)
 800bede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bee2:	4a2e      	ldr	r2, [pc, #184]	; (800bf9c <HAL_GPIO_Init+0x238>)
 800bee4:	f043 0302 	orr.w	r3, r3, #2
 800bee8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800beec:	4b2b      	ldr	r3, [pc, #172]	; (800bf9c <HAL_GPIO_Init+0x238>)
 800beee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bef2:	f003 0302 	and.w	r3, r3, #2
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800befa:	4a29      	ldr	r2, [pc, #164]	; (800bfa0 <HAL_GPIO_Init+0x23c>)
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	089b      	lsrs	r3, r3, #2
 800bf00:	3302      	adds	r3, #2
 800bf02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bf08:	69fb      	ldr	r3, [r7, #28]
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	220f      	movs	r2, #15
 800bf12:	fa02 f303 	lsl.w	r3, r2, r3
 800bf16:	43db      	mvns	r3, r3
 800bf18:	69ba      	ldr	r2, [r7, #24]
 800bf1a:	4013      	ands	r3, r2
 800bf1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a20      	ldr	r2, [pc, #128]	; (800bfa4 <HAL_GPIO_Init+0x240>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d052      	beq.n	800bfcc <HAL_GPIO_Init+0x268>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a1f      	ldr	r2, [pc, #124]	; (800bfa8 <HAL_GPIO_Init+0x244>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d031      	beq.n	800bf92 <HAL_GPIO_Init+0x22e>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a1e      	ldr	r2, [pc, #120]	; (800bfac <HAL_GPIO_Init+0x248>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d02b      	beq.n	800bf8e <HAL_GPIO_Init+0x22a>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a1d      	ldr	r2, [pc, #116]	; (800bfb0 <HAL_GPIO_Init+0x24c>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d025      	beq.n	800bf8a <HAL_GPIO_Init+0x226>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a1c      	ldr	r2, [pc, #112]	; (800bfb4 <HAL_GPIO_Init+0x250>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d01f      	beq.n	800bf86 <HAL_GPIO_Init+0x222>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	4a1b      	ldr	r2, [pc, #108]	; (800bfb8 <HAL_GPIO_Init+0x254>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d019      	beq.n	800bf82 <HAL_GPIO_Init+0x21e>
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	4a1a      	ldr	r2, [pc, #104]	; (800bfbc <HAL_GPIO_Init+0x258>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d013      	beq.n	800bf7e <HAL_GPIO_Init+0x21a>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a19      	ldr	r2, [pc, #100]	; (800bfc0 <HAL_GPIO_Init+0x25c>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d00d      	beq.n	800bf7a <HAL_GPIO_Init+0x216>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a18      	ldr	r2, [pc, #96]	; (800bfc4 <HAL_GPIO_Init+0x260>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d007      	beq.n	800bf76 <HAL_GPIO_Init+0x212>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	4a17      	ldr	r2, [pc, #92]	; (800bfc8 <HAL_GPIO_Init+0x264>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d101      	bne.n	800bf72 <HAL_GPIO_Init+0x20e>
 800bf6e:	2309      	movs	r3, #9
 800bf70:	e02d      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf72:	230a      	movs	r3, #10
 800bf74:	e02b      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf76:	2308      	movs	r3, #8
 800bf78:	e029      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf7a:	2307      	movs	r3, #7
 800bf7c:	e027      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf7e:	2306      	movs	r3, #6
 800bf80:	e025      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf82:	2305      	movs	r3, #5
 800bf84:	e023      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf86:	2304      	movs	r3, #4
 800bf88:	e021      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e01f      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf8e:	2302      	movs	r3, #2
 800bf90:	e01d      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf92:	2301      	movs	r3, #1
 800bf94:	e01b      	b.n	800bfce <HAL_GPIO_Init+0x26a>
 800bf96:	bf00      	nop
 800bf98:	58000080 	.word	0x58000080
 800bf9c:	58024400 	.word	0x58024400
 800bfa0:	58000400 	.word	0x58000400
 800bfa4:	58020000 	.word	0x58020000
 800bfa8:	58020400 	.word	0x58020400
 800bfac:	58020800 	.word	0x58020800
 800bfb0:	58020c00 	.word	0x58020c00
 800bfb4:	58021000 	.word	0x58021000
 800bfb8:	58021400 	.word	0x58021400
 800bfbc:	58021800 	.word	0x58021800
 800bfc0:	58021c00 	.word	0x58021c00
 800bfc4:	58022000 	.word	0x58022000
 800bfc8:	58022400 	.word	0x58022400
 800bfcc:	2300      	movs	r3, #0
 800bfce:	69fa      	ldr	r2, [r7, #28]
 800bfd0:	f002 0203 	and.w	r2, r2, #3
 800bfd4:	0092      	lsls	r2, r2, #2
 800bfd6:	4093      	lsls	r3, r2
 800bfd8:	69ba      	ldr	r2, [r7, #24]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bfde:	4938      	ldr	r1, [pc, #224]	; (800c0c0 <HAL_GPIO_Init+0x35c>)
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	089b      	lsrs	r3, r3, #2
 800bfe4:	3302      	adds	r3, #2
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bfec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	43db      	mvns	r3, r3
 800bff8:	69ba      	ldr	r2, [r7, #24]
 800bffa:	4013      	ands	r3, r2
 800bffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	685b      	ldr	r3, [r3, #4]
 800c002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	4313      	orrs	r3, r2
 800c010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c01a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	43db      	mvns	r3, r3
 800c026:	69ba      	ldr	r2, [r7, #24]
 800c028:	4013      	ands	r3, r2
 800c02a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c038:	69ba      	ldr	r2, [r7, #24]
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	4313      	orrs	r3, r2
 800c03e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	43db      	mvns	r3, r3
 800c052:	69ba      	ldr	r2, [r7, #24]
 800c054:	4013      	ands	r3, r2
 800c056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	685b      	ldr	r3, [r3, #4]
 800c05c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c060:	2b00      	cmp	r3, #0
 800c062:	d003      	beq.n	800c06c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c064:	69ba      	ldr	r2, [r7, #24]
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	4313      	orrs	r3, r2
 800c06a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	43db      	mvns	r3, r3
 800c07c:	69ba      	ldr	r2, [r7, #24]
 800c07e:	4013      	ands	r3, r2
 800c080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c08e:	69ba      	ldr	r2, [r7, #24]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	4313      	orrs	r3, r2
 800c094:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	69ba      	ldr	r2, [r7, #24]
 800c09a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	681a      	ldr	r2, [r3, #0]
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f47f ae63 	bne.w	800bd78 <HAL_GPIO_Init+0x14>
  }
}
 800c0b2:	bf00      	nop
 800c0b4:	bf00      	nop
 800c0b6:	3724      	adds	r7, #36	; 0x24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	58000400 	.word	0x58000400

0800c0c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	460b      	mov	r3, r1
 800c0ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	887b      	ldrh	r3, [r7, #2]
 800c0d6:	4013      	ands	r3, r2
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d002      	beq.n	800c0e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	73fb      	strb	r3, [r7, #15]
 800c0e0:	e001      	b.n	800c0e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c0e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3714      	adds	r7, #20
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	807b      	strh	r3, [r7, #2]
 800c100:	4613      	mov	r3, r2
 800c102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c104:	787b      	ldrb	r3, [r7, #1]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c10a:	887a      	ldrh	r2, [r7, #2]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c110:	e003      	b.n	800c11a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c112:	887b      	ldrh	r3, [r7, #2]
 800c114:	041a      	lsls	r2, r3, #16
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	619a      	str	r2, [r3, #24]
}
 800c11a:	bf00      	nop
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr

0800c126 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c126:	b480      	push	{r7}
 800c128:	b085      	sub	sp, #20
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	460b      	mov	r3, r1
 800c130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c138:	887a      	ldrh	r2, [r7, #2]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	4013      	ands	r3, r2
 800c13e:	041a      	lsls	r2, r3, #16
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	43d9      	mvns	r1, r3
 800c144:	887b      	ldrh	r3, [r7, #2]
 800c146:	400b      	ands	r3, r1
 800c148:	431a      	orrs	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	619a      	str	r2, [r3, #24]
}
 800c14e:	bf00      	nop
 800c150:	3714      	adds	r7, #20
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr

0800c15a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	4603      	mov	r3, r0
 800c162:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800c164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c168:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c16c:	88fb      	ldrh	r3, [r7, #6]
 800c16e:	4013      	ands	r3, r2
 800c170:	2b00      	cmp	r3, #0
 800c172:	d008      	beq.n	800c186 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c174:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c178:	88fb      	ldrh	r3, [r7, #6]
 800c17a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c17e:	88fb      	ldrh	r3, [r7, #6]
 800c180:	4618      	mov	r0, r3
 800c182:	f7f8 fc93 	bl	8004aac <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800c186:	bf00      	nop
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c19c:	2301      	movs	r3, #1
 800c19e:	e041      	b.n	800c224 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c1a8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f245 5255 	movw	r2, #21845	; 0x5555
 800c1b2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	6852      	ldr	r2, [r2, #4]
 800c1bc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	6892      	ldr	r2, [r2, #8]
 800c1c6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c1c8:	f7fb f8c4 	bl	8007354 <HAL_GetTick>
 800c1cc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1ce:	e00f      	b.n	800c1f0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c1d0:	f7fb f8c0 	bl	8007354 <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	2b31      	cmp	r3, #49	; 0x31
 800c1dc:	d908      	bls.n	800c1f0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	e019      	b.n	800c224 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68db      	ldr	r3, [r3, #12]
 800c1f6:	f003 0307 	and.w	r3, r3, #7
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1e8      	bne.n	800c1d0 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691a      	ldr	r2, [r3, #16]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d005      	beq.n	800c218 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	68d2      	ldr	r2, [r2, #12]
 800c214:	611a      	str	r2, [r3, #16]
 800c216:	e004      	b.n	800c222 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b083      	sub	sp, #12
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c23c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c254:	4b19      	ldr	r3, [pc, #100]	; (800c2bc <HAL_PWREx_ConfigSupply+0x70>)
 800c256:	68db      	ldr	r3, [r3, #12]
 800c258:	f003 0304 	and.w	r3, r3, #4
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d00a      	beq.n	800c276 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c260:	4b16      	ldr	r3, [pc, #88]	; (800c2bc <HAL_PWREx_ConfigSupply+0x70>)
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	f003 0307 	and.w	r3, r3, #7
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d001      	beq.n	800c272 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e01f      	b.n	800c2b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	e01d      	b.n	800c2b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c276:	4b11      	ldr	r3, [pc, #68]	; (800c2bc <HAL_PWREx_ConfigSupply+0x70>)
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	f023 0207 	bic.w	r2, r3, #7
 800c27e:	490f      	ldr	r1, [pc, #60]	; (800c2bc <HAL_PWREx_ConfigSupply+0x70>)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4313      	orrs	r3, r2
 800c284:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c286:	f7fb f865 	bl	8007354 <HAL_GetTick>
 800c28a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c28c:	e009      	b.n	800c2a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c28e:	f7fb f861 	bl	8007354 <HAL_GetTick>
 800c292:	4602      	mov	r2, r0
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	1ad3      	subs	r3, r2, r3
 800c298:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c29c:	d901      	bls.n	800c2a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e007      	b.n	800c2b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c2a2:	4b06      	ldr	r3, [pc, #24]	; (800c2bc <HAL_PWREx_ConfigSupply+0x70>)
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2ae:	d1ee      	bne.n	800c28e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c2b0:	2300      	movs	r3, #0
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	58024800 	.word	0x58024800

0800c2c0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af02      	add	r7, sp, #8
 800c2c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c2c8:	f7fb f844 	bl	8007354 <HAL_GetTick>
 800c2cc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d101      	bne.n	800c2d8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e05f      	b.n	800c398 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2de:	b2db      	uxtb	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d107      	bne.n	800c2f4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f7fa fb07 	bl	80068f8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c2ea:	f241 3188 	movw	r1, #5000	; 0x1388
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 fa5e 	bl	800c7b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	3b01      	subs	r3, #1
 800c304:	021a      	lsls	r2, r3, #8
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c312:	9300      	str	r3, [sp, #0]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	2200      	movs	r2, #0
 800c318:	2120      	movs	r1, #32
 800c31a:	6878      	ldr	r0, [r7, #4]
 800c31c:	f000 fa56 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c320:	4603      	mov	r3, r0
 800c322:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c324:	7afb      	ldrb	r3, [r7, #11]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d135      	bne.n	800c396 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	4b1b      	ldr	r3, [pc, #108]	; (800c3a0 <HAL_QSPI_Init+0xe0>)
 800c332:	4013      	ands	r3, r2
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6852      	ldr	r2, [r2, #4]
 800c338:	0611      	lsls	r1, r2, #24
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	68d2      	ldr	r2, [r2, #12]
 800c33e:	4311      	orrs	r1, r2
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	69d2      	ldr	r2, [r2, #28]
 800c344:	4311      	orrs	r1, r2
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	6a12      	ldr	r2, [r2, #32]
 800c34a:	4311      	orrs	r1, r2
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6812      	ldr	r2, [r2, #0]
 800c350:	430b      	orrs	r3, r1
 800c352:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	685a      	ldr	r2, [r3, #4]
 800c35a:	4b12      	ldr	r3, [pc, #72]	; (800c3a4 <HAL_QSPI_Init+0xe4>)
 800c35c:	4013      	ands	r3, r2
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	6912      	ldr	r2, [r2, #16]
 800c362:	0411      	lsls	r1, r2, #16
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6952      	ldr	r2, [r2, #20]
 800c368:	4311      	orrs	r1, r2
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	6992      	ldr	r2, [r2, #24]
 800c36e:	4311      	orrs	r1, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	6812      	ldr	r2, [r2, #0]
 800c374:	430b      	orrs	r3, r1
 800c376:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f042 0201 	orr.w	r2, r2, #1
 800c386:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2200      	movs	r2, #0
 800c38c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	2201      	movs	r2, #1
 800c392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800c396:	7afb      	ldrb	r3, [r7, #11]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	00ffff2f 	.word	0x00ffff2f
 800c3a4:	ffe0f8fe 	.word	0xffe0f8fe

0800c3a8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af02      	add	r7, sp, #8
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c3b4:	f7fa ffce 	bl	8007354 <HAL_GetTick>
 800c3b8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d101      	bne.n	800c3ca <HAL_QSPI_Command+0x22>
 800c3c6:	2302      	movs	r3, #2
 800c3c8:	e048      	b.n	800c45c <HAL_QSPI_Command+0xb4>
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d137      	bne.n	800c44e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	2120      	movs	r1, #32
 800c3f6:	68f8      	ldr	r0, [r7, #12]
 800c3f8:	f000 f9e8 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d125      	bne.n	800c452 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c406:	2200      	movs	r2, #0
 800c408:	68b9      	ldr	r1, [r7, #8]
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f000 fa15 	bl	800c83a <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c414:	2b00      	cmp	r3, #0
 800c416:	d115      	bne.n	800c444 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	9300      	str	r3, [sp, #0]
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	2201      	movs	r2, #1
 800c420:	2102      	movs	r1, #2
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f000 f9d2 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c428:	4603      	mov	r3, r0
 800c42a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d10f      	bne.n	800c452 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2202      	movs	r2, #2
 800c438:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	2201      	movs	r2, #1
 800c43e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c442:	e006      	b.n	800c452 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c44c:	e001      	b.n	800c452 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c44e:	2302      	movs	r3, #2
 800c450:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3718      	adds	r7, #24
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b08a      	sub	sp, #40	; 0x28
 800c468:	af02      	add	r7, sp, #8
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	60b9      	str	r1, [r7, #8]
 800c46e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c470:	2300      	movs	r3, #0
 800c472:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c474:	f7fa ff6e 	bl	8007354 <HAL_GetTick>
 800c478:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3320      	adds	r3, #32
 800c480:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d101      	bne.n	800c492 <HAL_QSPI_Transmit+0x2e>
 800c48e:	2302      	movs	r3, #2
 800c490:	e076      	b.n	800c580 <HAL_QSPI_Transmit+0x11c>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2201      	movs	r2, #1
 800c496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d165      	bne.n	800c572 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d056      	beq.n	800c560 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	2212      	movs	r2, #18
 800c4b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	1c5a      	adds	r2, r3, #1
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	1c5a      	adds	r2, r3, #1
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	68ba      	ldr	r2, [r7, #8]
 800c4d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	695a      	ldr	r2, [r3, #20]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c4e6:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c4e8:	e01b      	b.n	800c522 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	69bb      	ldr	r3, [r7, #24]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	2104      	movs	r1, #4
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f969 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c4fe:	7ffb      	ldrb	r3, [r7, #31]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d113      	bne.n	800c52c <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	781a      	ldrb	r2, [r3, #0]
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c512:	1c5a      	adds	r2, r3, #1
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c51c:	1e5a      	subs	r2, r3, #1
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1df      	bne.n	800c4ea <HAL_QSPI_Transmit+0x86>
 800c52a:	e000      	b.n	800c52e <HAL_QSPI_Transmit+0xca>
          break;
 800c52c:	bf00      	nop
      }

      if (status == HAL_OK)
 800c52e:	7ffb      	ldrb	r3, [r7, #31]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d110      	bne.n	800c556 <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	9300      	str	r3, [sp, #0]
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	2201      	movs	r2, #1
 800c53c:	2102      	movs	r1, #2
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 f944 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c544:	4603      	mov	r3, r0
 800c546:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c548:	7ffb      	ldrb	r3, [r7, #31]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d103      	bne.n	800c556 <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	2202      	movs	r2, #2
 800c554:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2201      	movs	r2, #1
 800c55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c55e:	e00a      	b.n	800c576 <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c564:	f043 0208 	orr.w	r2, r3, #8
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c56c:	2301      	movs	r3, #1
 800c56e:	77fb      	strb	r3, [r7, #31]
 800c570:	e001      	b.n	800c576 <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c572:	2302      	movs	r3, #2
 800c574:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c57e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3720      	adds	r7, #32
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b08a      	sub	sp, #40	; 0x28
 800c58c:	af02      	add	r7, sp, #8
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c598:	f7fa fedc 	bl	8007354 <HAL_GetTick>
 800c59c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	699b      	ldr	r3, [r3, #24]
 800c5a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3320      	adds	r3, #32
 800c5ac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d101      	bne.n	800c5be <HAL_QSPI_Receive+0x36>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e07d      	b.n	800c6ba <HAL_QSPI_Receive+0x132>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	d16c      	bne.n	800c6ac <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d05d      	beq.n	800c69a <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	2222      	movs	r2, #34	; 0x22
 800c5e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	691b      	ldr	r3, [r3, #16]
 800c5ec:	1c5a      	adds	r2, r3, #1
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	1c5a      	adds	r2, r3, #1
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	695b      	ldr	r3, [r3, #20]
 800c60a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c616:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	697a      	ldr	r2, [r7, #20]
 800c61e:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c620:	e01c      	b.n	800c65c <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	9300      	str	r3, [sp, #0]
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	2201      	movs	r2, #1
 800c62a:	2106      	movs	r1, #6
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f000 f8cd 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c632:	4603      	mov	r3, r0
 800c634:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c636:	7ffb      	ldrb	r3, [r7, #31]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d114      	bne.n	800c666 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	693a      	ldr	r2, [r7, #16]
 800c642:	7812      	ldrb	r2, [r2, #0]
 800c644:	b2d2      	uxtb	r2, r2
 800c646:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c656:	1e5a      	subs	r2, r3, #1
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1de      	bne.n	800c622 <HAL_QSPI_Receive+0x9a>
 800c664:	e000      	b.n	800c668 <HAL_QSPI_Receive+0xe0>
          break;
 800c666:	bf00      	nop
      }

      if (status == HAL_OK)
 800c668:	7ffb      	ldrb	r3, [r7, #31]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d110      	bne.n	800c690 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	2201      	movs	r2, #1
 800c676:	2102      	movs	r1, #2
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 f8a7 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c67e:	4603      	mov	r3, r0
 800c680:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c682:	7ffb      	ldrb	r3, [r7, #31]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2202      	movs	r2, #2
 800c68e:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c698:	e00a      	b.n	800c6b0 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c69e:	f043 0208 	orr.w	r2, r3, #8
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	77fb      	strb	r3, [r7, #31]
 800c6aa:	e001      	b.n	800c6b0 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c6ac:	2302      	movs	r3, #2
 800c6ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c6b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c6c2:	b580      	push	{r7, lr}
 800c6c4:	b088      	sub	sp, #32
 800c6c6:	af02      	add	r7, sp, #8
 800c6c8:	60f8      	str	r0, [r7, #12]
 800c6ca:	60b9      	str	r1, [r7, #8]
 800c6cc:	607a      	str	r2, [r7, #4]
 800c6ce:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c6d0:	f7fa fe40 	bl	8007354 <HAL_GetTick>
 800c6d4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c6dc:	b2db      	uxtb	r3, r3
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d101      	bne.n	800c6e6 <HAL_QSPI_AutoPolling+0x24>
 800c6e2:	2302      	movs	r3, #2
 800c6e4:	e060      	b.n	800c7a8 <HAL_QSPI_AutoPolling+0xe6>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d14f      	bne.n	800c79a <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2242      	movs	r2, #66	; 0x42
 800c704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	9300      	str	r3, [sp, #0]
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	2200      	movs	r2, #0
 800c710:	2120      	movs	r1, #32
 800c712:	68f8      	ldr	r0, [r7, #12]
 800c714:	f000 f85a 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c718:	4603      	mov	r3, r0
 800c71a:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c71c:	7dfb      	ldrb	r3, [r7, #23]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d13d      	bne.n	800c79e <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	687a      	ldr	r2, [r7, #4]
 800c728:	6812      	ldr	r2, [r2, #0]
 800c72a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	6852      	ldr	r2, [r2, #4]
 800c734:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6892      	ldr	r2, [r2, #8]
 800c73e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	691b      	ldr	r3, [r3, #16]
 800c74e:	431a      	orrs	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c758:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68da      	ldr	r2, [r3, #12]
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c766:	68b9      	ldr	r1, [r7, #8]
 800c768:	68f8      	ldr	r0, [r7, #12]
 800c76a:	f000 f866 	bl	800c83a <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	9300      	str	r3, [sp, #0]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	2201      	movs	r2, #1
 800c776:	2108      	movs	r1, #8
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 f827 	bl	800c7cc <QSPI_WaitFlagStateUntilTimeout>
 800c77e:	4603      	mov	r3, r0
 800c780:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c782:	7dfb      	ldrb	r3, [r7, #23]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d10a      	bne.n	800c79e <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2208      	movs	r2, #8
 800c78e:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2201      	movs	r2, #1
 800c794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c798:	e001      	b.n	800c79e <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c79a:	2302      	movs	r3, #2
 800c79c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	3718      	adds	r7, #24
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b083      	sub	sp, #12
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c7c0:	bf00      	nop
 800c7c2:	370c      	adds	r7, #12
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr

0800c7cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	603b      	str	r3, [r7, #0]
 800c7d8:	4613      	mov	r3, r2
 800c7da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c7dc:	e01a      	b.n	800c814 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e4:	d016      	beq.n	800c814 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7e6:	f7fa fdb5 	bl	8007354 <HAL_GetTick>
 800c7ea:	4602      	mov	r2, r0
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	1ad3      	subs	r3, r2, r3
 800c7f0:	69ba      	ldr	r2, [r7, #24]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d302      	bcc.n	800c7fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10b      	bne.n	800c814 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	2204      	movs	r2, #4
 800c800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c808:	f043 0201 	orr.w	r2, r3, #1
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e00e      	b.n	800c832 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	4013      	ands	r3, r2
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bf14      	ite	ne
 800c822:	2301      	movne	r3, #1
 800c824:	2300      	moveq	r3, #0
 800c826:	b2db      	uxtb	r3, r3
 800c828:	461a      	mov	r2, r3
 800c82a:	79fb      	ldrb	r3, [r7, #7]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d1d6      	bne.n	800c7de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c83a:	b480      	push	{r7}
 800c83c:	b085      	sub	sp, #20
 800c83e:	af00      	add	r7, sp, #0
 800c840:	60f8      	str	r0, [r7, #12]
 800c842:	60b9      	str	r1, [r7, #8]
 800c844:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <QSPI_Config+0x28>
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c854:	d005      	beq.n	800c862 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	3a01      	subs	r2, #1
 800c860:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	2b00      	cmp	r3, #0
 800c868:	f000 80b9 	beq.w	800c9de <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d05f      	beq.n	800c934 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	6892      	ldr	r2, [r2, #8]
 800c87c:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	69db      	ldr	r3, [r3, #28]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d031      	beq.n	800c8ea <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88e:	431a      	orrs	r2, r3
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c894:	431a      	orrs	r2, r3
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89a:	431a      	orrs	r2, r3
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	049b      	lsls	r3, r3, #18
 800c8a2:	431a      	orrs	r2, r3
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	691b      	ldr	r3, [r3, #16]
 800c8a8:	431a      	orrs	r2, r3
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	431a      	orrs	r2, r3
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	69db      	ldr	r3, [r3, #28]
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	699b      	ldr	r3, [r3, #24]
 800c8c0:	431a      	orrs	r2, r3
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	ea42 0103 	orr.w	r1, r2, r3
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c8da:	f000 812e 	beq.w	800cb3a <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68ba      	ldr	r2, [r7, #8]
 800c8e4:	6852      	ldr	r2, [r2, #4]
 800c8e6:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c8e8:	e127      	b.n	800cb3a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f2:	431a      	orrs	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8fe:	431a      	orrs	r2, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	695b      	ldr	r3, [r3, #20]
 800c904:	049b      	lsls	r3, r3, #18
 800c906:	431a      	orrs	r2, r3
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	431a      	orrs	r2, r3
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	431a      	orrs	r2, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	69db      	ldr	r3, [r3, #28]
 800c918:	431a      	orrs	r2, r3
 800c91a:	68bb      	ldr	r3, [r7, #8]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	431a      	orrs	r2, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	ea42 0103 	orr.w	r1, r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	687a      	ldr	r2, [r7, #4]
 800c92e:	430a      	orrs	r2, r1
 800c930:	615a      	str	r2, [r3, #20]
}
 800c932:	e102      	b.n	800cb3a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d02e      	beq.n	800c99a <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c944:	431a      	orrs	r2, r3
 800c946:	68bb      	ldr	r3, [r7, #8]
 800c948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94a:	431a      	orrs	r2, r3
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c950:	431a      	orrs	r2, r3
 800c952:	68bb      	ldr	r3, [r7, #8]
 800c954:	695b      	ldr	r3, [r3, #20]
 800c956:	049b      	lsls	r3, r3, #18
 800c958:	431a      	orrs	r2, r3
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	431a      	orrs	r2, r3
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	431a      	orrs	r2, r3
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	431a      	orrs	r2, r3
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	431a      	orrs	r2, r3
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	ea42 0103 	orr.w	r1, r2, r3
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	430a      	orrs	r2, r1
 800c982:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c98a:	f000 80d6 	beq.w	800cb3a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	6852      	ldr	r2, [r2, #4]
 800c996:	619a      	str	r2, [r3, #24]
}
 800c998:	e0cf      	b.n	800cb3a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a2:	431a      	orrs	r2, r3
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a8:	431a      	orrs	r2, r3
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	695b      	ldr	r3, [r3, #20]
 800c9b4:	049b      	lsls	r3, r3, #18
 800c9b6:	431a      	orrs	r2, r3
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	6a1b      	ldr	r3, [r3, #32]
 800c9bc:	431a      	orrs	r2, r3
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	431a      	orrs	r2, r3
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	431a      	orrs	r2, r3
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	ea42 0103 	orr.w	r1, r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	615a      	str	r2, [r3, #20]
}
 800c9dc:	e0ad      	b.n	800cb3a <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d058      	beq.n	800ca98 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	6892      	ldr	r2, [r2, #8]
 800c9ee:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d02d      	beq.n	800ca54 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca00:	431a      	orrs	r2, r3
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca06:	431a      	orrs	r2, r3
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca0c:	431a      	orrs	r2, r3
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	049b      	lsls	r3, r3, #18
 800ca14:	431a      	orrs	r2, r3
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	431a      	orrs	r2, r3
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	431a      	orrs	r2, r3
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	431a      	orrs	r2, r3
 800ca28:	68bb      	ldr	r3, [r7, #8]
 800ca2a:	69db      	ldr	r3, [r3, #28]
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	699b      	ldr	r3, [r3, #24]
 800ca32:	ea42 0103 	orr.w	r1, r2, r3
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ca46:	d078      	beq.n	800cb3a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	68ba      	ldr	r2, [r7, #8]
 800ca4e:	6852      	ldr	r2, [r2, #4]
 800ca50:	619a      	str	r2, [r3, #24]
}
 800ca52:	e072      	b.n	800cb3a <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5c:	431a      	orrs	r2, r3
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca62:	431a      	orrs	r2, r3
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	049b      	lsls	r3, r3, #18
 800ca70:	431a      	orrs	r2, r3
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	691b      	ldr	r3, [r3, #16]
 800ca76:	431a      	orrs	r2, r3
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	6a1b      	ldr	r3, [r3, #32]
 800ca7c:	431a      	orrs	r2, r3
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	431a      	orrs	r2, r3
 800ca84:	68bb      	ldr	r3, [r7, #8]
 800ca86:	699b      	ldr	r3, [r3, #24]
 800ca88:	ea42 0103 	orr.w	r1, r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	430a      	orrs	r2, r1
 800ca94:	615a      	str	r2, [r3, #20]
}
 800ca96:	e050      	b.n	800cb3a <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	69db      	ldr	r3, [r3, #28]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d02a      	beq.n	800caf6 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caa8:	431a      	orrs	r2, r3
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caae:	431a      	orrs	r2, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab4:	431a      	orrs	r2, r3
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	049b      	lsls	r3, r3, #18
 800cabc:	431a      	orrs	r2, r3
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	6a1b      	ldr	r3, [r3, #32]
 800cac2:	431a      	orrs	r2, r3
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	431a      	orrs	r2, r3
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	69db      	ldr	r3, [r3, #28]
 800cace:	431a      	orrs	r2, r3
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	ea42 0103 	orr.w	r1, r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	430a      	orrs	r2, r1
 800cae0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cae8:	d027      	beq.n	800cb3a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	6852      	ldr	r2, [r2, #4]
 800caf2:	619a      	str	r2, [r3, #24]
}
 800caf4:	e021      	b.n	800cb3a <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d01d      	beq.n	800cb3a <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb06:	431a      	orrs	r2, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb0c:	431a      	orrs	r2, r3
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb12:	431a      	orrs	r2, r3
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	695b      	ldr	r3, [r3, #20]
 800cb18:	049b      	lsls	r3, r3, #18
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	6a1b      	ldr	r3, [r3, #32]
 800cb20:	431a      	orrs	r2, r3
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	431a      	orrs	r2, r3
 800cb28:	68bb      	ldr	r3, [r7, #8]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	ea42 0103 	orr.w	r1, r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	430a      	orrs	r2, r1
 800cb38:	615a      	str	r2, [r3, #20]
}
 800cb3a:	bf00      	nop
 800cb3c:	3714      	adds	r7, #20
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
	...

0800cb48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b08c      	sub	sp, #48	; 0x30
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d102      	bne.n	800cb5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cb56:	2301      	movs	r3, #1
 800cb58:	f000 bc48 	b.w	800d3ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 0301 	and.w	r3, r3, #1
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 8088 	beq.w	800cc7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cb6a:	4b99      	ldr	r3, [pc, #612]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb72:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cb74:	4b96      	ldr	r3, [pc, #600]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb78:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7c:	2b10      	cmp	r3, #16
 800cb7e:	d007      	beq.n	800cb90 <HAL_RCC_OscConfig+0x48>
 800cb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb82:	2b18      	cmp	r3, #24
 800cb84:	d111      	bne.n	800cbaa <HAL_RCC_OscConfig+0x62>
 800cb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb88:	f003 0303 	and.w	r3, r3, #3
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d10c      	bne.n	800cbaa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb90:	4b8f      	ldr	r3, [pc, #572]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d06d      	beq.n	800cc78 <HAL_RCC_OscConfig+0x130>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d169      	bne.n	800cc78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cba4:	2301      	movs	r3, #1
 800cba6:	f000 bc21 	b.w	800d3ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cbb2:	d106      	bne.n	800cbc2 <HAL_RCC_OscConfig+0x7a>
 800cbb4:	4b86      	ldr	r3, [pc, #536]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a85      	ldr	r2, [pc, #532]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	e02e      	b.n	800cc20 <HAL_RCC_OscConfig+0xd8>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10c      	bne.n	800cbe4 <HAL_RCC_OscConfig+0x9c>
 800cbca:	4b81      	ldr	r3, [pc, #516]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a80      	ldr	r2, [pc, #512]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cbd4:	6013      	str	r3, [r2, #0]
 800cbd6:	4b7e      	ldr	r3, [pc, #504]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	4a7d      	ldr	r2, [pc, #500]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cbe0:	6013      	str	r3, [r2, #0]
 800cbe2:	e01d      	b.n	800cc20 <HAL_RCC_OscConfig+0xd8>
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cbec:	d10c      	bne.n	800cc08 <HAL_RCC_OscConfig+0xc0>
 800cbee:	4b78      	ldr	r3, [pc, #480]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a77      	ldr	r2, [pc, #476]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	4b75      	ldr	r3, [pc, #468]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4a74      	ldr	r2, [pc, #464]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc04:	6013      	str	r3, [r2, #0]
 800cc06:	e00b      	b.n	800cc20 <HAL_RCC_OscConfig+0xd8>
 800cc08:	4b71      	ldr	r3, [pc, #452]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a70      	ldr	r2, [pc, #448]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	4b6e      	ldr	r3, [pc, #440]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a6d      	ldr	r2, [pc, #436]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685b      	ldr	r3, [r3, #4]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d013      	beq.n	800cc50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc28:	f7fa fb94 	bl	8007354 <HAL_GetTick>
 800cc2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc2e:	e008      	b.n	800cc42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc30:	f7fa fb90 	bl	8007354 <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	2b64      	cmp	r3, #100	; 0x64
 800cc3c:	d901      	bls.n	800cc42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e3d4      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc42:	4b63      	ldr	r3, [pc, #396]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d0f0      	beq.n	800cc30 <HAL_RCC_OscConfig+0xe8>
 800cc4e:	e014      	b.n	800cc7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc50:	f7fa fb80 	bl	8007354 <HAL_GetTick>
 800cc54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc56:	e008      	b.n	800cc6a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc58:	f7fa fb7c 	bl	8007354 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2b64      	cmp	r3, #100	; 0x64
 800cc64:	d901      	bls.n	800cc6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e3c0      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cc6a:	4b59      	ldr	r3, [pc, #356]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1f0      	bne.n	800cc58 <HAL_RCC_OscConfig+0x110>
 800cc76:	e000      	b.n	800cc7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 80ca 	beq.w	800ce1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cc88:	4b51      	ldr	r3, [pc, #324]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc8a:	691b      	ldr	r3, [r3, #16]
 800cc8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cc90:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cc92:	4b4f      	ldr	r3, [pc, #316]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc96:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cc98:	6a3b      	ldr	r3, [r7, #32]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d007      	beq.n	800ccae <HAL_RCC_OscConfig+0x166>
 800cc9e:	6a3b      	ldr	r3, [r7, #32]
 800cca0:	2b18      	cmp	r3, #24
 800cca2:	d156      	bne.n	800cd52 <HAL_RCC_OscConfig+0x20a>
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	f003 0303 	and.w	r3, r3, #3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d151      	bne.n	800cd52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ccae:	4b48      	ldr	r3, [pc, #288]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f003 0304 	and.w	r3, r3, #4
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d005      	beq.n	800ccc6 <HAL_RCC_OscConfig+0x17e>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e392      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ccc6:	4b42      	ldr	r3, [pc, #264]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f023 0219 	bic.w	r2, r3, #25
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	493f      	ldr	r1, [pc, #252]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccd8:	f7fa fb3c 	bl	8007354 <HAL_GetTick>
 800ccdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ccde:	e008      	b.n	800ccf2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cce0:	f7fa fb38 	bl	8007354 <HAL_GetTick>
 800cce4:	4602      	mov	r2, r0
 800cce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce8:	1ad3      	subs	r3, r2, r3
 800ccea:	2b02      	cmp	r3, #2
 800ccec:	d901      	bls.n	800ccf2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e37c      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ccf2:	4b37      	ldr	r3, [pc, #220]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d0f0      	beq.n	800cce0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccfe:	f7fa fb59 	bl	80073b4 <HAL_GetREVID>
 800cd02:	4603      	mov	r3, r0
 800cd04:	f241 0203 	movw	r2, #4099	; 0x1003
 800cd08:	4293      	cmp	r3, r2
 800cd0a:	d817      	bhi.n	800cd3c <HAL_RCC_OscConfig+0x1f4>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	691b      	ldr	r3, [r3, #16]
 800cd10:	2b40      	cmp	r3, #64	; 0x40
 800cd12:	d108      	bne.n	800cd26 <HAL_RCC_OscConfig+0x1de>
 800cd14:	4b2e      	ldr	r3, [pc, #184]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cd1c:	4a2c      	ldr	r2, [pc, #176]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd24:	e07a      	b.n	800ce1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd26:	4b2a      	ldr	r3, [pc, #168]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	691b      	ldr	r3, [r3, #16]
 800cd32:	031b      	lsls	r3, r3, #12
 800cd34:	4926      	ldr	r1, [pc, #152]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd36:	4313      	orrs	r3, r2
 800cd38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd3a:	e06f      	b.n	800ce1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd3c:	4b24      	ldr	r3, [pc, #144]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	061b      	lsls	r3, r3, #24
 800cd4a:	4921      	ldr	r1, [pc, #132]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd4c:	4313      	orrs	r3, r2
 800cd4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd50:	e064      	b.n	800ce1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	68db      	ldr	r3, [r3, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d047      	beq.n	800cdea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cd5a:	4b1d      	ldr	r3, [pc, #116]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f023 0219 	bic.w	r2, r3, #25
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	491a      	ldr	r1, [pc, #104]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd68:	4313      	orrs	r3, r2
 800cd6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd6c:	f7fa faf2 	bl	8007354 <HAL_GetTick>
 800cd70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd72:	e008      	b.n	800cd86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd74:	f7fa faee 	bl	8007354 <HAL_GetTick>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7c:	1ad3      	subs	r3, r2, r3
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d901      	bls.n	800cd86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e332      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd86:	4b12      	ldr	r3, [pc, #72]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f003 0304 	and.w	r3, r3, #4
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d0f0      	beq.n	800cd74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd92:	f7fa fb0f 	bl	80073b4 <HAL_GetREVID>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f241 0203 	movw	r2, #4099	; 0x1003
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d819      	bhi.n	800cdd4 <HAL_RCC_OscConfig+0x28c>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	691b      	ldr	r3, [r3, #16]
 800cda4:	2b40      	cmp	r3, #64	; 0x40
 800cda6:	d108      	bne.n	800cdba <HAL_RCC_OscConfig+0x272>
 800cda8:	4b09      	ldr	r3, [pc, #36]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cdb0:	4a07      	ldr	r2, [pc, #28]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cdb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdb6:	6053      	str	r3, [r2, #4]
 800cdb8:	e030      	b.n	800ce1c <HAL_RCC_OscConfig+0x2d4>
 800cdba:	4b05      	ldr	r3, [pc, #20]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	691b      	ldr	r3, [r3, #16]
 800cdc6:	031b      	lsls	r3, r3, #12
 800cdc8:	4901      	ldr	r1, [pc, #4]	; (800cdd0 <HAL_RCC_OscConfig+0x288>)
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	604b      	str	r3, [r1, #4]
 800cdce:	e025      	b.n	800ce1c <HAL_RCC_OscConfig+0x2d4>
 800cdd0:	58024400 	.word	0x58024400
 800cdd4:	4b9a      	ldr	r3, [pc, #616]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	061b      	lsls	r3, r3, #24
 800cde2:	4997      	ldr	r1, [pc, #604]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cde4:	4313      	orrs	r3, r2
 800cde6:	604b      	str	r3, [r1, #4]
 800cde8:	e018      	b.n	800ce1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdea:	4b95      	ldr	r3, [pc, #596]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a94      	ldr	r2, [pc, #592]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cdf0:	f023 0301 	bic.w	r3, r3, #1
 800cdf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdf6:	f7fa faad 	bl	8007354 <HAL_GetTick>
 800cdfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cdfc:	e008      	b.n	800ce10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdfe:	f7fa faa9 	bl	8007354 <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d901      	bls.n	800ce10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e2ed      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce10:	4b8b      	ldr	r3, [pc, #556]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 0304 	and.w	r3, r3, #4
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f0      	bne.n	800cdfe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f003 0310 	and.w	r3, r3, #16
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 80a9 	beq.w	800cf7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce2a:	4b85      	ldr	r3, [pc, #532]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce2c:	691b      	ldr	r3, [r3, #16]
 800ce2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ce34:	4b82      	ldr	r3, [pc, #520]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ce3a:	69bb      	ldr	r3, [r7, #24]
 800ce3c:	2b08      	cmp	r3, #8
 800ce3e:	d007      	beq.n	800ce50 <HAL_RCC_OscConfig+0x308>
 800ce40:	69bb      	ldr	r3, [r7, #24]
 800ce42:	2b18      	cmp	r3, #24
 800ce44:	d13a      	bne.n	800cebc <HAL_RCC_OscConfig+0x374>
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	f003 0303 	and.w	r3, r3, #3
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d135      	bne.n	800cebc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce50:	4b7b      	ldr	r3, [pc, #492]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <HAL_RCC_OscConfig+0x320>
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	69db      	ldr	r3, [r3, #28]
 800ce60:	2b80      	cmp	r3, #128	; 0x80
 800ce62:	d001      	beq.n	800ce68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ce64:	2301      	movs	r3, #1
 800ce66:	e2c1      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce68:	f7fa faa4 	bl	80073b4 <HAL_GetREVID>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	f241 0203 	movw	r2, #4099	; 0x1003
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d817      	bhi.n	800cea6 <HAL_RCC_OscConfig+0x35e>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6a1b      	ldr	r3, [r3, #32]
 800ce7a:	2b20      	cmp	r3, #32
 800ce7c:	d108      	bne.n	800ce90 <HAL_RCC_OscConfig+0x348>
 800ce7e:	4b70      	ldr	r3, [pc, #448]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ce86:	4a6e      	ldr	r2, [pc, #440]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ce8e:	e075      	b.n	800cf7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ce90:	4b6b      	ldr	r3, [pc, #428]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ce92:	685b      	ldr	r3, [r3, #4]
 800ce94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a1b      	ldr	r3, [r3, #32]
 800ce9c:	069b      	lsls	r3, r3, #26
 800ce9e:	4968      	ldr	r1, [pc, #416]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cea0:	4313      	orrs	r3, r2
 800cea2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cea4:	e06a      	b.n	800cf7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cea6:	4b66      	ldr	r3, [pc, #408]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a1b      	ldr	r3, [r3, #32]
 800ceb2:	061b      	lsls	r3, r3, #24
 800ceb4:	4962      	ldr	r1, [pc, #392]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ceba:	e05f      	b.n	800cf7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	69db      	ldr	r3, [r3, #28]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d042      	beq.n	800cf4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cec4:	4b5e      	ldr	r3, [pc, #376]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4a5d      	ldr	r2, [pc, #372]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ceca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ced0:	f7fa fa40 	bl	8007354 <HAL_GetTick>
 800ced4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ced6:	e008      	b.n	800ceea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ced8:	f7fa fa3c 	bl	8007354 <HAL_GetTick>
 800cedc:	4602      	mov	r2, r0
 800cede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee0:	1ad3      	subs	r3, r2, r3
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d901      	bls.n	800ceea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cee6:	2303      	movs	r3, #3
 800cee8:	e280      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ceea:	4b55      	ldr	r3, [pc, #340]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d0f0      	beq.n	800ced8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cef6:	f7fa fa5d 	bl	80073b4 <HAL_GetREVID>
 800cefa:	4603      	mov	r3, r0
 800cefc:	f241 0203 	movw	r2, #4099	; 0x1003
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d817      	bhi.n	800cf34 <HAL_RCC_OscConfig+0x3ec>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6a1b      	ldr	r3, [r3, #32]
 800cf08:	2b20      	cmp	r3, #32
 800cf0a:	d108      	bne.n	800cf1e <HAL_RCC_OscConfig+0x3d6>
 800cf0c:	4b4c      	ldr	r3, [pc, #304]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cf14:	4a4a      	ldr	r2, [pc, #296]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf1a:	6053      	str	r3, [r2, #4]
 800cf1c:	e02e      	b.n	800cf7c <HAL_RCC_OscConfig+0x434>
 800cf1e:	4b48      	ldr	r3, [pc, #288]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6a1b      	ldr	r3, [r3, #32]
 800cf2a:	069b      	lsls	r3, r3, #26
 800cf2c:	4944      	ldr	r1, [pc, #272]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	604b      	str	r3, [r1, #4]
 800cf32:	e023      	b.n	800cf7c <HAL_RCC_OscConfig+0x434>
 800cf34:	4b42      	ldr	r3, [pc, #264]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a1b      	ldr	r3, [r3, #32]
 800cf40:	061b      	lsls	r3, r3, #24
 800cf42:	493f      	ldr	r1, [pc, #252]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf44:	4313      	orrs	r3, r2
 800cf46:	60cb      	str	r3, [r1, #12]
 800cf48:	e018      	b.n	800cf7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cf4a:	4b3d      	ldr	r3, [pc, #244]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a3c      	ldr	r2, [pc, #240]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cf54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf56:	f7fa f9fd 	bl	8007354 <HAL_GetTick>
 800cf5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf5c:	e008      	b.n	800cf70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf5e:	f7fa f9f9 	bl	8007354 <HAL_GetTick>
 800cf62:	4602      	mov	r2, r0
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	1ad3      	subs	r3, r2, r3
 800cf68:	2b02      	cmp	r3, #2
 800cf6a:	d901      	bls.n	800cf70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e23d      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cf70:	4b33      	ldr	r3, [pc, #204]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1f0      	bne.n	800cf5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f003 0308 	and.w	r3, r3, #8
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d036      	beq.n	800cff6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	695b      	ldr	r3, [r3, #20]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d019      	beq.n	800cfc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf90:	4b2b      	ldr	r3, [pc, #172]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf94:	4a2a      	ldr	r2, [pc, #168]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cf96:	f043 0301 	orr.w	r3, r3, #1
 800cf9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf9c:	f7fa f9da 	bl	8007354 <HAL_GetTick>
 800cfa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cfa2:	e008      	b.n	800cfb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfa4:	f7fa f9d6 	bl	8007354 <HAL_GetTick>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfac:	1ad3      	subs	r3, r2, r3
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d901      	bls.n	800cfb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e21a      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cfb6:	4b22      	ldr	r3, [pc, #136]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cfb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfba:	f003 0302 	and.w	r3, r3, #2
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d0f0      	beq.n	800cfa4 <HAL_RCC_OscConfig+0x45c>
 800cfc2:	e018      	b.n	800cff6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cfc4:	4b1e      	ldr	r3, [pc, #120]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cfc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfc8:	4a1d      	ldr	r2, [pc, #116]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cfca:	f023 0301 	bic.w	r3, r3, #1
 800cfce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfd0:	f7fa f9c0 	bl	8007354 <HAL_GetTick>
 800cfd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cfd6:	e008      	b.n	800cfea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cfd8:	f7fa f9bc 	bl	8007354 <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	2b02      	cmp	r3, #2
 800cfe4:	d901      	bls.n	800cfea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cfe6:	2303      	movs	r3, #3
 800cfe8:	e200      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cfea:	4b15      	ldr	r3, [pc, #84]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800cfec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfee:	f003 0302 	and.w	r3, r3, #2
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1f0      	bne.n	800cfd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 0320 	and.w	r3, r3, #32
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d039      	beq.n	800d076 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d01c      	beq.n	800d044 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d00a:	4b0d      	ldr	r3, [pc, #52]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a0c      	ldr	r2, [pc, #48]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800d010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d014:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d016:	f7fa f99d 	bl	8007354 <HAL_GetTick>
 800d01a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d01c:	e008      	b.n	800d030 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d01e:	f7fa f999 	bl	8007354 <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d901      	bls.n	800d030 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d02c:	2303      	movs	r3, #3
 800d02e:	e1dd      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d030:	4b03      	ldr	r3, [pc, #12]	; (800d040 <HAL_RCC_OscConfig+0x4f8>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d0f0      	beq.n	800d01e <HAL_RCC_OscConfig+0x4d6>
 800d03c:	e01b      	b.n	800d076 <HAL_RCC_OscConfig+0x52e>
 800d03e:	bf00      	nop
 800d040:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d044:	4b9b      	ldr	r3, [pc, #620]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4a9a      	ldr	r2, [pc, #616]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d04a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d04e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d050:	f7fa f980 	bl	8007354 <HAL_GetTick>
 800d054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d056:	e008      	b.n	800d06a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d058:	f7fa f97c 	bl	8007354 <HAL_GetTick>
 800d05c:	4602      	mov	r2, r0
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	2b02      	cmp	r3, #2
 800d064:	d901      	bls.n	800d06a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d066:	2303      	movs	r3, #3
 800d068:	e1c0      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d06a:	4b92      	ldr	r3, [pc, #584]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1f0      	bne.n	800d058 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	f003 0304 	and.w	r3, r3, #4
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 8081 	beq.w	800d186 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d084:	4b8c      	ldr	r3, [pc, #560]	; (800d2b8 <HAL_RCC_OscConfig+0x770>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a8b      	ldr	r2, [pc, #556]	; (800d2b8 <HAL_RCC_OscConfig+0x770>)
 800d08a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d08e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d090:	f7fa f960 	bl	8007354 <HAL_GetTick>
 800d094:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d096:	e008      	b.n	800d0aa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d098:	f7fa f95c 	bl	8007354 <HAL_GetTick>
 800d09c:	4602      	mov	r2, r0
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	1ad3      	subs	r3, r2, r3
 800d0a2:	2b64      	cmp	r3, #100	; 0x64
 800d0a4:	d901      	bls.n	800d0aa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	e1a0      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0aa:	4b83      	ldr	r3, [pc, #524]	; (800d2b8 <HAL_RCC_OscConfig+0x770>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d0f0      	beq.n	800d098 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d106      	bne.n	800d0cc <HAL_RCC_OscConfig+0x584>
 800d0be:	4b7d      	ldr	r3, [pc, #500]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c2:	4a7c      	ldr	r2, [pc, #496]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0c4:	f043 0301 	orr.w	r3, r3, #1
 800d0c8:	6713      	str	r3, [r2, #112]	; 0x70
 800d0ca:	e02d      	b.n	800d128 <HAL_RCC_OscConfig+0x5e0>
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d10c      	bne.n	800d0ee <HAL_RCC_OscConfig+0x5a6>
 800d0d4:	4b77      	ldr	r3, [pc, #476]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d8:	4a76      	ldr	r2, [pc, #472]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0da:	f023 0301 	bic.w	r3, r3, #1
 800d0de:	6713      	str	r3, [r2, #112]	; 0x70
 800d0e0:	4b74      	ldr	r3, [pc, #464]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0e4:	4a73      	ldr	r2, [pc, #460]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0e6:	f023 0304 	bic.w	r3, r3, #4
 800d0ea:	6713      	str	r3, [r2, #112]	; 0x70
 800d0ec:	e01c      	b.n	800d128 <HAL_RCC_OscConfig+0x5e0>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	689b      	ldr	r3, [r3, #8]
 800d0f2:	2b05      	cmp	r3, #5
 800d0f4:	d10c      	bne.n	800d110 <HAL_RCC_OscConfig+0x5c8>
 800d0f6:	4b6f      	ldr	r3, [pc, #444]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0fa:	4a6e      	ldr	r2, [pc, #440]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d0fc:	f043 0304 	orr.w	r3, r3, #4
 800d100:	6713      	str	r3, [r2, #112]	; 0x70
 800d102:	4b6c      	ldr	r3, [pc, #432]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d106:	4a6b      	ldr	r2, [pc, #428]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d108:	f043 0301 	orr.w	r3, r3, #1
 800d10c:	6713      	str	r3, [r2, #112]	; 0x70
 800d10e:	e00b      	b.n	800d128 <HAL_RCC_OscConfig+0x5e0>
 800d110:	4b68      	ldr	r3, [pc, #416]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d114:	4a67      	ldr	r2, [pc, #412]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d116:	f023 0301 	bic.w	r3, r3, #1
 800d11a:	6713      	str	r3, [r2, #112]	; 0x70
 800d11c:	4b65      	ldr	r3, [pc, #404]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d120:	4a64      	ldr	r2, [pc, #400]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d122:	f023 0304 	bic.w	r3, r3, #4
 800d126:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d015      	beq.n	800d15c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d130:	f7fa f910 	bl	8007354 <HAL_GetTick>
 800d134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d136:	e00a      	b.n	800d14e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d138:	f7fa f90c 	bl	8007354 <HAL_GetTick>
 800d13c:	4602      	mov	r2, r0
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	1ad3      	subs	r3, r2, r3
 800d142:	f241 3288 	movw	r2, #5000	; 0x1388
 800d146:	4293      	cmp	r3, r2
 800d148:	d901      	bls.n	800d14e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	e14e      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d14e:	4b59      	ldr	r3, [pc, #356]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d152:	f003 0302 	and.w	r3, r3, #2
 800d156:	2b00      	cmp	r3, #0
 800d158:	d0ee      	beq.n	800d138 <HAL_RCC_OscConfig+0x5f0>
 800d15a:	e014      	b.n	800d186 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d15c:	f7fa f8fa 	bl	8007354 <HAL_GetTick>
 800d160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d162:	e00a      	b.n	800d17a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d164:	f7fa f8f6 	bl	8007354 <HAL_GetTick>
 800d168:	4602      	mov	r2, r0
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d172:	4293      	cmp	r3, r2
 800d174:	d901      	bls.n	800d17a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d176:	2303      	movs	r3, #3
 800d178:	e138      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d17a:	4b4e      	ldr	r3, [pc, #312]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	f003 0302 	and.w	r3, r3, #2
 800d182:	2b00      	cmp	r3, #0
 800d184:	d1ee      	bne.n	800d164 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	f000 812d 	beq.w	800d3ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d190:	4b48      	ldr	r3, [pc, #288]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d192:	691b      	ldr	r3, [r3, #16]
 800d194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d198:	2b18      	cmp	r3, #24
 800d19a:	f000 80bd 	beq.w	800d318 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	f040 809e 	bne.w	800d2e4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1a8:	4b42      	ldr	r3, [pc, #264]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a41      	ldr	r2, [pc, #260]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d1ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1b4:	f7fa f8ce 	bl	8007354 <HAL_GetTick>
 800d1b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1ba:	e008      	b.n	800d1ce <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d1bc:	f7fa f8ca 	bl	8007354 <HAL_GetTick>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	1ad3      	subs	r3, r2, r3
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	d901      	bls.n	800d1ce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e10e      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d1ce:	4b39      	ldr	r3, [pc, #228]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1f0      	bne.n	800d1bc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d1da:	4b36      	ldr	r3, [pc, #216]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d1dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d1de:	4b37      	ldr	r3, [pc, #220]	; (800d2bc <HAL_RCC_OscConfig+0x774>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d1e6:	687a      	ldr	r2, [r7, #4]
 800d1e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d1ea:	0112      	lsls	r2, r2, #4
 800d1ec:	430a      	orrs	r2, r1
 800d1ee:	4931      	ldr	r1, [pc, #196]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	628b      	str	r3, [r1, #40]	; 0x28
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f8:	3b01      	subs	r3, #1
 800d1fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d202:	3b01      	subs	r3, #1
 800d204:	025b      	lsls	r3, r3, #9
 800d206:	b29b      	uxth	r3, r3
 800d208:	431a      	orrs	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20e:	3b01      	subs	r3, #1
 800d210:	041b      	lsls	r3, r3, #16
 800d212:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d216:	431a      	orrs	r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d21c:	3b01      	subs	r3, #1
 800d21e:	061b      	lsls	r3, r3, #24
 800d220:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d224:	4923      	ldr	r1, [pc, #140]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d226:	4313      	orrs	r3, r2
 800d228:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d22a:	4b22      	ldr	r3, [pc, #136]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22e:	4a21      	ldr	r2, [pc, #132]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d230:	f023 0301 	bic.w	r3, r3, #1
 800d234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d236:	4b1f      	ldr	r3, [pc, #124]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d23a:	4b21      	ldr	r3, [pc, #132]	; (800d2c0 <HAL_RCC_OscConfig+0x778>)
 800d23c:	4013      	ands	r3, r2
 800d23e:	687a      	ldr	r2, [r7, #4]
 800d240:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d242:	00d2      	lsls	r2, r2, #3
 800d244:	491b      	ldr	r1, [pc, #108]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d246:	4313      	orrs	r3, r2
 800d248:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d24a:	4b1a      	ldr	r3, [pc, #104]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	f023 020c 	bic.w	r2, r3, #12
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d256:	4917      	ldr	r1, [pc, #92]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d258:	4313      	orrs	r3, r2
 800d25a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d25c:	4b15      	ldr	r3, [pc, #84]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d260:	f023 0202 	bic.w	r2, r3, #2
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d268:	4912      	ldr	r1, [pc, #72]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d26a:	4313      	orrs	r3, r2
 800d26c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d26e:	4b11      	ldr	r3, [pc, #68]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d272:	4a10      	ldr	r2, [pc, #64]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d278:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d27a:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27e:	4a0d      	ldr	r2, [pc, #52]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d286:	4b0b      	ldr	r3, [pc, #44]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28a:	4a0a      	ldr	r2, [pc, #40]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d28c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d290:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d292:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	4a07      	ldr	r2, [pc, #28]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d298:	f043 0301 	orr.w	r3, r3, #1
 800d29c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d29e:	4b05      	ldr	r3, [pc, #20]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	4a04      	ldr	r2, [pc, #16]	; (800d2b4 <HAL_RCC_OscConfig+0x76c>)
 800d2a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2aa:	f7fa f853 	bl	8007354 <HAL_GetTick>
 800d2ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2b0:	e011      	b.n	800d2d6 <HAL_RCC_OscConfig+0x78e>
 800d2b2:	bf00      	nop
 800d2b4:	58024400 	.word	0x58024400
 800d2b8:	58024800 	.word	0x58024800
 800d2bc:	fffffc0c 	.word	0xfffffc0c
 800d2c0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2c4:	f7fa f846 	bl	8007354 <HAL_GetTick>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	2b02      	cmp	r3, #2
 800d2d0:	d901      	bls.n	800d2d6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d2d2:	2303      	movs	r3, #3
 800d2d4:	e08a      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2d6:	4b47      	ldr	r3, [pc, #284]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d0f0      	beq.n	800d2c4 <HAL_RCC_OscConfig+0x77c>
 800d2e2:	e082      	b.n	800d3ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d2e4:	4b43      	ldr	r3, [pc, #268]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a42      	ldr	r2, [pc, #264]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d2ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d2ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2f0:	f7fa f830 	bl	8007354 <HAL_GetTick>
 800d2f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d2f6:	e008      	b.n	800d30a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d2f8:	f7fa f82c 	bl	8007354 <HAL_GetTick>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	2b02      	cmp	r3, #2
 800d304:	d901      	bls.n	800d30a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d306:	2303      	movs	r3, #3
 800d308:	e070      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d30a:	4b3a      	ldr	r3, [pc, #232]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1f0      	bne.n	800d2f8 <HAL_RCC_OscConfig+0x7b0>
 800d316:	e068      	b.n	800d3ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d318:	4b36      	ldr	r3, [pc, #216]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d31c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d31e:	4b35      	ldr	r3, [pc, #212]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d322:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d031      	beq.n	800d390 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f003 0203 	and.w	r2, r3, #3
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d336:	429a      	cmp	r2, r3
 800d338:	d12a      	bne.n	800d390 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	091b      	lsrs	r3, r3, #4
 800d33e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d346:	429a      	cmp	r2, r3
 800d348:	d122      	bne.n	800d390 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d354:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d356:	429a      	cmp	r2, r3
 800d358:	d11a      	bne.n	800d390 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	0a5b      	lsrs	r3, r3, #9
 800d35e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d366:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d368:	429a      	cmp	r2, r3
 800d36a:	d111      	bne.n	800d390 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	0c1b      	lsrs	r3, r3, #16
 800d370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d378:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d108      	bne.n	800d390 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	0e1b      	lsrs	r3, r3, #24
 800d382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d38a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d001      	beq.n	800d394 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d390:	2301      	movs	r3, #1
 800d392:	e02b      	b.n	800d3ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d394:	4b17      	ldr	r3, [pc, #92]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d398:	08db      	lsrs	r3, r3, #3
 800d39a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d39e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a4:	693a      	ldr	r2, [r7, #16]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d01f      	beq.n	800d3ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d3aa:	4b12      	ldr	r3, [pc, #72]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ae:	4a11      	ldr	r2, [pc, #68]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d3b0:	f023 0301 	bic.w	r3, r3, #1
 800d3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d3b6:	f7f9 ffcd 	bl	8007354 <HAL_GetTick>
 800d3ba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d3bc:	bf00      	nop
 800d3be:	f7f9 ffc9 	bl	8007354 <HAL_GetTick>
 800d3c2:	4602      	mov	r2, r0
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d0f9      	beq.n	800d3be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d3ca:	4b0a      	ldr	r3, [pc, #40]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d3cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3ce:	4b0a      	ldr	r3, [pc, #40]	; (800d3f8 <HAL_RCC_OscConfig+0x8b0>)
 800d3d0:	4013      	ands	r3, r2
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d3d6:	00d2      	lsls	r2, r2, #3
 800d3d8:	4906      	ldr	r1, [pc, #24]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d3de:	4b05      	ldr	r3, [pc, #20]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e2:	4a04      	ldr	r2, [pc, #16]	; (800d3f4 <HAL_RCC_OscConfig+0x8ac>)
 800d3e4:	f043 0301 	orr.w	r3, r3, #1
 800d3e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3730      	adds	r7, #48	; 0x30
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	58024400 	.word	0x58024400
 800d3f8:	ffff0007 	.word	0xffff0007

0800d3fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d101      	bne.n	800d410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e19c      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d410:	4b8a      	ldr	r3, [pc, #552]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f003 030f 	and.w	r3, r3, #15
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d910      	bls.n	800d440 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d41e:	4b87      	ldr	r3, [pc, #540]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f023 020f 	bic.w	r2, r3, #15
 800d426:	4985      	ldr	r1, [pc, #532]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	4313      	orrs	r3, r2
 800d42c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d42e:	4b83      	ldr	r3, [pc, #524]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f003 030f 	and.w	r3, r3, #15
 800d436:	683a      	ldr	r2, [r7, #0]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d001      	beq.n	800d440 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d43c:	2301      	movs	r3, #1
 800d43e:	e184      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f003 0304 	and.w	r3, r3, #4
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d010      	beq.n	800d46e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	691a      	ldr	r2, [r3, #16]
 800d450:	4b7b      	ldr	r3, [pc, #492]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d458:	429a      	cmp	r2, r3
 800d45a:	d908      	bls.n	800d46e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d45c:	4b78      	ldr	r3, [pc, #480]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	4975      	ldr	r1, [pc, #468]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d46a:	4313      	orrs	r3, r2
 800d46c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 0308 	and.w	r3, r3, #8
 800d476:	2b00      	cmp	r3, #0
 800d478:	d010      	beq.n	800d49c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	695a      	ldr	r2, [r3, #20]
 800d47e:	4b70      	ldr	r3, [pc, #448]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d480:	69db      	ldr	r3, [r3, #28]
 800d482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d486:	429a      	cmp	r2, r3
 800d488:	d908      	bls.n	800d49c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d48a:	4b6d      	ldr	r3, [pc, #436]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	496a      	ldr	r1, [pc, #424]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d498:	4313      	orrs	r3, r2
 800d49a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d010      	beq.n	800d4ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	699a      	ldr	r2, [r3, #24]
 800d4ac:	4b64      	ldr	r3, [pc, #400]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d4ae:	69db      	ldr	r3, [r3, #28]
 800d4b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d908      	bls.n	800d4ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d4b8:	4b61      	ldr	r3, [pc, #388]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d4ba:	69db      	ldr	r3, [r3, #28]
 800d4bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	699b      	ldr	r3, [r3, #24]
 800d4c4:	495e      	ldr	r1, [pc, #376]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f003 0320 	and.w	r3, r3, #32
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d010      	beq.n	800d4f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	69da      	ldr	r2, [r3, #28]
 800d4da:	4b59      	ldr	r3, [pc, #356]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d4dc:	6a1b      	ldr	r3, [r3, #32]
 800d4de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d908      	bls.n	800d4f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d4e6:	4b56      	ldr	r3, [pc, #344]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	69db      	ldr	r3, [r3, #28]
 800d4f2:	4953      	ldr	r1, [pc, #332]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f003 0302 	and.w	r3, r3, #2
 800d500:	2b00      	cmp	r3, #0
 800d502:	d010      	beq.n	800d526 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	68da      	ldr	r2, [r3, #12]
 800d508:	4b4d      	ldr	r3, [pc, #308]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	f003 030f 	and.w	r3, r3, #15
 800d510:	429a      	cmp	r2, r3
 800d512:	d908      	bls.n	800d526 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d514:	4b4a      	ldr	r3, [pc, #296]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	f023 020f 	bic.w	r2, r3, #15
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	68db      	ldr	r3, [r3, #12]
 800d520:	4947      	ldr	r1, [pc, #284]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d522:	4313      	orrs	r3, r2
 800d524:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d055      	beq.n	800d5de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d532:	4b43      	ldr	r3, [pc, #268]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	689b      	ldr	r3, [r3, #8]
 800d53e:	4940      	ldr	r1, [pc, #256]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d540:	4313      	orrs	r3, r2
 800d542:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	685b      	ldr	r3, [r3, #4]
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d107      	bne.n	800d55c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d54c:	4b3c      	ldr	r3, [pc, #240]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d121      	bne.n	800d59c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e0f6      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	2b03      	cmp	r3, #3
 800d562:	d107      	bne.n	800d574 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d564:	4b36      	ldr	r3, [pc, #216]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d115      	bne.n	800d59c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	e0ea      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d107      	bne.n	800d58c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d57c:	4b30      	ldr	r3, [pc, #192]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d584:	2b00      	cmp	r3, #0
 800d586:	d109      	bne.n	800d59c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e0de      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d58c:	4b2c      	ldr	r3, [pc, #176]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	f003 0304 	and.w	r3, r3, #4
 800d594:	2b00      	cmp	r3, #0
 800d596:	d101      	bne.n	800d59c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d598:	2301      	movs	r3, #1
 800d59a:	e0d6      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d59c:	4b28      	ldr	r3, [pc, #160]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f023 0207 	bic.w	r2, r3, #7
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	4925      	ldr	r1, [pc, #148]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d5aa:	4313      	orrs	r3, r2
 800d5ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5ae:	f7f9 fed1 	bl	8007354 <HAL_GetTick>
 800d5b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5b4:	e00a      	b.n	800d5cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d5b6:	f7f9 fecd 	bl	8007354 <HAL_GetTick>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	697b      	ldr	r3, [r7, #20]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d901      	bls.n	800d5cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d5c8:	2303      	movs	r3, #3
 800d5ca:	e0be      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d5cc:	4b1c      	ldr	r3, [pc, #112]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	685b      	ldr	r3, [r3, #4]
 800d5d8:	00db      	lsls	r3, r3, #3
 800d5da:	429a      	cmp	r2, r3
 800d5dc:	d1eb      	bne.n	800d5b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f003 0302 	and.w	r3, r3, #2
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d010      	beq.n	800d60c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68da      	ldr	r2, [r3, #12]
 800d5ee:	4b14      	ldr	r3, [pc, #80]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d5f0:	699b      	ldr	r3, [r3, #24]
 800d5f2:	f003 030f 	and.w	r3, r3, #15
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d208      	bcs.n	800d60c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d5fa:	4b11      	ldr	r3, [pc, #68]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	f023 020f 	bic.w	r2, r3, #15
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	68db      	ldr	r3, [r3, #12]
 800d606:	490e      	ldr	r1, [pc, #56]	; (800d640 <HAL_RCC_ClockConfig+0x244>)
 800d608:	4313      	orrs	r3, r2
 800d60a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d60c:	4b0b      	ldr	r3, [pc, #44]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 030f 	and.w	r3, r3, #15
 800d614:	683a      	ldr	r2, [r7, #0]
 800d616:	429a      	cmp	r2, r3
 800d618:	d214      	bcs.n	800d644 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d61a:	4b08      	ldr	r3, [pc, #32]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f023 020f 	bic.w	r2, r3, #15
 800d622:	4906      	ldr	r1, [pc, #24]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	4313      	orrs	r3, r2
 800d628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d62a:	4b04      	ldr	r3, [pc, #16]	; (800d63c <HAL_RCC_ClockConfig+0x240>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 030f 	and.w	r3, r3, #15
 800d632:	683a      	ldr	r2, [r7, #0]
 800d634:	429a      	cmp	r2, r3
 800d636:	d005      	beq.n	800d644 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d638:	2301      	movs	r3, #1
 800d63a:	e086      	b.n	800d74a <HAL_RCC_ClockConfig+0x34e>
 800d63c:	52002000 	.word	0x52002000
 800d640:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f003 0304 	and.w	r3, r3, #4
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d010      	beq.n	800d672 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	691a      	ldr	r2, [r3, #16]
 800d654:	4b3f      	ldr	r3, [pc, #252]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d656:	699b      	ldr	r3, [r3, #24]
 800d658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d65c:	429a      	cmp	r2, r3
 800d65e:	d208      	bcs.n	800d672 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d660:	4b3c      	ldr	r3, [pc, #240]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d662:	699b      	ldr	r3, [r3, #24]
 800d664:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	4939      	ldr	r1, [pc, #228]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d66e:	4313      	orrs	r3, r2
 800d670:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0308 	and.w	r3, r3, #8
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d010      	beq.n	800d6a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	695a      	ldr	r2, [r3, #20]
 800d682:	4b34      	ldr	r3, [pc, #208]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d684:	69db      	ldr	r3, [r3, #28]
 800d686:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d208      	bcs.n	800d6a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d68e:	4b31      	ldr	r3, [pc, #196]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	492e      	ldr	r1, [pc, #184]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d69c:	4313      	orrs	r3, r2
 800d69e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 0310 	and.w	r3, r3, #16
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d010      	beq.n	800d6ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	699a      	ldr	r2, [r3, #24]
 800d6b0:	4b28      	ldr	r3, [pc, #160]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d6b2:	69db      	ldr	r3, [r3, #28]
 800d6b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d208      	bcs.n	800d6ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d6bc:	4b25      	ldr	r3, [pc, #148]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d6be:	69db      	ldr	r3, [r3, #28]
 800d6c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	4922      	ldr	r1, [pc, #136]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	f003 0320 	and.w	r3, r3, #32
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d010      	beq.n	800d6fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	69da      	ldr	r2, [r3, #28]
 800d6de:	4b1d      	ldr	r3, [pc, #116]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d208      	bcs.n	800d6fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d6ea:	4b1a      	ldr	r3, [pc, #104]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	69db      	ldr	r3, [r3, #28]
 800d6f6:	4917      	ldr	r1, [pc, #92]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d6fc:	f000 f834 	bl	800d768 <HAL_RCC_GetSysClockFreq>
 800d700:	4602      	mov	r2, r0
 800d702:	4b14      	ldr	r3, [pc, #80]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	0a1b      	lsrs	r3, r3, #8
 800d708:	f003 030f 	and.w	r3, r3, #15
 800d70c:	4912      	ldr	r1, [pc, #72]	; (800d758 <HAL_RCC_ClockConfig+0x35c>)
 800d70e:	5ccb      	ldrb	r3, [r1, r3]
 800d710:	f003 031f 	and.w	r3, r3, #31
 800d714:	fa22 f303 	lsr.w	r3, r2, r3
 800d718:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d71a:	4b0e      	ldr	r3, [pc, #56]	; (800d754 <HAL_RCC_ClockConfig+0x358>)
 800d71c:	699b      	ldr	r3, [r3, #24]
 800d71e:	f003 030f 	and.w	r3, r3, #15
 800d722:	4a0d      	ldr	r2, [pc, #52]	; (800d758 <HAL_RCC_ClockConfig+0x35c>)
 800d724:	5cd3      	ldrb	r3, [r2, r3]
 800d726:	f003 031f 	and.w	r3, r3, #31
 800d72a:	693a      	ldr	r2, [r7, #16]
 800d72c:	fa22 f303 	lsr.w	r3, r2, r3
 800d730:	4a0a      	ldr	r2, [pc, #40]	; (800d75c <HAL_RCC_ClockConfig+0x360>)
 800d732:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d734:	4a0a      	ldr	r2, [pc, #40]	; (800d760 <HAL_RCC_ClockConfig+0x364>)
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d73a:	4b0a      	ldr	r3, [pc, #40]	; (800d764 <HAL_RCC_ClockConfig+0x368>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4618      	mov	r0, r3
 800d740:	f7f9 fdbe 	bl	80072c0 <HAL_InitTick>
 800d744:	4603      	mov	r3, r0
 800d746:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d748:	7bfb      	ldrb	r3, [r7, #15]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3718      	adds	r7, #24
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	58024400 	.word	0x58024400
 800d758:	08017678 	.word	0x08017678
 800d75c:	24000048 	.word	0x24000048
 800d760:	24000044 	.word	0x24000044
 800d764:	2400004c 	.word	0x2400004c

0800d768 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d768:	b480      	push	{r7}
 800d76a:	b089      	sub	sp, #36	; 0x24
 800d76c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d76e:	4bb3      	ldr	r3, [pc, #716]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d770:	691b      	ldr	r3, [r3, #16]
 800d772:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d776:	2b18      	cmp	r3, #24
 800d778:	f200 8155 	bhi.w	800da26 <HAL_RCC_GetSysClockFreq+0x2be>
 800d77c:	a201      	add	r2, pc, #4	; (adr r2, 800d784 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d782:	bf00      	nop
 800d784:	0800d7e9 	.word	0x0800d7e9
 800d788:	0800da27 	.word	0x0800da27
 800d78c:	0800da27 	.word	0x0800da27
 800d790:	0800da27 	.word	0x0800da27
 800d794:	0800da27 	.word	0x0800da27
 800d798:	0800da27 	.word	0x0800da27
 800d79c:	0800da27 	.word	0x0800da27
 800d7a0:	0800da27 	.word	0x0800da27
 800d7a4:	0800d80f 	.word	0x0800d80f
 800d7a8:	0800da27 	.word	0x0800da27
 800d7ac:	0800da27 	.word	0x0800da27
 800d7b0:	0800da27 	.word	0x0800da27
 800d7b4:	0800da27 	.word	0x0800da27
 800d7b8:	0800da27 	.word	0x0800da27
 800d7bc:	0800da27 	.word	0x0800da27
 800d7c0:	0800da27 	.word	0x0800da27
 800d7c4:	0800d815 	.word	0x0800d815
 800d7c8:	0800da27 	.word	0x0800da27
 800d7cc:	0800da27 	.word	0x0800da27
 800d7d0:	0800da27 	.word	0x0800da27
 800d7d4:	0800da27 	.word	0x0800da27
 800d7d8:	0800da27 	.word	0x0800da27
 800d7dc:	0800da27 	.word	0x0800da27
 800d7e0:	0800da27 	.word	0x0800da27
 800d7e4:	0800d81b 	.word	0x0800d81b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7e8:	4b94      	ldr	r3, [pc, #592]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f003 0320 	and.w	r3, r3, #32
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d009      	beq.n	800d808 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d7f4:	4b91      	ldr	r3, [pc, #580]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	08db      	lsrs	r3, r3, #3
 800d7fa:	f003 0303 	and.w	r3, r3, #3
 800d7fe:	4a90      	ldr	r2, [pc, #576]	; (800da40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d800:	fa22 f303 	lsr.w	r3, r2, r3
 800d804:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d806:	e111      	b.n	800da2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d808:	4b8d      	ldr	r3, [pc, #564]	; (800da40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d80a:	61bb      	str	r3, [r7, #24]
      break;
 800d80c:	e10e      	b.n	800da2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d80e:	4b8d      	ldr	r3, [pc, #564]	; (800da44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d810:	61bb      	str	r3, [r7, #24]
      break;
 800d812:	e10b      	b.n	800da2c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d814:	4b8c      	ldr	r3, [pc, #560]	; (800da48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d816:	61bb      	str	r3, [r7, #24]
      break;
 800d818:	e108      	b.n	800da2c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d81a:	4b88      	ldr	r3, [pc, #544]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d81c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81e:	f003 0303 	and.w	r3, r3, #3
 800d822:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d824:	4b85      	ldr	r3, [pc, #532]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d828:	091b      	lsrs	r3, r3, #4
 800d82a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d82e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d830:	4b82      	ldr	r3, [pc, #520]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d83a:	4b80      	ldr	r3, [pc, #512]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d83c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d83e:	08db      	lsrs	r3, r3, #3
 800d840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d844:	68fa      	ldr	r2, [r7, #12]
 800d846:	fb02 f303 	mul.w	r3, r2, r3
 800d84a:	ee07 3a90 	vmov	s15, r3
 800d84e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d852:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	f000 80e1 	beq.w	800da20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	2b02      	cmp	r3, #2
 800d862:	f000 8083 	beq.w	800d96c <HAL_RCC_GetSysClockFreq+0x204>
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	2b02      	cmp	r3, #2
 800d86a:	f200 80a1 	bhi.w	800d9b0 <HAL_RCC_GetSysClockFreq+0x248>
 800d86e:	697b      	ldr	r3, [r7, #20]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d003      	beq.n	800d87c <HAL_RCC_GetSysClockFreq+0x114>
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d056      	beq.n	800d928 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d87a:	e099      	b.n	800d9b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d87c:	4b6f      	ldr	r3, [pc, #444]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f003 0320 	and.w	r3, r3, #32
 800d884:	2b00      	cmp	r3, #0
 800d886:	d02d      	beq.n	800d8e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d888:	4b6c      	ldr	r3, [pc, #432]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	08db      	lsrs	r3, r3, #3
 800d88e:	f003 0303 	and.w	r3, r3, #3
 800d892:	4a6b      	ldr	r2, [pc, #428]	; (800da40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d894:	fa22 f303 	lsr.w	r3, r2, r3
 800d898:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	ee07 3a90 	vmov	s15, r3
 800d8a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8a4:	693b      	ldr	r3, [r7, #16]
 800d8a6:	ee07 3a90 	vmov	s15, r3
 800d8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b2:	4b62      	ldr	r3, [pc, #392]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ba:	ee07 3a90 	vmov	s15, r3
 800d8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d8c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800da4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d8e2:	e087      	b.n	800d9f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	ee07 3a90 	vmov	s15, r3
 800d8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 800da50 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8f6:	4b51      	ldr	r3, [pc, #324]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8fe:	ee07 3a90 	vmov	s15, r3
 800d902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d906:	ed97 6a02 	vldr	s12, [r7, #8]
 800d90a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800da4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d922:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d926:	e065      	b.n	800d9f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d932:	eddf 6a48 	vldr	s13, [pc, #288]	; 800da54 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93a:	4b40      	ldr	r3, [pc, #256]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d942:	ee07 3a90 	vmov	s15, r3
 800d946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d94e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800da4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d966:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d96a:	e043      	b.n	800d9f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	ee07 3a90 	vmov	s15, r3
 800d972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d976:	eddf 6a38 	vldr	s13, [pc, #224]	; 800da58 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d97e:	4b2f      	ldr	r3, [pc, #188]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d98e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d992:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800da4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9ae:	e021      	b.n	800d9f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	ee07 3a90 	vmov	s15, r3
 800d9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 800da54 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d9be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9c2:	4b1e      	ldr	r3, [pc, #120]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ca:	ee07 3a90 	vmov	s15, r3
 800d9ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800da4c <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d9f4:	4b11      	ldr	r3, [pc, #68]	; (800da3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9f8:	0a5b      	lsrs	r3, r3, #9
 800d9fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9fe:	3301      	adds	r3, #1
 800da00:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da18:	ee17 3a90 	vmov	r3, s15
 800da1c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800da1e:	e005      	b.n	800da2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800da20:	2300      	movs	r3, #0
 800da22:	61bb      	str	r3, [r7, #24]
      break;
 800da24:	e002      	b.n	800da2c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800da26:	4b07      	ldr	r3, [pc, #28]	; (800da44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800da28:	61bb      	str	r3, [r7, #24]
      break;
 800da2a:	bf00      	nop
  }

  return sysclockfreq;
 800da2c:	69bb      	ldr	r3, [r7, #24]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3724      	adds	r7, #36	; 0x24
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	58024400 	.word	0x58024400
 800da40:	03d09000 	.word	0x03d09000
 800da44:	003d0900 	.word	0x003d0900
 800da48:	017d7840 	.word	0x017d7840
 800da4c:	46000000 	.word	0x46000000
 800da50:	4c742400 	.word	0x4c742400
 800da54:	4a742400 	.word	0x4a742400
 800da58:	4bbebc20 	.word	0x4bbebc20

0800da5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800da62:	f7ff fe81 	bl	800d768 <HAL_RCC_GetSysClockFreq>
 800da66:	4602      	mov	r2, r0
 800da68:	4b10      	ldr	r3, [pc, #64]	; (800daac <HAL_RCC_GetHCLKFreq+0x50>)
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	0a1b      	lsrs	r3, r3, #8
 800da6e:	f003 030f 	and.w	r3, r3, #15
 800da72:	490f      	ldr	r1, [pc, #60]	; (800dab0 <HAL_RCC_GetHCLKFreq+0x54>)
 800da74:	5ccb      	ldrb	r3, [r1, r3]
 800da76:	f003 031f 	and.w	r3, r3, #31
 800da7a:	fa22 f303 	lsr.w	r3, r2, r3
 800da7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da80:	4b0a      	ldr	r3, [pc, #40]	; (800daac <HAL_RCC_GetHCLKFreq+0x50>)
 800da82:	699b      	ldr	r3, [r3, #24]
 800da84:	f003 030f 	and.w	r3, r3, #15
 800da88:	4a09      	ldr	r2, [pc, #36]	; (800dab0 <HAL_RCC_GetHCLKFreq+0x54>)
 800da8a:	5cd3      	ldrb	r3, [r2, r3]
 800da8c:	f003 031f 	and.w	r3, r3, #31
 800da90:	687a      	ldr	r2, [r7, #4]
 800da92:	fa22 f303 	lsr.w	r3, r2, r3
 800da96:	4a07      	ldr	r2, [pc, #28]	; (800dab4 <HAL_RCC_GetHCLKFreq+0x58>)
 800da98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800da9a:	4a07      	ldr	r2, [pc, #28]	; (800dab8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800daa0:	4b04      	ldr	r3, [pc, #16]	; (800dab4 <HAL_RCC_GetHCLKFreq+0x58>)
 800daa2:	681b      	ldr	r3, [r3, #0]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	58024400 	.word	0x58024400
 800dab0:	08017678 	.word	0x08017678
 800dab4:	24000048 	.word	0x24000048
 800dab8:	24000044 	.word	0x24000044

0800dabc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800dac0:	f7ff ffcc 	bl	800da5c <HAL_RCC_GetHCLKFreq>
 800dac4:	4602      	mov	r2, r0
 800dac6:	4b06      	ldr	r3, [pc, #24]	; (800dae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dac8:	69db      	ldr	r3, [r3, #28]
 800daca:	091b      	lsrs	r3, r3, #4
 800dacc:	f003 0307 	and.w	r3, r3, #7
 800dad0:	4904      	ldr	r1, [pc, #16]	; (800dae4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dad2:	5ccb      	ldrb	r3, [r1, r3]
 800dad4:	f003 031f 	and.w	r3, r3, #31
 800dad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dadc:	4618      	mov	r0, r3
 800dade:	bd80      	pop	{r7, pc}
 800dae0:	58024400 	.word	0x58024400
 800dae4:	08017678 	.word	0x08017678

0800dae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800daec:	f7ff ffb6 	bl	800da5c <HAL_RCC_GetHCLKFreq>
 800daf0:	4602      	mov	r2, r0
 800daf2:	4b06      	ldr	r3, [pc, #24]	; (800db0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800daf4:	69db      	ldr	r3, [r3, #28]
 800daf6:	0a1b      	lsrs	r3, r3, #8
 800daf8:	f003 0307 	and.w	r3, r3, #7
 800dafc:	4904      	ldr	r1, [pc, #16]	; (800db10 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dafe:	5ccb      	ldrb	r3, [r1, r3]
 800db00:	f003 031f 	and.w	r3, r3, #31
 800db04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800db08:	4618      	mov	r0, r3
 800db0a:	bd80      	pop	{r7, pc}
 800db0c:	58024400 	.word	0x58024400
 800db10:	08017678 	.word	0x08017678

0800db14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800db14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db18:	b0ca      	sub	sp, #296	; 0x128
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800db26:	2300      	movs	r3, #0
 800db28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db34:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800db38:	2500      	movs	r5, #0
 800db3a:	ea54 0305 	orrs.w	r3, r4, r5
 800db3e:	d049      	beq.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800db40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db4a:	d02f      	beq.n	800dbac <HAL_RCCEx_PeriphCLKConfig+0x98>
 800db4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db50:	d828      	bhi.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db56:	d01a      	beq.n	800db8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800db58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800db5c:	d822      	bhi.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d003      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800db62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db66:	d007      	beq.n	800db78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800db68:	e01c      	b.n	800dba4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db6a:	4bb8      	ldr	r3, [pc, #736]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db6e:	4ab7      	ldr	r2, [pc, #732]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db76:	e01a      	b.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800db78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db7c:	3308      	adds	r3, #8
 800db7e:	2102      	movs	r1, #2
 800db80:	4618      	mov	r0, r3
 800db82:	f002 fb61 	bl	8010248 <RCCEx_PLL2_Config>
 800db86:	4603      	mov	r3, r0
 800db88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800db8c:	e00f      	b.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800db8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db92:	3328      	adds	r3, #40	; 0x28
 800db94:	2102      	movs	r1, #2
 800db96:	4618      	mov	r0, r3
 800db98:	f002 fc08 	bl	80103ac <RCCEx_PLL3_Config>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dba2:	e004      	b.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbaa:	e000      	b.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dbac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d10a      	bne.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dbb6:	4ba5      	ldr	r3, [pc, #660]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dbbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc4:	4aa1      	ldr	r2, [pc, #644]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbc6:	430b      	orrs	r3, r1
 800dbc8:	6513      	str	r3, [r2, #80]	; 0x50
 800dbca:	e003      	b.n	800dbd4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbd0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbdc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dbe0:	f04f 0900 	mov.w	r9, #0
 800dbe4:	ea58 0309 	orrs.w	r3, r8, r9
 800dbe8:	d047      	beq.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dbea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbf0:	2b04      	cmp	r3, #4
 800dbf2:	d82a      	bhi.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dbf4:	a201      	add	r2, pc, #4	; (adr r2, 800dbfc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfa:	bf00      	nop
 800dbfc:	0800dc11 	.word	0x0800dc11
 800dc00:	0800dc1f 	.word	0x0800dc1f
 800dc04:	0800dc35 	.word	0x0800dc35
 800dc08:	0800dc53 	.word	0x0800dc53
 800dc0c:	0800dc53 	.word	0x0800dc53
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc10:	4b8e      	ldr	r3, [pc, #568]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc14:	4a8d      	ldr	r2, [pc, #564]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc1c:	e01a      	b.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc22:	3308      	adds	r3, #8
 800dc24:	2100      	movs	r1, #0
 800dc26:	4618      	mov	r0, r3
 800dc28:	f002 fb0e 	bl	8010248 <RCCEx_PLL2_Config>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc32:	e00f      	b.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc38:	3328      	adds	r3, #40	; 0x28
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f002 fbb5 	bl	80103ac <RCCEx_PLL3_Config>
 800dc42:	4603      	mov	r3, r0
 800dc44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc48:	e004      	b.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc50:	e000      	b.n	800dc54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dc52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d10a      	bne.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dc5c:	4b7b      	ldr	r3, [pc, #492]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc60:	f023 0107 	bic.w	r1, r3, #7
 800dc64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc6a:	4a78      	ldr	r2, [pc, #480]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc6c:	430b      	orrs	r3, r1
 800dc6e:	6513      	str	r3, [r2, #80]	; 0x50
 800dc70:	e003      	b.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc76:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc82:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800dc86:	f04f 0b00 	mov.w	fp, #0
 800dc8a:	ea5a 030b 	orrs.w	r3, sl, fp
 800dc8e:	d04c      	beq.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800dc90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc9a:	d030      	beq.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800dc9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dca0:	d829      	bhi.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dca2:	2bc0      	cmp	r3, #192	; 0xc0
 800dca4:	d02d      	beq.n	800dd02 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800dca6:	2bc0      	cmp	r3, #192	; 0xc0
 800dca8:	d825      	bhi.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcaa:	2b80      	cmp	r3, #128	; 0x80
 800dcac:	d018      	beq.n	800dce0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800dcae:	2b80      	cmp	r3, #128	; 0x80
 800dcb0:	d821      	bhi.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d002      	beq.n	800dcbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800dcb6:	2b40      	cmp	r3, #64	; 0x40
 800dcb8:	d007      	beq.n	800dcca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800dcba:	e01c      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcbc:	4b63      	ldr	r3, [pc, #396]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc0:	4a62      	ldr	r2, [pc, #392]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcc8:	e01c      	b.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcce:	3308      	adds	r3, #8
 800dcd0:	2100      	movs	r1, #0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f002 fab8 	bl	8010248 <RCCEx_PLL2_Config>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcde:	e011      	b.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dce4:	3328      	adds	r3, #40	; 0x28
 800dce6:	2100      	movs	r1, #0
 800dce8:	4618      	mov	r0, r3
 800dcea:	f002 fb5f 	bl	80103ac <RCCEx_PLL3_Config>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dcf4:	e006      	b.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dcfc:	e002      	b.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dcfe:	bf00      	nop
 800dd00:	e000      	b.n	800dd04 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dd02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d10a      	bne.n	800dd22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dd0c:	4b4f      	ldr	r3, [pc, #316]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd10:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800dd14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd1a:	4a4c      	ldr	r2, [pc, #304]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd1c:	430b      	orrs	r3, r1
 800dd1e:	6513      	str	r3, [r2, #80]	; 0x50
 800dd20:	e003      	b.n	800dd2a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd32:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dd36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800dd40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800dd44:	460b      	mov	r3, r1
 800dd46:	4313      	orrs	r3, r2
 800dd48:	d053      	beq.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dd52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd56:	d035      	beq.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800dd58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dd5c:	d82e      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd5e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd62:	d031      	beq.n	800ddc8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dd64:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dd68:	d828      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd6e:	d01a      	beq.n	800dda6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dd70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd74:	d822      	bhi.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d003      	beq.n	800dd82 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800dd7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dd7e:	d007      	beq.n	800dd90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800dd80:	e01c      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd82:	4b32      	ldr	r3, [pc, #200]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd86:	4a31      	ldr	r2, [pc, #196]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dd8e:	e01c      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd94:	3308      	adds	r3, #8
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f002 fa55 	bl	8010248 <RCCEx_PLL2_Config>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dda4:	e011      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddaa:	3328      	adds	r3, #40	; 0x28
 800ddac:	2100      	movs	r1, #0
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f002 fafc 	bl	80103ac <RCCEx_PLL3_Config>
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ddba:	e006      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ddc2:	e002      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ddc4:	bf00      	nop
 800ddc6:	e000      	b.n	800ddca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ddc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10b      	bne.n	800ddea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ddd2:	4b1e      	ldr	r3, [pc, #120]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddd6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ddda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dde2:	4a1a      	ldr	r2, [pc, #104]	; (800de4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dde4:	430b      	orrs	r3, r1
 800dde6:	6593      	str	r3, [r2, #88]	; 0x58
 800dde8:	e003      	b.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ddf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ddfe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800de02:	2300      	movs	r3, #0
 800de04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800de08:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800de0c:	460b      	mov	r3, r1
 800de0e:	4313      	orrs	r3, r2
 800de10:	d056      	beq.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800de12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de1e:	d038      	beq.n	800de92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800de20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de24:	d831      	bhi.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de2a:	d034      	beq.n	800de96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800de2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de30:	d82b      	bhi.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de36:	d01d      	beq.n	800de74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800de38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de3c:	d825      	bhi.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d006      	beq.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800de42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de46:	d00a      	beq.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800de48:	e01f      	b.n	800de8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de4a:	bf00      	nop
 800de4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de50:	4ba2      	ldr	r3, [pc, #648]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de54:	4aa1      	ldr	r2, [pc, #644]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de5c:	e01c      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de62:	3308      	adds	r3, #8
 800de64:	2100      	movs	r1, #0
 800de66:	4618      	mov	r0, r3
 800de68:	f002 f9ee 	bl	8010248 <RCCEx_PLL2_Config>
 800de6c:	4603      	mov	r3, r0
 800de6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800de72:	e011      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800de74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de78:	3328      	adds	r3, #40	; 0x28
 800de7a:	2100      	movs	r1, #0
 800de7c:	4618      	mov	r0, r3
 800de7e:	f002 fa95 	bl	80103ac <RCCEx_PLL3_Config>
 800de82:	4603      	mov	r3, r0
 800de84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de88:	e006      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800de90:	e002      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800de92:	bf00      	nop
 800de94:	e000      	b.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800de96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d10b      	bne.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dea0:	4b8e      	ldr	r3, [pc, #568]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800dea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800deb0:	4a8a      	ldr	r2, [pc, #552]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800deb2:	430b      	orrs	r3, r1
 800deb4:	6593      	str	r3, [r2, #88]	; 0x58
 800deb6:	e003      	b.n	800dec0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800deb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800debc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800decc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ded0:	2300      	movs	r3, #0
 800ded2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ded6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800deda:	460b      	mov	r3, r1
 800dedc:	4313      	orrs	r3, r2
 800dede:	d03a      	beq.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800dee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dee6:	2b30      	cmp	r3, #48	; 0x30
 800dee8:	d01f      	beq.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800deea:	2b30      	cmp	r3, #48	; 0x30
 800deec:	d819      	bhi.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800deee:	2b20      	cmp	r3, #32
 800def0:	d00c      	beq.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800def2:	2b20      	cmp	r3, #32
 800def4:	d815      	bhi.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800def6:	2b00      	cmp	r3, #0
 800def8:	d019      	beq.n	800df2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800defa:	2b10      	cmp	r3, #16
 800defc:	d111      	bne.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800defe:	4b77      	ldr	r3, [pc, #476]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df02:	4a76      	ldr	r2, [pc, #472]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800df0a:	e011      	b.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df10:	3308      	adds	r3, #8
 800df12:	2102      	movs	r1, #2
 800df14:	4618      	mov	r0, r3
 800df16:	f002 f997 	bl	8010248 <RCCEx_PLL2_Config>
 800df1a:	4603      	mov	r3, r0
 800df1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800df20:	e006      	b.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800df22:	2301      	movs	r3, #1
 800df24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df28:	e002      	b.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df2a:	bf00      	nop
 800df2c:	e000      	b.n	800df30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df34:	2b00      	cmp	r3, #0
 800df36:	d10a      	bne.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800df38:	4b68      	ldr	r3, [pc, #416]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df3c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800df40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df46:	4a65      	ldr	r2, [pc, #404]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df48:	430b      	orrs	r3, r1
 800df4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df4c:	e003      	b.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800df62:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800df66:	2300      	movs	r3, #0
 800df68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800df6c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800df70:	460b      	mov	r3, r1
 800df72:	4313      	orrs	r3, r2
 800df74:	d051      	beq.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800df76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df80:	d035      	beq.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800df82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df86:	d82e      	bhi.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df8c:	d031      	beq.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800df8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df92:	d828      	bhi.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800df94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df98:	d01a      	beq.n	800dfd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800df9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df9e:	d822      	bhi.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d003      	beq.n	800dfac <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dfa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfa8:	d007      	beq.n	800dfba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dfaa:	e01c      	b.n	800dfe6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfac:	4b4b      	ldr	r3, [pc, #300]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfb0:	4a4a      	ldr	r2, [pc, #296]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dfb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfb8:	e01c      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfbe:	3308      	adds	r3, #8
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f002 f940 	bl	8010248 <RCCEx_PLL2_Config>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfce:	e011      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dfd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfd4:	3328      	adds	r3, #40	; 0x28
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f002 f9e7 	bl	80103ac <RCCEx_PLL3_Config>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dfe4:	e006      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dfec:	e002      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dfee:	bf00      	nop
 800dff0:	e000      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dff4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d10a      	bne.n	800e012 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dffc:	4b37      	ldr	r3, [pc, #220]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e000:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e00a:	4a34      	ldr	r2, [pc, #208]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e00c:	430b      	orrs	r3, r1
 800e00e:	6513      	str	r3, [r2, #80]	; 0x50
 800e010:	e003      	b.n	800e01a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e022:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e02a:	2300      	movs	r3, #0
 800e02c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e030:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e034:	460b      	mov	r3, r1
 800e036:	4313      	orrs	r3, r2
 800e038:	d056      	beq.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e044:	d033      	beq.n	800e0ae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e046:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e04a:	d82c      	bhi.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e04c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e050:	d02f      	beq.n	800e0b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e052:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e056:	d826      	bhi.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e058:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e05c:	d02b      	beq.n	800e0b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e05e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e062:	d820      	bhi.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e064:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e068:	d012      	beq.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e06a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e06e:	d81a      	bhi.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e070:	2b00      	cmp	r3, #0
 800e072:	d022      	beq.n	800e0ba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e078:	d115      	bne.n	800e0a6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e07e:	3308      	adds	r3, #8
 800e080:	2101      	movs	r1, #1
 800e082:	4618      	mov	r0, r3
 800e084:	f002 f8e0 	bl	8010248 <RCCEx_PLL2_Config>
 800e088:	4603      	mov	r3, r0
 800e08a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e08e:	e015      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e094:	3328      	adds	r3, #40	; 0x28
 800e096:	2101      	movs	r1, #1
 800e098:	4618      	mov	r0, r3
 800e09a:	f002 f987 	bl	80103ac <RCCEx_PLL3_Config>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0a4:	e00a      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e0ac:	e006      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0ae:	bf00      	nop
 800e0b0:	e004      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0b2:	bf00      	nop
 800e0b4:	e002      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0b6:	bf00      	nop
 800e0b8:	e000      	b.n	800e0bc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e0ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10d      	bne.n	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e0c4:	4b05      	ldr	r3, [pc, #20]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0c8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d2:	4a02      	ldr	r2, [pc, #8]	; (800e0dc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e0d4:	430b      	orrs	r3, r1
 800e0d6:	6513      	str	r3, [r2, #80]	; 0x50
 800e0d8:	e006      	b.n	800e0e8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e0da:	bf00      	nop
 800e0dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e0e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e0f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e0fe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e102:	460b      	mov	r3, r1
 800e104:	4313      	orrs	r3, r2
 800e106:	d055      	beq.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e10c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e114:	d033      	beq.n	800e17e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e116:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e11a:	d82c      	bhi.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e120:	d02f      	beq.n	800e182 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e126:	d826      	bhi.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e128:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e12c:	d02b      	beq.n	800e186 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e12e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e132:	d820      	bhi.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e138:	d012      	beq.n	800e160 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e13a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e13e:	d81a      	bhi.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e140:	2b00      	cmp	r3, #0
 800e142:	d022      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e148:	d115      	bne.n	800e176 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e14e:	3308      	adds	r3, #8
 800e150:	2101      	movs	r1, #1
 800e152:	4618      	mov	r0, r3
 800e154:	f002 f878 	bl	8010248 <RCCEx_PLL2_Config>
 800e158:	4603      	mov	r3, r0
 800e15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e15e:	e015      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e164:	3328      	adds	r3, #40	; 0x28
 800e166:	2101      	movs	r1, #1
 800e168:	4618      	mov	r0, r3
 800e16a:	f002 f91f 	bl	80103ac <RCCEx_PLL3_Config>
 800e16e:	4603      	mov	r3, r0
 800e170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e174:	e00a      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e176:	2301      	movs	r3, #1
 800e178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e17c:	e006      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e17e:	bf00      	nop
 800e180:	e004      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e182:	bf00      	nop
 800e184:	e002      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e186:	bf00      	nop
 800e188:	e000      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e18a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e18c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10b      	bne.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e194:	4ba3      	ldr	r3, [pc, #652]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e198:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e1a4:	4a9f      	ldr	r2, [pc, #636]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1a6:	430b      	orrs	r3, r1
 800e1a8:	6593      	str	r3, [r2, #88]	; 0x58
 800e1aa:	e003      	b.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e1c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e1ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e1ce:	460b      	mov	r3, r1
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	d037      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e1d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1de:	d00e      	beq.n	800e1fe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e1e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1e4:	d816      	bhi.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d018      	beq.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e1ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1ee:	d111      	bne.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1f0:	4b8c      	ldr	r3, [pc, #560]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f4:	4a8b      	ldr	r2, [pc, #556]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e1fc:	e00f      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e202:	3308      	adds	r3, #8
 800e204:	2101      	movs	r1, #1
 800e206:	4618      	mov	r0, r3
 800e208:	f002 f81e 	bl	8010248 <RCCEx_PLL2_Config>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e212:	e004      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e21a:	e000      	b.n	800e21e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e21c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e21e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e222:	2b00      	cmp	r3, #0
 800e224:	d10a      	bne.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e226:	4b7f      	ldr	r3, [pc, #508]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e22a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e234:	4a7b      	ldr	r2, [pc, #492]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e236:	430b      	orrs	r3, r1
 800e238:	6513      	str	r3, [r2, #80]	; 0x50
 800e23a:	e003      	b.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e23c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e240:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e24c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e254:	2300      	movs	r3, #0
 800e256:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e25a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e25e:	460b      	mov	r3, r1
 800e260:	4313      	orrs	r3, r2
 800e262:	d039      	beq.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e26a:	2b03      	cmp	r3, #3
 800e26c:	d81c      	bhi.n	800e2a8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e26e:	a201      	add	r2, pc, #4	; (adr r2, 800e274 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e274:	0800e2b1 	.word	0x0800e2b1
 800e278:	0800e285 	.word	0x0800e285
 800e27c:	0800e293 	.word	0x0800e293
 800e280:	0800e2b1 	.word	0x0800e2b1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e284:	4b67      	ldr	r3, [pc, #412]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e288:	4a66      	ldr	r2, [pc, #408]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e28a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e28e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e290:	e00f      	b.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e296:	3308      	adds	r3, #8
 800e298:	2102      	movs	r1, #2
 800e29a:	4618      	mov	r0, r3
 800e29c:	f001 ffd4 	bl	8010248 <RCCEx_PLL2_Config>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2a6:	e004      	b.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2ae:	e000      	b.n	800e2b2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e2b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d10a      	bne.n	800e2d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e2ba:	4b5a      	ldr	r3, [pc, #360]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2be:	f023 0103 	bic.w	r1, r3, #3
 800e2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2c8:	4a56      	ldr	r2, [pc, #344]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2ca:	430b      	orrs	r3, r1
 800e2cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e2ce:	e003      	b.n	800e2d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e2d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e2e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e2ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e2f2:	460b      	mov	r3, r1
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	f000 809f 	beq.w	800e438 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e2fa:	4b4b      	ldr	r3, [pc, #300]	; (800e428 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a4a      	ldr	r2, [pc, #296]	; (800e428 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e304:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e306:	f7f9 f825 	bl	8007354 <HAL_GetTick>
 800e30a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e30e:	e00b      	b.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e310:	f7f9 f820 	bl	8007354 <HAL_GetTick>
 800e314:	4602      	mov	r2, r0
 800e316:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e31a:	1ad3      	subs	r3, r2, r3
 800e31c:	2b64      	cmp	r3, #100	; 0x64
 800e31e:	d903      	bls.n	800e328 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e320:	2303      	movs	r3, #3
 800e322:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e326:	e005      	b.n	800e334 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e328:	4b3f      	ldr	r3, [pc, #252]	; (800e428 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e330:	2b00      	cmp	r3, #0
 800e332:	d0ed      	beq.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d179      	bne.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e33c:	4b39      	ldr	r3, [pc, #228]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e33e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e348:	4053      	eors	r3, r2
 800e34a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d015      	beq.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e352:	4b34      	ldr	r3, [pc, #208]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e35a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e35e:	4b31      	ldr	r3, [pc, #196]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e362:	4a30      	ldr	r2, [pc, #192]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e368:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e36a:	4b2e      	ldr	r3, [pc, #184]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e36e:	4a2d      	ldr	r2, [pc, #180]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e374:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e376:	4a2b      	ldr	r2, [pc, #172]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e378:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e37c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e37e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e382:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e38a:	d118      	bne.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e38c:	f7f8 ffe2 	bl	8007354 <HAL_GetTick>
 800e390:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e394:	e00d      	b.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e396:	f7f8 ffdd 	bl	8007354 <HAL_GetTick>
 800e39a:	4602      	mov	r2, r0
 800e39c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e3a0:	1ad2      	subs	r2, r2, r3
 800e3a2:	f241 3388 	movw	r3, #5000	; 0x1388
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d903      	bls.n	800e3b2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e3aa:	2303      	movs	r3, #3
 800e3ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e3b0:	e005      	b.n	800e3be <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3b2:	4b1c      	ldr	r3, [pc, #112]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d0eb      	beq.n	800e396 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e3be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d129      	bne.n	800e41a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3d6:	d10e      	bne.n	800e3f6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e3d8:	4b12      	ldr	r3, [pc, #72]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3da:	691b      	ldr	r3, [r3, #16]
 800e3dc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e3e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3e8:	091a      	lsrs	r2, r3, #4
 800e3ea:	4b10      	ldr	r3, [pc, #64]	; (800e42c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	4a0d      	ldr	r2, [pc, #52]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3f0:	430b      	orrs	r3, r1
 800e3f2:	6113      	str	r3, [r2, #16]
 800e3f4:	e005      	b.n	800e402 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e3f6:	4b0b      	ldr	r3, [pc, #44]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3f8:	691b      	ldr	r3, [r3, #16]
 800e3fa:	4a0a      	ldr	r2, [pc, #40]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e400:	6113      	str	r3, [r2, #16]
 800e402:	4b08      	ldr	r3, [pc, #32]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e404:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e40a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e40e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e412:	4a04      	ldr	r2, [pc, #16]	; (800e424 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e414:	430b      	orrs	r3, r1
 800e416:	6713      	str	r3, [r2, #112]	; 0x70
 800e418:	e00e      	b.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e41a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e41e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e422:	e009      	b.n	800e438 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e424:	58024400 	.word	0x58024400
 800e428:	58024800 	.word	0x58024800
 800e42c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e434:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e440:	f002 0301 	and.w	r3, r2, #1
 800e444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e448:	2300      	movs	r3, #0
 800e44a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e44e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e452:	460b      	mov	r3, r1
 800e454:	4313      	orrs	r3, r2
 800e456:	f000 8089 	beq.w	800e56c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e45e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e460:	2b28      	cmp	r3, #40	; 0x28
 800e462:	d86b      	bhi.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e464:	a201      	add	r2, pc, #4	; (adr r2, 800e46c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46a:	bf00      	nop
 800e46c:	0800e545 	.word	0x0800e545
 800e470:	0800e53d 	.word	0x0800e53d
 800e474:	0800e53d 	.word	0x0800e53d
 800e478:	0800e53d 	.word	0x0800e53d
 800e47c:	0800e53d 	.word	0x0800e53d
 800e480:	0800e53d 	.word	0x0800e53d
 800e484:	0800e53d 	.word	0x0800e53d
 800e488:	0800e53d 	.word	0x0800e53d
 800e48c:	0800e511 	.word	0x0800e511
 800e490:	0800e53d 	.word	0x0800e53d
 800e494:	0800e53d 	.word	0x0800e53d
 800e498:	0800e53d 	.word	0x0800e53d
 800e49c:	0800e53d 	.word	0x0800e53d
 800e4a0:	0800e53d 	.word	0x0800e53d
 800e4a4:	0800e53d 	.word	0x0800e53d
 800e4a8:	0800e53d 	.word	0x0800e53d
 800e4ac:	0800e527 	.word	0x0800e527
 800e4b0:	0800e53d 	.word	0x0800e53d
 800e4b4:	0800e53d 	.word	0x0800e53d
 800e4b8:	0800e53d 	.word	0x0800e53d
 800e4bc:	0800e53d 	.word	0x0800e53d
 800e4c0:	0800e53d 	.word	0x0800e53d
 800e4c4:	0800e53d 	.word	0x0800e53d
 800e4c8:	0800e53d 	.word	0x0800e53d
 800e4cc:	0800e545 	.word	0x0800e545
 800e4d0:	0800e53d 	.word	0x0800e53d
 800e4d4:	0800e53d 	.word	0x0800e53d
 800e4d8:	0800e53d 	.word	0x0800e53d
 800e4dc:	0800e53d 	.word	0x0800e53d
 800e4e0:	0800e53d 	.word	0x0800e53d
 800e4e4:	0800e53d 	.word	0x0800e53d
 800e4e8:	0800e53d 	.word	0x0800e53d
 800e4ec:	0800e545 	.word	0x0800e545
 800e4f0:	0800e53d 	.word	0x0800e53d
 800e4f4:	0800e53d 	.word	0x0800e53d
 800e4f8:	0800e53d 	.word	0x0800e53d
 800e4fc:	0800e53d 	.word	0x0800e53d
 800e500:	0800e53d 	.word	0x0800e53d
 800e504:	0800e53d 	.word	0x0800e53d
 800e508:	0800e53d 	.word	0x0800e53d
 800e50c:	0800e545 	.word	0x0800e545
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e514:	3308      	adds	r3, #8
 800e516:	2101      	movs	r1, #1
 800e518:	4618      	mov	r0, r3
 800e51a:	f001 fe95 	bl	8010248 <RCCEx_PLL2_Config>
 800e51e:	4603      	mov	r3, r0
 800e520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e524:	e00f      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e52a:	3328      	adds	r3, #40	; 0x28
 800e52c:	2101      	movs	r1, #1
 800e52e:	4618      	mov	r0, r3
 800e530:	f001 ff3c 	bl	80103ac <RCCEx_PLL3_Config>
 800e534:	4603      	mov	r3, r0
 800e536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e53a:	e004      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e53c:	2301      	movs	r3, #1
 800e53e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e542:	e000      	b.n	800e546 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e544:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e546:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d10a      	bne.n	800e564 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e54e:	4bbf      	ldr	r3, [pc, #764]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e552:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e55a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e55c:	4abb      	ldr	r2, [pc, #748]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e55e:	430b      	orrs	r3, r1
 800e560:	6553      	str	r3, [r2, #84]	; 0x54
 800e562:	e003      	b.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e564:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e568:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e56c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e574:	f002 0302 	and.w	r3, r2, #2
 800e578:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e57c:	2300      	movs	r3, #0
 800e57e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e582:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e586:	460b      	mov	r3, r1
 800e588:	4313      	orrs	r3, r2
 800e58a:	d041      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e58c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e592:	2b05      	cmp	r3, #5
 800e594:	d824      	bhi.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e596:	a201      	add	r2, pc, #4	; (adr r2, 800e59c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59c:	0800e5e9 	.word	0x0800e5e9
 800e5a0:	0800e5b5 	.word	0x0800e5b5
 800e5a4:	0800e5cb 	.word	0x0800e5cb
 800e5a8:	0800e5e9 	.word	0x0800e5e9
 800e5ac:	0800e5e9 	.word	0x0800e5e9
 800e5b0:	0800e5e9 	.word	0x0800e5e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5b8:	3308      	adds	r3, #8
 800e5ba:	2101      	movs	r1, #1
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f001 fe43 	bl	8010248 <RCCEx_PLL2_Config>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5c8:	e00f      	b.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ce:	3328      	adds	r3, #40	; 0x28
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f001 feea 	bl	80103ac <RCCEx_PLL3_Config>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e5de:	e004      	b.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e5e6:	e000      	b.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e5e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10a      	bne.n	800e608 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e5f2:	4b96      	ldr	r3, [pc, #600]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5f6:	f023 0107 	bic.w	r1, r3, #7
 800e5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e600:	4a92      	ldr	r2, [pc, #584]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e602:	430b      	orrs	r3, r1
 800e604:	6553      	str	r3, [r2, #84]	; 0x54
 800e606:	e003      	b.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e608:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e60c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e618:	f002 0304 	and.w	r3, r2, #4
 800e61c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e620:	2300      	movs	r3, #0
 800e622:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e626:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e62a:	460b      	mov	r3, r1
 800e62c:	4313      	orrs	r3, r2
 800e62e:	d044      	beq.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e638:	2b05      	cmp	r3, #5
 800e63a:	d825      	bhi.n	800e688 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e63c:	a201      	add	r2, pc, #4	; (adr r2, 800e644 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e642:	bf00      	nop
 800e644:	0800e691 	.word	0x0800e691
 800e648:	0800e65d 	.word	0x0800e65d
 800e64c:	0800e673 	.word	0x0800e673
 800e650:	0800e691 	.word	0x0800e691
 800e654:	0800e691 	.word	0x0800e691
 800e658:	0800e691 	.word	0x0800e691
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e65c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e660:	3308      	adds	r3, #8
 800e662:	2101      	movs	r1, #1
 800e664:	4618      	mov	r0, r3
 800e666:	f001 fdef 	bl	8010248 <RCCEx_PLL2_Config>
 800e66a:	4603      	mov	r3, r0
 800e66c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e670:	e00f      	b.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e676:	3328      	adds	r3, #40	; 0x28
 800e678:	2101      	movs	r1, #1
 800e67a:	4618      	mov	r0, r3
 800e67c:	f001 fe96 	bl	80103ac <RCCEx_PLL3_Config>
 800e680:	4603      	mov	r3, r0
 800e682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e686:	e004      	b.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e688:	2301      	movs	r3, #1
 800e68a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e68e:	e000      	b.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e690:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e692:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e696:	2b00      	cmp	r3, #0
 800e698:	d10b      	bne.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e69a:	4b6c      	ldr	r3, [pc, #432]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e69c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e69e:	f023 0107 	bic.w	r1, r3, #7
 800e6a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6aa:	4a68      	ldr	r2, [pc, #416]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e6ac:	430b      	orrs	r3, r1
 800e6ae:	6593      	str	r3, [r2, #88]	; 0x58
 800e6b0:	e003      	b.n	800e6ba <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c2:	f002 0320 	and.w	r3, r2, #32
 800e6c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e6d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	d055      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6e6:	d033      	beq.n	800e750 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e6e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e6ec:	d82c      	bhi.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6f2:	d02f      	beq.n	800e754 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e6f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6f8:	d826      	bhi.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e6fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e6fe:	d02b      	beq.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e700:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e704:	d820      	bhi.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e70a:	d012      	beq.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e70c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e710:	d81a      	bhi.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e712:	2b00      	cmp	r3, #0
 800e714:	d022      	beq.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e71a:	d115      	bne.n	800e748 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e720:	3308      	adds	r3, #8
 800e722:	2100      	movs	r1, #0
 800e724:	4618      	mov	r0, r3
 800e726:	f001 fd8f 	bl	8010248 <RCCEx_PLL2_Config>
 800e72a:	4603      	mov	r3, r0
 800e72c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e730:	e015      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e736:	3328      	adds	r3, #40	; 0x28
 800e738:	2102      	movs	r1, #2
 800e73a:	4618      	mov	r0, r3
 800e73c:	f001 fe36 	bl	80103ac <RCCEx_PLL3_Config>
 800e740:	4603      	mov	r3, r0
 800e742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e746:	e00a      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e748:	2301      	movs	r3, #1
 800e74a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e74e:	e006      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e750:	bf00      	nop
 800e752:	e004      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e754:	bf00      	nop
 800e756:	e002      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e758:	bf00      	nop
 800e75a:	e000      	b.n	800e75e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e75c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e75e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e762:	2b00      	cmp	r3, #0
 800e764:	d10b      	bne.n	800e77e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e766:	4b39      	ldr	r3, [pc, #228]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e76e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e776:	4a35      	ldr	r2, [pc, #212]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e778:	430b      	orrs	r3, r1
 800e77a:	6553      	str	r3, [r2, #84]	; 0x54
 800e77c:	e003      	b.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e77e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e782:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e792:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e796:	2300      	movs	r3, #0
 800e798:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e79c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	4313      	orrs	r3, r2
 800e7a4:	d058      	beq.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e7a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e7b2:	d033      	beq.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e7b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e7b8:	d82c      	bhi.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7be:	d02f      	beq.n	800e820 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e7c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e7c4:	d826      	bhi.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7ca:	d02b      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e7cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e7d0:	d820      	bhi.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7d6:	d012      	beq.n	800e7fe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e7d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e7dc:	d81a      	bhi.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d022      	beq.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e7e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7e6:	d115      	bne.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7ec:	3308      	adds	r3, #8
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f001 fd29 	bl	8010248 <RCCEx_PLL2_Config>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e7fc:	e015      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e802:	3328      	adds	r3, #40	; 0x28
 800e804:	2102      	movs	r1, #2
 800e806:	4618      	mov	r0, r3
 800e808:	f001 fdd0 	bl	80103ac <RCCEx_PLL3_Config>
 800e80c:	4603      	mov	r3, r0
 800e80e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e812:	e00a      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e814:	2301      	movs	r3, #1
 800e816:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e81a:	e006      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e81c:	bf00      	nop
 800e81e:	e004      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e820:	bf00      	nop
 800e822:	e002      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e824:	bf00      	nop
 800e826:	e000      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e82a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d10e      	bne.n	800e850 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e832:	4b06      	ldr	r3, [pc, #24]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e836:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e83e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e842:	4a02      	ldr	r2, [pc, #8]	; (800e84c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e844:	430b      	orrs	r3, r1
 800e846:	6593      	str	r3, [r2, #88]	; 0x58
 800e848:	e006      	b.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e84a:	bf00      	nop
 800e84c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e850:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e854:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e860:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e868:	2300      	movs	r3, #0
 800e86a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e86e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e872:	460b      	mov	r3, r1
 800e874:	4313      	orrs	r3, r2
 800e876:	d055      	beq.n	800e924 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e87c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e880:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e884:	d033      	beq.n	800e8ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e886:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e88a:	d82c      	bhi.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e88c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e890:	d02f      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e892:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e896:	d826      	bhi.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e898:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e89c:	d02b      	beq.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e89e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e8a2:	d820      	bhi.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8a8:	d012      	beq.n	800e8d0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e8aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8ae:	d81a      	bhi.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d022      	beq.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e8b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8b8:	d115      	bne.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8be:	3308      	adds	r3, #8
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f001 fcc0 	bl	8010248 <RCCEx_PLL2_Config>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8ce:	e015      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e8d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8d4:	3328      	adds	r3, #40	; 0x28
 800e8d6:	2102      	movs	r1, #2
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f001 fd67 	bl	80103ac <RCCEx_PLL3_Config>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e8e4:	e00a      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e8ec:	e006      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8ee:	bf00      	nop
 800e8f0:	e004      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8f2:	bf00      	nop
 800e8f4:	e002      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8f6:	bf00      	nop
 800e8f8:	e000      	b.n	800e8fc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e8fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10b      	bne.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e904:	4ba1      	ldr	r3, [pc, #644]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e908:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e914:	4a9d      	ldr	r2, [pc, #628]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e916:	430b      	orrs	r3, r1
 800e918:	6593      	str	r3, [r2, #88]	; 0x58
 800e91a:	e003      	b.n	800e924 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e91c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92c:	f002 0308 	and.w	r3, r2, #8
 800e930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e934:	2300      	movs	r3, #0
 800e936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e93a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e93e:	460b      	mov	r3, r1
 800e940:	4313      	orrs	r3, r2
 800e942:	d01e      	beq.n	800e982 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e94c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e950:	d10c      	bne.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e956:	3328      	adds	r3, #40	; 0x28
 800e958:	2102      	movs	r1, #2
 800e95a:	4618      	mov	r0, r3
 800e95c:	f001 fd26 	bl	80103ac <RCCEx_PLL3_Config>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e96c:	4b87      	ldr	r3, [pc, #540]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e96e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e970:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e97c:	4a83      	ldr	r2, [pc, #524]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e97e:	430b      	orrs	r3, r1
 800e980:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f002 0310 	and.w	r3, r2, #16
 800e98e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e992:	2300      	movs	r3, #0
 800e994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e998:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e99c:	460b      	mov	r3, r1
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	d01e      	beq.n	800e9e0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9ae:	d10c      	bne.n	800e9ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9b4:	3328      	adds	r3, #40	; 0x28
 800e9b6:	2102      	movs	r1, #2
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f001 fcf7 	bl	80103ac <RCCEx_PLL3_Config>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d002      	beq.n	800e9ca <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e9ca:	4b70      	ldr	r3, [pc, #448]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9da:	4a6c      	ldr	r2, [pc, #432]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9dc:	430b      	orrs	r3, r1
 800e9de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e9e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e9ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e9f6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e9fa:	460b      	mov	r3, r1
 800e9fc:	4313      	orrs	r3, r2
 800e9fe:	d03e      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ea00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea0c:	d022      	beq.n	800ea54 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ea0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea12:	d81b      	bhi.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d003      	beq.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ea18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea1c:	d00b      	beq.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ea1e:	e015      	b.n	800ea4c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea24:	3308      	adds	r3, #8
 800ea26:	2100      	movs	r1, #0
 800ea28:	4618      	mov	r0, r3
 800ea2a:	f001 fc0d 	bl	8010248 <RCCEx_PLL2_Config>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea34:	e00f      	b.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea3a:	3328      	adds	r3, #40	; 0x28
 800ea3c:	2102      	movs	r1, #2
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f001 fcb4 	bl	80103ac <RCCEx_PLL3_Config>
 800ea44:	4603      	mov	r3, r0
 800ea46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea4a:	e004      	b.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ea52:	e000      	b.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ea54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ea56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10b      	bne.n	800ea76 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea5e:	4b4b      	ldr	r3, [pc, #300]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea62:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ea66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea6e:	4a47      	ldr	r2, [pc, #284]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea70:	430b      	orrs	r3, r1
 800ea72:	6593      	str	r3, [r2, #88]	; 0x58
 800ea74:	e003      	b.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ea7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea86:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ea8a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ea90:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ea94:	460b      	mov	r3, r1
 800ea96:	4313      	orrs	r3, r2
 800ea98:	d03b      	beq.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ea9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaa2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eaa6:	d01f      	beq.n	800eae8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800eaa8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eaac:	d818      	bhi.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800eaae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eab2:	d003      	beq.n	800eabc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800eab4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eab8:	d007      	beq.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800eaba:	e011      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eabc:	4b33      	ldr	r3, [pc, #204]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eac0:	4a32      	ldr	r2, [pc, #200]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eac6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eac8:	e00f      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eaca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eace:	3328      	adds	r3, #40	; 0x28
 800ead0:	2101      	movs	r1, #1
 800ead2:	4618      	mov	r0, r3
 800ead4:	f001 fc6a 	bl	80103ac <RCCEx_PLL3_Config>
 800ead8:	4603      	mov	r3, r0
 800eada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eade:	e004      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eae0:	2301      	movs	r3, #1
 800eae2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eae6:	e000      	b.n	800eaea <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eaea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d10b      	bne.n	800eb0a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eaf2:	4b26      	ldr	r3, [pc, #152]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eaf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800eafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eafe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb02:	4a22      	ldr	r2, [pc, #136]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb04:	430b      	orrs	r3, r1
 800eb06:	6553      	str	r3, [r2, #84]	; 0x54
 800eb08:	e003      	b.n	800eb12 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eb12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb1a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800eb1e:	673b      	str	r3, [r7, #112]	; 0x70
 800eb20:	2300      	movs	r3, #0
 800eb22:	677b      	str	r3, [r7, #116]	; 0x74
 800eb24:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800eb28:	460b      	mov	r3, r1
 800eb2a:	4313      	orrs	r3, r2
 800eb2c:	d034      	beq.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eb2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d003      	beq.n	800eb40 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800eb38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb3c:	d007      	beq.n	800eb4e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800eb3e:	e011      	b.n	800eb64 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb40:	4b12      	ldr	r3, [pc, #72]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb44:	4a11      	ldr	r2, [pc, #68]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb4c:	e00e      	b.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb52:	3308      	adds	r3, #8
 800eb54:	2102      	movs	r1, #2
 800eb56:	4618      	mov	r0, r3
 800eb58:	f001 fb76 	bl	8010248 <RCCEx_PLL2_Config>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eb62:	e003      	b.n	800eb6c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800eb64:	2301      	movs	r3, #1
 800eb66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d10d      	bne.n	800eb90 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eb74:	4b05      	ldr	r3, [pc, #20]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb82:	4a02      	ldr	r2, [pc, #8]	; (800eb8c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb84:	430b      	orrs	r3, r1
 800eb86:	64d3      	str	r3, [r2, #76]	; 0x4c
 800eb88:	e006      	b.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800eb8a:	bf00      	nop
 800eb8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800eb98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800eba4:	66bb      	str	r3, [r7, #104]	; 0x68
 800eba6:	2300      	movs	r3, #0
 800eba8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ebaa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ebae:	460b      	mov	r3, r1
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	d00c      	beq.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ebb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebb8:	3328      	adds	r3, #40	; 0x28
 800ebba:	2102      	movs	r1, #2
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f001 fbf5 	bl	80103ac <RCCEx_PLL3_Config>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d002      	beq.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ebce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebd6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ebda:	663b      	str	r3, [r7, #96]	; 0x60
 800ebdc:	2300      	movs	r3, #0
 800ebde:	667b      	str	r3, [r7, #100]	; 0x64
 800ebe0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ebe4:	460b      	mov	r3, r1
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	d038      	beq.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ebea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ebf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebf6:	d018      	beq.n	800ec2a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ebf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebfc:	d811      	bhi.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ebfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec02:	d014      	beq.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ec04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec08:	d80b      	bhi.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d011      	beq.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ec0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec12:	d106      	bne.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec14:	4bc3      	ldr	r3, [pc, #780]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec18:	4ac2      	ldr	r2, [pc, #776]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ec20:	e008      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec22:	2301      	movs	r3, #1
 800ec24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec28:	e004      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec2a:	bf00      	nop
 800ec2c:	e002      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec2e:	bf00      	nop
 800ec30:	e000      	b.n	800ec34 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10b      	bne.n	800ec54 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ec3c:	4bb9      	ldr	r3, [pc, #740]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec40:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ec44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec4c:	4ab5      	ldr	r2, [pc, #724]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec4e:	430b      	orrs	r3, r1
 800ec50:	6553      	str	r3, [r2, #84]	; 0x54
 800ec52:	e003      	b.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ec5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec64:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ec68:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec6e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ec72:	460b      	mov	r3, r1
 800ec74:	4313      	orrs	r3, r2
 800ec76:	d009      	beq.n	800ec8c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ec78:	4baa      	ldr	r3, [pc, #680]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ec80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec86:	4aa7      	ldr	r2, [pc, #668]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec88:	430b      	orrs	r3, r1
 800ec8a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ec8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec94:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ec98:	653b      	str	r3, [r7, #80]	; 0x50
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	657b      	str	r3, [r7, #84]	; 0x54
 800ec9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800eca2:	460b      	mov	r3, r1
 800eca4:	4313      	orrs	r3, r2
 800eca6:	d00a      	beq.n	800ecbe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800eca8:	4b9e      	ldr	r3, [pc, #632]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ecb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ecb8:	4a9a      	ldr	r2, [pc, #616]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecba:	430b      	orrs	r3, r1
 800ecbc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ecbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ecca:	64bb      	str	r3, [r7, #72]	; 0x48
 800eccc:	2300      	movs	r3, #0
 800ecce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ecd0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ecd4:	460b      	mov	r3, r1
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	d009      	beq.n	800ecee <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ecda:	4b92      	ldr	r3, [pc, #584]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecde:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ece2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ece8:	4a8e      	ldr	r2, [pc, #568]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecea:	430b      	orrs	r3, r1
 800ecec:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ecee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ecfa:	643b      	str	r3, [r7, #64]	; 0x40
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	647b      	str	r3, [r7, #68]	; 0x44
 800ed00:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ed04:	460b      	mov	r3, r1
 800ed06:	4313      	orrs	r3, r2
 800ed08:	d00e      	beq.n	800ed28 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ed0a:	4b86      	ldr	r3, [pc, #536]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed0c:	691b      	ldr	r3, [r3, #16]
 800ed0e:	4a85      	ldr	r2, [pc, #532]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ed14:	6113      	str	r3, [r2, #16]
 800ed16:	4b83      	ldr	r3, [pc, #524]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed18:	6919      	ldr	r1, [r3, #16]
 800ed1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed1e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed22:	4a80      	ldr	r2, [pc, #512]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed24:	430b      	orrs	r3, r1
 800ed26:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed30:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ed34:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed36:	2300      	movs	r3, #0
 800ed38:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed3a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ed3e:	460b      	mov	r3, r1
 800ed40:	4313      	orrs	r3, r2
 800ed42:	d009      	beq.n	800ed58 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed44:	4b77      	ldr	r3, [pc, #476]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed48:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ed4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed52:	4a74      	ldr	r2, [pc, #464]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed54:	430b      	orrs	r3, r1
 800ed56:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ed58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ed64:	633b      	str	r3, [r7, #48]	; 0x30
 800ed66:	2300      	movs	r3, #0
 800ed68:	637b      	str	r3, [r7, #52]	; 0x34
 800ed6a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4313      	orrs	r3, r2
 800ed72:	d00a      	beq.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ed74:	4b6b      	ldr	r3, [pc, #428]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed78:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800ed7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed84:	4a67      	ldr	r2, [pc, #412]	; (800ef24 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed86:	430b      	orrs	r3, r1
 800ed88:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ed8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	2100      	movs	r1, #0
 800ed94:	62b9      	str	r1, [r7, #40]	; 0x28
 800ed96:	f003 0301 	and.w	r3, r3, #1
 800ed9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed9c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800eda0:	460b      	mov	r3, r1
 800eda2:	4313      	orrs	r3, r2
 800eda4:	d011      	beq.n	800edca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eda6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edaa:	3308      	adds	r3, #8
 800edac:	2100      	movs	r1, #0
 800edae:	4618      	mov	r0, r3
 800edb0:	f001 fa4a 	bl	8010248 <RCCEx_PLL2_Config>
 800edb4:	4603      	mov	r3, r0
 800edb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800edba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d003      	beq.n	800edca <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800edca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edd2:	2100      	movs	r1, #0
 800edd4:	6239      	str	r1, [r7, #32]
 800edd6:	f003 0302 	and.w	r3, r3, #2
 800edda:	627b      	str	r3, [r7, #36]	; 0x24
 800eddc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ede0:	460b      	mov	r3, r1
 800ede2:	4313      	orrs	r3, r2
 800ede4:	d011      	beq.n	800ee0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ede6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edea:	3308      	adds	r3, #8
 800edec:	2101      	movs	r1, #1
 800edee:	4618      	mov	r0, r3
 800edf0:	f001 fa2a 	bl	8010248 <RCCEx_PLL2_Config>
 800edf4:	4603      	mov	r3, r0
 800edf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800edfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ee0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee12:	2100      	movs	r1, #0
 800ee14:	61b9      	str	r1, [r7, #24]
 800ee16:	f003 0304 	and.w	r3, r3, #4
 800ee1a:	61fb      	str	r3, [r7, #28]
 800ee1c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ee20:	460b      	mov	r3, r1
 800ee22:	4313      	orrs	r3, r2
 800ee24:	d011      	beq.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee2a:	3308      	adds	r3, #8
 800ee2c:	2102      	movs	r1, #2
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f001 fa0a 	bl	8010248 <RCCEx_PLL2_Config>
 800ee34:	4603      	mov	r3, r0
 800ee36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d003      	beq.n	800ee4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee52:	2100      	movs	r1, #0
 800ee54:	6139      	str	r1, [r7, #16]
 800ee56:	f003 0308 	and.w	r3, r3, #8
 800ee5a:	617b      	str	r3, [r7, #20]
 800ee5c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ee60:	460b      	mov	r3, r1
 800ee62:	4313      	orrs	r3, r2
 800ee64:	d011      	beq.n	800ee8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ee66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee6a:	3328      	adds	r3, #40	; 0x28
 800ee6c:	2100      	movs	r1, #0
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f001 fa9c 	bl	80103ac <RCCEx_PLL3_Config>
 800ee74:	4603      	mov	r3, r0
 800ee76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ee7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d003      	beq.n	800ee8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ee8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee92:	2100      	movs	r1, #0
 800ee94:	60b9      	str	r1, [r7, #8]
 800ee96:	f003 0310 	and.w	r3, r3, #16
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eea0:	460b      	mov	r3, r1
 800eea2:	4313      	orrs	r3, r2
 800eea4:	d011      	beq.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeaa:	3328      	adds	r3, #40	; 0x28
 800eeac:	2101      	movs	r1, #1
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f001 fa7c 	bl	80103ac <RCCEx_PLL3_Config>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eeba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d003      	beq.n	800eeca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eec6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800eeca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eece:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed2:	2100      	movs	r1, #0
 800eed4:	6039      	str	r1, [r7, #0]
 800eed6:	f003 0320 	and.w	r3, r3, #32
 800eeda:	607b      	str	r3, [r7, #4]
 800eedc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eee0:	460b      	mov	r3, r1
 800eee2:	4313      	orrs	r3, r2
 800eee4:	d011      	beq.n	800ef0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eeea:	3328      	adds	r3, #40	; 0x28
 800eeec:	2102      	movs	r1, #2
 800eeee:	4618      	mov	r0, r3
 800eef0:	f001 fa5c 	bl	80103ac <RCCEx_PLL3_Config>
 800eef4:	4603      	mov	r3, r0
 800eef6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eefa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d003      	beq.n	800ef0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ef0a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d101      	bne.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	e000      	b.n	800ef18 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef24:	58024400 	.word	0x58024400

0800ef28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b090      	sub	sp, #64	; 0x40
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ef32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef36:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ef3a:	430b      	orrs	r3, r1
 800ef3c:	f040 8094 	bne.w	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ef40:	4b9e      	ldr	r3, [pc, #632]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef44:	f003 0307 	and.w	r3, r3, #7
 800ef48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ef4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef4c:	2b04      	cmp	r3, #4
 800ef4e:	f200 8087 	bhi.w	800f060 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ef52:	a201      	add	r2, pc, #4	; (adr r2, 800ef58 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800ef6d 	.word	0x0800ef6d
 800ef5c:	0800ef95 	.word	0x0800ef95
 800ef60:	0800efbd 	.word	0x0800efbd
 800ef64:	0800f059 	.word	0x0800f059
 800ef68:	0800efe5 	.word	0x0800efe5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef6c:	4b93      	ldr	r3, [pc, #588]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef78:	d108      	bne.n	800ef8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f001 f810 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef88:	f000 bd45 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef90:	f000 bd41 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef94:	4b89      	ldr	r3, [pc, #548]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800efa0:	d108      	bne.n	800efb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efa2:	f107 0318 	add.w	r3, r7, #24
 800efa6:	4618      	mov	r0, r3
 800efa8:	f000 fd54 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efb0:	f000 bd31 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efb4:	2300      	movs	r3, #0
 800efb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efb8:	f000 bd2d 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efbc:	4b7f      	ldr	r3, [pc, #508]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800efc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efc8:	d108      	bne.n	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efca:	f107 030c 	add.w	r3, r7, #12
 800efce:	4618      	mov	r0, r3
 800efd0:	f000 fe94 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efd8:	f000 bd1d 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efe0:	f000 bd19 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efe4:	4b75      	ldr	r3, [pc, #468]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efe8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800efec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efee:	4b73      	ldr	r3, [pc, #460]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f003 0304 	and.w	r3, r3, #4
 800eff6:	2b04      	cmp	r3, #4
 800eff8:	d10c      	bne.n	800f014 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800effa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800effc:	2b00      	cmp	r3, #0
 800effe:	d109      	bne.n	800f014 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f000:	4b6e      	ldr	r3, [pc, #440]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	08db      	lsrs	r3, r3, #3
 800f006:	f003 0303 	and.w	r3, r3, #3
 800f00a:	4a6d      	ldr	r2, [pc, #436]	; (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f00c:	fa22 f303 	lsr.w	r3, r2, r3
 800f010:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f012:	e01f      	b.n	800f054 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f014:	4b69      	ldr	r3, [pc, #420]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f01c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f020:	d106      	bne.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f028:	d102      	bne.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f02a:	4b66      	ldr	r3, [pc, #408]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f02c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f02e:	e011      	b.n	800f054 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f030:	4b62      	ldr	r3, [pc, #392]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f03c:	d106      	bne.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f044:	d102      	bne.n	800f04c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f046:	4b60      	ldr	r3, [pc, #384]	; (800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f04a:	e003      	b.n	800f054 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f050:	f000 bce1 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f054:	f000 bcdf 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f058:	4b5c      	ldr	r3, [pc, #368]	; (800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f05c:	f000 bcdb 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f060:	2300      	movs	r3, #0
 800f062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f064:	f000 bcd7 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f06c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f070:	430b      	orrs	r3, r1
 800f072:	f040 80ad 	bne.w	800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f076:	4b51      	ldr	r3, [pc, #324]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f07a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f07e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f086:	d056      	beq.n	800f136 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f08a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f08e:	f200 8090 	bhi.w	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f094:	2bc0      	cmp	r3, #192	; 0xc0
 800f096:	f000 8088 	beq.w	800f1aa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	2bc0      	cmp	r3, #192	; 0xc0
 800f09e:	f200 8088 	bhi.w	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	2b80      	cmp	r3, #128	; 0x80
 800f0a6:	d032      	beq.n	800f10e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0aa:	2b80      	cmp	r3, #128	; 0x80
 800f0ac:	f200 8081 	bhi.w	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b8:	2b40      	cmp	r3, #64	; 0x40
 800f0ba:	d014      	beq.n	800f0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f0bc:	e079      	b.n	800f1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0be:	4b3f      	ldr	r3, [pc, #252]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0ca:	d108      	bne.n	800f0de <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 ff67 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0da:	f000 bc9c 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0e2:	f000 bc98 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0e6:	4b35      	ldr	r3, [pc, #212]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0f2:	d108      	bne.n	800f106 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0f4:	f107 0318 	add.w	r3, r7, #24
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f000 fcab 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0fe:	69bb      	ldr	r3, [r7, #24]
 800f100:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f102:	f000 bc88 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f10a:	f000 bc84 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f10e:	4b2b      	ldr	r3, [pc, #172]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f11a:	d108      	bne.n	800f12e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f11c:	f107 030c 	add.w	r3, r7, #12
 800f120:	4618      	mov	r0, r3
 800f122:	f000 fdeb 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f12a:	f000 bc74 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f132:	f000 bc70 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f136:	4b21      	ldr	r3, [pc, #132]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f13a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f13e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f140:	4b1e      	ldr	r3, [pc, #120]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f003 0304 	and.w	r3, r3, #4
 800f148:	2b04      	cmp	r3, #4
 800f14a:	d10c      	bne.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d109      	bne.n	800f166 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f152:	4b1a      	ldr	r3, [pc, #104]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	08db      	lsrs	r3, r3, #3
 800f158:	f003 0303 	and.w	r3, r3, #3
 800f15c:	4a18      	ldr	r2, [pc, #96]	; (800f1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f15e:	fa22 f303 	lsr.w	r3, r2, r3
 800f162:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f164:	e01f      	b.n	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f166:	4b15      	ldr	r3, [pc, #84]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f172:	d106      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f17a:	d102      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f17c:	4b11      	ldr	r3, [pc, #68]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f17e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f180:	e011      	b.n	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f182:	4b0e      	ldr	r3, [pc, #56]	; (800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f18a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f18e:	d106      	bne.n	800f19e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f196:	d102      	bne.n	800f19e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f198:	4b0b      	ldr	r3, [pc, #44]	; (800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f19a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f19c:	e003      	b.n	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f1a2:	f000 bc38 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1a6:	f000 bc36 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1aa:	4b08      	ldr	r3, [pc, #32]	; (800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ae:	f000 bc32 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1b6:	f000 bc2e 	b.w	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1ba:	bf00      	nop
 800f1bc:	58024400 	.word	0x58024400
 800f1c0:	03d09000 	.word	0x03d09000
 800f1c4:	003d0900 	.word	0x003d0900
 800f1c8:	017d7840 	.word	0x017d7840
 800f1cc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f1d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1d4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f1d8:	430b      	orrs	r3, r1
 800f1da:	f040 809c 	bne.w	800f316 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f1de:	4b9e      	ldr	r3, [pc, #632]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1e2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f1e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f1ee:	d054      	beq.n	800f29a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f1f6:	f200 808b 	bhi.w	800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f200:	f000 8083 	beq.w	800f30a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f206:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f20a:	f200 8081 	bhi.w	800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f214:	d02f      	beq.n	800f276 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f21c:	d878      	bhi.n	800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f220:	2b00      	cmp	r3, #0
 800f222:	d004      	beq.n	800f22e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f22a:	d012      	beq.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f22c:	e070      	b.n	800f310 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f22e:	4b8a      	ldr	r3, [pc, #552]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f236:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f23a:	d107      	bne.n	800f24c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f23c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f240:	4618      	mov	r0, r3
 800f242:	f000 feaf 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f248:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f24a:	e3e4      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f250:	e3e1      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f252:	4b81      	ldr	r3, [pc, #516]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f25a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f25e:	d107      	bne.n	800f270 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f260:	f107 0318 	add.w	r3, r7, #24
 800f264:	4618      	mov	r0, r3
 800f266:	f000 fbf5 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f26e:	e3d2      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f270:	2300      	movs	r3, #0
 800f272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f274:	e3cf      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f276:	4b78      	ldr	r3, [pc, #480]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f27e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f282:	d107      	bne.n	800f294 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f284:	f107 030c 	add.w	r3, r7, #12
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 fd37 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f292:	e3c0      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f294:	2300      	movs	r3, #0
 800f296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f298:	e3bd      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f29a:	4b6f      	ldr	r3, [pc, #444]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f29c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f29e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f2a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f2a4:	4b6c      	ldr	r3, [pc, #432]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f003 0304 	and.w	r3, r3, #4
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d10c      	bne.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f2b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d109      	bne.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2b6:	4b68      	ldr	r3, [pc, #416]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	08db      	lsrs	r3, r3, #3
 800f2bc:	f003 0303 	and.w	r3, r3, #3
 800f2c0:	4a66      	ldr	r2, [pc, #408]	; (800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800f2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2c8:	e01e      	b.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2ca:	4b63      	ldr	r3, [pc, #396]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2d6:	d106      	bne.n	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2de:	d102      	bne.n	800f2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2e0:	4b5f      	ldr	r3, [pc, #380]	; (800f460 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e4:	e010      	b.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f2e6:	4b5c      	ldr	r3, [pc, #368]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2f2:	d106      	bne.n	800f302 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2fa:	d102      	bne.n	800f302 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f2fc:	4b59      	ldr	r3, [pc, #356]	; (800f464 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f300:	e002      	b.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f302:	2300      	movs	r3, #0
 800f304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f306:	e386      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f308:	e385      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f30a:	4b57      	ldr	r3, [pc, #348]	; (800f468 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f30e:	e382      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f310:	2300      	movs	r3, #0
 800f312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f314:	e37f      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f31a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f31e:	430b      	orrs	r3, r1
 800f320:	f040 80a7 	bne.w	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f324:	4b4c      	ldr	r3, [pc, #304]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f328:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f32c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f334:	d055      	beq.n	800f3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f33c:	f200 8096 	bhi.w	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f342:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f346:	f000 8084 	beq.w	800f452 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f34c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f350:	f200 808c 	bhi.w	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f35a:	d030      	beq.n	800f3be <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f362:	f200 8083 	bhi.w	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d004      	beq.n	800f376 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f372:	d012      	beq.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f374:	e07a      	b.n	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f376:	4b38      	ldr	r3, [pc, #224]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f37e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f382:	d107      	bne.n	800f394 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f388:	4618      	mov	r0, r3
 800f38a:	f000 fe0b 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f392:	e340      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f394:	2300      	movs	r3, #0
 800f396:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f398:	e33d      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f39a:	4b2f      	ldr	r3, [pc, #188]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3a6:	d107      	bne.n	800f3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3a8:	f107 0318 	add.w	r3, r7, #24
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f000 fb51 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f3b2:	69bb      	ldr	r3, [r7, #24]
 800f3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3b6:	e32e      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3bc:	e32b      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3be:	4b26      	ldr	r3, [pc, #152]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3ca:	d107      	bne.n	800f3dc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3cc:	f107 030c 	add.w	r3, r7, #12
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f000 fc93 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3da:	e31c      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e0:	e319      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f3e2:	4b1d      	ldr	r3, [pc, #116]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f3ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f3ec:	4b1a      	ldr	r3, [pc, #104]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f003 0304 	and.w	r3, r3, #4
 800f3f4:	2b04      	cmp	r3, #4
 800f3f6:	d10c      	bne.n	800f412 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d109      	bne.n	800f412 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3fe:	4b16      	ldr	r3, [pc, #88]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	08db      	lsrs	r3, r3, #3
 800f404:	f003 0303 	and.w	r3, r3, #3
 800f408:	4a14      	ldr	r2, [pc, #80]	; (800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f40a:	fa22 f303 	lsr.w	r3, r2, r3
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f410:	e01e      	b.n	800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f412:	4b11      	ldr	r3, [pc, #68]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f41e:	d106      	bne.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f422:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f426:	d102      	bne.n	800f42e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f428:	4b0d      	ldr	r3, [pc, #52]	; (800f460 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f42a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f42c:	e010      	b.n	800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f42e:	4b0a      	ldr	r3, [pc, #40]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f436:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f43a:	d106      	bne.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f43e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f442:	d102      	bne.n	800f44a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f444:	4b07      	ldr	r3, [pc, #28]	; (800f464 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f446:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f448:	e002      	b.n	800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f44a:	2300      	movs	r3, #0
 800f44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f44e:	e2e2      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f450:	e2e1      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f452:	4b05      	ldr	r3, [pc, #20]	; (800f468 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f456:	e2de      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f458:	58024400 	.word	0x58024400
 800f45c:	03d09000 	.word	0x03d09000
 800f460:	003d0900 	.word	0x003d0900
 800f464:	017d7840 	.word	0x017d7840
 800f468:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f470:	e2d1      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f472:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f476:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f47a:	430b      	orrs	r3, r1
 800f47c:	f040 809c 	bne.w	800f5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f480:	4b93      	ldr	r3, [pc, #588]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f484:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f488:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f490:	d054      	beq.n	800f53c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f498:	f200 808b 	bhi.w	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4a2:	f000 8083 	beq.w	800f5ac <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4ac:	f200 8081 	bhi.w	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4b6:	d02f      	beq.n	800f518 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f4be:	d878      	bhi.n	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d004      	beq.n	800f4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f4cc:	d012      	beq.n	800f4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f4ce:	e070      	b.n	800f5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4d0:	4b7f      	ldr	r3, [pc, #508]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4dc:	d107      	bne.n	800f4ee <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f000 fd5e 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ec:	e293      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f2:	e290      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4f4:	4b76      	ldr	r3, [pc, #472]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f500:	d107      	bne.n	800f512 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f502:	f107 0318 	add.w	r3, r7, #24
 800f506:	4618      	mov	r0, r3
 800f508:	f000 faa4 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f50c:	69bb      	ldr	r3, [r7, #24]
 800f50e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f510:	e281      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f512:	2300      	movs	r3, #0
 800f514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f516:	e27e      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f518:	4b6d      	ldr	r3, [pc, #436]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f524:	d107      	bne.n	800f536 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f526:	f107 030c 	add.w	r3, r7, #12
 800f52a:	4618      	mov	r0, r3
 800f52c:	f000 fbe6 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f534:	e26f      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f536:	2300      	movs	r3, #0
 800f538:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f53a:	e26c      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f53c:	4b64      	ldr	r3, [pc, #400]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f53e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f540:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f544:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f546:	4b62      	ldr	r3, [pc, #392]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f003 0304 	and.w	r3, r3, #4
 800f54e:	2b04      	cmp	r3, #4
 800f550:	d10c      	bne.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f554:	2b00      	cmp	r3, #0
 800f556:	d109      	bne.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f558:	4b5d      	ldr	r3, [pc, #372]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	08db      	lsrs	r3, r3, #3
 800f55e:	f003 0303 	and.w	r3, r3, #3
 800f562:	4a5c      	ldr	r2, [pc, #368]	; (800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f564:	fa22 f303 	lsr.w	r3, r2, r3
 800f568:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f56a:	e01e      	b.n	800f5aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f56c:	4b58      	ldr	r3, [pc, #352]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f578:	d106      	bne.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f57c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f580:	d102      	bne.n	800f588 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f582:	4b55      	ldr	r3, [pc, #340]	; (800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f584:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f586:	e010      	b.n	800f5aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f588:	4b51      	ldr	r3, [pc, #324]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f590:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f594:	d106      	bne.n	800f5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f598:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f59c:	d102      	bne.n	800f5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f59e:	4b4f      	ldr	r3, [pc, #316]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5a2:	e002      	b.n	800f5aa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f5a8:	e235      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5aa:	e234      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f5ac:	4b4c      	ldr	r3, [pc, #304]	; (800f6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b0:	e231      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5b6:	e22e      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f5b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5bc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f5c0:	430b      	orrs	r3, r1
 800f5c2:	f040 808f 	bne.w	800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f5c6:	4b42      	ldr	r3, [pc, #264]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f5c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5ca:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f5ce:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5d6:	d06b      	beq.n	800f6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f5de:	d874      	bhi.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5e6:	d056      	beq.n	800f696 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f5ee:	d86c      	bhi.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5f6:	d03b      	beq.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f5fe:	d864      	bhi.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f606:	d021      	beq.n	800f64c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f60e:	d85c      	bhi.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f612:	2b00      	cmp	r3, #0
 800f614:	d004      	beq.n	800f620 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f61c:	d004      	beq.n	800f628 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f61e:	e054      	b.n	800f6ca <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f620:	f7fe fa4c 	bl	800dabc <HAL_RCC_GetPCLK1Freq>
 800f624:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f626:	e1f6      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f628:	4b29      	ldr	r3, [pc, #164]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f630:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f634:	d107      	bne.n	800f646 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f636:	f107 0318 	add.w	r3, r7, #24
 800f63a:	4618      	mov	r0, r3
 800f63c:	f000 fa0a 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f644:	e1e7      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f646:	2300      	movs	r3, #0
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f64a:	e1e4      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f64c:	4b20      	ldr	r3, [pc, #128]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f658:	d107      	bne.n	800f66a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f65a:	f107 030c 	add.w	r3, r7, #12
 800f65e:	4618      	mov	r0, r3
 800f660:	f000 fb4c 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f668:	e1d5      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f66e:	e1d2      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f670:	4b17      	ldr	r3, [pc, #92]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f003 0304 	and.w	r3, r3, #4
 800f678:	2b04      	cmp	r3, #4
 800f67a:	d109      	bne.n	800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f67c:	4b14      	ldr	r3, [pc, #80]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	08db      	lsrs	r3, r3, #3
 800f682:	f003 0303 	and.w	r3, r3, #3
 800f686:	4a13      	ldr	r2, [pc, #76]	; (800f6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f688:	fa22 f303 	lsr.w	r3, r2, r3
 800f68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f68e:	e1c2      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f694:	e1bf      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f696:	4b0e      	ldr	r3, [pc, #56]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6a2:	d102      	bne.n	800f6aa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f6a4:	4b0c      	ldr	r3, [pc, #48]	; (800f6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6a8:	e1b5      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ae:	e1b2      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f6b0:	4b07      	ldr	r3, [pc, #28]	; (800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6bc:	d102      	bne.n	800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f6be:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6c2:	e1a8      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c8:	e1a5      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ce:	e1a2      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6d0:	58024400 	.word	0x58024400
 800f6d4:	03d09000 	.word	0x03d09000
 800f6d8:	003d0900 	.word	0x003d0900
 800f6dc:	017d7840 	.word	0x017d7840
 800f6e0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f6e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6e8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f6ec:	430b      	orrs	r3, r1
 800f6ee:	d173      	bne.n	800f7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f6f0:	4b9c      	ldr	r3, [pc, #624]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f6f8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f6fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f700:	d02f      	beq.n	800f762 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f708:	d863      	bhi.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d004      	beq.n	800f71a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f716:	d012      	beq.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f718:	e05b      	b.n	800f7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f71a:	4b92      	ldr	r3, [pc, #584]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f722:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f726:	d107      	bne.n	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f728:	f107 0318 	add.w	r3, r7, #24
 800f72c:	4618      	mov	r0, r3
 800f72e:	f000 f991 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f732:	69bb      	ldr	r3, [r7, #24]
 800f734:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f736:	e16e      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f738:	2300      	movs	r3, #0
 800f73a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f73c:	e16b      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f73e:	4b89      	ldr	r3, [pc, #548]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f74a:	d107      	bne.n	800f75c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f74c:	f107 030c 	add.w	r3, r7, #12
 800f750:	4618      	mov	r0, r3
 800f752:	f000 fad3 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f75a:	e15c      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f75c:	2300      	movs	r3, #0
 800f75e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f760:	e159      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f762:	4b80      	ldr	r3, [pc, #512]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f76a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f76c:	4b7d      	ldr	r3, [pc, #500]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f003 0304 	and.w	r3, r3, #4
 800f774:	2b04      	cmp	r3, #4
 800f776:	d10c      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d109      	bne.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f77e:	4b79      	ldr	r3, [pc, #484]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	08db      	lsrs	r3, r3, #3
 800f784:	f003 0303 	and.w	r3, r3, #3
 800f788:	4a77      	ldr	r2, [pc, #476]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f78a:	fa22 f303 	lsr.w	r3, r2, r3
 800f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f790:	e01e      	b.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f792:	4b74      	ldr	r3, [pc, #464]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f79a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f79e:	d106      	bne.n	800f7ae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7a6:	d102      	bne.n	800f7ae <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f7a8:	4b70      	ldr	r3, [pc, #448]	; (800f96c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7ac:	e010      	b.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f7ae:	4b6d      	ldr	r3, [pc, #436]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f7ba:	d106      	bne.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f7bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f7c2:	d102      	bne.n	800f7ca <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f7c4:	4b6a      	ldr	r3, [pc, #424]	; (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7c8:	e002      	b.n	800f7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f7ce:	e122      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f7d0:	e121      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7d6:	e11e      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f7d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7dc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f7e0:	430b      	orrs	r3, r1
 800f7e2:	d133      	bne.n	800f84c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f7e4:	4b5f      	ldr	r3, [pc, #380]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d004      	beq.n	800f7fe <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7fa:	d012      	beq.n	800f822 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f7fc:	e023      	b.n	800f846 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f7fe:	4b59      	ldr	r3, [pc, #356]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f806:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f80a:	d107      	bne.n	800f81c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f80c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f810:	4618      	mov	r0, r3
 800f812:	f000 fbc7 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f81a:	e0fc      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f820:	e0f9      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f822:	4b50      	ldr	r3, [pc, #320]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f82a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f82e:	d107      	bne.n	800f840 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f830:	f107 0318 	add.w	r3, r7, #24
 800f834:	4618      	mov	r0, r3
 800f836:	f000 f90d 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f83e:	e0ea      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f840:	2300      	movs	r3, #0
 800f842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f844:	e0e7      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f846:	2300      	movs	r3, #0
 800f848:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f84a:	e0e4      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f84c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f850:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f854:	430b      	orrs	r3, r1
 800f856:	f040 808d 	bne.w	800f974 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f85a:	4b42      	ldr	r3, [pc, #264]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f85e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f862:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f86a:	d06b      	beq.n	800f944 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f872:	d874      	bhi.n	800f95e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f87a:	d056      	beq.n	800f92a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f87e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f882:	d86c      	bhi.n	800f95e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f88a:	d03b      	beq.n	800f904 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f892:	d864      	bhi.n	800f95e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f89a:	d021      	beq.n	800f8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f89e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8a2:	d85c      	bhi.n	800f95e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d004      	beq.n	800f8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f8b0:	d004      	beq.n	800f8bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f8b2:	e054      	b.n	800f95e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f8b4:	f000 f8b8 	bl	800fa28 <HAL_RCCEx_GetD3PCLK1Freq>
 800f8b8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f8ba:	e0ac      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f8bc:	4b29      	ldr	r3, [pc, #164]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f8c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f8c8:	d107      	bne.n	800f8da <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f8ca:	f107 0318 	add.w	r3, r7, #24
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f000 f8c0 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8d8:	e09d      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f8de:	e09a      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f8e0:	4b20      	ldr	r3, [pc, #128]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f8e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8ec:	d107      	bne.n	800f8fe <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f8ee:	f107 030c 	add.w	r3, r7, #12
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f000 fa02 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f8fc:	e08b      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f902:	e088      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f904:	4b17      	ldr	r3, [pc, #92]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	f003 0304 	and.w	r3, r3, #4
 800f90c:	2b04      	cmp	r3, #4
 800f90e:	d109      	bne.n	800f924 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f910:	4b14      	ldr	r3, [pc, #80]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	08db      	lsrs	r3, r3, #3
 800f916:	f003 0303 	and.w	r3, r3, #3
 800f91a:	4a13      	ldr	r2, [pc, #76]	; (800f968 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f91c:	fa22 f303 	lsr.w	r3, r2, r3
 800f920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f922:	e078      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f924:	2300      	movs	r3, #0
 800f926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f928:	e075      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f92a:	4b0e      	ldr	r3, [pc, #56]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f936:	d102      	bne.n	800f93e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f938:	4b0c      	ldr	r3, [pc, #48]	; (800f96c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f93c:	e06b      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f93e:	2300      	movs	r3, #0
 800f940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f942:	e068      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f944:	4b07      	ldr	r3, [pc, #28]	; (800f964 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f94c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f950:	d102      	bne.n	800f958 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f952:	4b07      	ldr	r3, [pc, #28]	; (800f970 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f954:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f956:	e05e      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f958:	2300      	movs	r3, #0
 800f95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f95c:	e05b      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f962:	e058      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f964:	58024400 	.word	0x58024400
 800f968:	03d09000 	.word	0x03d09000
 800f96c:	003d0900 	.word	0x003d0900
 800f970:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f974:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f978:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f97c:	430b      	orrs	r3, r1
 800f97e:	d148      	bne.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f980:	4b27      	ldr	r3, [pc, #156]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f988:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f990:	d02a      	beq.n	800f9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f998:	d838      	bhi.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d004      	beq.n	800f9aa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f9a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f9a6:	d00d      	beq.n	800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f9a8:	e030      	b.n	800fa0c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f9aa:	4b1d      	ldr	r3, [pc, #116]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9b6:	d102      	bne.n	800f9be <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f9b8:	4b1a      	ldr	r3, [pc, #104]	; (800fa24 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9bc:	e02b      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9c2:	e028      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f9c4:	4b16      	ldr	r3, [pc, #88]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f9cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f9d0:	d107      	bne.n	800f9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f9d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f000 fae4 	bl	800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9e0:	e019      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9e6:	e016      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f9e8:	4b0d      	ldr	r3, [pc, #52]	; (800fa20 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f9f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f9f4:	d107      	bne.n	800fa06 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9f6:	f107 0318 	add.w	r3, r7, #24
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f000 f82a 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa04:	e007      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa0a:	e004      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa10:	e001      	b.n	800fa16 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800fa16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3740      	adds	r7, #64	; 0x40
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}
 800fa20:	58024400 	.word	0x58024400
 800fa24:	017d7840 	.word	0x017d7840

0800fa28 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fa2c:	f7fe f816 	bl	800da5c <HAL_RCC_GetHCLKFreq>
 800fa30:	4602      	mov	r2, r0
 800fa32:	4b06      	ldr	r3, [pc, #24]	; (800fa4c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fa34:	6a1b      	ldr	r3, [r3, #32]
 800fa36:	091b      	lsrs	r3, r3, #4
 800fa38:	f003 0307 	and.w	r3, r3, #7
 800fa3c:	4904      	ldr	r1, [pc, #16]	; (800fa50 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fa3e:	5ccb      	ldrb	r3, [r1, r3]
 800fa40:	f003 031f 	and.w	r3, r3, #31
 800fa44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	58024400 	.word	0x58024400
 800fa50:	08017678 	.word	0x08017678

0800fa54 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800fa54:	b480      	push	{r7}
 800fa56:	b089      	sub	sp, #36	; 0x24
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa5c:	4ba1      	ldr	r3, [pc, #644]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa60:	f003 0303 	and.w	r3, r3, #3
 800fa64:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800fa66:	4b9f      	ldr	r3, [pc, #636]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa6a:	0b1b      	lsrs	r3, r3, #12
 800fa6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa70:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fa72:	4b9c      	ldr	r3, [pc, #624]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa76:	091b      	lsrs	r3, r3, #4
 800fa78:	f003 0301 	and.w	r3, r3, #1
 800fa7c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fa7e:	4b99      	ldr	r3, [pc, #612]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa82:	08db      	lsrs	r3, r3, #3
 800fa84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa88:	693a      	ldr	r2, [r7, #16]
 800fa8a:	fb02 f303 	mul.w	r3, r2, r3
 800fa8e:	ee07 3a90 	vmov	s15, r3
 800fa92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f000 8111 	beq.w	800fcc4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800faa2:	69bb      	ldr	r3, [r7, #24]
 800faa4:	2b02      	cmp	r3, #2
 800faa6:	f000 8083 	beq.w	800fbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800faaa:	69bb      	ldr	r3, [r7, #24]
 800faac:	2b02      	cmp	r3, #2
 800faae:	f200 80a1 	bhi.w	800fbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d003      	beq.n	800fac0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fab8:	69bb      	ldr	r3, [r7, #24]
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d056      	beq.n	800fb6c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fabe:	e099      	b.n	800fbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fac0:	4b88      	ldr	r3, [pc, #544]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f003 0320 	and.w	r3, r3, #32
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d02d      	beq.n	800fb28 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800facc:	4b85      	ldr	r3, [pc, #532]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	08db      	lsrs	r3, r3, #3
 800fad2:	f003 0303 	and.w	r3, r3, #3
 800fad6:	4a84      	ldr	r2, [pc, #528]	; (800fce8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fad8:	fa22 f303 	lsr.w	r3, r2, r3
 800fadc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	ee07 3a90 	vmov	s15, r3
 800fae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	ee07 3a90 	vmov	s15, r3
 800faee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800faf6:	4b7b      	ldr	r3, [pc, #492]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800faf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fafe:	ee07 3a90 	vmov	s15, r3
 800fb02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb06:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb26:	e087      	b.n	800fc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	ee07 3a90 	vmov	s15, r3
 800fb2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fb36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb3a:	4b6a      	ldr	r3, [pc, #424]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb42:	ee07 3a90 	vmov	s15, r3
 800fb46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb6a:	e065      	b.n	800fc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	ee07 3a90 	vmov	s15, r3
 800fb72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fb7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb7e:	4b59      	ldr	r3, [pc, #356]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb86:	ee07 3a90 	vmov	s15, r3
 800fb8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbae:	e043      	b.n	800fc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	ee07 3a90 	vmov	s15, r3
 800fbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fbbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbc2:	4b48      	ldr	r3, [pc, #288]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbca:	ee07 3a90 	vmov	s15, r3
 800fbce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbf2:	e021      	b.n	800fc38 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fbf4:	697b      	ldr	r3, [r7, #20]
 800fbf6:	ee07 3a90 	vmov	s15, r3
 800fbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fc02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc06:	4b37      	ldr	r3, [pc, #220]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc0e:	ee07 3a90 	vmov	s15, r3
 800fc12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc16:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fcec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc36:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fc38:	4b2a      	ldr	r3, [pc, #168]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc3c:	0a5b      	lsrs	r3, r3, #9
 800fc3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc42:	ee07 3a90 	vmov	s15, r3
 800fc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc52:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc5e:	ee17 2a90 	vmov	r2, s15
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fc66:	4b1f      	ldr	r3, [pc, #124]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc6a:	0c1b      	lsrs	r3, r3, #16
 800fc6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc70:	ee07 3a90 	vmov	s15, r3
 800fc74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc80:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc8c:	ee17 2a90 	vmov	r2, s15
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fc94:	4b13      	ldr	r3, [pc, #76]	; (800fce4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc98:	0e1b      	lsrs	r3, r3, #24
 800fc9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc9e:	ee07 3a90 	vmov	s15, r3
 800fca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcae:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcba:	ee17 2a90 	vmov	r2, s15
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fcc2:	e008      	b.n	800fcd6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	609a      	str	r2, [r3, #8]
}
 800fcd6:	bf00      	nop
 800fcd8:	3724      	adds	r7, #36	; 0x24
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr
 800fce2:	bf00      	nop
 800fce4:	58024400 	.word	0x58024400
 800fce8:	03d09000 	.word	0x03d09000
 800fcec:	46000000 	.word	0x46000000
 800fcf0:	4c742400 	.word	0x4c742400
 800fcf4:	4a742400 	.word	0x4a742400
 800fcf8:	4bbebc20 	.word	0x4bbebc20

0800fcfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b089      	sub	sp, #36	; 0x24
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd04:	4ba1      	ldr	r3, [pc, #644]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd08:	f003 0303 	and.w	r3, r3, #3
 800fd0c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fd0e:	4b9f      	ldr	r3, [pc, #636]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd12:	0d1b      	lsrs	r3, r3, #20
 800fd14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd18:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fd1a:	4b9c      	ldr	r3, [pc, #624]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd1e:	0a1b      	lsrs	r3, r3, #8
 800fd20:	f003 0301 	and.w	r3, r3, #1
 800fd24:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fd26:	4b99      	ldr	r3, [pc, #612]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd2a:	08db      	lsrs	r3, r3, #3
 800fd2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	fb02 f303 	mul.w	r3, r2, r3
 800fd36:	ee07 3a90 	vmov	s15, r3
 800fd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f000 8111 	beq.w	800ff6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	2b02      	cmp	r3, #2
 800fd4e:	f000 8083 	beq.w	800fe58 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fd52:	69bb      	ldr	r3, [r7, #24]
 800fd54:	2b02      	cmp	r3, #2
 800fd56:	f200 80a1 	bhi.w	800fe9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d003      	beq.n	800fd68 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fd60:	69bb      	ldr	r3, [r7, #24]
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d056      	beq.n	800fe14 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fd66:	e099      	b.n	800fe9c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd68:	4b88      	ldr	r3, [pc, #544]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	f003 0320 	and.w	r3, r3, #32
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d02d      	beq.n	800fdd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd74:	4b85      	ldr	r3, [pc, #532]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	08db      	lsrs	r3, r3, #3
 800fd7a:	f003 0303 	and.w	r3, r3, #3
 800fd7e:	4a84      	ldr	r2, [pc, #528]	; (800ff90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fd80:	fa22 f303 	lsr.w	r3, r2, r3
 800fd84:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	ee07 3a90 	vmov	s15, r3
 800fd8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	ee07 3a90 	vmov	s15, r3
 800fd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd9e:	4b7b      	ldr	r3, [pc, #492]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fda6:	ee07 3a90 	vmov	s15, r3
 800fdaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdae:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ff94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fdb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fdce:	e087      	b.n	800fee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fdd0:	697b      	ldr	r3, [r7, #20]
 800fdd2:	ee07 3a90 	vmov	s15, r3
 800fdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ff98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fdde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fde2:	4b6a      	ldr	r3, [pc, #424]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fde4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdea:	ee07 3a90 	vmov	s15, r3
 800fdee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdf6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ff94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fdfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe12:	e065      	b.n	800fee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe14:	697b      	ldr	r3, [r7, #20]
 800fe16:	ee07 3a90 	vmov	s15, r3
 800fe1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ff9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fe22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe26:	4b59      	ldr	r3, [pc, #356]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe2e:	ee07 3a90 	vmov	s15, r3
 800fe32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe36:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ff94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe56:	e043      	b.n	800fee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	ee07 3a90 	vmov	s15, r3
 800fe5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ffa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fe66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe6a:	4b48      	ldr	r3, [pc, #288]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe72:	ee07 3a90 	vmov	s15, r3
 800fe76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ff94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe9a:	e021      	b.n	800fee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	ee07 3a90 	vmov	s15, r3
 800fea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fea6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ff9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800feaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800feae:	4b37      	ldr	r3, [pc, #220]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800feb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb6:	ee07 3a90 	vmov	s15, r3
 800feba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800febe:	ed97 6a03 	vldr	s12, [r7, #12]
 800fec2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ff94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fede:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fee0:	4b2a      	ldr	r3, [pc, #168]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fee4:	0a5b      	lsrs	r3, r3, #9
 800fee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800feea:	ee07 3a90 	vmov	s15, r3
 800feee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fef6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fefa:	edd7 6a07 	vldr	s13, [r7, #28]
 800fefe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff06:	ee17 2a90 	vmov	r2, s15
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ff0e:	4b1f      	ldr	r3, [pc, #124]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff12:	0c1b      	lsrs	r3, r3, #16
 800ff14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff18:	ee07 3a90 	vmov	s15, r3
 800ff1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff24:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff28:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff34:	ee17 2a90 	vmov	r2, s15
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ff3c:	4b13      	ldr	r3, [pc, #76]	; (800ff8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff40:	0e1b      	lsrs	r3, r3, #24
 800ff42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff46:	ee07 3a90 	vmov	s15, r3
 800ff4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff56:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff62:	ee17 2a90 	vmov	r2, s15
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ff6a:	e008      	b.n	800ff7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2200      	movs	r2, #0
 800ff70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2200      	movs	r2, #0
 800ff76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	609a      	str	r2, [r3, #8]
}
 800ff7e:	bf00      	nop
 800ff80:	3724      	adds	r7, #36	; 0x24
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	58024400 	.word	0x58024400
 800ff90:	03d09000 	.word	0x03d09000
 800ff94:	46000000 	.word	0x46000000
 800ff98:	4c742400 	.word	0x4c742400
 800ff9c:	4a742400 	.word	0x4a742400
 800ffa0:	4bbebc20 	.word	0x4bbebc20

0800ffa4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ffa4:	b480      	push	{r7}
 800ffa6:	b089      	sub	sp, #36	; 0x24
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ffac:	4ba0      	ldr	r3, [pc, #640]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb0:	f003 0303 	and.w	r3, r3, #3
 800ffb4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ffb6:	4b9e      	ldr	r3, [pc, #632]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffba:	091b      	lsrs	r3, r3, #4
 800ffbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffc0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ffc2:	4b9b      	ldr	r3, [pc, #620]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc6:	f003 0301 	and.w	r3, r3, #1
 800ffca:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ffcc:	4b98      	ldr	r3, [pc, #608]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ffce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ffd0:	08db      	lsrs	r3, r3, #3
 800ffd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ffd6:	693a      	ldr	r2, [r7, #16]
 800ffd8:	fb02 f303 	mul.w	r3, r2, r3
 800ffdc:	ee07 3a90 	vmov	s15, r3
 800ffe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffe4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f000 8111 	beq.w	8010212 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	2b02      	cmp	r3, #2
 800fff4:	f000 8083 	beq.w	80100fe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fff8:	69bb      	ldr	r3, [r7, #24]
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	f200 80a1 	bhi.w	8010142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010000:	69bb      	ldr	r3, [r7, #24]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d003      	beq.n	801000e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8010006:	69bb      	ldr	r3, [r7, #24]
 8010008:	2b01      	cmp	r3, #1
 801000a:	d056      	beq.n	80100ba <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801000c:	e099      	b.n	8010142 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801000e:	4b88      	ldr	r3, [pc, #544]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f003 0320 	and.w	r3, r3, #32
 8010016:	2b00      	cmp	r3, #0
 8010018:	d02d      	beq.n	8010076 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801001a:	4b85      	ldr	r3, [pc, #532]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	08db      	lsrs	r3, r3, #3
 8010020:	f003 0303 	and.w	r3, r3, #3
 8010024:	4a83      	ldr	r2, [pc, #524]	; (8010234 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8010026:	fa22 f303 	lsr.w	r3, r2, r3
 801002a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	ee07 3a90 	vmov	s15, r3
 8010032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	ee07 3a90 	vmov	s15, r3
 801003c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010044:	4b7a      	ldr	r3, [pc, #488]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801004c:	ee07 3a90 	vmov	s15, r3
 8010050:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010054:	ed97 6a03 	vldr	s12, [r7, #12]
 8010058:	eddf 5a77 	vldr	s11, [pc, #476]	; 8010238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801005c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010060:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010064:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801006c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010070:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8010074:	e087      	b.n	8010186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	ee07 3a90 	vmov	s15, r3
 801007c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010080:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801023c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010084:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010088:	4b69      	ldr	r3, [pc, #420]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801008a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801008c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010090:	ee07 3a90 	vmov	s15, r3
 8010094:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010098:	ed97 6a03 	vldr	s12, [r7, #12]
 801009c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8010238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80100b8:	e065      	b.n	8010186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80100ba:	697b      	ldr	r3, [r7, #20]
 80100bc:	ee07 3a90 	vmov	s15, r3
 80100c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010240 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80100c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100cc:	4b58      	ldr	r3, [pc, #352]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100d4:	ee07 3a90 	vmov	s15, r3
 80100d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80100e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8010238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80100fc:	e043      	b.n	8010186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	ee07 3a90 	vmov	s15, r3
 8010104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010108:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8010244 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801010c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010110:	4b47      	ldr	r3, [pc, #284]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010114:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010118:	ee07 3a90 	vmov	s15, r3
 801011c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010120:	ed97 6a03 	vldr	s12, [r7, #12]
 8010124:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801012c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010130:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010138:	ee67 7a27 	vmul.f32	s15, s14, s15
 801013c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010140:	e021      	b.n	8010186 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	ee07 3a90 	vmov	s15, r3
 8010148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801014c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801023c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8010150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010154:	4b36      	ldr	r3, [pc, #216]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801015c:	ee07 3a90 	vmov	s15, r3
 8010160:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010164:	ed97 6a03 	vldr	s12, [r7, #12]
 8010168:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010238 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801016c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010170:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010174:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010178:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801017c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010180:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010184:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8010186:	4b2a      	ldr	r3, [pc, #168]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801018a:	0a5b      	lsrs	r3, r3, #9
 801018c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010190:	ee07 3a90 	vmov	s15, r3
 8010194:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010198:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801019c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80101a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101ac:	ee17 2a90 	vmov	r2, s15
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80101b4:	4b1e      	ldr	r3, [pc, #120]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b8:	0c1b      	lsrs	r3, r3, #16
 80101ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101be:	ee07 3a90 	vmov	s15, r3
 80101c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80101d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101da:	ee17 2a90 	vmov	r2, s15
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80101e2:	4b13      	ldr	r3, [pc, #76]	; (8010230 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101e6:	0e1b      	lsrs	r3, r3, #24
 80101e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101ec:	ee07 3a90 	vmov	s15, r3
 80101f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8010200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010208:	ee17 2a90 	vmov	r2, s15
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010210:	e008      	b.n	8010224 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2200      	movs	r2, #0
 8010216:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2200      	movs	r2, #0
 801021c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	2200      	movs	r2, #0
 8010222:	609a      	str	r2, [r3, #8]
}
 8010224:	bf00      	nop
 8010226:	3724      	adds	r7, #36	; 0x24
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr
 8010230:	58024400 	.word	0x58024400
 8010234:	03d09000 	.word	0x03d09000
 8010238:	46000000 	.word	0x46000000
 801023c:	4c742400 	.word	0x4c742400
 8010240:	4a742400 	.word	0x4a742400
 8010244:	4bbebc20 	.word	0x4bbebc20

08010248 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8010252:	2300      	movs	r3, #0
 8010254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010256:	4b53      	ldr	r3, [pc, #332]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801025a:	f003 0303 	and.w	r3, r3, #3
 801025e:	2b03      	cmp	r3, #3
 8010260:	d101      	bne.n	8010266 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8010262:	2301      	movs	r3, #1
 8010264:	e099      	b.n	801039a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8010266:	4b4f      	ldr	r3, [pc, #316]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4a4e      	ldr	r2, [pc, #312]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801026c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010270:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010272:	f7f7 f86f 	bl	8007354 <HAL_GetTick>
 8010276:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010278:	e008      	b.n	801028c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801027a:	f7f7 f86b 	bl	8007354 <HAL_GetTick>
 801027e:	4602      	mov	r2, r0
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	2b02      	cmp	r3, #2
 8010286:	d901      	bls.n	801028c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010288:	2303      	movs	r3, #3
 801028a:	e086      	b.n	801039a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801028c:	4b45      	ldr	r3, [pc, #276]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010294:	2b00      	cmp	r3, #0
 8010296:	d1f0      	bne.n	801027a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010298:	4b42      	ldr	r3, [pc, #264]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801029a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801029c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	031b      	lsls	r3, r3, #12
 80102a6:	493f      	ldr	r1, [pc, #252]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 80102a8:	4313      	orrs	r3, r2
 80102aa:	628b      	str	r3, [r1, #40]	; 0x28
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	3b01      	subs	r3, #1
 80102b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	3b01      	subs	r3, #1
 80102bc:	025b      	lsls	r3, r3, #9
 80102be:	b29b      	uxth	r3, r3
 80102c0:	431a      	orrs	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	68db      	ldr	r3, [r3, #12]
 80102c6:	3b01      	subs	r3, #1
 80102c8:	041b      	lsls	r3, r3, #16
 80102ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80102ce:	431a      	orrs	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	691b      	ldr	r3, [r3, #16]
 80102d4:	3b01      	subs	r3, #1
 80102d6:	061b      	lsls	r3, r3, #24
 80102d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80102dc:	4931      	ldr	r1, [pc, #196]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 80102de:	4313      	orrs	r3, r2
 80102e0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80102e2:	4b30      	ldr	r3, [pc, #192]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 80102e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	695b      	ldr	r3, [r3, #20]
 80102ee:	492d      	ldr	r1, [pc, #180]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 80102f0:	4313      	orrs	r3, r2
 80102f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80102f4:	4b2b      	ldr	r3, [pc, #172]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 80102f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f8:	f023 0220 	bic.w	r2, r3, #32
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	699b      	ldr	r3, [r3, #24]
 8010300:	4928      	ldr	r1, [pc, #160]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010302:	4313      	orrs	r3, r2
 8010304:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8010306:	4b27      	ldr	r3, [pc, #156]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801030a:	4a26      	ldr	r2, [pc, #152]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801030c:	f023 0310 	bic.w	r3, r3, #16
 8010310:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010312:	4b24      	ldr	r3, [pc, #144]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010316:	4b24      	ldr	r3, [pc, #144]	; (80103a8 <RCCEx_PLL2_Config+0x160>)
 8010318:	4013      	ands	r3, r2
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	69d2      	ldr	r2, [r2, #28]
 801031e:	00d2      	lsls	r2, r2, #3
 8010320:	4920      	ldr	r1, [pc, #128]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010322:	4313      	orrs	r3, r2
 8010324:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8010326:	4b1f      	ldr	r3, [pc, #124]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032a:	4a1e      	ldr	r2, [pc, #120]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801032c:	f043 0310 	orr.w	r3, r3, #16
 8010330:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d106      	bne.n	8010346 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010338:	4b1a      	ldr	r3, [pc, #104]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801033a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033c:	4a19      	ldr	r2, [pc, #100]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801033e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010342:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010344:	e00f      	b.n	8010366 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	2b01      	cmp	r3, #1
 801034a:	d106      	bne.n	801035a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801034c:	4b15      	ldr	r3, [pc, #84]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801034e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010350:	4a14      	ldr	r2, [pc, #80]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010358:	e005      	b.n	8010366 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801035a:	4b12      	ldr	r3, [pc, #72]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801035c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035e:	4a11      	ldr	r2, [pc, #68]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010364:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8010366:	4b0f      	ldr	r3, [pc, #60]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a0e      	ldr	r2, [pc, #56]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801036c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010370:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010372:	f7f6 ffef 	bl	8007354 <HAL_GetTick>
 8010376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010378:	e008      	b.n	801038c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801037a:	f7f6 ffeb 	bl	8007354 <HAL_GetTick>
 801037e:	4602      	mov	r2, r0
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	1ad3      	subs	r3, r2, r3
 8010384:	2b02      	cmp	r3, #2
 8010386:	d901      	bls.n	801038c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010388:	2303      	movs	r3, #3
 801038a:	e006      	b.n	801039a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801038c:	4b05      	ldr	r3, [pc, #20]	; (80103a4 <RCCEx_PLL2_Config+0x15c>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010394:	2b00      	cmp	r3, #0
 8010396:	d0f0      	beq.n	801037a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010398:	7bfb      	ldrb	r3, [r7, #15]
}
 801039a:	4618      	mov	r0, r3
 801039c:	3710      	adds	r7, #16
 801039e:	46bd      	mov	sp, r7
 80103a0:	bd80      	pop	{r7, pc}
 80103a2:	bf00      	nop
 80103a4:	58024400 	.word	0x58024400
 80103a8:	ffff0007 	.word	0xffff0007

080103ac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80103b6:	2300      	movs	r3, #0
 80103b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80103ba:	4b53      	ldr	r3, [pc, #332]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80103bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103be:	f003 0303 	and.w	r3, r3, #3
 80103c2:	2b03      	cmp	r3, #3
 80103c4:	d101      	bne.n	80103ca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80103c6:	2301      	movs	r3, #1
 80103c8:	e099      	b.n	80104fe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80103ca:	4b4f      	ldr	r3, [pc, #316]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a4e      	ldr	r2, [pc, #312]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80103d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80103d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103d6:	f7f6 ffbd 	bl	8007354 <HAL_GetTick>
 80103da:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80103dc:	e008      	b.n	80103f0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80103de:	f7f6 ffb9 	bl	8007354 <HAL_GetTick>
 80103e2:	4602      	mov	r2, r0
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	2b02      	cmp	r3, #2
 80103ea:	d901      	bls.n	80103f0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80103ec:	2303      	movs	r3, #3
 80103ee:	e086      	b.n	80104fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80103f0:	4b45      	ldr	r3, [pc, #276]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d1f0      	bne.n	80103de <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80103fc:	4b42      	ldr	r3, [pc, #264]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80103fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010400:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	051b      	lsls	r3, r3, #20
 801040a:	493f      	ldr	r1, [pc, #252]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 801040c:	4313      	orrs	r3, r2
 801040e:	628b      	str	r3, [r1, #40]	; 0x28
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	685b      	ldr	r3, [r3, #4]
 8010414:	3b01      	subs	r3, #1
 8010416:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	3b01      	subs	r3, #1
 8010420:	025b      	lsls	r3, r3, #9
 8010422:	b29b      	uxth	r3, r3
 8010424:	431a      	orrs	r2, r3
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	3b01      	subs	r3, #1
 801042c:	041b      	lsls	r3, r3, #16
 801042e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010432:	431a      	orrs	r2, r3
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	3b01      	subs	r3, #1
 801043a:	061b      	lsls	r3, r3, #24
 801043c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010440:	4931      	ldr	r1, [pc, #196]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010442:	4313      	orrs	r3, r2
 8010444:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8010446:	4b30      	ldr	r3, [pc, #192]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801044a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	695b      	ldr	r3, [r3, #20]
 8010452:	492d      	ldr	r1, [pc, #180]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010454:	4313      	orrs	r3, r2
 8010456:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010458:	4b2b      	ldr	r3, [pc, #172]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 801045a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801045c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	699b      	ldr	r3, [r3, #24]
 8010464:	4928      	ldr	r1, [pc, #160]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010466:	4313      	orrs	r3, r2
 8010468:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801046a:	4b27      	ldr	r3, [pc, #156]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 801046c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046e:	4a26      	ldr	r2, [pc, #152]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010474:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8010476:	4b24      	ldr	r3, [pc, #144]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801047a:	4b24      	ldr	r3, [pc, #144]	; (801050c <RCCEx_PLL3_Config+0x160>)
 801047c:	4013      	ands	r3, r2
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	69d2      	ldr	r2, [r2, #28]
 8010482:	00d2      	lsls	r2, r2, #3
 8010484:	4920      	ldr	r1, [pc, #128]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010486:	4313      	orrs	r3, r2
 8010488:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801048a:	4b1f      	ldr	r3, [pc, #124]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 801048c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801048e:	4a1e      	ldr	r2, [pc, #120]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 8010490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010494:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d106      	bne.n	80104aa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801049c:	4b1a      	ldr	r3, [pc, #104]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 801049e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a0:	4a19      	ldr	r2, [pc, #100]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80104a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80104a8:	e00f      	b.n	80104ca <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80104aa:	683b      	ldr	r3, [r7, #0]
 80104ac:	2b01      	cmp	r3, #1
 80104ae:	d106      	bne.n	80104be <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80104b0:	4b15      	ldr	r3, [pc, #84]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b4:	4a14      	ldr	r2, [pc, #80]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80104ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80104bc:	e005      	b.n	80104ca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80104be:	4b12      	ldr	r3, [pc, #72]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c2:	4a11      	ldr	r2, [pc, #68]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80104c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80104ca:	4b0f      	ldr	r3, [pc, #60]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	4a0e      	ldr	r2, [pc, #56]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80104d6:	f7f6 ff3d 	bl	8007354 <HAL_GetTick>
 80104da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104dc:	e008      	b.n	80104f0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80104de:	f7f6 ff39 	bl	8007354 <HAL_GetTick>
 80104e2:	4602      	mov	r2, r0
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	1ad3      	subs	r3, r2, r3
 80104e8:	2b02      	cmp	r3, #2
 80104ea:	d901      	bls.n	80104f0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80104ec:	2303      	movs	r3, #3
 80104ee:	e006      	b.n	80104fe <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80104f0:	4b05      	ldr	r3, [pc, #20]	; (8010508 <RCCEx_PLL3_Config+0x15c>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d0f0      	beq.n	80104de <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	58024400 	.word	0x58024400
 801050c:	ffff0007 	.word	0xffff0007

08010510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b082      	sub	sp, #8
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d101      	bne.n	8010522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801051e:	2301      	movs	r3, #1
 8010520:	e049      	b.n	80105b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b00      	cmp	r3, #0
 801052c:	d106      	bne.n	801053c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2200      	movs	r2, #0
 8010532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7f6 faa8 	bl	8006a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2202      	movs	r2, #2
 8010540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681a      	ldr	r2, [r3, #0]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	3304      	adds	r3, #4
 801054c:	4619      	mov	r1, r3
 801054e:	4610      	mov	r0, r2
 8010550:	f001 f940 	bl	80117d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2201      	movs	r2, #1
 8010558:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2201      	movs	r2, #1
 8010590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80105b4:	2300      	movs	r3, #0
}
 80105b6:	4618      	mov	r0, r3
 80105b8:	3708      	adds	r7, #8
 80105ba:	46bd      	mov	sp, r7
 80105bc:	bd80      	pop	{r7, pc}
	...

080105c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80105ce:	b2db      	uxtb	r3, r3
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d001      	beq.n	80105d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80105d4:	2301      	movs	r3, #1
 80105d6:	e054      	b.n	8010682 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2202      	movs	r2, #2
 80105dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	68da      	ldr	r2, [r3, #12]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f042 0201 	orr.w	r2, r2, #1
 80105ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4a26      	ldr	r2, [pc, #152]	; (8010690 <HAL_TIM_Base_Start_IT+0xd0>)
 80105f6:	4293      	cmp	r3, r2
 80105f8:	d022      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010602:	d01d      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a22      	ldr	r2, [pc, #136]	; (8010694 <HAL_TIM_Base_Start_IT+0xd4>)
 801060a:	4293      	cmp	r3, r2
 801060c:	d018      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	4a21      	ldr	r2, [pc, #132]	; (8010698 <HAL_TIM_Base_Start_IT+0xd8>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d013      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	4a1f      	ldr	r2, [pc, #124]	; (801069c <HAL_TIM_Base_Start_IT+0xdc>)
 801061e:	4293      	cmp	r3, r2
 8010620:	d00e      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	4a1e      	ldr	r2, [pc, #120]	; (80106a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8010628:	4293      	cmp	r3, r2
 801062a:	d009      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4a1c      	ldr	r2, [pc, #112]	; (80106a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8010632:	4293      	cmp	r3, r2
 8010634:	d004      	beq.n	8010640 <HAL_TIM_Base_Start_IT+0x80>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	4a1b      	ldr	r2, [pc, #108]	; (80106a8 <HAL_TIM_Base_Start_IT+0xe8>)
 801063c:	4293      	cmp	r3, r2
 801063e:	d115      	bne.n	801066c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	689a      	ldr	r2, [r3, #8]
 8010646:	4b19      	ldr	r3, [pc, #100]	; (80106ac <HAL_TIM_Base_Start_IT+0xec>)
 8010648:	4013      	ands	r3, r2
 801064a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	2b06      	cmp	r3, #6
 8010650:	d015      	beq.n	801067e <HAL_TIM_Base_Start_IT+0xbe>
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010658:	d011      	beq.n	801067e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	681a      	ldr	r2, [r3, #0]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f042 0201 	orr.w	r2, r2, #1
 8010668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801066a:	e008      	b.n	801067e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f042 0201 	orr.w	r2, r2, #1
 801067a:	601a      	str	r2, [r3, #0]
 801067c:	e000      	b.n	8010680 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801067e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010680:	2300      	movs	r3, #0
}
 8010682:	4618      	mov	r0, r3
 8010684:	3714      	adds	r7, #20
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	40010000 	.word	0x40010000
 8010694:	40000400 	.word	0x40000400
 8010698:	40000800 	.word	0x40000800
 801069c:	40000c00 	.word	0x40000c00
 80106a0:	40010400 	.word	0x40010400
 80106a4:	40001800 	.word	0x40001800
 80106a8:	40014000 	.word	0x40014000
 80106ac:	00010007 	.word	0x00010007

080106b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80106b0:	b580      	push	{r7, lr}
 80106b2:	b082      	sub	sp, #8
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80106be:	2301      	movs	r3, #1
 80106c0:	e049      	b.n	8010756 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80106c8:	b2db      	uxtb	r3, r3
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d106      	bne.n	80106dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80106d6:	6878      	ldr	r0, [r7, #4]
 80106d8:	f000 f841 	bl	801075e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2202      	movs	r2, #2
 80106e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	3304      	adds	r3, #4
 80106ec:	4619      	mov	r1, r3
 80106ee:	4610      	mov	r0, r2
 80106f0:	f001 f870 	bl	80117d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2201      	movs	r2, #1
 80106f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2201      	movs	r2, #1
 8010700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	2201      	movs	r2, #1
 8010708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2201      	movs	r2, #1
 8010710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2201      	movs	r2, #1
 8010720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	2201      	movs	r2, #1
 8010728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	2201      	movs	r2, #1
 8010730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2201      	movs	r2, #1
 8010740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2201      	movs	r2, #1
 8010748:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010754:	2300      	movs	r3, #0
}
 8010756:	4618      	mov	r0, r3
 8010758:	3708      	adds	r7, #8
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}

0801075e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801075e:	b480      	push	{r7}
 8010760:	b083      	sub	sp, #12
 8010762:	af00      	add	r7, sp, #0
 8010764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010766:	bf00      	nop
 8010768:	370c      	adds	r7, #12
 801076a:	46bd      	mov	sp, r7
 801076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010770:	4770      	bx	lr
	...

08010774 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801077e:	683b      	ldr	r3, [r7, #0]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d109      	bne.n	8010798 <HAL_TIM_PWM_Start+0x24>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801078a:	b2db      	uxtb	r3, r3
 801078c:	2b01      	cmp	r3, #1
 801078e:	bf14      	ite	ne
 8010790:	2301      	movne	r3, #1
 8010792:	2300      	moveq	r3, #0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	e03c      	b.n	8010812 <HAL_TIM_PWM_Start+0x9e>
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	2b04      	cmp	r3, #4
 801079c:	d109      	bne.n	80107b2 <HAL_TIM_PWM_Start+0x3e>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107a4:	b2db      	uxtb	r3, r3
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	bf14      	ite	ne
 80107aa:	2301      	movne	r3, #1
 80107ac:	2300      	moveq	r3, #0
 80107ae:	b2db      	uxtb	r3, r3
 80107b0:	e02f      	b.n	8010812 <HAL_TIM_PWM_Start+0x9e>
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2b08      	cmp	r3, #8
 80107b6:	d109      	bne.n	80107cc <HAL_TIM_PWM_Start+0x58>
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80107be:	b2db      	uxtb	r3, r3
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	bf14      	ite	ne
 80107c4:	2301      	movne	r3, #1
 80107c6:	2300      	moveq	r3, #0
 80107c8:	b2db      	uxtb	r3, r3
 80107ca:	e022      	b.n	8010812 <HAL_TIM_PWM_Start+0x9e>
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	2b0c      	cmp	r3, #12
 80107d0:	d109      	bne.n	80107e6 <HAL_TIM_PWM_Start+0x72>
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80107d8:	b2db      	uxtb	r3, r3
 80107da:	2b01      	cmp	r3, #1
 80107dc:	bf14      	ite	ne
 80107de:	2301      	movne	r3, #1
 80107e0:	2300      	moveq	r3, #0
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	e015      	b.n	8010812 <HAL_TIM_PWM_Start+0x9e>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	2b10      	cmp	r3, #16
 80107ea:	d109      	bne.n	8010800 <HAL_TIM_PWM_Start+0x8c>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	bf14      	ite	ne
 80107f8:	2301      	movne	r3, #1
 80107fa:	2300      	moveq	r3, #0
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	e008      	b.n	8010812 <HAL_TIM_PWM_Start+0x9e>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b01      	cmp	r3, #1
 801080a:	bf14      	ite	ne
 801080c:	2301      	movne	r3, #1
 801080e:	2300      	moveq	r3, #0
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	d001      	beq.n	801081a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010816:	2301      	movs	r3, #1
 8010818:	e0a1      	b.n	801095e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d104      	bne.n	801082a <HAL_TIM_PWM_Start+0xb6>
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2202      	movs	r2, #2
 8010824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010828:	e023      	b.n	8010872 <HAL_TIM_PWM_Start+0xfe>
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	2b04      	cmp	r3, #4
 801082e:	d104      	bne.n	801083a <HAL_TIM_PWM_Start+0xc6>
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2202      	movs	r2, #2
 8010834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010838:	e01b      	b.n	8010872 <HAL_TIM_PWM_Start+0xfe>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	2b08      	cmp	r3, #8
 801083e:	d104      	bne.n	801084a <HAL_TIM_PWM_Start+0xd6>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2202      	movs	r2, #2
 8010844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010848:	e013      	b.n	8010872 <HAL_TIM_PWM_Start+0xfe>
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	2b0c      	cmp	r3, #12
 801084e:	d104      	bne.n	801085a <HAL_TIM_PWM_Start+0xe6>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2202      	movs	r2, #2
 8010854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010858:	e00b      	b.n	8010872 <HAL_TIM_PWM_Start+0xfe>
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b10      	cmp	r3, #16
 801085e:	d104      	bne.n	801086a <HAL_TIM_PWM_Start+0xf6>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2202      	movs	r2, #2
 8010864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010868:	e003      	b.n	8010872 <HAL_TIM_PWM_Start+0xfe>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2202      	movs	r2, #2
 801086e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	2201      	movs	r2, #1
 8010878:	6839      	ldr	r1, [r7, #0]
 801087a:	4618      	mov	r0, r3
 801087c:	f001 fdcc 	bl	8012418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	4a38      	ldr	r2, [pc, #224]	; (8010968 <HAL_TIM_PWM_Start+0x1f4>)
 8010886:	4293      	cmp	r3, r2
 8010888:	d013      	beq.n	80108b2 <HAL_TIM_PWM_Start+0x13e>
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4a37      	ldr	r2, [pc, #220]	; (801096c <HAL_TIM_PWM_Start+0x1f8>)
 8010890:	4293      	cmp	r3, r2
 8010892:	d00e      	beq.n	80108b2 <HAL_TIM_PWM_Start+0x13e>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	4a35      	ldr	r2, [pc, #212]	; (8010970 <HAL_TIM_PWM_Start+0x1fc>)
 801089a:	4293      	cmp	r3, r2
 801089c:	d009      	beq.n	80108b2 <HAL_TIM_PWM_Start+0x13e>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	4a34      	ldr	r2, [pc, #208]	; (8010974 <HAL_TIM_PWM_Start+0x200>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d004      	beq.n	80108b2 <HAL_TIM_PWM_Start+0x13e>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a32      	ldr	r2, [pc, #200]	; (8010978 <HAL_TIM_PWM_Start+0x204>)
 80108ae:	4293      	cmp	r3, r2
 80108b0:	d101      	bne.n	80108b6 <HAL_TIM_PWM_Start+0x142>
 80108b2:	2301      	movs	r3, #1
 80108b4:	e000      	b.n	80108b8 <HAL_TIM_PWM_Start+0x144>
 80108b6:	2300      	movs	r3, #0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d007      	beq.n	80108cc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80108ca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a25      	ldr	r2, [pc, #148]	; (8010968 <HAL_TIM_PWM_Start+0x1f4>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d022      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108de:	d01d      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a25      	ldr	r2, [pc, #148]	; (801097c <HAL_TIM_PWM_Start+0x208>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d018      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a24      	ldr	r2, [pc, #144]	; (8010980 <HAL_TIM_PWM_Start+0x20c>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d013      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a22      	ldr	r2, [pc, #136]	; (8010984 <HAL_TIM_PWM_Start+0x210>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d00e      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a1a      	ldr	r2, [pc, #104]	; (801096c <HAL_TIM_PWM_Start+0x1f8>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d009      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a1e      	ldr	r2, [pc, #120]	; (8010988 <HAL_TIM_PWM_Start+0x214>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d004      	beq.n	801091c <HAL_TIM_PWM_Start+0x1a8>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a16      	ldr	r2, [pc, #88]	; (8010970 <HAL_TIM_PWM_Start+0x1fc>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d115      	bne.n	8010948 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	689a      	ldr	r2, [r3, #8]
 8010922:	4b1a      	ldr	r3, [pc, #104]	; (801098c <HAL_TIM_PWM_Start+0x218>)
 8010924:	4013      	ands	r3, r2
 8010926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2b06      	cmp	r3, #6
 801092c:	d015      	beq.n	801095a <HAL_TIM_PWM_Start+0x1e6>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010934:	d011      	beq.n	801095a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	681a      	ldr	r2, [r3, #0]
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f042 0201 	orr.w	r2, r2, #1
 8010944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010946:	e008      	b.n	801095a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f042 0201 	orr.w	r2, r2, #1
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	e000      	b.n	801095c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801095a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3710      	adds	r7, #16
 8010962:	46bd      	mov	sp, r7
 8010964:	bd80      	pop	{r7, pc}
 8010966:	bf00      	nop
 8010968:	40010000 	.word	0x40010000
 801096c:	40010400 	.word	0x40010400
 8010970:	40014000 	.word	0x40014000
 8010974:	40014400 	.word	0x40014400
 8010978:	40014800 	.word	0x40014800
 801097c:	40000400 	.word	0x40000400
 8010980:	40000800 	.word	0x40000800
 8010984:	40000c00 	.word	0x40000c00
 8010988:	40001800 	.word	0x40001800
 801098c:	00010007 	.word	0x00010007

08010990 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d101      	bne.n	80109a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801099e:	2301      	movs	r3, #1
 80109a0:	e049      	b.n	8010a36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109a8:	b2db      	uxtb	r3, r3
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d106      	bne.n	80109bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f000 f841 	bl	8010a3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2202      	movs	r2, #2
 80109c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681a      	ldr	r2, [r3, #0]
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	3304      	adds	r3, #4
 80109cc:	4619      	mov	r1, r3
 80109ce:	4610      	mov	r0, r2
 80109d0:	f000 ff00 	bl	80117d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2201      	movs	r2, #1
 80109d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2201      	movs	r2, #1
 80109e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2201      	movs	r2, #1
 80109e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2201      	movs	r2, #1
 80109f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2201      	movs	r2, #1
 80109f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2201      	movs	r2, #1
 8010a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2201      	movs	r2, #1
 8010a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	2201      	movs	r2, #1
 8010a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2201      	movs	r2, #1
 8010a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2201      	movs	r2, #1
 8010a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2201      	movs	r2, #1
 8010a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3708      	adds	r7, #8
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	bd80      	pop	{r7, pc}

08010a3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010a3e:	b480      	push	{r7}
 8010a40:	b083      	sub	sp, #12
 8010a42:	af00      	add	r7, sp, #0
 8010a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010a46:	bf00      	nop
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr
	...

08010a54 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010a54:	b580      	push	{r7, lr}
 8010a56:	b084      	sub	sp, #16
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
 8010a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d104      	bne.n	8010a6e <HAL_TIM_IC_Start+0x1a>
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010a6a:	b2db      	uxtb	r3, r3
 8010a6c:	e023      	b.n	8010ab6 <HAL_TIM_IC_Start+0x62>
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	2b04      	cmp	r3, #4
 8010a72:	d104      	bne.n	8010a7e <HAL_TIM_IC_Start+0x2a>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	e01b      	b.n	8010ab6 <HAL_TIM_IC_Start+0x62>
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	2b08      	cmp	r3, #8
 8010a82:	d104      	bne.n	8010a8e <HAL_TIM_IC_Start+0x3a>
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	e013      	b.n	8010ab6 <HAL_TIM_IC_Start+0x62>
 8010a8e:	683b      	ldr	r3, [r7, #0]
 8010a90:	2b0c      	cmp	r3, #12
 8010a92:	d104      	bne.n	8010a9e <HAL_TIM_IC_Start+0x4a>
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	e00b      	b.n	8010ab6 <HAL_TIM_IC_Start+0x62>
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	2b10      	cmp	r3, #16
 8010aa2:	d104      	bne.n	8010aae <HAL_TIM_IC_Start+0x5a>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	e003      	b.n	8010ab6 <HAL_TIM_IC_Start+0x62>
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d104      	bne.n	8010ac8 <HAL_TIM_IC_Start+0x74>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	e013      	b.n	8010af0 <HAL_TIM_IC_Start+0x9c>
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	2b04      	cmp	r3, #4
 8010acc:	d104      	bne.n	8010ad8 <HAL_TIM_IC_Start+0x84>
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ad4:	b2db      	uxtb	r3, r3
 8010ad6:	e00b      	b.n	8010af0 <HAL_TIM_IC_Start+0x9c>
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	2b08      	cmp	r3, #8
 8010adc:	d104      	bne.n	8010ae8 <HAL_TIM_IC_Start+0x94>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	e003      	b.n	8010af0 <HAL_TIM_IC_Start+0x9c>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
 8010af4:	2b01      	cmp	r3, #1
 8010af6:	d102      	bne.n	8010afe <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010af8:	7bbb      	ldrb	r3, [r7, #14]
 8010afa:	2b01      	cmp	r3, #1
 8010afc:	d001      	beq.n	8010b02 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	e097      	b.n	8010c32 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d104      	bne.n	8010b12 <HAL_TIM_IC_Start+0xbe>
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010b10:	e023      	b.n	8010b5a <HAL_TIM_IC_Start+0x106>
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	2b04      	cmp	r3, #4
 8010b16:	d104      	bne.n	8010b22 <HAL_TIM_IC_Start+0xce>
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2202      	movs	r2, #2
 8010b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010b20:	e01b      	b.n	8010b5a <HAL_TIM_IC_Start+0x106>
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	2b08      	cmp	r3, #8
 8010b26:	d104      	bne.n	8010b32 <HAL_TIM_IC_Start+0xde>
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2202      	movs	r2, #2
 8010b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010b30:	e013      	b.n	8010b5a <HAL_TIM_IC_Start+0x106>
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	2b0c      	cmp	r3, #12
 8010b36:	d104      	bne.n	8010b42 <HAL_TIM_IC_Start+0xee>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	2202      	movs	r2, #2
 8010b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010b40:	e00b      	b.n	8010b5a <HAL_TIM_IC_Start+0x106>
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	2b10      	cmp	r3, #16
 8010b46:	d104      	bne.n	8010b52 <HAL_TIM_IC_Start+0xfe>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2202      	movs	r2, #2
 8010b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010b50:	e003      	b.n	8010b5a <HAL_TIM_IC_Start+0x106>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	2202      	movs	r2, #2
 8010b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d104      	bne.n	8010b6a <HAL_TIM_IC_Start+0x116>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2202      	movs	r2, #2
 8010b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b68:	e013      	b.n	8010b92 <HAL_TIM_IC_Start+0x13e>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	2b04      	cmp	r3, #4
 8010b6e:	d104      	bne.n	8010b7a <HAL_TIM_IC_Start+0x126>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2202      	movs	r2, #2
 8010b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b78:	e00b      	b.n	8010b92 <HAL_TIM_IC_Start+0x13e>
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	2b08      	cmp	r3, #8
 8010b7e:	d104      	bne.n	8010b8a <HAL_TIM_IC_Start+0x136>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2202      	movs	r2, #2
 8010b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b88:	e003      	b.n	8010b92 <HAL_TIM_IC_Start+0x13e>
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	2202      	movs	r2, #2
 8010b8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	2201      	movs	r2, #1
 8010b98:	6839      	ldr	r1, [r7, #0]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f001 fc3c 	bl	8012418 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4a25      	ldr	r2, [pc, #148]	; (8010c3c <HAL_TIM_IC_Start+0x1e8>)
 8010ba6:	4293      	cmp	r3, r2
 8010ba8:	d022      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bb2:	d01d      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	4a21      	ldr	r2, [pc, #132]	; (8010c40 <HAL_TIM_IC_Start+0x1ec>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	d018      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4a20      	ldr	r2, [pc, #128]	; (8010c44 <HAL_TIM_IC_Start+0x1f0>)
 8010bc4:	4293      	cmp	r3, r2
 8010bc6:	d013      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	4a1e      	ldr	r2, [pc, #120]	; (8010c48 <HAL_TIM_IC_Start+0x1f4>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d00e      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	4a1d      	ldr	r2, [pc, #116]	; (8010c4c <HAL_TIM_IC_Start+0x1f8>)
 8010bd8:	4293      	cmp	r3, r2
 8010bda:	d009      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a1b      	ldr	r2, [pc, #108]	; (8010c50 <HAL_TIM_IC_Start+0x1fc>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d004      	beq.n	8010bf0 <HAL_TIM_IC_Start+0x19c>
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	4a1a      	ldr	r2, [pc, #104]	; (8010c54 <HAL_TIM_IC_Start+0x200>)
 8010bec:	4293      	cmp	r3, r2
 8010bee:	d115      	bne.n	8010c1c <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	689a      	ldr	r2, [r3, #8]
 8010bf6:	4b18      	ldr	r3, [pc, #96]	; (8010c58 <HAL_TIM_IC_Start+0x204>)
 8010bf8:	4013      	ands	r3, r2
 8010bfa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	2b06      	cmp	r3, #6
 8010c00:	d015      	beq.n	8010c2e <HAL_TIM_IC_Start+0x1da>
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c08:	d011      	beq.n	8010c2e <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	681a      	ldr	r2, [r3, #0]
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f042 0201 	orr.w	r2, r2, #1
 8010c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c1a:	e008      	b.n	8010c2e <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	681a      	ldr	r2, [r3, #0]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	f042 0201 	orr.w	r2, r2, #1
 8010c2a:	601a      	str	r2, [r3, #0]
 8010c2c:	e000      	b.n	8010c30 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3710      	adds	r7, #16
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	40010000 	.word	0x40010000
 8010c40:	40000400 	.word	0x40000400
 8010c44:	40000800 	.word	0x40000800
 8010c48:	40000c00 	.word	0x40000c00
 8010c4c:	40010400 	.word	0x40010400
 8010c50:	40001800 	.word	0x40001800
 8010c54:	40014000 	.word	0x40014000
 8010c58:	00010007 	.word	0x00010007

08010c5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b084      	sub	sp, #16
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	6078      	str	r0, [r7, #4]
 8010c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c66:	2300      	movs	r3, #0
 8010c68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d104      	bne.n	8010c7a <HAL_TIM_IC_Start_IT+0x1e>
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010c76:	b2db      	uxtb	r3, r3
 8010c78:	e023      	b.n	8010cc2 <HAL_TIM_IC_Start_IT+0x66>
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	2b04      	cmp	r3, #4
 8010c7e:	d104      	bne.n	8010c8a <HAL_TIM_IC_Start_IT+0x2e>
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010c86:	b2db      	uxtb	r3, r3
 8010c88:	e01b      	b.n	8010cc2 <HAL_TIM_IC_Start_IT+0x66>
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	2b08      	cmp	r3, #8
 8010c8e:	d104      	bne.n	8010c9a <HAL_TIM_IC_Start_IT+0x3e>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010c96:	b2db      	uxtb	r3, r3
 8010c98:	e013      	b.n	8010cc2 <HAL_TIM_IC_Start_IT+0x66>
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	2b0c      	cmp	r3, #12
 8010c9e:	d104      	bne.n	8010caa <HAL_TIM_IC_Start_IT+0x4e>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	e00b      	b.n	8010cc2 <HAL_TIM_IC_Start_IT+0x66>
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	2b10      	cmp	r3, #16
 8010cae:	d104      	bne.n	8010cba <HAL_TIM_IC_Start_IT+0x5e>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	e003      	b.n	8010cc2 <HAL_TIM_IC_Start_IT+0x66>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d104      	bne.n	8010cd4 <HAL_TIM_IC_Start_IT+0x78>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	e013      	b.n	8010cfc <HAL_TIM_IC_Start_IT+0xa0>
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	2b04      	cmp	r3, #4
 8010cd8:	d104      	bne.n	8010ce4 <HAL_TIM_IC_Start_IT+0x88>
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ce0:	b2db      	uxtb	r3, r3
 8010ce2:	e00b      	b.n	8010cfc <HAL_TIM_IC_Start_IT+0xa0>
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	2b08      	cmp	r3, #8
 8010ce8:	d104      	bne.n	8010cf4 <HAL_TIM_IC_Start_IT+0x98>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010cf0:	b2db      	uxtb	r3, r3
 8010cf2:	e003      	b.n	8010cfc <HAL_TIM_IC_Start_IT+0xa0>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010cfe:	7bbb      	ldrb	r3, [r7, #14]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d102      	bne.n	8010d0a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010d04:	7b7b      	ldrb	r3, [r7, #13]
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	d001      	beq.n	8010d0e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8010d0a:	2301      	movs	r3, #1
 8010d0c:	e0e2      	b.n	8010ed4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d104      	bne.n	8010d1e <HAL_TIM_IC_Start_IT+0xc2>
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	2202      	movs	r2, #2
 8010d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d1c:	e023      	b.n	8010d66 <HAL_TIM_IC_Start_IT+0x10a>
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	2b04      	cmp	r3, #4
 8010d22:	d104      	bne.n	8010d2e <HAL_TIM_IC_Start_IT+0xd2>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2202      	movs	r2, #2
 8010d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d2c:	e01b      	b.n	8010d66 <HAL_TIM_IC_Start_IT+0x10a>
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b08      	cmp	r3, #8
 8010d32:	d104      	bne.n	8010d3e <HAL_TIM_IC_Start_IT+0xe2>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	2202      	movs	r2, #2
 8010d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d3c:	e013      	b.n	8010d66 <HAL_TIM_IC_Start_IT+0x10a>
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	2b0c      	cmp	r3, #12
 8010d42:	d104      	bne.n	8010d4e <HAL_TIM_IC_Start_IT+0xf2>
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2202      	movs	r2, #2
 8010d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d4c:	e00b      	b.n	8010d66 <HAL_TIM_IC_Start_IT+0x10a>
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	2b10      	cmp	r3, #16
 8010d52:	d104      	bne.n	8010d5e <HAL_TIM_IC_Start_IT+0x102>
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2202      	movs	r2, #2
 8010d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d5c:	e003      	b.n	8010d66 <HAL_TIM_IC_Start_IT+0x10a>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2202      	movs	r2, #2
 8010d62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d104      	bne.n	8010d76 <HAL_TIM_IC_Start_IT+0x11a>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010d74:	e013      	b.n	8010d9e <HAL_TIM_IC_Start_IT+0x142>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2b04      	cmp	r3, #4
 8010d7a:	d104      	bne.n	8010d86 <HAL_TIM_IC_Start_IT+0x12a>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2202      	movs	r2, #2
 8010d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010d84:	e00b      	b.n	8010d9e <HAL_TIM_IC_Start_IT+0x142>
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	2b08      	cmp	r3, #8
 8010d8a:	d104      	bne.n	8010d96 <HAL_TIM_IC_Start_IT+0x13a>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2202      	movs	r2, #2
 8010d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010d94:	e003      	b.n	8010d9e <HAL_TIM_IC_Start_IT+0x142>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2202      	movs	r2, #2
 8010d9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8010d9e:	683b      	ldr	r3, [r7, #0]
 8010da0:	2b0c      	cmp	r3, #12
 8010da2:	d841      	bhi.n	8010e28 <HAL_TIM_IC_Start_IT+0x1cc>
 8010da4:	a201      	add	r2, pc, #4	; (adr r2, 8010dac <HAL_TIM_IC_Start_IT+0x150>)
 8010da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010daa:	bf00      	nop
 8010dac:	08010de1 	.word	0x08010de1
 8010db0:	08010e29 	.word	0x08010e29
 8010db4:	08010e29 	.word	0x08010e29
 8010db8:	08010e29 	.word	0x08010e29
 8010dbc:	08010df3 	.word	0x08010df3
 8010dc0:	08010e29 	.word	0x08010e29
 8010dc4:	08010e29 	.word	0x08010e29
 8010dc8:	08010e29 	.word	0x08010e29
 8010dcc:	08010e05 	.word	0x08010e05
 8010dd0:	08010e29 	.word	0x08010e29
 8010dd4:	08010e29 	.word	0x08010e29
 8010dd8:	08010e29 	.word	0x08010e29
 8010ddc:	08010e17 	.word	0x08010e17
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	68da      	ldr	r2, [r3, #12]
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f042 0202 	orr.w	r2, r2, #2
 8010dee:	60da      	str	r2, [r3, #12]
      break;
 8010df0:	e01d      	b.n	8010e2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	68da      	ldr	r2, [r3, #12]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f042 0204 	orr.w	r2, r2, #4
 8010e00:	60da      	str	r2, [r3, #12]
      break;
 8010e02:	e014      	b.n	8010e2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	68da      	ldr	r2, [r3, #12]
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	f042 0208 	orr.w	r2, r2, #8
 8010e12:	60da      	str	r2, [r3, #12]
      break;
 8010e14:	e00b      	b.n	8010e2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	68da      	ldr	r2, [r3, #12]
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	f042 0210 	orr.w	r2, r2, #16
 8010e24:	60da      	str	r2, [r3, #12]
      break;
 8010e26:	e002      	b.n	8010e2e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8010e2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e2e:	7bfb      	ldrb	r3, [r7, #15]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d14e      	bne.n	8010ed2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	2201      	movs	r2, #1
 8010e3a:	6839      	ldr	r1, [r7, #0]
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f001 faeb 	bl	8012418 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	4a25      	ldr	r2, [pc, #148]	; (8010edc <HAL_TIM_IC_Start_IT+0x280>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d022      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e54:	d01d      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a21      	ldr	r2, [pc, #132]	; (8010ee0 <HAL_TIM_IC_Start_IT+0x284>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d018      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a1f      	ldr	r2, [pc, #124]	; (8010ee4 <HAL_TIM_IC_Start_IT+0x288>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d013      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4a1e      	ldr	r2, [pc, #120]	; (8010ee8 <HAL_TIM_IC_Start_IT+0x28c>)
 8010e70:	4293      	cmp	r3, r2
 8010e72:	d00e      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4a1c      	ldr	r2, [pc, #112]	; (8010eec <HAL_TIM_IC_Start_IT+0x290>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d009      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a1b      	ldr	r2, [pc, #108]	; (8010ef0 <HAL_TIM_IC_Start_IT+0x294>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d004      	beq.n	8010e92 <HAL_TIM_IC_Start_IT+0x236>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a19      	ldr	r2, [pc, #100]	; (8010ef4 <HAL_TIM_IC_Start_IT+0x298>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d115      	bne.n	8010ebe <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	689a      	ldr	r2, [r3, #8]
 8010e98:	4b17      	ldr	r3, [pc, #92]	; (8010ef8 <HAL_TIM_IC_Start_IT+0x29c>)
 8010e9a:	4013      	ands	r3, r2
 8010e9c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	2b06      	cmp	r3, #6
 8010ea2:	d015      	beq.n	8010ed0 <HAL_TIM_IC_Start_IT+0x274>
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010eaa:	d011      	beq.n	8010ed0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	681a      	ldr	r2, [r3, #0]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f042 0201 	orr.w	r2, r2, #1
 8010eba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ebc:	e008      	b.n	8010ed0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	681a      	ldr	r2, [r3, #0]
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	f042 0201 	orr.w	r2, r2, #1
 8010ecc:	601a      	str	r2, [r3, #0]
 8010ece:	e000      	b.n	8010ed2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ed0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3710      	adds	r7, #16
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	40010000 	.word	0x40010000
 8010ee0:	40000400 	.word	0x40000400
 8010ee4:	40000800 	.word	0x40000800
 8010ee8:	40000c00 	.word	0x40000c00
 8010eec:	40010400 	.word	0x40010400
 8010ef0:	40001800 	.word	0x40001800
 8010ef4:	40014000 	.word	0x40014000
 8010ef8:	00010007 	.word	0x00010007

08010efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b082      	sub	sp, #8
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	f003 0302 	and.w	r3, r3, #2
 8010f0e:	2b02      	cmp	r3, #2
 8010f10:	d122      	bne.n	8010f58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	f003 0302 	and.w	r3, r3, #2
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	d11b      	bne.n	8010f58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	f06f 0202 	mvn.w	r2, #2
 8010f28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	699b      	ldr	r3, [r3, #24]
 8010f36:	f003 0303 	and.w	r3, r3, #3
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d003      	beq.n	8010f46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7f3 fa82 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8010f44:	e005      	b.n	8010f52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fc26 	bl	8011798 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f000 fc2d 	bl	80117ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2200      	movs	r2, #0
 8010f56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	f003 0304 	and.w	r3, r3, #4
 8010f62:	2b04      	cmp	r3, #4
 8010f64:	d122      	bne.n	8010fac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	f003 0304 	and.w	r3, r3, #4
 8010f70:	2b04      	cmp	r3, #4
 8010f72:	d11b      	bne.n	8010fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f06f 0204 	mvn.w	r2, #4
 8010f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2202      	movs	r2, #2
 8010f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	699b      	ldr	r3, [r3, #24]
 8010f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d003      	beq.n	8010f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7f3 fa58 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8010f98:	e005      	b.n	8010fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 fbfc 	bl	8011798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fc03 	bl	80117ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	691b      	ldr	r3, [r3, #16]
 8010fb2:	f003 0308 	and.w	r3, r3, #8
 8010fb6:	2b08      	cmp	r3, #8
 8010fb8:	d122      	bne.n	8011000 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	68db      	ldr	r3, [r3, #12]
 8010fc0:	f003 0308 	and.w	r3, r3, #8
 8010fc4:	2b08      	cmp	r3, #8
 8010fc6:	d11b      	bne.n	8011000 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f06f 0208 	mvn.w	r2, #8
 8010fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2204      	movs	r2, #4
 8010fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	69db      	ldr	r3, [r3, #28]
 8010fde:	f003 0303 	and.w	r3, r3, #3
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d003      	beq.n	8010fee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7f3 fa2e 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8010fec:	e005      	b.n	8010ffa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 fbd2 	bl	8011798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fbd9 	bl	80117ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	f003 0310 	and.w	r3, r3, #16
 801100a:	2b10      	cmp	r3, #16
 801100c:	d122      	bne.n	8011054 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	f003 0310 	and.w	r3, r3, #16
 8011018:	2b10      	cmp	r3, #16
 801101a:	d11b      	bne.n	8011054 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f06f 0210 	mvn.w	r2, #16
 8011024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2208      	movs	r2, #8
 801102a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	69db      	ldr	r3, [r3, #28]
 8011032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7f3 fa04 	bl	8004448 <HAL_TIM_IC_CaptureCallback>
 8011040:	e005      	b.n	801104e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fba8 	bl	8011798 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 fbaf 	bl	80117ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	f003 0301 	and.w	r3, r3, #1
 801105e:	2b01      	cmp	r3, #1
 8011060:	d10e      	bne.n	8011080 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	f003 0301 	and.w	r3, r3, #1
 801106c:	2b01      	cmp	r3, #1
 801106e:	d107      	bne.n	8011080 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f06f 0201 	mvn.w	r2, #1
 8011078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f7f3 fa9c 	bl	80045b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	691b      	ldr	r3, [r3, #16]
 8011086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801108a:	2b80      	cmp	r3, #128	; 0x80
 801108c:	d10e      	bne.n	80110ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	68db      	ldr	r3, [r3, #12]
 8011094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011098:	2b80      	cmp	r3, #128	; 0x80
 801109a:	d107      	bne.n	80110ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80110a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f001 fa74 	bl	8012594 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	691b      	ldr	r3, [r3, #16]
 80110b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80110ba:	d10e      	bne.n	80110da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	68db      	ldr	r3, [r3, #12]
 80110c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110c6:	2b80      	cmp	r3, #128	; 0x80
 80110c8:	d107      	bne.n	80110da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80110d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f001 fa67 	bl	80125a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	691b      	ldr	r3, [r3, #16]
 80110e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110e4:	2b40      	cmp	r3, #64	; 0x40
 80110e6:	d10e      	bne.n	8011106 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110f2:	2b40      	cmp	r3, #64	; 0x40
 80110f4:	d107      	bne.n	8011106 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80110fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011100:	6878      	ldr	r0, [r7, #4]
 8011102:	f000 fb5d 	bl	80117c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	691b      	ldr	r3, [r3, #16]
 801110c:	f003 0320 	and.w	r3, r3, #32
 8011110:	2b20      	cmp	r3, #32
 8011112:	d10e      	bne.n	8011132 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	68db      	ldr	r3, [r3, #12]
 801111a:	f003 0320 	and.w	r3, r3, #32
 801111e:	2b20      	cmp	r3, #32
 8011120:	d107      	bne.n	8011132 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	f06f 0220 	mvn.w	r2, #32
 801112a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f001 fa27 	bl	8012580 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011132:	bf00      	nop
 8011134:	3708      	adds	r7, #8
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}

0801113a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801113a:	b580      	push	{r7, lr}
 801113c:	b086      	sub	sp, #24
 801113e:	af00      	add	r7, sp, #0
 8011140:	60f8      	str	r0, [r7, #12]
 8011142:	60b9      	str	r1, [r7, #8]
 8011144:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011146:	2300      	movs	r3, #0
 8011148:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011150:	2b01      	cmp	r3, #1
 8011152:	d101      	bne.n	8011158 <HAL_TIM_IC_ConfigChannel+0x1e>
 8011154:	2302      	movs	r3, #2
 8011156:	e088      	b.n	801126a <HAL_TIM_IC_ConfigChannel+0x130>
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2201      	movs	r2, #1
 801115c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d11b      	bne.n	801119e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801116a:	68bb      	ldr	r3, [r7, #8]
 801116c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801116e:	68bb      	ldr	r3, [r7, #8]
 8011170:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8011176:	f000 ff87 	bl	8012088 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	699a      	ldr	r2, [r3, #24]
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	f022 020c 	bic.w	r2, r2, #12
 8011188:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	6999      	ldr	r1, [r3, #24]
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	689a      	ldr	r2, [r3, #8]
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	430a      	orrs	r2, r1
 801119a:	619a      	str	r2, [r3, #24]
 801119c:	e060      	b.n	8011260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b04      	cmp	r3, #4
 80111a2:	d11c      	bne.n	80111de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80111b4:	f001 f80b 	bl	80121ce <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	699a      	ldr	r2, [r3, #24]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80111c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	6999      	ldr	r1, [r3, #24]
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	689b      	ldr	r3, [r3, #8]
 80111d2:	021a      	lsls	r2, r3, #8
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	430a      	orrs	r2, r1
 80111da:	619a      	str	r2, [r3, #24]
 80111dc:	e040      	b.n	8011260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2b08      	cmp	r3, #8
 80111e2:	d11b      	bne.n	801121c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80111e8:	68bb      	ldr	r3, [r7, #8]
 80111ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80111f4:	f001 f858 	bl	80122a8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	69da      	ldr	r2, [r3, #28]
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	f022 020c 	bic.w	r2, r2, #12
 8011206:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	69d9      	ldr	r1, [r3, #28]
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	689a      	ldr	r2, [r3, #8]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	430a      	orrs	r2, r1
 8011218:	61da      	str	r2, [r3, #28]
 801121a:	e021      	b.n	8011260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2b0c      	cmp	r3, #12
 8011220:	d11c      	bne.n	801125c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8011232:	f001 f875 	bl	8012320 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	69da      	ldr	r2, [r3, #28]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011244:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	69d9      	ldr	r1, [r3, #28]
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	021a      	lsls	r2, r3, #8
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	430a      	orrs	r2, r1
 8011258:	61da      	str	r2, [r3, #28]
 801125a:	e001      	b.n	8011260 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801125c:	2301      	movs	r3, #1
 801125e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	2200      	movs	r2, #0
 8011264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011268:	7dfb      	ldrb	r3, [r7, #23]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3718      	adds	r7, #24
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
	...

08011274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8011274:	b580      	push	{r7, lr}
 8011276:	b086      	sub	sp, #24
 8011278:	af00      	add	r7, sp, #0
 801127a:	60f8      	str	r0, [r7, #12]
 801127c:	60b9      	str	r1, [r7, #8]
 801127e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011280:	2300      	movs	r3, #0
 8011282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801128a:	2b01      	cmp	r3, #1
 801128c:	d101      	bne.n	8011292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801128e:	2302      	movs	r3, #2
 8011290:	e0ff      	b.n	8011492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2201      	movs	r2, #1
 8011296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2b14      	cmp	r3, #20
 801129e:	f200 80f0 	bhi.w	8011482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80112a2:	a201      	add	r2, pc, #4	; (adr r2, 80112a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80112a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a8:	080112fd 	.word	0x080112fd
 80112ac:	08011483 	.word	0x08011483
 80112b0:	08011483 	.word	0x08011483
 80112b4:	08011483 	.word	0x08011483
 80112b8:	0801133d 	.word	0x0801133d
 80112bc:	08011483 	.word	0x08011483
 80112c0:	08011483 	.word	0x08011483
 80112c4:	08011483 	.word	0x08011483
 80112c8:	0801137f 	.word	0x0801137f
 80112cc:	08011483 	.word	0x08011483
 80112d0:	08011483 	.word	0x08011483
 80112d4:	08011483 	.word	0x08011483
 80112d8:	080113bf 	.word	0x080113bf
 80112dc:	08011483 	.word	0x08011483
 80112e0:	08011483 	.word	0x08011483
 80112e4:	08011483 	.word	0x08011483
 80112e8:	08011401 	.word	0x08011401
 80112ec:	08011483 	.word	0x08011483
 80112f0:	08011483 	.word	0x08011483
 80112f4:	08011483 	.word	0x08011483
 80112f8:	08011441 	.word	0x08011441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	68b9      	ldr	r1, [r7, #8]
 8011302:	4618      	mov	r0, r3
 8011304:	f000 fb00 	bl	8011908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	699a      	ldr	r2, [r3, #24]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	f042 0208 	orr.w	r2, r2, #8
 8011316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	699a      	ldr	r2, [r3, #24]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	f022 0204 	bic.w	r2, r2, #4
 8011326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	6999      	ldr	r1, [r3, #24]
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	691a      	ldr	r2, [r3, #16]
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	430a      	orrs	r2, r1
 8011338:	619a      	str	r2, [r3, #24]
      break;
 801133a:	e0a5      	b.n	8011488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	68b9      	ldr	r1, [r7, #8]
 8011342:	4618      	mov	r0, r3
 8011344:	f000 fb70 	bl	8011a28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	699a      	ldr	r2, [r3, #24]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	699a      	ldr	r2, [r3, #24]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	6999      	ldr	r1, [r3, #24]
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	691b      	ldr	r3, [r3, #16]
 8011372:	021a      	lsls	r2, r3, #8
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	430a      	orrs	r2, r1
 801137a:	619a      	str	r2, [r3, #24]
      break;
 801137c:	e084      	b.n	8011488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	68b9      	ldr	r1, [r7, #8]
 8011384:	4618      	mov	r0, r3
 8011386:	f000 fbd9 	bl	8011b3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	69da      	ldr	r2, [r3, #28]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f042 0208 	orr.w	r2, r2, #8
 8011398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	69da      	ldr	r2, [r3, #28]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	f022 0204 	bic.w	r2, r2, #4
 80113a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	681b      	ldr	r3, [r3, #0]
 80113ae:	69d9      	ldr	r1, [r3, #28]
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	691a      	ldr	r2, [r3, #16]
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	430a      	orrs	r2, r1
 80113ba:	61da      	str	r2, [r3, #28]
      break;
 80113bc:	e064      	b.n	8011488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	68b9      	ldr	r1, [r7, #8]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 fc41 	bl	8011c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	69da      	ldr	r2, [r3, #28]
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	69da      	ldr	r2, [r3, #28]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	69d9      	ldr	r1, [r3, #28]
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	691b      	ldr	r3, [r3, #16]
 80113f4:	021a      	lsls	r2, r3, #8
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	430a      	orrs	r2, r1
 80113fc:	61da      	str	r2, [r3, #28]
      break;
 80113fe:	e043      	b.n	8011488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	68b9      	ldr	r1, [r7, #8]
 8011406:	4618      	mov	r0, r3
 8011408:	f000 fc8a 	bl	8011d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f042 0208 	orr.w	r2, r2, #8
 801141a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	f022 0204 	bic.w	r2, r2, #4
 801142a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	691a      	ldr	r2, [r3, #16]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	430a      	orrs	r2, r1
 801143c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801143e:	e023      	b.n	8011488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	68b9      	ldr	r1, [r7, #8]
 8011446:	4618      	mov	r0, r3
 8011448:	f000 fcce 	bl	8011de8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801145a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681b      	ldr	r3, [r3, #0]
 8011460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801146a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	691b      	ldr	r3, [r3, #16]
 8011476:	021a      	lsls	r2, r3, #8
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	430a      	orrs	r2, r1
 801147e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011480:	e002      	b.n	8011488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8011482:	2301      	movs	r3, #1
 8011484:	75fb      	strb	r3, [r7, #23]
      break;
 8011486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	2200      	movs	r2, #0
 801148c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011490:	7dfb      	ldrb	r3, [r7, #23]
}
 8011492:	4618      	mov	r0, r3
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop

0801149c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80114a6:	2300      	movs	r3, #0
 80114a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80114b0:	2b01      	cmp	r3, #1
 80114b2:	d101      	bne.n	80114b8 <HAL_TIM_ConfigClockSource+0x1c>
 80114b4:	2302      	movs	r3, #2
 80114b6:	e0dc      	b.n	8011672 <HAL_TIM_ConfigClockSource+0x1d6>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2201      	movs	r2, #1
 80114bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2202      	movs	r2, #2
 80114c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	689b      	ldr	r3, [r3, #8]
 80114ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80114d0:	68ba      	ldr	r2, [r7, #8]
 80114d2:	4b6a      	ldr	r3, [pc, #424]	; (801167c <HAL_TIM_ConfigClockSource+0x1e0>)
 80114d4:	4013      	ands	r3, r2
 80114d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80114de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	4a64      	ldr	r2, [pc, #400]	; (8011680 <HAL_TIM_ConfigClockSource+0x1e4>)
 80114ee:	4293      	cmp	r3, r2
 80114f0:	f000 80a9 	beq.w	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 80114f4:	4a62      	ldr	r2, [pc, #392]	; (8011680 <HAL_TIM_ConfigClockSource+0x1e4>)
 80114f6:	4293      	cmp	r3, r2
 80114f8:	f200 80ae 	bhi.w	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 80114fc:	4a61      	ldr	r2, [pc, #388]	; (8011684 <HAL_TIM_ConfigClockSource+0x1e8>)
 80114fe:	4293      	cmp	r3, r2
 8011500:	f000 80a1 	beq.w	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 8011504:	4a5f      	ldr	r2, [pc, #380]	; (8011684 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011506:	4293      	cmp	r3, r2
 8011508:	f200 80a6 	bhi.w	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 801150c:	4a5e      	ldr	r2, [pc, #376]	; (8011688 <HAL_TIM_ConfigClockSource+0x1ec>)
 801150e:	4293      	cmp	r3, r2
 8011510:	f000 8099 	beq.w	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 8011514:	4a5c      	ldr	r2, [pc, #368]	; (8011688 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011516:	4293      	cmp	r3, r2
 8011518:	f200 809e 	bhi.w	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 801151c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011520:	f000 8091 	beq.w	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 8011524:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011528:	f200 8096 	bhi.w	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 801152c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011530:	f000 8089 	beq.w	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 8011534:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011538:	f200 808e 	bhi.w	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 801153c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011540:	d03e      	beq.n	80115c0 <HAL_TIM_ConfigClockSource+0x124>
 8011542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011546:	f200 8087 	bhi.w	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 801154a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801154e:	f000 8086 	beq.w	801165e <HAL_TIM_ConfigClockSource+0x1c2>
 8011552:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011556:	d87f      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011558:	2b70      	cmp	r3, #112	; 0x70
 801155a:	d01a      	beq.n	8011592 <HAL_TIM_ConfigClockSource+0xf6>
 801155c:	2b70      	cmp	r3, #112	; 0x70
 801155e:	d87b      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011560:	2b60      	cmp	r3, #96	; 0x60
 8011562:	d050      	beq.n	8011606 <HAL_TIM_ConfigClockSource+0x16a>
 8011564:	2b60      	cmp	r3, #96	; 0x60
 8011566:	d877      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011568:	2b50      	cmp	r3, #80	; 0x50
 801156a:	d03c      	beq.n	80115e6 <HAL_TIM_ConfigClockSource+0x14a>
 801156c:	2b50      	cmp	r3, #80	; 0x50
 801156e:	d873      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011570:	2b40      	cmp	r3, #64	; 0x40
 8011572:	d058      	beq.n	8011626 <HAL_TIM_ConfigClockSource+0x18a>
 8011574:	2b40      	cmp	r3, #64	; 0x40
 8011576:	d86f      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011578:	2b30      	cmp	r3, #48	; 0x30
 801157a:	d064      	beq.n	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 801157c:	2b30      	cmp	r3, #48	; 0x30
 801157e:	d86b      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011580:	2b20      	cmp	r3, #32
 8011582:	d060      	beq.n	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 8011584:	2b20      	cmp	r3, #32
 8011586:	d867      	bhi.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
 8011588:	2b00      	cmp	r3, #0
 801158a:	d05c      	beq.n	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 801158c:	2b10      	cmp	r3, #16
 801158e:	d05a      	beq.n	8011646 <HAL_TIM_ConfigClockSource+0x1aa>
 8011590:	e062      	b.n	8011658 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80115a2:	f000 ff19 	bl	80123d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	689b      	ldr	r3, [r3, #8]
 80115ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80115b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	68ba      	ldr	r2, [r7, #8]
 80115bc:	609a      	str	r2, [r3, #8]
      break;
 80115be:	e04f      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80115cc:	683b      	ldr	r3, [r7, #0]
 80115ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80115d0:	f000 ff02 	bl	80123d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	689a      	ldr	r2, [r3, #8]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80115e2:	609a      	str	r2, [r3, #8]
      break;
 80115e4:	e03c      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80115f2:	461a      	mov	r2, r3
 80115f4:	f000 fdbc 	bl	8012170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	2150      	movs	r1, #80	; 0x50
 80115fe:	4618      	mov	r0, r3
 8011600:	f000 fecc 	bl	801239c <TIM_ITRx_SetConfig>
      break;
 8011604:	e02c      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011612:	461a      	mov	r2, r3
 8011614:	f000 fe18 	bl	8012248 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	2160      	movs	r1, #96	; 0x60
 801161e:	4618      	mov	r0, r3
 8011620:	f000 febc 	bl	801239c <TIM_ITRx_SetConfig>
      break;
 8011624:	e01c      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801162a:	683b      	ldr	r3, [r7, #0]
 801162c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011632:	461a      	mov	r2, r3
 8011634:	f000 fd9c 	bl	8012170 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	2140      	movs	r1, #64	; 0x40
 801163e:	4618      	mov	r0, r3
 8011640:	f000 feac 	bl	801239c <TIM_ITRx_SetConfig>
      break;
 8011644:	e00c      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	4619      	mov	r1, r3
 8011650:	4610      	mov	r0, r2
 8011652:	f000 fea3 	bl	801239c <TIM_ITRx_SetConfig>
      break;
 8011656:	e003      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011658:	2301      	movs	r3, #1
 801165a:	73fb      	strb	r3, [r7, #15]
      break;
 801165c:	e000      	b.n	8011660 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801165e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	2201      	movs	r2, #1
 8011664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2200      	movs	r2, #0
 801166c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011670:	7bfb      	ldrb	r3, [r7, #15]
}
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	ffceff88 	.word	0xffceff88
 8011680:	00100040 	.word	0x00100040
 8011684:	00100030 	.word	0x00100030
 8011688:	00100020 	.word	0x00100020

0801168c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
 8011694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801169c:	2b01      	cmp	r3, #1
 801169e:	d101      	bne.n	80116a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80116a0:	2302      	movs	r3, #2
 80116a2:	e031      	b.n	8011708 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2201      	movs	r2, #1
 80116a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	2202      	movs	r2, #2
 80116b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80116b4:	6839      	ldr	r1, [r7, #0]
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f000 fbfc 	bl	8011eb4 <TIM_SlaveTimer_SetConfig>
 80116bc:	4603      	mov	r3, r0
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d009      	beq.n	80116d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2201      	movs	r2, #1
 80116c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80116d2:	2301      	movs	r3, #1
 80116d4:	e018      	b.n	8011708 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	68da      	ldr	r2, [r3, #12]
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80116e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	68da      	ldr	r2, [r3, #12]
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80116f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011706:	2300      	movs	r3, #0
}
 8011708:	4618      	mov	r0, r3
 801170a:	3708      	adds	r7, #8
 801170c:	46bd      	mov	sp, r7
 801170e:	bd80      	pop	{r7, pc}

08011710 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801171a:	2300      	movs	r3, #0
 801171c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2b0c      	cmp	r3, #12
 8011722:	d831      	bhi.n	8011788 <HAL_TIM_ReadCapturedValue+0x78>
 8011724:	a201      	add	r2, pc, #4	; (adr r2, 801172c <HAL_TIM_ReadCapturedValue+0x1c>)
 8011726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801172a:	bf00      	nop
 801172c:	08011761 	.word	0x08011761
 8011730:	08011789 	.word	0x08011789
 8011734:	08011789 	.word	0x08011789
 8011738:	08011789 	.word	0x08011789
 801173c:	0801176b 	.word	0x0801176b
 8011740:	08011789 	.word	0x08011789
 8011744:	08011789 	.word	0x08011789
 8011748:	08011789 	.word	0x08011789
 801174c:	08011775 	.word	0x08011775
 8011750:	08011789 	.word	0x08011789
 8011754:	08011789 	.word	0x08011789
 8011758:	08011789 	.word	0x08011789
 801175c:	0801177f 	.word	0x0801177f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011766:	60fb      	str	r3, [r7, #12]

      break;
 8011768:	e00f      	b.n	801178a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011770:	60fb      	str	r3, [r7, #12]

      break;
 8011772:	e00a      	b.n	801178a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801177a:	60fb      	str	r3, [r7, #12]

      break;
 801177c:	e005      	b.n	801178a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011784:	60fb      	str	r3, [r7, #12]

      break;
 8011786:	e000      	b.n	801178a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8011788:	bf00      	nop
  }

  return tmpreg;
 801178a:	68fb      	ldr	r3, [r7, #12]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3714      	adds	r7, #20
 8011790:	46bd      	mov	sp, r7
 8011792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011796:	4770      	bx	lr

08011798 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80117a0:	bf00      	nop
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80117ac:	b480      	push	{r7}
 80117ae:	b083      	sub	sp, #12
 80117b0:	af00      	add	r7, sp, #0
 80117b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80117b4:	bf00      	nop
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80117c8:	bf00      	nop
 80117ca:	370c      	adds	r7, #12
 80117cc:	46bd      	mov	sp, r7
 80117ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d2:	4770      	bx	lr

080117d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	4a40      	ldr	r2, [pc, #256]	; (80118e8 <TIM_Base_SetConfig+0x114>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d013      	beq.n	8011814 <TIM_Base_SetConfig+0x40>
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80117f2:	d00f      	beq.n	8011814 <TIM_Base_SetConfig+0x40>
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	4a3d      	ldr	r2, [pc, #244]	; (80118ec <TIM_Base_SetConfig+0x118>)
 80117f8:	4293      	cmp	r3, r2
 80117fa:	d00b      	beq.n	8011814 <TIM_Base_SetConfig+0x40>
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	4a3c      	ldr	r2, [pc, #240]	; (80118f0 <TIM_Base_SetConfig+0x11c>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d007      	beq.n	8011814 <TIM_Base_SetConfig+0x40>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	4a3b      	ldr	r2, [pc, #236]	; (80118f4 <TIM_Base_SetConfig+0x120>)
 8011808:	4293      	cmp	r3, r2
 801180a:	d003      	beq.n	8011814 <TIM_Base_SetConfig+0x40>
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	4a3a      	ldr	r2, [pc, #232]	; (80118f8 <TIM_Base_SetConfig+0x124>)
 8011810:	4293      	cmp	r3, r2
 8011812:	d108      	bne.n	8011826 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801181a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	685b      	ldr	r3, [r3, #4]
 8011820:	68fa      	ldr	r2, [r7, #12]
 8011822:	4313      	orrs	r3, r2
 8011824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	4a2f      	ldr	r2, [pc, #188]	; (80118e8 <TIM_Base_SetConfig+0x114>)
 801182a:	4293      	cmp	r3, r2
 801182c:	d01f      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011834:	d01b      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4a2c      	ldr	r2, [pc, #176]	; (80118ec <TIM_Base_SetConfig+0x118>)
 801183a:	4293      	cmp	r3, r2
 801183c:	d017      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	4a2b      	ldr	r2, [pc, #172]	; (80118f0 <TIM_Base_SetConfig+0x11c>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d013      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	4a2a      	ldr	r2, [pc, #168]	; (80118f4 <TIM_Base_SetConfig+0x120>)
 801184a:	4293      	cmp	r3, r2
 801184c:	d00f      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	4a29      	ldr	r2, [pc, #164]	; (80118f8 <TIM_Base_SetConfig+0x124>)
 8011852:	4293      	cmp	r3, r2
 8011854:	d00b      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	4a28      	ldr	r2, [pc, #160]	; (80118fc <TIM_Base_SetConfig+0x128>)
 801185a:	4293      	cmp	r3, r2
 801185c:	d007      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	4a27      	ldr	r2, [pc, #156]	; (8011900 <TIM_Base_SetConfig+0x12c>)
 8011862:	4293      	cmp	r3, r2
 8011864:	d003      	beq.n	801186e <TIM_Base_SetConfig+0x9a>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	4a26      	ldr	r2, [pc, #152]	; (8011904 <TIM_Base_SetConfig+0x130>)
 801186a:	4293      	cmp	r3, r2
 801186c:	d108      	bne.n	8011880 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011876:	683b      	ldr	r3, [r7, #0]
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	4313      	orrs	r3, r2
 801187e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	695b      	ldr	r3, [r3, #20]
 801188a:	4313      	orrs	r3, r2
 801188c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	689a      	ldr	r2, [r3, #8]
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	681a      	ldr	r2, [r3, #0]
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	4a10      	ldr	r2, [pc, #64]	; (80118e8 <TIM_Base_SetConfig+0x114>)
 80118a8:	4293      	cmp	r3, r2
 80118aa:	d00f      	beq.n	80118cc <TIM_Base_SetConfig+0xf8>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	4a12      	ldr	r2, [pc, #72]	; (80118f8 <TIM_Base_SetConfig+0x124>)
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d00b      	beq.n	80118cc <TIM_Base_SetConfig+0xf8>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	4a11      	ldr	r2, [pc, #68]	; (80118fc <TIM_Base_SetConfig+0x128>)
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d007      	beq.n	80118cc <TIM_Base_SetConfig+0xf8>
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	4a10      	ldr	r2, [pc, #64]	; (8011900 <TIM_Base_SetConfig+0x12c>)
 80118c0:	4293      	cmp	r3, r2
 80118c2:	d003      	beq.n	80118cc <TIM_Base_SetConfig+0xf8>
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	4a0f      	ldr	r2, [pc, #60]	; (8011904 <TIM_Base_SetConfig+0x130>)
 80118c8:	4293      	cmp	r3, r2
 80118ca:	d103      	bne.n	80118d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	691a      	ldr	r2, [r3, #16]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2201      	movs	r2, #1
 80118d8:	615a      	str	r2, [r3, #20]
}
 80118da:	bf00      	nop
 80118dc:	3714      	adds	r7, #20
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr
 80118e6:	bf00      	nop
 80118e8:	40010000 	.word	0x40010000
 80118ec:	40000400 	.word	0x40000400
 80118f0:	40000800 	.word	0x40000800
 80118f4:	40000c00 	.word	0x40000c00
 80118f8:	40010400 	.word	0x40010400
 80118fc:	40014000 	.word	0x40014000
 8011900:	40014400 	.word	0x40014400
 8011904:	40014800 	.word	0x40014800

08011908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011908:	b480      	push	{r7}
 801190a:	b087      	sub	sp, #28
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
 8011910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	6a1b      	ldr	r3, [r3, #32]
 8011916:	f023 0201 	bic.w	r2, r3, #1
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6a1b      	ldr	r3, [r3, #32]
 8011922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	685b      	ldr	r3, [r3, #4]
 8011928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	699b      	ldr	r3, [r3, #24]
 801192e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	4b37      	ldr	r3, [pc, #220]	; (8011a10 <TIM_OC1_SetConfig+0x108>)
 8011934:	4013      	ands	r3, r2
 8011936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f023 0303 	bic.w	r3, r3, #3
 801193e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	68fa      	ldr	r2, [r7, #12]
 8011946:	4313      	orrs	r3, r2
 8011948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	f023 0302 	bic.w	r3, r3, #2
 8011950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011952:	683b      	ldr	r3, [r7, #0]
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	697a      	ldr	r2, [r7, #20]
 8011958:	4313      	orrs	r3, r2
 801195a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	4a2d      	ldr	r2, [pc, #180]	; (8011a14 <TIM_OC1_SetConfig+0x10c>)
 8011960:	4293      	cmp	r3, r2
 8011962:	d00f      	beq.n	8011984 <TIM_OC1_SetConfig+0x7c>
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	4a2c      	ldr	r2, [pc, #176]	; (8011a18 <TIM_OC1_SetConfig+0x110>)
 8011968:	4293      	cmp	r3, r2
 801196a:	d00b      	beq.n	8011984 <TIM_OC1_SetConfig+0x7c>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	4a2b      	ldr	r2, [pc, #172]	; (8011a1c <TIM_OC1_SetConfig+0x114>)
 8011970:	4293      	cmp	r3, r2
 8011972:	d007      	beq.n	8011984 <TIM_OC1_SetConfig+0x7c>
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	4a2a      	ldr	r2, [pc, #168]	; (8011a20 <TIM_OC1_SetConfig+0x118>)
 8011978:	4293      	cmp	r3, r2
 801197a:	d003      	beq.n	8011984 <TIM_OC1_SetConfig+0x7c>
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	4a29      	ldr	r2, [pc, #164]	; (8011a24 <TIM_OC1_SetConfig+0x11c>)
 8011980:	4293      	cmp	r3, r2
 8011982:	d10c      	bne.n	801199e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	f023 0308 	bic.w	r3, r3, #8
 801198a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	68db      	ldr	r3, [r3, #12]
 8011990:	697a      	ldr	r2, [r7, #20]
 8011992:	4313      	orrs	r3, r2
 8011994:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	f023 0304 	bic.w	r3, r3, #4
 801199c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4a1c      	ldr	r2, [pc, #112]	; (8011a14 <TIM_OC1_SetConfig+0x10c>)
 80119a2:	4293      	cmp	r3, r2
 80119a4:	d00f      	beq.n	80119c6 <TIM_OC1_SetConfig+0xbe>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	4a1b      	ldr	r2, [pc, #108]	; (8011a18 <TIM_OC1_SetConfig+0x110>)
 80119aa:	4293      	cmp	r3, r2
 80119ac:	d00b      	beq.n	80119c6 <TIM_OC1_SetConfig+0xbe>
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	4a1a      	ldr	r2, [pc, #104]	; (8011a1c <TIM_OC1_SetConfig+0x114>)
 80119b2:	4293      	cmp	r3, r2
 80119b4:	d007      	beq.n	80119c6 <TIM_OC1_SetConfig+0xbe>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	4a19      	ldr	r2, [pc, #100]	; (8011a20 <TIM_OC1_SetConfig+0x118>)
 80119ba:	4293      	cmp	r3, r2
 80119bc:	d003      	beq.n	80119c6 <TIM_OC1_SetConfig+0xbe>
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	4a18      	ldr	r2, [pc, #96]	; (8011a24 <TIM_OC1_SetConfig+0x11c>)
 80119c2:	4293      	cmp	r3, r2
 80119c4:	d111      	bne.n	80119ea <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80119c6:	693b      	ldr	r3, [r7, #16]
 80119c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80119cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80119ce:	693b      	ldr	r3, [r7, #16]
 80119d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80119d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80119d6:	683b      	ldr	r3, [r7, #0]
 80119d8:	695b      	ldr	r3, [r3, #20]
 80119da:	693a      	ldr	r2, [r7, #16]
 80119dc:	4313      	orrs	r3, r2
 80119de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	699b      	ldr	r3, [r3, #24]
 80119e4:	693a      	ldr	r2, [r7, #16]
 80119e6:	4313      	orrs	r3, r2
 80119e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	693a      	ldr	r2, [r7, #16]
 80119ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	685a      	ldr	r2, [r3, #4]
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	697a      	ldr	r2, [r7, #20]
 8011a02:	621a      	str	r2, [r3, #32]
}
 8011a04:	bf00      	nop
 8011a06:	371c      	adds	r7, #28
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	fffeff8f 	.word	0xfffeff8f
 8011a14:	40010000 	.word	0x40010000
 8011a18:	40010400 	.word	0x40010400
 8011a1c:	40014000 	.word	0x40014000
 8011a20:	40014400 	.word	0x40014400
 8011a24:	40014800 	.word	0x40014800

08011a28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b087      	sub	sp, #28
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6a1b      	ldr	r3, [r3, #32]
 8011a36:	f023 0210 	bic.w	r2, r3, #16
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6a1b      	ldr	r3, [r3, #32]
 8011a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	685b      	ldr	r3, [r3, #4]
 8011a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	699b      	ldr	r3, [r3, #24]
 8011a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	4b34      	ldr	r3, [pc, #208]	; (8011b24 <TIM_OC2_SetConfig+0xfc>)
 8011a54:	4013      	ands	r3, r2
 8011a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	021b      	lsls	r3, r3, #8
 8011a66:	68fa      	ldr	r2, [r7, #12]
 8011a68:	4313      	orrs	r3, r2
 8011a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011a6c:	697b      	ldr	r3, [r7, #20]
 8011a6e:	f023 0320 	bic.w	r3, r3, #32
 8011a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	689b      	ldr	r3, [r3, #8]
 8011a78:	011b      	lsls	r3, r3, #4
 8011a7a:	697a      	ldr	r2, [r7, #20]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	4a29      	ldr	r2, [pc, #164]	; (8011b28 <TIM_OC2_SetConfig+0x100>)
 8011a84:	4293      	cmp	r3, r2
 8011a86:	d003      	beq.n	8011a90 <TIM_OC2_SetConfig+0x68>
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	4a28      	ldr	r2, [pc, #160]	; (8011b2c <TIM_OC2_SetConfig+0x104>)
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d10d      	bne.n	8011aac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011a90:	697b      	ldr	r3, [r7, #20]
 8011a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	011b      	lsls	r3, r3, #4
 8011a9e:	697a      	ldr	r2, [r7, #20]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011aaa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	4a1e      	ldr	r2, [pc, #120]	; (8011b28 <TIM_OC2_SetConfig+0x100>)
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	d00f      	beq.n	8011ad4 <TIM_OC2_SetConfig+0xac>
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	4a1d      	ldr	r2, [pc, #116]	; (8011b2c <TIM_OC2_SetConfig+0x104>)
 8011ab8:	4293      	cmp	r3, r2
 8011aba:	d00b      	beq.n	8011ad4 <TIM_OC2_SetConfig+0xac>
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	4a1c      	ldr	r2, [pc, #112]	; (8011b30 <TIM_OC2_SetConfig+0x108>)
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	d007      	beq.n	8011ad4 <TIM_OC2_SetConfig+0xac>
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	4a1b      	ldr	r2, [pc, #108]	; (8011b34 <TIM_OC2_SetConfig+0x10c>)
 8011ac8:	4293      	cmp	r3, r2
 8011aca:	d003      	beq.n	8011ad4 <TIM_OC2_SetConfig+0xac>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	4a1a      	ldr	r2, [pc, #104]	; (8011b38 <TIM_OC2_SetConfig+0x110>)
 8011ad0:	4293      	cmp	r3, r2
 8011ad2:	d113      	bne.n	8011afc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011ada:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011adc:	693b      	ldr	r3, [r7, #16]
 8011ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011ae2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011ae4:	683b      	ldr	r3, [r7, #0]
 8011ae6:	695b      	ldr	r3, [r3, #20]
 8011ae8:	009b      	lsls	r3, r3, #2
 8011aea:	693a      	ldr	r2, [r7, #16]
 8011aec:	4313      	orrs	r3, r2
 8011aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	699b      	ldr	r3, [r3, #24]
 8011af4:	009b      	lsls	r3, r3, #2
 8011af6:	693a      	ldr	r2, [r7, #16]
 8011af8:	4313      	orrs	r3, r2
 8011afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	693a      	ldr	r2, [r7, #16]
 8011b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	68fa      	ldr	r2, [r7, #12]
 8011b06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	685a      	ldr	r2, [r3, #4]
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	697a      	ldr	r2, [r7, #20]
 8011b14:	621a      	str	r2, [r3, #32]
}
 8011b16:	bf00      	nop
 8011b18:	371c      	adds	r7, #28
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr
 8011b22:	bf00      	nop
 8011b24:	feff8fff 	.word	0xfeff8fff
 8011b28:	40010000 	.word	0x40010000
 8011b2c:	40010400 	.word	0x40010400
 8011b30:	40014000 	.word	0x40014000
 8011b34:	40014400 	.word	0x40014400
 8011b38:	40014800 	.word	0x40014800

08011b3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b087      	sub	sp, #28
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6a1b      	ldr	r3, [r3, #32]
 8011b4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6a1b      	ldr	r3, [r3, #32]
 8011b56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	685b      	ldr	r3, [r3, #4]
 8011b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	69db      	ldr	r3, [r3, #28]
 8011b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011b64:	68fa      	ldr	r2, [r7, #12]
 8011b66:	4b33      	ldr	r3, [pc, #204]	; (8011c34 <TIM_OC3_SetConfig+0xf8>)
 8011b68:	4013      	ands	r3, r2
 8011b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	f023 0303 	bic.w	r3, r3, #3
 8011b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	021b      	lsls	r3, r3, #8
 8011b8c:	697a      	ldr	r2, [r7, #20]
 8011b8e:	4313      	orrs	r3, r2
 8011b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	4a28      	ldr	r2, [pc, #160]	; (8011c38 <TIM_OC3_SetConfig+0xfc>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d003      	beq.n	8011ba2 <TIM_OC3_SetConfig+0x66>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	4a27      	ldr	r2, [pc, #156]	; (8011c3c <TIM_OC3_SetConfig+0x100>)
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d10d      	bne.n	8011bbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011ba8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	68db      	ldr	r3, [r3, #12]
 8011bae:	021b      	lsls	r3, r3, #8
 8011bb0:	697a      	ldr	r2, [r7, #20]
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	4a1d      	ldr	r2, [pc, #116]	; (8011c38 <TIM_OC3_SetConfig+0xfc>)
 8011bc2:	4293      	cmp	r3, r2
 8011bc4:	d00f      	beq.n	8011be6 <TIM_OC3_SetConfig+0xaa>
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	4a1c      	ldr	r2, [pc, #112]	; (8011c3c <TIM_OC3_SetConfig+0x100>)
 8011bca:	4293      	cmp	r3, r2
 8011bcc:	d00b      	beq.n	8011be6 <TIM_OC3_SetConfig+0xaa>
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	4a1b      	ldr	r2, [pc, #108]	; (8011c40 <TIM_OC3_SetConfig+0x104>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d007      	beq.n	8011be6 <TIM_OC3_SetConfig+0xaa>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	4a1a      	ldr	r2, [pc, #104]	; (8011c44 <TIM_OC3_SetConfig+0x108>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d003      	beq.n	8011be6 <TIM_OC3_SetConfig+0xaa>
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	4a19      	ldr	r2, [pc, #100]	; (8011c48 <TIM_OC3_SetConfig+0x10c>)
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d113      	bne.n	8011c0e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011be6:	693b      	ldr	r3, [r7, #16]
 8011be8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011bec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011bee:	693b      	ldr	r3, [r7, #16]
 8011bf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	695b      	ldr	r3, [r3, #20]
 8011bfa:	011b      	lsls	r3, r3, #4
 8011bfc:	693a      	ldr	r2, [r7, #16]
 8011bfe:	4313      	orrs	r3, r2
 8011c00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	011b      	lsls	r3, r3, #4
 8011c08:	693a      	ldr	r2, [r7, #16]
 8011c0a:	4313      	orrs	r3, r2
 8011c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	693a      	ldr	r2, [r7, #16]
 8011c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	685a      	ldr	r2, [r3, #4]
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	697a      	ldr	r2, [r7, #20]
 8011c26:	621a      	str	r2, [r3, #32]
}
 8011c28:	bf00      	nop
 8011c2a:	371c      	adds	r7, #28
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr
 8011c34:	fffeff8f 	.word	0xfffeff8f
 8011c38:	40010000 	.word	0x40010000
 8011c3c:	40010400 	.word	0x40010400
 8011c40:	40014000 	.word	0x40014000
 8011c44:	40014400 	.word	0x40014400
 8011c48:	40014800 	.word	0x40014800

08011c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b087      	sub	sp, #28
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
 8011c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a1b      	ldr	r3, [r3, #32]
 8011c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6a1b      	ldr	r3, [r3, #32]
 8011c66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	69db      	ldr	r3, [r3, #28]
 8011c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011c74:	68fa      	ldr	r2, [r7, #12]
 8011c76:	4b24      	ldr	r3, [pc, #144]	; (8011d08 <TIM_OC4_SetConfig+0xbc>)
 8011c78:	4013      	ands	r3, r2
 8011c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	021b      	lsls	r3, r3, #8
 8011c8a:	68fa      	ldr	r2, [r7, #12]
 8011c8c:	4313      	orrs	r3, r2
 8011c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	689b      	ldr	r3, [r3, #8]
 8011c9c:	031b      	lsls	r3, r3, #12
 8011c9e:	693a      	ldr	r2, [r7, #16]
 8011ca0:	4313      	orrs	r3, r2
 8011ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	4a19      	ldr	r2, [pc, #100]	; (8011d0c <TIM_OC4_SetConfig+0xc0>)
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	d00f      	beq.n	8011ccc <TIM_OC4_SetConfig+0x80>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	4a18      	ldr	r2, [pc, #96]	; (8011d10 <TIM_OC4_SetConfig+0xc4>)
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	d00b      	beq.n	8011ccc <TIM_OC4_SetConfig+0x80>
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	4a17      	ldr	r2, [pc, #92]	; (8011d14 <TIM_OC4_SetConfig+0xc8>)
 8011cb8:	4293      	cmp	r3, r2
 8011cba:	d007      	beq.n	8011ccc <TIM_OC4_SetConfig+0x80>
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	4a16      	ldr	r2, [pc, #88]	; (8011d18 <TIM_OC4_SetConfig+0xcc>)
 8011cc0:	4293      	cmp	r3, r2
 8011cc2:	d003      	beq.n	8011ccc <TIM_OC4_SetConfig+0x80>
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4a15      	ldr	r2, [pc, #84]	; (8011d1c <TIM_OC4_SetConfig+0xd0>)
 8011cc8:	4293      	cmp	r3, r2
 8011cca:	d109      	bne.n	8011ce0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	695b      	ldr	r3, [r3, #20]
 8011cd8:	019b      	lsls	r3, r3, #6
 8011cda:	697a      	ldr	r2, [r7, #20]
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	697a      	ldr	r2, [r7, #20]
 8011ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	68fa      	ldr	r2, [r7, #12]
 8011cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	685a      	ldr	r2, [r3, #4]
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	693a      	ldr	r2, [r7, #16]
 8011cf8:	621a      	str	r2, [r3, #32]
}
 8011cfa:	bf00      	nop
 8011cfc:	371c      	adds	r7, #28
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	feff8fff 	.word	0xfeff8fff
 8011d0c:	40010000 	.word	0x40010000
 8011d10:	40010400 	.word	0x40010400
 8011d14:	40014000 	.word	0x40014000
 8011d18:	40014400 	.word	0x40014400
 8011d1c:	40014800 	.word	0x40014800

08011d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b087      	sub	sp, #28
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6a1b      	ldr	r3, [r3, #32]
 8011d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6a1b      	ldr	r3, [r3, #32]
 8011d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	4b21      	ldr	r3, [pc, #132]	; (8011dd0 <TIM_OC5_SetConfig+0xb0>)
 8011d4c:	4013      	ands	r3, r2
 8011d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	68fa      	ldr	r2, [r7, #12]
 8011d56:	4313      	orrs	r3, r2
 8011d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	689b      	ldr	r3, [r3, #8]
 8011d66:	041b      	lsls	r3, r3, #16
 8011d68:	693a      	ldr	r2, [r7, #16]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	4a18      	ldr	r2, [pc, #96]	; (8011dd4 <TIM_OC5_SetConfig+0xb4>)
 8011d72:	4293      	cmp	r3, r2
 8011d74:	d00f      	beq.n	8011d96 <TIM_OC5_SetConfig+0x76>
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	4a17      	ldr	r2, [pc, #92]	; (8011dd8 <TIM_OC5_SetConfig+0xb8>)
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d00b      	beq.n	8011d96 <TIM_OC5_SetConfig+0x76>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	4a16      	ldr	r2, [pc, #88]	; (8011ddc <TIM_OC5_SetConfig+0xbc>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d007      	beq.n	8011d96 <TIM_OC5_SetConfig+0x76>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	4a15      	ldr	r2, [pc, #84]	; (8011de0 <TIM_OC5_SetConfig+0xc0>)
 8011d8a:	4293      	cmp	r3, r2
 8011d8c:	d003      	beq.n	8011d96 <TIM_OC5_SetConfig+0x76>
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	4a14      	ldr	r2, [pc, #80]	; (8011de4 <TIM_OC5_SetConfig+0xc4>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d109      	bne.n	8011daa <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	695b      	ldr	r3, [r3, #20]
 8011da2:	021b      	lsls	r3, r3, #8
 8011da4:	697a      	ldr	r2, [r7, #20]
 8011da6:	4313      	orrs	r3, r2
 8011da8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	697a      	ldr	r2, [r7, #20]
 8011dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	685a      	ldr	r2, [r3, #4]
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	693a      	ldr	r2, [r7, #16]
 8011dc2:	621a      	str	r2, [r3, #32]
}
 8011dc4:	bf00      	nop
 8011dc6:	371c      	adds	r7, #28
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dce:	4770      	bx	lr
 8011dd0:	fffeff8f 	.word	0xfffeff8f
 8011dd4:	40010000 	.word	0x40010000
 8011dd8:	40010400 	.word	0x40010400
 8011ddc:	40014000 	.word	0x40014000
 8011de0:	40014400 	.word	0x40014400
 8011de4:	40014800 	.word	0x40014800

08011de8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b087      	sub	sp, #28
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6a1b      	ldr	r3, [r3, #32]
 8011df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6a1b      	ldr	r3, [r3, #32]
 8011e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	685b      	ldr	r3, [r3, #4]
 8011e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011e10:	68fa      	ldr	r2, [r7, #12]
 8011e12:	4b22      	ldr	r3, [pc, #136]	; (8011e9c <TIM_OC6_SetConfig+0xb4>)
 8011e14:	4013      	ands	r3, r2
 8011e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	021b      	lsls	r3, r3, #8
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	4313      	orrs	r3, r2
 8011e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	051b      	lsls	r3, r3, #20
 8011e32:	693a      	ldr	r2, [r7, #16]
 8011e34:	4313      	orrs	r3, r2
 8011e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	4a19      	ldr	r2, [pc, #100]	; (8011ea0 <TIM_OC6_SetConfig+0xb8>)
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d00f      	beq.n	8011e60 <TIM_OC6_SetConfig+0x78>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	4a18      	ldr	r2, [pc, #96]	; (8011ea4 <TIM_OC6_SetConfig+0xbc>)
 8011e44:	4293      	cmp	r3, r2
 8011e46:	d00b      	beq.n	8011e60 <TIM_OC6_SetConfig+0x78>
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	4a17      	ldr	r2, [pc, #92]	; (8011ea8 <TIM_OC6_SetConfig+0xc0>)
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d007      	beq.n	8011e60 <TIM_OC6_SetConfig+0x78>
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	4a16      	ldr	r2, [pc, #88]	; (8011eac <TIM_OC6_SetConfig+0xc4>)
 8011e54:	4293      	cmp	r3, r2
 8011e56:	d003      	beq.n	8011e60 <TIM_OC6_SetConfig+0x78>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	4a15      	ldr	r2, [pc, #84]	; (8011eb0 <TIM_OC6_SetConfig+0xc8>)
 8011e5c:	4293      	cmp	r3, r2
 8011e5e:	d109      	bne.n	8011e74 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011e66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	029b      	lsls	r3, r3, #10
 8011e6e:	697a      	ldr	r2, [r7, #20]
 8011e70:	4313      	orrs	r3, r2
 8011e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	697a      	ldr	r2, [r7, #20]
 8011e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	685a      	ldr	r2, [r3, #4]
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	693a      	ldr	r2, [r7, #16]
 8011e8c:	621a      	str	r2, [r3, #32]
}
 8011e8e:	bf00      	nop
 8011e90:	371c      	adds	r7, #28
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr
 8011e9a:	bf00      	nop
 8011e9c:	feff8fff 	.word	0xfeff8fff
 8011ea0:	40010000 	.word	0x40010000
 8011ea4:	40010400 	.word	0x40010400
 8011ea8:	40014000 	.word	0x40014000
 8011eac:	40014400 	.word	0x40014400
 8011eb0:	40014800 	.word	0x40014800

08011eb4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b086      	sub	sp, #24
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	689b      	ldr	r3, [r3, #8]
 8011ec8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011eca:	693a      	ldr	r2, [r7, #16]
 8011ecc:	4b65      	ldr	r3, [pc, #404]	; (8012064 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8011ece:	4013      	ands	r3, r2
 8011ed0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011ed2:	683b      	ldr	r3, [r7, #0]
 8011ed4:	685b      	ldr	r3, [r3, #4]
 8011ed6:	693a      	ldr	r2, [r7, #16]
 8011ed8:	4313      	orrs	r3, r2
 8011eda:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011edc:	693a      	ldr	r2, [r7, #16]
 8011ede:	4b62      	ldr	r3, [pc, #392]	; (8012068 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8011ee0:	4013      	ands	r3, r2
 8011ee2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	693a      	ldr	r2, [r7, #16]
 8011eea:	4313      	orrs	r3, r2
 8011eec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	693a      	ldr	r2, [r7, #16]
 8011ef4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	685b      	ldr	r3, [r3, #4]
 8011efa:	4a5c      	ldr	r2, [pc, #368]	; (801206c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011efc:	4293      	cmp	r3, r2
 8011efe:	f000 80ab 	beq.w	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f02:	4a5a      	ldr	r2, [pc, #360]	; (801206c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011f04:	4293      	cmp	r3, r2
 8011f06:	f200 80a4 	bhi.w	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f0e:	f000 80a3 	beq.w	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f16:	f200 809c 	bhi.w	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f1a:	4a55      	ldr	r2, [pc, #340]	; (8012070 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011f1c:	4293      	cmp	r3, r2
 8011f1e:	f000 809b 	beq.w	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f22:	4a53      	ldr	r2, [pc, #332]	; (8012070 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011f24:	4293      	cmp	r3, r2
 8011f26:	f200 8094 	bhi.w	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f2a:	4a52      	ldr	r2, [pc, #328]	; (8012074 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011f2c:	4293      	cmp	r3, r2
 8011f2e:	f000 8093 	beq.w	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f32:	4a50      	ldr	r2, [pc, #320]	; (8012074 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011f34:	4293      	cmp	r3, r2
 8011f36:	f200 808c 	bhi.w	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f3a:	4a4f      	ldr	r2, [pc, #316]	; (8012078 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	f000 808b 	beq.w	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f42:	4a4d      	ldr	r2, [pc, #308]	; (8012078 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011f44:	4293      	cmp	r3, r2
 8011f46:	f200 8084 	bhi.w	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f4a:	4a4c      	ldr	r2, [pc, #304]	; (801207c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	f000 8083 	beq.w	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f52:	4a4a      	ldr	r2, [pc, #296]	; (801207c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011f54:	4293      	cmp	r3, r2
 8011f56:	d87c      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f58:	4a49      	ldr	r2, [pc, #292]	; (8012080 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011f5a:	4293      	cmp	r3, r2
 8011f5c:	d07c      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f5e:	4a48      	ldr	r2, [pc, #288]	; (8012080 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d876      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f64:	4a47      	ldr	r2, [pc, #284]	; (8012084 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011f66:	4293      	cmp	r3, r2
 8011f68:	d076      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f6a:	4a46      	ldr	r2, [pc, #280]	; (8012084 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	d870      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f70:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f74:	d070      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f76:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011f7a:	d86a      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f80:	d06a      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f86:	d864      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f88:	2b70      	cmp	r3, #112	; 0x70
 8011f8a:	d01a      	beq.n	8011fc2 <TIM_SlaveTimer_SetConfig+0x10e>
 8011f8c:	2b70      	cmp	r3, #112	; 0x70
 8011f8e:	d860      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f90:	2b60      	cmp	r3, #96	; 0x60
 8011f92:	d054      	beq.n	801203e <TIM_SlaveTimer_SetConfig+0x18a>
 8011f94:	2b60      	cmp	r3, #96	; 0x60
 8011f96:	d85c      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f98:	2b50      	cmp	r3, #80	; 0x50
 8011f9a:	d046      	beq.n	801202a <TIM_SlaveTimer_SetConfig+0x176>
 8011f9c:	2b50      	cmp	r3, #80	; 0x50
 8011f9e:	d858      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fa0:	2b40      	cmp	r3, #64	; 0x40
 8011fa2:	d019      	beq.n	8011fd8 <TIM_SlaveTimer_SetConfig+0x124>
 8011fa4:	2b40      	cmp	r3, #64	; 0x40
 8011fa6:	d854      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fa8:	2b30      	cmp	r3, #48	; 0x30
 8011faa:	d055      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fac:	2b30      	cmp	r3, #48	; 0x30
 8011fae:	d850      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fb0:	2b20      	cmp	r3, #32
 8011fb2:	d051      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fb4:	2b20      	cmp	r3, #32
 8011fb6:	d84c      	bhi.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d04d      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fbc:	2b10      	cmp	r3, #16
 8011fbe:	d04b      	beq.n	8012058 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fc0:	e047      	b.n	8012052 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011fd2:	f000 fa01 	bl	80123d8 <TIM_ETR_SetConfig>
      break;
 8011fd6:	e040      	b.n	801205a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011fd8:	683b      	ldr	r3, [r7, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b05      	cmp	r3, #5
 8011fde:	d101      	bne.n	8011fe4 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8011fe0:	2301      	movs	r3, #1
 8011fe2:	e03b      	b.n	801205c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	6a1b      	ldr	r3, [r3, #32]
 8011fea:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	6a1a      	ldr	r2, [r3, #32]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f022 0201 	bic.w	r2, r2, #1
 8011ffa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	699b      	ldr	r3, [r3, #24]
 8012002:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801200a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	691b      	ldr	r3, [r3, #16]
 8012010:	011b      	lsls	r3, r3, #4
 8012012:	68ba      	ldr	r2, [r7, #8]
 8012014:	4313      	orrs	r3, r2
 8012016:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	68ba      	ldr	r2, [r7, #8]
 801201e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68fa      	ldr	r2, [r7, #12]
 8012026:	621a      	str	r2, [r3, #32]
      break;
 8012028:	e017      	b.n	801205a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012036:	461a      	mov	r2, r3
 8012038:	f000 f89a 	bl	8012170 <TIM_TI1_ConfigInputStage>
      break;
 801203c:	e00d      	b.n	801205a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801204a:	461a      	mov	r2, r3
 801204c:	f000 f8fc 	bl	8012248 <TIM_TI2_ConfigInputStage>
      break;
 8012050:	e003      	b.n	801205a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8012052:	2301      	movs	r3, #1
 8012054:	75fb      	strb	r3, [r7, #23]
      break;
 8012056:	e000      	b.n	801205a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8012058:	bf00      	nop
  }

  return status;
 801205a:	7dfb      	ldrb	r3, [r7, #23]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3718      	adds	r7, #24
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	ffcfff8f 	.word	0xffcfff8f
 8012068:	fffefff8 	.word	0xfffefff8
 801206c:	00200010 	.word	0x00200010
 8012070:	00100070 	.word	0x00100070
 8012074:	00100060 	.word	0x00100060
 8012078:	00100050 	.word	0x00100050
 801207c:	00100040 	.word	0x00100040
 8012080:	00100030 	.word	0x00100030
 8012084:	00100020 	.word	0x00100020

08012088 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8012088:	b480      	push	{r7}
 801208a:	b087      	sub	sp, #28
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	607a      	str	r2, [r7, #4]
 8012094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	6a1b      	ldr	r3, [r3, #32]
 801209a:	f023 0201 	bic.w	r2, r3, #1
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	699b      	ldr	r3, [r3, #24]
 80120a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	6a1b      	ldr	r3, [r3, #32]
 80120ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	4a28      	ldr	r2, [pc, #160]	; (8012154 <TIM_TI1_SetConfig+0xcc>)
 80120b2:	4293      	cmp	r3, r2
 80120b4:	d01b      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120bc:	d017      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	4a25      	ldr	r2, [pc, #148]	; (8012158 <TIM_TI1_SetConfig+0xd0>)
 80120c2:	4293      	cmp	r3, r2
 80120c4:	d013      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	4a24      	ldr	r2, [pc, #144]	; (801215c <TIM_TI1_SetConfig+0xd4>)
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d00f      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	4a23      	ldr	r2, [pc, #140]	; (8012160 <TIM_TI1_SetConfig+0xd8>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d00b      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	4a22      	ldr	r2, [pc, #136]	; (8012164 <TIM_TI1_SetConfig+0xdc>)
 80120da:	4293      	cmp	r3, r2
 80120dc:	d007      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	4a21      	ldr	r2, [pc, #132]	; (8012168 <TIM_TI1_SetConfig+0xe0>)
 80120e2:	4293      	cmp	r3, r2
 80120e4:	d003      	beq.n	80120ee <TIM_TI1_SetConfig+0x66>
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	4a20      	ldr	r2, [pc, #128]	; (801216c <TIM_TI1_SetConfig+0xe4>)
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d101      	bne.n	80120f2 <TIM_TI1_SetConfig+0x6a>
 80120ee:	2301      	movs	r3, #1
 80120f0:	e000      	b.n	80120f4 <TIM_TI1_SetConfig+0x6c>
 80120f2:	2300      	movs	r3, #0
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d008      	beq.n	801210a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	f023 0303 	bic.w	r3, r3, #3
 80120fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8012100:	697a      	ldr	r2, [r7, #20]
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	4313      	orrs	r3, r2
 8012106:	617b      	str	r3, [r7, #20]
 8012108:	e003      	b.n	8012112 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	f043 0301 	orr.w	r3, r3, #1
 8012110:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012118:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	011b      	lsls	r3, r3, #4
 801211e:	b2db      	uxtb	r3, r3
 8012120:	697a      	ldr	r2, [r7, #20]
 8012122:	4313      	orrs	r3, r2
 8012124:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	f023 030a 	bic.w	r3, r3, #10
 801212c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	f003 030a 	and.w	r3, r3, #10
 8012134:	693a      	ldr	r2, [r7, #16]
 8012136:	4313      	orrs	r3, r2
 8012138:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	697a      	ldr	r2, [r7, #20]
 801213e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	693a      	ldr	r2, [r7, #16]
 8012144:	621a      	str	r2, [r3, #32]
}
 8012146:	bf00      	nop
 8012148:	371c      	adds	r7, #28
 801214a:	46bd      	mov	sp, r7
 801214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012150:	4770      	bx	lr
 8012152:	bf00      	nop
 8012154:	40010000 	.word	0x40010000
 8012158:	40000400 	.word	0x40000400
 801215c:	40000800 	.word	0x40000800
 8012160:	40000c00 	.word	0x40000c00
 8012164:	40010400 	.word	0x40010400
 8012168:	40001800 	.word	0x40001800
 801216c:	40014000 	.word	0x40014000

08012170 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012170:	b480      	push	{r7}
 8012172:	b087      	sub	sp, #28
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	6a1b      	ldr	r3, [r3, #32]
 8012180:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	6a1b      	ldr	r3, [r3, #32]
 8012186:	f023 0201 	bic.w	r2, r3, #1
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	699b      	ldr	r3, [r3, #24]
 8012192:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801219a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	011b      	lsls	r3, r3, #4
 80121a0:	693a      	ldr	r2, [r7, #16]
 80121a2:	4313      	orrs	r3, r2
 80121a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	f023 030a 	bic.w	r3, r3, #10
 80121ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80121ae:	697a      	ldr	r2, [r7, #20]
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	4313      	orrs	r3, r2
 80121b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	693a      	ldr	r2, [r7, #16]
 80121ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	697a      	ldr	r2, [r7, #20]
 80121c0:	621a      	str	r2, [r3, #32]
}
 80121c2:	bf00      	nop
 80121c4:	371c      	adds	r7, #28
 80121c6:	46bd      	mov	sp, r7
 80121c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121cc:	4770      	bx	lr

080121ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80121ce:	b480      	push	{r7}
 80121d0:	b087      	sub	sp, #28
 80121d2:	af00      	add	r7, sp, #0
 80121d4:	60f8      	str	r0, [r7, #12]
 80121d6:	60b9      	str	r1, [r7, #8]
 80121d8:	607a      	str	r2, [r7, #4]
 80121da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	6a1b      	ldr	r3, [r3, #32]
 80121e0:	f023 0210 	bic.w	r2, r3, #16
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	699b      	ldr	r3, [r3, #24]
 80121ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	6a1b      	ldr	r3, [r3, #32]
 80121f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80121fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	021b      	lsls	r3, r3, #8
 8012200:	697a      	ldr	r2, [r7, #20]
 8012202:	4313      	orrs	r3, r2
 8012204:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801220c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	031b      	lsls	r3, r3, #12
 8012212:	b29b      	uxth	r3, r3
 8012214:	697a      	ldr	r2, [r7, #20]
 8012216:	4313      	orrs	r3, r2
 8012218:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012220:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	011b      	lsls	r3, r3, #4
 8012226:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801222a:	693a      	ldr	r2, [r7, #16]
 801222c:	4313      	orrs	r3, r2
 801222e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	697a      	ldr	r2, [r7, #20]
 8012234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	693a      	ldr	r2, [r7, #16]
 801223a:	621a      	str	r2, [r3, #32]
}
 801223c:	bf00      	nop
 801223e:	371c      	adds	r7, #28
 8012240:	46bd      	mov	sp, r7
 8012242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012246:	4770      	bx	lr

08012248 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012248:	b480      	push	{r7}
 801224a:	b087      	sub	sp, #28
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	6a1b      	ldr	r3, [r3, #32]
 8012258:	f023 0210 	bic.w	r2, r3, #16
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	699b      	ldr	r3, [r3, #24]
 8012264:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	6a1b      	ldr	r3, [r3, #32]
 801226a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012272:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	031b      	lsls	r3, r3, #12
 8012278:	697a      	ldr	r2, [r7, #20]
 801227a:	4313      	orrs	r3, r2
 801227c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012284:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012286:	68bb      	ldr	r3, [r7, #8]
 8012288:	011b      	lsls	r3, r3, #4
 801228a:	693a      	ldr	r2, [r7, #16]
 801228c:	4313      	orrs	r3, r2
 801228e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	697a      	ldr	r2, [r7, #20]
 8012294:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	693a      	ldr	r2, [r7, #16]
 801229a:	621a      	str	r2, [r3, #32]
}
 801229c:	bf00      	nop
 801229e:	371c      	adds	r7, #28
 80122a0:	46bd      	mov	sp, r7
 80122a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a6:	4770      	bx	lr

080122a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b087      	sub	sp, #28
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	6a1b      	ldr	r3, [r3, #32]
 80122ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	69db      	ldr	r3, [r3, #28]
 80122c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6a1b      	ldr	r3, [r3, #32]
 80122cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	f023 0303 	bic.w	r3, r3, #3
 80122d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	4313      	orrs	r3, r2
 80122dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80122e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	011b      	lsls	r3, r3, #4
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	697a      	ldr	r2, [r7, #20]
 80122ee:	4313      	orrs	r3, r2
 80122f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80122f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	021b      	lsls	r3, r3, #8
 80122fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8012302:	693a      	ldr	r2, [r7, #16]
 8012304:	4313      	orrs	r3, r2
 8012306:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	697a      	ldr	r2, [r7, #20]
 801230c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	693a      	ldr	r2, [r7, #16]
 8012312:	621a      	str	r2, [r3, #32]
}
 8012314:	bf00      	nop
 8012316:	371c      	adds	r7, #28
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012320:	b480      	push	{r7}
 8012322:	b087      	sub	sp, #28
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	6a1b      	ldr	r3, [r3, #32]
 8012332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	69db      	ldr	r3, [r3, #28]
 801233e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	6a1b      	ldr	r3, [r3, #32]
 8012344:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8012346:	697b      	ldr	r3, [r7, #20]
 8012348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801234c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	021b      	lsls	r3, r3, #8
 8012352:	697a      	ldr	r2, [r7, #20]
 8012354:	4313      	orrs	r3, r2
 8012356:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801235e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	031b      	lsls	r3, r3, #12
 8012364:	b29b      	uxth	r3, r3
 8012366:	697a      	ldr	r2, [r7, #20]
 8012368:	4313      	orrs	r3, r2
 801236a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8012372:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	031b      	lsls	r3, r3, #12
 8012378:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 801237c:	693a      	ldr	r2, [r7, #16]
 801237e:	4313      	orrs	r3, r2
 8012380:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	697a      	ldr	r2, [r7, #20]
 8012386:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	693a      	ldr	r2, [r7, #16]
 801238c:	621a      	str	r2, [r3, #32]
}
 801238e:	bf00      	nop
 8012390:	371c      	adds	r7, #28
 8012392:	46bd      	mov	sp, r7
 8012394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012398:	4770      	bx	lr
	...

0801239c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
 80123a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	689b      	ldr	r3, [r3, #8]
 80123aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80123ac:	68fa      	ldr	r2, [r7, #12]
 80123ae:	4b09      	ldr	r3, [pc, #36]	; (80123d4 <TIM_ITRx_SetConfig+0x38>)
 80123b0:	4013      	ands	r3, r2
 80123b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80123b4:	683a      	ldr	r2, [r7, #0]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	4313      	orrs	r3, r2
 80123ba:	f043 0307 	orr.w	r3, r3, #7
 80123be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	68fa      	ldr	r2, [r7, #12]
 80123c4:	609a      	str	r2, [r3, #8]
}
 80123c6:	bf00      	nop
 80123c8:	3714      	adds	r7, #20
 80123ca:	46bd      	mov	sp, r7
 80123cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d0:	4770      	bx	lr
 80123d2:	bf00      	nop
 80123d4:	ffcfff8f 	.word	0xffcfff8f

080123d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80123d8:	b480      	push	{r7}
 80123da:	b087      	sub	sp, #28
 80123dc:	af00      	add	r7, sp, #0
 80123de:	60f8      	str	r0, [r7, #12]
 80123e0:	60b9      	str	r1, [r7, #8]
 80123e2:	607a      	str	r2, [r7, #4]
 80123e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	689b      	ldr	r3, [r3, #8]
 80123ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80123f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	021a      	lsls	r2, r3, #8
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	431a      	orrs	r2, r3
 80123fc:	68bb      	ldr	r3, [r7, #8]
 80123fe:	4313      	orrs	r3, r2
 8012400:	697a      	ldr	r2, [r7, #20]
 8012402:	4313      	orrs	r3, r2
 8012404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	697a      	ldr	r2, [r7, #20]
 801240a:	609a      	str	r2, [r3, #8]
}
 801240c:	bf00      	nop
 801240e:	371c      	adds	r7, #28
 8012410:	46bd      	mov	sp, r7
 8012412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012416:	4770      	bx	lr

08012418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012418:	b480      	push	{r7}
 801241a:	b087      	sub	sp, #28
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	f003 031f 	and.w	r3, r3, #31
 801242a:	2201      	movs	r2, #1
 801242c:	fa02 f303 	lsl.w	r3, r2, r3
 8012430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6a1a      	ldr	r2, [r3, #32]
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	43db      	mvns	r3, r3
 801243a:	401a      	ands	r2, r3
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6a1a      	ldr	r2, [r3, #32]
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	f003 031f 	and.w	r3, r3, #31
 801244a:	6879      	ldr	r1, [r7, #4]
 801244c:	fa01 f303 	lsl.w	r3, r1, r3
 8012450:	431a      	orrs	r2, r3
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	621a      	str	r2, [r3, #32]
}
 8012456:	bf00      	nop
 8012458:	371c      	adds	r7, #28
 801245a:	46bd      	mov	sp, r7
 801245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012460:	4770      	bx	lr
	...

08012464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012464:	b480      	push	{r7}
 8012466:	b085      	sub	sp, #20
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012474:	2b01      	cmp	r3, #1
 8012476:	d101      	bne.n	801247c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012478:	2302      	movs	r3, #2
 801247a:	e06d      	b.n	8012558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	2201      	movs	r2, #1
 8012480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2202      	movs	r2, #2
 8012488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	685b      	ldr	r3, [r3, #4]
 8012492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	689b      	ldr	r3, [r3, #8]
 801249a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4a30      	ldr	r2, [pc, #192]	; (8012564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80124a2:	4293      	cmp	r3, r2
 80124a4:	d004      	beq.n	80124b0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4a2f      	ldr	r2, [pc, #188]	; (8012568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80124ac:	4293      	cmp	r3, r2
 80124ae:	d108      	bne.n	80124c2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80124b6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	685b      	ldr	r3, [r3, #4]
 80124bc:	68fa      	ldr	r2, [r7, #12]
 80124be:	4313      	orrs	r3, r2
 80124c0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80124c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80124ca:	683b      	ldr	r3, [r7, #0]
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	68fa      	ldr	r2, [r7, #12]
 80124d0:	4313      	orrs	r3, r2
 80124d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4a20      	ldr	r2, [pc, #128]	; (8012564 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80124e2:	4293      	cmp	r3, r2
 80124e4:	d022      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80124ee:	d01d      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a1d      	ldr	r2, [pc, #116]	; (801256c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d018      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	4a1c      	ldr	r2, [pc, #112]	; (8012570 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d013      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4a1a      	ldr	r2, [pc, #104]	; (8012574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801250a:	4293      	cmp	r3, r2
 801250c:	d00e      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	4a15      	ldr	r2, [pc, #84]	; (8012568 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012514:	4293      	cmp	r3, r2
 8012516:	d009      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	4a16      	ldr	r2, [pc, #88]	; (8012578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801251e:	4293      	cmp	r3, r2
 8012520:	d004      	beq.n	801252c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681b      	ldr	r3, [r3, #0]
 8012526:	4a15      	ldr	r2, [pc, #84]	; (801257c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8012528:	4293      	cmp	r3, r2
 801252a:	d10c      	bne.n	8012546 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012534:	683b      	ldr	r3, [r7, #0]
 8012536:	689b      	ldr	r3, [r3, #8]
 8012538:	68ba      	ldr	r2, [r7, #8]
 801253a:	4313      	orrs	r3, r2
 801253c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	68ba      	ldr	r2, [r7, #8]
 8012544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2201      	movs	r2, #1
 801254a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	2200      	movs	r2, #0
 8012552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012556:	2300      	movs	r3, #0
}
 8012558:	4618      	mov	r0, r3
 801255a:	3714      	adds	r7, #20
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr
 8012564:	40010000 	.word	0x40010000
 8012568:	40010400 	.word	0x40010400
 801256c:	40000400 	.word	0x40000400
 8012570:	40000800 	.word	0x40000800
 8012574:	40000c00 	.word	0x40000c00
 8012578:	40001800 	.word	0x40001800
 801257c:	40014000 	.word	0x40014000

08012580 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012588:	bf00      	nop
 801258a:	370c      	adds	r7, #12
 801258c:	46bd      	mov	sp, r7
 801258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012592:	4770      	bx	lr

08012594 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012594:	b480      	push	{r7}
 8012596:	b083      	sub	sp, #12
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801259c:	bf00      	nop
 801259e:	370c      	adds	r7, #12
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr

080125a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80125a8:	b480      	push	{r7}
 80125aa:	b083      	sub	sp, #12
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80125b0:	bf00      	nop
 80125b2:	370c      	adds	r7, #12
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b082      	sub	sp, #8
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d101      	bne.n	80125ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80125ca:	2301      	movs	r3, #1
 80125cc:	e042      	b.n	8012654 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d106      	bne.n	80125e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	2200      	movs	r2, #0
 80125dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80125e0:	6878      	ldr	r0, [r7, #4]
 80125e2:	f7f3 fdff 	bl	80061e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2224      	movs	r2, #36	; 0x24
 80125ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	681a      	ldr	r2, [r3, #0]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	f022 0201 	bic.w	r2, r2, #1
 80125fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f000 fd54 	bl	80130ac <UART_SetConfig>
 8012604:	4603      	mov	r3, r0
 8012606:	2b01      	cmp	r3, #1
 8012608:	d101      	bne.n	801260e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801260a:	2301      	movs	r3, #1
 801260c:	e022      	b.n	8012654 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012612:	2b00      	cmp	r3, #0
 8012614:	d002      	beq.n	801261c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f001 fab0 	bl	8013b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	685a      	ldr	r2, [r3, #4]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801262a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	689a      	ldr	r2, [r3, #8]
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801263a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	681a      	ldr	r2, [r3, #0]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f042 0201 	orr.w	r2, r2, #1
 801264a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f001 fb37 	bl	8013cc0 <UART_CheckIdleState>
 8012652:	4603      	mov	r3, r0
}
 8012654:	4618      	mov	r0, r3
 8012656:	3708      	adds	r7, #8
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b08a      	sub	sp, #40	; 0x28
 8012660:	af02      	add	r7, sp, #8
 8012662:	60f8      	str	r0, [r7, #12]
 8012664:	60b9      	str	r1, [r7, #8]
 8012666:	603b      	str	r3, [r7, #0]
 8012668:	4613      	mov	r3, r2
 801266a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012672:	2b20      	cmp	r3, #32
 8012674:	d17b      	bne.n	801276e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d002      	beq.n	8012682 <HAL_UART_Transmit+0x26>
 801267c:	88fb      	ldrh	r3, [r7, #6]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d101      	bne.n	8012686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012682:	2301      	movs	r3, #1
 8012684:	e074      	b.n	8012770 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	2200      	movs	r2, #0
 801268a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2221      	movs	r2, #33	; 0x21
 8012692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012696:	f7f4 fe5d 	bl	8007354 <HAL_GetTick>
 801269a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	88fa      	ldrh	r2, [r7, #6]
 80126a0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	88fa      	ldrh	r2, [r7, #6]
 80126a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	689b      	ldr	r3, [r3, #8]
 80126b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80126b4:	d108      	bne.n	80126c8 <HAL_UART_Transmit+0x6c>
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	691b      	ldr	r3, [r3, #16]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d104      	bne.n	80126c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80126be:	2300      	movs	r3, #0
 80126c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	61bb      	str	r3, [r7, #24]
 80126c6:	e003      	b.n	80126d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80126cc:	2300      	movs	r3, #0
 80126ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80126d0:	e030      	b.n	8012734 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	9300      	str	r3, [sp, #0]
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	2200      	movs	r2, #0
 80126da:	2180      	movs	r1, #128	; 0x80
 80126dc:	68f8      	ldr	r0, [r7, #12]
 80126de:	f001 fb99 	bl	8013e14 <UART_WaitOnFlagUntilTimeout>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d005      	beq.n	80126f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2220      	movs	r2, #32
 80126ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80126f0:	2303      	movs	r3, #3
 80126f2:	e03d      	b.n	8012770 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80126f4:	69fb      	ldr	r3, [r7, #28]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d10b      	bne.n	8012712 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	881b      	ldrh	r3, [r3, #0]
 80126fe:	461a      	mov	r2, r3
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801270a:	69bb      	ldr	r3, [r7, #24]
 801270c:	3302      	adds	r3, #2
 801270e:	61bb      	str	r3, [r7, #24]
 8012710:	e007      	b.n	8012722 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012712:	69fb      	ldr	r3, [r7, #28]
 8012714:	781a      	ldrb	r2, [r3, #0]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	3301      	adds	r3, #1
 8012720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012728:	b29b      	uxth	r3, r3
 801272a:	3b01      	subs	r3, #1
 801272c:	b29a      	uxth	r2, r3
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801273a:	b29b      	uxth	r3, r3
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1c8      	bne.n	80126d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	2200      	movs	r2, #0
 8012748:	2140      	movs	r1, #64	; 0x40
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	f001 fb62 	bl	8013e14 <UART_WaitOnFlagUntilTimeout>
 8012750:	4603      	mov	r3, r0
 8012752:	2b00      	cmp	r3, #0
 8012754:	d005      	beq.n	8012762 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2220      	movs	r2, #32
 801275a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801275e:	2303      	movs	r3, #3
 8012760:	e006      	b.n	8012770 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2220      	movs	r2, #32
 8012766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 801276a:	2300      	movs	r3, #0
 801276c:	e000      	b.n	8012770 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801276e:	2302      	movs	r3, #2
  }
}
 8012770:	4618      	mov	r0, r3
 8012772:	3720      	adds	r7, #32
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}

08012778 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b08a      	sub	sp, #40	; 0x28
 801277c:	af00      	add	r7, sp, #0
 801277e:	60f8      	str	r0, [r7, #12]
 8012780:	60b9      	str	r1, [r7, #8]
 8012782:	4613      	mov	r3, r2
 8012784:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801278c:	2b20      	cmp	r3, #32
 801278e:	d167      	bne.n	8012860 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d002      	beq.n	801279c <HAL_UART_Transmit_DMA+0x24>
 8012796:	88fb      	ldrh	r3, [r7, #6]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d101      	bne.n	80127a0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801279c:	2301      	movs	r3, #1
 801279e:	e060      	b.n	8012862 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	68ba      	ldr	r2, [r7, #8]
 80127a4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	88fa      	ldrh	r2, [r7, #6]
 80127aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	88fa      	ldrh	r2, [r7, #6]
 80127b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2200      	movs	r2, #0
 80127ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2221      	movs	r2, #33	; 0x21
 80127c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d028      	beq.n	8012820 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127d2:	4a26      	ldr	r2, [pc, #152]	; (801286c <HAL_UART_Transmit_DMA+0xf4>)
 80127d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127da:	4a25      	ldr	r2, [pc, #148]	; (8012870 <HAL_UART_Transmit_DMA+0xf8>)
 80127dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127e2:	4a24      	ldr	r2, [pc, #144]	; (8012874 <HAL_UART_Transmit_DMA+0xfc>)
 80127e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80127ea:	2200      	movs	r2, #0
 80127ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80127f6:	4619      	mov	r1, r3
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	3328      	adds	r3, #40	; 0x28
 80127fe:	461a      	mov	r2, r3
 8012800:	88fb      	ldrh	r3, [r7, #6]
 8012802:	f7f6 ffcf 	bl	80097a4 <HAL_DMA_Start_IT>
 8012806:	4603      	mov	r3, r0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d009      	beq.n	8012820 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	2210      	movs	r2, #16
 8012810:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	2220      	movs	r2, #32
 8012818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 801281c:	2301      	movs	r3, #1
 801281e:	e020      	b.n	8012862 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2240      	movs	r2, #64	; 0x40
 8012826:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	3308      	adds	r3, #8
 801282e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	e853 3f00 	ldrex	r3, [r3]
 8012836:	613b      	str	r3, [r7, #16]
   return(result);
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801283e:	627b      	str	r3, [r7, #36]	; 0x24
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	3308      	adds	r3, #8
 8012846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012848:	623a      	str	r2, [r7, #32]
 801284a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801284c:	69f9      	ldr	r1, [r7, #28]
 801284e:	6a3a      	ldr	r2, [r7, #32]
 8012850:	e841 2300 	strex	r3, r2, [r1]
 8012854:	61bb      	str	r3, [r7, #24]
   return(result);
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1e5      	bne.n	8012828 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801285c:	2300      	movs	r3, #0
 801285e:	e000      	b.n	8012862 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8012860:	2302      	movs	r3, #2
  }
}
 8012862:	4618      	mov	r0, r3
 8012864:	3728      	adds	r7, #40	; 0x28
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	08014181 	.word	0x08014181
 8012870:	08014217 	.word	0x08014217
 8012874:	08014399 	.word	0x08014399

08012878 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b08a      	sub	sp, #40	; 0x28
 801287c:	af00      	add	r7, sp, #0
 801287e:	60f8      	str	r0, [r7, #12]
 8012880:	60b9      	str	r1, [r7, #8]
 8012882:	4613      	mov	r3, r2
 8012884:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801288c:	2b20      	cmp	r3, #32
 801288e:	d137      	bne.n	8012900 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012890:	68bb      	ldr	r3, [r7, #8]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d002      	beq.n	801289c <HAL_UART_Receive_DMA+0x24>
 8012896:	88fb      	ldrh	r3, [r7, #6]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d101      	bne.n	80128a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801289c:	2301      	movs	r3, #1
 801289e:	e030      	b.n	8012902 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128a0:	68fb      	ldr	r3, [r7, #12]
 80128a2:	2200      	movs	r2, #0
 80128a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4a18      	ldr	r2, [pc, #96]	; (801290c <HAL_UART_Receive_DMA+0x94>)
 80128ac:	4293      	cmp	r3, r2
 80128ae:	d01f      	beq.n	80128f0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	685b      	ldr	r3, [r3, #4]
 80128b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d018      	beq.n	80128f0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c4:	697b      	ldr	r3, [r7, #20]
 80128c6:	e853 3f00 	ldrex	r3, [r3]
 80128ca:	613b      	str	r3, [r7, #16]
   return(result);
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80128d2:	627b      	str	r3, [r7, #36]	; 0x24
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	461a      	mov	r2, r3
 80128da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128dc:	623b      	str	r3, [r7, #32]
 80128de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128e0:	69f9      	ldr	r1, [r7, #28]
 80128e2:	6a3a      	ldr	r2, [r7, #32]
 80128e4:	e841 2300 	strex	r3, r2, [r1]
 80128e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d1e6      	bne.n	80128be <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80128f0:	88fb      	ldrh	r3, [r7, #6]
 80128f2:	461a      	mov	r2, r3
 80128f4:	68b9      	ldr	r1, [r7, #8]
 80128f6:	68f8      	ldr	r0, [r7, #12]
 80128f8:	f001 faf4 	bl	8013ee4 <UART_Start_Receive_DMA>
 80128fc:	4603      	mov	r3, r0
 80128fe:	e000      	b.n	8012902 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012900:	2302      	movs	r3, #2
  }
}
 8012902:	4618      	mov	r0, r3
 8012904:	3728      	adds	r7, #40	; 0x28
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	58000c00 	.word	0x58000c00

08012910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b0ba      	sub	sp, #232	; 0xe8
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	69db      	ldr	r3, [r3, #28]
 801291e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	689b      	ldr	r3, [r3, #8]
 8012932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8012936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801293a:	f640 030f 	movw	r3, #2063	; 0x80f
 801293e:	4013      	ands	r3, r2
 8012940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012948:	2b00      	cmp	r3, #0
 801294a:	d11b      	bne.n	8012984 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012950:	f003 0320 	and.w	r3, r3, #32
 8012954:	2b00      	cmp	r3, #0
 8012956:	d015      	beq.n	8012984 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801295c:	f003 0320 	and.w	r3, r3, #32
 8012960:	2b00      	cmp	r3, #0
 8012962:	d105      	bne.n	8012970 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012964:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801296c:	2b00      	cmp	r3, #0
 801296e:	d009      	beq.n	8012984 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012974:	2b00      	cmp	r3, #0
 8012976:	f000 8377 	beq.w	8013068 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	4798      	blx	r3
      }
      return;
 8012982:	e371      	b.n	8013068 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8012984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012988:	2b00      	cmp	r3, #0
 801298a:	f000 8123 	beq.w	8012bd4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801298e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012992:	4b8d      	ldr	r3, [pc, #564]	; (8012bc8 <HAL_UART_IRQHandler+0x2b8>)
 8012994:	4013      	ands	r3, r2
 8012996:	2b00      	cmp	r3, #0
 8012998:	d106      	bne.n	80129a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801299a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801299e:	4b8b      	ldr	r3, [pc, #556]	; (8012bcc <HAL_UART_IRQHandler+0x2bc>)
 80129a0:	4013      	ands	r3, r2
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f000 8116 	beq.w	8012bd4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80129a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129ac:	f003 0301 	and.w	r3, r3, #1
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d011      	beq.n	80129d8 <HAL_UART_IRQHandler+0xc8>
 80129b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d00b      	beq.n	80129d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2201      	movs	r2, #1
 80129c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129ce:	f043 0201 	orr.w	r2, r3, #1
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80129d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129dc:	f003 0302 	and.w	r3, r3, #2
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d011      	beq.n	8012a08 <HAL_UART_IRQHandler+0xf8>
 80129e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80129e8:	f003 0301 	and.w	r3, r3, #1
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00b      	beq.n	8012a08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	2202      	movs	r2, #2
 80129f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80129fe:	f043 0204 	orr.w	r2, r3, #4
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a0c:	f003 0304 	and.w	r3, r3, #4
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d011      	beq.n	8012a38 <HAL_UART_IRQHandler+0x128>
 8012a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a18:	f003 0301 	and.w	r3, r3, #1
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d00b      	beq.n	8012a38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	2204      	movs	r2, #4
 8012a26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a2e:	f043 0202 	orr.w	r2, r3, #2
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012a38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a3c:	f003 0308 	and.w	r3, r3, #8
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d017      	beq.n	8012a74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a48:	f003 0320 	and.w	r3, r3, #32
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d105      	bne.n	8012a5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012a50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012a54:	4b5c      	ldr	r3, [pc, #368]	; (8012bc8 <HAL_UART_IRQHandler+0x2b8>)
 8012a56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d00b      	beq.n	8012a74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	2208      	movs	r2, #8
 8012a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a6a:	f043 0208 	orr.w	r2, r3, #8
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d012      	beq.n	8012aa6 <HAL_UART_IRQHandler+0x196>
 8012a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d00c      	beq.n	8012aa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a9c:	f043 0220 	orr.w	r2, r3, #32
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	f000 82dd 	beq.w	801306c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ab6:	f003 0320 	and.w	r3, r3, #32
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d013      	beq.n	8012ae6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ac2:	f003 0320 	and.w	r3, r3, #32
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d105      	bne.n	8012ad6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d007      	beq.n	8012ae6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d003      	beq.n	8012ae6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	689b      	ldr	r3, [r3, #8]
 8012af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012afa:	2b40      	cmp	r3, #64	; 0x40
 8012afc:	d005      	beq.n	8012b0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012afe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012b02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d054      	beq.n	8012bb4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f001 fad2 	bl	80140b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	689b      	ldr	r3, [r3, #8]
 8012b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b1a:	2b40      	cmp	r3, #64	; 0x40
 8012b1c:	d146      	bne.n	8012bac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	3308      	adds	r3, #8
 8012b24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b2c:	e853 3f00 	ldrex	r3, [r3]
 8012b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012b34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	3308      	adds	r3, #8
 8012b46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012b4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012b4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012b56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012b5a:	e841 2300 	strex	r3, r2, [r1]
 8012b5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d1d9      	bne.n	8012b1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d017      	beq.n	8012ba4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b7a:	4a15      	ldr	r2, [pc, #84]	; (8012bd0 <HAL_UART_IRQHandler+0x2c0>)
 8012b7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7f7 fb95 	bl	800a2b4 <HAL_DMA_Abort_IT>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d019      	beq.n	8012bc4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012b9e:	4610      	mov	r0, r2
 8012ba0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012ba2:	e00f      	b.n	8012bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012ba4:	6878      	ldr	r0, [r7, #4]
 8012ba6:	f7f1 fb83 	bl	80042b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012baa:	e00b      	b.n	8012bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f7f1 fb7f 	bl	80042b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bb2:	e007      	b.n	8012bc4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f7f1 fb7b 	bl	80042b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8012bc2:	e253      	b.n	801306c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bc4:	bf00      	nop
    return;
 8012bc6:	e251      	b.n	801306c <HAL_UART_IRQHandler+0x75c>
 8012bc8:	10000001 	.word	0x10000001
 8012bcc:	04000120 	.word	0x04000120
 8012bd0:	08014419 	.word	0x08014419

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	f040 81e7 	bne.w	8012fac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012be2:	f003 0310 	and.w	r3, r3, #16
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	f000 81e0 	beq.w	8012fac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bf0:	f003 0310 	and.w	r3, r3, #16
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	f000 81d9 	beq.w	8012fac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	2210      	movs	r2, #16
 8012c00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	689b      	ldr	r3, [r3, #8]
 8012c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c0c:	2b40      	cmp	r3, #64	; 0x40
 8012c0e:	f040 8151 	bne.w	8012eb4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	4a96      	ldr	r2, [pc, #600]	; (8012e74 <HAL_UART_IRQHandler+0x564>)
 8012c1c:	4293      	cmp	r3, r2
 8012c1e:	d068      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	4a93      	ldr	r2, [pc, #588]	; (8012e78 <HAL_UART_IRQHandler+0x568>)
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d061      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	4a91      	ldr	r2, [pc, #580]	; (8012e7c <HAL_UART_IRQHandler+0x56c>)
 8012c38:	4293      	cmp	r3, r2
 8012c3a:	d05a      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4a8e      	ldr	r2, [pc, #568]	; (8012e80 <HAL_UART_IRQHandler+0x570>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d053      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	4a8c      	ldr	r2, [pc, #560]	; (8012e84 <HAL_UART_IRQHandler+0x574>)
 8012c54:	4293      	cmp	r3, r2
 8012c56:	d04c      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	4a89      	ldr	r2, [pc, #548]	; (8012e88 <HAL_UART_IRQHandler+0x578>)
 8012c62:	4293      	cmp	r3, r2
 8012c64:	d045      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	4a87      	ldr	r2, [pc, #540]	; (8012e8c <HAL_UART_IRQHandler+0x57c>)
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d03e      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	4a84      	ldr	r2, [pc, #528]	; (8012e90 <HAL_UART_IRQHandler+0x580>)
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d037      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a82      	ldr	r2, [pc, #520]	; (8012e94 <HAL_UART_IRQHandler+0x584>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d030      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4a7f      	ldr	r2, [pc, #508]	; (8012e98 <HAL_UART_IRQHandler+0x588>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d029      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a7d      	ldr	r2, [pc, #500]	; (8012e9c <HAL_UART_IRQHandler+0x58c>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d022      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a7a      	ldr	r2, [pc, #488]	; (8012ea0 <HAL_UART_IRQHandler+0x590>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d01b      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	4a78      	ldr	r2, [pc, #480]	; (8012ea4 <HAL_UART_IRQHandler+0x594>)
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d014      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a75      	ldr	r2, [pc, #468]	; (8012ea8 <HAL_UART_IRQHandler+0x598>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d00d      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a73      	ldr	r2, [pc, #460]	; (8012eac <HAL_UART_IRQHandler+0x59c>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d006      	beq.n	8012cf2 <HAL_UART_IRQHandler+0x3e2>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a70      	ldr	r2, [pc, #448]	; (8012eb0 <HAL_UART_IRQHandler+0x5a0>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d106      	bne.n	8012d00 <HAL_UART_IRQHandler+0x3f0>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	685b      	ldr	r3, [r3, #4]
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	e005      	b.n	8012d0c <HAL_UART_IRQHandler+0x3fc>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	f000 81ab 	beq.w	8013070 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012d20:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012d24:	429a      	cmp	r2, r3
 8012d26:	f080 81a3 	bcs.w	8013070 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012d30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d3a:	69db      	ldr	r3, [r3, #28]
 8012d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d40:	f000 8087 	beq.w	8012e52 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012d50:	e853 3f00 	ldrex	r3, [r3]
 8012d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	461a      	mov	r2, r3
 8012d6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012d6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012d72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012d7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012d7e:	e841 2300 	strex	r3, r2, [r1]
 8012d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d1da      	bne.n	8012d44 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	3308      	adds	r3, #8
 8012d94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d98:	e853 3f00 	ldrex	r3, [r3]
 8012d9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012da0:	f023 0301 	bic.w	r3, r3, #1
 8012da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	3308      	adds	r3, #8
 8012dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012db2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012db6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012db8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012dbe:	e841 2300 	strex	r3, r2, [r1]
 8012dc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d1e1      	bne.n	8012d8e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	3308      	adds	r3, #8
 8012dd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012dd4:	e853 3f00 	ldrex	r3, [r3]
 8012dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	3308      	adds	r3, #8
 8012dea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012dee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012df0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012df4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012df6:	e841 2300 	strex	r3, r2, [r1]
 8012dfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d1e3      	bne.n	8012dca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	2220      	movs	r2, #32
 8012e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e18:	e853 3f00 	ldrex	r3, [r3]
 8012e1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e20:	f023 0310 	bic.w	r3, r3, #16
 8012e24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e32:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e3a:	e841 2300 	strex	r3, r2, [r1]
 8012e3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d1e4      	bne.n	8012e10 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7f6 ff13 	bl	8009c78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2202      	movs	r2, #2
 8012e56:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	1ad3      	subs	r3, r2, r3
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	6878      	ldr	r0, [r7, #4]
 8012e6e:	f7f1 f917 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012e72:	e0fd      	b.n	8013070 <HAL_UART_IRQHandler+0x760>
 8012e74:	40020010 	.word	0x40020010
 8012e78:	40020028 	.word	0x40020028
 8012e7c:	40020040 	.word	0x40020040
 8012e80:	40020058 	.word	0x40020058
 8012e84:	40020070 	.word	0x40020070
 8012e88:	40020088 	.word	0x40020088
 8012e8c:	400200a0 	.word	0x400200a0
 8012e90:	400200b8 	.word	0x400200b8
 8012e94:	40020410 	.word	0x40020410
 8012e98:	40020428 	.word	0x40020428
 8012e9c:	40020440 	.word	0x40020440
 8012ea0:	40020458 	.word	0x40020458
 8012ea4:	40020470 	.word	0x40020470
 8012ea8:	40020488 	.word	0x40020488
 8012eac:	400204a0 	.word	0x400204a0
 8012eb0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	1ad3      	subs	r3, r2, r3
 8012ec4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	f000 80cf 	beq.w	8013074 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012ed6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 80ca 	beq.w	8013074 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee8:	e853 3f00 	ldrex	r3, [r3]
 8012eec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	461a      	mov	r2, r3
 8012efe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f02:	647b      	str	r3, [r7, #68]	; 0x44
 8012f04:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012f08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f0a:	e841 2300 	strex	r3, r2, [r1]
 8012f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d1e4      	bne.n	8012ee0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	3308      	adds	r3, #8
 8012f1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f20:	e853 3f00 	ldrex	r3, [r3]
 8012f24:	623b      	str	r3, [r7, #32]
   return(result);
 8012f26:	6a3a      	ldr	r2, [r7, #32]
 8012f28:	4b55      	ldr	r3, [pc, #340]	; (8013080 <HAL_UART_IRQHandler+0x770>)
 8012f2a:	4013      	ands	r3, r2
 8012f2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	3308      	adds	r3, #8
 8012f36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012f3a:	633a      	str	r2, [r7, #48]	; 0x30
 8012f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f42:	e841 2300 	strex	r3, r2, [r1]
 8012f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d1e3      	bne.n	8012f16 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2220      	movs	r2, #32
 8012f52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	e853 3f00 	ldrex	r3, [r3]
 8012f6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	f023 0310 	bic.w	r3, r3, #16
 8012f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	461a      	mov	r2, r3
 8012f80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012f84:	61fb      	str	r3, [r7, #28]
 8012f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f88:	69b9      	ldr	r1, [r7, #24]
 8012f8a:	69fa      	ldr	r2, [r7, #28]
 8012f8c:	e841 2300 	strex	r3, r2, [r1]
 8012f90:	617b      	str	r3, [r7, #20]
   return(result);
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d1e4      	bne.n	8012f62 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2202      	movs	r2, #2
 8012f9c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012f9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7f1 f87b 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012faa:	e063      	b.n	8013074 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012fb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d00e      	beq.n	8012fd6 <HAL_UART_IRQHandler+0x6c6>
 8012fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d008      	beq.n	8012fd6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f001 fa63 	bl	801449a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012fd4:	e051      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d014      	beq.n	801300c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d105      	bne.n	8012ffa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d008      	beq.n	801300c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d03a      	beq.n	8013078 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	4798      	blx	r3
    }
    return;
 801300a:	e035      	b.n	8013078 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801300c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013014:	2b00      	cmp	r3, #0
 8013016:	d009      	beq.n	801302c <HAL_UART_IRQHandler+0x71c>
 8013018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801301c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013020:	2b00      	cmp	r3, #0
 8013022:	d003      	beq.n	801302c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8013024:	6878      	ldr	r0, [r7, #4]
 8013026:	f001 fa0d 	bl	8014444 <UART_EndTransmit_IT>
    return;
 801302a:	e026      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801302c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013034:	2b00      	cmp	r3, #0
 8013036:	d009      	beq.n	801304c <HAL_UART_IRQHandler+0x73c>
 8013038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801303c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013040:	2b00      	cmp	r3, #0
 8013042:	d003      	beq.n	801304c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f001 fa3c 	bl	80144c2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801304a:	e016      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801304c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013054:	2b00      	cmp	r3, #0
 8013056:	d010      	beq.n	801307a <HAL_UART_IRQHandler+0x76a>
 8013058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801305c:	2b00      	cmp	r3, #0
 801305e:	da0c      	bge.n	801307a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8013060:	6878      	ldr	r0, [r7, #4]
 8013062:	f001 fa24 	bl	80144ae <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013066:	e008      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
      return;
 8013068:	bf00      	nop
 801306a:	e006      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
    return;
 801306c:	bf00      	nop
 801306e:	e004      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
      return;
 8013070:	bf00      	nop
 8013072:	e002      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
      return;
 8013074:	bf00      	nop
 8013076:	e000      	b.n	801307a <HAL_UART_IRQHandler+0x76a>
    return;
 8013078:	bf00      	nop
  }
}
 801307a:	37e8      	adds	r7, #232	; 0xe8
 801307c:	46bd      	mov	sp, r7
 801307e:	bd80      	pop	{r7, pc}
 8013080:	effffffe 	.word	0xeffffffe

08013084 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013084:	b480      	push	{r7}
 8013086:	b083      	sub	sp, #12
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801308c:	bf00      	nop
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8013098:	b480      	push	{r7}
 801309a:	b083      	sub	sp, #12
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80130a0:	bf00      	nop
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80130ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80130b0:	b092      	sub	sp, #72	; 0x48
 80130b2:	af00      	add	r7, sp, #0
 80130b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80130b6:	2300      	movs	r3, #0
 80130b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80130bc:	697b      	ldr	r3, [r7, #20]
 80130be:	689a      	ldr	r2, [r3, #8]
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	691b      	ldr	r3, [r3, #16]
 80130c4:	431a      	orrs	r2, r3
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	695b      	ldr	r3, [r3, #20]
 80130ca:	431a      	orrs	r2, r3
 80130cc:	697b      	ldr	r3, [r7, #20]
 80130ce:	69db      	ldr	r3, [r3, #28]
 80130d0:	4313      	orrs	r3, r2
 80130d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	681a      	ldr	r2, [r3, #0]
 80130da:	4bbe      	ldr	r3, [pc, #760]	; (80133d4 <UART_SetConfig+0x328>)
 80130dc:	4013      	ands	r3, r2
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	6812      	ldr	r2, [r2, #0]
 80130e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80130e4:	430b      	orrs	r3, r1
 80130e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80130e8:	697b      	ldr	r3, [r7, #20]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80130f2:	697b      	ldr	r3, [r7, #20]
 80130f4:	68da      	ldr	r2, [r3, #12]
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	430a      	orrs	r2, r1
 80130fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80130fe:	697b      	ldr	r3, [r7, #20]
 8013100:	699b      	ldr	r3, [r3, #24]
 8013102:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	4ab3      	ldr	r2, [pc, #716]	; (80133d8 <UART_SetConfig+0x32c>)
 801310a:	4293      	cmp	r3, r2
 801310c:	d004      	beq.n	8013118 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801310e:	697b      	ldr	r3, [r7, #20]
 8013110:	6a1b      	ldr	r3, [r3, #32]
 8013112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013114:	4313      	orrs	r3, r2
 8013116:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	689a      	ldr	r2, [r3, #8]
 801311e:	4baf      	ldr	r3, [pc, #700]	; (80133dc <UART_SetConfig+0x330>)
 8013120:	4013      	ands	r3, r2
 8013122:	697a      	ldr	r2, [r7, #20]
 8013124:	6812      	ldr	r2, [r2, #0]
 8013126:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013128:	430b      	orrs	r3, r1
 801312a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013132:	f023 010f 	bic.w	r1, r3, #15
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	430a      	orrs	r2, r1
 8013140:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	4aa6      	ldr	r2, [pc, #664]	; (80133e0 <UART_SetConfig+0x334>)
 8013148:	4293      	cmp	r3, r2
 801314a:	d177      	bne.n	801323c <UART_SetConfig+0x190>
 801314c:	4ba5      	ldr	r3, [pc, #660]	; (80133e4 <UART_SetConfig+0x338>)
 801314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013154:	2b28      	cmp	r3, #40	; 0x28
 8013156:	d86d      	bhi.n	8013234 <UART_SetConfig+0x188>
 8013158:	a201      	add	r2, pc, #4	; (adr r2, 8013160 <UART_SetConfig+0xb4>)
 801315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801315e:	bf00      	nop
 8013160:	08013205 	.word	0x08013205
 8013164:	08013235 	.word	0x08013235
 8013168:	08013235 	.word	0x08013235
 801316c:	08013235 	.word	0x08013235
 8013170:	08013235 	.word	0x08013235
 8013174:	08013235 	.word	0x08013235
 8013178:	08013235 	.word	0x08013235
 801317c:	08013235 	.word	0x08013235
 8013180:	0801320d 	.word	0x0801320d
 8013184:	08013235 	.word	0x08013235
 8013188:	08013235 	.word	0x08013235
 801318c:	08013235 	.word	0x08013235
 8013190:	08013235 	.word	0x08013235
 8013194:	08013235 	.word	0x08013235
 8013198:	08013235 	.word	0x08013235
 801319c:	08013235 	.word	0x08013235
 80131a0:	08013215 	.word	0x08013215
 80131a4:	08013235 	.word	0x08013235
 80131a8:	08013235 	.word	0x08013235
 80131ac:	08013235 	.word	0x08013235
 80131b0:	08013235 	.word	0x08013235
 80131b4:	08013235 	.word	0x08013235
 80131b8:	08013235 	.word	0x08013235
 80131bc:	08013235 	.word	0x08013235
 80131c0:	0801321d 	.word	0x0801321d
 80131c4:	08013235 	.word	0x08013235
 80131c8:	08013235 	.word	0x08013235
 80131cc:	08013235 	.word	0x08013235
 80131d0:	08013235 	.word	0x08013235
 80131d4:	08013235 	.word	0x08013235
 80131d8:	08013235 	.word	0x08013235
 80131dc:	08013235 	.word	0x08013235
 80131e0:	08013225 	.word	0x08013225
 80131e4:	08013235 	.word	0x08013235
 80131e8:	08013235 	.word	0x08013235
 80131ec:	08013235 	.word	0x08013235
 80131f0:	08013235 	.word	0x08013235
 80131f4:	08013235 	.word	0x08013235
 80131f8:	08013235 	.word	0x08013235
 80131fc:	08013235 	.word	0x08013235
 8013200:	0801322d 	.word	0x0801322d
 8013204:	2301      	movs	r3, #1
 8013206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801320a:	e222      	b.n	8013652 <UART_SetConfig+0x5a6>
 801320c:	2304      	movs	r3, #4
 801320e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013212:	e21e      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013214:	2308      	movs	r3, #8
 8013216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801321a:	e21a      	b.n	8013652 <UART_SetConfig+0x5a6>
 801321c:	2310      	movs	r3, #16
 801321e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013222:	e216      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013224:	2320      	movs	r3, #32
 8013226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801322a:	e212      	b.n	8013652 <UART_SetConfig+0x5a6>
 801322c:	2340      	movs	r3, #64	; 0x40
 801322e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013232:	e20e      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013234:	2380      	movs	r3, #128	; 0x80
 8013236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801323a:	e20a      	b.n	8013652 <UART_SetConfig+0x5a6>
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a69      	ldr	r2, [pc, #420]	; (80133e8 <UART_SetConfig+0x33c>)
 8013242:	4293      	cmp	r3, r2
 8013244:	d130      	bne.n	80132a8 <UART_SetConfig+0x1fc>
 8013246:	4b67      	ldr	r3, [pc, #412]	; (80133e4 <UART_SetConfig+0x338>)
 8013248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801324a:	f003 0307 	and.w	r3, r3, #7
 801324e:	2b05      	cmp	r3, #5
 8013250:	d826      	bhi.n	80132a0 <UART_SetConfig+0x1f4>
 8013252:	a201      	add	r2, pc, #4	; (adr r2, 8013258 <UART_SetConfig+0x1ac>)
 8013254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013258:	08013271 	.word	0x08013271
 801325c:	08013279 	.word	0x08013279
 8013260:	08013281 	.word	0x08013281
 8013264:	08013289 	.word	0x08013289
 8013268:	08013291 	.word	0x08013291
 801326c:	08013299 	.word	0x08013299
 8013270:	2300      	movs	r3, #0
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013276:	e1ec      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013278:	2304      	movs	r3, #4
 801327a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801327e:	e1e8      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013280:	2308      	movs	r3, #8
 8013282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013286:	e1e4      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013288:	2310      	movs	r3, #16
 801328a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801328e:	e1e0      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013290:	2320      	movs	r3, #32
 8013292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013296:	e1dc      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013298:	2340      	movs	r3, #64	; 0x40
 801329a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801329e:	e1d8      	b.n	8013652 <UART_SetConfig+0x5a6>
 80132a0:	2380      	movs	r3, #128	; 0x80
 80132a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132a6:	e1d4      	b.n	8013652 <UART_SetConfig+0x5a6>
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	4a4f      	ldr	r2, [pc, #316]	; (80133ec <UART_SetConfig+0x340>)
 80132ae:	4293      	cmp	r3, r2
 80132b0:	d130      	bne.n	8013314 <UART_SetConfig+0x268>
 80132b2:	4b4c      	ldr	r3, [pc, #304]	; (80133e4 <UART_SetConfig+0x338>)
 80132b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132b6:	f003 0307 	and.w	r3, r3, #7
 80132ba:	2b05      	cmp	r3, #5
 80132bc:	d826      	bhi.n	801330c <UART_SetConfig+0x260>
 80132be:	a201      	add	r2, pc, #4	; (adr r2, 80132c4 <UART_SetConfig+0x218>)
 80132c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132c4:	080132dd 	.word	0x080132dd
 80132c8:	080132e5 	.word	0x080132e5
 80132cc:	080132ed 	.word	0x080132ed
 80132d0:	080132f5 	.word	0x080132f5
 80132d4:	080132fd 	.word	0x080132fd
 80132d8:	08013305 	.word	0x08013305
 80132dc:	2300      	movs	r3, #0
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132e2:	e1b6      	b.n	8013652 <UART_SetConfig+0x5a6>
 80132e4:	2304      	movs	r3, #4
 80132e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ea:	e1b2      	b.n	8013652 <UART_SetConfig+0x5a6>
 80132ec:	2308      	movs	r3, #8
 80132ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132f2:	e1ae      	b.n	8013652 <UART_SetConfig+0x5a6>
 80132f4:	2310      	movs	r3, #16
 80132f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132fa:	e1aa      	b.n	8013652 <UART_SetConfig+0x5a6>
 80132fc:	2320      	movs	r3, #32
 80132fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013302:	e1a6      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013304:	2340      	movs	r3, #64	; 0x40
 8013306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801330a:	e1a2      	b.n	8013652 <UART_SetConfig+0x5a6>
 801330c:	2380      	movs	r3, #128	; 0x80
 801330e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013312:	e19e      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	4a35      	ldr	r2, [pc, #212]	; (80133f0 <UART_SetConfig+0x344>)
 801331a:	4293      	cmp	r3, r2
 801331c:	d130      	bne.n	8013380 <UART_SetConfig+0x2d4>
 801331e:	4b31      	ldr	r3, [pc, #196]	; (80133e4 <UART_SetConfig+0x338>)
 8013320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013322:	f003 0307 	and.w	r3, r3, #7
 8013326:	2b05      	cmp	r3, #5
 8013328:	d826      	bhi.n	8013378 <UART_SetConfig+0x2cc>
 801332a:	a201      	add	r2, pc, #4	; (adr r2, 8013330 <UART_SetConfig+0x284>)
 801332c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013330:	08013349 	.word	0x08013349
 8013334:	08013351 	.word	0x08013351
 8013338:	08013359 	.word	0x08013359
 801333c:	08013361 	.word	0x08013361
 8013340:	08013369 	.word	0x08013369
 8013344:	08013371 	.word	0x08013371
 8013348:	2300      	movs	r3, #0
 801334a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801334e:	e180      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013350:	2304      	movs	r3, #4
 8013352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013356:	e17c      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013358:	2308      	movs	r3, #8
 801335a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801335e:	e178      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013360:	2310      	movs	r3, #16
 8013362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013366:	e174      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013368:	2320      	movs	r3, #32
 801336a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801336e:	e170      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013370:	2340      	movs	r3, #64	; 0x40
 8013372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013376:	e16c      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013378:	2380      	movs	r3, #128	; 0x80
 801337a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801337e:	e168      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	4a1b      	ldr	r2, [pc, #108]	; (80133f4 <UART_SetConfig+0x348>)
 8013386:	4293      	cmp	r3, r2
 8013388:	d142      	bne.n	8013410 <UART_SetConfig+0x364>
 801338a:	4b16      	ldr	r3, [pc, #88]	; (80133e4 <UART_SetConfig+0x338>)
 801338c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801338e:	f003 0307 	and.w	r3, r3, #7
 8013392:	2b05      	cmp	r3, #5
 8013394:	d838      	bhi.n	8013408 <UART_SetConfig+0x35c>
 8013396:	a201      	add	r2, pc, #4	; (adr r2, 801339c <UART_SetConfig+0x2f0>)
 8013398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801339c:	080133b5 	.word	0x080133b5
 80133a0:	080133bd 	.word	0x080133bd
 80133a4:	080133c5 	.word	0x080133c5
 80133a8:	080133cd 	.word	0x080133cd
 80133ac:	080133f9 	.word	0x080133f9
 80133b0:	08013401 	.word	0x08013401
 80133b4:	2300      	movs	r3, #0
 80133b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ba:	e14a      	b.n	8013652 <UART_SetConfig+0x5a6>
 80133bc:	2304      	movs	r3, #4
 80133be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133c2:	e146      	b.n	8013652 <UART_SetConfig+0x5a6>
 80133c4:	2308      	movs	r3, #8
 80133c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ca:	e142      	b.n	8013652 <UART_SetConfig+0x5a6>
 80133cc:	2310      	movs	r3, #16
 80133ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133d2:	e13e      	b.n	8013652 <UART_SetConfig+0x5a6>
 80133d4:	cfff69f3 	.word	0xcfff69f3
 80133d8:	58000c00 	.word	0x58000c00
 80133dc:	11fff4ff 	.word	0x11fff4ff
 80133e0:	40011000 	.word	0x40011000
 80133e4:	58024400 	.word	0x58024400
 80133e8:	40004400 	.word	0x40004400
 80133ec:	40004800 	.word	0x40004800
 80133f0:	40004c00 	.word	0x40004c00
 80133f4:	40005000 	.word	0x40005000
 80133f8:	2320      	movs	r3, #32
 80133fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133fe:	e128      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013400:	2340      	movs	r3, #64	; 0x40
 8013402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013406:	e124      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013408:	2380      	movs	r3, #128	; 0x80
 801340a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801340e:	e120      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4acb      	ldr	r2, [pc, #812]	; (8013744 <UART_SetConfig+0x698>)
 8013416:	4293      	cmp	r3, r2
 8013418:	d176      	bne.n	8013508 <UART_SetConfig+0x45c>
 801341a:	4bcb      	ldr	r3, [pc, #812]	; (8013748 <UART_SetConfig+0x69c>)
 801341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801341e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013422:	2b28      	cmp	r3, #40	; 0x28
 8013424:	d86c      	bhi.n	8013500 <UART_SetConfig+0x454>
 8013426:	a201      	add	r2, pc, #4	; (adr r2, 801342c <UART_SetConfig+0x380>)
 8013428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342c:	080134d1 	.word	0x080134d1
 8013430:	08013501 	.word	0x08013501
 8013434:	08013501 	.word	0x08013501
 8013438:	08013501 	.word	0x08013501
 801343c:	08013501 	.word	0x08013501
 8013440:	08013501 	.word	0x08013501
 8013444:	08013501 	.word	0x08013501
 8013448:	08013501 	.word	0x08013501
 801344c:	080134d9 	.word	0x080134d9
 8013450:	08013501 	.word	0x08013501
 8013454:	08013501 	.word	0x08013501
 8013458:	08013501 	.word	0x08013501
 801345c:	08013501 	.word	0x08013501
 8013460:	08013501 	.word	0x08013501
 8013464:	08013501 	.word	0x08013501
 8013468:	08013501 	.word	0x08013501
 801346c:	080134e1 	.word	0x080134e1
 8013470:	08013501 	.word	0x08013501
 8013474:	08013501 	.word	0x08013501
 8013478:	08013501 	.word	0x08013501
 801347c:	08013501 	.word	0x08013501
 8013480:	08013501 	.word	0x08013501
 8013484:	08013501 	.word	0x08013501
 8013488:	08013501 	.word	0x08013501
 801348c:	080134e9 	.word	0x080134e9
 8013490:	08013501 	.word	0x08013501
 8013494:	08013501 	.word	0x08013501
 8013498:	08013501 	.word	0x08013501
 801349c:	08013501 	.word	0x08013501
 80134a0:	08013501 	.word	0x08013501
 80134a4:	08013501 	.word	0x08013501
 80134a8:	08013501 	.word	0x08013501
 80134ac:	080134f1 	.word	0x080134f1
 80134b0:	08013501 	.word	0x08013501
 80134b4:	08013501 	.word	0x08013501
 80134b8:	08013501 	.word	0x08013501
 80134bc:	08013501 	.word	0x08013501
 80134c0:	08013501 	.word	0x08013501
 80134c4:	08013501 	.word	0x08013501
 80134c8:	08013501 	.word	0x08013501
 80134cc:	080134f9 	.word	0x080134f9
 80134d0:	2301      	movs	r3, #1
 80134d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134d6:	e0bc      	b.n	8013652 <UART_SetConfig+0x5a6>
 80134d8:	2304      	movs	r3, #4
 80134da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134de:	e0b8      	b.n	8013652 <UART_SetConfig+0x5a6>
 80134e0:	2308      	movs	r3, #8
 80134e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134e6:	e0b4      	b.n	8013652 <UART_SetConfig+0x5a6>
 80134e8:	2310      	movs	r3, #16
 80134ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134ee:	e0b0      	b.n	8013652 <UART_SetConfig+0x5a6>
 80134f0:	2320      	movs	r3, #32
 80134f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134f6:	e0ac      	b.n	8013652 <UART_SetConfig+0x5a6>
 80134f8:	2340      	movs	r3, #64	; 0x40
 80134fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80134fe:	e0a8      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013500:	2380      	movs	r3, #128	; 0x80
 8013502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013506:	e0a4      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	4a8f      	ldr	r2, [pc, #572]	; (801374c <UART_SetConfig+0x6a0>)
 801350e:	4293      	cmp	r3, r2
 8013510:	d130      	bne.n	8013574 <UART_SetConfig+0x4c8>
 8013512:	4b8d      	ldr	r3, [pc, #564]	; (8013748 <UART_SetConfig+0x69c>)
 8013514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013516:	f003 0307 	and.w	r3, r3, #7
 801351a:	2b05      	cmp	r3, #5
 801351c:	d826      	bhi.n	801356c <UART_SetConfig+0x4c0>
 801351e:	a201      	add	r2, pc, #4	; (adr r2, 8013524 <UART_SetConfig+0x478>)
 8013520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013524:	0801353d 	.word	0x0801353d
 8013528:	08013545 	.word	0x08013545
 801352c:	0801354d 	.word	0x0801354d
 8013530:	08013555 	.word	0x08013555
 8013534:	0801355d 	.word	0x0801355d
 8013538:	08013565 	.word	0x08013565
 801353c:	2300      	movs	r3, #0
 801353e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013542:	e086      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013544:	2304      	movs	r3, #4
 8013546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801354a:	e082      	b.n	8013652 <UART_SetConfig+0x5a6>
 801354c:	2308      	movs	r3, #8
 801354e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013552:	e07e      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013554:	2310      	movs	r3, #16
 8013556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801355a:	e07a      	b.n	8013652 <UART_SetConfig+0x5a6>
 801355c:	2320      	movs	r3, #32
 801355e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013562:	e076      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013564:	2340      	movs	r3, #64	; 0x40
 8013566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801356a:	e072      	b.n	8013652 <UART_SetConfig+0x5a6>
 801356c:	2380      	movs	r3, #128	; 0x80
 801356e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013572:	e06e      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013574:	697b      	ldr	r3, [r7, #20]
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	4a75      	ldr	r2, [pc, #468]	; (8013750 <UART_SetConfig+0x6a4>)
 801357a:	4293      	cmp	r3, r2
 801357c:	d130      	bne.n	80135e0 <UART_SetConfig+0x534>
 801357e:	4b72      	ldr	r3, [pc, #456]	; (8013748 <UART_SetConfig+0x69c>)
 8013580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013582:	f003 0307 	and.w	r3, r3, #7
 8013586:	2b05      	cmp	r3, #5
 8013588:	d826      	bhi.n	80135d8 <UART_SetConfig+0x52c>
 801358a:	a201      	add	r2, pc, #4	; (adr r2, 8013590 <UART_SetConfig+0x4e4>)
 801358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013590:	080135a9 	.word	0x080135a9
 8013594:	080135b1 	.word	0x080135b1
 8013598:	080135b9 	.word	0x080135b9
 801359c:	080135c1 	.word	0x080135c1
 80135a0:	080135c9 	.word	0x080135c9
 80135a4:	080135d1 	.word	0x080135d1
 80135a8:	2300      	movs	r3, #0
 80135aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135ae:	e050      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135b0:	2304      	movs	r3, #4
 80135b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135b6:	e04c      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135b8:	2308      	movs	r3, #8
 80135ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135be:	e048      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135c0:	2310      	movs	r3, #16
 80135c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135c6:	e044      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135c8:	2320      	movs	r3, #32
 80135ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135ce:	e040      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135d0:	2340      	movs	r3, #64	; 0x40
 80135d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135d6:	e03c      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135d8:	2380      	movs	r3, #128	; 0x80
 80135da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135de:	e038      	b.n	8013652 <UART_SetConfig+0x5a6>
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	4a5b      	ldr	r2, [pc, #364]	; (8013754 <UART_SetConfig+0x6a8>)
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d130      	bne.n	801364c <UART_SetConfig+0x5a0>
 80135ea:	4b57      	ldr	r3, [pc, #348]	; (8013748 <UART_SetConfig+0x69c>)
 80135ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80135ee:	f003 0307 	and.w	r3, r3, #7
 80135f2:	2b05      	cmp	r3, #5
 80135f4:	d826      	bhi.n	8013644 <UART_SetConfig+0x598>
 80135f6:	a201      	add	r2, pc, #4	; (adr r2, 80135fc <UART_SetConfig+0x550>)
 80135f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135fc:	08013615 	.word	0x08013615
 8013600:	0801361d 	.word	0x0801361d
 8013604:	08013625 	.word	0x08013625
 8013608:	0801362d 	.word	0x0801362d
 801360c:	08013635 	.word	0x08013635
 8013610:	0801363d 	.word	0x0801363d
 8013614:	2302      	movs	r3, #2
 8013616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801361a:	e01a      	b.n	8013652 <UART_SetConfig+0x5a6>
 801361c:	2304      	movs	r3, #4
 801361e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013622:	e016      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013624:	2308      	movs	r3, #8
 8013626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801362a:	e012      	b.n	8013652 <UART_SetConfig+0x5a6>
 801362c:	2310      	movs	r3, #16
 801362e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013632:	e00e      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013634:	2320      	movs	r3, #32
 8013636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801363a:	e00a      	b.n	8013652 <UART_SetConfig+0x5a6>
 801363c:	2340      	movs	r3, #64	; 0x40
 801363e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013642:	e006      	b.n	8013652 <UART_SetConfig+0x5a6>
 8013644:	2380      	movs	r3, #128	; 0x80
 8013646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801364a:	e002      	b.n	8013652 <UART_SetConfig+0x5a6>
 801364c:	2380      	movs	r3, #128	; 0x80
 801364e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	4a3f      	ldr	r2, [pc, #252]	; (8013754 <UART_SetConfig+0x6a8>)
 8013658:	4293      	cmp	r3, r2
 801365a:	f040 80f8 	bne.w	801384e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801365e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013662:	2b20      	cmp	r3, #32
 8013664:	dc46      	bgt.n	80136f4 <UART_SetConfig+0x648>
 8013666:	2b02      	cmp	r3, #2
 8013668:	f2c0 8082 	blt.w	8013770 <UART_SetConfig+0x6c4>
 801366c:	3b02      	subs	r3, #2
 801366e:	2b1e      	cmp	r3, #30
 8013670:	d87e      	bhi.n	8013770 <UART_SetConfig+0x6c4>
 8013672:	a201      	add	r2, pc, #4	; (adr r2, 8013678 <UART_SetConfig+0x5cc>)
 8013674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013678:	080136fb 	.word	0x080136fb
 801367c:	08013771 	.word	0x08013771
 8013680:	08013703 	.word	0x08013703
 8013684:	08013771 	.word	0x08013771
 8013688:	08013771 	.word	0x08013771
 801368c:	08013771 	.word	0x08013771
 8013690:	08013713 	.word	0x08013713
 8013694:	08013771 	.word	0x08013771
 8013698:	08013771 	.word	0x08013771
 801369c:	08013771 	.word	0x08013771
 80136a0:	08013771 	.word	0x08013771
 80136a4:	08013771 	.word	0x08013771
 80136a8:	08013771 	.word	0x08013771
 80136ac:	08013771 	.word	0x08013771
 80136b0:	08013723 	.word	0x08013723
 80136b4:	08013771 	.word	0x08013771
 80136b8:	08013771 	.word	0x08013771
 80136bc:	08013771 	.word	0x08013771
 80136c0:	08013771 	.word	0x08013771
 80136c4:	08013771 	.word	0x08013771
 80136c8:	08013771 	.word	0x08013771
 80136cc:	08013771 	.word	0x08013771
 80136d0:	08013771 	.word	0x08013771
 80136d4:	08013771 	.word	0x08013771
 80136d8:	08013771 	.word	0x08013771
 80136dc:	08013771 	.word	0x08013771
 80136e0:	08013771 	.word	0x08013771
 80136e4:	08013771 	.word	0x08013771
 80136e8:	08013771 	.word	0x08013771
 80136ec:	08013771 	.word	0x08013771
 80136f0:	08013763 	.word	0x08013763
 80136f4:	2b40      	cmp	r3, #64	; 0x40
 80136f6:	d037      	beq.n	8013768 <UART_SetConfig+0x6bc>
 80136f8:	e03a      	b.n	8013770 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80136fa:	f7fc f995 	bl	800fa28 <HAL_RCCEx_GetD3PCLK1Freq>
 80136fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013700:	e03c      	b.n	801377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013706:	4618      	mov	r0, r3
 8013708:	f7fc f9a4 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013710:	e034      	b.n	801377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013712:	f107 0318 	add.w	r3, r7, #24
 8013716:	4618      	mov	r0, r3
 8013718:	f7fc faf0 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013720:	e02c      	b.n	801377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013722:	4b09      	ldr	r3, [pc, #36]	; (8013748 <UART_SetConfig+0x69c>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	f003 0320 	and.w	r3, r3, #32
 801372a:	2b00      	cmp	r3, #0
 801372c:	d016      	beq.n	801375c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801372e:	4b06      	ldr	r3, [pc, #24]	; (8013748 <UART_SetConfig+0x69c>)
 8013730:	681b      	ldr	r3, [r3, #0]
 8013732:	08db      	lsrs	r3, r3, #3
 8013734:	f003 0303 	and.w	r3, r3, #3
 8013738:	4a07      	ldr	r2, [pc, #28]	; (8013758 <UART_SetConfig+0x6ac>)
 801373a:	fa22 f303 	lsr.w	r3, r2, r3
 801373e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013740:	e01c      	b.n	801377c <UART_SetConfig+0x6d0>
 8013742:	bf00      	nop
 8013744:	40011400 	.word	0x40011400
 8013748:	58024400 	.word	0x58024400
 801374c:	40007800 	.word	0x40007800
 8013750:	40007c00 	.word	0x40007c00
 8013754:	58000c00 	.word	0x58000c00
 8013758:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801375c:	4b9d      	ldr	r3, [pc, #628]	; (80139d4 <UART_SetConfig+0x928>)
 801375e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013760:	e00c      	b.n	801377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013762:	4b9d      	ldr	r3, [pc, #628]	; (80139d8 <UART_SetConfig+0x92c>)
 8013764:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013766:	e009      	b.n	801377c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013768:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801376c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801376e:	e005      	b.n	801377c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013770:	2300      	movs	r3, #0
 8013772:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013774:	2301      	movs	r3, #1
 8013776:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801377a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801377c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801377e:	2b00      	cmp	r3, #0
 8013780:	f000 81de 	beq.w	8013b40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8013784:	697b      	ldr	r3, [r7, #20]
 8013786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013788:	4a94      	ldr	r2, [pc, #592]	; (80139dc <UART_SetConfig+0x930>)
 801378a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801378e:	461a      	mov	r2, r3
 8013790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013792:	fbb3 f3f2 	udiv	r3, r3, r2
 8013796:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013798:	697b      	ldr	r3, [r7, #20]
 801379a:	685a      	ldr	r2, [r3, #4]
 801379c:	4613      	mov	r3, r2
 801379e:	005b      	lsls	r3, r3, #1
 80137a0:	4413      	add	r3, r2
 80137a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d305      	bcc.n	80137b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80137ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137b0:	429a      	cmp	r2, r3
 80137b2:	d903      	bls.n	80137bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80137b4:	2301      	movs	r3, #1
 80137b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80137ba:	e1c1      	b.n	8013b40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80137bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137be:	2200      	movs	r2, #0
 80137c0:	60bb      	str	r3, [r7, #8]
 80137c2:	60fa      	str	r2, [r7, #12]
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137c8:	4a84      	ldr	r2, [pc, #528]	; (80139dc <UART_SetConfig+0x930>)
 80137ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	2200      	movs	r2, #0
 80137d2:	603b      	str	r3, [r7, #0]
 80137d4:	607a      	str	r2, [r7, #4]
 80137d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80137da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80137de:	f7ec fdd7 	bl	8000390 <__aeabi_uldivmod>
 80137e2:	4602      	mov	r2, r0
 80137e4:	460b      	mov	r3, r1
 80137e6:	4610      	mov	r0, r2
 80137e8:	4619      	mov	r1, r3
 80137ea:	f04f 0200 	mov.w	r2, #0
 80137ee:	f04f 0300 	mov.w	r3, #0
 80137f2:	020b      	lsls	r3, r1, #8
 80137f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80137f8:	0202      	lsls	r2, r0, #8
 80137fa:	6979      	ldr	r1, [r7, #20]
 80137fc:	6849      	ldr	r1, [r1, #4]
 80137fe:	0849      	lsrs	r1, r1, #1
 8013800:	2000      	movs	r0, #0
 8013802:	460c      	mov	r4, r1
 8013804:	4605      	mov	r5, r0
 8013806:	eb12 0804 	adds.w	r8, r2, r4
 801380a:	eb43 0905 	adc.w	r9, r3, r5
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	2200      	movs	r2, #0
 8013814:	469a      	mov	sl, r3
 8013816:	4693      	mov	fp, r2
 8013818:	4652      	mov	r2, sl
 801381a:	465b      	mov	r3, fp
 801381c:	4640      	mov	r0, r8
 801381e:	4649      	mov	r1, r9
 8013820:	f7ec fdb6 	bl	8000390 <__aeabi_uldivmod>
 8013824:	4602      	mov	r2, r0
 8013826:	460b      	mov	r3, r1
 8013828:	4613      	mov	r3, r2
 801382a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801382c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013832:	d308      	bcc.n	8013846 <UART_SetConfig+0x79a>
 8013834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801383a:	d204      	bcs.n	8013846 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013842:	60da      	str	r2, [r3, #12]
 8013844:	e17c      	b.n	8013b40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8013846:	2301      	movs	r3, #1
 8013848:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801384c:	e178      	b.n	8013b40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	69db      	ldr	r3, [r3, #28]
 8013852:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013856:	f040 80c5 	bne.w	80139e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801385a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801385e:	2b20      	cmp	r3, #32
 8013860:	dc48      	bgt.n	80138f4 <UART_SetConfig+0x848>
 8013862:	2b00      	cmp	r3, #0
 8013864:	db7b      	blt.n	801395e <UART_SetConfig+0x8b2>
 8013866:	2b20      	cmp	r3, #32
 8013868:	d879      	bhi.n	801395e <UART_SetConfig+0x8b2>
 801386a:	a201      	add	r2, pc, #4	; (adr r2, 8013870 <UART_SetConfig+0x7c4>)
 801386c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013870:	080138fb 	.word	0x080138fb
 8013874:	08013903 	.word	0x08013903
 8013878:	0801395f 	.word	0x0801395f
 801387c:	0801395f 	.word	0x0801395f
 8013880:	0801390b 	.word	0x0801390b
 8013884:	0801395f 	.word	0x0801395f
 8013888:	0801395f 	.word	0x0801395f
 801388c:	0801395f 	.word	0x0801395f
 8013890:	0801391b 	.word	0x0801391b
 8013894:	0801395f 	.word	0x0801395f
 8013898:	0801395f 	.word	0x0801395f
 801389c:	0801395f 	.word	0x0801395f
 80138a0:	0801395f 	.word	0x0801395f
 80138a4:	0801395f 	.word	0x0801395f
 80138a8:	0801395f 	.word	0x0801395f
 80138ac:	0801395f 	.word	0x0801395f
 80138b0:	0801392b 	.word	0x0801392b
 80138b4:	0801395f 	.word	0x0801395f
 80138b8:	0801395f 	.word	0x0801395f
 80138bc:	0801395f 	.word	0x0801395f
 80138c0:	0801395f 	.word	0x0801395f
 80138c4:	0801395f 	.word	0x0801395f
 80138c8:	0801395f 	.word	0x0801395f
 80138cc:	0801395f 	.word	0x0801395f
 80138d0:	0801395f 	.word	0x0801395f
 80138d4:	0801395f 	.word	0x0801395f
 80138d8:	0801395f 	.word	0x0801395f
 80138dc:	0801395f 	.word	0x0801395f
 80138e0:	0801395f 	.word	0x0801395f
 80138e4:	0801395f 	.word	0x0801395f
 80138e8:	0801395f 	.word	0x0801395f
 80138ec:	0801395f 	.word	0x0801395f
 80138f0:	08013951 	.word	0x08013951
 80138f4:	2b40      	cmp	r3, #64	; 0x40
 80138f6:	d02e      	beq.n	8013956 <UART_SetConfig+0x8aa>
 80138f8:	e031      	b.n	801395e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80138fa:	f7fa f8df 	bl	800dabc <HAL_RCC_GetPCLK1Freq>
 80138fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013900:	e033      	b.n	801396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013902:	f7fa f8f1 	bl	800dae8 <HAL_RCC_GetPCLK2Freq>
 8013906:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013908:	e02f      	b.n	801396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801390a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801390e:	4618      	mov	r0, r3
 8013910:	f7fc f8a0 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013918:	e027      	b.n	801396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801391a:	f107 0318 	add.w	r3, r7, #24
 801391e:	4618      	mov	r0, r3
 8013920:	f7fc f9ec 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013928:	e01f      	b.n	801396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801392a:	4b2d      	ldr	r3, [pc, #180]	; (80139e0 <UART_SetConfig+0x934>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f003 0320 	and.w	r3, r3, #32
 8013932:	2b00      	cmp	r3, #0
 8013934:	d009      	beq.n	801394a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013936:	4b2a      	ldr	r3, [pc, #168]	; (80139e0 <UART_SetConfig+0x934>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	08db      	lsrs	r3, r3, #3
 801393c:	f003 0303 	and.w	r3, r3, #3
 8013940:	4a24      	ldr	r2, [pc, #144]	; (80139d4 <UART_SetConfig+0x928>)
 8013942:	fa22 f303 	lsr.w	r3, r2, r3
 8013946:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013948:	e00f      	b.n	801396a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801394a:	4b22      	ldr	r3, [pc, #136]	; (80139d4 <UART_SetConfig+0x928>)
 801394c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801394e:	e00c      	b.n	801396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013950:	4b21      	ldr	r3, [pc, #132]	; (80139d8 <UART_SetConfig+0x92c>)
 8013952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013954:	e009      	b.n	801396a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801395a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801395c:	e005      	b.n	801396a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801395e:	2300      	movs	r3, #0
 8013960:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013962:	2301      	movs	r3, #1
 8013964:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013968:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801396a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396c:	2b00      	cmp	r3, #0
 801396e:	f000 80e7 	beq.w	8013b40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013972:	697b      	ldr	r3, [r7, #20]
 8013974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013976:	4a19      	ldr	r2, [pc, #100]	; (80139dc <UART_SetConfig+0x930>)
 8013978:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801397c:	461a      	mov	r2, r3
 801397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013980:	fbb3 f3f2 	udiv	r3, r3, r2
 8013984:	005a      	lsls	r2, r3, #1
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	085b      	lsrs	r3, r3, #1
 801398c:	441a      	add	r2, r3
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	fbb2 f3f3 	udiv	r3, r2, r3
 8013996:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801399a:	2b0f      	cmp	r3, #15
 801399c:	d916      	bls.n	80139cc <UART_SetConfig+0x920>
 801399e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139a4:	d212      	bcs.n	80139cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80139a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	f023 030f 	bic.w	r3, r3, #15
 80139ae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80139b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b2:	085b      	lsrs	r3, r3, #1
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	f003 0307 	and.w	r3, r3, #7
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80139be:	4313      	orrs	r3, r2
 80139c0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80139c8:	60da      	str	r2, [r3, #12]
 80139ca:	e0b9      	b.n	8013b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80139cc:	2301      	movs	r3, #1
 80139ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80139d2:	e0b5      	b.n	8013b40 <UART_SetConfig+0xa94>
 80139d4:	03d09000 	.word	0x03d09000
 80139d8:	003d0900 	.word	0x003d0900
 80139dc:	08017690 	.word	0x08017690
 80139e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80139e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80139e8:	2b20      	cmp	r3, #32
 80139ea:	dc49      	bgt.n	8013a80 <UART_SetConfig+0x9d4>
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	db7c      	blt.n	8013aea <UART_SetConfig+0xa3e>
 80139f0:	2b20      	cmp	r3, #32
 80139f2:	d87a      	bhi.n	8013aea <UART_SetConfig+0xa3e>
 80139f4:	a201      	add	r2, pc, #4	; (adr r2, 80139fc <UART_SetConfig+0x950>)
 80139f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139fa:	bf00      	nop
 80139fc:	08013a87 	.word	0x08013a87
 8013a00:	08013a8f 	.word	0x08013a8f
 8013a04:	08013aeb 	.word	0x08013aeb
 8013a08:	08013aeb 	.word	0x08013aeb
 8013a0c:	08013a97 	.word	0x08013a97
 8013a10:	08013aeb 	.word	0x08013aeb
 8013a14:	08013aeb 	.word	0x08013aeb
 8013a18:	08013aeb 	.word	0x08013aeb
 8013a1c:	08013aa7 	.word	0x08013aa7
 8013a20:	08013aeb 	.word	0x08013aeb
 8013a24:	08013aeb 	.word	0x08013aeb
 8013a28:	08013aeb 	.word	0x08013aeb
 8013a2c:	08013aeb 	.word	0x08013aeb
 8013a30:	08013aeb 	.word	0x08013aeb
 8013a34:	08013aeb 	.word	0x08013aeb
 8013a38:	08013aeb 	.word	0x08013aeb
 8013a3c:	08013ab7 	.word	0x08013ab7
 8013a40:	08013aeb 	.word	0x08013aeb
 8013a44:	08013aeb 	.word	0x08013aeb
 8013a48:	08013aeb 	.word	0x08013aeb
 8013a4c:	08013aeb 	.word	0x08013aeb
 8013a50:	08013aeb 	.word	0x08013aeb
 8013a54:	08013aeb 	.word	0x08013aeb
 8013a58:	08013aeb 	.word	0x08013aeb
 8013a5c:	08013aeb 	.word	0x08013aeb
 8013a60:	08013aeb 	.word	0x08013aeb
 8013a64:	08013aeb 	.word	0x08013aeb
 8013a68:	08013aeb 	.word	0x08013aeb
 8013a6c:	08013aeb 	.word	0x08013aeb
 8013a70:	08013aeb 	.word	0x08013aeb
 8013a74:	08013aeb 	.word	0x08013aeb
 8013a78:	08013aeb 	.word	0x08013aeb
 8013a7c:	08013add 	.word	0x08013add
 8013a80:	2b40      	cmp	r3, #64	; 0x40
 8013a82:	d02e      	beq.n	8013ae2 <UART_SetConfig+0xa36>
 8013a84:	e031      	b.n	8013aea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013a86:	f7fa f819 	bl	800dabc <HAL_RCC_GetPCLK1Freq>
 8013a8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013a8c:	e033      	b.n	8013af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013a8e:	f7fa f82b 	bl	800dae8 <HAL_RCC_GetPCLK2Freq>
 8013a92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013a94:	e02f      	b.n	8013af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	f7fb ffda 	bl	800fa54 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013aa4:	e027      	b.n	8013af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013aa6:	f107 0318 	add.w	r3, r7, #24
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fc f926 	bl	800fcfc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013ab0:	69fb      	ldr	r3, [r7, #28]
 8013ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ab4:	e01f      	b.n	8013af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013ab6:	4b2d      	ldr	r3, [pc, #180]	; (8013b6c <UART_SetConfig+0xac0>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	f003 0320 	and.w	r3, r3, #32
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d009      	beq.n	8013ad6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013ac2:	4b2a      	ldr	r3, [pc, #168]	; (8013b6c <UART_SetConfig+0xac0>)
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	08db      	lsrs	r3, r3, #3
 8013ac8:	f003 0303 	and.w	r3, r3, #3
 8013acc:	4a28      	ldr	r2, [pc, #160]	; (8013b70 <UART_SetConfig+0xac4>)
 8013ace:	fa22 f303 	lsr.w	r3, r2, r3
 8013ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013ad4:	e00f      	b.n	8013af6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013ad6:	4b26      	ldr	r3, [pc, #152]	; (8013b70 <UART_SetConfig+0xac4>)
 8013ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ada:	e00c      	b.n	8013af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013adc:	4b25      	ldr	r3, [pc, #148]	; (8013b74 <UART_SetConfig+0xac8>)
 8013ade:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ae0:	e009      	b.n	8013af6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013ae8:	e005      	b.n	8013af6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013aea:	2300      	movs	r3, #0
 8013aec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013aee:	2301      	movs	r3, #1
 8013af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013af4:	bf00      	nop
    }

    if (pclk != 0U)
 8013af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d021      	beq.n	8013b40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013afc:	697b      	ldr	r3, [r7, #20]
 8013afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b00:	4a1d      	ldr	r2, [pc, #116]	; (8013b78 <UART_SetConfig+0xacc>)
 8013b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b06:	461a      	mov	r2, r3
 8013b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	085b      	lsrs	r3, r3, #1
 8013b14:	441a      	add	r2, r3
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	685b      	ldr	r3, [r3, #4]
 8013b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b22:	2b0f      	cmp	r3, #15
 8013b24:	d909      	bls.n	8013b3a <UART_SetConfig+0xa8e>
 8013b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b2c:	d205      	bcs.n	8013b3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b30:	b29a      	uxth	r2, r3
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	60da      	str	r2, [r3, #12]
 8013b38:	e002      	b.n	8013b40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	2201      	movs	r2, #1
 8013b44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	2201      	movs	r2, #1
 8013b4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	2200      	movs	r2, #0
 8013b54:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013b5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3748      	adds	r7, #72	; 0x48
 8013b64:	46bd      	mov	sp, r7
 8013b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013b6a:	bf00      	nop
 8013b6c:	58024400 	.word	0x58024400
 8013b70:	03d09000 	.word	0x03d09000
 8013b74:	003d0900 	.word	0x003d0900
 8013b78:	08017690 	.word	0x08017690

08013b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	b083      	sub	sp, #12
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b88:	f003 0301 	and.w	r3, r3, #1
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d00a      	beq.n	8013ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	685b      	ldr	r3, [r3, #4]
 8013b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	430a      	orrs	r2, r1
 8013ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013baa:	f003 0302 	and.w	r3, r3, #2
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d00a      	beq.n	8013bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	685b      	ldr	r3, [r3, #4]
 8013bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	430a      	orrs	r2, r1
 8013bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bcc:	f003 0304 	and.w	r3, r3, #4
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d00a      	beq.n	8013bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	685b      	ldr	r3, [r3, #4]
 8013bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	430a      	orrs	r2, r1
 8013be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bee:	f003 0308 	and.w	r3, r3, #8
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d00a      	beq.n	8013c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	430a      	orrs	r2, r1
 8013c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c10:	f003 0310 	and.w	r3, r3, #16
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00a      	beq.n	8013c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	689b      	ldr	r3, [r3, #8]
 8013c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	430a      	orrs	r2, r1
 8013c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c32:	f003 0320 	and.w	r3, r3, #32
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d00a      	beq.n	8013c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	689b      	ldr	r3, [r3, #8]
 8013c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	430a      	orrs	r2, r1
 8013c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d01a      	beq.n	8013c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	430a      	orrs	r2, r1
 8013c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013c7a:	d10a      	bne.n	8013c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	430a      	orrs	r2, r1
 8013c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d00a      	beq.n	8013cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	685b      	ldr	r3, [r3, #4]
 8013ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	430a      	orrs	r2, r1
 8013cb2:	605a      	str	r2, [r3, #4]
  }
}
 8013cb4:	bf00      	nop
 8013cb6:	370c      	adds	r7, #12
 8013cb8:	46bd      	mov	sp, r7
 8013cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbe:	4770      	bx	lr

08013cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013cc0:	b580      	push	{r7, lr}
 8013cc2:	b098      	sub	sp, #96	; 0x60
 8013cc4:	af02      	add	r7, sp, #8
 8013cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013cd0:	f7f3 fb40 	bl	8007354 <HAL_GetTick>
 8013cd4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f003 0308 	and.w	r3, r3, #8
 8013ce0:	2b08      	cmp	r3, #8
 8013ce2:	d12f      	bne.n	8013d44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013ce8:	9300      	str	r3, [sp, #0]
 8013cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013cec:	2200      	movs	r2, #0
 8013cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013cf2:	6878      	ldr	r0, [r7, #4]
 8013cf4:	f000 f88e 	bl	8013e14 <UART_WaitOnFlagUntilTimeout>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d022      	beq.n	8013d44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d06:	e853 3f00 	ldrex	r3, [r3]
 8013d0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013d12:	653b      	str	r3, [r7, #80]	; 0x50
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	461a      	mov	r2, r3
 8013d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8013d1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d24:	e841 2300 	strex	r3, r2, [r1]
 8013d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d1e6      	bne.n	8013cfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2220      	movs	r2, #32
 8013d34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	2200      	movs	r2, #0
 8013d3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013d40:	2303      	movs	r3, #3
 8013d42:	e063      	b.n	8013e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	f003 0304 	and.w	r3, r3, #4
 8013d4e:	2b04      	cmp	r3, #4
 8013d50:	d149      	bne.n	8013de6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013d52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f000 f857 	bl	8013e14 <UART_WaitOnFlagUntilTimeout>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d03c      	beq.n	8013de6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d74:	e853 3f00 	ldrex	r3, [r3]
 8013d78:	623b      	str	r3, [r7, #32]
   return(result);
 8013d7a:	6a3b      	ldr	r3, [r7, #32]
 8013d7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013d80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	461a      	mov	r2, r3
 8013d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8013d8c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d92:	e841 2300 	strex	r3, r2, [r1]
 8013d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d1e6      	bne.n	8013d6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	3308      	adds	r3, #8
 8013da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	e853 3f00 	ldrex	r3, [r3]
 8013dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	f023 0301 	bic.w	r3, r3, #1
 8013db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	3308      	adds	r3, #8
 8013dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013dbe:	61fa      	str	r2, [r7, #28]
 8013dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dc2:	69b9      	ldr	r1, [r7, #24]
 8013dc4:	69fa      	ldr	r2, [r7, #28]
 8013dc6:	e841 2300 	strex	r3, r2, [r1]
 8013dca:	617b      	str	r3, [r7, #20]
   return(result);
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d1e5      	bne.n	8013d9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2220      	movs	r2, #32
 8013dd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013de2:	2303      	movs	r3, #3
 8013de4:	e012      	b.n	8013e0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	2220      	movs	r2, #32
 8013dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2220      	movs	r2, #32
 8013df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2200      	movs	r2, #0
 8013dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2200      	movs	r2, #0
 8013e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3758      	adds	r7, #88	; 0x58
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	60f8      	str	r0, [r7, #12]
 8013e1c:	60b9      	str	r1, [r7, #8]
 8013e1e:	603b      	str	r3, [r7, #0]
 8013e20:	4613      	mov	r3, r2
 8013e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013e24:	e049      	b.n	8013eba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e26:	69bb      	ldr	r3, [r7, #24]
 8013e28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e2c:	d045      	beq.n	8013eba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e2e:	f7f3 fa91 	bl	8007354 <HAL_GetTick>
 8013e32:	4602      	mov	r2, r0
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	1ad3      	subs	r3, r2, r3
 8013e38:	69ba      	ldr	r2, [r7, #24]
 8013e3a:	429a      	cmp	r2, r3
 8013e3c:	d302      	bcc.n	8013e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8013e3e:	69bb      	ldr	r3, [r7, #24]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d101      	bne.n	8013e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013e44:	2303      	movs	r3, #3
 8013e46:	e048      	b.n	8013eda <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	f003 0304 	and.w	r3, r3, #4
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d031      	beq.n	8013eba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	69db      	ldr	r3, [r3, #28]
 8013e5c:	f003 0308 	and.w	r3, r3, #8
 8013e60:	2b08      	cmp	r3, #8
 8013e62:	d110      	bne.n	8013e86 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	2208      	movs	r2, #8
 8013e6a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f000 f921 	bl	80140b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	2208      	movs	r2, #8
 8013e76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013e82:	2301      	movs	r3, #1
 8013e84:	e029      	b.n	8013eda <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	69db      	ldr	r3, [r3, #28]
 8013e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013e94:	d111      	bne.n	8013eba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	f000 f907 	bl	80140b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	2220      	movs	r2, #32
 8013eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	2200      	movs	r2, #0
 8013eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013eb6:	2303      	movs	r3, #3
 8013eb8:	e00f      	b.n	8013eda <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	69da      	ldr	r2, [r3, #28]
 8013ec0:	68bb      	ldr	r3, [r7, #8]
 8013ec2:	4013      	ands	r3, r2
 8013ec4:	68ba      	ldr	r2, [r7, #8]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	bf0c      	ite	eq
 8013eca:	2301      	moveq	r3, #1
 8013ecc:	2300      	movne	r3, #0
 8013ece:	b2db      	uxtb	r3, r3
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	79fb      	ldrb	r3, [r7, #7]
 8013ed4:	429a      	cmp	r2, r3
 8013ed6:	d0a6      	beq.n	8013e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013ed8:	2300      	movs	r3, #0
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
	...

08013ee4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b096      	sub	sp, #88	; 0x58
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	68ba      	ldr	r2, [r7, #8]
 8013ef6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	88fa      	ldrh	r2, [r7, #6]
 8013efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2200      	movs	r2, #0
 8013f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	2222      	movs	r2, #34	; 0x22
 8013f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d02d      	beq.n	8013f76 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f20:	4a40      	ldr	r2, [pc, #256]	; (8014024 <UART_Start_Receive_DMA+0x140>)
 8013f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f2a:	4a3f      	ldr	r2, [pc, #252]	; (8014028 <UART_Start_Receive_DMA+0x144>)
 8013f2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f34:	4a3d      	ldr	r2, [pc, #244]	; (801402c <UART_Start_Receive_DMA+0x148>)
 8013f36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f3e:	2200      	movs	r2, #0
 8013f40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3324      	adds	r3, #36	; 0x24
 8013f4e:	4619      	mov	r1, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f54:	461a      	mov	r2, r3
 8013f56:	88fb      	ldrh	r3, [r7, #6]
 8013f58:	f7f5 fc24 	bl	80097a4 <HAL_DMA_Start_IT>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d009      	beq.n	8013f76 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013f62:	68fb      	ldr	r3, [r7, #12]
 8013f64:	2210      	movs	r2, #16
 8013f66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	2220      	movs	r2, #32
 8013f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8013f72:	2301      	movs	r3, #1
 8013f74:	e051      	b.n	801401a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	691b      	ldr	r3, [r3, #16]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d018      	beq.n	8013fb0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f86:	e853 3f00 	ldrex	r3, [r3]
 8013f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f92:	657b      	str	r3, [r7, #84]	; 0x54
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	461a      	mov	r2, r3
 8013f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013fa4:	e841 2300 	strex	r3, r2, [r1]
 8013fa8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d1e6      	bne.n	8013f7e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fba:	e853 3f00 	ldrex	r3, [r3]
 8013fbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc2:	f043 0301 	orr.w	r3, r3, #1
 8013fc6:	653b      	str	r3, [r7, #80]	; 0x50
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	3308      	adds	r3, #8
 8013fce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013fd0:	637a      	str	r2, [r7, #52]	; 0x34
 8013fd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fd8:	e841 2300 	strex	r3, r2, [r1]
 8013fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d1e5      	bne.n	8013fb0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	3308      	adds	r3, #8
 8013fea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	e853 3f00 	ldrex	r3, [r3]
 8013ff2:	613b      	str	r3, [r7, #16]
   return(result);
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	3308      	adds	r3, #8
 8014002:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014004:	623a      	str	r2, [r7, #32]
 8014006:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014008:	69f9      	ldr	r1, [r7, #28]
 801400a:	6a3a      	ldr	r2, [r7, #32]
 801400c:	e841 2300 	strex	r3, r2, [r1]
 8014010:	61bb      	str	r3, [r7, #24]
   return(result);
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	2b00      	cmp	r3, #0
 8014016:	d1e5      	bne.n	8013fe4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8014018:	2300      	movs	r3, #0
}
 801401a:	4618      	mov	r0, r3
 801401c:	3758      	adds	r7, #88	; 0x58
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
 8014022:	bf00      	nop
 8014024:	08014233 	.word	0x08014233
 8014028:	0801435b 	.word	0x0801435b
 801402c:	08014399 	.word	0x08014399

08014030 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014030:	b480      	push	{r7}
 8014032:	b08f      	sub	sp, #60	; 0x3c
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801403e:	6a3b      	ldr	r3, [r7, #32]
 8014040:	e853 3f00 	ldrex	r3, [r3]
 8014044:	61fb      	str	r3, [r7, #28]
   return(result);
 8014046:	69fb      	ldr	r3, [r7, #28]
 8014048:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801404c:	637b      	str	r3, [r7, #52]	; 0x34
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	461a      	mov	r2, r3
 8014054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014058:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801405a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801405c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801405e:	e841 2300 	strex	r3, r2, [r1]
 8014062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014066:	2b00      	cmp	r3, #0
 8014068:	d1e6      	bne.n	8014038 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	3308      	adds	r3, #8
 8014070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	e853 3f00 	ldrex	r3, [r3]
 8014078:	60bb      	str	r3, [r7, #8]
   return(result);
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8014080:	633b      	str	r3, [r7, #48]	; 0x30
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	3308      	adds	r3, #8
 8014088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801408a:	61ba      	str	r2, [r7, #24]
 801408c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801408e:	6979      	ldr	r1, [r7, #20]
 8014090:	69ba      	ldr	r2, [r7, #24]
 8014092:	e841 2300 	strex	r3, r2, [r1]
 8014096:	613b      	str	r3, [r7, #16]
   return(result);
 8014098:	693b      	ldr	r3, [r7, #16]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d1e5      	bne.n	801406a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	2220      	movs	r2, #32
 80140a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80140a6:	bf00      	nop
 80140a8:	373c      	adds	r7, #60	; 0x3c
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
	...

080140b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b095      	sub	sp, #84	; 0x54
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140c4:	e853 3f00 	ldrex	r3, [r3]
 80140c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80140ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80140d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	461a      	mov	r2, r3
 80140d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140da:	643b      	str	r3, [r7, #64]	; 0x40
 80140dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80140e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80140e2:	e841 2300 	strex	r3, r2, [r1]
 80140e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80140e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d1e6      	bne.n	80140bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	3308      	adds	r3, #8
 80140f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140f6:	6a3b      	ldr	r3, [r7, #32]
 80140f8:	e853 3f00 	ldrex	r3, [r3]
 80140fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80140fe:	69fa      	ldr	r2, [r7, #28]
 8014100:	4b1e      	ldr	r3, [pc, #120]	; (801417c <UART_EndRxTransfer+0xc8>)
 8014102:	4013      	ands	r3, r2
 8014104:	64bb      	str	r3, [r7, #72]	; 0x48
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	3308      	adds	r3, #8
 801410c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801410e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014112:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014116:	e841 2300 	strex	r3, r2, [r1]
 801411a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411e:	2b00      	cmp	r3, #0
 8014120:	d1e5      	bne.n	80140ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014126:	2b01      	cmp	r3, #1
 8014128:	d118      	bne.n	801415c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	e853 3f00 	ldrex	r3, [r3]
 8014136:	60bb      	str	r3, [r7, #8]
   return(result);
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	f023 0310 	bic.w	r3, r3, #16
 801413e:	647b      	str	r3, [r7, #68]	; 0x44
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	461a      	mov	r2, r3
 8014146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014148:	61bb      	str	r3, [r7, #24]
 801414a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801414c:	6979      	ldr	r1, [r7, #20]
 801414e:	69ba      	ldr	r2, [r7, #24]
 8014150:	e841 2300 	strex	r3, r2, [r1]
 8014154:	613b      	str	r3, [r7, #16]
   return(result);
 8014156:	693b      	ldr	r3, [r7, #16]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d1e6      	bne.n	801412a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	2220      	movs	r2, #32
 8014160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	2200      	movs	r2, #0
 8014168:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	2200      	movs	r2, #0
 801416e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8014170:	bf00      	nop
 8014172:	3754      	adds	r7, #84	; 0x54
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	effffffe 	.word	0xeffffffe

08014180 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b090      	sub	sp, #64	; 0x40
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801418c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	69db      	ldr	r3, [r3, #28]
 8014192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014196:	d037      	beq.n	8014208 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8014198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801419a:	2200      	movs	r2, #0
 801419c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80141a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	3308      	adds	r3, #8
 80141a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141aa:	e853 3f00 	ldrex	r3, [r3]
 80141ae:	623b      	str	r3, [r7, #32]
   return(result);
 80141b0:	6a3b      	ldr	r3, [r7, #32]
 80141b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80141b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80141b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	3308      	adds	r3, #8
 80141be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141c0:	633a      	str	r2, [r7, #48]	; 0x30
 80141c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80141c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141c8:	e841 2300 	strex	r3, r2, [r1]
 80141cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80141ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d1e5      	bne.n	80141a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80141d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	e853 3f00 	ldrex	r3, [r3]
 80141e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141e8:	637b      	str	r3, [r7, #52]	; 0x34
 80141ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	461a      	mov	r2, r3
 80141f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f2:	61fb      	str	r3, [r7, #28]
 80141f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141f6:	69b9      	ldr	r1, [r7, #24]
 80141f8:	69fa      	ldr	r2, [r7, #28]
 80141fa:	e841 2300 	strex	r3, r2, [r1]
 80141fe:	617b      	str	r3, [r7, #20]
   return(result);
 8014200:	697b      	ldr	r3, [r7, #20]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d1e6      	bne.n	80141d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014206:	e002      	b.n	801420e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8014208:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801420a:	f7ef fead 	bl	8003f68 <HAL_UART_TxCpltCallback>
}
 801420e:	bf00      	nop
 8014210:	3740      	adds	r7, #64	; 0x40
 8014212:	46bd      	mov	sp, r7
 8014214:	bd80      	pop	{r7, pc}

08014216 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014216:	b580      	push	{r7, lr}
 8014218:	b084      	sub	sp, #16
 801421a:	af00      	add	r7, sp, #0
 801421c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014222:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8014224:	68f8      	ldr	r0, [r7, #12]
 8014226:	f7fe ff2d 	bl	8013084 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801422a:	bf00      	nop
 801422c:	3710      	adds	r7, #16
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}

08014232 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014232:	b580      	push	{r7, lr}
 8014234:	b09c      	sub	sp, #112	; 0x70
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801423e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	69db      	ldr	r3, [r3, #28]
 8014244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014248:	d071      	beq.n	801432e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801424c:	2200      	movs	r2, #0
 801424e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801425a:	e853 3f00 	ldrex	r3, [r3]
 801425e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014262:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014266:	66bb      	str	r3, [r7, #104]	; 0x68
 8014268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	461a      	mov	r2, r3
 801426e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014270:	65bb      	str	r3, [r7, #88]	; 0x58
 8014272:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014274:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014276:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014278:	e841 2300 	strex	r3, r2, [r1]
 801427c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801427e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014280:	2b00      	cmp	r3, #0
 8014282:	d1e6      	bne.n	8014252 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	3308      	adds	r3, #8
 801428a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801428e:	e853 3f00 	ldrex	r3, [r3]
 8014292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014296:	f023 0301 	bic.w	r3, r3, #1
 801429a:	667b      	str	r3, [r7, #100]	; 0x64
 801429c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	3308      	adds	r3, #8
 80142a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80142a4:	647a      	str	r2, [r7, #68]	; 0x44
 80142a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80142aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80142ac:	e841 2300 	strex	r3, r2, [r1]
 80142b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80142b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d1e5      	bne.n	8014284 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80142b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	3308      	adds	r3, #8
 80142be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c2:	e853 3f00 	ldrex	r3, [r3]
 80142c6:	623b      	str	r3, [r7, #32]
   return(result);
 80142c8:	6a3b      	ldr	r3, [r7, #32]
 80142ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80142ce:	663b      	str	r3, [r7, #96]	; 0x60
 80142d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	3308      	adds	r3, #8
 80142d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142d8:	633a      	str	r2, [r7, #48]	; 0x30
 80142da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142e0:	e841 2300 	strex	r3, r2, [r1]
 80142e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80142e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d1e5      	bne.n	80142b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80142ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142ee:	2220      	movs	r2, #32
 80142f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d118      	bne.n	801432e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80142fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	e853 3f00 	ldrex	r3, [r3]
 8014308:	60fb      	str	r3, [r7, #12]
   return(result);
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	f023 0310 	bic.w	r3, r3, #16
 8014310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	461a      	mov	r2, r3
 8014318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801431a:	61fb      	str	r3, [r7, #28]
 801431c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801431e:	69b9      	ldr	r1, [r7, #24]
 8014320:	69fa      	ldr	r2, [r7, #28]
 8014322:	e841 2300 	strex	r3, r2, [r1]
 8014326:	617b      	str	r3, [r7, #20]
   return(result);
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d1e6      	bne.n	80142fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014330:	2200      	movs	r2, #0
 8014332:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014338:	2b01      	cmp	r3, #1
 801433a:	d107      	bne.n	801434c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801433c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801433e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014342:	4619      	mov	r1, r3
 8014344:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8014346:	f7ef feab 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801434a:	e002      	b.n	8014352 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801434c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801434e:	f7ef fe23 	bl	8003f98 <HAL_UART_RxCpltCallback>
}
 8014352:	bf00      	nop
 8014354:	3770      	adds	r7, #112	; 0x70
 8014356:	46bd      	mov	sp, r7
 8014358:	bd80      	pop	{r7, pc}

0801435a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801435a:	b580      	push	{r7, lr}
 801435c:	b084      	sub	sp, #16
 801435e:	af00      	add	r7, sp, #0
 8014360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014366:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	2201      	movs	r2, #1
 801436c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801436e:	68fb      	ldr	r3, [r7, #12]
 8014370:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014372:	2b01      	cmp	r3, #1
 8014374:	d109      	bne.n	801438a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801437c:	085b      	lsrs	r3, r3, #1
 801437e:	b29b      	uxth	r3, r3
 8014380:	4619      	mov	r1, r3
 8014382:	68f8      	ldr	r0, [r7, #12]
 8014384:	f7ef fe8c 	bl	80040a0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014388:	e002      	b.n	8014390 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801438a:	68f8      	ldr	r0, [r7, #12]
 801438c:	f7fe fe84 	bl	8013098 <HAL_UART_RxHalfCpltCallback>
}
 8014390:	bf00      	nop
 8014392:	3710      	adds	r7, #16
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80143a6:	697b      	ldr	r3, [r7, #20]
 80143a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80143ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80143ae:	697b      	ldr	r3, [r7, #20]
 80143b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	689b      	ldr	r3, [r3, #8]
 80143bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80143c0:	2b80      	cmp	r3, #128	; 0x80
 80143c2:	d109      	bne.n	80143d8 <UART_DMAError+0x40>
 80143c4:	693b      	ldr	r3, [r7, #16]
 80143c6:	2b21      	cmp	r3, #33	; 0x21
 80143c8:	d106      	bne.n	80143d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	2200      	movs	r2, #0
 80143ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80143d2:	6978      	ldr	r0, [r7, #20]
 80143d4:	f7ff fe2c 	bl	8014030 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	689b      	ldr	r3, [r3, #8]
 80143de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143e2:	2b40      	cmp	r3, #64	; 0x40
 80143e4:	d109      	bne.n	80143fa <UART_DMAError+0x62>
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2b22      	cmp	r3, #34	; 0x22
 80143ea:	d106      	bne.n	80143fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	2200      	movs	r2, #0
 80143f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80143f4:	6978      	ldr	r0, [r7, #20]
 80143f6:	f7ff fe5d 	bl	80140b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014400:	f043 0210 	orr.w	r2, r3, #16
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801440a:	6978      	ldr	r0, [r7, #20]
 801440c:	f7ef ff50 	bl	80042b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014410:	bf00      	nop
 8014412:	3718      	adds	r7, #24
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	2200      	movs	r2, #0
 801442a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	2200      	movs	r2, #0
 8014432:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014436:	68f8      	ldr	r0, [r7, #12]
 8014438:	f7ef ff3a 	bl	80042b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801443c:	bf00      	nop
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b088      	sub	sp, #32
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	e853 3f00 	ldrex	r3, [r3]
 8014458:	60bb      	str	r3, [r7, #8]
   return(result);
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014460:	61fb      	str	r3, [r7, #28]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	461a      	mov	r2, r3
 8014468:	69fb      	ldr	r3, [r7, #28]
 801446a:	61bb      	str	r3, [r7, #24]
 801446c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801446e:	6979      	ldr	r1, [r7, #20]
 8014470:	69ba      	ldr	r2, [r7, #24]
 8014472:	e841 2300 	strex	r3, r2, [r1]
 8014476:	613b      	str	r3, [r7, #16]
   return(result);
 8014478:	693b      	ldr	r3, [r7, #16]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1e6      	bne.n	801444c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	2220      	movs	r2, #32
 8014482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2200      	movs	r2, #0
 801448a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7ef fd6b 	bl	8003f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014492:	bf00      	nop
 8014494:	3720      	adds	r7, #32
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}

0801449a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801449a:	b480      	push	{r7}
 801449c:	b083      	sub	sp, #12
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80144a2:	bf00      	nop
 80144a4:	370c      	adds	r7, #12
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80144ae:	b480      	push	{r7}
 80144b0:	b083      	sub	sp, #12
 80144b2:	af00      	add	r7, sp, #0
 80144b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80144b6:	bf00      	nop
 80144b8:	370c      	adds	r7, #12
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr

080144c2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80144c2:	b480      	push	{r7}
 80144c4:	b083      	sub	sp, #12
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80144ca:	bf00      	nop
 80144cc:	370c      	adds	r7, #12
 80144ce:	46bd      	mov	sp, r7
 80144d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d4:	4770      	bx	lr

080144d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80144d6:	b480      	push	{r7}
 80144d8:	b085      	sub	sp, #20
 80144da:	af00      	add	r7, sp, #0
 80144dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80144e4:	2b01      	cmp	r3, #1
 80144e6:	d101      	bne.n	80144ec <HAL_UARTEx_DisableFifoMode+0x16>
 80144e8:	2302      	movs	r3, #2
 80144ea:	e027      	b.n	801453c <HAL_UARTEx_DisableFifoMode+0x66>
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2201      	movs	r2, #1
 80144f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	2224      	movs	r2, #36	; 0x24
 80144f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	681a      	ldr	r2, [r3, #0]
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	f022 0201 	bic.w	r2, r2, #1
 8014512:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801451a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2200      	movs	r2, #0
 8014520:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	68fa      	ldr	r2, [r7, #12]
 8014528:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2220      	movs	r2, #32
 801452e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	2200      	movs	r2, #0
 8014536:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801453a:	2300      	movs	r3, #0
}
 801453c:	4618      	mov	r0, r3
 801453e:	3714      	adds	r7, #20
 8014540:	46bd      	mov	sp, r7
 8014542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014546:	4770      	bx	lr

08014548 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b084      	sub	sp, #16
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
 8014550:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014558:	2b01      	cmp	r3, #1
 801455a:	d101      	bne.n	8014560 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801455c:	2302      	movs	r3, #2
 801455e:	e02d      	b.n	80145bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2201      	movs	r2, #1
 8014564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2224      	movs	r2, #36	; 0x24
 801456c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	681a      	ldr	r2, [r3, #0]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f022 0201 	bic.w	r2, r2, #1
 8014586:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	689b      	ldr	r3, [r3, #8]
 801458e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	681b      	ldr	r3, [r3, #0]
 8014596:	683a      	ldr	r2, [r7, #0]
 8014598:	430a      	orrs	r2, r1
 801459a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801459c:	6878      	ldr	r0, [r7, #4]
 801459e:	f000 f8a3 	bl	80146e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	68fa      	ldr	r2, [r7, #12]
 80145a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2220      	movs	r2, #32
 80145ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	2200      	movs	r2, #0
 80145b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80145ba:	2300      	movs	r3, #0
}
 80145bc:	4618      	mov	r0, r3
 80145be:	3710      	adds	r7, #16
 80145c0:	46bd      	mov	sp, r7
 80145c2:	bd80      	pop	{r7, pc}

080145c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b084      	sub	sp, #16
 80145c8:	af00      	add	r7, sp, #0
 80145ca:	6078      	str	r0, [r7, #4]
 80145cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80145d4:	2b01      	cmp	r3, #1
 80145d6:	d101      	bne.n	80145dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80145d8:	2302      	movs	r3, #2
 80145da:	e02d      	b.n	8014638 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2201      	movs	r2, #1
 80145e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2224      	movs	r2, #36	; 0x24
 80145e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	f022 0201 	bic.w	r2, r2, #1
 8014602:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	689b      	ldr	r3, [r3, #8]
 801460a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	683a      	ldr	r2, [r7, #0]
 8014614:	430a      	orrs	r2, r1
 8014616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f000 f865 	bl	80146e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	68fa      	ldr	r2, [r7, #12]
 8014624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	2220      	movs	r2, #32
 801462a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	2200      	movs	r2, #0
 8014632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014636:	2300      	movs	r3, #0
}
 8014638:	4618      	mov	r0, r3
 801463a:	3710      	adds	r7, #16
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}

08014640 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014640:	b580      	push	{r7, lr}
 8014642:	b08c      	sub	sp, #48	; 0x30
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	4613      	mov	r3, r2
 801464c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014654:	2b20      	cmp	r3, #32
 8014656:	d142      	bne.n	80146de <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014658:	68bb      	ldr	r3, [r7, #8]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d002      	beq.n	8014664 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 801465e:	88fb      	ldrh	r3, [r7, #6]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d101      	bne.n	8014668 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8014664:	2301      	movs	r3, #1
 8014666:	e03b      	b.n	80146e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2201      	movs	r2, #1
 801466c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	2200      	movs	r2, #0
 8014672:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8014674:	88fb      	ldrh	r3, [r7, #6]
 8014676:	461a      	mov	r2, r3
 8014678:	68b9      	ldr	r1, [r7, #8]
 801467a:	68f8      	ldr	r0, [r7, #12]
 801467c:	f7ff fc32 	bl	8013ee4 <UART_Start_Receive_DMA>
 8014680:	4603      	mov	r3, r0
 8014682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8014686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801468a:	2b00      	cmp	r3, #0
 801468c:	d124      	bne.n	80146d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014692:	2b01      	cmp	r3, #1
 8014694:	d11d      	bne.n	80146d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2210      	movs	r2, #16
 801469c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	e853 3f00 	ldrex	r3, [r3]
 80146aa:	617b      	str	r3, [r7, #20]
   return(result);
 80146ac:	697b      	ldr	r3, [r7, #20]
 80146ae:	f043 0310 	orr.w	r3, r3, #16
 80146b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	461a      	mov	r2, r3
 80146ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146bc:	627b      	str	r3, [r7, #36]	; 0x24
 80146be:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80146c0:	6a39      	ldr	r1, [r7, #32]
 80146c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80146c4:	e841 2300 	strex	r3, r2, [r1]
 80146c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80146ca:	69fb      	ldr	r3, [r7, #28]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1e6      	bne.n	801469e <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80146d0:	e002      	b.n	80146d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80146d2:	2301      	movs	r3, #1
 80146d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80146d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146dc:	e000      	b.n	80146e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80146de:	2302      	movs	r3, #2
  }
}
 80146e0:	4618      	mov	r0, r3
 80146e2:	3730      	adds	r7, #48	; 0x30
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80146e8:	b480      	push	{r7}
 80146ea:	b085      	sub	sp, #20
 80146ec:	af00      	add	r7, sp, #0
 80146ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d108      	bne.n	801470a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2201      	movs	r2, #1
 80146fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	2201      	movs	r2, #1
 8014704:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014708:	e031      	b.n	801476e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801470a:	2310      	movs	r3, #16
 801470c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801470e:	2310      	movs	r3, #16
 8014710:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	689b      	ldr	r3, [r3, #8]
 8014718:	0e5b      	lsrs	r3, r3, #25
 801471a:	b2db      	uxtb	r3, r3
 801471c:	f003 0307 	and.w	r3, r3, #7
 8014720:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	689b      	ldr	r3, [r3, #8]
 8014728:	0f5b      	lsrs	r3, r3, #29
 801472a:	b2db      	uxtb	r3, r3
 801472c:	f003 0307 	and.w	r3, r3, #7
 8014730:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014732:	7bbb      	ldrb	r3, [r7, #14]
 8014734:	7b3a      	ldrb	r2, [r7, #12]
 8014736:	4911      	ldr	r1, [pc, #68]	; (801477c <UARTEx_SetNbDataToProcess+0x94>)
 8014738:	5c8a      	ldrb	r2, [r1, r2]
 801473a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801473e:	7b3a      	ldrb	r2, [r7, #12]
 8014740:	490f      	ldr	r1, [pc, #60]	; (8014780 <UARTEx_SetNbDataToProcess+0x98>)
 8014742:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014744:	fb93 f3f2 	sdiv	r3, r3, r2
 8014748:	b29a      	uxth	r2, r3
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014750:	7bfb      	ldrb	r3, [r7, #15]
 8014752:	7b7a      	ldrb	r2, [r7, #13]
 8014754:	4909      	ldr	r1, [pc, #36]	; (801477c <UARTEx_SetNbDataToProcess+0x94>)
 8014756:	5c8a      	ldrb	r2, [r1, r2]
 8014758:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801475c:	7b7a      	ldrb	r2, [r7, #13]
 801475e:	4908      	ldr	r1, [pc, #32]	; (8014780 <UARTEx_SetNbDataToProcess+0x98>)
 8014760:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014762:	fb93 f3f2 	sdiv	r3, r3, r2
 8014766:	b29a      	uxth	r2, r3
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801476e:	bf00      	nop
 8014770:	3714      	adds	r7, #20
 8014772:	46bd      	mov	sp, r7
 8014774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014778:	4770      	bx	lr
 801477a:	bf00      	nop
 801477c:	080176a8 	.word	0x080176a8
 8014780:	080176b0 	.word	0x080176b0

08014784 <_Znaj>:
 8014784:	f000 b800 	b.w	8014788 <_Znwj>

08014788 <_Znwj>:
 8014788:	2801      	cmp	r0, #1
 801478a:	bf38      	it	cc
 801478c:	2001      	movcc	r0, #1
 801478e:	b510      	push	{r4, lr}
 8014790:	4604      	mov	r4, r0
 8014792:	4620      	mov	r0, r4
 8014794:	f000 f81a 	bl	80147cc <malloc>
 8014798:	b100      	cbz	r0, 801479c <_Znwj+0x14>
 801479a:	bd10      	pop	{r4, pc}
 801479c:	f000 f806 	bl	80147ac <_ZSt15get_new_handlerv>
 80147a0:	b908      	cbnz	r0, 80147a6 <_Znwj+0x1e>
 80147a2:	f000 f80b 	bl	80147bc <abort>
 80147a6:	4780      	blx	r0
 80147a8:	e7f3      	b.n	8014792 <_Znwj+0xa>
	...

080147ac <_ZSt15get_new_handlerv>:
 80147ac:	4b02      	ldr	r3, [pc, #8]	; (80147b8 <_ZSt15get_new_handlerv+0xc>)
 80147ae:	6818      	ldr	r0, [r3, #0]
 80147b0:	f3bf 8f5b 	dmb	ish
 80147b4:	4770      	bx	lr
 80147b6:	bf00      	nop
 80147b8:	2400464c 	.word	0x2400464c

080147bc <abort>:
 80147bc:	b508      	push	{r3, lr}
 80147be:	2006      	movs	r0, #6
 80147c0:	f000 ff64 	bl	801568c <raise>
 80147c4:	2001      	movs	r0, #1
 80147c6:	f7f2 fbb3 	bl	8006f30 <_exit>
	...

080147cc <malloc>:
 80147cc:	4b02      	ldr	r3, [pc, #8]	; (80147d8 <malloc+0xc>)
 80147ce:	4601      	mov	r1, r0
 80147d0:	6818      	ldr	r0, [r3, #0]
 80147d2:	f000 b823 	b.w	801481c <_malloc_r>
 80147d6:	bf00      	nop
 80147d8:	240000ac 	.word	0x240000ac

080147dc <sbrk_aligned>:
 80147dc:	b570      	push	{r4, r5, r6, lr}
 80147de:	4e0e      	ldr	r6, [pc, #56]	; (8014818 <sbrk_aligned+0x3c>)
 80147e0:	460c      	mov	r4, r1
 80147e2:	6831      	ldr	r1, [r6, #0]
 80147e4:	4605      	mov	r5, r0
 80147e6:	b911      	cbnz	r1, 80147ee <sbrk_aligned+0x12>
 80147e8:	f000 ffa4 	bl	8015734 <_sbrk_r>
 80147ec:	6030      	str	r0, [r6, #0]
 80147ee:	4621      	mov	r1, r4
 80147f0:	4628      	mov	r0, r5
 80147f2:	f000 ff9f 	bl	8015734 <_sbrk_r>
 80147f6:	1c43      	adds	r3, r0, #1
 80147f8:	d00a      	beq.n	8014810 <sbrk_aligned+0x34>
 80147fa:	1cc4      	adds	r4, r0, #3
 80147fc:	f024 0403 	bic.w	r4, r4, #3
 8014800:	42a0      	cmp	r0, r4
 8014802:	d007      	beq.n	8014814 <sbrk_aligned+0x38>
 8014804:	1a21      	subs	r1, r4, r0
 8014806:	4628      	mov	r0, r5
 8014808:	f000 ff94 	bl	8015734 <_sbrk_r>
 801480c:	3001      	adds	r0, #1
 801480e:	d101      	bne.n	8014814 <sbrk_aligned+0x38>
 8014810:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014814:	4620      	mov	r0, r4
 8014816:	bd70      	pop	{r4, r5, r6, pc}
 8014818:	24004654 	.word	0x24004654

0801481c <_malloc_r>:
 801481c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014820:	1ccd      	adds	r5, r1, #3
 8014822:	f025 0503 	bic.w	r5, r5, #3
 8014826:	3508      	adds	r5, #8
 8014828:	2d0c      	cmp	r5, #12
 801482a:	bf38      	it	cc
 801482c:	250c      	movcc	r5, #12
 801482e:	2d00      	cmp	r5, #0
 8014830:	4607      	mov	r7, r0
 8014832:	db01      	blt.n	8014838 <_malloc_r+0x1c>
 8014834:	42a9      	cmp	r1, r5
 8014836:	d905      	bls.n	8014844 <_malloc_r+0x28>
 8014838:	230c      	movs	r3, #12
 801483a:	603b      	str	r3, [r7, #0]
 801483c:	2600      	movs	r6, #0
 801483e:	4630      	mov	r0, r6
 8014840:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014844:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014918 <_malloc_r+0xfc>
 8014848:	f000 f868 	bl	801491c <__malloc_lock>
 801484c:	f8d8 3000 	ldr.w	r3, [r8]
 8014850:	461c      	mov	r4, r3
 8014852:	bb5c      	cbnz	r4, 80148ac <_malloc_r+0x90>
 8014854:	4629      	mov	r1, r5
 8014856:	4638      	mov	r0, r7
 8014858:	f7ff ffc0 	bl	80147dc <sbrk_aligned>
 801485c:	1c43      	adds	r3, r0, #1
 801485e:	4604      	mov	r4, r0
 8014860:	d155      	bne.n	801490e <_malloc_r+0xf2>
 8014862:	f8d8 4000 	ldr.w	r4, [r8]
 8014866:	4626      	mov	r6, r4
 8014868:	2e00      	cmp	r6, #0
 801486a:	d145      	bne.n	80148f8 <_malloc_r+0xdc>
 801486c:	2c00      	cmp	r4, #0
 801486e:	d048      	beq.n	8014902 <_malloc_r+0xe6>
 8014870:	6823      	ldr	r3, [r4, #0]
 8014872:	4631      	mov	r1, r6
 8014874:	4638      	mov	r0, r7
 8014876:	eb04 0903 	add.w	r9, r4, r3
 801487a:	f000 ff5b 	bl	8015734 <_sbrk_r>
 801487e:	4581      	cmp	r9, r0
 8014880:	d13f      	bne.n	8014902 <_malloc_r+0xe6>
 8014882:	6821      	ldr	r1, [r4, #0]
 8014884:	1a6d      	subs	r5, r5, r1
 8014886:	4629      	mov	r1, r5
 8014888:	4638      	mov	r0, r7
 801488a:	f7ff ffa7 	bl	80147dc <sbrk_aligned>
 801488e:	3001      	adds	r0, #1
 8014890:	d037      	beq.n	8014902 <_malloc_r+0xe6>
 8014892:	6823      	ldr	r3, [r4, #0]
 8014894:	442b      	add	r3, r5
 8014896:	6023      	str	r3, [r4, #0]
 8014898:	f8d8 3000 	ldr.w	r3, [r8]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d038      	beq.n	8014912 <_malloc_r+0xf6>
 80148a0:	685a      	ldr	r2, [r3, #4]
 80148a2:	42a2      	cmp	r2, r4
 80148a4:	d12b      	bne.n	80148fe <_malloc_r+0xe2>
 80148a6:	2200      	movs	r2, #0
 80148a8:	605a      	str	r2, [r3, #4]
 80148aa:	e00f      	b.n	80148cc <_malloc_r+0xb0>
 80148ac:	6822      	ldr	r2, [r4, #0]
 80148ae:	1b52      	subs	r2, r2, r5
 80148b0:	d41f      	bmi.n	80148f2 <_malloc_r+0xd6>
 80148b2:	2a0b      	cmp	r2, #11
 80148b4:	d917      	bls.n	80148e6 <_malloc_r+0xca>
 80148b6:	1961      	adds	r1, r4, r5
 80148b8:	42a3      	cmp	r3, r4
 80148ba:	6025      	str	r5, [r4, #0]
 80148bc:	bf18      	it	ne
 80148be:	6059      	strne	r1, [r3, #4]
 80148c0:	6863      	ldr	r3, [r4, #4]
 80148c2:	bf08      	it	eq
 80148c4:	f8c8 1000 	streq.w	r1, [r8]
 80148c8:	5162      	str	r2, [r4, r5]
 80148ca:	604b      	str	r3, [r1, #4]
 80148cc:	4638      	mov	r0, r7
 80148ce:	f104 060b 	add.w	r6, r4, #11
 80148d2:	f000 f829 	bl	8014928 <__malloc_unlock>
 80148d6:	f026 0607 	bic.w	r6, r6, #7
 80148da:	1d23      	adds	r3, r4, #4
 80148dc:	1af2      	subs	r2, r6, r3
 80148de:	d0ae      	beq.n	801483e <_malloc_r+0x22>
 80148e0:	1b9b      	subs	r3, r3, r6
 80148e2:	50a3      	str	r3, [r4, r2]
 80148e4:	e7ab      	b.n	801483e <_malloc_r+0x22>
 80148e6:	42a3      	cmp	r3, r4
 80148e8:	6862      	ldr	r2, [r4, #4]
 80148ea:	d1dd      	bne.n	80148a8 <_malloc_r+0x8c>
 80148ec:	f8c8 2000 	str.w	r2, [r8]
 80148f0:	e7ec      	b.n	80148cc <_malloc_r+0xb0>
 80148f2:	4623      	mov	r3, r4
 80148f4:	6864      	ldr	r4, [r4, #4]
 80148f6:	e7ac      	b.n	8014852 <_malloc_r+0x36>
 80148f8:	4634      	mov	r4, r6
 80148fa:	6876      	ldr	r6, [r6, #4]
 80148fc:	e7b4      	b.n	8014868 <_malloc_r+0x4c>
 80148fe:	4613      	mov	r3, r2
 8014900:	e7cc      	b.n	801489c <_malloc_r+0x80>
 8014902:	230c      	movs	r3, #12
 8014904:	603b      	str	r3, [r7, #0]
 8014906:	4638      	mov	r0, r7
 8014908:	f000 f80e 	bl	8014928 <__malloc_unlock>
 801490c:	e797      	b.n	801483e <_malloc_r+0x22>
 801490e:	6025      	str	r5, [r4, #0]
 8014910:	e7dc      	b.n	80148cc <_malloc_r+0xb0>
 8014912:	605b      	str	r3, [r3, #4]
 8014914:	deff      	udf	#255	; 0xff
 8014916:	bf00      	nop
 8014918:	24004650 	.word	0x24004650

0801491c <__malloc_lock>:
 801491c:	4801      	ldr	r0, [pc, #4]	; (8014924 <__malloc_lock+0x8>)
 801491e:	f000 bf56 	b.w	80157ce <__retarget_lock_acquire_recursive>
 8014922:	bf00      	nop
 8014924:	24004798 	.word	0x24004798

08014928 <__malloc_unlock>:
 8014928:	4801      	ldr	r0, [pc, #4]	; (8014930 <__malloc_unlock+0x8>)
 801492a:	f000 bf51 	b.w	80157d0 <__retarget_lock_release_recursive>
 801492e:	bf00      	nop
 8014930:	24004798 	.word	0x24004798

08014934 <realloc>:
 8014934:	4b02      	ldr	r3, [pc, #8]	; (8014940 <realloc+0xc>)
 8014936:	460a      	mov	r2, r1
 8014938:	4601      	mov	r1, r0
 801493a:	6818      	ldr	r0, [r3, #0]
 801493c:	f000 b802 	b.w	8014944 <_realloc_r>
 8014940:	240000ac 	.word	0x240000ac

08014944 <_realloc_r>:
 8014944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014948:	4680      	mov	r8, r0
 801494a:	4614      	mov	r4, r2
 801494c:	460e      	mov	r6, r1
 801494e:	b921      	cbnz	r1, 801495a <_realloc_r+0x16>
 8014950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014954:	4611      	mov	r1, r2
 8014956:	f7ff bf61 	b.w	801481c <_malloc_r>
 801495a:	b92a      	cbnz	r2, 8014968 <_realloc_r+0x24>
 801495c:	f001 fd3c 	bl	80163d8 <_free_r>
 8014960:	4625      	mov	r5, r4
 8014962:	4628      	mov	r0, r5
 8014964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014968:	f002 f8fe 	bl	8016b68 <_malloc_usable_size_r>
 801496c:	4284      	cmp	r4, r0
 801496e:	4607      	mov	r7, r0
 8014970:	d802      	bhi.n	8014978 <_realloc_r+0x34>
 8014972:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014976:	d812      	bhi.n	801499e <_realloc_r+0x5a>
 8014978:	4621      	mov	r1, r4
 801497a:	4640      	mov	r0, r8
 801497c:	f7ff ff4e 	bl	801481c <_malloc_r>
 8014980:	4605      	mov	r5, r0
 8014982:	2800      	cmp	r0, #0
 8014984:	d0ed      	beq.n	8014962 <_realloc_r+0x1e>
 8014986:	42bc      	cmp	r4, r7
 8014988:	4622      	mov	r2, r4
 801498a:	4631      	mov	r1, r6
 801498c:	bf28      	it	cs
 801498e:	463a      	movcs	r2, r7
 8014990:	f000 ff1f 	bl	80157d2 <memcpy>
 8014994:	4631      	mov	r1, r6
 8014996:	4640      	mov	r0, r8
 8014998:	f001 fd1e 	bl	80163d8 <_free_r>
 801499c:	e7e1      	b.n	8014962 <_realloc_r+0x1e>
 801499e:	4635      	mov	r5, r6
 80149a0:	e7df      	b.n	8014962 <_realloc_r+0x1e>

080149a2 <__cvt>:
 80149a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149a4:	ed2d 8b02 	vpush	{d8}
 80149a8:	eeb0 8b40 	vmov.f64	d8, d0
 80149ac:	b085      	sub	sp, #20
 80149ae:	4617      	mov	r7, r2
 80149b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80149b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80149b4:	ee18 2a90 	vmov	r2, s17
 80149b8:	f025 0520 	bic.w	r5, r5, #32
 80149bc:	2a00      	cmp	r2, #0
 80149be:	bfb6      	itet	lt
 80149c0:	222d      	movlt	r2, #45	; 0x2d
 80149c2:	2200      	movge	r2, #0
 80149c4:	eeb1 8b40 	vneglt.f64	d8, d0
 80149c8:	2d46      	cmp	r5, #70	; 0x46
 80149ca:	460c      	mov	r4, r1
 80149cc:	701a      	strb	r2, [r3, #0]
 80149ce:	d004      	beq.n	80149da <__cvt+0x38>
 80149d0:	2d45      	cmp	r5, #69	; 0x45
 80149d2:	d100      	bne.n	80149d6 <__cvt+0x34>
 80149d4:	3401      	adds	r4, #1
 80149d6:	2102      	movs	r1, #2
 80149d8:	e000      	b.n	80149dc <__cvt+0x3a>
 80149da:	2103      	movs	r1, #3
 80149dc:	ab03      	add	r3, sp, #12
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	ab02      	add	r3, sp, #8
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	4622      	mov	r2, r4
 80149e6:	4633      	mov	r3, r6
 80149e8:	eeb0 0b48 	vmov.f64	d0, d8
 80149ec:	f000 ff88 	bl	8015900 <_dtoa_r>
 80149f0:	2d47      	cmp	r5, #71	; 0x47
 80149f2:	d101      	bne.n	80149f8 <__cvt+0x56>
 80149f4:	07fb      	lsls	r3, r7, #31
 80149f6:	d51a      	bpl.n	8014a2e <__cvt+0x8c>
 80149f8:	2d46      	cmp	r5, #70	; 0x46
 80149fa:	eb00 0204 	add.w	r2, r0, r4
 80149fe:	d10c      	bne.n	8014a1a <__cvt+0x78>
 8014a00:	7803      	ldrb	r3, [r0, #0]
 8014a02:	2b30      	cmp	r3, #48	; 0x30
 8014a04:	d107      	bne.n	8014a16 <__cvt+0x74>
 8014a06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0e:	bf1c      	itt	ne
 8014a10:	f1c4 0401 	rsbne	r4, r4, #1
 8014a14:	6034      	strne	r4, [r6, #0]
 8014a16:	6833      	ldr	r3, [r6, #0]
 8014a18:	441a      	add	r2, r3
 8014a1a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a22:	bf08      	it	eq
 8014a24:	9203      	streq	r2, [sp, #12]
 8014a26:	2130      	movs	r1, #48	; 0x30
 8014a28:	9b03      	ldr	r3, [sp, #12]
 8014a2a:	4293      	cmp	r3, r2
 8014a2c:	d307      	bcc.n	8014a3e <__cvt+0x9c>
 8014a2e:	9b03      	ldr	r3, [sp, #12]
 8014a30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a32:	1a1b      	subs	r3, r3, r0
 8014a34:	6013      	str	r3, [r2, #0]
 8014a36:	b005      	add	sp, #20
 8014a38:	ecbd 8b02 	vpop	{d8}
 8014a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a3e:	1c5c      	adds	r4, r3, #1
 8014a40:	9403      	str	r4, [sp, #12]
 8014a42:	7019      	strb	r1, [r3, #0]
 8014a44:	e7f0      	b.n	8014a28 <__cvt+0x86>

08014a46 <__exponent>:
 8014a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a48:	4603      	mov	r3, r0
 8014a4a:	2900      	cmp	r1, #0
 8014a4c:	bfb8      	it	lt
 8014a4e:	4249      	neglt	r1, r1
 8014a50:	f803 2b02 	strb.w	r2, [r3], #2
 8014a54:	bfb4      	ite	lt
 8014a56:	222d      	movlt	r2, #45	; 0x2d
 8014a58:	222b      	movge	r2, #43	; 0x2b
 8014a5a:	2909      	cmp	r1, #9
 8014a5c:	7042      	strb	r2, [r0, #1]
 8014a5e:	dd2a      	ble.n	8014ab6 <__exponent+0x70>
 8014a60:	f10d 0207 	add.w	r2, sp, #7
 8014a64:	4617      	mov	r7, r2
 8014a66:	260a      	movs	r6, #10
 8014a68:	4694      	mov	ip, r2
 8014a6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8014a6e:	fb06 1415 	mls	r4, r6, r5, r1
 8014a72:	3430      	adds	r4, #48	; 0x30
 8014a74:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014a78:	460c      	mov	r4, r1
 8014a7a:	2c63      	cmp	r4, #99	; 0x63
 8014a7c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014a80:	4629      	mov	r1, r5
 8014a82:	dcf1      	bgt.n	8014a68 <__exponent+0x22>
 8014a84:	3130      	adds	r1, #48	; 0x30
 8014a86:	f1ac 0402 	sub.w	r4, ip, #2
 8014a8a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a8e:	1c41      	adds	r1, r0, #1
 8014a90:	4622      	mov	r2, r4
 8014a92:	42ba      	cmp	r2, r7
 8014a94:	d30a      	bcc.n	8014aac <__exponent+0x66>
 8014a96:	f10d 0209 	add.w	r2, sp, #9
 8014a9a:	eba2 020c 	sub.w	r2, r2, ip
 8014a9e:	42bc      	cmp	r4, r7
 8014aa0:	bf88      	it	hi
 8014aa2:	2200      	movhi	r2, #0
 8014aa4:	4413      	add	r3, r2
 8014aa6:	1a18      	subs	r0, r3, r0
 8014aa8:	b003      	add	sp, #12
 8014aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aac:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014ab0:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014ab4:	e7ed      	b.n	8014a92 <__exponent+0x4c>
 8014ab6:	2330      	movs	r3, #48	; 0x30
 8014ab8:	3130      	adds	r1, #48	; 0x30
 8014aba:	7083      	strb	r3, [r0, #2]
 8014abc:	70c1      	strb	r1, [r0, #3]
 8014abe:	1d03      	adds	r3, r0, #4
 8014ac0:	e7f1      	b.n	8014aa6 <__exponent+0x60>
 8014ac2:	0000      	movs	r0, r0
 8014ac4:	0000      	movs	r0, r0
	...

08014ac8 <_printf_float>:
 8014ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014acc:	b08b      	sub	sp, #44	; 0x2c
 8014ace:	460c      	mov	r4, r1
 8014ad0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014ad4:	4616      	mov	r6, r2
 8014ad6:	461f      	mov	r7, r3
 8014ad8:	4605      	mov	r5, r0
 8014ada:	f000 fddf 	bl	801569c <_localeconv_r>
 8014ade:	f8d0 b000 	ldr.w	fp, [r0]
 8014ae2:	4658      	mov	r0, fp
 8014ae4:	f7eb fc4c 	bl	8000380 <strlen>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	9308      	str	r3, [sp, #32]
 8014aec:	f8d8 3000 	ldr.w	r3, [r8]
 8014af0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014af4:	6822      	ldr	r2, [r4, #0]
 8014af6:	3307      	adds	r3, #7
 8014af8:	f023 0307 	bic.w	r3, r3, #7
 8014afc:	f103 0108 	add.w	r1, r3, #8
 8014b00:	f8c8 1000 	str.w	r1, [r8]
 8014b04:	ed93 0b00 	vldr	d0, [r3]
 8014b08:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014d68 <_printf_float+0x2a0>
 8014b0c:	eeb0 7bc0 	vabs.f64	d7, d0
 8014b10:	eeb4 7b46 	vcmp.f64	d7, d6
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8014b1c:	4682      	mov	sl, r0
 8014b1e:	dd24      	ble.n	8014b6a <_printf_float+0xa2>
 8014b20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b28:	d502      	bpl.n	8014b30 <_printf_float+0x68>
 8014b2a:	232d      	movs	r3, #45	; 0x2d
 8014b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b30:	498f      	ldr	r1, [pc, #572]	; (8014d70 <_printf_float+0x2a8>)
 8014b32:	4b90      	ldr	r3, [pc, #576]	; (8014d74 <_printf_float+0x2ac>)
 8014b34:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014b38:	bf94      	ite	ls
 8014b3a:	4688      	movls	r8, r1
 8014b3c:	4698      	movhi	r8, r3
 8014b3e:	2303      	movs	r3, #3
 8014b40:	6123      	str	r3, [r4, #16]
 8014b42:	f022 0204 	bic.w	r2, r2, #4
 8014b46:	2300      	movs	r3, #0
 8014b48:	6022      	str	r2, [r4, #0]
 8014b4a:	9304      	str	r3, [sp, #16]
 8014b4c:	9700      	str	r7, [sp, #0]
 8014b4e:	4633      	mov	r3, r6
 8014b50:	aa09      	add	r2, sp, #36	; 0x24
 8014b52:	4621      	mov	r1, r4
 8014b54:	4628      	mov	r0, r5
 8014b56:	f000 f9d1 	bl	8014efc <_printf_common>
 8014b5a:	3001      	adds	r0, #1
 8014b5c:	f040 808a 	bne.w	8014c74 <_printf_float+0x1ac>
 8014b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b64:	b00b      	add	sp, #44	; 0x2c
 8014b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8014b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b72:	d709      	bvc.n	8014b88 <_printf_float+0xc0>
 8014b74:	ee10 3a90 	vmov	r3, s1
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	bfbc      	itt	lt
 8014b7c:	232d      	movlt	r3, #45	; 0x2d
 8014b7e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014b82:	497d      	ldr	r1, [pc, #500]	; (8014d78 <_printf_float+0x2b0>)
 8014b84:	4b7d      	ldr	r3, [pc, #500]	; (8014d7c <_printf_float+0x2b4>)
 8014b86:	e7d5      	b.n	8014b34 <_printf_float+0x6c>
 8014b88:	6863      	ldr	r3, [r4, #4]
 8014b8a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014b8e:	9104      	str	r1, [sp, #16]
 8014b90:	1c59      	adds	r1, r3, #1
 8014b92:	d13c      	bne.n	8014c0e <_printf_float+0x146>
 8014b94:	2306      	movs	r3, #6
 8014b96:	6063      	str	r3, [r4, #4]
 8014b98:	2300      	movs	r3, #0
 8014b9a:	9303      	str	r3, [sp, #12]
 8014b9c:	ab08      	add	r3, sp, #32
 8014b9e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014ba2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014ba6:	ab07      	add	r3, sp, #28
 8014ba8:	6861      	ldr	r1, [r4, #4]
 8014baa:	9300      	str	r3, [sp, #0]
 8014bac:	6022      	str	r2, [r4, #0]
 8014bae:	f10d 031b 	add.w	r3, sp, #27
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f7ff fef5 	bl	80149a2 <__cvt>
 8014bb8:	9b04      	ldr	r3, [sp, #16]
 8014bba:	9907      	ldr	r1, [sp, #28]
 8014bbc:	2b47      	cmp	r3, #71	; 0x47
 8014bbe:	4680      	mov	r8, r0
 8014bc0:	d108      	bne.n	8014bd4 <_printf_float+0x10c>
 8014bc2:	1cc8      	adds	r0, r1, #3
 8014bc4:	db02      	blt.n	8014bcc <_printf_float+0x104>
 8014bc6:	6863      	ldr	r3, [r4, #4]
 8014bc8:	4299      	cmp	r1, r3
 8014bca:	dd41      	ble.n	8014c50 <_printf_float+0x188>
 8014bcc:	f1a9 0902 	sub.w	r9, r9, #2
 8014bd0:	fa5f f989 	uxtb.w	r9, r9
 8014bd4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014bd8:	d820      	bhi.n	8014c1c <_printf_float+0x154>
 8014bda:	3901      	subs	r1, #1
 8014bdc:	464a      	mov	r2, r9
 8014bde:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014be2:	9107      	str	r1, [sp, #28]
 8014be4:	f7ff ff2f 	bl	8014a46 <__exponent>
 8014be8:	9a08      	ldr	r2, [sp, #32]
 8014bea:	9004      	str	r0, [sp, #16]
 8014bec:	1813      	adds	r3, r2, r0
 8014bee:	2a01      	cmp	r2, #1
 8014bf0:	6123      	str	r3, [r4, #16]
 8014bf2:	dc02      	bgt.n	8014bfa <_printf_float+0x132>
 8014bf4:	6822      	ldr	r2, [r4, #0]
 8014bf6:	07d2      	lsls	r2, r2, #31
 8014bf8:	d501      	bpl.n	8014bfe <_printf_float+0x136>
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	6123      	str	r3, [r4, #16]
 8014bfe:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d0a2      	beq.n	8014b4c <_printf_float+0x84>
 8014c06:	232d      	movs	r3, #45	; 0x2d
 8014c08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c0c:	e79e      	b.n	8014b4c <_printf_float+0x84>
 8014c0e:	9904      	ldr	r1, [sp, #16]
 8014c10:	2947      	cmp	r1, #71	; 0x47
 8014c12:	d1c1      	bne.n	8014b98 <_printf_float+0xd0>
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d1bf      	bne.n	8014b98 <_printf_float+0xd0>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e7bc      	b.n	8014b96 <_printf_float+0xce>
 8014c1c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014c20:	d118      	bne.n	8014c54 <_printf_float+0x18c>
 8014c22:	2900      	cmp	r1, #0
 8014c24:	6863      	ldr	r3, [r4, #4]
 8014c26:	dd0b      	ble.n	8014c40 <_printf_float+0x178>
 8014c28:	6121      	str	r1, [r4, #16]
 8014c2a:	b913      	cbnz	r3, 8014c32 <_printf_float+0x16a>
 8014c2c:	6822      	ldr	r2, [r4, #0]
 8014c2e:	07d0      	lsls	r0, r2, #31
 8014c30:	d502      	bpl.n	8014c38 <_printf_float+0x170>
 8014c32:	3301      	adds	r3, #1
 8014c34:	440b      	add	r3, r1
 8014c36:	6123      	str	r3, [r4, #16]
 8014c38:	2300      	movs	r3, #0
 8014c3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014c3c:	9304      	str	r3, [sp, #16]
 8014c3e:	e7de      	b.n	8014bfe <_printf_float+0x136>
 8014c40:	b913      	cbnz	r3, 8014c48 <_printf_float+0x180>
 8014c42:	6822      	ldr	r2, [r4, #0]
 8014c44:	07d2      	lsls	r2, r2, #31
 8014c46:	d501      	bpl.n	8014c4c <_printf_float+0x184>
 8014c48:	3302      	adds	r3, #2
 8014c4a:	e7f4      	b.n	8014c36 <_printf_float+0x16e>
 8014c4c:	2301      	movs	r3, #1
 8014c4e:	e7f2      	b.n	8014c36 <_printf_float+0x16e>
 8014c50:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014c54:	9b08      	ldr	r3, [sp, #32]
 8014c56:	4299      	cmp	r1, r3
 8014c58:	db05      	blt.n	8014c66 <_printf_float+0x19e>
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	6121      	str	r1, [r4, #16]
 8014c5e:	07d8      	lsls	r0, r3, #31
 8014c60:	d5ea      	bpl.n	8014c38 <_printf_float+0x170>
 8014c62:	1c4b      	adds	r3, r1, #1
 8014c64:	e7e7      	b.n	8014c36 <_printf_float+0x16e>
 8014c66:	2900      	cmp	r1, #0
 8014c68:	bfd4      	ite	le
 8014c6a:	f1c1 0202 	rsble	r2, r1, #2
 8014c6e:	2201      	movgt	r2, #1
 8014c70:	4413      	add	r3, r2
 8014c72:	e7e0      	b.n	8014c36 <_printf_float+0x16e>
 8014c74:	6823      	ldr	r3, [r4, #0]
 8014c76:	055a      	lsls	r2, r3, #21
 8014c78:	d407      	bmi.n	8014c8a <_printf_float+0x1c2>
 8014c7a:	6923      	ldr	r3, [r4, #16]
 8014c7c:	4642      	mov	r2, r8
 8014c7e:	4631      	mov	r1, r6
 8014c80:	4628      	mov	r0, r5
 8014c82:	47b8      	blx	r7
 8014c84:	3001      	adds	r0, #1
 8014c86:	d12a      	bne.n	8014cde <_printf_float+0x216>
 8014c88:	e76a      	b.n	8014b60 <_printf_float+0x98>
 8014c8a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014c8e:	f240 80e0 	bls.w	8014e52 <_printf_float+0x38a>
 8014c92:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014c96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c9e:	d133      	bne.n	8014d08 <_printf_float+0x240>
 8014ca0:	4a37      	ldr	r2, [pc, #220]	; (8014d80 <_printf_float+0x2b8>)
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	4631      	mov	r1, r6
 8014ca6:	4628      	mov	r0, r5
 8014ca8:	47b8      	blx	r7
 8014caa:	3001      	adds	r0, #1
 8014cac:	f43f af58 	beq.w	8014b60 <_printf_float+0x98>
 8014cb0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	db02      	blt.n	8014cbe <_printf_float+0x1f6>
 8014cb8:	6823      	ldr	r3, [r4, #0]
 8014cba:	07d8      	lsls	r0, r3, #31
 8014cbc:	d50f      	bpl.n	8014cde <_printf_float+0x216>
 8014cbe:	4653      	mov	r3, sl
 8014cc0:	465a      	mov	r2, fp
 8014cc2:	4631      	mov	r1, r6
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	47b8      	blx	r7
 8014cc8:	3001      	adds	r0, #1
 8014cca:	f43f af49 	beq.w	8014b60 <_printf_float+0x98>
 8014cce:	f04f 0800 	mov.w	r8, #0
 8014cd2:	f104 091a 	add.w	r9, r4, #26
 8014cd6:	9b08      	ldr	r3, [sp, #32]
 8014cd8:	3b01      	subs	r3, #1
 8014cda:	4543      	cmp	r3, r8
 8014cdc:	dc09      	bgt.n	8014cf2 <_printf_float+0x22a>
 8014cde:	6823      	ldr	r3, [r4, #0]
 8014ce0:	079b      	lsls	r3, r3, #30
 8014ce2:	f100 8106 	bmi.w	8014ef2 <_printf_float+0x42a>
 8014ce6:	68e0      	ldr	r0, [r4, #12]
 8014ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cea:	4298      	cmp	r0, r3
 8014cec:	bfb8      	it	lt
 8014cee:	4618      	movlt	r0, r3
 8014cf0:	e738      	b.n	8014b64 <_printf_float+0x9c>
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	464a      	mov	r2, r9
 8014cf6:	4631      	mov	r1, r6
 8014cf8:	4628      	mov	r0, r5
 8014cfa:	47b8      	blx	r7
 8014cfc:	3001      	adds	r0, #1
 8014cfe:	f43f af2f 	beq.w	8014b60 <_printf_float+0x98>
 8014d02:	f108 0801 	add.w	r8, r8, #1
 8014d06:	e7e6      	b.n	8014cd6 <_printf_float+0x20e>
 8014d08:	9b07      	ldr	r3, [sp, #28]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	dc3a      	bgt.n	8014d84 <_printf_float+0x2bc>
 8014d0e:	4a1c      	ldr	r2, [pc, #112]	; (8014d80 <_printf_float+0x2b8>)
 8014d10:	2301      	movs	r3, #1
 8014d12:	4631      	mov	r1, r6
 8014d14:	4628      	mov	r0, r5
 8014d16:	47b8      	blx	r7
 8014d18:	3001      	adds	r0, #1
 8014d1a:	f43f af21 	beq.w	8014b60 <_printf_float+0x98>
 8014d1e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014d22:	4313      	orrs	r3, r2
 8014d24:	d102      	bne.n	8014d2c <_printf_float+0x264>
 8014d26:	6823      	ldr	r3, [r4, #0]
 8014d28:	07d9      	lsls	r1, r3, #31
 8014d2a:	d5d8      	bpl.n	8014cde <_printf_float+0x216>
 8014d2c:	4653      	mov	r3, sl
 8014d2e:	465a      	mov	r2, fp
 8014d30:	4631      	mov	r1, r6
 8014d32:	4628      	mov	r0, r5
 8014d34:	47b8      	blx	r7
 8014d36:	3001      	adds	r0, #1
 8014d38:	f43f af12 	beq.w	8014b60 <_printf_float+0x98>
 8014d3c:	f04f 0900 	mov.w	r9, #0
 8014d40:	f104 0a1a 	add.w	sl, r4, #26
 8014d44:	9b07      	ldr	r3, [sp, #28]
 8014d46:	425b      	negs	r3, r3
 8014d48:	454b      	cmp	r3, r9
 8014d4a:	dc01      	bgt.n	8014d50 <_printf_float+0x288>
 8014d4c:	9b08      	ldr	r3, [sp, #32]
 8014d4e:	e795      	b.n	8014c7c <_printf_float+0x1b4>
 8014d50:	2301      	movs	r3, #1
 8014d52:	4652      	mov	r2, sl
 8014d54:	4631      	mov	r1, r6
 8014d56:	4628      	mov	r0, r5
 8014d58:	47b8      	blx	r7
 8014d5a:	3001      	adds	r0, #1
 8014d5c:	f43f af00 	beq.w	8014b60 <_printf_float+0x98>
 8014d60:	f109 0901 	add.w	r9, r9, #1
 8014d64:	e7ee      	b.n	8014d44 <_printf_float+0x27c>
 8014d66:	bf00      	nop
 8014d68:	ffffffff 	.word	0xffffffff
 8014d6c:	7fefffff 	.word	0x7fefffff
 8014d70:	080176b8 	.word	0x080176b8
 8014d74:	080176bc 	.word	0x080176bc
 8014d78:	080176c0 	.word	0x080176c0
 8014d7c:	080176c4 	.word	0x080176c4
 8014d80:	080176c8 	.word	0x080176c8
 8014d84:	9a08      	ldr	r2, [sp, #32]
 8014d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	bfa8      	it	ge
 8014d8c:	461a      	movge	r2, r3
 8014d8e:	2a00      	cmp	r2, #0
 8014d90:	4691      	mov	r9, r2
 8014d92:	dc38      	bgt.n	8014e06 <_printf_float+0x33e>
 8014d94:	2300      	movs	r3, #0
 8014d96:	9305      	str	r3, [sp, #20]
 8014d98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d9c:	f104 021a 	add.w	r2, r4, #26
 8014da0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014da2:	9905      	ldr	r1, [sp, #20]
 8014da4:	9304      	str	r3, [sp, #16]
 8014da6:	eba3 0309 	sub.w	r3, r3, r9
 8014daa:	428b      	cmp	r3, r1
 8014dac:	dc33      	bgt.n	8014e16 <_printf_float+0x34e>
 8014dae:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014db2:	429a      	cmp	r2, r3
 8014db4:	db3c      	blt.n	8014e30 <_printf_float+0x368>
 8014db6:	6823      	ldr	r3, [r4, #0]
 8014db8:	07da      	lsls	r2, r3, #31
 8014dba:	d439      	bmi.n	8014e30 <_printf_float+0x368>
 8014dbc:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014dc0:	eba2 0903 	sub.w	r9, r2, r3
 8014dc4:	9b04      	ldr	r3, [sp, #16]
 8014dc6:	1ad2      	subs	r2, r2, r3
 8014dc8:	4591      	cmp	r9, r2
 8014dca:	bfa8      	it	ge
 8014dcc:	4691      	movge	r9, r2
 8014dce:	f1b9 0f00 	cmp.w	r9, #0
 8014dd2:	dc35      	bgt.n	8014e40 <_printf_float+0x378>
 8014dd4:	f04f 0800 	mov.w	r8, #0
 8014dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014ddc:	f104 0a1a 	add.w	sl, r4, #26
 8014de0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014de4:	1a9b      	subs	r3, r3, r2
 8014de6:	eba3 0309 	sub.w	r3, r3, r9
 8014dea:	4543      	cmp	r3, r8
 8014dec:	f77f af77 	ble.w	8014cde <_printf_float+0x216>
 8014df0:	2301      	movs	r3, #1
 8014df2:	4652      	mov	r2, sl
 8014df4:	4631      	mov	r1, r6
 8014df6:	4628      	mov	r0, r5
 8014df8:	47b8      	blx	r7
 8014dfa:	3001      	adds	r0, #1
 8014dfc:	f43f aeb0 	beq.w	8014b60 <_printf_float+0x98>
 8014e00:	f108 0801 	add.w	r8, r8, #1
 8014e04:	e7ec      	b.n	8014de0 <_printf_float+0x318>
 8014e06:	4613      	mov	r3, r2
 8014e08:	4631      	mov	r1, r6
 8014e0a:	4642      	mov	r2, r8
 8014e0c:	4628      	mov	r0, r5
 8014e0e:	47b8      	blx	r7
 8014e10:	3001      	adds	r0, #1
 8014e12:	d1bf      	bne.n	8014d94 <_printf_float+0x2cc>
 8014e14:	e6a4      	b.n	8014b60 <_printf_float+0x98>
 8014e16:	2301      	movs	r3, #1
 8014e18:	4631      	mov	r1, r6
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	9204      	str	r2, [sp, #16]
 8014e1e:	47b8      	blx	r7
 8014e20:	3001      	adds	r0, #1
 8014e22:	f43f ae9d 	beq.w	8014b60 <_printf_float+0x98>
 8014e26:	9b05      	ldr	r3, [sp, #20]
 8014e28:	9a04      	ldr	r2, [sp, #16]
 8014e2a:	3301      	adds	r3, #1
 8014e2c:	9305      	str	r3, [sp, #20]
 8014e2e:	e7b7      	b.n	8014da0 <_printf_float+0x2d8>
 8014e30:	4653      	mov	r3, sl
 8014e32:	465a      	mov	r2, fp
 8014e34:	4631      	mov	r1, r6
 8014e36:	4628      	mov	r0, r5
 8014e38:	47b8      	blx	r7
 8014e3a:	3001      	adds	r0, #1
 8014e3c:	d1be      	bne.n	8014dbc <_printf_float+0x2f4>
 8014e3e:	e68f      	b.n	8014b60 <_printf_float+0x98>
 8014e40:	9a04      	ldr	r2, [sp, #16]
 8014e42:	464b      	mov	r3, r9
 8014e44:	4442      	add	r2, r8
 8014e46:	4631      	mov	r1, r6
 8014e48:	4628      	mov	r0, r5
 8014e4a:	47b8      	blx	r7
 8014e4c:	3001      	adds	r0, #1
 8014e4e:	d1c1      	bne.n	8014dd4 <_printf_float+0x30c>
 8014e50:	e686      	b.n	8014b60 <_printf_float+0x98>
 8014e52:	9a08      	ldr	r2, [sp, #32]
 8014e54:	2a01      	cmp	r2, #1
 8014e56:	dc01      	bgt.n	8014e5c <_printf_float+0x394>
 8014e58:	07db      	lsls	r3, r3, #31
 8014e5a:	d537      	bpl.n	8014ecc <_printf_float+0x404>
 8014e5c:	2301      	movs	r3, #1
 8014e5e:	4642      	mov	r2, r8
 8014e60:	4631      	mov	r1, r6
 8014e62:	4628      	mov	r0, r5
 8014e64:	47b8      	blx	r7
 8014e66:	3001      	adds	r0, #1
 8014e68:	f43f ae7a 	beq.w	8014b60 <_printf_float+0x98>
 8014e6c:	4653      	mov	r3, sl
 8014e6e:	465a      	mov	r2, fp
 8014e70:	4631      	mov	r1, r6
 8014e72:	4628      	mov	r0, r5
 8014e74:	47b8      	blx	r7
 8014e76:	3001      	adds	r0, #1
 8014e78:	f43f ae72 	beq.w	8014b60 <_printf_float+0x98>
 8014e7c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014e80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e88:	9b08      	ldr	r3, [sp, #32]
 8014e8a:	d01a      	beq.n	8014ec2 <_printf_float+0x3fa>
 8014e8c:	3b01      	subs	r3, #1
 8014e8e:	f108 0201 	add.w	r2, r8, #1
 8014e92:	4631      	mov	r1, r6
 8014e94:	4628      	mov	r0, r5
 8014e96:	47b8      	blx	r7
 8014e98:	3001      	adds	r0, #1
 8014e9a:	d10e      	bne.n	8014eba <_printf_float+0x3f2>
 8014e9c:	e660      	b.n	8014b60 <_printf_float+0x98>
 8014e9e:	2301      	movs	r3, #1
 8014ea0:	464a      	mov	r2, r9
 8014ea2:	4631      	mov	r1, r6
 8014ea4:	4628      	mov	r0, r5
 8014ea6:	47b8      	blx	r7
 8014ea8:	3001      	adds	r0, #1
 8014eaa:	f43f ae59 	beq.w	8014b60 <_printf_float+0x98>
 8014eae:	f108 0801 	add.w	r8, r8, #1
 8014eb2:	9b08      	ldr	r3, [sp, #32]
 8014eb4:	3b01      	subs	r3, #1
 8014eb6:	4543      	cmp	r3, r8
 8014eb8:	dcf1      	bgt.n	8014e9e <_printf_float+0x3d6>
 8014eba:	9b04      	ldr	r3, [sp, #16]
 8014ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014ec0:	e6dd      	b.n	8014c7e <_printf_float+0x1b6>
 8014ec2:	f04f 0800 	mov.w	r8, #0
 8014ec6:	f104 091a 	add.w	r9, r4, #26
 8014eca:	e7f2      	b.n	8014eb2 <_printf_float+0x3ea>
 8014ecc:	2301      	movs	r3, #1
 8014ece:	4642      	mov	r2, r8
 8014ed0:	e7df      	b.n	8014e92 <_printf_float+0x3ca>
 8014ed2:	2301      	movs	r3, #1
 8014ed4:	464a      	mov	r2, r9
 8014ed6:	4631      	mov	r1, r6
 8014ed8:	4628      	mov	r0, r5
 8014eda:	47b8      	blx	r7
 8014edc:	3001      	adds	r0, #1
 8014ede:	f43f ae3f 	beq.w	8014b60 <_printf_float+0x98>
 8014ee2:	f108 0801 	add.w	r8, r8, #1
 8014ee6:	68e3      	ldr	r3, [r4, #12]
 8014ee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014eea:	1a5b      	subs	r3, r3, r1
 8014eec:	4543      	cmp	r3, r8
 8014eee:	dcf0      	bgt.n	8014ed2 <_printf_float+0x40a>
 8014ef0:	e6f9      	b.n	8014ce6 <_printf_float+0x21e>
 8014ef2:	f04f 0800 	mov.w	r8, #0
 8014ef6:	f104 0919 	add.w	r9, r4, #25
 8014efa:	e7f4      	b.n	8014ee6 <_printf_float+0x41e>

08014efc <_printf_common>:
 8014efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f00:	4616      	mov	r6, r2
 8014f02:	4699      	mov	r9, r3
 8014f04:	688a      	ldr	r2, [r1, #8]
 8014f06:	690b      	ldr	r3, [r1, #16]
 8014f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	bfb8      	it	lt
 8014f10:	4613      	movlt	r3, r2
 8014f12:	6033      	str	r3, [r6, #0]
 8014f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f18:	4607      	mov	r7, r0
 8014f1a:	460c      	mov	r4, r1
 8014f1c:	b10a      	cbz	r2, 8014f22 <_printf_common+0x26>
 8014f1e:	3301      	adds	r3, #1
 8014f20:	6033      	str	r3, [r6, #0]
 8014f22:	6823      	ldr	r3, [r4, #0]
 8014f24:	0699      	lsls	r1, r3, #26
 8014f26:	bf42      	ittt	mi
 8014f28:	6833      	ldrmi	r3, [r6, #0]
 8014f2a:	3302      	addmi	r3, #2
 8014f2c:	6033      	strmi	r3, [r6, #0]
 8014f2e:	6825      	ldr	r5, [r4, #0]
 8014f30:	f015 0506 	ands.w	r5, r5, #6
 8014f34:	d106      	bne.n	8014f44 <_printf_common+0x48>
 8014f36:	f104 0a19 	add.w	sl, r4, #25
 8014f3a:	68e3      	ldr	r3, [r4, #12]
 8014f3c:	6832      	ldr	r2, [r6, #0]
 8014f3e:	1a9b      	subs	r3, r3, r2
 8014f40:	42ab      	cmp	r3, r5
 8014f42:	dc26      	bgt.n	8014f92 <_printf_common+0x96>
 8014f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f48:	1e13      	subs	r3, r2, #0
 8014f4a:	6822      	ldr	r2, [r4, #0]
 8014f4c:	bf18      	it	ne
 8014f4e:	2301      	movne	r3, #1
 8014f50:	0692      	lsls	r2, r2, #26
 8014f52:	d42b      	bmi.n	8014fac <_printf_common+0xb0>
 8014f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f58:	4649      	mov	r1, r9
 8014f5a:	4638      	mov	r0, r7
 8014f5c:	47c0      	blx	r8
 8014f5e:	3001      	adds	r0, #1
 8014f60:	d01e      	beq.n	8014fa0 <_printf_common+0xa4>
 8014f62:	6823      	ldr	r3, [r4, #0]
 8014f64:	6922      	ldr	r2, [r4, #16]
 8014f66:	f003 0306 	and.w	r3, r3, #6
 8014f6a:	2b04      	cmp	r3, #4
 8014f6c:	bf02      	ittt	eq
 8014f6e:	68e5      	ldreq	r5, [r4, #12]
 8014f70:	6833      	ldreq	r3, [r6, #0]
 8014f72:	1aed      	subeq	r5, r5, r3
 8014f74:	68a3      	ldr	r3, [r4, #8]
 8014f76:	bf0c      	ite	eq
 8014f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014f7c:	2500      	movne	r5, #0
 8014f7e:	4293      	cmp	r3, r2
 8014f80:	bfc4      	itt	gt
 8014f82:	1a9b      	subgt	r3, r3, r2
 8014f84:	18ed      	addgt	r5, r5, r3
 8014f86:	2600      	movs	r6, #0
 8014f88:	341a      	adds	r4, #26
 8014f8a:	42b5      	cmp	r5, r6
 8014f8c:	d11a      	bne.n	8014fc4 <_printf_common+0xc8>
 8014f8e:	2000      	movs	r0, #0
 8014f90:	e008      	b.n	8014fa4 <_printf_common+0xa8>
 8014f92:	2301      	movs	r3, #1
 8014f94:	4652      	mov	r2, sl
 8014f96:	4649      	mov	r1, r9
 8014f98:	4638      	mov	r0, r7
 8014f9a:	47c0      	blx	r8
 8014f9c:	3001      	adds	r0, #1
 8014f9e:	d103      	bne.n	8014fa8 <_printf_common+0xac>
 8014fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fa8:	3501      	adds	r5, #1
 8014faa:	e7c6      	b.n	8014f3a <_printf_common+0x3e>
 8014fac:	18e1      	adds	r1, r4, r3
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	2030      	movs	r0, #48	; 0x30
 8014fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fb6:	4422      	add	r2, r4
 8014fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fc0:	3302      	adds	r3, #2
 8014fc2:	e7c7      	b.n	8014f54 <_printf_common+0x58>
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	4622      	mov	r2, r4
 8014fc8:	4649      	mov	r1, r9
 8014fca:	4638      	mov	r0, r7
 8014fcc:	47c0      	blx	r8
 8014fce:	3001      	adds	r0, #1
 8014fd0:	d0e6      	beq.n	8014fa0 <_printf_common+0xa4>
 8014fd2:	3601      	adds	r6, #1
 8014fd4:	e7d9      	b.n	8014f8a <_printf_common+0x8e>
	...

08014fd8 <_printf_i>:
 8014fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fdc:	7e0f      	ldrb	r7, [r1, #24]
 8014fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014fe0:	2f78      	cmp	r7, #120	; 0x78
 8014fe2:	4691      	mov	r9, r2
 8014fe4:	4680      	mov	r8, r0
 8014fe6:	460c      	mov	r4, r1
 8014fe8:	469a      	mov	sl, r3
 8014fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014fee:	d807      	bhi.n	8015000 <_printf_i+0x28>
 8014ff0:	2f62      	cmp	r7, #98	; 0x62
 8014ff2:	d80a      	bhi.n	801500a <_printf_i+0x32>
 8014ff4:	2f00      	cmp	r7, #0
 8014ff6:	f000 80d4 	beq.w	80151a2 <_printf_i+0x1ca>
 8014ffa:	2f58      	cmp	r7, #88	; 0x58
 8014ffc:	f000 80c0 	beq.w	8015180 <_printf_i+0x1a8>
 8015000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015008:	e03a      	b.n	8015080 <_printf_i+0xa8>
 801500a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801500e:	2b15      	cmp	r3, #21
 8015010:	d8f6      	bhi.n	8015000 <_printf_i+0x28>
 8015012:	a101      	add	r1, pc, #4	; (adr r1, 8015018 <_printf_i+0x40>)
 8015014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015018:	08015071 	.word	0x08015071
 801501c:	08015085 	.word	0x08015085
 8015020:	08015001 	.word	0x08015001
 8015024:	08015001 	.word	0x08015001
 8015028:	08015001 	.word	0x08015001
 801502c:	08015001 	.word	0x08015001
 8015030:	08015085 	.word	0x08015085
 8015034:	08015001 	.word	0x08015001
 8015038:	08015001 	.word	0x08015001
 801503c:	08015001 	.word	0x08015001
 8015040:	08015001 	.word	0x08015001
 8015044:	08015189 	.word	0x08015189
 8015048:	080150b1 	.word	0x080150b1
 801504c:	08015143 	.word	0x08015143
 8015050:	08015001 	.word	0x08015001
 8015054:	08015001 	.word	0x08015001
 8015058:	080151ab 	.word	0x080151ab
 801505c:	08015001 	.word	0x08015001
 8015060:	080150b1 	.word	0x080150b1
 8015064:	08015001 	.word	0x08015001
 8015068:	08015001 	.word	0x08015001
 801506c:	0801514b 	.word	0x0801514b
 8015070:	682b      	ldr	r3, [r5, #0]
 8015072:	1d1a      	adds	r2, r3, #4
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	602a      	str	r2, [r5, #0]
 8015078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801507c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015080:	2301      	movs	r3, #1
 8015082:	e09f      	b.n	80151c4 <_printf_i+0x1ec>
 8015084:	6820      	ldr	r0, [r4, #0]
 8015086:	682b      	ldr	r3, [r5, #0]
 8015088:	0607      	lsls	r7, r0, #24
 801508a:	f103 0104 	add.w	r1, r3, #4
 801508e:	6029      	str	r1, [r5, #0]
 8015090:	d501      	bpl.n	8015096 <_printf_i+0xbe>
 8015092:	681e      	ldr	r6, [r3, #0]
 8015094:	e003      	b.n	801509e <_printf_i+0xc6>
 8015096:	0646      	lsls	r6, r0, #25
 8015098:	d5fb      	bpl.n	8015092 <_printf_i+0xba>
 801509a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801509e:	2e00      	cmp	r6, #0
 80150a0:	da03      	bge.n	80150aa <_printf_i+0xd2>
 80150a2:	232d      	movs	r3, #45	; 0x2d
 80150a4:	4276      	negs	r6, r6
 80150a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150aa:	485a      	ldr	r0, [pc, #360]	; (8015214 <_printf_i+0x23c>)
 80150ac:	230a      	movs	r3, #10
 80150ae:	e012      	b.n	80150d6 <_printf_i+0xfe>
 80150b0:	682b      	ldr	r3, [r5, #0]
 80150b2:	6820      	ldr	r0, [r4, #0]
 80150b4:	1d19      	adds	r1, r3, #4
 80150b6:	6029      	str	r1, [r5, #0]
 80150b8:	0605      	lsls	r5, r0, #24
 80150ba:	d501      	bpl.n	80150c0 <_printf_i+0xe8>
 80150bc:	681e      	ldr	r6, [r3, #0]
 80150be:	e002      	b.n	80150c6 <_printf_i+0xee>
 80150c0:	0641      	lsls	r1, r0, #25
 80150c2:	d5fb      	bpl.n	80150bc <_printf_i+0xe4>
 80150c4:	881e      	ldrh	r6, [r3, #0]
 80150c6:	4853      	ldr	r0, [pc, #332]	; (8015214 <_printf_i+0x23c>)
 80150c8:	2f6f      	cmp	r7, #111	; 0x6f
 80150ca:	bf0c      	ite	eq
 80150cc:	2308      	moveq	r3, #8
 80150ce:	230a      	movne	r3, #10
 80150d0:	2100      	movs	r1, #0
 80150d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150d6:	6865      	ldr	r5, [r4, #4]
 80150d8:	60a5      	str	r5, [r4, #8]
 80150da:	2d00      	cmp	r5, #0
 80150dc:	bfa2      	ittt	ge
 80150de:	6821      	ldrge	r1, [r4, #0]
 80150e0:	f021 0104 	bicge.w	r1, r1, #4
 80150e4:	6021      	strge	r1, [r4, #0]
 80150e6:	b90e      	cbnz	r6, 80150ec <_printf_i+0x114>
 80150e8:	2d00      	cmp	r5, #0
 80150ea:	d04b      	beq.n	8015184 <_printf_i+0x1ac>
 80150ec:	4615      	mov	r5, r2
 80150ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80150f2:	fb03 6711 	mls	r7, r3, r1, r6
 80150f6:	5dc7      	ldrb	r7, [r0, r7]
 80150f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80150fc:	4637      	mov	r7, r6
 80150fe:	42bb      	cmp	r3, r7
 8015100:	460e      	mov	r6, r1
 8015102:	d9f4      	bls.n	80150ee <_printf_i+0x116>
 8015104:	2b08      	cmp	r3, #8
 8015106:	d10b      	bne.n	8015120 <_printf_i+0x148>
 8015108:	6823      	ldr	r3, [r4, #0]
 801510a:	07de      	lsls	r6, r3, #31
 801510c:	d508      	bpl.n	8015120 <_printf_i+0x148>
 801510e:	6923      	ldr	r3, [r4, #16]
 8015110:	6861      	ldr	r1, [r4, #4]
 8015112:	4299      	cmp	r1, r3
 8015114:	bfde      	ittt	le
 8015116:	2330      	movle	r3, #48	; 0x30
 8015118:	f805 3c01 	strble.w	r3, [r5, #-1]
 801511c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015120:	1b52      	subs	r2, r2, r5
 8015122:	6122      	str	r2, [r4, #16]
 8015124:	f8cd a000 	str.w	sl, [sp]
 8015128:	464b      	mov	r3, r9
 801512a:	aa03      	add	r2, sp, #12
 801512c:	4621      	mov	r1, r4
 801512e:	4640      	mov	r0, r8
 8015130:	f7ff fee4 	bl	8014efc <_printf_common>
 8015134:	3001      	adds	r0, #1
 8015136:	d14a      	bne.n	80151ce <_printf_i+0x1f6>
 8015138:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801513c:	b004      	add	sp, #16
 801513e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015142:	6823      	ldr	r3, [r4, #0]
 8015144:	f043 0320 	orr.w	r3, r3, #32
 8015148:	6023      	str	r3, [r4, #0]
 801514a:	4833      	ldr	r0, [pc, #204]	; (8015218 <_printf_i+0x240>)
 801514c:	2778      	movs	r7, #120	; 0x78
 801514e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015152:	6823      	ldr	r3, [r4, #0]
 8015154:	6829      	ldr	r1, [r5, #0]
 8015156:	061f      	lsls	r7, r3, #24
 8015158:	f851 6b04 	ldr.w	r6, [r1], #4
 801515c:	d402      	bmi.n	8015164 <_printf_i+0x18c>
 801515e:	065f      	lsls	r7, r3, #25
 8015160:	bf48      	it	mi
 8015162:	b2b6      	uxthmi	r6, r6
 8015164:	07df      	lsls	r7, r3, #31
 8015166:	bf48      	it	mi
 8015168:	f043 0320 	orrmi.w	r3, r3, #32
 801516c:	6029      	str	r1, [r5, #0]
 801516e:	bf48      	it	mi
 8015170:	6023      	strmi	r3, [r4, #0]
 8015172:	b91e      	cbnz	r6, 801517c <_printf_i+0x1a4>
 8015174:	6823      	ldr	r3, [r4, #0]
 8015176:	f023 0320 	bic.w	r3, r3, #32
 801517a:	6023      	str	r3, [r4, #0]
 801517c:	2310      	movs	r3, #16
 801517e:	e7a7      	b.n	80150d0 <_printf_i+0xf8>
 8015180:	4824      	ldr	r0, [pc, #144]	; (8015214 <_printf_i+0x23c>)
 8015182:	e7e4      	b.n	801514e <_printf_i+0x176>
 8015184:	4615      	mov	r5, r2
 8015186:	e7bd      	b.n	8015104 <_printf_i+0x12c>
 8015188:	682b      	ldr	r3, [r5, #0]
 801518a:	6826      	ldr	r6, [r4, #0]
 801518c:	6961      	ldr	r1, [r4, #20]
 801518e:	1d18      	adds	r0, r3, #4
 8015190:	6028      	str	r0, [r5, #0]
 8015192:	0635      	lsls	r5, r6, #24
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	d501      	bpl.n	801519c <_printf_i+0x1c4>
 8015198:	6019      	str	r1, [r3, #0]
 801519a:	e002      	b.n	80151a2 <_printf_i+0x1ca>
 801519c:	0670      	lsls	r0, r6, #25
 801519e:	d5fb      	bpl.n	8015198 <_printf_i+0x1c0>
 80151a0:	8019      	strh	r1, [r3, #0]
 80151a2:	2300      	movs	r3, #0
 80151a4:	6123      	str	r3, [r4, #16]
 80151a6:	4615      	mov	r5, r2
 80151a8:	e7bc      	b.n	8015124 <_printf_i+0x14c>
 80151aa:	682b      	ldr	r3, [r5, #0]
 80151ac:	1d1a      	adds	r2, r3, #4
 80151ae:	602a      	str	r2, [r5, #0]
 80151b0:	681d      	ldr	r5, [r3, #0]
 80151b2:	6862      	ldr	r2, [r4, #4]
 80151b4:	2100      	movs	r1, #0
 80151b6:	4628      	mov	r0, r5
 80151b8:	f7eb f892 	bl	80002e0 <memchr>
 80151bc:	b108      	cbz	r0, 80151c2 <_printf_i+0x1ea>
 80151be:	1b40      	subs	r0, r0, r5
 80151c0:	6060      	str	r0, [r4, #4]
 80151c2:	6863      	ldr	r3, [r4, #4]
 80151c4:	6123      	str	r3, [r4, #16]
 80151c6:	2300      	movs	r3, #0
 80151c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151cc:	e7aa      	b.n	8015124 <_printf_i+0x14c>
 80151ce:	6923      	ldr	r3, [r4, #16]
 80151d0:	462a      	mov	r2, r5
 80151d2:	4649      	mov	r1, r9
 80151d4:	4640      	mov	r0, r8
 80151d6:	47d0      	blx	sl
 80151d8:	3001      	adds	r0, #1
 80151da:	d0ad      	beq.n	8015138 <_printf_i+0x160>
 80151dc:	6823      	ldr	r3, [r4, #0]
 80151de:	079b      	lsls	r3, r3, #30
 80151e0:	d413      	bmi.n	801520a <_printf_i+0x232>
 80151e2:	68e0      	ldr	r0, [r4, #12]
 80151e4:	9b03      	ldr	r3, [sp, #12]
 80151e6:	4298      	cmp	r0, r3
 80151e8:	bfb8      	it	lt
 80151ea:	4618      	movlt	r0, r3
 80151ec:	e7a6      	b.n	801513c <_printf_i+0x164>
 80151ee:	2301      	movs	r3, #1
 80151f0:	4632      	mov	r2, r6
 80151f2:	4649      	mov	r1, r9
 80151f4:	4640      	mov	r0, r8
 80151f6:	47d0      	blx	sl
 80151f8:	3001      	adds	r0, #1
 80151fa:	d09d      	beq.n	8015138 <_printf_i+0x160>
 80151fc:	3501      	adds	r5, #1
 80151fe:	68e3      	ldr	r3, [r4, #12]
 8015200:	9903      	ldr	r1, [sp, #12]
 8015202:	1a5b      	subs	r3, r3, r1
 8015204:	42ab      	cmp	r3, r5
 8015206:	dcf2      	bgt.n	80151ee <_printf_i+0x216>
 8015208:	e7eb      	b.n	80151e2 <_printf_i+0x20a>
 801520a:	2500      	movs	r5, #0
 801520c:	f104 0619 	add.w	r6, r4, #25
 8015210:	e7f5      	b.n	80151fe <_printf_i+0x226>
 8015212:	bf00      	nop
 8015214:	080176ca 	.word	0x080176ca
 8015218:	080176db 	.word	0x080176db

0801521c <std>:
 801521c:	2300      	movs	r3, #0
 801521e:	b510      	push	{r4, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	e9c0 3300 	strd	r3, r3, [r0]
 8015226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801522a:	6083      	str	r3, [r0, #8]
 801522c:	8181      	strh	r1, [r0, #12]
 801522e:	6643      	str	r3, [r0, #100]	; 0x64
 8015230:	81c2      	strh	r2, [r0, #14]
 8015232:	6183      	str	r3, [r0, #24]
 8015234:	4619      	mov	r1, r3
 8015236:	2208      	movs	r2, #8
 8015238:	305c      	adds	r0, #92	; 0x5c
 801523a:	f000 f9f7 	bl	801562c <memset>
 801523e:	4b0d      	ldr	r3, [pc, #52]	; (8015274 <std+0x58>)
 8015240:	6263      	str	r3, [r4, #36]	; 0x24
 8015242:	4b0d      	ldr	r3, [pc, #52]	; (8015278 <std+0x5c>)
 8015244:	62a3      	str	r3, [r4, #40]	; 0x28
 8015246:	4b0d      	ldr	r3, [pc, #52]	; (801527c <std+0x60>)
 8015248:	62e3      	str	r3, [r4, #44]	; 0x2c
 801524a:	4b0d      	ldr	r3, [pc, #52]	; (8015280 <std+0x64>)
 801524c:	6323      	str	r3, [r4, #48]	; 0x30
 801524e:	4b0d      	ldr	r3, [pc, #52]	; (8015284 <std+0x68>)
 8015250:	6224      	str	r4, [r4, #32]
 8015252:	429c      	cmp	r4, r3
 8015254:	d006      	beq.n	8015264 <std+0x48>
 8015256:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801525a:	4294      	cmp	r4, r2
 801525c:	d002      	beq.n	8015264 <std+0x48>
 801525e:	33d0      	adds	r3, #208	; 0xd0
 8015260:	429c      	cmp	r4, r3
 8015262:	d105      	bne.n	8015270 <std+0x54>
 8015264:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801526c:	f000 baae 	b.w	80157cc <__retarget_lock_init_recursive>
 8015270:	bd10      	pop	{r4, pc}
 8015272:	bf00      	nop
 8015274:	0801547d 	.word	0x0801547d
 8015278:	0801549f 	.word	0x0801549f
 801527c:	080154d7 	.word	0x080154d7
 8015280:	080154fb 	.word	0x080154fb
 8015284:	24004658 	.word	0x24004658

08015288 <stdio_exit_handler>:
 8015288:	4a02      	ldr	r2, [pc, #8]	; (8015294 <stdio_exit_handler+0xc>)
 801528a:	4903      	ldr	r1, [pc, #12]	; (8015298 <stdio_exit_handler+0x10>)
 801528c:	4803      	ldr	r0, [pc, #12]	; (801529c <stdio_exit_handler+0x14>)
 801528e:	f000 b869 	b.w	8015364 <_fwalk_sglue>
 8015292:	bf00      	nop
 8015294:	24000054 	.word	0x24000054
 8015298:	08016f0d 	.word	0x08016f0d
 801529c:	24000060 	.word	0x24000060

080152a0 <cleanup_stdio>:
 80152a0:	6841      	ldr	r1, [r0, #4]
 80152a2:	4b0c      	ldr	r3, [pc, #48]	; (80152d4 <cleanup_stdio+0x34>)
 80152a4:	4299      	cmp	r1, r3
 80152a6:	b510      	push	{r4, lr}
 80152a8:	4604      	mov	r4, r0
 80152aa:	d001      	beq.n	80152b0 <cleanup_stdio+0x10>
 80152ac:	f001 fe2e 	bl	8016f0c <_fflush_r>
 80152b0:	68a1      	ldr	r1, [r4, #8]
 80152b2:	4b09      	ldr	r3, [pc, #36]	; (80152d8 <cleanup_stdio+0x38>)
 80152b4:	4299      	cmp	r1, r3
 80152b6:	d002      	beq.n	80152be <cleanup_stdio+0x1e>
 80152b8:	4620      	mov	r0, r4
 80152ba:	f001 fe27 	bl	8016f0c <_fflush_r>
 80152be:	68e1      	ldr	r1, [r4, #12]
 80152c0:	4b06      	ldr	r3, [pc, #24]	; (80152dc <cleanup_stdio+0x3c>)
 80152c2:	4299      	cmp	r1, r3
 80152c4:	d004      	beq.n	80152d0 <cleanup_stdio+0x30>
 80152c6:	4620      	mov	r0, r4
 80152c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152cc:	f001 be1e 	b.w	8016f0c <_fflush_r>
 80152d0:	bd10      	pop	{r4, pc}
 80152d2:	bf00      	nop
 80152d4:	24004658 	.word	0x24004658
 80152d8:	240046c0 	.word	0x240046c0
 80152dc:	24004728 	.word	0x24004728

080152e0 <global_stdio_init.part.0>:
 80152e0:	b510      	push	{r4, lr}
 80152e2:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <global_stdio_init.part.0+0x30>)
 80152e4:	4c0b      	ldr	r4, [pc, #44]	; (8015314 <global_stdio_init.part.0+0x34>)
 80152e6:	4a0c      	ldr	r2, [pc, #48]	; (8015318 <global_stdio_init.part.0+0x38>)
 80152e8:	601a      	str	r2, [r3, #0]
 80152ea:	4620      	mov	r0, r4
 80152ec:	2200      	movs	r2, #0
 80152ee:	2104      	movs	r1, #4
 80152f0:	f7ff ff94 	bl	801521c <std>
 80152f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80152f8:	2201      	movs	r2, #1
 80152fa:	2109      	movs	r1, #9
 80152fc:	f7ff ff8e 	bl	801521c <std>
 8015300:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015304:	2202      	movs	r2, #2
 8015306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801530a:	2112      	movs	r1, #18
 801530c:	f7ff bf86 	b.w	801521c <std>
 8015310:	24004790 	.word	0x24004790
 8015314:	24004658 	.word	0x24004658
 8015318:	08015289 	.word	0x08015289

0801531c <__sfp_lock_acquire>:
 801531c:	4801      	ldr	r0, [pc, #4]	; (8015324 <__sfp_lock_acquire+0x8>)
 801531e:	f000 ba56 	b.w	80157ce <__retarget_lock_acquire_recursive>
 8015322:	bf00      	nop
 8015324:	24004799 	.word	0x24004799

08015328 <__sfp_lock_release>:
 8015328:	4801      	ldr	r0, [pc, #4]	; (8015330 <__sfp_lock_release+0x8>)
 801532a:	f000 ba51 	b.w	80157d0 <__retarget_lock_release_recursive>
 801532e:	bf00      	nop
 8015330:	24004799 	.word	0x24004799

08015334 <__sinit>:
 8015334:	b510      	push	{r4, lr}
 8015336:	4604      	mov	r4, r0
 8015338:	f7ff fff0 	bl	801531c <__sfp_lock_acquire>
 801533c:	6a23      	ldr	r3, [r4, #32]
 801533e:	b11b      	cbz	r3, 8015348 <__sinit+0x14>
 8015340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015344:	f7ff bff0 	b.w	8015328 <__sfp_lock_release>
 8015348:	4b04      	ldr	r3, [pc, #16]	; (801535c <__sinit+0x28>)
 801534a:	6223      	str	r3, [r4, #32]
 801534c:	4b04      	ldr	r3, [pc, #16]	; (8015360 <__sinit+0x2c>)
 801534e:	681b      	ldr	r3, [r3, #0]
 8015350:	2b00      	cmp	r3, #0
 8015352:	d1f5      	bne.n	8015340 <__sinit+0xc>
 8015354:	f7ff ffc4 	bl	80152e0 <global_stdio_init.part.0>
 8015358:	e7f2      	b.n	8015340 <__sinit+0xc>
 801535a:	bf00      	nop
 801535c:	080152a1 	.word	0x080152a1
 8015360:	24004790 	.word	0x24004790

08015364 <_fwalk_sglue>:
 8015364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015368:	4607      	mov	r7, r0
 801536a:	4688      	mov	r8, r1
 801536c:	4614      	mov	r4, r2
 801536e:	2600      	movs	r6, #0
 8015370:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015374:	f1b9 0901 	subs.w	r9, r9, #1
 8015378:	d505      	bpl.n	8015386 <_fwalk_sglue+0x22>
 801537a:	6824      	ldr	r4, [r4, #0]
 801537c:	2c00      	cmp	r4, #0
 801537e:	d1f7      	bne.n	8015370 <_fwalk_sglue+0xc>
 8015380:	4630      	mov	r0, r6
 8015382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015386:	89ab      	ldrh	r3, [r5, #12]
 8015388:	2b01      	cmp	r3, #1
 801538a:	d907      	bls.n	801539c <_fwalk_sglue+0x38>
 801538c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015390:	3301      	adds	r3, #1
 8015392:	d003      	beq.n	801539c <_fwalk_sglue+0x38>
 8015394:	4629      	mov	r1, r5
 8015396:	4638      	mov	r0, r7
 8015398:	47c0      	blx	r8
 801539a:	4306      	orrs	r6, r0
 801539c:	3568      	adds	r5, #104	; 0x68
 801539e:	e7e9      	b.n	8015374 <_fwalk_sglue+0x10>

080153a0 <iprintf>:
 80153a0:	b40f      	push	{r0, r1, r2, r3}
 80153a2:	b507      	push	{r0, r1, r2, lr}
 80153a4:	4906      	ldr	r1, [pc, #24]	; (80153c0 <iprintf+0x20>)
 80153a6:	ab04      	add	r3, sp, #16
 80153a8:	6808      	ldr	r0, [r1, #0]
 80153aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80153ae:	6881      	ldr	r1, [r0, #8]
 80153b0:	9301      	str	r3, [sp, #4]
 80153b2:	f001 fc0b 	bl	8016bcc <_vfiprintf_r>
 80153b6:	b003      	add	sp, #12
 80153b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80153bc:	b004      	add	sp, #16
 80153be:	4770      	bx	lr
 80153c0:	240000ac 	.word	0x240000ac

080153c4 <_puts_r>:
 80153c4:	6a03      	ldr	r3, [r0, #32]
 80153c6:	b570      	push	{r4, r5, r6, lr}
 80153c8:	6884      	ldr	r4, [r0, #8]
 80153ca:	4605      	mov	r5, r0
 80153cc:	460e      	mov	r6, r1
 80153ce:	b90b      	cbnz	r3, 80153d4 <_puts_r+0x10>
 80153d0:	f7ff ffb0 	bl	8015334 <__sinit>
 80153d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80153d6:	07db      	lsls	r3, r3, #31
 80153d8:	d405      	bmi.n	80153e6 <_puts_r+0x22>
 80153da:	89a3      	ldrh	r3, [r4, #12]
 80153dc:	0598      	lsls	r0, r3, #22
 80153de:	d402      	bmi.n	80153e6 <_puts_r+0x22>
 80153e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80153e2:	f000 f9f4 	bl	80157ce <__retarget_lock_acquire_recursive>
 80153e6:	89a3      	ldrh	r3, [r4, #12]
 80153e8:	0719      	lsls	r1, r3, #28
 80153ea:	d513      	bpl.n	8015414 <_puts_r+0x50>
 80153ec:	6923      	ldr	r3, [r4, #16]
 80153ee:	b18b      	cbz	r3, 8015414 <_puts_r+0x50>
 80153f0:	3e01      	subs	r6, #1
 80153f2:	68a3      	ldr	r3, [r4, #8]
 80153f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80153f8:	3b01      	subs	r3, #1
 80153fa:	60a3      	str	r3, [r4, #8]
 80153fc:	b9e9      	cbnz	r1, 801543a <_puts_r+0x76>
 80153fe:	2b00      	cmp	r3, #0
 8015400:	da2e      	bge.n	8015460 <_puts_r+0x9c>
 8015402:	4622      	mov	r2, r4
 8015404:	210a      	movs	r1, #10
 8015406:	4628      	mov	r0, r5
 8015408:	f000 f87b 	bl	8015502 <__swbuf_r>
 801540c:	3001      	adds	r0, #1
 801540e:	d007      	beq.n	8015420 <_puts_r+0x5c>
 8015410:	250a      	movs	r5, #10
 8015412:	e007      	b.n	8015424 <_puts_r+0x60>
 8015414:	4621      	mov	r1, r4
 8015416:	4628      	mov	r0, r5
 8015418:	f000 f8b0 	bl	801557c <__swsetup_r>
 801541c:	2800      	cmp	r0, #0
 801541e:	d0e7      	beq.n	80153f0 <_puts_r+0x2c>
 8015420:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015426:	07da      	lsls	r2, r3, #31
 8015428:	d405      	bmi.n	8015436 <_puts_r+0x72>
 801542a:	89a3      	ldrh	r3, [r4, #12]
 801542c:	059b      	lsls	r3, r3, #22
 801542e:	d402      	bmi.n	8015436 <_puts_r+0x72>
 8015430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015432:	f000 f9cd 	bl	80157d0 <__retarget_lock_release_recursive>
 8015436:	4628      	mov	r0, r5
 8015438:	bd70      	pop	{r4, r5, r6, pc}
 801543a:	2b00      	cmp	r3, #0
 801543c:	da04      	bge.n	8015448 <_puts_r+0x84>
 801543e:	69a2      	ldr	r2, [r4, #24]
 8015440:	429a      	cmp	r2, r3
 8015442:	dc06      	bgt.n	8015452 <_puts_r+0x8e>
 8015444:	290a      	cmp	r1, #10
 8015446:	d004      	beq.n	8015452 <_puts_r+0x8e>
 8015448:	6823      	ldr	r3, [r4, #0]
 801544a:	1c5a      	adds	r2, r3, #1
 801544c:	6022      	str	r2, [r4, #0]
 801544e:	7019      	strb	r1, [r3, #0]
 8015450:	e7cf      	b.n	80153f2 <_puts_r+0x2e>
 8015452:	4622      	mov	r2, r4
 8015454:	4628      	mov	r0, r5
 8015456:	f000 f854 	bl	8015502 <__swbuf_r>
 801545a:	3001      	adds	r0, #1
 801545c:	d1c9      	bne.n	80153f2 <_puts_r+0x2e>
 801545e:	e7df      	b.n	8015420 <_puts_r+0x5c>
 8015460:	6823      	ldr	r3, [r4, #0]
 8015462:	250a      	movs	r5, #10
 8015464:	1c5a      	adds	r2, r3, #1
 8015466:	6022      	str	r2, [r4, #0]
 8015468:	701d      	strb	r5, [r3, #0]
 801546a:	e7db      	b.n	8015424 <_puts_r+0x60>

0801546c <puts>:
 801546c:	4b02      	ldr	r3, [pc, #8]	; (8015478 <puts+0xc>)
 801546e:	4601      	mov	r1, r0
 8015470:	6818      	ldr	r0, [r3, #0]
 8015472:	f7ff bfa7 	b.w	80153c4 <_puts_r>
 8015476:	bf00      	nop
 8015478:	240000ac 	.word	0x240000ac

0801547c <__sread>:
 801547c:	b510      	push	{r4, lr}
 801547e:	460c      	mov	r4, r1
 8015480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015484:	f000 f930 	bl	80156e8 <_read_r>
 8015488:	2800      	cmp	r0, #0
 801548a:	bfab      	itete	ge
 801548c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801548e:	89a3      	ldrhlt	r3, [r4, #12]
 8015490:	181b      	addge	r3, r3, r0
 8015492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015496:	bfac      	ite	ge
 8015498:	6563      	strge	r3, [r4, #84]	; 0x54
 801549a:	81a3      	strhlt	r3, [r4, #12]
 801549c:	bd10      	pop	{r4, pc}

0801549e <__swrite>:
 801549e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154a2:	461f      	mov	r7, r3
 80154a4:	898b      	ldrh	r3, [r1, #12]
 80154a6:	05db      	lsls	r3, r3, #23
 80154a8:	4605      	mov	r5, r0
 80154aa:	460c      	mov	r4, r1
 80154ac:	4616      	mov	r6, r2
 80154ae:	d505      	bpl.n	80154bc <__swrite+0x1e>
 80154b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b4:	2302      	movs	r3, #2
 80154b6:	2200      	movs	r2, #0
 80154b8:	f000 f904 	bl	80156c4 <_lseek_r>
 80154bc:	89a3      	ldrh	r3, [r4, #12]
 80154be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80154c6:	81a3      	strh	r3, [r4, #12]
 80154c8:	4632      	mov	r2, r6
 80154ca:	463b      	mov	r3, r7
 80154cc:	4628      	mov	r0, r5
 80154ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80154d2:	f000 b93f 	b.w	8015754 <_write_r>

080154d6 <__sseek>:
 80154d6:	b510      	push	{r4, lr}
 80154d8:	460c      	mov	r4, r1
 80154da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154de:	f000 f8f1 	bl	80156c4 <_lseek_r>
 80154e2:	1c43      	adds	r3, r0, #1
 80154e4:	89a3      	ldrh	r3, [r4, #12]
 80154e6:	bf15      	itete	ne
 80154e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80154ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80154ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80154f2:	81a3      	strheq	r3, [r4, #12]
 80154f4:	bf18      	it	ne
 80154f6:	81a3      	strhne	r3, [r4, #12]
 80154f8:	bd10      	pop	{r4, pc}

080154fa <__sclose>:
 80154fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154fe:	f000 b8d1 	b.w	80156a4 <_close_r>

08015502 <__swbuf_r>:
 8015502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015504:	460e      	mov	r6, r1
 8015506:	4614      	mov	r4, r2
 8015508:	4605      	mov	r5, r0
 801550a:	b118      	cbz	r0, 8015514 <__swbuf_r+0x12>
 801550c:	6a03      	ldr	r3, [r0, #32]
 801550e:	b90b      	cbnz	r3, 8015514 <__swbuf_r+0x12>
 8015510:	f7ff ff10 	bl	8015334 <__sinit>
 8015514:	69a3      	ldr	r3, [r4, #24]
 8015516:	60a3      	str	r3, [r4, #8]
 8015518:	89a3      	ldrh	r3, [r4, #12]
 801551a:	071a      	lsls	r2, r3, #28
 801551c:	d525      	bpl.n	801556a <__swbuf_r+0x68>
 801551e:	6923      	ldr	r3, [r4, #16]
 8015520:	b31b      	cbz	r3, 801556a <__swbuf_r+0x68>
 8015522:	6823      	ldr	r3, [r4, #0]
 8015524:	6922      	ldr	r2, [r4, #16]
 8015526:	1a98      	subs	r0, r3, r2
 8015528:	6963      	ldr	r3, [r4, #20]
 801552a:	b2f6      	uxtb	r6, r6
 801552c:	4283      	cmp	r3, r0
 801552e:	4637      	mov	r7, r6
 8015530:	dc04      	bgt.n	801553c <__swbuf_r+0x3a>
 8015532:	4621      	mov	r1, r4
 8015534:	4628      	mov	r0, r5
 8015536:	f001 fce9 	bl	8016f0c <_fflush_r>
 801553a:	b9e0      	cbnz	r0, 8015576 <__swbuf_r+0x74>
 801553c:	68a3      	ldr	r3, [r4, #8]
 801553e:	3b01      	subs	r3, #1
 8015540:	60a3      	str	r3, [r4, #8]
 8015542:	6823      	ldr	r3, [r4, #0]
 8015544:	1c5a      	adds	r2, r3, #1
 8015546:	6022      	str	r2, [r4, #0]
 8015548:	701e      	strb	r6, [r3, #0]
 801554a:	6962      	ldr	r2, [r4, #20]
 801554c:	1c43      	adds	r3, r0, #1
 801554e:	429a      	cmp	r2, r3
 8015550:	d004      	beq.n	801555c <__swbuf_r+0x5a>
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	07db      	lsls	r3, r3, #31
 8015556:	d506      	bpl.n	8015566 <__swbuf_r+0x64>
 8015558:	2e0a      	cmp	r6, #10
 801555a:	d104      	bne.n	8015566 <__swbuf_r+0x64>
 801555c:	4621      	mov	r1, r4
 801555e:	4628      	mov	r0, r5
 8015560:	f001 fcd4 	bl	8016f0c <_fflush_r>
 8015564:	b938      	cbnz	r0, 8015576 <__swbuf_r+0x74>
 8015566:	4638      	mov	r0, r7
 8015568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801556a:	4621      	mov	r1, r4
 801556c:	4628      	mov	r0, r5
 801556e:	f000 f805 	bl	801557c <__swsetup_r>
 8015572:	2800      	cmp	r0, #0
 8015574:	d0d5      	beq.n	8015522 <__swbuf_r+0x20>
 8015576:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801557a:	e7f4      	b.n	8015566 <__swbuf_r+0x64>

0801557c <__swsetup_r>:
 801557c:	b538      	push	{r3, r4, r5, lr}
 801557e:	4b2a      	ldr	r3, [pc, #168]	; (8015628 <__swsetup_r+0xac>)
 8015580:	4605      	mov	r5, r0
 8015582:	6818      	ldr	r0, [r3, #0]
 8015584:	460c      	mov	r4, r1
 8015586:	b118      	cbz	r0, 8015590 <__swsetup_r+0x14>
 8015588:	6a03      	ldr	r3, [r0, #32]
 801558a:	b90b      	cbnz	r3, 8015590 <__swsetup_r+0x14>
 801558c:	f7ff fed2 	bl	8015334 <__sinit>
 8015590:	89a3      	ldrh	r3, [r4, #12]
 8015592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015596:	0718      	lsls	r0, r3, #28
 8015598:	d422      	bmi.n	80155e0 <__swsetup_r+0x64>
 801559a:	06d9      	lsls	r1, r3, #27
 801559c:	d407      	bmi.n	80155ae <__swsetup_r+0x32>
 801559e:	2309      	movs	r3, #9
 80155a0:	602b      	str	r3, [r5, #0]
 80155a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80155a6:	81a3      	strh	r3, [r4, #12]
 80155a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155ac:	e034      	b.n	8015618 <__swsetup_r+0x9c>
 80155ae:	0758      	lsls	r0, r3, #29
 80155b0:	d512      	bpl.n	80155d8 <__swsetup_r+0x5c>
 80155b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155b4:	b141      	cbz	r1, 80155c8 <__swsetup_r+0x4c>
 80155b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80155ba:	4299      	cmp	r1, r3
 80155bc:	d002      	beq.n	80155c4 <__swsetup_r+0x48>
 80155be:	4628      	mov	r0, r5
 80155c0:	f000 ff0a 	bl	80163d8 <_free_r>
 80155c4:	2300      	movs	r3, #0
 80155c6:	6363      	str	r3, [r4, #52]	; 0x34
 80155c8:	89a3      	ldrh	r3, [r4, #12]
 80155ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80155ce:	81a3      	strh	r3, [r4, #12]
 80155d0:	2300      	movs	r3, #0
 80155d2:	6063      	str	r3, [r4, #4]
 80155d4:	6923      	ldr	r3, [r4, #16]
 80155d6:	6023      	str	r3, [r4, #0]
 80155d8:	89a3      	ldrh	r3, [r4, #12]
 80155da:	f043 0308 	orr.w	r3, r3, #8
 80155de:	81a3      	strh	r3, [r4, #12]
 80155e0:	6923      	ldr	r3, [r4, #16]
 80155e2:	b94b      	cbnz	r3, 80155f8 <__swsetup_r+0x7c>
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80155ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80155ee:	d003      	beq.n	80155f8 <__swsetup_r+0x7c>
 80155f0:	4621      	mov	r1, r4
 80155f2:	4628      	mov	r0, r5
 80155f4:	f001 fcd8 	bl	8016fa8 <__smakebuf_r>
 80155f8:	89a0      	ldrh	r0, [r4, #12]
 80155fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155fe:	f010 0301 	ands.w	r3, r0, #1
 8015602:	d00a      	beq.n	801561a <__swsetup_r+0x9e>
 8015604:	2300      	movs	r3, #0
 8015606:	60a3      	str	r3, [r4, #8]
 8015608:	6963      	ldr	r3, [r4, #20]
 801560a:	425b      	negs	r3, r3
 801560c:	61a3      	str	r3, [r4, #24]
 801560e:	6923      	ldr	r3, [r4, #16]
 8015610:	b943      	cbnz	r3, 8015624 <__swsetup_r+0xa8>
 8015612:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015616:	d1c4      	bne.n	80155a2 <__swsetup_r+0x26>
 8015618:	bd38      	pop	{r3, r4, r5, pc}
 801561a:	0781      	lsls	r1, r0, #30
 801561c:	bf58      	it	pl
 801561e:	6963      	ldrpl	r3, [r4, #20]
 8015620:	60a3      	str	r3, [r4, #8]
 8015622:	e7f4      	b.n	801560e <__swsetup_r+0x92>
 8015624:	2000      	movs	r0, #0
 8015626:	e7f7      	b.n	8015618 <__swsetup_r+0x9c>
 8015628:	240000ac 	.word	0x240000ac

0801562c <memset>:
 801562c:	4402      	add	r2, r0
 801562e:	4603      	mov	r3, r0
 8015630:	4293      	cmp	r3, r2
 8015632:	d100      	bne.n	8015636 <memset+0xa>
 8015634:	4770      	bx	lr
 8015636:	f803 1b01 	strb.w	r1, [r3], #1
 801563a:	e7f9      	b.n	8015630 <memset+0x4>

0801563c <_raise_r>:
 801563c:	291f      	cmp	r1, #31
 801563e:	b538      	push	{r3, r4, r5, lr}
 8015640:	4604      	mov	r4, r0
 8015642:	460d      	mov	r5, r1
 8015644:	d904      	bls.n	8015650 <_raise_r+0x14>
 8015646:	2316      	movs	r3, #22
 8015648:	6003      	str	r3, [r0, #0]
 801564a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801564e:	bd38      	pop	{r3, r4, r5, pc}
 8015650:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015652:	b112      	cbz	r2, 801565a <_raise_r+0x1e>
 8015654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015658:	b94b      	cbnz	r3, 801566e <_raise_r+0x32>
 801565a:	4620      	mov	r0, r4
 801565c:	f000 f868 	bl	8015730 <_getpid_r>
 8015660:	462a      	mov	r2, r5
 8015662:	4601      	mov	r1, r0
 8015664:	4620      	mov	r0, r4
 8015666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801566a:	f000 b84f 	b.w	801570c <_kill_r>
 801566e:	2b01      	cmp	r3, #1
 8015670:	d00a      	beq.n	8015688 <_raise_r+0x4c>
 8015672:	1c59      	adds	r1, r3, #1
 8015674:	d103      	bne.n	801567e <_raise_r+0x42>
 8015676:	2316      	movs	r3, #22
 8015678:	6003      	str	r3, [r0, #0]
 801567a:	2001      	movs	r0, #1
 801567c:	e7e7      	b.n	801564e <_raise_r+0x12>
 801567e:	2400      	movs	r4, #0
 8015680:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015684:	4628      	mov	r0, r5
 8015686:	4798      	blx	r3
 8015688:	2000      	movs	r0, #0
 801568a:	e7e0      	b.n	801564e <_raise_r+0x12>

0801568c <raise>:
 801568c:	4b02      	ldr	r3, [pc, #8]	; (8015698 <raise+0xc>)
 801568e:	4601      	mov	r1, r0
 8015690:	6818      	ldr	r0, [r3, #0]
 8015692:	f7ff bfd3 	b.w	801563c <_raise_r>
 8015696:	bf00      	nop
 8015698:	240000ac 	.word	0x240000ac

0801569c <_localeconv_r>:
 801569c:	4800      	ldr	r0, [pc, #0]	; (80156a0 <_localeconv_r+0x4>)
 801569e:	4770      	bx	lr
 80156a0:	240001a0 	.word	0x240001a0

080156a4 <_close_r>:
 80156a4:	b538      	push	{r3, r4, r5, lr}
 80156a6:	4d06      	ldr	r5, [pc, #24]	; (80156c0 <_close_r+0x1c>)
 80156a8:	2300      	movs	r3, #0
 80156aa:	4604      	mov	r4, r0
 80156ac:	4608      	mov	r0, r1
 80156ae:	602b      	str	r3, [r5, #0]
 80156b0:	f7f1 fc81 	bl	8006fb6 <_close>
 80156b4:	1c43      	adds	r3, r0, #1
 80156b6:	d102      	bne.n	80156be <_close_r+0x1a>
 80156b8:	682b      	ldr	r3, [r5, #0]
 80156ba:	b103      	cbz	r3, 80156be <_close_r+0x1a>
 80156bc:	6023      	str	r3, [r4, #0]
 80156be:	bd38      	pop	{r3, r4, r5, pc}
 80156c0:	24004794 	.word	0x24004794

080156c4 <_lseek_r>:
 80156c4:	b538      	push	{r3, r4, r5, lr}
 80156c6:	4d07      	ldr	r5, [pc, #28]	; (80156e4 <_lseek_r+0x20>)
 80156c8:	4604      	mov	r4, r0
 80156ca:	4608      	mov	r0, r1
 80156cc:	4611      	mov	r1, r2
 80156ce:	2200      	movs	r2, #0
 80156d0:	602a      	str	r2, [r5, #0]
 80156d2:	461a      	mov	r2, r3
 80156d4:	f7f1 fc96 	bl	8007004 <_lseek>
 80156d8:	1c43      	adds	r3, r0, #1
 80156da:	d102      	bne.n	80156e2 <_lseek_r+0x1e>
 80156dc:	682b      	ldr	r3, [r5, #0]
 80156de:	b103      	cbz	r3, 80156e2 <_lseek_r+0x1e>
 80156e0:	6023      	str	r3, [r4, #0]
 80156e2:	bd38      	pop	{r3, r4, r5, pc}
 80156e4:	24004794 	.word	0x24004794

080156e8 <_read_r>:
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	4d07      	ldr	r5, [pc, #28]	; (8015708 <_read_r+0x20>)
 80156ec:	4604      	mov	r4, r0
 80156ee:	4608      	mov	r0, r1
 80156f0:	4611      	mov	r1, r2
 80156f2:	2200      	movs	r2, #0
 80156f4:	602a      	str	r2, [r5, #0]
 80156f6:	461a      	mov	r2, r3
 80156f8:	f7f1 fc24 	bl	8006f44 <_read>
 80156fc:	1c43      	adds	r3, r0, #1
 80156fe:	d102      	bne.n	8015706 <_read_r+0x1e>
 8015700:	682b      	ldr	r3, [r5, #0]
 8015702:	b103      	cbz	r3, 8015706 <_read_r+0x1e>
 8015704:	6023      	str	r3, [r4, #0]
 8015706:	bd38      	pop	{r3, r4, r5, pc}
 8015708:	24004794 	.word	0x24004794

0801570c <_kill_r>:
 801570c:	b538      	push	{r3, r4, r5, lr}
 801570e:	4d07      	ldr	r5, [pc, #28]	; (801572c <_kill_r+0x20>)
 8015710:	2300      	movs	r3, #0
 8015712:	4604      	mov	r4, r0
 8015714:	4608      	mov	r0, r1
 8015716:	4611      	mov	r1, r2
 8015718:	602b      	str	r3, [r5, #0]
 801571a:	f7f1 fbf9 	bl	8006f10 <_kill>
 801571e:	1c43      	adds	r3, r0, #1
 8015720:	d102      	bne.n	8015728 <_kill_r+0x1c>
 8015722:	682b      	ldr	r3, [r5, #0]
 8015724:	b103      	cbz	r3, 8015728 <_kill_r+0x1c>
 8015726:	6023      	str	r3, [r4, #0]
 8015728:	bd38      	pop	{r3, r4, r5, pc}
 801572a:	bf00      	nop
 801572c:	24004794 	.word	0x24004794

08015730 <_getpid_r>:
 8015730:	f7f1 bbe6 	b.w	8006f00 <_getpid>

08015734 <_sbrk_r>:
 8015734:	b538      	push	{r3, r4, r5, lr}
 8015736:	4d06      	ldr	r5, [pc, #24]	; (8015750 <_sbrk_r+0x1c>)
 8015738:	2300      	movs	r3, #0
 801573a:	4604      	mov	r4, r0
 801573c:	4608      	mov	r0, r1
 801573e:	602b      	str	r3, [r5, #0]
 8015740:	f7f1 fc6e 	bl	8007020 <_sbrk>
 8015744:	1c43      	adds	r3, r0, #1
 8015746:	d102      	bne.n	801574e <_sbrk_r+0x1a>
 8015748:	682b      	ldr	r3, [r5, #0]
 801574a:	b103      	cbz	r3, 801574e <_sbrk_r+0x1a>
 801574c:	6023      	str	r3, [r4, #0]
 801574e:	bd38      	pop	{r3, r4, r5, pc}
 8015750:	24004794 	.word	0x24004794

08015754 <_write_r>:
 8015754:	b538      	push	{r3, r4, r5, lr}
 8015756:	4d07      	ldr	r5, [pc, #28]	; (8015774 <_write_r+0x20>)
 8015758:	4604      	mov	r4, r0
 801575a:	4608      	mov	r0, r1
 801575c:	4611      	mov	r1, r2
 801575e:	2200      	movs	r2, #0
 8015760:	602a      	str	r2, [r5, #0]
 8015762:	461a      	mov	r2, r3
 8015764:	f7f1 fc0b 	bl	8006f7e <_write>
 8015768:	1c43      	adds	r3, r0, #1
 801576a:	d102      	bne.n	8015772 <_write_r+0x1e>
 801576c:	682b      	ldr	r3, [r5, #0]
 801576e:	b103      	cbz	r3, 8015772 <_write_r+0x1e>
 8015770:	6023      	str	r3, [r4, #0]
 8015772:	bd38      	pop	{r3, r4, r5, pc}
 8015774:	24004794 	.word	0x24004794

08015778 <__errno>:
 8015778:	4b01      	ldr	r3, [pc, #4]	; (8015780 <__errno+0x8>)
 801577a:	6818      	ldr	r0, [r3, #0]
 801577c:	4770      	bx	lr
 801577e:	bf00      	nop
 8015780:	240000ac 	.word	0x240000ac

08015784 <__libc_init_array>:
 8015784:	b570      	push	{r4, r5, r6, lr}
 8015786:	4d0d      	ldr	r5, [pc, #52]	; (80157bc <__libc_init_array+0x38>)
 8015788:	4c0d      	ldr	r4, [pc, #52]	; (80157c0 <__libc_init_array+0x3c>)
 801578a:	1b64      	subs	r4, r4, r5
 801578c:	10a4      	asrs	r4, r4, #2
 801578e:	2600      	movs	r6, #0
 8015790:	42a6      	cmp	r6, r4
 8015792:	d109      	bne.n	80157a8 <__libc_init_array+0x24>
 8015794:	4d0b      	ldr	r5, [pc, #44]	; (80157c4 <__libc_init_array+0x40>)
 8015796:	4c0c      	ldr	r4, [pc, #48]	; (80157c8 <__libc_init_array+0x44>)
 8015798:	f001 fcca 	bl	8017130 <_init>
 801579c:	1b64      	subs	r4, r4, r5
 801579e:	10a4      	asrs	r4, r4, #2
 80157a0:	2600      	movs	r6, #0
 80157a2:	42a6      	cmp	r6, r4
 80157a4:	d105      	bne.n	80157b2 <__libc_init_array+0x2e>
 80157a6:	bd70      	pop	{r4, r5, r6, pc}
 80157a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80157ac:	4798      	blx	r3
 80157ae:	3601      	adds	r6, #1
 80157b0:	e7ee      	b.n	8015790 <__libc_init_array+0xc>
 80157b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80157b6:	4798      	blx	r3
 80157b8:	3601      	adds	r6, #1
 80157ba:	e7f2      	b.n	80157a2 <__libc_init_array+0x1e>
 80157bc:	08017a34 	.word	0x08017a34
 80157c0:	08017a34 	.word	0x08017a34
 80157c4:	08017a34 	.word	0x08017a34
 80157c8:	08017a40 	.word	0x08017a40

080157cc <__retarget_lock_init_recursive>:
 80157cc:	4770      	bx	lr

080157ce <__retarget_lock_acquire_recursive>:
 80157ce:	4770      	bx	lr

080157d0 <__retarget_lock_release_recursive>:
 80157d0:	4770      	bx	lr

080157d2 <memcpy>:
 80157d2:	440a      	add	r2, r1
 80157d4:	4291      	cmp	r1, r2
 80157d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80157da:	d100      	bne.n	80157de <memcpy+0xc>
 80157dc:	4770      	bx	lr
 80157de:	b510      	push	{r4, lr}
 80157e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80157e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80157e8:	4291      	cmp	r1, r2
 80157ea:	d1f9      	bne.n	80157e0 <memcpy+0xe>
 80157ec:	bd10      	pop	{r4, pc}

080157ee <quorem>:
 80157ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157f2:	6903      	ldr	r3, [r0, #16]
 80157f4:	690c      	ldr	r4, [r1, #16]
 80157f6:	42a3      	cmp	r3, r4
 80157f8:	4607      	mov	r7, r0
 80157fa:	db7e      	blt.n	80158fa <quorem+0x10c>
 80157fc:	3c01      	subs	r4, #1
 80157fe:	f101 0814 	add.w	r8, r1, #20
 8015802:	f100 0514 	add.w	r5, r0, #20
 8015806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801580a:	9301      	str	r3, [sp, #4]
 801580c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015814:	3301      	adds	r3, #1
 8015816:	429a      	cmp	r2, r3
 8015818:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801581c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015820:	fbb2 f6f3 	udiv	r6, r2, r3
 8015824:	d331      	bcc.n	801588a <quorem+0x9c>
 8015826:	f04f 0e00 	mov.w	lr, #0
 801582a:	4640      	mov	r0, r8
 801582c:	46ac      	mov	ip, r5
 801582e:	46f2      	mov	sl, lr
 8015830:	f850 2b04 	ldr.w	r2, [r0], #4
 8015834:	b293      	uxth	r3, r2
 8015836:	fb06 e303 	mla	r3, r6, r3, lr
 801583a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801583e:	0c1a      	lsrs	r2, r3, #16
 8015840:	b29b      	uxth	r3, r3
 8015842:	ebaa 0303 	sub.w	r3, sl, r3
 8015846:	f8dc a000 	ldr.w	sl, [ip]
 801584a:	fa13 f38a 	uxtah	r3, r3, sl
 801584e:	fb06 220e 	mla	r2, r6, lr, r2
 8015852:	9300      	str	r3, [sp, #0]
 8015854:	9b00      	ldr	r3, [sp, #0]
 8015856:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801585a:	b292      	uxth	r2, r2
 801585c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015864:	f8bd 3000 	ldrh.w	r3, [sp]
 8015868:	4581      	cmp	r9, r0
 801586a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801586e:	f84c 3b04 	str.w	r3, [ip], #4
 8015872:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015876:	d2db      	bcs.n	8015830 <quorem+0x42>
 8015878:	f855 300b 	ldr.w	r3, [r5, fp]
 801587c:	b92b      	cbnz	r3, 801588a <quorem+0x9c>
 801587e:	9b01      	ldr	r3, [sp, #4]
 8015880:	3b04      	subs	r3, #4
 8015882:	429d      	cmp	r5, r3
 8015884:	461a      	mov	r2, r3
 8015886:	d32c      	bcc.n	80158e2 <quorem+0xf4>
 8015888:	613c      	str	r4, [r7, #16]
 801588a:	4638      	mov	r0, r7
 801588c:	f001 f86c 	bl	8016968 <__mcmp>
 8015890:	2800      	cmp	r0, #0
 8015892:	db22      	blt.n	80158da <quorem+0xec>
 8015894:	3601      	adds	r6, #1
 8015896:	4629      	mov	r1, r5
 8015898:	2000      	movs	r0, #0
 801589a:	f858 2b04 	ldr.w	r2, [r8], #4
 801589e:	f8d1 c000 	ldr.w	ip, [r1]
 80158a2:	b293      	uxth	r3, r2
 80158a4:	1ac3      	subs	r3, r0, r3
 80158a6:	0c12      	lsrs	r2, r2, #16
 80158a8:	fa13 f38c 	uxtah	r3, r3, ip
 80158ac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80158b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158b4:	b29b      	uxth	r3, r3
 80158b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158ba:	45c1      	cmp	r9, r8
 80158bc:	f841 3b04 	str.w	r3, [r1], #4
 80158c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80158c4:	d2e9      	bcs.n	801589a <quorem+0xac>
 80158c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80158ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80158ce:	b922      	cbnz	r2, 80158da <quorem+0xec>
 80158d0:	3b04      	subs	r3, #4
 80158d2:	429d      	cmp	r5, r3
 80158d4:	461a      	mov	r2, r3
 80158d6:	d30a      	bcc.n	80158ee <quorem+0x100>
 80158d8:	613c      	str	r4, [r7, #16]
 80158da:	4630      	mov	r0, r6
 80158dc:	b003      	add	sp, #12
 80158de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e2:	6812      	ldr	r2, [r2, #0]
 80158e4:	3b04      	subs	r3, #4
 80158e6:	2a00      	cmp	r2, #0
 80158e8:	d1ce      	bne.n	8015888 <quorem+0x9a>
 80158ea:	3c01      	subs	r4, #1
 80158ec:	e7c9      	b.n	8015882 <quorem+0x94>
 80158ee:	6812      	ldr	r2, [r2, #0]
 80158f0:	3b04      	subs	r3, #4
 80158f2:	2a00      	cmp	r2, #0
 80158f4:	d1f0      	bne.n	80158d8 <quorem+0xea>
 80158f6:	3c01      	subs	r4, #1
 80158f8:	e7eb      	b.n	80158d2 <quorem+0xe4>
 80158fa:	2000      	movs	r0, #0
 80158fc:	e7ee      	b.n	80158dc <quorem+0xee>
	...

08015900 <_dtoa_r>:
 8015900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015904:	ed2d 8b02 	vpush	{d8}
 8015908:	69c5      	ldr	r5, [r0, #28]
 801590a:	b091      	sub	sp, #68	; 0x44
 801590c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015910:	ec59 8b10 	vmov	r8, r9, d0
 8015914:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015916:	9106      	str	r1, [sp, #24]
 8015918:	4606      	mov	r6, r0
 801591a:	9208      	str	r2, [sp, #32]
 801591c:	930c      	str	r3, [sp, #48]	; 0x30
 801591e:	b975      	cbnz	r5, 801593e <_dtoa_r+0x3e>
 8015920:	2010      	movs	r0, #16
 8015922:	f7fe ff53 	bl	80147cc <malloc>
 8015926:	4602      	mov	r2, r0
 8015928:	61f0      	str	r0, [r6, #28]
 801592a:	b920      	cbnz	r0, 8015936 <_dtoa_r+0x36>
 801592c:	4ba6      	ldr	r3, [pc, #664]	; (8015bc8 <_dtoa_r+0x2c8>)
 801592e:	21ef      	movs	r1, #239	; 0xef
 8015930:	48a6      	ldr	r0, [pc, #664]	; (8015bcc <_dtoa_r+0x2cc>)
 8015932:	f001 fb97 	bl	8017064 <__assert_func>
 8015936:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801593a:	6005      	str	r5, [r0, #0]
 801593c:	60c5      	str	r5, [r0, #12]
 801593e:	69f3      	ldr	r3, [r6, #28]
 8015940:	6819      	ldr	r1, [r3, #0]
 8015942:	b151      	cbz	r1, 801595a <_dtoa_r+0x5a>
 8015944:	685a      	ldr	r2, [r3, #4]
 8015946:	604a      	str	r2, [r1, #4]
 8015948:	2301      	movs	r3, #1
 801594a:	4093      	lsls	r3, r2
 801594c:	608b      	str	r3, [r1, #8]
 801594e:	4630      	mov	r0, r6
 8015950:	f000 fdce 	bl	80164f0 <_Bfree>
 8015954:	69f3      	ldr	r3, [r6, #28]
 8015956:	2200      	movs	r2, #0
 8015958:	601a      	str	r2, [r3, #0]
 801595a:	f1b9 0300 	subs.w	r3, r9, #0
 801595e:	bfbb      	ittet	lt
 8015960:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015964:	9303      	strlt	r3, [sp, #12]
 8015966:	2300      	movge	r3, #0
 8015968:	2201      	movlt	r2, #1
 801596a:	bfac      	ite	ge
 801596c:	6023      	strge	r3, [r4, #0]
 801596e:	6022      	strlt	r2, [r4, #0]
 8015970:	4b97      	ldr	r3, [pc, #604]	; (8015bd0 <_dtoa_r+0x2d0>)
 8015972:	9c03      	ldr	r4, [sp, #12]
 8015974:	43a3      	bics	r3, r4
 8015976:	d11c      	bne.n	80159b2 <_dtoa_r+0xb2>
 8015978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801597a:	f242 730f 	movw	r3, #9999	; 0x270f
 801597e:	6013      	str	r3, [r2, #0]
 8015980:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015984:	ea53 0308 	orrs.w	r3, r3, r8
 8015988:	f000 84fb 	beq.w	8016382 <_dtoa_r+0xa82>
 801598c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801598e:	b963      	cbnz	r3, 80159aa <_dtoa_r+0xaa>
 8015990:	4b90      	ldr	r3, [pc, #576]	; (8015bd4 <_dtoa_r+0x2d4>)
 8015992:	e020      	b.n	80159d6 <_dtoa_r+0xd6>
 8015994:	4b90      	ldr	r3, [pc, #576]	; (8015bd8 <_dtoa_r+0x2d8>)
 8015996:	9301      	str	r3, [sp, #4]
 8015998:	3308      	adds	r3, #8
 801599a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801599c:	6013      	str	r3, [r2, #0]
 801599e:	9801      	ldr	r0, [sp, #4]
 80159a0:	b011      	add	sp, #68	; 0x44
 80159a2:	ecbd 8b02 	vpop	{d8}
 80159a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159aa:	4b8a      	ldr	r3, [pc, #552]	; (8015bd4 <_dtoa_r+0x2d4>)
 80159ac:	9301      	str	r3, [sp, #4]
 80159ae:	3303      	adds	r3, #3
 80159b0:	e7f3      	b.n	801599a <_dtoa_r+0x9a>
 80159b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80159b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80159ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159be:	d10c      	bne.n	80159da <_dtoa_r+0xda>
 80159c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159c2:	2301      	movs	r3, #1
 80159c4:	6013      	str	r3, [r2, #0]
 80159c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	f000 84d7 	beq.w	801637c <_dtoa_r+0xa7c>
 80159ce:	4b83      	ldr	r3, [pc, #524]	; (8015bdc <_dtoa_r+0x2dc>)
 80159d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80159d2:	6013      	str	r3, [r2, #0]
 80159d4:	3b01      	subs	r3, #1
 80159d6:	9301      	str	r3, [sp, #4]
 80159d8:	e7e1      	b.n	801599e <_dtoa_r+0x9e>
 80159da:	aa0e      	add	r2, sp, #56	; 0x38
 80159dc:	a90f      	add	r1, sp, #60	; 0x3c
 80159de:	4630      	mov	r0, r6
 80159e0:	eeb0 0b48 	vmov.f64	d0, d8
 80159e4:	f001 f866 	bl	8016ab4 <__d2b>
 80159e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80159ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159ee:	4605      	mov	r5, r0
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d046      	beq.n	8015a82 <_dtoa_r+0x182>
 80159f4:	eeb0 7b48 	vmov.f64	d7, d8
 80159f8:	ee18 1a90 	vmov	r1, s17
 80159fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015a00:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8015a04:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015a08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015a0c:	2000      	movs	r0, #0
 8015a0e:	ee07 1a90 	vmov	s15, r1
 8015a12:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8015a16:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015bb0 <_dtoa_r+0x2b0>
 8015a1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a1e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015bb8 <_dtoa_r+0x2b8>
 8015a22:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015a26:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015bc0 <_dtoa_r+0x2c0>
 8015a2a:	ee07 3a90 	vmov	s15, r3
 8015a2e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015a32:	eeb0 7b46 	vmov.f64	d7, d6
 8015a36:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015a3a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015a3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a46:	ee16 ba90 	vmov	fp, s13
 8015a4a:	9009      	str	r0, [sp, #36]	; 0x24
 8015a4c:	d508      	bpl.n	8015a60 <_dtoa_r+0x160>
 8015a4e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015a52:	eeb4 6b47 	vcmp.f64	d6, d7
 8015a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a5a:	bf18      	it	ne
 8015a5c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8015a60:	f1bb 0f16 	cmp.w	fp, #22
 8015a64:	d82b      	bhi.n	8015abe <_dtoa_r+0x1be>
 8015a66:	495e      	ldr	r1, [pc, #376]	; (8015be0 <_dtoa_r+0x2e0>)
 8015a68:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8015a6c:	ed91 7b00 	vldr	d7, [r1]
 8015a70:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a78:	d501      	bpl.n	8015a7e <_dtoa_r+0x17e>
 8015a7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015a7e:	2100      	movs	r1, #0
 8015a80:	e01e      	b.n	8015ac0 <_dtoa_r+0x1c0>
 8015a82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a84:	4413      	add	r3, r2
 8015a86:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8015a8a:	2920      	cmp	r1, #32
 8015a8c:	bfc1      	itttt	gt
 8015a8e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8015a92:	408c      	lslgt	r4, r1
 8015a94:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8015a98:	fa28 f101 	lsrgt.w	r1, r8, r1
 8015a9c:	bfd6      	itet	le
 8015a9e:	f1c1 0120 	rsble	r1, r1, #32
 8015aa2:	4321      	orrgt	r1, r4
 8015aa4:	fa08 f101 	lslle.w	r1, r8, r1
 8015aa8:	ee07 1a90 	vmov	s15, r1
 8015aac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015ab0:	3b01      	subs	r3, #1
 8015ab2:	ee17 1a90 	vmov	r1, s15
 8015ab6:	2001      	movs	r0, #1
 8015ab8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8015abc:	e7a7      	b.n	8015a0e <_dtoa_r+0x10e>
 8015abe:	2101      	movs	r1, #1
 8015ac0:	1ad2      	subs	r2, r2, r3
 8015ac2:	1e53      	subs	r3, r2, #1
 8015ac4:	9305      	str	r3, [sp, #20]
 8015ac6:	bf45      	ittet	mi
 8015ac8:	f1c2 0301 	rsbmi	r3, r2, #1
 8015acc:	9304      	strmi	r3, [sp, #16]
 8015ace:	2300      	movpl	r3, #0
 8015ad0:	2300      	movmi	r3, #0
 8015ad2:	bf4c      	ite	mi
 8015ad4:	9305      	strmi	r3, [sp, #20]
 8015ad6:	9304      	strpl	r3, [sp, #16]
 8015ad8:	f1bb 0f00 	cmp.w	fp, #0
 8015adc:	910b      	str	r1, [sp, #44]	; 0x2c
 8015ade:	db18      	blt.n	8015b12 <_dtoa_r+0x212>
 8015ae0:	9b05      	ldr	r3, [sp, #20]
 8015ae2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015ae6:	445b      	add	r3, fp
 8015ae8:	9305      	str	r3, [sp, #20]
 8015aea:	2300      	movs	r3, #0
 8015aec:	9a06      	ldr	r2, [sp, #24]
 8015aee:	2a09      	cmp	r2, #9
 8015af0:	d848      	bhi.n	8015b84 <_dtoa_r+0x284>
 8015af2:	2a05      	cmp	r2, #5
 8015af4:	bfc4      	itt	gt
 8015af6:	3a04      	subgt	r2, #4
 8015af8:	9206      	strgt	r2, [sp, #24]
 8015afa:	9a06      	ldr	r2, [sp, #24]
 8015afc:	f1a2 0202 	sub.w	r2, r2, #2
 8015b00:	bfcc      	ite	gt
 8015b02:	2400      	movgt	r4, #0
 8015b04:	2401      	movle	r4, #1
 8015b06:	2a03      	cmp	r2, #3
 8015b08:	d847      	bhi.n	8015b9a <_dtoa_r+0x29a>
 8015b0a:	e8df f002 	tbb	[pc, r2]
 8015b0e:	2d0b      	.short	0x2d0b
 8015b10:	392b      	.short	0x392b
 8015b12:	9b04      	ldr	r3, [sp, #16]
 8015b14:	2200      	movs	r2, #0
 8015b16:	eba3 030b 	sub.w	r3, r3, fp
 8015b1a:	9304      	str	r3, [sp, #16]
 8015b1c:	920a      	str	r2, [sp, #40]	; 0x28
 8015b1e:	f1cb 0300 	rsb	r3, fp, #0
 8015b22:	e7e3      	b.n	8015aec <_dtoa_r+0x1ec>
 8015b24:	2200      	movs	r2, #0
 8015b26:	9207      	str	r2, [sp, #28]
 8015b28:	9a08      	ldr	r2, [sp, #32]
 8015b2a:	2a00      	cmp	r2, #0
 8015b2c:	dc38      	bgt.n	8015ba0 <_dtoa_r+0x2a0>
 8015b2e:	f04f 0a01 	mov.w	sl, #1
 8015b32:	46d1      	mov	r9, sl
 8015b34:	4652      	mov	r2, sl
 8015b36:	f8cd a020 	str.w	sl, [sp, #32]
 8015b3a:	69f7      	ldr	r7, [r6, #28]
 8015b3c:	2100      	movs	r1, #0
 8015b3e:	2004      	movs	r0, #4
 8015b40:	f100 0c14 	add.w	ip, r0, #20
 8015b44:	4594      	cmp	ip, r2
 8015b46:	d930      	bls.n	8015baa <_dtoa_r+0x2aa>
 8015b48:	6079      	str	r1, [r7, #4]
 8015b4a:	4630      	mov	r0, r6
 8015b4c:	930d      	str	r3, [sp, #52]	; 0x34
 8015b4e:	f000 fc8f 	bl	8016470 <_Balloc>
 8015b52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b54:	9001      	str	r0, [sp, #4]
 8015b56:	4602      	mov	r2, r0
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d145      	bne.n	8015be8 <_dtoa_r+0x2e8>
 8015b5c:	4b21      	ldr	r3, [pc, #132]	; (8015be4 <_dtoa_r+0x2e4>)
 8015b5e:	f240 11af 	movw	r1, #431	; 0x1af
 8015b62:	e6e5      	b.n	8015930 <_dtoa_r+0x30>
 8015b64:	2201      	movs	r2, #1
 8015b66:	e7de      	b.n	8015b26 <_dtoa_r+0x226>
 8015b68:	2200      	movs	r2, #0
 8015b6a:	9207      	str	r2, [sp, #28]
 8015b6c:	9a08      	ldr	r2, [sp, #32]
 8015b6e:	eb0b 0a02 	add.w	sl, fp, r2
 8015b72:	f10a 0901 	add.w	r9, sl, #1
 8015b76:	464a      	mov	r2, r9
 8015b78:	2a01      	cmp	r2, #1
 8015b7a:	bfb8      	it	lt
 8015b7c:	2201      	movlt	r2, #1
 8015b7e:	e7dc      	b.n	8015b3a <_dtoa_r+0x23a>
 8015b80:	2201      	movs	r2, #1
 8015b82:	e7f2      	b.n	8015b6a <_dtoa_r+0x26a>
 8015b84:	2401      	movs	r4, #1
 8015b86:	2200      	movs	r2, #0
 8015b88:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015b8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015b90:	2100      	movs	r1, #0
 8015b92:	46d1      	mov	r9, sl
 8015b94:	2212      	movs	r2, #18
 8015b96:	9108      	str	r1, [sp, #32]
 8015b98:	e7cf      	b.n	8015b3a <_dtoa_r+0x23a>
 8015b9a:	2201      	movs	r2, #1
 8015b9c:	9207      	str	r2, [sp, #28]
 8015b9e:	e7f5      	b.n	8015b8c <_dtoa_r+0x28c>
 8015ba0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015ba4:	46d1      	mov	r9, sl
 8015ba6:	4652      	mov	r2, sl
 8015ba8:	e7c7      	b.n	8015b3a <_dtoa_r+0x23a>
 8015baa:	3101      	adds	r1, #1
 8015bac:	0040      	lsls	r0, r0, #1
 8015bae:	e7c7      	b.n	8015b40 <_dtoa_r+0x240>
 8015bb0:	636f4361 	.word	0x636f4361
 8015bb4:	3fd287a7 	.word	0x3fd287a7
 8015bb8:	8b60c8b3 	.word	0x8b60c8b3
 8015bbc:	3fc68a28 	.word	0x3fc68a28
 8015bc0:	509f79fb 	.word	0x509f79fb
 8015bc4:	3fd34413 	.word	0x3fd34413
 8015bc8:	080176f9 	.word	0x080176f9
 8015bcc:	08017710 	.word	0x08017710
 8015bd0:	7ff00000 	.word	0x7ff00000
 8015bd4:	080176f5 	.word	0x080176f5
 8015bd8:	080176ec 	.word	0x080176ec
 8015bdc:	080176c9 	.word	0x080176c9
 8015be0:	08017800 	.word	0x08017800
 8015be4:	08017768 	.word	0x08017768
 8015be8:	69f2      	ldr	r2, [r6, #28]
 8015bea:	9901      	ldr	r1, [sp, #4]
 8015bec:	6011      	str	r1, [r2, #0]
 8015bee:	f1b9 0f0e 	cmp.w	r9, #14
 8015bf2:	d86c      	bhi.n	8015cce <_dtoa_r+0x3ce>
 8015bf4:	2c00      	cmp	r4, #0
 8015bf6:	d06a      	beq.n	8015cce <_dtoa_r+0x3ce>
 8015bf8:	f1bb 0f00 	cmp.w	fp, #0
 8015bfc:	f340 80a0 	ble.w	8015d40 <_dtoa_r+0x440>
 8015c00:	4ac1      	ldr	r2, [pc, #772]	; (8015f08 <_dtoa_r+0x608>)
 8015c02:	f00b 010f 	and.w	r1, fp, #15
 8015c06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015c0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015c0e:	ed92 7b00 	vldr	d7, [r2]
 8015c12:	ea4f 122b 	mov.w	r2, fp, asr #4
 8015c16:	f000 8087 	beq.w	8015d28 <_dtoa_r+0x428>
 8015c1a:	49bc      	ldr	r1, [pc, #752]	; (8015f0c <_dtoa_r+0x60c>)
 8015c1c:	ed91 6b08 	vldr	d6, [r1, #32]
 8015c20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015c24:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015c28:	f002 020f 	and.w	r2, r2, #15
 8015c2c:	2103      	movs	r1, #3
 8015c2e:	48b7      	ldr	r0, [pc, #732]	; (8015f0c <_dtoa_r+0x60c>)
 8015c30:	2a00      	cmp	r2, #0
 8015c32:	d17b      	bne.n	8015d2c <_dtoa_r+0x42c>
 8015c34:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c38:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015c3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c46:	2a00      	cmp	r2, #0
 8015c48:	f000 80a0 	beq.w	8015d8c <_dtoa_r+0x48c>
 8015c4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015c50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c58:	f140 8098 	bpl.w	8015d8c <_dtoa_r+0x48c>
 8015c5c:	f1b9 0f00 	cmp.w	r9, #0
 8015c60:	f000 8094 	beq.w	8015d8c <_dtoa_r+0x48c>
 8015c64:	f1ba 0f00 	cmp.w	sl, #0
 8015c68:	dd2f      	ble.n	8015cca <_dtoa_r+0x3ca>
 8015c6a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015c6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015c72:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c76:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8015c7a:	3101      	adds	r1, #1
 8015c7c:	4654      	mov	r4, sl
 8015c7e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c82:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015c86:	ee07 1a90 	vmov	s15, r1
 8015c8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015c8e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015c92:	ee15 7a90 	vmov	r7, s11
 8015c96:	ec51 0b15 	vmov	r0, r1, d5
 8015c9a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8015c9e:	2c00      	cmp	r4, #0
 8015ca0:	d177      	bne.n	8015d92 <_dtoa_r+0x492>
 8015ca2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015ca6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015caa:	ec41 0b17 	vmov	d7, r0, r1
 8015cae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cb6:	f300 826a 	bgt.w	801618e <_dtoa_r+0x88e>
 8015cba:	eeb1 7b47 	vneg.f64	d7, d7
 8015cbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cc6:	f100 8260 	bmi.w	801618a <_dtoa_r+0x88a>
 8015cca:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015cce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015cd0:	2a00      	cmp	r2, #0
 8015cd2:	f2c0 811d 	blt.w	8015f10 <_dtoa_r+0x610>
 8015cd6:	f1bb 0f0e 	cmp.w	fp, #14
 8015cda:	f300 8119 	bgt.w	8015f10 <_dtoa_r+0x610>
 8015cde:	4b8a      	ldr	r3, [pc, #552]	; (8015f08 <_dtoa_r+0x608>)
 8015ce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015ce4:	ed93 6b00 	vldr	d6, [r3]
 8015ce8:	9b08      	ldr	r3, [sp, #32]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	f280 80b7 	bge.w	8015e5e <_dtoa_r+0x55e>
 8015cf0:	f1b9 0f00 	cmp.w	r9, #0
 8015cf4:	f300 80b3 	bgt.w	8015e5e <_dtoa_r+0x55e>
 8015cf8:	f040 8246 	bne.w	8016188 <_dtoa_r+0x888>
 8015cfc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015d00:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015d04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d08:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d10:	464c      	mov	r4, r9
 8015d12:	464f      	mov	r7, r9
 8015d14:	f280 821c 	bge.w	8016150 <_dtoa_r+0x850>
 8015d18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d1c:	2331      	movs	r3, #49	; 0x31
 8015d1e:	f808 3b01 	strb.w	r3, [r8], #1
 8015d22:	f10b 0b01 	add.w	fp, fp, #1
 8015d26:	e218      	b.n	801615a <_dtoa_r+0x85a>
 8015d28:	2102      	movs	r1, #2
 8015d2a:	e780      	b.n	8015c2e <_dtoa_r+0x32e>
 8015d2c:	07d4      	lsls	r4, r2, #31
 8015d2e:	d504      	bpl.n	8015d3a <_dtoa_r+0x43a>
 8015d30:	ed90 6b00 	vldr	d6, [r0]
 8015d34:	3101      	adds	r1, #1
 8015d36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d3a:	1052      	asrs	r2, r2, #1
 8015d3c:	3008      	adds	r0, #8
 8015d3e:	e777      	b.n	8015c30 <_dtoa_r+0x330>
 8015d40:	d022      	beq.n	8015d88 <_dtoa_r+0x488>
 8015d42:	f1cb 0200 	rsb	r2, fp, #0
 8015d46:	4970      	ldr	r1, [pc, #448]	; (8015f08 <_dtoa_r+0x608>)
 8015d48:	f002 000f 	and.w	r0, r2, #15
 8015d4c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015d50:	ed91 7b00 	vldr	d7, [r1]
 8015d54:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015d58:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d5c:	486b      	ldr	r0, [pc, #428]	; (8015f0c <_dtoa_r+0x60c>)
 8015d5e:	1112      	asrs	r2, r2, #4
 8015d60:	2400      	movs	r4, #0
 8015d62:	2102      	movs	r1, #2
 8015d64:	b92a      	cbnz	r2, 8015d72 <_dtoa_r+0x472>
 8015d66:	2c00      	cmp	r4, #0
 8015d68:	f43f af6a 	beq.w	8015c40 <_dtoa_r+0x340>
 8015d6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015d70:	e766      	b.n	8015c40 <_dtoa_r+0x340>
 8015d72:	07d7      	lsls	r7, r2, #31
 8015d74:	d505      	bpl.n	8015d82 <_dtoa_r+0x482>
 8015d76:	ed90 6b00 	vldr	d6, [r0]
 8015d7a:	3101      	adds	r1, #1
 8015d7c:	2401      	movs	r4, #1
 8015d7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d82:	1052      	asrs	r2, r2, #1
 8015d84:	3008      	adds	r0, #8
 8015d86:	e7ed      	b.n	8015d64 <_dtoa_r+0x464>
 8015d88:	2102      	movs	r1, #2
 8015d8a:	e759      	b.n	8015c40 <_dtoa_r+0x340>
 8015d8c:	465a      	mov	r2, fp
 8015d8e:	464c      	mov	r4, r9
 8015d90:	e775      	b.n	8015c7e <_dtoa_r+0x37e>
 8015d92:	ec41 0b17 	vmov	d7, r0, r1
 8015d96:	495c      	ldr	r1, [pc, #368]	; (8015f08 <_dtoa_r+0x608>)
 8015d98:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8015d9c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8015da0:	9901      	ldr	r1, [sp, #4]
 8015da2:	440c      	add	r4, r1
 8015da4:	9907      	ldr	r1, [sp, #28]
 8015da6:	b351      	cbz	r1, 8015dfe <_dtoa_r+0x4fe>
 8015da8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015dac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015db0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015db4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015db8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015dbc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015dc0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015dc4:	ee14 1a90 	vmov	r1, s9
 8015dc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015dcc:	3130      	adds	r1, #48	; 0x30
 8015dce:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015dd2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dda:	f808 1b01 	strb.w	r1, [r8], #1
 8015dde:	d439      	bmi.n	8015e54 <_dtoa_r+0x554>
 8015de0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015de4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015dec:	d472      	bmi.n	8015ed4 <_dtoa_r+0x5d4>
 8015dee:	45a0      	cmp	r8, r4
 8015df0:	f43f af6b 	beq.w	8015cca <_dtoa_r+0x3ca>
 8015df4:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015df8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015dfc:	e7e0      	b.n	8015dc0 <_dtoa_r+0x4c0>
 8015dfe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e02:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015e06:	4620      	mov	r0, r4
 8015e08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015e0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015e10:	ee14 1a90 	vmov	r1, s9
 8015e14:	3130      	adds	r1, #48	; 0x30
 8015e16:	f808 1b01 	strb.w	r1, [r8], #1
 8015e1a:	45a0      	cmp	r8, r4
 8015e1c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015e20:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015e24:	d118      	bne.n	8015e58 <_dtoa_r+0x558>
 8015e26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015e2a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015e2e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e36:	dc4d      	bgt.n	8015ed4 <_dtoa_r+0x5d4>
 8015e38:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015e3c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e44:	f57f af41 	bpl.w	8015cca <_dtoa_r+0x3ca>
 8015e48:	4680      	mov	r8, r0
 8015e4a:	3801      	subs	r0, #1
 8015e4c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015e50:	2b30      	cmp	r3, #48	; 0x30
 8015e52:	d0f9      	beq.n	8015e48 <_dtoa_r+0x548>
 8015e54:	4693      	mov	fp, r2
 8015e56:	e02a      	b.n	8015eae <_dtoa_r+0x5ae>
 8015e58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015e5c:	e7d6      	b.n	8015e0c <_dtoa_r+0x50c>
 8015e5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015e62:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015e66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e6a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015e6e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015e72:	ee15 3a10 	vmov	r3, s10
 8015e76:	3330      	adds	r3, #48	; 0x30
 8015e78:	f808 3b01 	strb.w	r3, [r8], #1
 8015e7c:	9b01      	ldr	r3, [sp, #4]
 8015e7e:	eba8 0303 	sub.w	r3, r8, r3
 8015e82:	4599      	cmp	r9, r3
 8015e84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015e88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015e8c:	d133      	bne.n	8015ef6 <_dtoa_r+0x5f6>
 8015e8e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015e92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e9a:	dc1a      	bgt.n	8015ed2 <_dtoa_r+0x5d2>
 8015e9c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ea4:	d103      	bne.n	8015eae <_dtoa_r+0x5ae>
 8015ea6:	ee15 3a10 	vmov	r3, s10
 8015eaa:	07d9      	lsls	r1, r3, #31
 8015eac:	d411      	bmi.n	8015ed2 <_dtoa_r+0x5d2>
 8015eae:	4629      	mov	r1, r5
 8015eb0:	4630      	mov	r0, r6
 8015eb2:	f000 fb1d 	bl	80164f0 <_Bfree>
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015eba:	f888 3000 	strb.w	r3, [r8]
 8015ebe:	f10b 0301 	add.w	r3, fp, #1
 8015ec2:	6013      	str	r3, [r2, #0]
 8015ec4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	f43f ad69 	beq.w	801599e <_dtoa_r+0x9e>
 8015ecc:	f8c3 8000 	str.w	r8, [r3]
 8015ed0:	e565      	b.n	801599e <_dtoa_r+0x9e>
 8015ed2:	465a      	mov	r2, fp
 8015ed4:	4643      	mov	r3, r8
 8015ed6:	4698      	mov	r8, r3
 8015ed8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8015edc:	2939      	cmp	r1, #57	; 0x39
 8015ede:	d106      	bne.n	8015eee <_dtoa_r+0x5ee>
 8015ee0:	9901      	ldr	r1, [sp, #4]
 8015ee2:	4299      	cmp	r1, r3
 8015ee4:	d1f7      	bne.n	8015ed6 <_dtoa_r+0x5d6>
 8015ee6:	9801      	ldr	r0, [sp, #4]
 8015ee8:	2130      	movs	r1, #48	; 0x30
 8015eea:	3201      	adds	r2, #1
 8015eec:	7001      	strb	r1, [r0, #0]
 8015eee:	7819      	ldrb	r1, [r3, #0]
 8015ef0:	3101      	adds	r1, #1
 8015ef2:	7019      	strb	r1, [r3, #0]
 8015ef4:	e7ae      	b.n	8015e54 <_dtoa_r+0x554>
 8015ef6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015efa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f02:	d1b2      	bne.n	8015e6a <_dtoa_r+0x56a>
 8015f04:	e7d3      	b.n	8015eae <_dtoa_r+0x5ae>
 8015f06:	bf00      	nop
 8015f08:	08017800 	.word	0x08017800
 8015f0c:	080177d8 	.word	0x080177d8
 8015f10:	9907      	ldr	r1, [sp, #28]
 8015f12:	2900      	cmp	r1, #0
 8015f14:	f000 80d0 	beq.w	80160b8 <_dtoa_r+0x7b8>
 8015f18:	9906      	ldr	r1, [sp, #24]
 8015f1a:	2901      	cmp	r1, #1
 8015f1c:	f300 80b4 	bgt.w	8016088 <_dtoa_r+0x788>
 8015f20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f22:	2900      	cmp	r1, #0
 8015f24:	f000 80ac 	beq.w	8016080 <_dtoa_r+0x780>
 8015f28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015f30:	461c      	mov	r4, r3
 8015f32:	9309      	str	r3, [sp, #36]	; 0x24
 8015f34:	9b04      	ldr	r3, [sp, #16]
 8015f36:	4413      	add	r3, r2
 8015f38:	9304      	str	r3, [sp, #16]
 8015f3a:	9b05      	ldr	r3, [sp, #20]
 8015f3c:	2101      	movs	r1, #1
 8015f3e:	4413      	add	r3, r2
 8015f40:	4630      	mov	r0, r6
 8015f42:	9305      	str	r3, [sp, #20]
 8015f44:	f000 fb8a 	bl	801665c <__i2b>
 8015f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f4a:	4607      	mov	r7, r0
 8015f4c:	f1b8 0f00 	cmp.w	r8, #0
 8015f50:	d00d      	beq.n	8015f6e <_dtoa_r+0x66e>
 8015f52:	9a05      	ldr	r2, [sp, #20]
 8015f54:	2a00      	cmp	r2, #0
 8015f56:	dd0a      	ble.n	8015f6e <_dtoa_r+0x66e>
 8015f58:	4542      	cmp	r2, r8
 8015f5a:	9904      	ldr	r1, [sp, #16]
 8015f5c:	bfa8      	it	ge
 8015f5e:	4642      	movge	r2, r8
 8015f60:	1a89      	subs	r1, r1, r2
 8015f62:	9104      	str	r1, [sp, #16]
 8015f64:	9905      	ldr	r1, [sp, #20]
 8015f66:	eba8 0802 	sub.w	r8, r8, r2
 8015f6a:	1a8a      	subs	r2, r1, r2
 8015f6c:	9205      	str	r2, [sp, #20]
 8015f6e:	b303      	cbz	r3, 8015fb2 <_dtoa_r+0x6b2>
 8015f70:	9a07      	ldr	r2, [sp, #28]
 8015f72:	2a00      	cmp	r2, #0
 8015f74:	f000 80a5 	beq.w	80160c2 <_dtoa_r+0x7c2>
 8015f78:	2c00      	cmp	r4, #0
 8015f7a:	dd13      	ble.n	8015fa4 <_dtoa_r+0x6a4>
 8015f7c:	4639      	mov	r1, r7
 8015f7e:	4622      	mov	r2, r4
 8015f80:	4630      	mov	r0, r6
 8015f82:	930d      	str	r3, [sp, #52]	; 0x34
 8015f84:	f000 fc2a 	bl	80167dc <__pow5mult>
 8015f88:	462a      	mov	r2, r5
 8015f8a:	4601      	mov	r1, r0
 8015f8c:	4607      	mov	r7, r0
 8015f8e:	4630      	mov	r0, r6
 8015f90:	f000 fb7a 	bl	8016688 <__multiply>
 8015f94:	4629      	mov	r1, r5
 8015f96:	9009      	str	r0, [sp, #36]	; 0x24
 8015f98:	4630      	mov	r0, r6
 8015f9a:	f000 faa9 	bl	80164f0 <_Bfree>
 8015f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015fa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fa2:	4615      	mov	r5, r2
 8015fa4:	1b1a      	subs	r2, r3, r4
 8015fa6:	d004      	beq.n	8015fb2 <_dtoa_r+0x6b2>
 8015fa8:	4629      	mov	r1, r5
 8015faa:	4630      	mov	r0, r6
 8015fac:	f000 fc16 	bl	80167dc <__pow5mult>
 8015fb0:	4605      	mov	r5, r0
 8015fb2:	2101      	movs	r1, #1
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f000 fb51 	bl	801665c <__i2b>
 8015fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	4604      	mov	r4, r0
 8015fc0:	f340 8081 	ble.w	80160c6 <_dtoa_r+0x7c6>
 8015fc4:	461a      	mov	r2, r3
 8015fc6:	4601      	mov	r1, r0
 8015fc8:	4630      	mov	r0, r6
 8015fca:	f000 fc07 	bl	80167dc <__pow5mult>
 8015fce:	9b06      	ldr	r3, [sp, #24]
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	dd7a      	ble.n	80160cc <_dtoa_r+0x7cc>
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8015fda:	6922      	ldr	r2, [r4, #16]
 8015fdc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015fe0:	6910      	ldr	r0, [r2, #16]
 8015fe2:	f000 faed 	bl	80165c0 <__hi0bits>
 8015fe6:	f1c0 0020 	rsb	r0, r0, #32
 8015fea:	9b05      	ldr	r3, [sp, #20]
 8015fec:	4418      	add	r0, r3
 8015fee:	f010 001f 	ands.w	r0, r0, #31
 8015ff2:	f000 8093 	beq.w	801611c <_dtoa_r+0x81c>
 8015ff6:	f1c0 0220 	rsb	r2, r0, #32
 8015ffa:	2a04      	cmp	r2, #4
 8015ffc:	f340 8085 	ble.w	801610a <_dtoa_r+0x80a>
 8016000:	9b04      	ldr	r3, [sp, #16]
 8016002:	f1c0 001c 	rsb	r0, r0, #28
 8016006:	4403      	add	r3, r0
 8016008:	9304      	str	r3, [sp, #16]
 801600a:	9b05      	ldr	r3, [sp, #20]
 801600c:	4480      	add	r8, r0
 801600e:	4403      	add	r3, r0
 8016010:	9305      	str	r3, [sp, #20]
 8016012:	9b04      	ldr	r3, [sp, #16]
 8016014:	2b00      	cmp	r3, #0
 8016016:	dd05      	ble.n	8016024 <_dtoa_r+0x724>
 8016018:	4629      	mov	r1, r5
 801601a:	461a      	mov	r2, r3
 801601c:	4630      	mov	r0, r6
 801601e:	f000 fc37 	bl	8016890 <__lshift>
 8016022:	4605      	mov	r5, r0
 8016024:	9b05      	ldr	r3, [sp, #20]
 8016026:	2b00      	cmp	r3, #0
 8016028:	dd05      	ble.n	8016036 <_dtoa_r+0x736>
 801602a:	4621      	mov	r1, r4
 801602c:	461a      	mov	r2, r3
 801602e:	4630      	mov	r0, r6
 8016030:	f000 fc2e 	bl	8016890 <__lshift>
 8016034:	4604      	mov	r4, r0
 8016036:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016038:	2b00      	cmp	r3, #0
 801603a:	d071      	beq.n	8016120 <_dtoa_r+0x820>
 801603c:	4621      	mov	r1, r4
 801603e:	4628      	mov	r0, r5
 8016040:	f000 fc92 	bl	8016968 <__mcmp>
 8016044:	2800      	cmp	r0, #0
 8016046:	da6b      	bge.n	8016120 <_dtoa_r+0x820>
 8016048:	2300      	movs	r3, #0
 801604a:	4629      	mov	r1, r5
 801604c:	220a      	movs	r2, #10
 801604e:	4630      	mov	r0, r6
 8016050:	f000 fa70 	bl	8016534 <__multadd>
 8016054:	9b07      	ldr	r3, [sp, #28]
 8016056:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801605a:	4605      	mov	r5, r0
 801605c:	2b00      	cmp	r3, #0
 801605e:	f000 8197 	beq.w	8016390 <_dtoa_r+0xa90>
 8016062:	4639      	mov	r1, r7
 8016064:	2300      	movs	r3, #0
 8016066:	220a      	movs	r2, #10
 8016068:	4630      	mov	r0, r6
 801606a:	f000 fa63 	bl	8016534 <__multadd>
 801606e:	f1ba 0f00 	cmp.w	sl, #0
 8016072:	4607      	mov	r7, r0
 8016074:	f300 8093 	bgt.w	801619e <_dtoa_r+0x89e>
 8016078:	9b06      	ldr	r3, [sp, #24]
 801607a:	2b02      	cmp	r3, #2
 801607c:	dc57      	bgt.n	801612e <_dtoa_r+0x82e>
 801607e:	e08e      	b.n	801619e <_dtoa_r+0x89e>
 8016080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016082:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016086:	e751      	b.n	8015f2c <_dtoa_r+0x62c>
 8016088:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 801608c:	42a3      	cmp	r3, r4
 801608e:	bfbf      	itttt	lt
 8016090:	1ae2      	sublt	r2, r4, r3
 8016092:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8016094:	189b      	addlt	r3, r3, r2
 8016096:	930a      	strlt	r3, [sp, #40]	; 0x28
 8016098:	bfae      	itee	ge
 801609a:	1b1c      	subge	r4, r3, r4
 801609c:	4623      	movlt	r3, r4
 801609e:	2400      	movlt	r4, #0
 80160a0:	f1b9 0f00 	cmp.w	r9, #0
 80160a4:	bfb5      	itete	lt
 80160a6:	9a04      	ldrlt	r2, [sp, #16]
 80160a8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80160ac:	eba2 0809 	sublt.w	r8, r2, r9
 80160b0:	464a      	movge	r2, r9
 80160b2:	bfb8      	it	lt
 80160b4:	2200      	movlt	r2, #0
 80160b6:	e73c      	b.n	8015f32 <_dtoa_r+0x632>
 80160b8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80160bc:	9f07      	ldr	r7, [sp, #28]
 80160be:	461c      	mov	r4, r3
 80160c0:	e744      	b.n	8015f4c <_dtoa_r+0x64c>
 80160c2:	461a      	mov	r2, r3
 80160c4:	e770      	b.n	8015fa8 <_dtoa_r+0x6a8>
 80160c6:	9b06      	ldr	r3, [sp, #24]
 80160c8:	2b01      	cmp	r3, #1
 80160ca:	dc18      	bgt.n	80160fe <_dtoa_r+0x7fe>
 80160cc:	9b02      	ldr	r3, [sp, #8]
 80160ce:	b9b3      	cbnz	r3, 80160fe <_dtoa_r+0x7fe>
 80160d0:	9b03      	ldr	r3, [sp, #12]
 80160d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80160d6:	b9a2      	cbnz	r2, 8016102 <_dtoa_r+0x802>
 80160d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80160dc:	0d12      	lsrs	r2, r2, #20
 80160de:	0512      	lsls	r2, r2, #20
 80160e0:	b18a      	cbz	r2, 8016106 <_dtoa_r+0x806>
 80160e2:	9b04      	ldr	r3, [sp, #16]
 80160e4:	3301      	adds	r3, #1
 80160e6:	9304      	str	r3, [sp, #16]
 80160e8:	9b05      	ldr	r3, [sp, #20]
 80160ea:	3301      	adds	r3, #1
 80160ec:	9305      	str	r3, [sp, #20]
 80160ee:	2301      	movs	r3, #1
 80160f0:	9309      	str	r3, [sp, #36]	; 0x24
 80160f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	f47f af70 	bne.w	8015fda <_dtoa_r+0x6da>
 80160fa:	2001      	movs	r0, #1
 80160fc:	e775      	b.n	8015fea <_dtoa_r+0x6ea>
 80160fe:	2300      	movs	r3, #0
 8016100:	e7f6      	b.n	80160f0 <_dtoa_r+0x7f0>
 8016102:	9b02      	ldr	r3, [sp, #8]
 8016104:	e7f4      	b.n	80160f0 <_dtoa_r+0x7f0>
 8016106:	9209      	str	r2, [sp, #36]	; 0x24
 8016108:	e7f3      	b.n	80160f2 <_dtoa_r+0x7f2>
 801610a:	d082      	beq.n	8016012 <_dtoa_r+0x712>
 801610c:	9b04      	ldr	r3, [sp, #16]
 801610e:	321c      	adds	r2, #28
 8016110:	4413      	add	r3, r2
 8016112:	9304      	str	r3, [sp, #16]
 8016114:	9b05      	ldr	r3, [sp, #20]
 8016116:	4490      	add	r8, r2
 8016118:	4413      	add	r3, r2
 801611a:	e779      	b.n	8016010 <_dtoa_r+0x710>
 801611c:	4602      	mov	r2, r0
 801611e:	e7f5      	b.n	801610c <_dtoa_r+0x80c>
 8016120:	f1b9 0f00 	cmp.w	r9, #0
 8016124:	dc36      	bgt.n	8016194 <_dtoa_r+0x894>
 8016126:	9b06      	ldr	r3, [sp, #24]
 8016128:	2b02      	cmp	r3, #2
 801612a:	dd33      	ble.n	8016194 <_dtoa_r+0x894>
 801612c:	46ca      	mov	sl, r9
 801612e:	f1ba 0f00 	cmp.w	sl, #0
 8016132:	d10d      	bne.n	8016150 <_dtoa_r+0x850>
 8016134:	4621      	mov	r1, r4
 8016136:	4653      	mov	r3, sl
 8016138:	2205      	movs	r2, #5
 801613a:	4630      	mov	r0, r6
 801613c:	f000 f9fa 	bl	8016534 <__multadd>
 8016140:	4601      	mov	r1, r0
 8016142:	4604      	mov	r4, r0
 8016144:	4628      	mov	r0, r5
 8016146:	f000 fc0f 	bl	8016968 <__mcmp>
 801614a:	2800      	cmp	r0, #0
 801614c:	f73f ade4 	bgt.w	8015d18 <_dtoa_r+0x418>
 8016150:	9b08      	ldr	r3, [sp, #32]
 8016152:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016156:	ea6f 0b03 	mvn.w	fp, r3
 801615a:	f04f 0900 	mov.w	r9, #0
 801615e:	4621      	mov	r1, r4
 8016160:	4630      	mov	r0, r6
 8016162:	f000 f9c5 	bl	80164f0 <_Bfree>
 8016166:	2f00      	cmp	r7, #0
 8016168:	f43f aea1 	beq.w	8015eae <_dtoa_r+0x5ae>
 801616c:	f1b9 0f00 	cmp.w	r9, #0
 8016170:	d005      	beq.n	801617e <_dtoa_r+0x87e>
 8016172:	45b9      	cmp	r9, r7
 8016174:	d003      	beq.n	801617e <_dtoa_r+0x87e>
 8016176:	4649      	mov	r1, r9
 8016178:	4630      	mov	r0, r6
 801617a:	f000 f9b9 	bl	80164f0 <_Bfree>
 801617e:	4639      	mov	r1, r7
 8016180:	4630      	mov	r0, r6
 8016182:	f000 f9b5 	bl	80164f0 <_Bfree>
 8016186:	e692      	b.n	8015eae <_dtoa_r+0x5ae>
 8016188:	2400      	movs	r4, #0
 801618a:	4627      	mov	r7, r4
 801618c:	e7e0      	b.n	8016150 <_dtoa_r+0x850>
 801618e:	4693      	mov	fp, r2
 8016190:	4627      	mov	r7, r4
 8016192:	e5c1      	b.n	8015d18 <_dtoa_r+0x418>
 8016194:	9b07      	ldr	r3, [sp, #28]
 8016196:	46ca      	mov	sl, r9
 8016198:	2b00      	cmp	r3, #0
 801619a:	f000 8100 	beq.w	801639e <_dtoa_r+0xa9e>
 801619e:	f1b8 0f00 	cmp.w	r8, #0
 80161a2:	dd05      	ble.n	80161b0 <_dtoa_r+0x8b0>
 80161a4:	4639      	mov	r1, r7
 80161a6:	4642      	mov	r2, r8
 80161a8:	4630      	mov	r0, r6
 80161aa:	f000 fb71 	bl	8016890 <__lshift>
 80161ae:	4607      	mov	r7, r0
 80161b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d05d      	beq.n	8016272 <_dtoa_r+0x972>
 80161b6:	6879      	ldr	r1, [r7, #4]
 80161b8:	4630      	mov	r0, r6
 80161ba:	f000 f959 	bl	8016470 <_Balloc>
 80161be:	4680      	mov	r8, r0
 80161c0:	b928      	cbnz	r0, 80161ce <_dtoa_r+0x8ce>
 80161c2:	4b82      	ldr	r3, [pc, #520]	; (80163cc <_dtoa_r+0xacc>)
 80161c4:	4602      	mov	r2, r0
 80161c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80161ca:	f7ff bbb1 	b.w	8015930 <_dtoa_r+0x30>
 80161ce:	693a      	ldr	r2, [r7, #16]
 80161d0:	3202      	adds	r2, #2
 80161d2:	0092      	lsls	r2, r2, #2
 80161d4:	f107 010c 	add.w	r1, r7, #12
 80161d8:	300c      	adds	r0, #12
 80161da:	f7ff fafa 	bl	80157d2 <memcpy>
 80161de:	2201      	movs	r2, #1
 80161e0:	4641      	mov	r1, r8
 80161e2:	4630      	mov	r0, r6
 80161e4:	f000 fb54 	bl	8016890 <__lshift>
 80161e8:	9b01      	ldr	r3, [sp, #4]
 80161ea:	3301      	adds	r3, #1
 80161ec:	9304      	str	r3, [sp, #16]
 80161ee:	9b01      	ldr	r3, [sp, #4]
 80161f0:	4453      	add	r3, sl
 80161f2:	9308      	str	r3, [sp, #32]
 80161f4:	9b02      	ldr	r3, [sp, #8]
 80161f6:	f003 0301 	and.w	r3, r3, #1
 80161fa:	46b9      	mov	r9, r7
 80161fc:	9307      	str	r3, [sp, #28]
 80161fe:	4607      	mov	r7, r0
 8016200:	9b04      	ldr	r3, [sp, #16]
 8016202:	4621      	mov	r1, r4
 8016204:	3b01      	subs	r3, #1
 8016206:	4628      	mov	r0, r5
 8016208:	9302      	str	r3, [sp, #8]
 801620a:	f7ff faf0 	bl	80157ee <quorem>
 801620e:	4603      	mov	r3, r0
 8016210:	3330      	adds	r3, #48	; 0x30
 8016212:	9005      	str	r0, [sp, #20]
 8016214:	4649      	mov	r1, r9
 8016216:	4628      	mov	r0, r5
 8016218:	9309      	str	r3, [sp, #36]	; 0x24
 801621a:	f000 fba5 	bl	8016968 <__mcmp>
 801621e:	463a      	mov	r2, r7
 8016220:	4682      	mov	sl, r0
 8016222:	4621      	mov	r1, r4
 8016224:	4630      	mov	r0, r6
 8016226:	f000 fbbb 	bl	80169a0 <__mdiff>
 801622a:	68c2      	ldr	r2, [r0, #12]
 801622c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801622e:	4680      	mov	r8, r0
 8016230:	bb0a      	cbnz	r2, 8016276 <_dtoa_r+0x976>
 8016232:	4601      	mov	r1, r0
 8016234:	4628      	mov	r0, r5
 8016236:	f000 fb97 	bl	8016968 <__mcmp>
 801623a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801623c:	4602      	mov	r2, r0
 801623e:	4641      	mov	r1, r8
 8016240:	4630      	mov	r0, r6
 8016242:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8016246:	f000 f953 	bl	80164f0 <_Bfree>
 801624a:	9b06      	ldr	r3, [sp, #24]
 801624c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801624e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8016252:	ea43 0102 	orr.w	r1, r3, r2
 8016256:	9b07      	ldr	r3, [sp, #28]
 8016258:	4319      	orrs	r1, r3
 801625a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801625c:	d10d      	bne.n	801627a <_dtoa_r+0x97a>
 801625e:	2b39      	cmp	r3, #57	; 0x39
 8016260:	d029      	beq.n	80162b6 <_dtoa_r+0x9b6>
 8016262:	f1ba 0f00 	cmp.w	sl, #0
 8016266:	dd01      	ble.n	801626c <_dtoa_r+0x96c>
 8016268:	9b05      	ldr	r3, [sp, #20]
 801626a:	3331      	adds	r3, #49	; 0x31
 801626c:	9a02      	ldr	r2, [sp, #8]
 801626e:	7013      	strb	r3, [r2, #0]
 8016270:	e775      	b.n	801615e <_dtoa_r+0x85e>
 8016272:	4638      	mov	r0, r7
 8016274:	e7b8      	b.n	80161e8 <_dtoa_r+0x8e8>
 8016276:	2201      	movs	r2, #1
 8016278:	e7e1      	b.n	801623e <_dtoa_r+0x93e>
 801627a:	f1ba 0f00 	cmp.w	sl, #0
 801627e:	db06      	blt.n	801628e <_dtoa_r+0x98e>
 8016280:	9906      	ldr	r1, [sp, #24]
 8016282:	ea41 0a0a 	orr.w	sl, r1, sl
 8016286:	9907      	ldr	r1, [sp, #28]
 8016288:	ea5a 0a01 	orrs.w	sl, sl, r1
 801628c:	d120      	bne.n	80162d0 <_dtoa_r+0x9d0>
 801628e:	2a00      	cmp	r2, #0
 8016290:	ddec      	ble.n	801626c <_dtoa_r+0x96c>
 8016292:	4629      	mov	r1, r5
 8016294:	2201      	movs	r2, #1
 8016296:	4630      	mov	r0, r6
 8016298:	9304      	str	r3, [sp, #16]
 801629a:	f000 faf9 	bl	8016890 <__lshift>
 801629e:	4621      	mov	r1, r4
 80162a0:	4605      	mov	r5, r0
 80162a2:	f000 fb61 	bl	8016968 <__mcmp>
 80162a6:	2800      	cmp	r0, #0
 80162a8:	9b04      	ldr	r3, [sp, #16]
 80162aa:	dc02      	bgt.n	80162b2 <_dtoa_r+0x9b2>
 80162ac:	d1de      	bne.n	801626c <_dtoa_r+0x96c>
 80162ae:	07da      	lsls	r2, r3, #31
 80162b0:	d5dc      	bpl.n	801626c <_dtoa_r+0x96c>
 80162b2:	2b39      	cmp	r3, #57	; 0x39
 80162b4:	d1d8      	bne.n	8016268 <_dtoa_r+0x968>
 80162b6:	9a02      	ldr	r2, [sp, #8]
 80162b8:	2339      	movs	r3, #57	; 0x39
 80162ba:	7013      	strb	r3, [r2, #0]
 80162bc:	4643      	mov	r3, r8
 80162be:	4698      	mov	r8, r3
 80162c0:	3b01      	subs	r3, #1
 80162c2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80162c6:	2a39      	cmp	r2, #57	; 0x39
 80162c8:	d051      	beq.n	801636e <_dtoa_r+0xa6e>
 80162ca:	3201      	adds	r2, #1
 80162cc:	701a      	strb	r2, [r3, #0]
 80162ce:	e746      	b.n	801615e <_dtoa_r+0x85e>
 80162d0:	2a00      	cmp	r2, #0
 80162d2:	dd03      	ble.n	80162dc <_dtoa_r+0x9dc>
 80162d4:	2b39      	cmp	r3, #57	; 0x39
 80162d6:	d0ee      	beq.n	80162b6 <_dtoa_r+0x9b6>
 80162d8:	3301      	adds	r3, #1
 80162da:	e7c7      	b.n	801626c <_dtoa_r+0x96c>
 80162dc:	9a04      	ldr	r2, [sp, #16]
 80162de:	9908      	ldr	r1, [sp, #32]
 80162e0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80162e4:	428a      	cmp	r2, r1
 80162e6:	d02b      	beq.n	8016340 <_dtoa_r+0xa40>
 80162e8:	4629      	mov	r1, r5
 80162ea:	2300      	movs	r3, #0
 80162ec:	220a      	movs	r2, #10
 80162ee:	4630      	mov	r0, r6
 80162f0:	f000 f920 	bl	8016534 <__multadd>
 80162f4:	45b9      	cmp	r9, r7
 80162f6:	4605      	mov	r5, r0
 80162f8:	f04f 0300 	mov.w	r3, #0
 80162fc:	f04f 020a 	mov.w	r2, #10
 8016300:	4649      	mov	r1, r9
 8016302:	4630      	mov	r0, r6
 8016304:	d107      	bne.n	8016316 <_dtoa_r+0xa16>
 8016306:	f000 f915 	bl	8016534 <__multadd>
 801630a:	4681      	mov	r9, r0
 801630c:	4607      	mov	r7, r0
 801630e:	9b04      	ldr	r3, [sp, #16]
 8016310:	3301      	adds	r3, #1
 8016312:	9304      	str	r3, [sp, #16]
 8016314:	e774      	b.n	8016200 <_dtoa_r+0x900>
 8016316:	f000 f90d 	bl	8016534 <__multadd>
 801631a:	4639      	mov	r1, r7
 801631c:	4681      	mov	r9, r0
 801631e:	2300      	movs	r3, #0
 8016320:	220a      	movs	r2, #10
 8016322:	4630      	mov	r0, r6
 8016324:	f000 f906 	bl	8016534 <__multadd>
 8016328:	4607      	mov	r7, r0
 801632a:	e7f0      	b.n	801630e <_dtoa_r+0xa0e>
 801632c:	f1ba 0f00 	cmp.w	sl, #0
 8016330:	9a01      	ldr	r2, [sp, #4]
 8016332:	bfcc      	ite	gt
 8016334:	46d0      	movgt	r8, sl
 8016336:	f04f 0801 	movle.w	r8, #1
 801633a:	4490      	add	r8, r2
 801633c:	f04f 0900 	mov.w	r9, #0
 8016340:	4629      	mov	r1, r5
 8016342:	2201      	movs	r2, #1
 8016344:	4630      	mov	r0, r6
 8016346:	9302      	str	r3, [sp, #8]
 8016348:	f000 faa2 	bl	8016890 <__lshift>
 801634c:	4621      	mov	r1, r4
 801634e:	4605      	mov	r5, r0
 8016350:	f000 fb0a 	bl	8016968 <__mcmp>
 8016354:	2800      	cmp	r0, #0
 8016356:	dcb1      	bgt.n	80162bc <_dtoa_r+0x9bc>
 8016358:	d102      	bne.n	8016360 <_dtoa_r+0xa60>
 801635a:	9b02      	ldr	r3, [sp, #8]
 801635c:	07db      	lsls	r3, r3, #31
 801635e:	d4ad      	bmi.n	80162bc <_dtoa_r+0x9bc>
 8016360:	4643      	mov	r3, r8
 8016362:	4698      	mov	r8, r3
 8016364:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016368:	2a30      	cmp	r2, #48	; 0x30
 801636a:	d0fa      	beq.n	8016362 <_dtoa_r+0xa62>
 801636c:	e6f7      	b.n	801615e <_dtoa_r+0x85e>
 801636e:	9a01      	ldr	r2, [sp, #4]
 8016370:	429a      	cmp	r2, r3
 8016372:	d1a4      	bne.n	80162be <_dtoa_r+0x9be>
 8016374:	f10b 0b01 	add.w	fp, fp, #1
 8016378:	2331      	movs	r3, #49	; 0x31
 801637a:	e778      	b.n	801626e <_dtoa_r+0x96e>
 801637c:	4b14      	ldr	r3, [pc, #80]	; (80163d0 <_dtoa_r+0xad0>)
 801637e:	f7ff bb2a 	b.w	80159d6 <_dtoa_r+0xd6>
 8016382:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016384:	2b00      	cmp	r3, #0
 8016386:	f47f ab05 	bne.w	8015994 <_dtoa_r+0x94>
 801638a:	4b12      	ldr	r3, [pc, #72]	; (80163d4 <_dtoa_r+0xad4>)
 801638c:	f7ff bb23 	b.w	80159d6 <_dtoa_r+0xd6>
 8016390:	f1ba 0f00 	cmp.w	sl, #0
 8016394:	dc03      	bgt.n	801639e <_dtoa_r+0xa9e>
 8016396:	9b06      	ldr	r3, [sp, #24]
 8016398:	2b02      	cmp	r3, #2
 801639a:	f73f aec8 	bgt.w	801612e <_dtoa_r+0x82e>
 801639e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80163a2:	4621      	mov	r1, r4
 80163a4:	4628      	mov	r0, r5
 80163a6:	f7ff fa22 	bl	80157ee <quorem>
 80163aa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80163ae:	f808 3b01 	strb.w	r3, [r8], #1
 80163b2:	9a01      	ldr	r2, [sp, #4]
 80163b4:	eba8 0202 	sub.w	r2, r8, r2
 80163b8:	4592      	cmp	sl, r2
 80163ba:	ddb7      	ble.n	801632c <_dtoa_r+0xa2c>
 80163bc:	4629      	mov	r1, r5
 80163be:	2300      	movs	r3, #0
 80163c0:	220a      	movs	r2, #10
 80163c2:	4630      	mov	r0, r6
 80163c4:	f000 f8b6 	bl	8016534 <__multadd>
 80163c8:	4605      	mov	r5, r0
 80163ca:	e7ea      	b.n	80163a2 <_dtoa_r+0xaa2>
 80163cc:	08017768 	.word	0x08017768
 80163d0:	080176c8 	.word	0x080176c8
 80163d4:	080176ec 	.word	0x080176ec

080163d8 <_free_r>:
 80163d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163da:	2900      	cmp	r1, #0
 80163dc:	d044      	beq.n	8016468 <_free_r+0x90>
 80163de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163e2:	9001      	str	r0, [sp, #4]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f1a1 0404 	sub.w	r4, r1, #4
 80163ea:	bfb8      	it	lt
 80163ec:	18e4      	addlt	r4, r4, r3
 80163ee:	f7fe fa95 	bl	801491c <__malloc_lock>
 80163f2:	4a1e      	ldr	r2, [pc, #120]	; (801646c <_free_r+0x94>)
 80163f4:	9801      	ldr	r0, [sp, #4]
 80163f6:	6813      	ldr	r3, [r2, #0]
 80163f8:	b933      	cbnz	r3, 8016408 <_free_r+0x30>
 80163fa:	6063      	str	r3, [r4, #4]
 80163fc:	6014      	str	r4, [r2, #0]
 80163fe:	b003      	add	sp, #12
 8016400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016404:	f7fe ba90 	b.w	8014928 <__malloc_unlock>
 8016408:	42a3      	cmp	r3, r4
 801640a:	d908      	bls.n	801641e <_free_r+0x46>
 801640c:	6825      	ldr	r5, [r4, #0]
 801640e:	1961      	adds	r1, r4, r5
 8016410:	428b      	cmp	r3, r1
 8016412:	bf01      	itttt	eq
 8016414:	6819      	ldreq	r1, [r3, #0]
 8016416:	685b      	ldreq	r3, [r3, #4]
 8016418:	1949      	addeq	r1, r1, r5
 801641a:	6021      	streq	r1, [r4, #0]
 801641c:	e7ed      	b.n	80163fa <_free_r+0x22>
 801641e:	461a      	mov	r2, r3
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	b10b      	cbz	r3, 8016428 <_free_r+0x50>
 8016424:	42a3      	cmp	r3, r4
 8016426:	d9fa      	bls.n	801641e <_free_r+0x46>
 8016428:	6811      	ldr	r1, [r2, #0]
 801642a:	1855      	adds	r5, r2, r1
 801642c:	42a5      	cmp	r5, r4
 801642e:	d10b      	bne.n	8016448 <_free_r+0x70>
 8016430:	6824      	ldr	r4, [r4, #0]
 8016432:	4421      	add	r1, r4
 8016434:	1854      	adds	r4, r2, r1
 8016436:	42a3      	cmp	r3, r4
 8016438:	6011      	str	r1, [r2, #0]
 801643a:	d1e0      	bne.n	80163fe <_free_r+0x26>
 801643c:	681c      	ldr	r4, [r3, #0]
 801643e:	685b      	ldr	r3, [r3, #4]
 8016440:	6053      	str	r3, [r2, #4]
 8016442:	440c      	add	r4, r1
 8016444:	6014      	str	r4, [r2, #0]
 8016446:	e7da      	b.n	80163fe <_free_r+0x26>
 8016448:	d902      	bls.n	8016450 <_free_r+0x78>
 801644a:	230c      	movs	r3, #12
 801644c:	6003      	str	r3, [r0, #0]
 801644e:	e7d6      	b.n	80163fe <_free_r+0x26>
 8016450:	6825      	ldr	r5, [r4, #0]
 8016452:	1961      	adds	r1, r4, r5
 8016454:	428b      	cmp	r3, r1
 8016456:	bf04      	itt	eq
 8016458:	6819      	ldreq	r1, [r3, #0]
 801645a:	685b      	ldreq	r3, [r3, #4]
 801645c:	6063      	str	r3, [r4, #4]
 801645e:	bf04      	itt	eq
 8016460:	1949      	addeq	r1, r1, r5
 8016462:	6021      	streq	r1, [r4, #0]
 8016464:	6054      	str	r4, [r2, #4]
 8016466:	e7ca      	b.n	80163fe <_free_r+0x26>
 8016468:	b003      	add	sp, #12
 801646a:	bd30      	pop	{r4, r5, pc}
 801646c:	24004650 	.word	0x24004650

08016470 <_Balloc>:
 8016470:	b570      	push	{r4, r5, r6, lr}
 8016472:	69c6      	ldr	r6, [r0, #28]
 8016474:	4604      	mov	r4, r0
 8016476:	460d      	mov	r5, r1
 8016478:	b976      	cbnz	r6, 8016498 <_Balloc+0x28>
 801647a:	2010      	movs	r0, #16
 801647c:	f7fe f9a6 	bl	80147cc <malloc>
 8016480:	4602      	mov	r2, r0
 8016482:	61e0      	str	r0, [r4, #28]
 8016484:	b920      	cbnz	r0, 8016490 <_Balloc+0x20>
 8016486:	4b18      	ldr	r3, [pc, #96]	; (80164e8 <_Balloc+0x78>)
 8016488:	4818      	ldr	r0, [pc, #96]	; (80164ec <_Balloc+0x7c>)
 801648a:	216b      	movs	r1, #107	; 0x6b
 801648c:	f000 fdea 	bl	8017064 <__assert_func>
 8016490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016494:	6006      	str	r6, [r0, #0]
 8016496:	60c6      	str	r6, [r0, #12]
 8016498:	69e6      	ldr	r6, [r4, #28]
 801649a:	68f3      	ldr	r3, [r6, #12]
 801649c:	b183      	cbz	r3, 80164c0 <_Balloc+0x50>
 801649e:	69e3      	ldr	r3, [r4, #28]
 80164a0:	68db      	ldr	r3, [r3, #12]
 80164a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80164a6:	b9b8      	cbnz	r0, 80164d8 <_Balloc+0x68>
 80164a8:	2101      	movs	r1, #1
 80164aa:	fa01 f605 	lsl.w	r6, r1, r5
 80164ae:	1d72      	adds	r2, r6, #5
 80164b0:	0092      	lsls	r2, r2, #2
 80164b2:	4620      	mov	r0, r4
 80164b4:	f000 fdf4 	bl	80170a0 <_calloc_r>
 80164b8:	b160      	cbz	r0, 80164d4 <_Balloc+0x64>
 80164ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80164be:	e00e      	b.n	80164de <_Balloc+0x6e>
 80164c0:	2221      	movs	r2, #33	; 0x21
 80164c2:	2104      	movs	r1, #4
 80164c4:	4620      	mov	r0, r4
 80164c6:	f000 fdeb 	bl	80170a0 <_calloc_r>
 80164ca:	69e3      	ldr	r3, [r4, #28]
 80164cc:	60f0      	str	r0, [r6, #12]
 80164ce:	68db      	ldr	r3, [r3, #12]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d1e4      	bne.n	801649e <_Balloc+0x2e>
 80164d4:	2000      	movs	r0, #0
 80164d6:	bd70      	pop	{r4, r5, r6, pc}
 80164d8:	6802      	ldr	r2, [r0, #0]
 80164da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164de:	2300      	movs	r3, #0
 80164e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164e4:	e7f7      	b.n	80164d6 <_Balloc+0x66>
 80164e6:	bf00      	nop
 80164e8:	080176f9 	.word	0x080176f9
 80164ec:	08017779 	.word	0x08017779

080164f0 <_Bfree>:
 80164f0:	b570      	push	{r4, r5, r6, lr}
 80164f2:	69c6      	ldr	r6, [r0, #28]
 80164f4:	4605      	mov	r5, r0
 80164f6:	460c      	mov	r4, r1
 80164f8:	b976      	cbnz	r6, 8016518 <_Bfree+0x28>
 80164fa:	2010      	movs	r0, #16
 80164fc:	f7fe f966 	bl	80147cc <malloc>
 8016500:	4602      	mov	r2, r0
 8016502:	61e8      	str	r0, [r5, #28]
 8016504:	b920      	cbnz	r0, 8016510 <_Bfree+0x20>
 8016506:	4b09      	ldr	r3, [pc, #36]	; (801652c <_Bfree+0x3c>)
 8016508:	4809      	ldr	r0, [pc, #36]	; (8016530 <_Bfree+0x40>)
 801650a:	218f      	movs	r1, #143	; 0x8f
 801650c:	f000 fdaa 	bl	8017064 <__assert_func>
 8016510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016514:	6006      	str	r6, [r0, #0]
 8016516:	60c6      	str	r6, [r0, #12]
 8016518:	b13c      	cbz	r4, 801652a <_Bfree+0x3a>
 801651a:	69eb      	ldr	r3, [r5, #28]
 801651c:	6862      	ldr	r2, [r4, #4]
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016524:	6021      	str	r1, [r4, #0]
 8016526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801652a:	bd70      	pop	{r4, r5, r6, pc}
 801652c:	080176f9 	.word	0x080176f9
 8016530:	08017779 	.word	0x08017779

08016534 <__multadd>:
 8016534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016538:	690d      	ldr	r5, [r1, #16]
 801653a:	4607      	mov	r7, r0
 801653c:	460c      	mov	r4, r1
 801653e:	461e      	mov	r6, r3
 8016540:	f101 0c14 	add.w	ip, r1, #20
 8016544:	2000      	movs	r0, #0
 8016546:	f8dc 3000 	ldr.w	r3, [ip]
 801654a:	b299      	uxth	r1, r3
 801654c:	fb02 6101 	mla	r1, r2, r1, r6
 8016550:	0c1e      	lsrs	r6, r3, #16
 8016552:	0c0b      	lsrs	r3, r1, #16
 8016554:	fb02 3306 	mla	r3, r2, r6, r3
 8016558:	b289      	uxth	r1, r1
 801655a:	3001      	adds	r0, #1
 801655c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016560:	4285      	cmp	r5, r0
 8016562:	f84c 1b04 	str.w	r1, [ip], #4
 8016566:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801656a:	dcec      	bgt.n	8016546 <__multadd+0x12>
 801656c:	b30e      	cbz	r6, 80165b2 <__multadd+0x7e>
 801656e:	68a3      	ldr	r3, [r4, #8]
 8016570:	42ab      	cmp	r3, r5
 8016572:	dc19      	bgt.n	80165a8 <__multadd+0x74>
 8016574:	6861      	ldr	r1, [r4, #4]
 8016576:	4638      	mov	r0, r7
 8016578:	3101      	adds	r1, #1
 801657a:	f7ff ff79 	bl	8016470 <_Balloc>
 801657e:	4680      	mov	r8, r0
 8016580:	b928      	cbnz	r0, 801658e <__multadd+0x5a>
 8016582:	4602      	mov	r2, r0
 8016584:	4b0c      	ldr	r3, [pc, #48]	; (80165b8 <__multadd+0x84>)
 8016586:	480d      	ldr	r0, [pc, #52]	; (80165bc <__multadd+0x88>)
 8016588:	21ba      	movs	r1, #186	; 0xba
 801658a:	f000 fd6b 	bl	8017064 <__assert_func>
 801658e:	6922      	ldr	r2, [r4, #16]
 8016590:	3202      	adds	r2, #2
 8016592:	f104 010c 	add.w	r1, r4, #12
 8016596:	0092      	lsls	r2, r2, #2
 8016598:	300c      	adds	r0, #12
 801659a:	f7ff f91a 	bl	80157d2 <memcpy>
 801659e:	4621      	mov	r1, r4
 80165a0:	4638      	mov	r0, r7
 80165a2:	f7ff ffa5 	bl	80164f0 <_Bfree>
 80165a6:	4644      	mov	r4, r8
 80165a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80165ac:	3501      	adds	r5, #1
 80165ae:	615e      	str	r6, [r3, #20]
 80165b0:	6125      	str	r5, [r4, #16]
 80165b2:	4620      	mov	r0, r4
 80165b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165b8:	08017768 	.word	0x08017768
 80165bc:	08017779 	.word	0x08017779

080165c0 <__hi0bits>:
 80165c0:	0c03      	lsrs	r3, r0, #16
 80165c2:	041b      	lsls	r3, r3, #16
 80165c4:	b9d3      	cbnz	r3, 80165fc <__hi0bits+0x3c>
 80165c6:	0400      	lsls	r0, r0, #16
 80165c8:	2310      	movs	r3, #16
 80165ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80165ce:	bf04      	itt	eq
 80165d0:	0200      	lsleq	r0, r0, #8
 80165d2:	3308      	addeq	r3, #8
 80165d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80165d8:	bf04      	itt	eq
 80165da:	0100      	lsleq	r0, r0, #4
 80165dc:	3304      	addeq	r3, #4
 80165de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80165e2:	bf04      	itt	eq
 80165e4:	0080      	lsleq	r0, r0, #2
 80165e6:	3302      	addeq	r3, #2
 80165e8:	2800      	cmp	r0, #0
 80165ea:	db05      	blt.n	80165f8 <__hi0bits+0x38>
 80165ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80165f0:	f103 0301 	add.w	r3, r3, #1
 80165f4:	bf08      	it	eq
 80165f6:	2320      	moveq	r3, #32
 80165f8:	4618      	mov	r0, r3
 80165fa:	4770      	bx	lr
 80165fc:	2300      	movs	r3, #0
 80165fe:	e7e4      	b.n	80165ca <__hi0bits+0xa>

08016600 <__lo0bits>:
 8016600:	6803      	ldr	r3, [r0, #0]
 8016602:	f013 0207 	ands.w	r2, r3, #7
 8016606:	d00c      	beq.n	8016622 <__lo0bits+0x22>
 8016608:	07d9      	lsls	r1, r3, #31
 801660a:	d422      	bmi.n	8016652 <__lo0bits+0x52>
 801660c:	079a      	lsls	r2, r3, #30
 801660e:	bf49      	itett	mi
 8016610:	085b      	lsrmi	r3, r3, #1
 8016612:	089b      	lsrpl	r3, r3, #2
 8016614:	6003      	strmi	r3, [r0, #0]
 8016616:	2201      	movmi	r2, #1
 8016618:	bf5c      	itt	pl
 801661a:	6003      	strpl	r3, [r0, #0]
 801661c:	2202      	movpl	r2, #2
 801661e:	4610      	mov	r0, r2
 8016620:	4770      	bx	lr
 8016622:	b299      	uxth	r1, r3
 8016624:	b909      	cbnz	r1, 801662a <__lo0bits+0x2a>
 8016626:	0c1b      	lsrs	r3, r3, #16
 8016628:	2210      	movs	r2, #16
 801662a:	b2d9      	uxtb	r1, r3
 801662c:	b909      	cbnz	r1, 8016632 <__lo0bits+0x32>
 801662e:	3208      	adds	r2, #8
 8016630:	0a1b      	lsrs	r3, r3, #8
 8016632:	0719      	lsls	r1, r3, #28
 8016634:	bf04      	itt	eq
 8016636:	091b      	lsreq	r3, r3, #4
 8016638:	3204      	addeq	r2, #4
 801663a:	0799      	lsls	r1, r3, #30
 801663c:	bf04      	itt	eq
 801663e:	089b      	lsreq	r3, r3, #2
 8016640:	3202      	addeq	r2, #2
 8016642:	07d9      	lsls	r1, r3, #31
 8016644:	d403      	bmi.n	801664e <__lo0bits+0x4e>
 8016646:	085b      	lsrs	r3, r3, #1
 8016648:	f102 0201 	add.w	r2, r2, #1
 801664c:	d003      	beq.n	8016656 <__lo0bits+0x56>
 801664e:	6003      	str	r3, [r0, #0]
 8016650:	e7e5      	b.n	801661e <__lo0bits+0x1e>
 8016652:	2200      	movs	r2, #0
 8016654:	e7e3      	b.n	801661e <__lo0bits+0x1e>
 8016656:	2220      	movs	r2, #32
 8016658:	e7e1      	b.n	801661e <__lo0bits+0x1e>
	...

0801665c <__i2b>:
 801665c:	b510      	push	{r4, lr}
 801665e:	460c      	mov	r4, r1
 8016660:	2101      	movs	r1, #1
 8016662:	f7ff ff05 	bl	8016470 <_Balloc>
 8016666:	4602      	mov	r2, r0
 8016668:	b928      	cbnz	r0, 8016676 <__i2b+0x1a>
 801666a:	4b05      	ldr	r3, [pc, #20]	; (8016680 <__i2b+0x24>)
 801666c:	4805      	ldr	r0, [pc, #20]	; (8016684 <__i2b+0x28>)
 801666e:	f240 1145 	movw	r1, #325	; 0x145
 8016672:	f000 fcf7 	bl	8017064 <__assert_func>
 8016676:	2301      	movs	r3, #1
 8016678:	6144      	str	r4, [r0, #20]
 801667a:	6103      	str	r3, [r0, #16]
 801667c:	bd10      	pop	{r4, pc}
 801667e:	bf00      	nop
 8016680:	08017768 	.word	0x08017768
 8016684:	08017779 	.word	0x08017779

08016688 <__multiply>:
 8016688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801668c:	4691      	mov	r9, r2
 801668e:	690a      	ldr	r2, [r1, #16]
 8016690:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016694:	429a      	cmp	r2, r3
 8016696:	bfb8      	it	lt
 8016698:	460b      	movlt	r3, r1
 801669a:	460c      	mov	r4, r1
 801669c:	bfbc      	itt	lt
 801669e:	464c      	movlt	r4, r9
 80166a0:	4699      	movlt	r9, r3
 80166a2:	6927      	ldr	r7, [r4, #16]
 80166a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80166a8:	68a3      	ldr	r3, [r4, #8]
 80166aa:	6861      	ldr	r1, [r4, #4]
 80166ac:	eb07 060a 	add.w	r6, r7, sl
 80166b0:	42b3      	cmp	r3, r6
 80166b2:	b085      	sub	sp, #20
 80166b4:	bfb8      	it	lt
 80166b6:	3101      	addlt	r1, #1
 80166b8:	f7ff feda 	bl	8016470 <_Balloc>
 80166bc:	b930      	cbnz	r0, 80166cc <__multiply+0x44>
 80166be:	4602      	mov	r2, r0
 80166c0:	4b44      	ldr	r3, [pc, #272]	; (80167d4 <__multiply+0x14c>)
 80166c2:	4845      	ldr	r0, [pc, #276]	; (80167d8 <__multiply+0x150>)
 80166c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80166c8:	f000 fccc 	bl	8017064 <__assert_func>
 80166cc:	f100 0514 	add.w	r5, r0, #20
 80166d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80166d4:	462b      	mov	r3, r5
 80166d6:	2200      	movs	r2, #0
 80166d8:	4543      	cmp	r3, r8
 80166da:	d321      	bcc.n	8016720 <__multiply+0x98>
 80166dc:	f104 0314 	add.w	r3, r4, #20
 80166e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80166e4:	f109 0314 	add.w	r3, r9, #20
 80166e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80166ec:	9202      	str	r2, [sp, #8]
 80166ee:	1b3a      	subs	r2, r7, r4
 80166f0:	3a15      	subs	r2, #21
 80166f2:	f022 0203 	bic.w	r2, r2, #3
 80166f6:	3204      	adds	r2, #4
 80166f8:	f104 0115 	add.w	r1, r4, #21
 80166fc:	428f      	cmp	r7, r1
 80166fe:	bf38      	it	cc
 8016700:	2204      	movcc	r2, #4
 8016702:	9201      	str	r2, [sp, #4]
 8016704:	9a02      	ldr	r2, [sp, #8]
 8016706:	9303      	str	r3, [sp, #12]
 8016708:	429a      	cmp	r2, r3
 801670a:	d80c      	bhi.n	8016726 <__multiply+0x9e>
 801670c:	2e00      	cmp	r6, #0
 801670e:	dd03      	ble.n	8016718 <__multiply+0x90>
 8016710:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016714:	2b00      	cmp	r3, #0
 8016716:	d05b      	beq.n	80167d0 <__multiply+0x148>
 8016718:	6106      	str	r6, [r0, #16]
 801671a:	b005      	add	sp, #20
 801671c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016720:	f843 2b04 	str.w	r2, [r3], #4
 8016724:	e7d8      	b.n	80166d8 <__multiply+0x50>
 8016726:	f8b3 a000 	ldrh.w	sl, [r3]
 801672a:	f1ba 0f00 	cmp.w	sl, #0
 801672e:	d024      	beq.n	801677a <__multiply+0xf2>
 8016730:	f104 0e14 	add.w	lr, r4, #20
 8016734:	46a9      	mov	r9, r5
 8016736:	f04f 0c00 	mov.w	ip, #0
 801673a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801673e:	f8d9 1000 	ldr.w	r1, [r9]
 8016742:	fa1f fb82 	uxth.w	fp, r2
 8016746:	b289      	uxth	r1, r1
 8016748:	fb0a 110b 	mla	r1, sl, fp, r1
 801674c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016750:	f8d9 2000 	ldr.w	r2, [r9]
 8016754:	4461      	add	r1, ip
 8016756:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801675a:	fb0a c20b 	mla	r2, sl, fp, ip
 801675e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016762:	b289      	uxth	r1, r1
 8016764:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016768:	4577      	cmp	r7, lr
 801676a:	f849 1b04 	str.w	r1, [r9], #4
 801676e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016772:	d8e2      	bhi.n	801673a <__multiply+0xb2>
 8016774:	9a01      	ldr	r2, [sp, #4]
 8016776:	f845 c002 	str.w	ip, [r5, r2]
 801677a:	9a03      	ldr	r2, [sp, #12]
 801677c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016780:	3304      	adds	r3, #4
 8016782:	f1b9 0f00 	cmp.w	r9, #0
 8016786:	d021      	beq.n	80167cc <__multiply+0x144>
 8016788:	6829      	ldr	r1, [r5, #0]
 801678a:	f104 0c14 	add.w	ip, r4, #20
 801678e:	46ae      	mov	lr, r5
 8016790:	f04f 0a00 	mov.w	sl, #0
 8016794:	f8bc b000 	ldrh.w	fp, [ip]
 8016798:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801679c:	fb09 220b 	mla	r2, r9, fp, r2
 80167a0:	4452      	add	r2, sl
 80167a2:	b289      	uxth	r1, r1
 80167a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80167a8:	f84e 1b04 	str.w	r1, [lr], #4
 80167ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80167b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80167b4:	f8be 1000 	ldrh.w	r1, [lr]
 80167b8:	fb09 110a 	mla	r1, r9, sl, r1
 80167bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80167c0:	4567      	cmp	r7, ip
 80167c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80167c6:	d8e5      	bhi.n	8016794 <__multiply+0x10c>
 80167c8:	9a01      	ldr	r2, [sp, #4]
 80167ca:	50a9      	str	r1, [r5, r2]
 80167cc:	3504      	adds	r5, #4
 80167ce:	e799      	b.n	8016704 <__multiply+0x7c>
 80167d0:	3e01      	subs	r6, #1
 80167d2:	e79b      	b.n	801670c <__multiply+0x84>
 80167d4:	08017768 	.word	0x08017768
 80167d8:	08017779 	.word	0x08017779

080167dc <__pow5mult>:
 80167dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167e0:	4615      	mov	r5, r2
 80167e2:	f012 0203 	ands.w	r2, r2, #3
 80167e6:	4606      	mov	r6, r0
 80167e8:	460f      	mov	r7, r1
 80167ea:	d007      	beq.n	80167fc <__pow5mult+0x20>
 80167ec:	4c25      	ldr	r4, [pc, #148]	; (8016884 <__pow5mult+0xa8>)
 80167ee:	3a01      	subs	r2, #1
 80167f0:	2300      	movs	r3, #0
 80167f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80167f6:	f7ff fe9d 	bl	8016534 <__multadd>
 80167fa:	4607      	mov	r7, r0
 80167fc:	10ad      	asrs	r5, r5, #2
 80167fe:	d03d      	beq.n	801687c <__pow5mult+0xa0>
 8016800:	69f4      	ldr	r4, [r6, #28]
 8016802:	b97c      	cbnz	r4, 8016824 <__pow5mult+0x48>
 8016804:	2010      	movs	r0, #16
 8016806:	f7fd ffe1 	bl	80147cc <malloc>
 801680a:	4602      	mov	r2, r0
 801680c:	61f0      	str	r0, [r6, #28]
 801680e:	b928      	cbnz	r0, 801681c <__pow5mult+0x40>
 8016810:	4b1d      	ldr	r3, [pc, #116]	; (8016888 <__pow5mult+0xac>)
 8016812:	481e      	ldr	r0, [pc, #120]	; (801688c <__pow5mult+0xb0>)
 8016814:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016818:	f000 fc24 	bl	8017064 <__assert_func>
 801681c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016820:	6004      	str	r4, [r0, #0]
 8016822:	60c4      	str	r4, [r0, #12]
 8016824:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016828:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801682c:	b94c      	cbnz	r4, 8016842 <__pow5mult+0x66>
 801682e:	f240 2171 	movw	r1, #625	; 0x271
 8016832:	4630      	mov	r0, r6
 8016834:	f7ff ff12 	bl	801665c <__i2b>
 8016838:	2300      	movs	r3, #0
 801683a:	f8c8 0008 	str.w	r0, [r8, #8]
 801683e:	4604      	mov	r4, r0
 8016840:	6003      	str	r3, [r0, #0]
 8016842:	f04f 0900 	mov.w	r9, #0
 8016846:	07eb      	lsls	r3, r5, #31
 8016848:	d50a      	bpl.n	8016860 <__pow5mult+0x84>
 801684a:	4639      	mov	r1, r7
 801684c:	4622      	mov	r2, r4
 801684e:	4630      	mov	r0, r6
 8016850:	f7ff ff1a 	bl	8016688 <__multiply>
 8016854:	4639      	mov	r1, r7
 8016856:	4680      	mov	r8, r0
 8016858:	4630      	mov	r0, r6
 801685a:	f7ff fe49 	bl	80164f0 <_Bfree>
 801685e:	4647      	mov	r7, r8
 8016860:	106d      	asrs	r5, r5, #1
 8016862:	d00b      	beq.n	801687c <__pow5mult+0xa0>
 8016864:	6820      	ldr	r0, [r4, #0]
 8016866:	b938      	cbnz	r0, 8016878 <__pow5mult+0x9c>
 8016868:	4622      	mov	r2, r4
 801686a:	4621      	mov	r1, r4
 801686c:	4630      	mov	r0, r6
 801686e:	f7ff ff0b 	bl	8016688 <__multiply>
 8016872:	6020      	str	r0, [r4, #0]
 8016874:	f8c0 9000 	str.w	r9, [r0]
 8016878:	4604      	mov	r4, r0
 801687a:	e7e4      	b.n	8016846 <__pow5mult+0x6a>
 801687c:	4638      	mov	r0, r7
 801687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016882:	bf00      	nop
 8016884:	080178c8 	.word	0x080178c8
 8016888:	080176f9 	.word	0x080176f9
 801688c:	08017779 	.word	0x08017779

08016890 <__lshift>:
 8016890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016894:	460c      	mov	r4, r1
 8016896:	6849      	ldr	r1, [r1, #4]
 8016898:	6923      	ldr	r3, [r4, #16]
 801689a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801689e:	68a3      	ldr	r3, [r4, #8]
 80168a0:	4607      	mov	r7, r0
 80168a2:	4691      	mov	r9, r2
 80168a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80168a8:	f108 0601 	add.w	r6, r8, #1
 80168ac:	42b3      	cmp	r3, r6
 80168ae:	db0b      	blt.n	80168c8 <__lshift+0x38>
 80168b0:	4638      	mov	r0, r7
 80168b2:	f7ff fddd 	bl	8016470 <_Balloc>
 80168b6:	4605      	mov	r5, r0
 80168b8:	b948      	cbnz	r0, 80168ce <__lshift+0x3e>
 80168ba:	4602      	mov	r2, r0
 80168bc:	4b28      	ldr	r3, [pc, #160]	; (8016960 <__lshift+0xd0>)
 80168be:	4829      	ldr	r0, [pc, #164]	; (8016964 <__lshift+0xd4>)
 80168c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80168c4:	f000 fbce 	bl	8017064 <__assert_func>
 80168c8:	3101      	adds	r1, #1
 80168ca:	005b      	lsls	r3, r3, #1
 80168cc:	e7ee      	b.n	80168ac <__lshift+0x1c>
 80168ce:	2300      	movs	r3, #0
 80168d0:	f100 0114 	add.w	r1, r0, #20
 80168d4:	f100 0210 	add.w	r2, r0, #16
 80168d8:	4618      	mov	r0, r3
 80168da:	4553      	cmp	r3, sl
 80168dc:	db33      	blt.n	8016946 <__lshift+0xb6>
 80168de:	6920      	ldr	r0, [r4, #16]
 80168e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80168e4:	f104 0314 	add.w	r3, r4, #20
 80168e8:	f019 091f 	ands.w	r9, r9, #31
 80168ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80168f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80168f4:	d02b      	beq.n	801694e <__lshift+0xbe>
 80168f6:	f1c9 0e20 	rsb	lr, r9, #32
 80168fa:	468a      	mov	sl, r1
 80168fc:	2200      	movs	r2, #0
 80168fe:	6818      	ldr	r0, [r3, #0]
 8016900:	fa00 f009 	lsl.w	r0, r0, r9
 8016904:	4310      	orrs	r0, r2
 8016906:	f84a 0b04 	str.w	r0, [sl], #4
 801690a:	f853 2b04 	ldr.w	r2, [r3], #4
 801690e:	459c      	cmp	ip, r3
 8016910:	fa22 f20e 	lsr.w	r2, r2, lr
 8016914:	d8f3      	bhi.n	80168fe <__lshift+0x6e>
 8016916:	ebac 0304 	sub.w	r3, ip, r4
 801691a:	3b15      	subs	r3, #21
 801691c:	f023 0303 	bic.w	r3, r3, #3
 8016920:	3304      	adds	r3, #4
 8016922:	f104 0015 	add.w	r0, r4, #21
 8016926:	4584      	cmp	ip, r0
 8016928:	bf38      	it	cc
 801692a:	2304      	movcc	r3, #4
 801692c:	50ca      	str	r2, [r1, r3]
 801692e:	b10a      	cbz	r2, 8016934 <__lshift+0xa4>
 8016930:	f108 0602 	add.w	r6, r8, #2
 8016934:	3e01      	subs	r6, #1
 8016936:	4638      	mov	r0, r7
 8016938:	612e      	str	r6, [r5, #16]
 801693a:	4621      	mov	r1, r4
 801693c:	f7ff fdd8 	bl	80164f0 <_Bfree>
 8016940:	4628      	mov	r0, r5
 8016942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016946:	f842 0f04 	str.w	r0, [r2, #4]!
 801694a:	3301      	adds	r3, #1
 801694c:	e7c5      	b.n	80168da <__lshift+0x4a>
 801694e:	3904      	subs	r1, #4
 8016950:	f853 2b04 	ldr.w	r2, [r3], #4
 8016954:	f841 2f04 	str.w	r2, [r1, #4]!
 8016958:	459c      	cmp	ip, r3
 801695a:	d8f9      	bhi.n	8016950 <__lshift+0xc0>
 801695c:	e7ea      	b.n	8016934 <__lshift+0xa4>
 801695e:	bf00      	nop
 8016960:	08017768 	.word	0x08017768
 8016964:	08017779 	.word	0x08017779

08016968 <__mcmp>:
 8016968:	b530      	push	{r4, r5, lr}
 801696a:	6902      	ldr	r2, [r0, #16]
 801696c:	690c      	ldr	r4, [r1, #16]
 801696e:	1b12      	subs	r2, r2, r4
 8016970:	d10e      	bne.n	8016990 <__mcmp+0x28>
 8016972:	f100 0314 	add.w	r3, r0, #20
 8016976:	3114      	adds	r1, #20
 8016978:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801697c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016980:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016984:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016988:	42a5      	cmp	r5, r4
 801698a:	d003      	beq.n	8016994 <__mcmp+0x2c>
 801698c:	d305      	bcc.n	801699a <__mcmp+0x32>
 801698e:	2201      	movs	r2, #1
 8016990:	4610      	mov	r0, r2
 8016992:	bd30      	pop	{r4, r5, pc}
 8016994:	4283      	cmp	r3, r0
 8016996:	d3f3      	bcc.n	8016980 <__mcmp+0x18>
 8016998:	e7fa      	b.n	8016990 <__mcmp+0x28>
 801699a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801699e:	e7f7      	b.n	8016990 <__mcmp+0x28>

080169a0 <__mdiff>:
 80169a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a4:	460c      	mov	r4, r1
 80169a6:	4606      	mov	r6, r0
 80169a8:	4611      	mov	r1, r2
 80169aa:	4620      	mov	r0, r4
 80169ac:	4690      	mov	r8, r2
 80169ae:	f7ff ffdb 	bl	8016968 <__mcmp>
 80169b2:	1e05      	subs	r5, r0, #0
 80169b4:	d110      	bne.n	80169d8 <__mdiff+0x38>
 80169b6:	4629      	mov	r1, r5
 80169b8:	4630      	mov	r0, r6
 80169ba:	f7ff fd59 	bl	8016470 <_Balloc>
 80169be:	b930      	cbnz	r0, 80169ce <__mdiff+0x2e>
 80169c0:	4b3a      	ldr	r3, [pc, #232]	; (8016aac <__mdiff+0x10c>)
 80169c2:	4602      	mov	r2, r0
 80169c4:	f240 2137 	movw	r1, #567	; 0x237
 80169c8:	4839      	ldr	r0, [pc, #228]	; (8016ab0 <__mdiff+0x110>)
 80169ca:	f000 fb4b 	bl	8017064 <__assert_func>
 80169ce:	2301      	movs	r3, #1
 80169d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80169d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169d8:	bfa4      	itt	ge
 80169da:	4643      	movge	r3, r8
 80169dc:	46a0      	movge	r8, r4
 80169de:	4630      	mov	r0, r6
 80169e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169e4:	bfa6      	itte	ge
 80169e6:	461c      	movge	r4, r3
 80169e8:	2500      	movge	r5, #0
 80169ea:	2501      	movlt	r5, #1
 80169ec:	f7ff fd40 	bl	8016470 <_Balloc>
 80169f0:	b920      	cbnz	r0, 80169fc <__mdiff+0x5c>
 80169f2:	4b2e      	ldr	r3, [pc, #184]	; (8016aac <__mdiff+0x10c>)
 80169f4:	4602      	mov	r2, r0
 80169f6:	f240 2145 	movw	r1, #581	; 0x245
 80169fa:	e7e5      	b.n	80169c8 <__mdiff+0x28>
 80169fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016a00:	6926      	ldr	r6, [r4, #16]
 8016a02:	60c5      	str	r5, [r0, #12]
 8016a04:	f104 0914 	add.w	r9, r4, #20
 8016a08:	f108 0514 	add.w	r5, r8, #20
 8016a0c:	f100 0e14 	add.w	lr, r0, #20
 8016a10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016a14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016a18:	f108 0210 	add.w	r2, r8, #16
 8016a1c:	46f2      	mov	sl, lr
 8016a1e:	2100      	movs	r1, #0
 8016a20:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016a28:	fa11 f88b 	uxtah	r8, r1, fp
 8016a2c:	b299      	uxth	r1, r3
 8016a2e:	0c1b      	lsrs	r3, r3, #16
 8016a30:	eba8 0801 	sub.w	r8, r8, r1
 8016a34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016a38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016a3c:	fa1f f888 	uxth.w	r8, r8
 8016a40:	1419      	asrs	r1, r3, #16
 8016a42:	454e      	cmp	r6, r9
 8016a44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016a48:	f84a 3b04 	str.w	r3, [sl], #4
 8016a4c:	d8e8      	bhi.n	8016a20 <__mdiff+0x80>
 8016a4e:	1b33      	subs	r3, r6, r4
 8016a50:	3b15      	subs	r3, #21
 8016a52:	f023 0303 	bic.w	r3, r3, #3
 8016a56:	3304      	adds	r3, #4
 8016a58:	3415      	adds	r4, #21
 8016a5a:	42a6      	cmp	r6, r4
 8016a5c:	bf38      	it	cc
 8016a5e:	2304      	movcc	r3, #4
 8016a60:	441d      	add	r5, r3
 8016a62:	4473      	add	r3, lr
 8016a64:	469e      	mov	lr, r3
 8016a66:	462e      	mov	r6, r5
 8016a68:	4566      	cmp	r6, ip
 8016a6a:	d30e      	bcc.n	8016a8a <__mdiff+0xea>
 8016a6c:	f10c 0203 	add.w	r2, ip, #3
 8016a70:	1b52      	subs	r2, r2, r5
 8016a72:	f022 0203 	bic.w	r2, r2, #3
 8016a76:	3d03      	subs	r5, #3
 8016a78:	45ac      	cmp	ip, r5
 8016a7a:	bf38      	it	cc
 8016a7c:	2200      	movcc	r2, #0
 8016a7e:	4413      	add	r3, r2
 8016a80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016a84:	b17a      	cbz	r2, 8016aa6 <__mdiff+0x106>
 8016a86:	6107      	str	r7, [r0, #16]
 8016a88:	e7a4      	b.n	80169d4 <__mdiff+0x34>
 8016a8a:	f856 8b04 	ldr.w	r8, [r6], #4
 8016a8e:	fa11 f288 	uxtah	r2, r1, r8
 8016a92:	1414      	asrs	r4, r2, #16
 8016a94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016a98:	b292      	uxth	r2, r2
 8016a9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016a9e:	f84e 2b04 	str.w	r2, [lr], #4
 8016aa2:	1421      	asrs	r1, r4, #16
 8016aa4:	e7e0      	b.n	8016a68 <__mdiff+0xc8>
 8016aa6:	3f01      	subs	r7, #1
 8016aa8:	e7ea      	b.n	8016a80 <__mdiff+0xe0>
 8016aaa:	bf00      	nop
 8016aac:	08017768 	.word	0x08017768
 8016ab0:	08017779 	.word	0x08017779

08016ab4 <__d2b>:
 8016ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016ab8:	460f      	mov	r7, r1
 8016aba:	2101      	movs	r1, #1
 8016abc:	ec59 8b10 	vmov	r8, r9, d0
 8016ac0:	4616      	mov	r6, r2
 8016ac2:	f7ff fcd5 	bl	8016470 <_Balloc>
 8016ac6:	4604      	mov	r4, r0
 8016ac8:	b930      	cbnz	r0, 8016ad8 <__d2b+0x24>
 8016aca:	4602      	mov	r2, r0
 8016acc:	4b24      	ldr	r3, [pc, #144]	; (8016b60 <__d2b+0xac>)
 8016ace:	4825      	ldr	r0, [pc, #148]	; (8016b64 <__d2b+0xb0>)
 8016ad0:	f240 310f 	movw	r1, #783	; 0x30f
 8016ad4:	f000 fac6 	bl	8017064 <__assert_func>
 8016ad8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016adc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ae0:	bb2d      	cbnz	r5, 8016b2e <__d2b+0x7a>
 8016ae2:	9301      	str	r3, [sp, #4]
 8016ae4:	f1b8 0300 	subs.w	r3, r8, #0
 8016ae8:	d026      	beq.n	8016b38 <__d2b+0x84>
 8016aea:	4668      	mov	r0, sp
 8016aec:	9300      	str	r3, [sp, #0]
 8016aee:	f7ff fd87 	bl	8016600 <__lo0bits>
 8016af2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016af6:	b1e8      	cbz	r0, 8016b34 <__d2b+0x80>
 8016af8:	f1c0 0320 	rsb	r3, r0, #32
 8016afc:	fa02 f303 	lsl.w	r3, r2, r3
 8016b00:	430b      	orrs	r3, r1
 8016b02:	40c2      	lsrs	r2, r0
 8016b04:	6163      	str	r3, [r4, #20]
 8016b06:	9201      	str	r2, [sp, #4]
 8016b08:	9b01      	ldr	r3, [sp, #4]
 8016b0a:	61a3      	str	r3, [r4, #24]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	bf14      	ite	ne
 8016b10:	2202      	movne	r2, #2
 8016b12:	2201      	moveq	r2, #1
 8016b14:	6122      	str	r2, [r4, #16]
 8016b16:	b1bd      	cbz	r5, 8016b48 <__d2b+0x94>
 8016b18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016b1c:	4405      	add	r5, r0
 8016b1e:	603d      	str	r5, [r7, #0]
 8016b20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016b24:	6030      	str	r0, [r6, #0]
 8016b26:	4620      	mov	r0, r4
 8016b28:	b003      	add	sp, #12
 8016b2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b32:	e7d6      	b.n	8016ae2 <__d2b+0x2e>
 8016b34:	6161      	str	r1, [r4, #20]
 8016b36:	e7e7      	b.n	8016b08 <__d2b+0x54>
 8016b38:	a801      	add	r0, sp, #4
 8016b3a:	f7ff fd61 	bl	8016600 <__lo0bits>
 8016b3e:	9b01      	ldr	r3, [sp, #4]
 8016b40:	6163      	str	r3, [r4, #20]
 8016b42:	3020      	adds	r0, #32
 8016b44:	2201      	movs	r2, #1
 8016b46:	e7e5      	b.n	8016b14 <__d2b+0x60>
 8016b48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016b50:	6038      	str	r0, [r7, #0]
 8016b52:	6918      	ldr	r0, [r3, #16]
 8016b54:	f7ff fd34 	bl	80165c0 <__hi0bits>
 8016b58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016b5c:	e7e2      	b.n	8016b24 <__d2b+0x70>
 8016b5e:	bf00      	nop
 8016b60:	08017768 	.word	0x08017768
 8016b64:	08017779 	.word	0x08017779

08016b68 <_malloc_usable_size_r>:
 8016b68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016b6c:	1f18      	subs	r0, r3, #4
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	bfbc      	itt	lt
 8016b72:	580b      	ldrlt	r3, [r1, r0]
 8016b74:	18c0      	addlt	r0, r0, r3
 8016b76:	4770      	bx	lr

08016b78 <__sfputc_r>:
 8016b78:	6893      	ldr	r3, [r2, #8]
 8016b7a:	3b01      	subs	r3, #1
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	b410      	push	{r4}
 8016b80:	6093      	str	r3, [r2, #8]
 8016b82:	da08      	bge.n	8016b96 <__sfputc_r+0x1e>
 8016b84:	6994      	ldr	r4, [r2, #24]
 8016b86:	42a3      	cmp	r3, r4
 8016b88:	db01      	blt.n	8016b8e <__sfputc_r+0x16>
 8016b8a:	290a      	cmp	r1, #10
 8016b8c:	d103      	bne.n	8016b96 <__sfputc_r+0x1e>
 8016b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b92:	f7fe bcb6 	b.w	8015502 <__swbuf_r>
 8016b96:	6813      	ldr	r3, [r2, #0]
 8016b98:	1c58      	adds	r0, r3, #1
 8016b9a:	6010      	str	r0, [r2, #0]
 8016b9c:	7019      	strb	r1, [r3, #0]
 8016b9e:	4608      	mov	r0, r1
 8016ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ba4:	4770      	bx	lr

08016ba6 <__sfputs_r>:
 8016ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ba8:	4606      	mov	r6, r0
 8016baa:	460f      	mov	r7, r1
 8016bac:	4614      	mov	r4, r2
 8016bae:	18d5      	adds	r5, r2, r3
 8016bb0:	42ac      	cmp	r4, r5
 8016bb2:	d101      	bne.n	8016bb8 <__sfputs_r+0x12>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	e007      	b.n	8016bc8 <__sfputs_r+0x22>
 8016bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016bbc:	463a      	mov	r2, r7
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	f7ff ffda 	bl	8016b78 <__sfputc_r>
 8016bc4:	1c43      	adds	r3, r0, #1
 8016bc6:	d1f3      	bne.n	8016bb0 <__sfputs_r+0xa>
 8016bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016bcc <_vfiprintf_r>:
 8016bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bd0:	460d      	mov	r5, r1
 8016bd2:	b09d      	sub	sp, #116	; 0x74
 8016bd4:	4614      	mov	r4, r2
 8016bd6:	4698      	mov	r8, r3
 8016bd8:	4606      	mov	r6, r0
 8016bda:	b118      	cbz	r0, 8016be4 <_vfiprintf_r+0x18>
 8016bdc:	6a03      	ldr	r3, [r0, #32]
 8016bde:	b90b      	cbnz	r3, 8016be4 <_vfiprintf_r+0x18>
 8016be0:	f7fe fba8 	bl	8015334 <__sinit>
 8016be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016be6:	07d9      	lsls	r1, r3, #31
 8016be8:	d405      	bmi.n	8016bf6 <_vfiprintf_r+0x2a>
 8016bea:	89ab      	ldrh	r3, [r5, #12]
 8016bec:	059a      	lsls	r2, r3, #22
 8016bee:	d402      	bmi.n	8016bf6 <_vfiprintf_r+0x2a>
 8016bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016bf2:	f7fe fdec 	bl	80157ce <__retarget_lock_acquire_recursive>
 8016bf6:	89ab      	ldrh	r3, [r5, #12]
 8016bf8:	071b      	lsls	r3, r3, #28
 8016bfa:	d501      	bpl.n	8016c00 <_vfiprintf_r+0x34>
 8016bfc:	692b      	ldr	r3, [r5, #16]
 8016bfe:	b99b      	cbnz	r3, 8016c28 <_vfiprintf_r+0x5c>
 8016c00:	4629      	mov	r1, r5
 8016c02:	4630      	mov	r0, r6
 8016c04:	f7fe fcba 	bl	801557c <__swsetup_r>
 8016c08:	b170      	cbz	r0, 8016c28 <_vfiprintf_r+0x5c>
 8016c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c0c:	07dc      	lsls	r4, r3, #31
 8016c0e:	d504      	bpl.n	8016c1a <_vfiprintf_r+0x4e>
 8016c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c14:	b01d      	add	sp, #116	; 0x74
 8016c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c1a:	89ab      	ldrh	r3, [r5, #12]
 8016c1c:	0598      	lsls	r0, r3, #22
 8016c1e:	d4f7      	bmi.n	8016c10 <_vfiprintf_r+0x44>
 8016c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c22:	f7fe fdd5 	bl	80157d0 <__retarget_lock_release_recursive>
 8016c26:	e7f3      	b.n	8016c10 <_vfiprintf_r+0x44>
 8016c28:	2300      	movs	r3, #0
 8016c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c2c:	2320      	movs	r3, #32
 8016c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c32:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c36:	2330      	movs	r3, #48	; 0x30
 8016c38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016dec <_vfiprintf_r+0x220>
 8016c3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c40:	f04f 0901 	mov.w	r9, #1
 8016c44:	4623      	mov	r3, r4
 8016c46:	469a      	mov	sl, r3
 8016c48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c4c:	b10a      	cbz	r2, 8016c52 <_vfiprintf_r+0x86>
 8016c4e:	2a25      	cmp	r2, #37	; 0x25
 8016c50:	d1f9      	bne.n	8016c46 <_vfiprintf_r+0x7a>
 8016c52:	ebba 0b04 	subs.w	fp, sl, r4
 8016c56:	d00b      	beq.n	8016c70 <_vfiprintf_r+0xa4>
 8016c58:	465b      	mov	r3, fp
 8016c5a:	4622      	mov	r2, r4
 8016c5c:	4629      	mov	r1, r5
 8016c5e:	4630      	mov	r0, r6
 8016c60:	f7ff ffa1 	bl	8016ba6 <__sfputs_r>
 8016c64:	3001      	adds	r0, #1
 8016c66:	f000 80a9 	beq.w	8016dbc <_vfiprintf_r+0x1f0>
 8016c6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016c6c:	445a      	add	r2, fp
 8016c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8016c70:	f89a 3000 	ldrb.w	r3, [sl]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	f000 80a1 	beq.w	8016dbc <_vfiprintf_r+0x1f0>
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016c80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c84:	f10a 0a01 	add.w	sl, sl, #1
 8016c88:	9304      	str	r3, [sp, #16]
 8016c8a:	9307      	str	r3, [sp, #28]
 8016c8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c90:	931a      	str	r3, [sp, #104]	; 0x68
 8016c92:	4654      	mov	r4, sl
 8016c94:	2205      	movs	r2, #5
 8016c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c9a:	4854      	ldr	r0, [pc, #336]	; (8016dec <_vfiprintf_r+0x220>)
 8016c9c:	f7e9 fb20 	bl	80002e0 <memchr>
 8016ca0:	9a04      	ldr	r2, [sp, #16]
 8016ca2:	b9d8      	cbnz	r0, 8016cdc <_vfiprintf_r+0x110>
 8016ca4:	06d1      	lsls	r1, r2, #27
 8016ca6:	bf44      	itt	mi
 8016ca8:	2320      	movmi	r3, #32
 8016caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016cae:	0713      	lsls	r3, r2, #28
 8016cb0:	bf44      	itt	mi
 8016cb2:	232b      	movmi	r3, #43	; 0x2b
 8016cb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8016cbc:	2b2a      	cmp	r3, #42	; 0x2a
 8016cbe:	d015      	beq.n	8016cec <_vfiprintf_r+0x120>
 8016cc0:	9a07      	ldr	r2, [sp, #28]
 8016cc2:	4654      	mov	r4, sl
 8016cc4:	2000      	movs	r0, #0
 8016cc6:	f04f 0c0a 	mov.w	ip, #10
 8016cca:	4621      	mov	r1, r4
 8016ccc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cd0:	3b30      	subs	r3, #48	; 0x30
 8016cd2:	2b09      	cmp	r3, #9
 8016cd4:	d94d      	bls.n	8016d72 <_vfiprintf_r+0x1a6>
 8016cd6:	b1b0      	cbz	r0, 8016d06 <_vfiprintf_r+0x13a>
 8016cd8:	9207      	str	r2, [sp, #28]
 8016cda:	e014      	b.n	8016d06 <_vfiprintf_r+0x13a>
 8016cdc:	eba0 0308 	sub.w	r3, r0, r8
 8016ce0:	fa09 f303 	lsl.w	r3, r9, r3
 8016ce4:	4313      	orrs	r3, r2
 8016ce6:	9304      	str	r3, [sp, #16]
 8016ce8:	46a2      	mov	sl, r4
 8016cea:	e7d2      	b.n	8016c92 <_vfiprintf_r+0xc6>
 8016cec:	9b03      	ldr	r3, [sp, #12]
 8016cee:	1d19      	adds	r1, r3, #4
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	9103      	str	r1, [sp, #12]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	bfbb      	ittet	lt
 8016cf8:	425b      	neglt	r3, r3
 8016cfa:	f042 0202 	orrlt.w	r2, r2, #2
 8016cfe:	9307      	strge	r3, [sp, #28]
 8016d00:	9307      	strlt	r3, [sp, #28]
 8016d02:	bfb8      	it	lt
 8016d04:	9204      	strlt	r2, [sp, #16]
 8016d06:	7823      	ldrb	r3, [r4, #0]
 8016d08:	2b2e      	cmp	r3, #46	; 0x2e
 8016d0a:	d10c      	bne.n	8016d26 <_vfiprintf_r+0x15a>
 8016d0c:	7863      	ldrb	r3, [r4, #1]
 8016d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8016d10:	d134      	bne.n	8016d7c <_vfiprintf_r+0x1b0>
 8016d12:	9b03      	ldr	r3, [sp, #12]
 8016d14:	1d1a      	adds	r2, r3, #4
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	9203      	str	r2, [sp, #12]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	bfb8      	it	lt
 8016d1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016d22:	3402      	adds	r4, #2
 8016d24:	9305      	str	r3, [sp, #20]
 8016d26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016dfc <_vfiprintf_r+0x230>
 8016d2a:	7821      	ldrb	r1, [r4, #0]
 8016d2c:	2203      	movs	r2, #3
 8016d2e:	4650      	mov	r0, sl
 8016d30:	f7e9 fad6 	bl	80002e0 <memchr>
 8016d34:	b138      	cbz	r0, 8016d46 <_vfiprintf_r+0x17a>
 8016d36:	9b04      	ldr	r3, [sp, #16]
 8016d38:	eba0 000a 	sub.w	r0, r0, sl
 8016d3c:	2240      	movs	r2, #64	; 0x40
 8016d3e:	4082      	lsls	r2, r0
 8016d40:	4313      	orrs	r3, r2
 8016d42:	3401      	adds	r4, #1
 8016d44:	9304      	str	r3, [sp, #16]
 8016d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d4a:	4829      	ldr	r0, [pc, #164]	; (8016df0 <_vfiprintf_r+0x224>)
 8016d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d50:	2206      	movs	r2, #6
 8016d52:	f7e9 fac5 	bl	80002e0 <memchr>
 8016d56:	2800      	cmp	r0, #0
 8016d58:	d03f      	beq.n	8016dda <_vfiprintf_r+0x20e>
 8016d5a:	4b26      	ldr	r3, [pc, #152]	; (8016df4 <_vfiprintf_r+0x228>)
 8016d5c:	bb1b      	cbnz	r3, 8016da6 <_vfiprintf_r+0x1da>
 8016d5e:	9b03      	ldr	r3, [sp, #12]
 8016d60:	3307      	adds	r3, #7
 8016d62:	f023 0307 	bic.w	r3, r3, #7
 8016d66:	3308      	adds	r3, #8
 8016d68:	9303      	str	r3, [sp, #12]
 8016d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d6c:	443b      	add	r3, r7
 8016d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8016d70:	e768      	b.n	8016c44 <_vfiprintf_r+0x78>
 8016d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8016d76:	460c      	mov	r4, r1
 8016d78:	2001      	movs	r0, #1
 8016d7a:	e7a6      	b.n	8016cca <_vfiprintf_r+0xfe>
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	3401      	adds	r4, #1
 8016d80:	9305      	str	r3, [sp, #20]
 8016d82:	4619      	mov	r1, r3
 8016d84:	f04f 0c0a 	mov.w	ip, #10
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d8e:	3a30      	subs	r2, #48	; 0x30
 8016d90:	2a09      	cmp	r2, #9
 8016d92:	d903      	bls.n	8016d9c <_vfiprintf_r+0x1d0>
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d0c6      	beq.n	8016d26 <_vfiprintf_r+0x15a>
 8016d98:	9105      	str	r1, [sp, #20]
 8016d9a:	e7c4      	b.n	8016d26 <_vfiprintf_r+0x15a>
 8016d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016da0:	4604      	mov	r4, r0
 8016da2:	2301      	movs	r3, #1
 8016da4:	e7f0      	b.n	8016d88 <_vfiprintf_r+0x1bc>
 8016da6:	ab03      	add	r3, sp, #12
 8016da8:	9300      	str	r3, [sp, #0]
 8016daa:	462a      	mov	r2, r5
 8016dac:	4b12      	ldr	r3, [pc, #72]	; (8016df8 <_vfiprintf_r+0x22c>)
 8016dae:	a904      	add	r1, sp, #16
 8016db0:	4630      	mov	r0, r6
 8016db2:	f7fd fe89 	bl	8014ac8 <_printf_float>
 8016db6:	4607      	mov	r7, r0
 8016db8:	1c78      	adds	r0, r7, #1
 8016dba:	d1d6      	bne.n	8016d6a <_vfiprintf_r+0x19e>
 8016dbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016dbe:	07d9      	lsls	r1, r3, #31
 8016dc0:	d405      	bmi.n	8016dce <_vfiprintf_r+0x202>
 8016dc2:	89ab      	ldrh	r3, [r5, #12]
 8016dc4:	059a      	lsls	r2, r3, #22
 8016dc6:	d402      	bmi.n	8016dce <_vfiprintf_r+0x202>
 8016dc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016dca:	f7fe fd01 	bl	80157d0 <__retarget_lock_release_recursive>
 8016dce:	89ab      	ldrh	r3, [r5, #12]
 8016dd0:	065b      	lsls	r3, r3, #25
 8016dd2:	f53f af1d 	bmi.w	8016c10 <_vfiprintf_r+0x44>
 8016dd6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016dd8:	e71c      	b.n	8016c14 <_vfiprintf_r+0x48>
 8016dda:	ab03      	add	r3, sp, #12
 8016ddc:	9300      	str	r3, [sp, #0]
 8016dde:	462a      	mov	r2, r5
 8016de0:	4b05      	ldr	r3, [pc, #20]	; (8016df8 <_vfiprintf_r+0x22c>)
 8016de2:	a904      	add	r1, sp, #16
 8016de4:	4630      	mov	r0, r6
 8016de6:	f7fe f8f7 	bl	8014fd8 <_printf_i>
 8016dea:	e7e4      	b.n	8016db6 <_vfiprintf_r+0x1ea>
 8016dec:	080178d4 	.word	0x080178d4
 8016df0:	080178de 	.word	0x080178de
 8016df4:	08014ac9 	.word	0x08014ac9
 8016df8:	08016ba7 	.word	0x08016ba7
 8016dfc:	080178da 	.word	0x080178da

08016e00 <__sflush_r>:
 8016e00:	898a      	ldrh	r2, [r1, #12]
 8016e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e06:	4605      	mov	r5, r0
 8016e08:	0710      	lsls	r0, r2, #28
 8016e0a:	460c      	mov	r4, r1
 8016e0c:	d458      	bmi.n	8016ec0 <__sflush_r+0xc0>
 8016e0e:	684b      	ldr	r3, [r1, #4]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	dc05      	bgt.n	8016e20 <__sflush_r+0x20>
 8016e14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	dc02      	bgt.n	8016e20 <__sflush_r+0x20>
 8016e1a:	2000      	movs	r0, #0
 8016e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e22:	2e00      	cmp	r6, #0
 8016e24:	d0f9      	beq.n	8016e1a <__sflush_r+0x1a>
 8016e26:	2300      	movs	r3, #0
 8016e28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e2c:	682f      	ldr	r7, [r5, #0]
 8016e2e:	6a21      	ldr	r1, [r4, #32]
 8016e30:	602b      	str	r3, [r5, #0]
 8016e32:	d032      	beq.n	8016e9a <__sflush_r+0x9a>
 8016e34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e36:	89a3      	ldrh	r3, [r4, #12]
 8016e38:	075a      	lsls	r2, r3, #29
 8016e3a:	d505      	bpl.n	8016e48 <__sflush_r+0x48>
 8016e3c:	6863      	ldr	r3, [r4, #4]
 8016e3e:	1ac0      	subs	r0, r0, r3
 8016e40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e42:	b10b      	cbz	r3, 8016e48 <__sflush_r+0x48>
 8016e44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e46:	1ac0      	subs	r0, r0, r3
 8016e48:	2300      	movs	r3, #0
 8016e4a:	4602      	mov	r2, r0
 8016e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e4e:	6a21      	ldr	r1, [r4, #32]
 8016e50:	4628      	mov	r0, r5
 8016e52:	47b0      	blx	r6
 8016e54:	1c43      	adds	r3, r0, #1
 8016e56:	89a3      	ldrh	r3, [r4, #12]
 8016e58:	d106      	bne.n	8016e68 <__sflush_r+0x68>
 8016e5a:	6829      	ldr	r1, [r5, #0]
 8016e5c:	291d      	cmp	r1, #29
 8016e5e:	d82b      	bhi.n	8016eb8 <__sflush_r+0xb8>
 8016e60:	4a29      	ldr	r2, [pc, #164]	; (8016f08 <__sflush_r+0x108>)
 8016e62:	410a      	asrs	r2, r1
 8016e64:	07d6      	lsls	r6, r2, #31
 8016e66:	d427      	bmi.n	8016eb8 <__sflush_r+0xb8>
 8016e68:	2200      	movs	r2, #0
 8016e6a:	6062      	str	r2, [r4, #4]
 8016e6c:	04d9      	lsls	r1, r3, #19
 8016e6e:	6922      	ldr	r2, [r4, #16]
 8016e70:	6022      	str	r2, [r4, #0]
 8016e72:	d504      	bpl.n	8016e7e <__sflush_r+0x7e>
 8016e74:	1c42      	adds	r2, r0, #1
 8016e76:	d101      	bne.n	8016e7c <__sflush_r+0x7c>
 8016e78:	682b      	ldr	r3, [r5, #0]
 8016e7a:	b903      	cbnz	r3, 8016e7e <__sflush_r+0x7e>
 8016e7c:	6560      	str	r0, [r4, #84]	; 0x54
 8016e7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e80:	602f      	str	r7, [r5, #0]
 8016e82:	2900      	cmp	r1, #0
 8016e84:	d0c9      	beq.n	8016e1a <__sflush_r+0x1a>
 8016e86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e8a:	4299      	cmp	r1, r3
 8016e8c:	d002      	beq.n	8016e94 <__sflush_r+0x94>
 8016e8e:	4628      	mov	r0, r5
 8016e90:	f7ff faa2 	bl	80163d8 <_free_r>
 8016e94:	2000      	movs	r0, #0
 8016e96:	6360      	str	r0, [r4, #52]	; 0x34
 8016e98:	e7c0      	b.n	8016e1c <__sflush_r+0x1c>
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	4628      	mov	r0, r5
 8016e9e:	47b0      	blx	r6
 8016ea0:	1c41      	adds	r1, r0, #1
 8016ea2:	d1c8      	bne.n	8016e36 <__sflush_r+0x36>
 8016ea4:	682b      	ldr	r3, [r5, #0]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d0c5      	beq.n	8016e36 <__sflush_r+0x36>
 8016eaa:	2b1d      	cmp	r3, #29
 8016eac:	d001      	beq.n	8016eb2 <__sflush_r+0xb2>
 8016eae:	2b16      	cmp	r3, #22
 8016eb0:	d101      	bne.n	8016eb6 <__sflush_r+0xb6>
 8016eb2:	602f      	str	r7, [r5, #0]
 8016eb4:	e7b1      	b.n	8016e1a <__sflush_r+0x1a>
 8016eb6:	89a3      	ldrh	r3, [r4, #12]
 8016eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ebc:	81a3      	strh	r3, [r4, #12]
 8016ebe:	e7ad      	b.n	8016e1c <__sflush_r+0x1c>
 8016ec0:	690f      	ldr	r7, [r1, #16]
 8016ec2:	2f00      	cmp	r7, #0
 8016ec4:	d0a9      	beq.n	8016e1a <__sflush_r+0x1a>
 8016ec6:	0793      	lsls	r3, r2, #30
 8016ec8:	680e      	ldr	r6, [r1, #0]
 8016eca:	bf08      	it	eq
 8016ecc:	694b      	ldreq	r3, [r1, #20]
 8016ece:	600f      	str	r7, [r1, #0]
 8016ed0:	bf18      	it	ne
 8016ed2:	2300      	movne	r3, #0
 8016ed4:	eba6 0807 	sub.w	r8, r6, r7
 8016ed8:	608b      	str	r3, [r1, #8]
 8016eda:	f1b8 0f00 	cmp.w	r8, #0
 8016ede:	dd9c      	ble.n	8016e1a <__sflush_r+0x1a>
 8016ee0:	6a21      	ldr	r1, [r4, #32]
 8016ee2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ee4:	4643      	mov	r3, r8
 8016ee6:	463a      	mov	r2, r7
 8016ee8:	4628      	mov	r0, r5
 8016eea:	47b0      	blx	r6
 8016eec:	2800      	cmp	r0, #0
 8016eee:	dc06      	bgt.n	8016efe <__sflush_r+0xfe>
 8016ef0:	89a3      	ldrh	r3, [r4, #12]
 8016ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ef6:	81a3      	strh	r3, [r4, #12]
 8016ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016efc:	e78e      	b.n	8016e1c <__sflush_r+0x1c>
 8016efe:	4407      	add	r7, r0
 8016f00:	eba8 0800 	sub.w	r8, r8, r0
 8016f04:	e7e9      	b.n	8016eda <__sflush_r+0xda>
 8016f06:	bf00      	nop
 8016f08:	dfbffffe 	.word	0xdfbffffe

08016f0c <_fflush_r>:
 8016f0c:	b538      	push	{r3, r4, r5, lr}
 8016f0e:	690b      	ldr	r3, [r1, #16]
 8016f10:	4605      	mov	r5, r0
 8016f12:	460c      	mov	r4, r1
 8016f14:	b913      	cbnz	r3, 8016f1c <_fflush_r+0x10>
 8016f16:	2500      	movs	r5, #0
 8016f18:	4628      	mov	r0, r5
 8016f1a:	bd38      	pop	{r3, r4, r5, pc}
 8016f1c:	b118      	cbz	r0, 8016f26 <_fflush_r+0x1a>
 8016f1e:	6a03      	ldr	r3, [r0, #32]
 8016f20:	b90b      	cbnz	r3, 8016f26 <_fflush_r+0x1a>
 8016f22:	f7fe fa07 	bl	8015334 <__sinit>
 8016f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d0f3      	beq.n	8016f16 <_fflush_r+0xa>
 8016f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f30:	07d0      	lsls	r0, r2, #31
 8016f32:	d404      	bmi.n	8016f3e <_fflush_r+0x32>
 8016f34:	0599      	lsls	r1, r3, #22
 8016f36:	d402      	bmi.n	8016f3e <_fflush_r+0x32>
 8016f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f3a:	f7fe fc48 	bl	80157ce <__retarget_lock_acquire_recursive>
 8016f3e:	4628      	mov	r0, r5
 8016f40:	4621      	mov	r1, r4
 8016f42:	f7ff ff5d 	bl	8016e00 <__sflush_r>
 8016f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f48:	07da      	lsls	r2, r3, #31
 8016f4a:	4605      	mov	r5, r0
 8016f4c:	d4e4      	bmi.n	8016f18 <_fflush_r+0xc>
 8016f4e:	89a3      	ldrh	r3, [r4, #12]
 8016f50:	059b      	lsls	r3, r3, #22
 8016f52:	d4e1      	bmi.n	8016f18 <_fflush_r+0xc>
 8016f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f56:	f7fe fc3b 	bl	80157d0 <__retarget_lock_release_recursive>
 8016f5a:	e7dd      	b.n	8016f18 <_fflush_r+0xc>

08016f5c <__swhatbuf_r>:
 8016f5c:	b570      	push	{r4, r5, r6, lr}
 8016f5e:	460c      	mov	r4, r1
 8016f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f64:	2900      	cmp	r1, #0
 8016f66:	b096      	sub	sp, #88	; 0x58
 8016f68:	4615      	mov	r5, r2
 8016f6a:	461e      	mov	r6, r3
 8016f6c:	da0d      	bge.n	8016f8a <__swhatbuf_r+0x2e>
 8016f6e:	89a3      	ldrh	r3, [r4, #12]
 8016f70:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016f74:	f04f 0100 	mov.w	r1, #0
 8016f78:	bf0c      	ite	eq
 8016f7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016f7e:	2340      	movne	r3, #64	; 0x40
 8016f80:	2000      	movs	r0, #0
 8016f82:	6031      	str	r1, [r6, #0]
 8016f84:	602b      	str	r3, [r5, #0]
 8016f86:	b016      	add	sp, #88	; 0x58
 8016f88:	bd70      	pop	{r4, r5, r6, pc}
 8016f8a:	466a      	mov	r2, sp
 8016f8c:	f000 f848 	bl	8017020 <_fstat_r>
 8016f90:	2800      	cmp	r0, #0
 8016f92:	dbec      	blt.n	8016f6e <__swhatbuf_r+0x12>
 8016f94:	9901      	ldr	r1, [sp, #4]
 8016f96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016f9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016f9e:	4259      	negs	r1, r3
 8016fa0:	4159      	adcs	r1, r3
 8016fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016fa6:	e7eb      	b.n	8016f80 <__swhatbuf_r+0x24>

08016fa8 <__smakebuf_r>:
 8016fa8:	898b      	ldrh	r3, [r1, #12]
 8016faa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016fac:	079d      	lsls	r5, r3, #30
 8016fae:	4606      	mov	r6, r0
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	d507      	bpl.n	8016fc4 <__smakebuf_r+0x1c>
 8016fb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016fb8:	6023      	str	r3, [r4, #0]
 8016fba:	6123      	str	r3, [r4, #16]
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	6163      	str	r3, [r4, #20]
 8016fc0:	b002      	add	sp, #8
 8016fc2:	bd70      	pop	{r4, r5, r6, pc}
 8016fc4:	ab01      	add	r3, sp, #4
 8016fc6:	466a      	mov	r2, sp
 8016fc8:	f7ff ffc8 	bl	8016f5c <__swhatbuf_r>
 8016fcc:	9900      	ldr	r1, [sp, #0]
 8016fce:	4605      	mov	r5, r0
 8016fd0:	4630      	mov	r0, r6
 8016fd2:	f7fd fc23 	bl	801481c <_malloc_r>
 8016fd6:	b948      	cbnz	r0, 8016fec <__smakebuf_r+0x44>
 8016fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fdc:	059a      	lsls	r2, r3, #22
 8016fde:	d4ef      	bmi.n	8016fc0 <__smakebuf_r+0x18>
 8016fe0:	f023 0303 	bic.w	r3, r3, #3
 8016fe4:	f043 0302 	orr.w	r3, r3, #2
 8016fe8:	81a3      	strh	r3, [r4, #12]
 8016fea:	e7e3      	b.n	8016fb4 <__smakebuf_r+0xc>
 8016fec:	89a3      	ldrh	r3, [r4, #12]
 8016fee:	6020      	str	r0, [r4, #0]
 8016ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ff4:	81a3      	strh	r3, [r4, #12]
 8016ff6:	9b00      	ldr	r3, [sp, #0]
 8016ff8:	6163      	str	r3, [r4, #20]
 8016ffa:	9b01      	ldr	r3, [sp, #4]
 8016ffc:	6120      	str	r0, [r4, #16]
 8016ffe:	b15b      	cbz	r3, 8017018 <__smakebuf_r+0x70>
 8017000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017004:	4630      	mov	r0, r6
 8017006:	f000 f81d 	bl	8017044 <_isatty_r>
 801700a:	b128      	cbz	r0, 8017018 <__smakebuf_r+0x70>
 801700c:	89a3      	ldrh	r3, [r4, #12]
 801700e:	f023 0303 	bic.w	r3, r3, #3
 8017012:	f043 0301 	orr.w	r3, r3, #1
 8017016:	81a3      	strh	r3, [r4, #12]
 8017018:	89a3      	ldrh	r3, [r4, #12]
 801701a:	431d      	orrs	r5, r3
 801701c:	81a5      	strh	r5, [r4, #12]
 801701e:	e7cf      	b.n	8016fc0 <__smakebuf_r+0x18>

08017020 <_fstat_r>:
 8017020:	b538      	push	{r3, r4, r5, lr}
 8017022:	4d07      	ldr	r5, [pc, #28]	; (8017040 <_fstat_r+0x20>)
 8017024:	2300      	movs	r3, #0
 8017026:	4604      	mov	r4, r0
 8017028:	4608      	mov	r0, r1
 801702a:	4611      	mov	r1, r2
 801702c:	602b      	str	r3, [r5, #0]
 801702e:	f7ef ffce 	bl	8006fce <_fstat>
 8017032:	1c43      	adds	r3, r0, #1
 8017034:	d102      	bne.n	801703c <_fstat_r+0x1c>
 8017036:	682b      	ldr	r3, [r5, #0]
 8017038:	b103      	cbz	r3, 801703c <_fstat_r+0x1c>
 801703a:	6023      	str	r3, [r4, #0]
 801703c:	bd38      	pop	{r3, r4, r5, pc}
 801703e:	bf00      	nop
 8017040:	24004794 	.word	0x24004794

08017044 <_isatty_r>:
 8017044:	b538      	push	{r3, r4, r5, lr}
 8017046:	4d06      	ldr	r5, [pc, #24]	; (8017060 <_isatty_r+0x1c>)
 8017048:	2300      	movs	r3, #0
 801704a:	4604      	mov	r4, r0
 801704c:	4608      	mov	r0, r1
 801704e:	602b      	str	r3, [r5, #0]
 8017050:	f7ef ffcd 	bl	8006fee <_isatty>
 8017054:	1c43      	adds	r3, r0, #1
 8017056:	d102      	bne.n	801705e <_isatty_r+0x1a>
 8017058:	682b      	ldr	r3, [r5, #0]
 801705a:	b103      	cbz	r3, 801705e <_isatty_r+0x1a>
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	bd38      	pop	{r3, r4, r5, pc}
 8017060:	24004794 	.word	0x24004794

08017064 <__assert_func>:
 8017064:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017066:	4614      	mov	r4, r2
 8017068:	461a      	mov	r2, r3
 801706a:	4b09      	ldr	r3, [pc, #36]	; (8017090 <__assert_func+0x2c>)
 801706c:	681b      	ldr	r3, [r3, #0]
 801706e:	4605      	mov	r5, r0
 8017070:	68d8      	ldr	r0, [r3, #12]
 8017072:	b14c      	cbz	r4, 8017088 <__assert_func+0x24>
 8017074:	4b07      	ldr	r3, [pc, #28]	; (8017094 <__assert_func+0x30>)
 8017076:	9100      	str	r1, [sp, #0]
 8017078:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801707c:	4906      	ldr	r1, [pc, #24]	; (8017098 <__assert_func+0x34>)
 801707e:	462b      	mov	r3, r5
 8017080:	f000 f844 	bl	801710c <fiprintf>
 8017084:	f7fd fb9a 	bl	80147bc <abort>
 8017088:	4b04      	ldr	r3, [pc, #16]	; (801709c <__assert_func+0x38>)
 801708a:	461c      	mov	r4, r3
 801708c:	e7f3      	b.n	8017076 <__assert_func+0x12>
 801708e:	bf00      	nop
 8017090:	240000ac 	.word	0x240000ac
 8017094:	080178ef 	.word	0x080178ef
 8017098:	080178fc 	.word	0x080178fc
 801709c:	0801792a 	.word	0x0801792a

080170a0 <_calloc_r>:
 80170a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170a2:	fba1 2402 	umull	r2, r4, r1, r2
 80170a6:	b94c      	cbnz	r4, 80170bc <_calloc_r+0x1c>
 80170a8:	4611      	mov	r1, r2
 80170aa:	9201      	str	r2, [sp, #4]
 80170ac:	f7fd fbb6 	bl	801481c <_malloc_r>
 80170b0:	9a01      	ldr	r2, [sp, #4]
 80170b2:	4605      	mov	r5, r0
 80170b4:	b930      	cbnz	r0, 80170c4 <_calloc_r+0x24>
 80170b6:	4628      	mov	r0, r5
 80170b8:	b003      	add	sp, #12
 80170ba:	bd30      	pop	{r4, r5, pc}
 80170bc:	220c      	movs	r2, #12
 80170be:	6002      	str	r2, [r0, #0]
 80170c0:	2500      	movs	r5, #0
 80170c2:	e7f8      	b.n	80170b6 <_calloc_r+0x16>
 80170c4:	4621      	mov	r1, r4
 80170c6:	f7fe fab1 	bl	801562c <memset>
 80170ca:	e7f4      	b.n	80170b6 <_calloc_r+0x16>

080170cc <__ascii_mbtowc>:
 80170cc:	b082      	sub	sp, #8
 80170ce:	b901      	cbnz	r1, 80170d2 <__ascii_mbtowc+0x6>
 80170d0:	a901      	add	r1, sp, #4
 80170d2:	b142      	cbz	r2, 80170e6 <__ascii_mbtowc+0x1a>
 80170d4:	b14b      	cbz	r3, 80170ea <__ascii_mbtowc+0x1e>
 80170d6:	7813      	ldrb	r3, [r2, #0]
 80170d8:	600b      	str	r3, [r1, #0]
 80170da:	7812      	ldrb	r2, [r2, #0]
 80170dc:	1e10      	subs	r0, r2, #0
 80170de:	bf18      	it	ne
 80170e0:	2001      	movne	r0, #1
 80170e2:	b002      	add	sp, #8
 80170e4:	4770      	bx	lr
 80170e6:	4610      	mov	r0, r2
 80170e8:	e7fb      	b.n	80170e2 <__ascii_mbtowc+0x16>
 80170ea:	f06f 0001 	mvn.w	r0, #1
 80170ee:	e7f8      	b.n	80170e2 <__ascii_mbtowc+0x16>

080170f0 <__ascii_wctomb>:
 80170f0:	b149      	cbz	r1, 8017106 <__ascii_wctomb+0x16>
 80170f2:	2aff      	cmp	r2, #255	; 0xff
 80170f4:	bf85      	ittet	hi
 80170f6:	238a      	movhi	r3, #138	; 0x8a
 80170f8:	6003      	strhi	r3, [r0, #0]
 80170fa:	700a      	strbls	r2, [r1, #0]
 80170fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017100:	bf98      	it	ls
 8017102:	2001      	movls	r0, #1
 8017104:	4770      	bx	lr
 8017106:	4608      	mov	r0, r1
 8017108:	4770      	bx	lr
	...

0801710c <fiprintf>:
 801710c:	b40e      	push	{r1, r2, r3}
 801710e:	b503      	push	{r0, r1, lr}
 8017110:	4601      	mov	r1, r0
 8017112:	ab03      	add	r3, sp, #12
 8017114:	4805      	ldr	r0, [pc, #20]	; (801712c <fiprintf+0x20>)
 8017116:	f853 2b04 	ldr.w	r2, [r3], #4
 801711a:	6800      	ldr	r0, [r0, #0]
 801711c:	9301      	str	r3, [sp, #4]
 801711e:	f7ff fd55 	bl	8016bcc <_vfiprintf_r>
 8017122:	b002      	add	sp, #8
 8017124:	f85d eb04 	ldr.w	lr, [sp], #4
 8017128:	b003      	add	sp, #12
 801712a:	4770      	bx	lr
 801712c:	240000ac 	.word	0x240000ac

08017130 <_init>:
 8017130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017132:	bf00      	nop
 8017134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017136:	bc08      	pop	{r3}
 8017138:	469e      	mov	lr, r3
 801713a:	4770      	bx	lr

0801713c <_fini>:
 801713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801713e:	bf00      	nop
 8017140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017142:	bc08      	pop	{r3}
 8017144:	469e      	mov	lr, r3
 8017146:	4770      	bx	lr
