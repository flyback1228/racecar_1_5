
racecar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08016ec0  08016ec0  00026ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080177a4  080177a4  000277a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  080177ac  080177ac  000277ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080177b8  080177b8  000277b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000218  24000000  080177bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000044f8  24000218  080179d4  00030218  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004710  080179d4  00034710  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030246  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002dac2  00000000  00000000  00030289  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004583  00000000  00000000  0005dd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e70  00000000  00000000  000622d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000017c5  00000000  00000000  00064140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f436  00000000  00000000  00065905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024260  00000000  00000000  000a4d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018650b  00000000  00000000  000c8f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000093a8  00000000  00000000  0024f4a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  00258850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000218 	.word	0x24000218
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016ea8 	.word	0x08016ea8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400021c 	.word	0x2400021c
 80002dc:	08016ea8 	.word	0x08016ea8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <_ZL6millisv>:

static inline uint32_t micros(void){
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

static inline uint32_t millis(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_ZL6millisv+0x24>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL6millisv+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <_ZL6millisv+0x2c>)
 800069a:	fba1 1303 	umull	r1, r3, r1, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	24000040 	.word	0x24000040
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>:
#include <jy901/JY901_Control.h>
#include <jy901/JY901_Serial.h>
#include <string.h>
#include "utility.h"

CJY901::CJY901(UART_HandleTypeDef* huart) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	_huart=huart;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  _lastTime = millis();
 80006cc:	f7ff ffde 	bl	800068c <_ZL6millisv>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN6CJY9019parseDataEPh>:


bool CJY901::parseData(uint8_t* rxBuffer) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]

  // do sum check to confirm data is not corrupted
  uint8_t sum = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <_ZN6CJY9019parseDataEPh+0x28>
    sum += rxBuffer[cnt];
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4413      	add	r3, r2
 8000700:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2b09      	cmp	r3, #9
 800070c:	d9f2      	bls.n	80006f4 <_ZN6CJY9019parseDataEPh+0x14>
  if (sum != rxBuffer[10])
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	330a      	adds	r3, #10
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	429a      	cmp	r2, r3
 8000718:	d001      	beq.n	800071e <_ZN6CJY9019parseDataEPh+0x3e>
    return false;
 800071a:	2300      	movs	r3, #0
 800071c:	e0a5      	b.n	800086a <_ZN6CJY9019parseDataEPh+0x18a>

  switch (rxBuffer[1]) {  // these cases are based on Manual p26,27,28,29 and 30
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b50      	subs	r3, #80	; 0x50
 8000726:	2b0a      	cmp	r3, #10
 8000728:	f200 8099 	bhi.w	800085e <_ZN6CJY9019parseDataEPh+0x17e>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <_ZN6CJY9019parseDataEPh+0x54>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	08000761 	.word	0x08000761
 8000738:	08000775 	.word	0x08000775
 800073c:	08000789 	.word	0x08000789
 8000740:	0800079d 	.word	0x0800079d
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007c5 	.word	0x080007c5
 800074c:	080007d9 	.word	0x080007d9
 8000750:	080007f3 	.word	0x080007f3
 8000754:	0800080d 	.word	0x0800080d
 8000758:	08000837 	.word	0x08000837
 800075c:	0800084b 	.word	0x0800084b
    case 0x50:
      memcpy(&JY901_data.time, &rxBuffer[2], 8);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	2208      	movs	r2, #8
 800076c:	4619      	mov	r1, r3
 800076e:	f014 feec 	bl	801554a <memcpy>
      break;  // time
 8000772:	e074      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x51:
      memcpy(&JY901_data.acc, &rxBuffer[2], 8);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3302      	adds	r3, #2
 800077e:	2208      	movs	r2, #8
 8000780:	4619      	mov	r1, r3
 8000782:	f014 fee2 	bl	801554a <memcpy>
      break;  // acceleration
 8000786:	e06a      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x52:
      memcpy(&JY901_data.gyro, &rxBuffer[2], 8);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	2208      	movs	r2, #8
 8000794:	4619      	mov	r1, r3
 8000796:	f014 fed8 	bl	801554a <memcpy>
      break;  // angular velocity
 800079a:	e060      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x53:
      memcpy(&JY901_data.angle, &rxBuffer[2], 8);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3302      	adds	r3, #2
 80007a6:	2208      	movs	r2, #8
 80007a8:	4619      	mov	r1, r3
 80007aa:	f014 fece 	bl	801554a <memcpy>
      break;  // angle
 80007ae:	e056      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x54:
      memcpy(&JY901_data.mag, &rxBuffer[2], 8);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	f014 fec4 	bl	801554a <memcpy>
      break;  // magnetic field and temperature
 80007c2:	e04c      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x55:
      memcpy(&JY901_data.dStatus, &rxBuffer[2], 8);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	2208      	movs	r2, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	f014 feba 	bl	801554a <memcpy>
      break;  // D port status
 80007d6:	e042      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x56:
      memcpy(&JY901_data.pressure, &rxBuffer[2], 4);  // pressure
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	335c      	adds	r3, #92	; 0x5c
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	3202      	adds	r2, #2
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.altitude, &rxBuffer[6], 4);  // altitude
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3360      	adds	r3, #96	; 0x60
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	3206      	adds	r2, #6
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	601a      	str	r2, [r3, #0]
      break;
 80007f0:	e035      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x57:
      memcpy(&JY901_data.lon, &rxBuffer[2], 4);  // longtitude
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3364      	adds	r3, #100	; 0x64
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	3202      	adds	r2, #2
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.lat, &rxBuffer[6], 4);  // latitude
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3368      	adds	r3, #104	; 0x68
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	3206      	adds	r2, #6
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	601a      	str	r2, [r3, #0]
      break;
 800080a:	e028      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x58:
      memcpy(&JY901_data.GPSHeight, &rxBuffer[2], 2);    //
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	336c      	adds	r3, #108	; 0x6c
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	3202      	adds	r2, #2
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	b292      	uxth	r2, r2
 8000818:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSYaw, &rxBuffer[4], 2);       // GPS data
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	336e      	adds	r3, #110	; 0x6e
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	3204      	adds	r2, #4
 8000822:	8812      	ldrh	r2, [r2, #0]
 8000824:	b292      	uxth	r2, r2
 8000826:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSVelocity, &rxBuffer[6], 4);  //
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3370      	adds	r3, #112	; 0x70
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	3206      	adds	r2, #6
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	601a      	str	r2, [r3, #0]
      break;
 8000834:	e013      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x59:
      memcpy(&JY901_data.quater, &rxBuffer[2], 8);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3302      	adds	r3, #2
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	f014 fe81 	bl	801554a <memcpy>
      break;  // quaternion
 8000848:	e009      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x5A:
      memcpy(&JY901_data.GPS_DOP, &rxBuffer[2], 8);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3302      	adds	r3, #2
 8000854:	2208      	movs	r2, #8
 8000856:	4619      	mov	r1, r3
 8000858:	f014 fe77 	bl	801554a <memcpy>
      break;  // GPS DOP
 800085c:	bf00      	nop
  }
  _lastTime = millis();  // last receive time
 800085e:	f7ff ff15 	bl	800068c <_ZL6millisv>
 8000862:	4602      	mov	r2, r0
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  return true;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0000      	movs	r0, r0
	...

08000878 <_ZN6CJY9017getAccXEv>:
double CJY901::getTemp() {
  return JY901_data.mag.temperature /
         100.0;  // are all the data(from mag acc gyro) same?
}  // may need further test

double CJY901::getAccX() {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.x / (32768.0 / 16.0);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800088e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008a8 <_ZN6CJY9017getAccXEv+0x30>
 8000892:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000896:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccX() unit: G(gravity)
 800089a:	eeb0 0b47 	vmov.f64	d0, d7
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	00000000 	.word	0x00000000
 80008ac:	40a00000 	.word	0x40a00000

080008b0 <_ZN6CJY9017getAccYEv>:

double CJY901::getAccY() {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.y / (32768.0 / 16.0);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008c6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008e0 <_ZN6CJY9017getAccYEv+0x30>
 80008ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80008ce:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccY() unit: G(gravity)
 80008d2:	eeb0 0b47 	vmov.f64	d0, d7
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40a00000 	.word	0x40a00000

080008e8 <_ZN6CJY9017getAccZEv>:

double CJY901::getAccZ() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.z / (32768.0 / 16.0);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008fe:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000918 <_ZN6CJY9017getAccZEv+0x30>
 8000902:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000906:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccZ() unit: G(gravity)
 800090a:	eeb0 0b47 	vmov.f64	d0, d7
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	00000000 	.word	0x00000000
 800091c:	40a00000 	.word	0x40a00000

08000920 <_ZN6CJY9018getGyroXEv>:

double CJY901::getGyroX() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.x / (32768.0 / 2000.0);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000936:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000950 <_ZN6CJY9018getGyroXEv+0x30>
 800093a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800093e:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroX() unit: degree(s) per second
 8000942:	eeb0 0b47 	vmov.f64	d0, d7
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	d2f1a9fc 	.word	0xd2f1a9fc
 8000954:	4030624d 	.word	0x4030624d

08000958 <_ZN6CJY9018getGyroYEv>:

double CJY901::getGyroY() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.y / (32768.0 / 2000.0);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800096e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000988 <_ZN6CJY9018getGyroYEv+0x30>
 8000972:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000976:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroY() unit: degree(s) per second
 800097a:	eeb0 0b47 	vmov.f64	d0, d7
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	d2f1a9fc 	.word	0xd2f1a9fc
 800098c:	4030624d 	.word	0x4030624d

08000990 <_ZN6CJY9018getGyroZEv>:

double CJY901::getGyroZ() {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.z / (32768.0 / 2000.0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009a6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009c0 <_ZN6CJY9018getGyroZEv+0x30>
 80009aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80009ae:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroZ() unit: degree(s) per second
 80009b2:	eeb0 0b47 	vmov.f64	d0, d7
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009c4:	4030624d 	.word	0x4030624d

080009c8 <_ZN6CJY9017getRollEv>:

/* -- Noticed that The Euler angles' order here is ---- */
/* ----------- Z-Y-X, for more please visit ----------- */
/* --- http://web.mit.edu/2.05/www/Handout/HO2.PDF ---- */
double CJY901::getRoll() {  // X-axis
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.roll / (32768.0 / 180.0);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009de:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009f8 <_ZN6CJY9017getRollEv+0x30>
 80009e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80009e6:	eeb0 7b45 	vmov.f64	d7, d5
}  // getRoll() unit: degree(s)
 80009ea:	eeb0 0b47 	vmov.f64	d0, d7
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	16c16c17 	.word	0x16c16c17
 80009fc:	4066c16c 	.word	0x4066c16c

08000a00 <_ZN6CJY9018getPitchEv>:

double CJY901::getPitch() {  // Y-axis
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.pitch / (32768.0 / 180.0);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a16:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a30 <_ZN6CJY9018getPitchEv+0x30>
 8000a1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000a1e:	eeb0 7b45 	vmov.f64	d7, d5
}  // getPitch() unit: degree(s)
 8000a22:	eeb0 0b47 	vmov.f64	d0, d7
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	16c16c17 	.word	0x16c16c17
 8000a34:	4066c16c 	.word	0x4066c16c

08000a38 <_ZN6CJY9016getYawEv>:

double CJY901::getYaw() {  // Z-axis
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.yaw / (32768.0 / 180.0);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a68 <_ZN6CJY9016getYawEv+0x30>
 8000a52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000a56:	eeb0 7b45 	vmov.f64	d7, d5
}  // getYaw() unit: degree(s)
 8000a5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	16c16c17 	.word	0x16c16c17
 8000a6c:	4066c16c 	.word	0x4066c16c

08000a70 <_Z41__static_initialization_and_destruction_0ii>:
	  HAL_UART_Transmit(_huart, JY901_GPSBAUDRATE, 5, 10);
  }
  //Serial1.write(JY901_GPSBAUDRATE, 5);
}

CJY901 JY901;
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d103      	bne.n	8000a92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000a8e:	f7ff fe15 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000234 	.word	0x24000234

08000aa0 <_GLOBAL__sub_I_JY901_SAVECONF>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffe1 	bl	8000a70 <_Z41__static_initialization_and_destruction_0ii>
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b096      	sub	sp, #88	; 0x58
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 8000ab8:	f107 0320 	add.w	r3, r7, #32
 8000abc:	2238      	movs	r2, #56	; 0x38
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f014 fc6f 	bl	80153a4 <memset>
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ace:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 8000ad8:	f107 0408 	add.w	r4, r7, #8
 8000adc:	461d      	mov	r5, r3
 8000ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ae6:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 8000aea:	f107 0208 	add.w	r2, r7, #8
 8000aee:	f107 0120 	add.w	r1, r7, #32
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4807      	ldr	r0, [pc, #28]	; (8000b14 <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8000af6:	f00b fca0 	bl	800c43a <HAL_QSPI_AutoPolling>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b04:	e000      	b.n	8000b08 <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3758      	adds	r7, #88	; 0x58
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b10:	08016ec0 	.word	0x08016ec0
 8000b14:	24001958 	.word	0x24001958

08000b18 <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	2238      	movs	r2, #56	; 0x38
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f014 fc3c 	bl	80153a4 <memset>
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000b42:	f00b faed 	bl	800c120 <HAL_QSPI_Command>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8000b4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b50:	e023      	b.n	8000b9a <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8000b58:	2305      	movs	r3, #5
 8000b5a:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8000b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <QSPI_W25Q64JV_WriteEnable+0x90>)
 8000b6c:	463c      	mov	r4, r7
 8000b6e:	461d      	mov	r5, r3
 8000b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b78:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000b7c:	463a      	mov	r2, r7
 8000b7e:	f107 0118 	add.w	r1, r7, #24
 8000b82:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000b88:	f00b fc57 	bl	800c43a <HAL_QSPI_AutoPolling>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b96:	e000      	b.n	8000b9a <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3750      	adds	r7, #80	; 0x50
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	24001958 	.word	0x24001958
 8000ba8:	08016ed8 	.word	0x08016ed8

08000bac <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2238      	movs	r2, #56	; 0x38
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f014 fbeb 	bl	80153a4 <memset>
 8000bce:	2366      	movs	r3, #102	; 0x66
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bd6:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000bd8:	463b      	mov	r3, r7
 8000bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bde:	4619      	mov	r1, r3
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <QSPI_W25Q64JV_Reset+0x78>)
 8000be2:	f00b fa9d 	bl	800c120 <HAL_QSPI_Command>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d002      	beq.n	8000bf2 <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 8000bec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bf0:	e01c      	b.n	8000c2c <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf6:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8000bf8:	2399      	movs	r3, #153	; 0x99
 8000bfa:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	; (8000c34 <QSPI_W25Q64JV_Reset+0x78>)
 8000c06:	f00b fa8b 	bl	800c120 <HAL_QSPI_Command>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d002      	beq.n	8000c16 <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c14:	e00a      	b.n	8000c2c <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000c16:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c1a:	f7ff ff49 	bl	8000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c28:	e000      	b.n	8000c2c <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3738      	adds	r7, #56	; 0x38
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	24001958 	.word	0x24001958

08000c38 <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b090      	sub	sp, #64	; 0x40
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000c40:	f7ff ff6a 	bl	8000b18 <QSPI_W25Q64JV_WriteEnable>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d002      	beq.n	8000c50 <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c4e:	e02c      	b.n	8000caa <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2238      	movs	r2, #56	; 0x38
 8000c56:	2100      	movs	r1, #0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f014 fba3 	bl	80153a4 <memset>
 8000c5e:	2320      	movs	r3, #32
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	617b      	str	r3, [r7, #20]
 8000c6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c70:	623b      	str	r3, [r7, #32]
 8000c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c78:	f107 0308 	add.w	r3, r7, #8
 8000c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c80:	4619      	mov	r1, r3
 8000c82:	480c      	ldr	r0, [pc, #48]	; (8000cb4 <QSPI_W25Q64JV_EraseSector+0x7c>)
 8000c84:	f00b fa4c 	bl	800c120 <HAL_QSPI_Command>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	e00a      	b.n	8000caa <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000c94:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c98:	f7ff ff0a 	bl	8000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca6:	e000      	b.n	8000caa <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3740      	adds	r7, #64	; 0x40
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24001958 	.word	0x24001958

08000cb8 <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b092      	sub	sp, #72	; 0x48
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000cc4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cc8:	f7ff fef2 	bl	8000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d002      	beq.n	8000cd8 <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd6:	e044      	b.n	8000d62 <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	2238      	movs	r2, #56	; 0x38
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f014 fb5f 	bl	80153a4 <memset>
 8000ce6:	23eb      	movs	r3, #235	; 0xeb
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	23f0      	movs	r3, #240	; 0xf0
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cf6:	61fb      	str	r3, [r7, #28]
 8000cf8:	2304      	movs	r3, #4
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d08:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d0e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d20:	4619      	mov	r1, r3
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <QSPI_W25Q64JV_Read+0xb4>)
 8000d24:	f00b f9fc 	bl	800c120 <HAL_QSPI_Command>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d32:	e016      	b.n	8000d62 <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d38:	68f9      	ldr	r1, [r7, #12]
 8000d3a:	480c      	ldr	r0, [pc, #48]	; (8000d6c <QSPI_W25Q64JV_Read+0xb4>)
 8000d3c:	f00b fae0 	bl	800c300 <HAL_QSPI_Receive>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d002      	beq.n	8000d4c <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4a:	e00a      	b.n	8000d62 <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d50:	f7ff feae 	bl	8000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8000d5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d5e:	e000      	b.n	8000d62 <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3748      	adds	r7, #72	; 0x48
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24001958 	.word	0x24001958

08000d70 <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b092      	sub	sp, #72	; 0x48
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d80:	f7ff fe96 	bl	8000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	e045      	b.n	8000e1c <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000d90:	f7ff fec2 	bl	8000b18 <QSPI_W25Q64JV_WriteEnable>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	e03d      	b.n	8000e1c <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 8000da0:	f107 0310 	add.w	r3, r7, #16
 8000da4:	2238      	movs	r2, #56	; 0x38
 8000da6:	2100      	movs	r1, #0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f014 fafb 	bl	80153a4 <memset>
 8000dae:	2302      	movs	r3, #2
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	617b      	str	r3, [r7, #20]
 8000db6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dba:	61fb      	str	r3, [r7, #28]
 8000dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dd2:	f107 0310 	add.w	r3, r7, #16
 8000dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4811      	ldr	r0, [pc, #68]	; (8000e24 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000dde:	f00b f99f 	bl	800c120 <HAL_QSPI_Command>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dec:	e016      	b.n	8000e1c <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df2:	68f9      	ldr	r1, [r7, #12]
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000df6:	f00b f9f1 	bl	800c1dc <HAL_QSPI_Transmit>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8000e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e04:	e00a      	b.n	8000e1c <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e06:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e0a:	f7ff fe51 	bl	8000ab0 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e18:	e000      	b.n	8000e1c <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3748      	adds	r7, #72	; 0x48
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	24001958 	.word	0x24001958

08000e28 <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e40:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d801      	bhi.n	8000e4e <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	68b9      	ldr	r1, [r7, #8]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f7ff ff8c 	bl	8000d70 <QSPI_W25Q64JV_PageProgram>
 8000e58:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d117      	bne.n	8000e90 <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d013      	beq.n	8000e90 <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8000e70:	68ba      	ldr	r2, [r7, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	4413      	add	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e86:	bf28      	it	cs
 8000e88:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000e8c:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000e8e:	e7de      	b.n	8000e4e <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8000e90:	693b      	ldr	r3, [r7, #16]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	0b1b      	lsrs	r3, r3, #12
 8000eb0:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eba:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8000ebc:	8afb      	ldrh	r3, [r7, #22]
 8000ebe:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000ec2:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8000ec4:	8abb      	ldrh	r3, [r7, #20]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d801      	bhi.n	8000ed0 <QSPI_W25Q64JV_Write+0x34>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	031b      	lsls	r3, r3, #12
 8000ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4835      	ldr	r0, [pc, #212]	; (8000fb0 <QSPI_W25Q64JV_Write+0x114>)
 8000edc:	f7ff feec 	bl	8000cb8 <QSPI_W25Q64JV_Read>
 8000ee0:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d157      	bne.n	8000f98 <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	e009      	b.n	8000f02 <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000eee:	8afa      	ldrh	r2, [r7, #22]
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a2e      	ldr	r2, [pc, #184]	; (8000fb0 <QSPI_W25Q64JV_Write+0x114>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	2bff      	cmp	r3, #255	; 0xff
 8000efa:	d107      	bne.n	8000f0c <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	3301      	adds	r3, #1
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	8abb      	ldrh	r3, [r7, #20]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d3f1      	bcc.n	8000eee <QSPI_W25Q64JV_Write+0x52>
 8000f0a:	e000      	b.n	8000f0e <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000f0c:	bf00      	nop
        }
        if (i < secremain) {
 8000f0e:	8abb      	ldrh	r3, [r7, #20]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d21d      	bcs.n	8000f52 <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	031b      	lsls	r3, r3, #12
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe8c 	bl	8000c38 <QSPI_W25Q64JV_EraseSector>
 8000f20:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d139      	bne.n	8000f9c <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8000f28:	8afb      	ldrh	r3, [r7, #22]
 8000f2a:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <QSPI_W25Q64JV_Write+0x114>)
 8000f2c:	4413      	add	r3, r2
 8000f2e:	8aba      	ldrh	r2, [r7, #20]
 8000f30:	68f9      	ldr	r1, [r7, #12]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f014 fb09 	bl	801554a <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	031b      	lsls	r3, r3, #12
 8000f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f40:	4619      	mov	r1, r3
 8000f42:	481b      	ldr	r0, [pc, #108]	; (8000fb0 <QSPI_W25Q64JV_Write+0x114>)
 8000f44:	f7ff ff70 	bl	8000e28 <QSPI_W25Q64JV_Write_NoCheck>
 8000f48:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00a      	beq.n	8000f66 <QSPI_W25Q64JV_Write+0xca>
 8000f50:	e029      	b.n	8000fa6 <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 8000f52:	8abb      	ldrh	r3, [r7, #20]
 8000f54:	461a      	mov	r2, r3
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	68f8      	ldr	r0, [r7, #12]
 8000f5a:	f7ff ff65 	bl	8000e28 <QSPI_W25Q64JV_Write_NoCheck>
 8000f5e:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d11c      	bne.n	8000fa0 <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 8000f66:	8abb      	ldrh	r3, [r7, #20]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d01a      	beq.n	8000fa4 <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 8000f78:	8abb      	ldrh	r3, [r7, #20]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8000f80:	8abb      	ldrh	r3, [r7, #20]
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 8000f88:	8abb      	ldrh	r3, [r7, #20]
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 8000f96:	e795      	b.n	8000ec4 <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 8000f98:	bf00      	nop
 8000f9a:	e004      	b.n	8000fa6 <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8000f9c:	bf00      	nop
 8000f9e:	e002      	b.n	8000fa6 <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8000fa0:	bf00      	nop
 8000fa2:	e000      	b.n	8000fa6 <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 8000fa4:	bf00      	nop
    }
    return ret;
 8000fa6:	69fb      	ldr	r3, [r7, #28]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	240002b8 	.word	0x240002b8

08000fb4 <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b090      	sub	sp, #64	; 0x40
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	2238      	movs	r2, #56	; 0x38
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f014 f9ed 	bl	80153a4 <memset>
 8000fca:	2390      	movs	r3, #144	; 0x90
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	623b      	str	r3, [r7, #32]
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000fea:	f107 0308 	add.w	r3, r7, #8
 8000fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	480c      	ldr	r0, [pc, #48]	; (8001028 <QSPI_W25Q64JV_DeviceID+0x74>)
 8000ff6:	f00b f893 	bl	800c120 <HAL_QSPI_Command>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d002      	beq.n	8001006 <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 8001000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001004:	e00c      	b.n	8001020 <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8001006:	f241 3288 	movw	r2, #5000	; 0x1388
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	4806      	ldr	r0, [pc, #24]	; (8001028 <QSPI_W25Q64JV_DeviceID+0x74>)
 800100e:	f00b f977 	bl	800c300 <HAL_QSPI_Receive>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101c:	e000      	b.n	8001020 <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3740      	adds	r7, #64	; 0x40
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	24001958 	.word	0x24001958

0800102c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001034:	1d39      	adds	r1, r7, #4
 8001036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103a:	2201      	movs	r2, #1
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <__io_putchar+0x20>)
 800103e:	f011 f9c9 	bl	80123d4 <HAL_UART_Transmit>
  return ch;
 8001042:	687b      	ldr	r3, [r7, #4]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	24001560 	.word	0x24001560

08001050 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001054:	f005 ffb4 	bl	8006fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001058:	f000 f826 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105c:	f000 fe40 	bl	8001ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001060:	f000 fdf6 	bl	8001c50 <MX_DMA_Init>
  MX_BDMA_Init();
 8001064:	f000 fdd4 	bl	8001c10 <MX_BDMA_Init>
  MX_UART8_Init();
 8001068:	f000 fad8 	bl	800161c <MX_UART8_Init>
  MX_UART4_Init();
 800106c:	f000 f9f2 	bl	8001454 <MX_UART4_Init>
  MX_QUADSPI_Init();
 8001070:	f000 fb20 	bl	80016b4 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8001074:	f000 f894 	bl	80011a0 <MX_ADC1_Init>
  MX_UART5_Init();
 8001078:	f000 fa38 	bl	80014ec <MX_UART5_Init>
  MX_UART7_Init();
 800107c:	f000 fa82 	bl	8001584 <MX_UART7_Init>
  MX_LPUART1_UART_Init();
 8001080:	f000 f99a 	bl	80013b8 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001084:	f000 fb42 	bl	800170c <MX_TIM2_Init>
  MX_TIM16_Init();
 8001088:	f000 fd9a 	bl	8001bc0 <MX_TIM16_Init>
  MX_TIM3_Init();
 800108c:	f000 fbd6 	bl	800183c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001090:	f000 fc56 	bl	8001940 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001094:	f000 fcf2 	bl	8001a7c <MX_TIM15_Init>
  MX_IWDG1_Init();
 8001098:	f000 f970 	bl	800137c <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */

  setup();
 800109c:	f003 fe9c 	bl	8004dd8 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80010a0:	f003 fec4 	bl	8004e2c <loop>
  {
 80010a4:	e7fc      	b.n	80010a0 <main+0x50>
	...

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b09c      	sub	sp, #112	; 0x70
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	224c      	movs	r2, #76	; 0x4c
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f014 f974 	bl	80153a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2220      	movs	r2, #32
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f014 f96e 	bl	80153a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010c8:	2002      	movs	r0, #2
 80010ca:	f00a ff7b 	bl	800bfc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b31      	ldr	r3, [pc, #196]	; (8001198 <SystemClock_Config+0xf0>)
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	4a30      	ldr	r2, [pc, #192]	; (8001198 <SystemClock_Config+0xf0>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010de:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <SystemClock_Config+0xf0>)
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <SystemClock_Config+0xf4>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a2b      	ldr	r2, [pc, #172]	; (800119c <SystemClock_Config+0xf4>)
 80010ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <SystemClock_Config+0xf4>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001100:	bf00      	nop
 8001102:	4b26      	ldr	r3, [pc, #152]	; (800119c <SystemClock_Config+0xf4>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800110e:	d1f8      	bne.n	8001102 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001110:	2309      	movs	r3, #9
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001114:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800111a:	2301      	movs	r3, #1
 800111c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	2302      	movs	r3, #2
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001126:	2305      	movs	r3, #5
 8001128:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 800112a:	23a0      	movs	r3, #160	; 0xa0
 800112c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800112e:	2302      	movs	r3, #2
 8001130:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001132:	2302      	movs	r3, #2
 8001134:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001136:	2302      	movs	r3, #2
 8001138:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800113a:	2308      	movs	r3, #8
 800113c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800113e:	2300      	movs	r3, #0
 8001140:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	4618      	mov	r0, r3
 800114c:	f00b fbb8 	bl	800c8c0 <HAL_RCC_OscConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001156:	f000 fe89 	bl	8001e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115a:	233f      	movs	r3, #63	; 0x3f
 800115c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115e:	2303      	movs	r3, #3
 8001160:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001166:	2308      	movs	r3, #8
 8001168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800116a:	2340      	movs	r3, #64	; 0x40
 800116c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800116e:	2350      	movs	r3, #80	; 0x50
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8001172:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001176:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001178:	2350      	movs	r3, #80	; 0x50
 800117a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	2102      	movs	r1, #2
 8001180:	4618      	mov	r0, r3
 8001182:	f00b fff7 	bl	800d174 <HAL_RCC_ClockConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800118c:	f000 fe6e 	bl	8001e6c <Error_Handler>
  }
}
 8001190:	bf00      	nop
 8001192:	3770      	adds	r7, #112	; 0x70
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	58000400 	.word	0x58000400
 800119c:	58024800 	.word	0x58024800

080011a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08a      	sub	sp, #40	; 0x28
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80011b2:	463b      	mov	r3, r7
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
 80011c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011c4:	4b63      	ldr	r3, [pc, #396]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011c6:	4a64      	ldr	r2, [pc, #400]	; (8001358 <MX_ADC1_Init+0x1b8>)
 80011c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80011ca:	4b62      	ldr	r3, [pc, #392]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80011d2:	4b60      	ldr	r3, [pc, #384]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011d8:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011da:	2201      	movs	r2, #1
 80011dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011de:	4b5d      	ldr	r3, [pc, #372]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011e0:	2204      	movs	r2, #4
 80011e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011e4:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ea:	4b5a      	ldr	r3, [pc, #360]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 80011f0:	4b58      	ldr	r3, [pc, #352]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f6:	4b57      	ldr	r3, [pc, #348]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fc:	4b55      	ldr	r3, [pc, #340]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001202:	4b54      	ldr	r3, [pc, #336]	; (8001354 <MX_ADC1_Init+0x1b4>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <MX_ADC1_Init+0x1b4>)
 800120a:	2203      	movs	r2, #3
 800120c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120e:	4b51      	ldr	r3, [pc, #324]	; (8001354 <MX_ADC1_Init+0x1b4>)
 8001210:	2200      	movs	r2, #0
 8001212:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <MX_ADC1_Init+0x1b4>)
 8001216:	2200      	movs	r2, #0
 8001218:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800121a:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <MX_ADC1_Init+0x1b4>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001222:	484c      	ldr	r0, [pc, #304]	; (8001354 <MX_ADC1_Init+0x1b4>)
 8001224:	f006 f996 	bl	8007554 <HAL_ADC_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800122e:	f000 fe1d 	bl	8001e6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4845      	ldr	r0, [pc, #276]	; (8001354 <MX_ADC1_Init+0x1b4>)
 800123e:	f007 fc23 	bl	8008a88 <HAL_ADCEx_MultiModeConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001248:	f000 fe10 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800124c:	4b43      	ldr	r3, [pc, #268]	; (800135c <MX_ADC1_Init+0x1bc>)
 800124e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001250:	2306      	movs	r3, #6
 8001252:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8001254:	2304      	movs	r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001258:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800125c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800125e:	2304      	movs	r3, #4
 8001260:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4839      	ldr	r0, [pc, #228]	; (8001354 <MX_ADC1_Init+0x1b4>)
 8001270:	f006 fe38 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800127a:	f000 fdf7 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <MX_ADC1_Init+0x1c0>)
 8001280:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001282:	230c      	movs	r3, #12
 8001284:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	4619      	mov	r1, r3
 800128a:	4832      	ldr	r0, [pc, #200]	; (8001354 <MX_ADC1_Init+0x1b4>)
 800128c:	f006 fe2a 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001296:	f000 fde9 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800129a:	4b32      	ldr	r3, [pc, #200]	; (8001364 <MX_ADC1_Init+0x1c4>)
 800129c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800129e:	2312      	movs	r3, #18
 80012a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	482b      	ldr	r0, [pc, #172]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80012a8:	f006 fe1c 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80012b2:	f000 fddb 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012b6:	4b2c      	ldr	r3, [pc, #176]	; (8001368 <MX_ADC1_Init+0x1c8>)
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80012ba:	2318      	movs	r3, #24
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80012c4:	f006 fe0e 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80012ce:	f000 fdcd 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_ADC1_Init+0x1cc>)
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	4619      	mov	r1, r3
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <MX_ADC1_Init+0x1b4>)
 80012e2:	f006 fdff 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80012ec:	f000 fdbe 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_ADC1_Init+0x1d0>)
 80012f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012f4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	4619      	mov	r1, r3
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <MX_ADC1_Init+0x1b4>)
 8001300:	f006 fdf0 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800130a:	f000 fdaf 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800130e:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_ADC1_Init+0x1d4>)
 8001310:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001312:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	4619      	mov	r1, r3
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <MX_ADC1_Init+0x1b4>)
 800131e:	f006 fde1 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001328:	f000 fda0 	bl	8001e6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_ADC1_Init+0x1d8>)
 800132e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001330:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001334:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001336:	463b      	mov	r3, r7
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <MX_ADC1_Init+0x1b4>)
 800133c:	f006 fdd2 	bl	8007ee4 <HAL_ADC_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001346:	f000 fd91 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800134a:	bf00      	nop
 800134c:	3728      	adds	r7, #40	; 0x28
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	240012b8 	.word	0x240012b8
 8001358:	40022000 	.word	0x40022000
 800135c:	0c900008 	.word	0x0c900008
 8001360:	10c00010 	.word	0x10c00010
 8001364:	14f00020 	.word	0x14f00020
 8001368:	21800100 	.word	0x21800100
 800136c:	25b00200 	.word	0x25b00200
 8001370:	2a000400 	.word	0x2a000400
 8001374:	2e300800 	.word	0x2e300800
 8001378:	4b840000 	.word	0x4b840000

0800137c <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_IWDG1_Init+0x34>)
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <MX_IWDG1_Init+0x38>)
 8001384:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_IWDG1_Init+0x34>)
 8001388:	2203      	movs	r2, #3
 800138a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 1999;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_IWDG1_Init+0x34>)
 800138e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001392:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 1999;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_IWDG1_Init+0x34>)
 8001396:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800139a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_IWDG1_Init+0x34>)
 800139e:	f00a fdb2 	bl	800bf06 <HAL_IWDG_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80013a8:	f000 fd60 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	24001394 	.word	0x24001394
 80013b4:	58004800 	.word	0x58004800

080013b8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013bc:	4b22      	ldr	r3, [pc, #136]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <MX_LPUART1_UART_Init+0x94>)
 80013c0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013c4:	4a22      	ldr	r2, [pc, #136]	; (8001450 <MX_LPUART1_UART_Init+0x98>)
 80013c6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013c8:	4b1f      	ldr	r3, [pc, #124]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013d4:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013dc:	220c      	movs	r2, #12
 80013de:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80013fe:	4812      	ldr	r0, [pc, #72]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 8001400:	f010 ff98 	bl	8012334 <HAL_UART_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800140a:	f000 fd2f 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800140e:	2100      	movs	r1, #0
 8001410:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 8001412:	f012 ff55 	bl	80142c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 800141c:	f000 fd26 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001420:	2100      	movs	r1, #0
 8001422:	4809      	ldr	r0, [pc, #36]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 8001424:	f012 ff8a 	bl	801433c <HAL_UARTEx_SetRxFifoThreshold>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800142e:	f000 fd1d 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <MX_LPUART1_UART_Init+0x90>)
 8001434:	f012 ff0b 	bl	801424e <HAL_UARTEx_DisableFifoMode>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800143e:	f000 fd15 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	240013a4 	.word	0x240013a4
 800144c:	58000c00 	.word	0x58000c00
 8001450:	00033324 	.word	0x00033324

08001454 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_UART4_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <MX_UART4_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_UART4_Init+0x90>)
 8001460:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001464:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_UART4_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_UART4_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_UART4_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_UART4_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_UART4_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_UART4_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_UART4_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_UART4_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_UART4_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_UART4_Init+0x90>)
 800149e:	f010 ff49 	bl	8012334 <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80014a8:	f000 fce0 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_UART4_Init+0x90>)
 80014b0:	f012 ff06 	bl	80142c0 <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f000 fcd7 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <MX_UART4_Init+0x90>)
 80014c2:	f012 ff3b 	bl	801433c <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f000 fcce 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_UART4_Init+0x90>)
 80014d2:	f012 febc 	bl	801424e <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f000 fcc6 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	24001438 	.word	0x24001438
 80014e8:	40004c00 	.word	0x40004c00

080014ec <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_UART5_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_UART5_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_UART5_Init+0x90>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_UART5_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_UART5_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_UART5_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_UART5_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_UART5_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_UART5_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_UART5_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_UART5_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_UART5_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_UART5_Init+0x90>)
 8001536:	f010 fefd 	bl	8012334 <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 fc94 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_UART5_Init+0x90>)
 8001548:	f012 feba 	bl	80142c0 <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 fc8b 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_UART5_Init+0x90>)
 800155a:	f012 feef 	bl	801433c <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 fc82 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_UART5_Init+0x90>)
 800156a:	f012 fe70 	bl	801424e <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 fc7a 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	240014cc 	.word	0x240014cc
 8001580:	40005000 	.word	0x40005000

08001584 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_UART7_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_UART7_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_UART7_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_UART7_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_UART7_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_UART7_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_UART7_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_UART7_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_UART7_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_UART7_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_UART7_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_UART7_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_UART7_Init+0x90>)
 80015ce:	f010 feb1 	bl	8012334 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 fc48 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_UART7_Init+0x90>)
 80015e0:	f012 fe6e 	bl	80142c0 <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 fc3f 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <MX_UART7_Init+0x90>)
 80015f2:	f012 fea3 	bl	801433c <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 fc36 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_UART7_Init+0x90>)
 8001602:	f012 fe24 	bl	801424e <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 fc2e 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24001560 	.word	0x24001560
 8001618:	40007800 	.word	0x40007800

0800161c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_UART8_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <MX_UART8_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_UART8_Init+0x90>)
 8001628:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800162c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_UART8_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_UART8_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_UART8_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_UART8_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_UART8_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_UART8_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_UART8_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_UART8_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_UART8_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <MX_UART8_Init+0x90>)
 8001666:	f010 fe65 	bl	8012334 <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001670:	f000 fbfc 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_UART8_Init+0x90>)
 8001678:	f012 fe22 	bl	80142c0 <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8001682:	f000 fbf3 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <MX_UART8_Init+0x90>)
 800168a:	f012 fe57 	bl	801433c <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001694:	f000 fbea 	bl	8001e6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_UART8_Init+0x90>)
 800169a:	f012 fdd8 	bl	801424e <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f000 fbe2 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	240015f4 	.word	0x240015f4
 80016b0:	40007c00 	.word	0x40007c00

080016b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016ba:	4a13      	ldr	r2, [pc, #76]	; (8001708 <MX_QUADSPI_Init+0x54>)
 80016bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016c0:	220a      	movs	r2, #10
 80016c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016cc:	2210      	movs	r2, #16
 80016ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016d2:	2216      	movs	r2, #22
 80016d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016dc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80016e4:	4b07      	ldr	r3, [pc, #28]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <MX_QUADSPI_Init+0x50>)
 80016f2:	f00a fca1 	bl	800c038 <HAL_QSPI_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80016fc:	f000 fbb6 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	24001958 	.word	0x24001958
 8001708:	52005000 	.word	0x52005000

0800170c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08e      	sub	sp, #56	; 0x38
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001712:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	605a      	str	r2, [r3, #4]
 800171c:	609a      	str	r2, [r3, #8]
 800171e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001744:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001748:	2263      	movs	r2, #99	; 0x63
 800174a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <MX_TIM2_Init+0x12c>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001758:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <MX_TIM2_Init+0x12c>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001766:	4834      	ldr	r0, [pc, #208]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001768:	f00e fd8e 	bl	8010288 <HAL_TIM_Base_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001772:	f000 fb7b 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	4619      	mov	r1, r3
 8001782:	482d      	ldr	r0, [pc, #180]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001784:	f00f fd46 	bl	8011214 <HAL_TIM_ConfigClockSource>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800178e:	f000 fb6d 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001792:	4829      	ldr	r0, [pc, #164]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001794:	f00e fe48 	bl	8010428 <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800179e:	f000 fb65 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a6:	2300      	movs	r3, #0
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	4821      	ldr	r0, [pc, #132]	; (8001838 <MX_TIM2_Init+0x12c>)
 80017b2:	f010 fd13 	bl	80121dc <HAL_TIMEx_MasterConfigSynchronization>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80017bc:	f000 fb56 	bl	8001e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c0:	2360      	movs	r3, #96	; 0x60
 80017c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	4818      	ldr	r0, [pc, #96]	; (8001838 <MX_TIM2_Init+0x12c>)
 80017d8:	f00f fc08 	bl	8010fec <HAL_TIM_PWM_ConfigChannel>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80017e2:	f000 fb43 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e6:	463b      	mov	r3, r7
 80017e8:	2204      	movs	r2, #4
 80017ea:	4619      	mov	r1, r3
 80017ec:	4812      	ldr	r0, [pc, #72]	; (8001838 <MX_TIM2_Init+0x12c>)
 80017ee:	f00f fbfd 	bl	8010fec <HAL_TIM_PWM_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80017f8:	f000 fb38 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	2208      	movs	r2, #8
 8001800:	4619      	mov	r1, r3
 8001802:	480d      	ldr	r0, [pc, #52]	; (8001838 <MX_TIM2_Init+0x12c>)
 8001804:	f00f fbf2 	bl	8010fec <HAL_TIM_PWM_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800180e:	f000 fb2d 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001812:	463b      	mov	r3, r7
 8001814:	220c      	movs	r2, #12
 8001816:	4619      	mov	r1, r3
 8001818:	4807      	ldr	r0, [pc, #28]	; (8001838 <MX_TIM2_Init+0x12c>)
 800181a:	f00f fbe7 	bl	8010fec <HAL_TIM_PWM_ConfigChannel>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001824:	f000 fb22 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <MX_TIM2_Init+0x12c>)
 800182a:	f005 f8f1 	bl	8006a10 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	240019a4 	.word	0x240019a4

0800183c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08e      	sub	sp, #56	; 0x38
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001842:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	f107 031c 	add.w	r3, r7, #28
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <MX_TIM3_Init+0xfc>)
 8001870:	4a32      	ldr	r2, [pc, #200]	; (800193c <MX_TIM3_Init+0x100>)
 8001872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <MX_TIM3_Init+0xfc>)
 8001876:	2263      	movs	r2, #99	; 0x63
 8001878:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <MX_TIM3_Init+0xfc>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_TIM3_Init+0xfc>)
 8001882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <MX_TIM3_Init+0xfc>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <MX_TIM3_Init+0xfc>)
 8001890:	2280      	movs	r2, #128	; 0x80
 8001892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001894:	4828      	ldr	r0, [pc, #160]	; (8001938 <MX_TIM3_Init+0xfc>)
 8001896:	f00e fcf7 	bl	8010288 <HAL_TIM_Base_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018a0:	f000 fae4 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ae:	4619      	mov	r1, r3
 80018b0:	4821      	ldr	r0, [pc, #132]	; (8001938 <MX_TIM3_Init+0xfc>)
 80018b2:	f00f fcaf 	bl	8011214 <HAL_TIM_ConfigClockSource>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018bc:	f000 fad6 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018c0:	481d      	ldr	r0, [pc, #116]	; (8001938 <MX_TIM3_Init+0xfc>)
 80018c2:	f00e fdb1 	bl	8010428 <HAL_TIM_PWM_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018cc:	f000 face 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4816      	ldr	r0, [pc, #88]	; (8001938 <MX_TIM3_Init+0xfc>)
 80018e0:	f010 fc7c 	bl	80121dc <HAL_TIMEx_MasterConfigSynchronization>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018ea:	f000 fabf 	bl	8001e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ee:	2360      	movs	r3, #96	; 0x60
 80018f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <MX_TIM3_Init+0xfc>)
 8001906:	f00f fb71 	bl	8010fec <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001910:	f000 faac 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	2204      	movs	r2, #4
 8001918:	4619      	mov	r1, r3
 800191a:	4807      	ldr	r0, [pc, #28]	; (8001938 <MX_TIM3_Init+0xfc>)
 800191c:	f00f fb66 	bl	8010fec <HAL_TIM_PWM_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001926:	f000 faa1 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800192a:	4803      	ldr	r0, [pc, #12]	; (8001938 <MX_TIM3_Init+0xfc>)
 800192c:	f005 f870 	bl	8006a10 <HAL_TIM_MspPostInit>

}
 8001930:	bf00      	nop
 8001932:	3738      	adds	r7, #56	; 0x38
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	240019f0 	.word	0x240019f0
 800193c:	40000400 	.word	0x40000400

08001940 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b090      	sub	sp, #64	; 0x40
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001954:	f107 031c 	add.w	r3, r7, #28
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800197c:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <MX_TIM5_Init+0x134>)
 800197e:	4a3e      	ldr	r2, [pc, #248]	; (8001a78 <MX_TIM5_Init+0x138>)
 8001980:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001982:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <MX_TIM5_Init+0x134>)
 8001984:	2263      	movs	r2, #99	; 0x63
 8001986:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001988:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <MX_TIM5_Init+0x134>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800198e:	4b39      	ldr	r3, [pc, #228]	; (8001a74 <MX_TIM5_Init+0x134>)
 8001990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001994:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <MX_TIM5_Init+0x134>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800199c:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <MX_TIM5_Init+0x134>)
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80019a2:	4834      	ldr	r0, [pc, #208]	; (8001a74 <MX_TIM5_Init+0x134>)
 80019a4:	f00e fc70 	bl	8010288 <HAL_TIM_Base_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80019ae:	f000 fa5d 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80019b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019bc:	4619      	mov	r1, r3
 80019be:	482d      	ldr	r0, [pc, #180]	; (8001a74 <MX_TIM5_Init+0x134>)
 80019c0:	f00f fc28 	bl	8011214 <HAL_TIM_ConfigClockSource>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80019ca:	f000 fa4f 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 80019ce:	4829      	ldr	r0, [pc, #164]	; (8001a74 <MX_TIM5_Init+0x134>)
 80019d0:	f00e fe9a 	bl	8010708 <HAL_TIM_IC_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80019da:	f000 fa47 	bl	8001e6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80019de:	2304      	movs	r3, #4
 80019e0:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80019e2:	2350      	movs	r3, #80	; 0x50
 80019e4:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	481e      	ldr	r0, [pc, #120]	; (8001a74 <MX_TIM5_Init+0x134>)
 80019fa:	f00f fd03 	bl	8011404 <HAL_TIM_SlaveConfigSynchro>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001a04:	f000 fa32 	bl	8001e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a18:	f107 030c 	add.w	r3, r7, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4814      	ldr	r0, [pc, #80]	; (8001a74 <MX_TIM5_Init+0x134>)
 8001a22:	f00f fa46 	bl	8010eb2 <HAL_TIM_IC_ConfigChannel>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001a2c:	f000 fa1e 	bl	8001e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a30:	2302      	movs	r3, #2
 8001a32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001a34:	2302      	movs	r3, #2
 8001a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001a38:	f107 030c 	add.w	r3, r7, #12
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480c      	ldr	r0, [pc, #48]	; (8001a74 <MX_TIM5_Init+0x134>)
 8001a42:	f00f fa36 	bl	8010eb2 <HAL_TIM_IC_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001a4c:	f000 fa0e 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	2300      	movs	r3, #0
 8001a52:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001a58:	463b      	mov	r3, r7
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_TIM5_Init+0x134>)
 8001a5e:	f010 fbbd 	bl	80121dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001a68:	f000 fa00 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	3740      	adds	r7, #64	; 0x40
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	24001a3c 	.word	0x24001a3c
 8001a78:	40000c00 	.word	0x40000c00

08001a7c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b090      	sub	sp, #64	; 0x40
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aae:	463b      	mov	r3, r7
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ab8:	4b3f      	ldr	r3, [pc, #252]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001aba:	4a40      	ldr	r2, [pc, #256]	; (8001bbc <MX_TIM15_Init+0x140>)
 8001abc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8001abe:	4b3e      	ldr	r3, [pc, #248]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ac0:	2263      	movs	r2, #99	; 0x63
 8001ac2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001aca:	4b3b      	ldr	r3, [pc, #236]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ad2:	4b39      	ldr	r3, [pc, #228]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ad8:	4b37      	ldr	r3, [pc, #220]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ade:	4b36      	ldr	r3, [pc, #216]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ae0:	2280      	movs	r2, #128	; 0x80
 8001ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001ae4:	4834      	ldr	r0, [pc, #208]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ae6:	f00e fbcf 	bl	8010288 <HAL_TIM_Base_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001af0:	f000 f9bc 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001afe:	4619      	mov	r1, r3
 8001b00:	482d      	ldr	r0, [pc, #180]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001b02:	f00f fb87 	bl	8011214 <HAL_TIM_ConfigClockSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001b0c:	f000 f9ae 	bl	8001e6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001b10:	4829      	ldr	r0, [pc, #164]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001b12:	f00e fdf9 	bl	8010708 <HAL_TIM_IC_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001b1c:	f000 f9a6 	bl	8001e6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001b20:	2304      	movs	r3, #4
 8001b22:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001b24:	2350      	movs	r3, #80	; 0x50
 8001b26:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481f      	ldr	r0, [pc, #124]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001b3c:	f00f fc62 	bl	8011404 <HAL_TIM_SlaveConfigSynchro>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001b46:	f000 f991 	bl	8001e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b52:	2300      	movs	r3, #0
 8001b54:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4619      	mov	r1, r3
 8001b62:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001b64:	f00f f9a5 	bl	8010eb2 <HAL_TIM_IC_ConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001b6e:	f000 f97d 	bl	8001e6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b72:	2302      	movs	r3, #2
 8001b74:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b76:	2302      	movs	r3, #2
 8001b78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001b84:	f00f f995 	bl	8010eb2 <HAL_TIM_IC_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001b8e:	f000 f96d 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <MX_TIM15_Init+0x13c>)
 8001ba0:	f010 fb1c 	bl	80121dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001baa:	f000 f95f 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	3740      	adds	r7, #64	; 0x40
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	24001a88 	.word	0x24001a88
 8001bbc:	40014000 	.word	0x40014000

08001bc0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001bc6:	4a11      	ldr	r2, [pc, #68]	; (8001c0c <MX_TIM16_Init+0x4c>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8001bca:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001bcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bd0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001bda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bde:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001bee:	2280      	movs	r2, #128	; 0x80
 8001bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM16_Init+0x48>)
 8001bf4:	f00e fb48 	bl	8010288 <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001bfe:	f000 f935 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	24001ad4 	.word	0x24001ad4
 8001c0c:	40014400 	.word	0x40014400

08001c10 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <MX_BDMA_Init+0x3c>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c1c:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <MX_BDMA_Init+0x3c>)
 8001c1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <MX_BDMA_Init+0x3c>)
 8001c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2100      	movs	r1, #0
 8001c38:	2081      	movs	r0, #129	; 0x81
 8001c3a:	f007 f8de 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001c3e:	2081      	movs	r0, #129	; 0x81
 8001c40:	f007 f8f5 	bl	8008e2e <HAL_NVIC_EnableIRQ>

}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	58024400 	.word	0x58024400

08001c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c56:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <MX_DMA_Init+0x8c>)
 8001c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c5c:	4a1f      	ldr	r2, [pc, #124]	; (8001cdc <MX_DMA_Init+0x8c>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c66:	4b1d      	ldr	r3, [pc, #116]	; (8001cdc <MX_DMA_Init+0x8c>)
 8001c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	200b      	movs	r0, #11
 8001c7a:	f007 f8be 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c7e:	200b      	movs	r0, #11
 8001c80:	f007 f8d5 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2100      	movs	r1, #0
 8001c88:	200c      	movs	r0, #12
 8001c8a:	f007 f8b6 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c8e:	200c      	movs	r0, #12
 8001c90:	f007 f8cd 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	200d      	movs	r0, #13
 8001c9a:	f007 f8ae 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c9e:	200d      	movs	r0, #13
 8001ca0:	f007 f8c5 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	200e      	movs	r0, #14
 8001caa:	f007 f8a6 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001cae:	200e      	movs	r0, #14
 8001cb0:	f007 f8bd 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	200f      	movs	r0, #15
 8001cba:	f007 f89e 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cbe:	200f      	movs	r0, #15
 8001cc0:	f007 f8b5 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2010      	movs	r0, #16
 8001cca:	f007 f896 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001cce:	2010      	movs	r0, #16
 8001cd0:	f007 f8ad 	bl	8008e2e <HAL_NVIC_EnableIRQ>

}
 8001cd4:	bf00      	nop
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	58024400 	.word	0x58024400

08001ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08c      	sub	sp, #48	; 0x30
 8001ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce6:	f107 031c 	add.w	r3, r7, #28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
 8001cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf6:	4b59      	ldr	r3, [pc, #356]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a57      	ldr	r2, [pc, #348]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001cfe:	f043 0310 	orr.w	r3, r3, #16
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b55      	ldr	r3, [pc, #340]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0310 	and.w	r3, r3, #16
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a50      	ldr	r2, [pc, #320]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d1c:	f043 0304 	orr.w	r3, r3, #4
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d32:	4b4a      	ldr	r3, [pc, #296]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a48      	ldr	r2, [pc, #288]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b46      	ldr	r3, [pc, #280]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	4a41      	ldr	r2, [pc, #260]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d60:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	4b3b      	ldr	r3, [pc, #236]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	4a39      	ldr	r2, [pc, #228]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d76:	f043 0302 	orr.w	r3, r3, #2
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d92:	4a32      	ldr	r2, [pc, #200]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <MX_GPIO_Init+0x17c>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2168      	movs	r1, #104	; 0x68
 8001dae:	482c      	ldr	r0, [pc, #176]	; (8001e60 <MX_GPIO_Init+0x180>)
 8001db0:	f00a f85c 	bl	800be6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2120      	movs	r1, #32
 8001db8:	482a      	ldr	r0, [pc, #168]	; (8001e64 <MX_GPIO_Init+0x184>)
 8001dba:	f00a f857 	bl	800be6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8001dbe:	2308      	movs	r3, #8
 8001dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001dca:	f107 031c 	add.w	r3, r7, #28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4825      	ldr	r0, [pc, #148]	; (8001e68 <MX_GPIO_Init+0x188>)
 8001dd2:	f009 fe83 	bl	800badc <HAL_GPIO_Init>

  /*Configure GPIO pin : PID_MODE_INPUT_Pin */
  GPIO_InitStruct.Pin = PID_MODE_INPUT_Pin;
 8001dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ddc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PID_MODE_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	4619      	mov	r1, r3
 8001dec:	481e      	ldr	r0, [pc, #120]	; (8001e68 <MX_GPIO_Init+0x188>)
 8001dee:	f009 fe75 	bl	800badc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8001df2:	2368      	movs	r3, #104	; 0x68
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	4815      	ldr	r0, [pc, #84]	; (8001e60 <MX_GPIO_Init+0x180>)
 8001e0a:	f009 fe67 	bl	800badc <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	480f      	ldr	r0, [pc, #60]	; (8001e64 <MX_GPIO_Init+0x184>)
 8001e26:	f009 fe59 	bl	800badc <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4809      	ldr	r0, [pc, #36]	; (8001e64 <MX_GPIO_Init+0x184>)
 8001e3e:	f009 fe4d 	bl	800badc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	2017      	movs	r0, #23
 8001e48:	f006 ffd7 	bl	8008dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e4c:	2017      	movs	r0, #23
 8001e4e:	f006 ffee 	bl	8008e2e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e52:	bf00      	nop
 8001e54:	3730      	adds	r7, #48	; 0x30
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	58024400 	.word	0x58024400
 8001e60:	58020c00 	.word	0x58020c00
 8001e64:	58020400 	.word	0x58020400
 8001e68:	58021000 	.word	0x58021000

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <Error_Handler+0x8>

08001e76 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bfb8      	it	lt
 8001e84:	425b      	neglt	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	080173e0 	.word	0x080173e0

08001ed4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
      data()
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ffe8 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffcf 	bl	8001e92 <_ZN3ros4TimeC1Ev>
    {
    }
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	080173c8 	.word	0x080173c8

08001f04 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	b2ca      	uxtb	r2, r1
 8001f1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0a19      	lsrs	r1, r3, #8
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	b2ca      	uxtb	r2, r1
 8001f30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	0c19      	lsrs	r1, r3, #16
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	3302      	adds	r3, #2
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	0e19      	lsrs	r1, r3, #24
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	4413      	add	r3, r2
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6899      	ldr	r1, [r3, #8]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	4413      	add	r3, r2
 8001f66:	b2ca      	uxtb	r2, r1
 8001f68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	0a19      	lsrs	r1, r3, #8
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3301      	adds	r3, #1
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	b2ca      	uxtb	r2, r1
 8001f7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	0c19      	lsrs	r1, r3, #16
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3302      	adds	r3, #2
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	4413      	add	r3, r2
 8001f8a:	b2ca      	uxtb	r2, r1
 8001f8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	0e19      	lsrs	r1, r3, #24
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	3303      	adds	r3, #3
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	b2ca      	uxtb	r2, r1
 8001f9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3304      	adds	r3, #4
 8001fa4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    }
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	6839      	ldr	r1, [r7, #0]
 8001fda:	440b      	add	r3, r1
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	3302      	adds	r3, #2
 8001fee:	6839      	ldr	r1, [r7, #0]
 8001ff0:	440b      	add	r3, r1
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3303      	adds	r3, #3
 8002004:	6839      	ldr	r1, [r7, #0]
 8002006:	440b      	add	r3, r1
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4413      	add	r3, r2
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3301      	adds	r3, #1
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	440b      	add	r3, r1
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	021b      	lsls	r3, r3, #8
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3302      	adds	r3, #2
 8002044:	6839      	ldr	r1, [r7, #0]
 8002046:	440b      	add	r3, r1
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	041b      	lsls	r3, r3, #16
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3303      	adds	r3, #3
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	440b      	add	r3, r1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3304      	adds	r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
     return offset;
 800206e:	68fb      	ldr	r3, [r7, #12]
    }
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	08016ef0 	.word	0x08016ef0

08002098 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80020a2:	4618      	mov	r0, r3
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	08016f00 	.word	0x08016f00

080020b4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fef8 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a09      	ldr	r2, [pc, #36]	; (80020f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80020d4:	609a      	str	r2, [r3, #8]
      message_type(""),
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80020da:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80020e0:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	615a      	str	r2, [r3, #20]
    {
    }
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	080173b0 	.word	0x080173b0
 80020f8:	08016f24 	.word	0x08016f24

080020fc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b088      	sub	sp, #32
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8899      	ldrh	r1, [r3, #4]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	4413      	add	r3, r2
 8002114:	b2ca      	uxtb	r2, r1
 8002116:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	889b      	ldrh	r3, [r3, #4]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	b299      	uxth	r1, r3
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3302      	adds	r3, #2
 8002130:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f922 	bl	8000380 <strlen>
 800213c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4413      	add	r3, r2
 8002144:	69b9      	ldr	r1, [r7, #24]
 8002146:	4618      	mov	r0, r3
 8002148:	f002 feb2 	bl	8004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3304      	adds	r3, #4
 8002150:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	18d0      	adds	r0, r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4619      	mov	r1, r3
 8002160:	f013 f9f3 	bl	801554a <memcpy>
      offset += length_topic_name;
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f905 	bl	8000380 <strlen>
 8002176:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	4413      	add	r3, r2
 800217e:	6979      	ldr	r1, [r7, #20]
 8002180:	4618      	mov	r0, r3
 8002182:	f002 fe95 	bl	8004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	18d0      	adds	r0, r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4619      	mov	r1, r3
 800219a:	f013 f9d6 	bl	801554a <memcpy>
      offset += length_message_type;
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe f8e8 	bl	8000380 <strlen>
 80021b0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	683a      	ldr	r2, [r7, #0]
 80021b6:	4413      	add	r3, r2
 80021b8:	6939      	ldr	r1, [r7, #16]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fe78 	bl	8004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	3304      	adds	r3, #4
 80021c4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	18d0      	adds	r0, r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4619      	mov	r1, r3
 80021d4:	f013 f9b9 	bl	801554a <memcpy>
      offset += length_md5sum;
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4413      	add	r3, r2
 80021de:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80021e6:	68f9      	ldr	r1, [r7, #12]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	b2ca      	uxtb	r2, r1
 80021f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	0a19      	lsrs	r1, r3, #8
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	4413      	add	r3, r2
 80021fe:	b2ca      	uxtb	r2, r1
 8002200:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	0c19      	lsrs	r1, r3, #16
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3302      	adds	r3, #2
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	4413      	add	r3, r2
 800220e:	b2ca      	uxtb	r2, r1
 8002210:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	0e19      	lsrs	r1, r3, #24
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3303      	adds	r3, #3
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	4413      	add	r3, r2
 800221e:	b2ca      	uxtb	r2, r1
 8002220:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	61fb      	str	r3, [r7, #28]
      return offset;
 8002228:	69fb      	ldr	r3, [r7, #28]
    }
 800222a:	4618      	mov	r0, r3
 800222c:	3720      	adds	r7, #32
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002232:	b580      	push	{r7, lr}
 8002234:	b08a      	sub	sp, #40	; 0x28
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	4413      	add	r3, r2
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b29a      	uxth	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	889b      	ldrh	r3, [r3, #4]
 8002252:	b21a      	sxth	r2, r3
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	3301      	adds	r3, #1
 8002258:	6839      	ldr	r1, [r7, #0]
 800225a:	440b      	add	r3, r1
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21b      	sxth	r3, r3
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	b29a      	uxth	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	3302      	adds	r3, #2
 8002270:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	441a      	add	r2, r3
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f002 fe35 	bl	8004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	3304      	adds	r3, #4
 8002288:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
 800228e:	e00b      	b.n	80022a8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002294:	441a      	add	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	3b01      	subs	r3, #1
 800229a:	6839      	ldr	r1, [r7, #0]
 800229c:	440b      	add	r3, r1
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	3301      	adds	r3, #1
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	4413      	add	r3, r2
 80022ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3ed      	bcc.n	8002290 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	4413      	add	r3, r2
 80022ba:	3b01      	subs	r3, #1
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	2200      	movs	r2, #0
 80022c2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	441a      	add	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	4413      	add	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	441a      	add	r2, r3
 80022de:	f107 0310 	add.w	r3, r7, #16
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f002 fe02 	bl	8004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3304      	adds	r3, #4
 80022ee:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	623b      	str	r3, [r7, #32]
 80022f4:	e00b      	b.n	800230e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	441a      	add	r2, r3
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	3b01      	subs	r3, #1
 8002300:	6839      	ldr	r1, [r7, #0]
 8002302:	440b      	add	r3, r1
 8002304:	7812      	ldrb	r2, [r2, #0]
 8002306:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	3301      	adds	r3, #1
 800230c:	623b      	str	r3, [r7, #32]
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	4413      	add	r3, r2
 8002314:	6a3a      	ldr	r2, [r7, #32]
 8002316:	429a      	cmp	r2, r3
 8002318:	d3ed      	bcc.n	80022f6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4413      	add	r3, r2
 8002320:	3b01      	subs	r3, #1
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	3b01      	subs	r3, #1
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	441a      	add	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4413      	add	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	441a      	add	r2, r3
 8002344:	f107 030c 	add.w	r3, r7, #12
 8002348:	4611      	mov	r1, r2
 800234a:	4618      	mov	r0, r3
 800234c:	f002 fdcf 	bl	8004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	3304      	adds	r3, #4
 8002354:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e00b      	b.n	8002374 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	441a      	add	r2, r3
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3b01      	subs	r3, #1
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	440b      	add	r3, r1
 800236a:	7812      	ldrb	r2, [r2, #0]
 800236c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4413      	add	r3, r2
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	429a      	cmp	r2, r3
 800237e:	d3ed      	bcc.n	800235c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4413      	add	r3, r2
 8002386:	3b01      	subs	r3, #1
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	4413      	add	r3, r2
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	3b01      	subs	r3, #1
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	441a      	add	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	4413      	add	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	440a      	add	r2, r1
 80023b0:	7812      	ldrb	r2, [r2, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	3301      	adds	r3, #1
 80023bc:	6839      	ldr	r1, [r7, #0]
 80023be:	440b      	add	r3, r1
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3302      	adds	r3, #2
 80023ce:	6839      	ldr	r1, [r7, #0]
 80023d0:	440b      	add	r3, r1
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	041b      	lsls	r3, r3, #16
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	3303      	adds	r3, #3
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	440b      	add	r3, r1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	061b      	lsls	r3, r3, #24
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3304      	adds	r3, #4
 80023f6:	61bb      	str	r3, [r7, #24]
     return offset;
 80023f8:	69bb      	ldr	r3, [r7, #24]
    }
 80023fa:	4618      	mov	r0, r3
 80023fc:	3728      	adds	r7, #40	; 0x28
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	08016f28 	.word	0x08016f28

08002420 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	4b03      	ldr	r3, [pc, #12]	; (8002438 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	08016f44 	.word	0x08016f44

0800243c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fd34 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 800244c:	4a06      	ldr	r2, [pc, #24]	; (8002468 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	601a      	str	r2, [r3, #0]
      level(0),
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	711a      	strb	r2, [r3, #4]
      msg("")
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	4a04      	ldr	r2, [pc, #16]	; (800246c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800245c:	609a      	str	r2, [r3, #8]
    {
    }
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	08017398 	.word	0x08017398
 800246c:	08016f24 	.word	0x08016f24

08002470 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	4413      	add	r3, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	7912      	ldrb	r2, [r2, #4]
 8002488:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	3301      	adds	r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd ff73 	bl	8000380 <strlen>
 800249a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 fd03 	bl	8004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3304      	adds	r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	18d0      	adds	r0, r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	4619      	mov	r1, r3
 80024be:	f013 f844 	bl	801554a <memcpy>
      offset += length_msg;
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4413      	add	r3, r2
 80024c8:	60fb      	str	r3, [r7, #12]
      return offset;
 80024ca:	68fb      	ldr	r3, [r7, #12]
    }
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	3301      	adds	r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	441a      	add	r2, r3
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	4611      	mov	r1, r2
 8002500:	4618      	mov	r0, r3
 8002502:	f002 fcf4 	bl	8004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	3304      	adds	r3, #4
 800250a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	e00b      	b.n	800252a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	441a      	add	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3b01      	subs	r3, #1
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	440b      	add	r3, r1
 8002520:	7812      	ldrb	r2, [r2, #0]
 8002522:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	4413      	add	r3, r2
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	429a      	cmp	r2, r3
 8002534:	d3ed      	bcc.n	8002512 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	3b01      	subs	r3, #1
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	4413      	add	r3, r2
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	3b01      	subs	r3, #1
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	441a      	add	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	4413      	add	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
     return offset;
 800255a:	693b      	ldr	r3, [r7, #16]
    }
 800255c:	4618      	mov	r0, r3
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	08016f68 	.word	0x08016f68

08002580 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	08016f7c 	.word	0x08016f7c

0800259c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc84 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	615a      	str	r2, [r3, #20]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	61da      	str	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	621a      	str	r2, [r3, #32]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	08017380 	.word	0x08017380

080025f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	; 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6859      	ldr	r1, [r3, #4]
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	b2ca      	uxtb	r2, r1
 8002612:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	0a19      	lsrs	r1, r3, #8
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	3301      	adds	r3, #1
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	b2ca      	uxtb	r2, r1
 8002624:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	0c19      	lsrs	r1, r3, #16
 800262c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262e:	3302      	adds	r3, #2
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	4413      	add	r3, r2
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0e19      	lsrs	r1, r3, #24
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	3303      	adds	r3, #3
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	4413      	add	r3, r2
 8002646:	b2ca      	uxtb	r2, r1
 8002648:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3304      	adds	r3, #4
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002650:	2300      	movs	r3, #0
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	e02a      	b.n	80026ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	6a3b      	ldr	r3, [r7, #32]
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002664:	6939      	ldr	r1, [r7, #16]
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	4413      	add	r3, r2
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	0a19      	lsrs	r1, r3, #8
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3301      	adds	r3, #1
 8002678:	683a      	ldr	r2, [r7, #0]
 800267a:	4413      	add	r3, r2
 800267c:	b2ca      	uxtb	r2, r1
 800267e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	0c19      	lsrs	r1, r3, #16
 8002684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002686:	3302      	adds	r3, #2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	b2ca      	uxtb	r2, r1
 800268e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	0e19      	lsrs	r1, r3, #24
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	3303      	adds	r3, #3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	b2ca      	uxtb	r2, r1
 800269e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a2:	3304      	adds	r3, #4
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	3301      	adds	r3, #1
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d3cf      	bcc.n	8002656 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6919      	ldr	r1, [r3, #16]
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	b2ca      	uxtb	r2, r1
 80026c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	0a19      	lsrs	r1, r3, #8
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	3301      	adds	r3, #1
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	b2ca      	uxtb	r2, r1
 80026d4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	0c19      	lsrs	r1, r3, #16
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	3302      	adds	r3, #2
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	0e19      	lsrs	r1, r3, #24
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	3303      	adds	r3, #3
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	4413      	add	r3, r2
 80026f6:	b2ca      	uxtb	r2, r1
 80026f8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	3304      	adds	r3, #4
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	e02a      	b.n	800275c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699a      	ldr	r2, [r3, #24]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002714:	68f9      	ldr	r1, [r7, #12]
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	4413      	add	r3, r2
 800271c:	b2ca      	uxtb	r2, r1
 800271e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	0a19      	lsrs	r1, r3, #8
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	3301      	adds	r3, #1
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	b2ca      	uxtb	r2, r1
 800272e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	0c19      	lsrs	r1, r3, #16
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3302      	adds	r3, #2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4413      	add	r3, r2
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	0e19      	lsrs	r1, r3, #24
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3303      	adds	r3, #3
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	4413      	add	r3, r2
 800274c:	b2ca      	uxtb	r2, r1
 800274e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3304      	adds	r3, #4
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3301      	adds	r3, #1
 800275a:	61fb      	str	r3, [r7, #28]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	69fa      	ldr	r2, [r7, #28]
 8002762:	429a      	cmp	r2, r3
 8002764:	d3cf      	bcc.n	8002706 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69d9      	ldr	r1, [r3, #28]
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	b2ca      	uxtb	r2, r1
 8002772:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	0a19      	lsrs	r1, r3, #8
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	3301      	adds	r3, #1
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	0c19      	lsrs	r1, r3, #16
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3302      	adds	r3, #2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	69db      	ldr	r3, [r3, #28]
 800279c:	0e19      	lsrs	r1, r3, #24
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	3303      	adds	r3, #3
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4413      	add	r3, r2
 80027a6:	b2ca      	uxtb	r2, r1
 80027a8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	3304      	adds	r3, #4
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e027      	b.n	8002806 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fddc 	bl	8000380 <strlen>
 80027c8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	6979      	ldr	r1, [r7, #20]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fb6c 	bl	8004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	3304      	adds	r3, #4
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	18d0      	adds	r0, r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4619      	mov	r1, r3
 80027f4:	f012 fea9 	bl	801554a <memcpy>
      offset += length_stringsi;
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4413      	add	r3, r2
 80027fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	3301      	adds	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	429a      	cmp	r2, r3
 800280e:	d3d2      	bcc.n	80027b6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002812:	4618      	mov	r0, r3
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800281a:	b580      	push	{r7, lr}
 800281c:	b08e      	sub	sp, #56	; 0x38
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002834:	3301      	adds	r3, #1
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	4413      	add	r3, r2
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	021b      	lsls	r3, r3, #8
 800283e:	6a3a      	ldr	r2, [r7, #32]
 8002840:	4313      	orrs	r3, r2
 8002842:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002846:	3302      	adds	r3, #2
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	041b      	lsls	r3, r3, #16
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	4313      	orrs	r3, r2
 8002854:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	3303      	adds	r3, #3
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	4413      	add	r3, r2
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	061b      	lsls	r3, r3, #24
 8002862:	6a3a      	ldr	r2, [r7, #32]
 8002864:	4313      	orrs	r3, r2
 8002866:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286a:	3304      	adds	r3, #4
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	429a      	cmp	r2, r3
 8002876:	d90a      	bls.n	800288e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4619      	mov	r1, r3
 8002882:	4610      	mov	r0, r2
 8002884:	f011 ff12 	bl	80146ac <realloc>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a3a      	ldr	r2, [r7, #32]
 8002892:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002894:	2300      	movs	r3, #0
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
 8002898:	e035      	b.n	8002906 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028a2:	6839      	ldr	r1, [r7, #0]
 80028a4:	440a      	add	r2, r1
 80028a6:	7812      	ldrb	r2, [r2, #0]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b0:	3301      	adds	r3, #1
 80028b2:	6839      	ldr	r1, [r7, #0]
 80028b4:	440b      	add	r3, r1
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c2:	3302      	adds	r3, #2
 80028c4:	6839      	ldr	r1, [r7, #0]
 80028c6:	440b      	add	r3, r1
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	041b      	lsls	r3, r3, #16
 80028cc:	4313      	orrs	r3, r2
 80028ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d4:	3303      	adds	r3, #3
 80028d6:	6839      	ldr	r1, [r7, #0]
 80028d8:	440b      	add	r3, r1
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	3304      	adds	r3, #4
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	3208      	adds	r2, #8
 80028fc:	6812      	ldr	r2, [r2, #0]
 80028fe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	3301      	adds	r3, #1
 8002904:	633b      	str	r3, [r7, #48]	; 0x30
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800290c:	429a      	cmp	r2, r3
 800290e:	d3c4      	bcc.n	800289a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	4413      	add	r3, r2
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	3301      	adds	r3, #1
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4413      	add	r3, r2
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	021b      	lsls	r3, r3, #8
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	4313      	orrs	r3, r2
 800292a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	3302      	adds	r3, #2
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	041b      	lsls	r3, r3, #16
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	4313      	orrs	r3, r2
 800293c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800293e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002940:	3303      	adds	r3, #3
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	4413      	add	r3, r2
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	061b      	lsls	r3, r3, #24
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	4313      	orrs	r3, r2
 800294e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	3304      	adds	r3, #4
 8002954:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	429a      	cmp	r2, r3
 800295e:	d90a      	bls.n	8002976 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f011 fe9e 	bl	80146ac <realloc>
 8002970:	4602      	mov	r2, r0
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 800297c:	2300      	movs	r3, #0
 800297e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002980:	e035      	b.n	80029ee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	440a      	add	r2, r1
 800298e:	7812      	ldrb	r2, [r2, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002998:	3301      	adds	r3, #1
 800299a:	6839      	ldr	r1, [r7, #0]
 800299c:	440b      	add	r3, r1
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	021b      	lsls	r3, r3, #8
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029aa:	3302      	adds	r3, #2
 80029ac:	6839      	ldr	r1, [r7, #0]
 80029ae:	440b      	add	r3, r1
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	041b      	lsls	r3, r3, #16
 80029b4:	4313      	orrs	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029bc:	3303      	adds	r3, #3
 80029be:	6839      	ldr	r1, [r7, #0]
 80029c0:	440b      	add	r3, r1
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	061b      	lsls	r3, r3, #24
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	3304      	adds	r3, #4
 80029d4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	3214      	adds	r2, #20
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80029e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ea:	3301      	adds	r3, #1
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3c4      	bcc.n	8002982 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	683a      	ldr	r2, [r7, #0]
 80029fc:	4413      	add	r3, r2
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a04:	3301      	adds	r3, #1
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a16:	3302      	adds	r3, #2
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a28:	3303      	adds	r3, #3
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	061b      	lsls	r3, r3, #24
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	69ba      	ldr	r2, [r7, #24]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d90a      	bls.n	8002a5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f011 fe2a 	bl	80146ac <realloc>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a68:	e03e      	b.n	8002ae8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	441a      	add	r2, r3
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fa39 	bl	8004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	3304      	adds	r3, #4
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
 8002a86:	e00b      	b.n	8002aa0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	441a      	add	r2, r3
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	3b01      	subs	r3, #1
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	440b      	add	r3, r1
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d3ed      	bcc.n	8002a88 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002aac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	3220      	adds	r2, #32
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3bb      	bcc.n	8002a6a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002af4:	4618      	mov	r0, r3
 8002af6:	3738      	adds	r7, #56	; 0x38
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	0801725c 	.word	0x0801725c

08002b18 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	08016fa0 	.word	0x08016fa0

08002b34 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	611a      	str	r2, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b082      	sub	sp, #8
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68d8      	ldr	r0, [r3, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6891      	ldr	r1, [r2, #8]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4798      	blx	r3
 8002b80:	4603      	mov	r3, r0
  };
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
  }
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d077      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a48      	ldr	r2, [pc, #288]	; (8002ce8 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d06f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a45      	ldr	r2, [pc, #276]	; (8002cec <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d067      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a42      	ldr	r2, [pc, #264]	; (8002cf0 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d05f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a3f      	ldr	r2, [pc, #252]	; (8002cf4 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d057      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a3c      	ldr	r2, [pc, #240]	; (8002cf8 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a39      	ldr	r2, [pc, #228]	; (8002cfc <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d047      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a36      	ldr	r2, [pc, #216]	; (8002d00 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d03f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a33      	ldr	r2, [pc, #204]	; (8002d04 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d037      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a30      	ldr	r2, [pc, #192]	; (8002d08 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d02f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a2d      	ldr	r2, [pc, #180]	; (8002d0c <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d027      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2a      	ldr	r2, [pc, #168]	; (8002d10 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d01f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a27      	ldr	r2, [pc, #156]	; (8002d14 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d017      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a24      	ldr	r2, [pc, #144]	; (8002d18 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d00f      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d10a      	bne.n	8002cc2 <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc0:	e009      	b.n	8002cd6 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40020010 	.word	0x40020010
 8002ce8:	40020028 	.word	0x40020028
 8002cec:	40020040 	.word	0x40020040
 8002cf0:	40020058 	.word	0x40020058
 8002cf4:	40020070 	.word	0x40020070
 8002cf8:	40020088 	.word	0x40020088
 8002cfc:	400200a0 	.word	0x400200a0
 8002d00:	400200b8 	.word	0x400200b8
 8002d04:	40020410 	.word	0x40020410
 8002d08:	40020428 	.word	0x40020428
 8002d0c:	40020440 	.word	0x40020440
 8002d10:	40020458 	.word	0x40020458
 8002d14:	40020470 	.word	0x40020470
 8002d18:	40020488 	.word	0x40020488
 8002d1c:	400204a0 	.word	0x400204a0
 8002d20:	400204b8 	.word	0x400204b8

08002d24 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <_ZN13STM32HardwareC1Ev+0x34>)
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	24001438 	.word	0x24001438

08002d5c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f804 	bl	8002d72 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d86:	4619      	mov	r1, r3
 8002d88:	f00f fc32 	bl	80125f0 <HAL_UART_Receive_DMA>
    }
 8002d8c:	bf00      	nop
 8002d8e:	3708      	adds	r7, #8
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002da0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fefb 	bl	8002ba4 <_ZN13STM32Hardware10getRdmaIndEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	429c      	cmp	r4, r3
 8002db2:	bf14      	ite	ne
 8002db4:	2301      	movne	r3, #1
 8002db6:	2300      	moveq	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d012      	beq.n	8002de4 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002dc4:	1c59      	adds	r1, r3, #1
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4413      	add	r3, r2
 8002dd0:	791b      	ldrb	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002de4:	68fb      	ldr	r3, [r7, #12]
    }
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd90      	pop	{r4, r7, pc}
	...

08002df0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e00:	2b20      	cmp	r3, #32
 8002e02:	d108      	bne.n	8002e16 <_ZN13STM32Hardware5flushEv+0x26>
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	f083 0301 	eor.w	r3, r3, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <_ZN13STM32Hardware5flushEv+0x26>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e000      	b.n	8002e18 <_ZN13STM32Hardware5flushEv+0x28>
 8002e16:	2300      	movs	r3, #0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d03f      	beq.n	8002e9c <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002e1c:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d031      	beq.n	8002e96 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d20a      	bcs.n	8002e58 <_ZN13STM32Hardware5flushEv+0x68>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	e006      	b.n	8002e66 <_ZN13STM32Hardware5flushEv+0x76>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002e72:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	4413      	add	r3, r2
 8002e7a:	89fa      	ldrh	r2, [r7, #14]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f00f fb37 	bl	80124f0 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002e96:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
      }
    }
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	24001b20 	.word	0x24001b20

08002ea8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
      int n = length;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebe:	bfa8      	it	ge
 8002ec0:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002ec4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ecc:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	bf28      	it	cs
 8002ed6:	4613      	movcs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ee0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	68b9      	ldr	r1, [r7, #8]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f012 fb2c 	bl	801554a <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	4413      	add	r3, r2
 8002efc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d00b      	beq.n	8002f26 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	18d1      	adds	r1, r2, r3
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	f012 fb12 	bl	801554a <memcpy>
      }

      flush();
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff62 	bl	8002df0 <_ZN13STM32Hardware5flushEv>
    }
 8002f2c:	bf00      	nop
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	f004 f8c6 	bl	80070cc <HAL_GetTick>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe ffac 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 8002f5c:	4a08      	ldr	r2, [pc, #32]	; (8002f80 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
      label(""),
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 8002f66:	605a      	str	r2, [r3, #4]
      size(0),
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	609a      	str	r2, [r3, #8]
      stride(0)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	60da      	str	r2, [r3, #12]
    {
    }
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	0801733c 	.word	0x0801733c
 8002f84:	08016f24 	.word	0x08016f24

08002f88 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7fd f9f0 	bl	8000380 <strlen>
 8002fa0:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	68b9      	ldr	r1, [r7, #8]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f001 ff80 	bl	8004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	18d0      	adds	r0, r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f012 fac1 	bl	801554a <memcpy>
      offset += length_label;
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6899      	ldr	r1, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	b2ca      	uxtb	r2, r1
 8002fdc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	0a19      	lsrs	r1, r3, #8
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	4413      	add	r3, r2
 8002fec:	b2ca      	uxtb	r2, r1
 8002fee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	0c19      	lsrs	r1, r3, #16
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b2ca      	uxtb	r2, r1
 8003000:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0e19      	lsrs	r1, r3, #24
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3303      	adds	r3, #3
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	4413      	add	r3, r2
 8003010:	b2ca      	uxtb	r2, r1
 8003012:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3304      	adds	r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	68d9      	ldr	r1, [r3, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	4413      	add	r3, r2
 8003024:	b2ca      	uxtb	r2, r1
 8003026:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a19      	lsrs	r1, r3, #8
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3301      	adds	r3, #1
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	4413      	add	r3, r2
 8003036:	b2ca      	uxtb	r2, r1
 8003038:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	0c19      	lsrs	r1, r3, #16
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	3302      	adds	r3, #2
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	4413      	add	r3, r2
 8003048:	b2ca      	uxtb	r2, r1
 800304a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0e19      	lsrs	r1, r3, #24
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3303      	adds	r3, #3
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	4413      	add	r3, r2
 800305a:	b2ca      	uxtb	r2, r1
 800305c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	3304      	adds	r3, #4
 8003062:	60fb      	str	r3, [r7, #12]
      return offset;
 8003064:	68fb      	ldr	r3, [r7, #12]
    }
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800306e:	b580      	push	{r7, lr}
 8003070:	b086      	sub	sp, #24
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	683a      	ldr	r2, [r7, #0]
 8003080:	441a      	add	r2, r3
 8003082:	f107 030c 	add.w	r3, r7, #12
 8003086:	4611      	mov	r1, r2
 8003088:	4618      	mov	r0, r3
 800308a:	f001 ff30 	bl	8004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	3304      	adds	r3, #4
 8003092:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e00b      	b.n	80030b2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	441a      	add	r2, r3
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	440b      	add	r3, r1
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3301      	adds	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d3ed      	bcc.n	800309a <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	3b01      	subs	r3, #1
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	683a      	ldr	r2, [r7, #0]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	3301      	adds	r3, #1
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	440b      	add	r3, r1
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	021b      	lsls	r3, r3, #8
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	3302      	adds	r3, #2
 800310e:	6839      	ldr	r1, [r7, #0]
 8003110:	440b      	add	r3, r1
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	3303      	adds	r3, #3
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	440b      	add	r3, r1
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	061b      	lsls	r3, r3, #24
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3304      	adds	r3, #4
 8003136:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3301      	adds	r3, #1
 800314e:	6839      	ldr	r1, [r7, #0]
 8003150:	440b      	add	r3, r1
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	3302      	adds	r3, #2
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	440b      	add	r3, r1
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	041b      	lsls	r3, r3, #16
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3303      	adds	r3, #3
 800317a:	6839      	ldr	r1, [r7, #0]
 800317c:	440b      	add	r3, r1
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	3304      	adds	r3, #4
 800318c:	613b      	str	r3, [r7, #16]
     return offset;
 800318e:	693b      	ldr	r3, [r7, #16]
    }
 8003190:	4618      	mov	r0, r3
 8003192:	3718      	adds	r7, #24
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	08016fc4 	.word	0x08016fc4

080031b4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	4b03      	ldr	r3, [pc, #12]	; (80031cc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	08016fe4 	.word	0x08016fe4

080031d0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4618      	mov	r0, r3
 80031dc:	f7fe fe6a 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3308      	adds	r3, #8
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff feab 	bl	8002f4c <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	619a      	str	r2, [r3, #24]
      data_offset(0)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	61da      	str	r2, [r3, #28]
    {
    }
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	08017324 	.word	0x08017324

08003210 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6859      	ldr	r1, [r3, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	4413      	add	r3, r2
 8003228:	b2ca      	uxtb	r2, r1
 800322a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	0a19      	lsrs	r1, r3, #8
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3301      	adds	r3, #1
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	4413      	add	r3, r2
 800323a:	b2ca      	uxtb	r2, r1
 800323c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0c19      	lsrs	r1, r3, #16
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3302      	adds	r3, #2
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	4413      	add	r3, r2
 800324c:	b2ca      	uxtb	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	0e19      	lsrs	r1, r3, #24
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3303      	adds	r3, #3
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	4413      	add	r3, r2
 800325e:	b2ca      	uxtb	r2, r1
 8003260:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
 800326c:	e017      	b.n	800329e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	18d0      	adds	r0, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699a      	ldr	r2, [r3, #24]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	4413      	add	r3, r2
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	6839      	ldr	r1, [r7, #0]
 800328a:	440a      	add	r2, r1
 800328c:	4611      	mov	r1, r2
 800328e:	4798      	blx	r3
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4413      	add	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	3301      	adds	r3, #1
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3e2      	bcc.n	800326e <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69d9      	ldr	r1, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	b2ca      	uxtb	r2, r1
 80032b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	0a19      	lsrs	r1, r3, #8
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3301      	adds	r3, #1
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	b2ca      	uxtb	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	69db      	ldr	r3, [r3, #28]
 80032cc:	0c19      	lsrs	r1, r3, #16
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3302      	adds	r3, #2
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	4413      	add	r3, r2
 80032d6:	b2ca      	uxtb	r2, r1
 80032d8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	0e19      	lsrs	r1, r3, #24
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3303      	adds	r3, #3
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	b2ca      	uxtb	r2, r1
 80032ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3304      	adds	r3, #4
 80032f0:	60fb      	str	r3, [r7, #12]
      return offset;
 80032f2:	68fb      	ldr	r3, [r7, #12]
    }
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3301      	adds	r3, #1
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	4413      	add	r3, r2
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	021b      	lsls	r3, r3, #8
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	3302      	adds	r3, #2
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	4413      	add	r3, r2
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	3303      	adds	r3, #3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	4413      	add	r3, r2
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	061b      	lsls	r3, r3, #24
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	3304      	adds	r3, #4
 800334e:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	429a      	cmp	r2, r3
 8003358:	d90a      	bls.n	8003370 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	4619      	mov	r1, r3
 8003364:	4610      	mov	r0, r2
 8003366:	f011 f9a1 	bl	80146ac <realloc>
 800336a:	4602      	mov	r2, r0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003376:	2300      	movs	r3, #0
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e01a      	b.n	80033b2 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f103 0008 	add.w	r0, r3, #8
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	4413      	add	r3, r2
 8003388:	4619      	mov	r1, r3
 800338a:	f7ff fe70 	bl	800306e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800338e:	4602      	mov	r2, r0
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4413      	add	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	18d0      	adds	r0, r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3308      	adds	r3, #8
 80033a4:	2210      	movs	r2, #16
 80033a6:	4619      	mov	r1, r3
 80033a8:	f012 f8cf 	bl	801554a <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	3301      	adds	r3, #1
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d3df      	bcc.n	800337c <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	683a      	ldr	r2, [r7, #0]
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	69da      	ldr	r2, [r3, #28]
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	3301      	adds	r3, #1
 80033d2:	6839      	ldr	r1, [r7, #0]
 80033d4:	440b      	add	r3, r1
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	021b      	lsls	r3, r3, #8
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69da      	ldr	r2, [r3, #28]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3302      	adds	r3, #2
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	440b      	add	r3, r1
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69da      	ldr	r2, [r3, #28]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	3303      	adds	r3, #3
 80033fe:	6839      	ldr	r1, [r7, #0]
 8003400:	440b      	add	r3, r1
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	061b      	lsls	r3, r3, #24
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	3304      	adds	r3, #4
 8003410:	617b      	str	r3, [r7, #20]
     return offset;
 8003412:	697b      	ldr	r3, [r7, #20]
    }
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	08017008 	.word	0x08017008

08003438 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	08017024 	.word	0x08017024

08003454 <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fe fd28 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	601a      	str	r2, [r3, #0]
      layout(),
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3304      	adds	r3, #4
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff feae 	bl	80031d0 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	0801730c 	.word	0x0801730c

08003498 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	1d18      	adds	r0, r3, #4
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	f7ff fead 	bl	8003210 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80034b6:	4602      	mov	r2, r0
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	4413      	add	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	4413      	add	r3, r2
 80034c8:	b2ca      	uxtb	r2, r1
 80034ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	0a19      	lsrs	r1, r3, #8
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3301      	adds	r3, #1
 80034d6:	683a      	ldr	r2, [r7, #0]
 80034d8:	4413      	add	r3, r2
 80034da:	b2ca      	uxtb	r2, r1
 80034dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e2:	0c19      	lsrs	r1, r3, #16
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	3302      	adds	r3, #2
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	b2ca      	uxtb	r2, r1
 80034ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f4:	0e19      	lsrs	r1, r3, #24
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3303      	adds	r3, #3
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	4413      	add	r3, r2
 80034fe:	b2ca      	uxtb	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3304      	adds	r3, #4
 8003506:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	e02a      	b.n	8003564 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4413      	add	r3, r2
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 800351c:	68f9      	ldr	r1, [r7, #12]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	4413      	add	r3, r2
 8003524:	b2ca      	uxtb	r2, r1
 8003526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	0a19      	lsrs	r1, r3, #8
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	4413      	add	r3, r2
 8003534:	b2ca      	uxtb	r2, r1
 8003536:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	0c19      	lsrs	r1, r3, #16
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	3302      	adds	r3, #2
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	4413      	add	r3, r2
 8003544:	b2ca      	uxtb	r2, r1
 8003546:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	0e19      	lsrs	r1, r3, #24
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3303      	adds	r3, #3
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	4413      	add	r3, r2
 8003554:	b2ca      	uxtb	r2, r1
 8003556:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3304      	adds	r3, #4
 800355c:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	3301      	adds	r3, #1
 8003562:	613b      	str	r3, [r7, #16]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3cf      	bcc.n	800350e <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 800356e:	697b      	ldr	r3, [r7, #20]
    }
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	1d18      	adds	r0, r3, #4
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	4413      	add	r3, r2
 8003590:	4619      	mov	r1, r3
 8003592:	f7ff feb3 	bl	80032fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	4413      	add	r3, r2
 800359c:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3301      	adds	r3, #1
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	021b      	lsls	r3, r3, #8
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	3302      	adds	r3, #2
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3303      	adds	r3, #3
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	4413      	add	r3, r2
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3304      	adds	r3, #4
 80035e2:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d90a      	bls.n	8003604 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f011 f857 	bl	80146ac <realloc>
 80035fe:	4602      	mov	r2, r0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800360a:	2300      	movs	r3, #0
 800360c:	613b      	str	r3, [r7, #16]
 800360e:	e035      	b.n	800367c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	440a      	add	r2, r1
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	4313      	orrs	r3, r2
 8003620:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	6839      	ldr	r1, [r7, #0]
 800362a:	440b      	add	r3, r1
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	4313      	orrs	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	3302      	adds	r3, #2
 800363a:	6839      	ldr	r1, [r7, #0]
 800363c:	440b      	add	r3, r1
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	041b      	lsls	r3, r3, #16
 8003642:	4313      	orrs	r3, r2
 8003644:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	3303      	adds	r3, #3
 800364c:	6839      	ldr	r1, [r7, #0]
 800364e:	440b      	add	r3, r1
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	061b      	lsls	r3, r3, #24
 8003654:	4313      	orrs	r3, r2
 8003656:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3304      	adds	r3, #4
 8003662:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	3228      	adds	r2, #40	; 0x28
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	3301      	adds	r3, #1
 800367a:	613b      	str	r3, [r7, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d3c4      	bcc.n	8003610 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 8003686:	697b      	ldr	r3, [r7, #20]
    }
 8003688:	4618      	mov	r0, r3
 800368a:	3718      	adds	r7, #24
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	08017048 	.word	0x08017048

080036ac <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	08017064 	.word	0x08017064

080036c8 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
      data(0)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fe fbee 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 80036d8:	4a05      	ldr	r2, [pc, #20]	; (80036f0 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	605a      	str	r2, [r3, #4]
    {
    }
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	080172f4 	.word	0x080172f4

080036f4 <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4413      	add	r3, r2
 8003710:	b2ca      	uxtb	r2, r1
 8003712:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	0a19      	lsrs	r1, r3, #8
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3301      	adds	r3, #1
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	4413      	add	r3, r2
 8003720:	b2ca      	uxtb	r2, r1
 8003722:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	0c19      	lsrs	r1, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3302      	adds	r3, #2
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	4413      	add	r3, r2
 8003730:	b2ca      	uxtb	r2, r1
 8003732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	0e19      	lsrs	r1, r3, #24
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3303      	adds	r3, #3
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	4413      	add	r3, r2
 8003740:	b2ca      	uxtb	r2, r1
 8003742:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3304      	adds	r3, #4
 8003748:	60fb      	str	r3, [r7, #12]
      return offset;
 800374a:	68fb      	ldr	r3, [r7, #12]
    }
 800374c:	4618      	mov	r0, r3
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	6839      	ldr	r1, [r7, #0]
 8003770:	440a      	add	r2, r1
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003778:	68ba      	ldr	r2, [r7, #8]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3301      	adds	r3, #1
 800377e:	6839      	ldr	r1, [r7, #0]
 8003780:	440b      	add	r3, r1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	4313      	orrs	r3, r2
 8003788:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800378a:	68ba      	ldr	r2, [r7, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3302      	adds	r3, #2
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	440b      	add	r3, r1
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	4313      	orrs	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	3303      	adds	r3, #3
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	440b      	add	r3, r1
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	061b      	lsls	r3, r3, #24
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3304      	adds	r3, #4
 80037b8:	60fb      	str	r3, [r7, #12]
     return offset;
 80037ba:	68fb      	ldr	r3, [r7, #12]
    }
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80037d2:	4618      	mov	r0, r3
 80037d4:	370c      	adds	r7, #12
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	08017088 	.word	0x08017088

080037e4 <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	0801709c 	.word	0x0801709c

08003800 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
      data(0)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe fb52 	bl	8001eb4 <_ZN3ros3MsgC1Ev>
 8003810:	4a05      	ldr	r2, [pc, #20]	; (8003828 <_ZN8std_msgs4BoolC1Ev+0x28>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	711a      	strb	r2, [r3, #4]
    {
    }
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4618      	mov	r0, r3
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	080172dc 	.word	0x080172dc

0800382c <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	683a      	ldr	r2, [r7, #0]
 8003844:	4413      	add	r3, r2
 8003846:	7a3a      	ldrb	r2, [r7, #8]
 8003848:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3301      	adds	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
      return offset;
 8003850:	68fb      	ldr	r3, [r7, #12]
    }
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800385e:	b480      	push	{r7}
 8003860:	b085      	sub	sp, #20
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
 8003866:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003870:	7a3a      	ldrb	r2, [r7, #8]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6839      	ldr	r1, [r7, #0]
 8003876:	440b      	add	r3, r1
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	b2db      	uxtb	r3, r3
 800387e:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003880:	7a3a      	ldrb	r2, [r7, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	3301      	adds	r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
     return offset;
 800388c:	68fb      	ldr	r3, [r7, #12]
    }
 800388e:	4618      	mov	r0, r3
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
	...

0800389c <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	080170c0 	.word	0x080170c0

080038b8 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	4b03      	ldr	r3, [pc, #12]	; (80038d0 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	080170d0 	.word	0x080170d0

080038d4 <_ZL8DWT_Initv>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80038d8:	4b08      	ldr	r3, [pc, #32]	; (80038fc <_ZL8DWT_Initv+0x28>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a07      	ldr	r2, [pc, #28]	; (80038fc <_ZL8DWT_Initv+0x28>)
 80038de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038e2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <_ZL8DWT_Initv+0x2c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a05      	ldr	r2, [pc, #20]	; (8003900 <_ZL8DWT_Initv+0x2c>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	e000edf0 	.word	0xe000edf0
 8003900:	e0001000 	.word	0xe0001000

08003904 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	0801736c 	.word	0x0801736c

08003924 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff ffe8 	bl	8003904 <_ZN3ros15NodeHandleBase_C1Ev>
 8003934:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev+0x134>)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	3304      	adds	r3, #4
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff f9f0 	bl	8002d24 <_ZN13STM32HardwareC1Ev>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800396a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f011 fd17 	bl	80153a4 <memset>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800397c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003984:	2100      	movs	r1, #0
 8003986:	4618      	mov	r0, r3
 8003988:	f011 fd0c 	bl	80153a4 <memset>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003992:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003996:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800399a:	2100      	movs	r1, #0
 800399c:	4618      	mov	r0, r3
 800399e:	f011 fd01 	bl	80153a4 <memset>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039a8:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80039ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f011 fcf6 	bl	80153a4 <memset>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039be:	461a      	mov	r2, r3
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039cc:	461a      	mov	r2, r3
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039da:	461a      	mov	r2, r3
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039e8:	461a      	mov	r2, r3
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80039f6:	461a      	mov	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a10:	461a      	mov	r2, r3
 8003a12:	2300      	movs	r3, #0
 8003a14:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	f242 736c 	movw	r3, #10092	; 0x276c
 8003a46:	4413      	add	r3, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fda7 	bl	800259c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	080172c8 	.word	0x080172c8

08003a5c <_Z13read_ble_dataPh>:
//uint8_t publish_frequency = 20;
//uint8_t pid_frequency = 10;


//read esc data from ble
HAL_StatusTypeDef read_ble_data(uint8_t* data){
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003a64:	4bac      	ldr	r3, [pc, #688]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	73fb      	strb	r3, [r7, #15]
 8003a6a:	e01e      	b.n	8003aaa <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2bfe      	cmp	r3, #254	; 0xfe
 8003a76:	d115      	bne.n	8003aa4 <_Z13read_ble_dataPh+0x48>
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	425a      	negs	r2, r3
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	f002 021f 	and.w	r2, r2, #31
 8003a86:	bf58      	it	pl
 8003a88:	4253      	negpl	r3, r2
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d106      	bne.n	8003aa4 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	4b9e      	ldr	r3, [pc, #632]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003aa0:	701a      	strb	r2, [r3, #0]
			break;
 8003aa2:	e009      	b.n	8003ab8 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	73fb      	strb	r3, [r7, #15]
 8003aaa:	4b9b      	ldr	r3, [pc, #620]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	f103 021f 	add.w	r2, r3, #31
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	dad9      	bge.n	8003a6c <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003ab8:	4b97      	ldr	r3, [pc, #604]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	3302      	adds	r3, #2
 8003abe:	425a      	negs	r2, r3
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	f002 021f 	and.w	r2, r2, #31
 8003ac8:	bf58      	it	pl
 8003aca:	4253      	negpl	r3, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <_Z13read_ble_dataPh+0x80>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e116      	b.n	8003d0a <_Z13read_ble_dataPh+0x2ae>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003adc:	4b8e      	ldr	r3, [pc, #568]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3303      	adds	r3, #3
 8003ae2:	425a      	negs	r2, r3
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	f002 021f 	and.w	r2, r2, #31
 8003aec:	bf58      	it	pl
 8003aee:	4253      	negpl	r3, r2
 8003af0:	461a      	mov	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d001      	beq.n	8003b00 <_Z13read_ble_dataPh+0xa4>
 8003afc:	2301      	movs	r3, #1
 8003afe:	e104      	b.n	8003d0a <_Z13read_ble_dataPh+0x2ae>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003b00:	4b85      	ldr	r3, [pc, #532]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	3304      	adds	r3, #4
 8003b06:	425a      	negs	r2, r3
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	f002 021f 	and.w	r2, r2, #31
 8003b10:	bf58      	it	pl
 8003b12:	4253      	negpl	r3, r2
 8003b14:	461a      	mov	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b30      	cmp	r3, #48	; 0x30
 8003b1e:	d001      	beq.n	8003b24 <_Z13read_ble_dataPh+0xc8>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0f2      	b.n	8003d0a <_Z13read_ble_dataPh+0x2ae>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003b24:	4b7c      	ldr	r3, [pc, #496]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	3305      	adds	r3, #5
 8003b2a:	425a      	negs	r2, r3
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	f002 021f 	and.w	r2, r2, #31
 8003b34:	bf58      	it	pl
 8003b36:	4253      	negpl	r3, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	2b5c      	cmp	r3, #92	; 0x5c
 8003b42:	d001      	beq.n	8003b48 <_Z13read_ble_dataPh+0xec>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e0e0      	b.n	8003d0a <_Z13read_ble_dataPh+0x2ae>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 8003b48:	4b73      	ldr	r3, [pc, #460]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	3306      	adds	r3, #6
 8003b4e:	425a      	negs	r2, r3
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	f002 021f 	and.w	r2, r2, #31
 8003b58:	bf58      	it	pl
 8003b5a:	4253      	negpl	r3, r2
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b17      	cmp	r3, #23
 8003b66:	d001      	beq.n	8003b6c <_Z13read_ble_dataPh+0x110>
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e0ce      	b.n	8003d0a <_Z13read_ble_dataPh+0x2ae>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 8003b6c:	4b6a      	ldr	r3, [pc, #424]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	3307      	adds	r3, #7
 8003b72:	425a      	negs	r2, r3
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	f002 021f 	and.w	r2, r2, #31
 8003b7c:	bf58      	it	pl
 8003b7e:	4253      	negpl	r3, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b06      	cmp	r3, #6
 8003b8a:	d001      	beq.n	8003b90 <_Z13read_ble_dataPh+0x134>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0bc      	b.n	8003d0a <_Z13read_ble_dataPh+0x2ae>

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003b90:	4b61      	ldr	r3, [pc, #388]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	3309      	adds	r3, #9
 8003b96:	425a      	negs	r2, r3
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	f002 021f 	and.w	r2, r2, #31
 8003ba0:	bf58      	it	pl
 8003ba2:	4253      	negpl	r3, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b21a      	sxth	r2, r3
 8003bae:	4b5b      	ldr	r3, [pc, #364]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003bb0:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003bb2:	4b59      	ldr	r3, [pc, #356]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	330b      	adds	r3, #11
 8003bb8:	425a      	negs	r2, r3
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	f002 021f 	and.w	r2, r2, #31
 8003bc2:	bf58      	it	pl
 8003bc4:	4253      	negpl	r3, r2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d008      	beq.n	8003be4 <_Z13read_ble_dataPh+0x188>
 8003bd2:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	425b      	negs	r3, r3
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003be2:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003be4:	4b4c      	ldr	r3, [pc, #304]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	330e      	adds	r3, #14
 8003bea:	425a      	negs	r2, r3
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	f002 021f 	and.w	r2, r2, #31
 8003bf4:	bf58      	it	pl
 8003bf6:	4253      	negpl	r3, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	021b      	lsls	r3, r3, #8
 8003c02:	4619      	mov	r1, r3
 8003c04:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	330d      	adds	r3, #13
 8003c0a:	425a      	negs	r2, r3
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	f002 021f 	and.w	r2, r2, #31
 8003c14:	bf58      	it	pl
 8003c16:	4253      	negpl	r3, r2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	ea41 0203 	orr.w	r2, r1, r3
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003c30:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 8003c32:	4b39      	ldr	r3, [pc, #228]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	330f      	adds	r3, #15
 8003c38:	425a      	negs	r2, r3
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	f002 021f 	and.w	r2, r2, #31
 8003c42:	bf58      	it	pl
 8003c44:	4253      	negpl	r3, r2
 8003c46:	461a      	mov	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	ee07 3a90 	vmov	s15, r3
 8003c52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c56:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c5e:	4b2f      	ldr	r3, [pc, #188]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003c60:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	3310      	adds	r3, #16
 8003c6a:	425a      	negs	r2, r3
 8003c6c:	f003 031f 	and.w	r3, r3, #31
 8003c70:	f002 021f 	and.w	r2, r2, #31
 8003c74:	bf58      	it	pl
 8003c76:	4253      	negpl	r3, r2
 8003c78:	461a      	mov	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	021b      	lsls	r3, r3, #8
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	4619      	mov	r1, r3
 8003c88:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	3311      	adds	r3, #17
 8003c8e:	425a      	negs	r2, r3
 8003c90:	f003 031f 	and.w	r3, r3, #31
 8003c94:	f002 021f 	and.w	r2, r2, #31
 8003c98:	bf58      	it	pl
 8003c9a:	4253      	negpl	r3, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	430b      	orrs	r3, r1
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003cae:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003cb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003cb6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003cba:	4b18      	ldr	r3, [pc, #96]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003cbc:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	3312      	adds	r3, #18
 8003cc6:	425a      	negs	r2, r3
 8003cc8:	f003 031f 	and.w	r3, r3, #31
 8003ccc:	f002 021f 	and.w	r2, r2, #31
 8003cd0:	bf58      	it	pl
 8003cd2:	4253      	negpl	r3, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	4b0d      	ldr	r3, [pc, #52]	; (8003d18 <_Z13read_ble_dataPh+0x2bc>)
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	3313      	adds	r3, #19
 8003ce8:	4259      	negs	r1, r3
 8003cea:	f003 031f 	and.w	r3, r3, #31
 8003cee:	f001 011f 	and.w	r1, r1, #31
 8003cf2:	bf58      	it	pl
 8003cf4:	424b      	negpl	r3, r1
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	440b      	add	r3, r1
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	4313      	orrs	r3, r2
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <_Z13read_ble_dataPh+0x2c0>)
 8003d06:	821a      	strh	r2, [r3, #16]

	return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	240044e0 	.word	0x240044e0
 8003d1c:	240042fc 	.word	0x240042fc

08003d20 <_Z15read_speed_dataPh>:

//read speed data from f103
//the first data are "acsr", then the fifth is the integer part of speed1, and the sixth is the decimal part of speed1..
HAL_StatusTypeDef read_speed_data(uint8_t* data){
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003d28:	2300      	movs	r3, #0
 8003d2a:	73fb      	strb	r3, [r7, #15]
 8003d2c:	e01d      	b.n	8003d6a <_Z15read_speed_dataPh+0x4a>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	4413      	add	r3, r2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b41      	cmp	r3, #65	; 0x41
 8003d38:	d114      	bne.n	8003d64 <_Z15read_speed_dataPh+0x44>
 8003d3a:	7bfb      	ldrb	r3, [r7, #15]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b43      	cmp	r3, #67	; 0x43
 8003d46:	d10d      	bne.n	8003d64 <_Z15read_speed_dataPh+0x44>
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b53      	cmp	r3, #83	; 0x53
 8003d54:	d106      	bne.n	8003d64 <_Z15read_speed_dataPh+0x44>
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3303      	adds	r3, #3
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b52      	cmp	r3, #82	; 0x52
 8003d62:	d006      	beq.n	8003d72 <_Z15read_speed_dataPh+0x52>
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003d64:	7bfb      	ldrb	r3, [r7, #15]
 8003d66:	3301      	adds	r3, #1
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	2b1f      	cmp	r3, #31
 8003d6e:	d9de      	bls.n	8003d2e <_Z15read_speed_dataPh+0xe>
 8003d70:	e000      	b.n	8003d74 <_Z15read_speed_dataPh+0x54>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003d72:	bf00      	nop
	}
	if(i==2*SPEED_PIN_COUNT)return HAL_ERROR;
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d101      	bne.n	8003d7e <_Z15read_speed_dataPh+0x5e>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e048      	b.n	8003e10 <_Z15read_speed_dataPh+0xf0>

	for(int j=0;j<SPEED_PIN_COUNT;++j){
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	e041      	b.n	8003e08 <_Z15read_speed_dataPh+0xe8>
		speed[j] = data[(2*j+i+4)%(2*SPEED_PIN_COUNT+4)]+data[(2*j+1+i+4)%(2*SPEED_PIN_COUNT+4)]/100.0;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	005a      	lsls	r2, r3, #1
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	1d1a      	adds	r2, r3, #4
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <_Z15read_speed_dataPh+0x108>)
 8003d90:	fb83 1302 	smull	r1, r3, r3, r2
 8003d94:	10d9      	asrs	r1, r3, #3
 8003d96:	17d3      	asrs	r3, r2, #31
 8003d98:	1ac9      	subs	r1, r1, r3
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	1ad1      	subs	r1, r2, r3
 8003da4:	460a      	mov	r2, r1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	ee07 3a90 	vmov	s15, r3
 8003db0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	1d1a      	adds	r2, r3, #4
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <_Z15read_speed_dataPh+0x108>)
 8003dc2:	fb83 1302 	smull	r1, r3, r3, r2
 8003dc6:	10d9      	asrs	r1, r3, #3
 8003dc8:	17d3      	asrs	r3, r2, #31
 8003dca:	1ac9      	subs	r1, r1, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	440b      	add	r3, r1
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	1ad1      	subs	r1, r2, r3
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	ee07 3a90 	vmov	s15, r3
 8003de2:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003de6:	ed9f 4b0e 	vldr	d4, [pc, #56]	; 8003e20 <_Z15read_speed_dataPh+0x100>
 8003dea:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003dee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003df2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003df6:	4a0d      	ldr	r2, [pc, #52]	; (8003e2c <_Z15read_speed_dataPh+0x10c>)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	edc3 7a00 	vstr	s15, [r3]
	for(int j=0;j<SPEED_PIN_COUNT;++j){
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	ddba      	ble.n	8003d84 <_Z15read_speed_dataPh+0x64>
	}
	return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w
 8003e20:	00000000 	.word	0x00000000
 8003e24:	40590000 	.word	0x40590000
 8003e28:	38e38e39 	.word	0x38e38e39
 8003e2c:	24004354 	.word	0x24004354

08003e30 <HAL_UART_TxCpltCallback>:

//ros structure required
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a07      	ldr	r2, [pc, #28]	; (8003e58 <HAL_UART_TxCpltCallback+0x28>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d106      	bne.n	8003e4e <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003e40:	4806      	ldr	r0, [pc, #24]	; (8003e5c <HAL_UART_TxCpltCallback+0x2c>)
 8003e42:	f001 f87a 	bl	8004f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003e46:	4603      	mov	r3, r0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fe ffd1 	bl	8002df0 <_ZN13STM32Hardware5flushEv>
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	24001438 	.word	0x24001438
 8003e5c:	24001b24 	.word	0x24001b24

08003e60 <HAL_UART_RxCpltCallback>:

//uart data receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart4.Instance){
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b34      	ldr	r3, [pc, #208]	; (8003f40 <HAL_UART_RxCpltCallback+0xe0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d107      	bne.n	8003e84 <HAL_UART_RxCpltCallback+0x24>
		nh.getHardware()->reset_rbuf();
 8003e74:	4833      	ldr	r0, [pc, #204]	; (8003f44 <HAL_UART_RxCpltCallback+0xe4>)
 8003e76:	f001 f860 	bl	8004f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe ff78 	bl	8002d72 <_ZN13STM32Hardware10reset_rbufEv>

			jy901_data_length = i;
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
		}
	}
}
 8003e82:	e059      	b.n	8003f38 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_esc.Instance){
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b2f      	ldr	r3, [pc, #188]	; (8003f48 <HAL_UART_RxCpltCallback+0xe8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d103      	bne.n	8003e98 <HAL_UART_RxCpltCallback+0x38>
		read_ble_data(esc_receive);
 8003e90:	482e      	ldr	r0, [pc, #184]	; (8003f4c <HAL_UART_RxCpltCallback+0xec>)
 8003e92:	f7ff fde3 	bl	8003a5c <_Z13read_ble_dataPh>
}
 8003e96:	e04f      	b.n	8003f38 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_f103.Instance){
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <HAL_UART_RxCpltCallback+0xf0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d103      	bne.n	8003eac <HAL_UART_RxCpltCallback+0x4c>
		read_speed_data(speed_receive);
 8003ea4:	482b      	ldr	r0, [pc, #172]	; (8003f54 <HAL_UART_RxCpltCallback+0xf4>)
 8003ea6:	f7ff ff3b 	bl	8003d20 <_Z15read_speed_dataPh>
}
 8003eaa:	e045      	b.n	8003f38 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_imu.Instance){
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4b29      	ldr	r3, [pc, #164]	; (8003f58 <HAL_UART_RxCpltCallback+0xf8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d13f      	bne.n	8003f38 <HAL_UART_RxCpltCallback+0xd8>
		if(jy901_data[0]==0x55 && jy901_data_length==11){
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_UART_RxCpltCallback+0xfc>)
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b55      	cmp	r3, #85	; 0x55
 8003ebe:	d110      	bne.n	8003ee2 <HAL_UART_RxCpltCallback+0x82>
 8003ec0:	4b27      	ldr	r3, [pc, #156]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b0b      	cmp	r3, #11
 8003ec6:	d10c      	bne.n	8003ee2 <HAL_UART_RxCpltCallback+0x82>
			jy901.parseData(jy901_data);
 8003ec8:	4924      	ldr	r1, [pc, #144]	; (8003f5c <HAL_UART_RxCpltCallback+0xfc>)
 8003eca:	4826      	ldr	r0, [pc, #152]	; (8003f64 <HAL_UART_RxCpltCallback+0x104>)
 8003ecc:	f7fc fc08 	bl	80006e0 <_ZN6CJY9019parseDataEPh>
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8003ed0:	4b23      	ldr	r3, [pc, #140]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4920      	ldr	r1, [pc, #128]	; (8003f5c <HAL_UART_RxCpltCallback+0xfc>)
 8003eda:	481f      	ldr	r0, [pc, #124]	; (8003f58 <HAL_UART_RxCpltCallback+0xf8>)
 8003edc:	f00e fb88 	bl	80125f0 <HAL_UART_Receive_DMA>
}
 8003ee0:	e02a      	b.n	8003f38 <HAL_UART_RxCpltCallback+0xd8>
		}else if(jy901_data_length!=11){
 8003ee2:	4b1f      	ldr	r3, [pc, #124]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b0b      	cmp	r3, #11
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_RxCpltCallback+0xa2>
			jy901_data_length = 11;
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003eec:	220b      	movs	r2, #11
 8003eee:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8003ef0:	4b1b      	ldr	r3, [pc, #108]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	4918      	ldr	r1, [pc, #96]	; (8003f5c <HAL_UART_RxCpltCallback+0xfc>)
 8003efa:	4817      	ldr	r0, [pc, #92]	; (8003f58 <HAL_UART_RxCpltCallback+0xf8>)
 8003efc:	f00e fb78 	bl	80125f0 <HAL_UART_Receive_DMA>
}
 8003f00:	e01a      	b.n	8003f38 <HAL_UART_RxCpltCallback+0xd8>
			uint8_t i = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	73fb      	strb	r3, [r7, #15]
			for(;i<11;++i){
 8003f06:	e007      	b.n	8003f18 <HAL_UART_RxCpltCallback+0xb8>
				if(jy901_data[i]==0x55)break;
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	4a14      	ldr	r2, [pc, #80]	; (8003f5c <HAL_UART_RxCpltCallback+0xfc>)
 8003f0c:	5cd3      	ldrb	r3, [r2, r3]
 8003f0e:	2b55      	cmp	r3, #85	; 0x55
 8003f10:	d006      	beq.n	8003f20 <HAL_UART_RxCpltCallback+0xc0>
			for(;i<11;++i){
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
 8003f14:	3301      	adds	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b0a      	cmp	r3, #10
 8003f1c:	d9f4      	bls.n	8003f08 <HAL_UART_RxCpltCallback+0xa8>
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_RxCpltCallback+0xc2>
				if(jy901_data[i]==0x55)break;
 8003f20:	bf00      	nop
			jy901_data_length = i;
 8003f22:	4a0f      	ldr	r2, [pc, #60]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003f24:	7bfb      	ldrb	r3, [r7, #15]
 8003f26:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <HAL_UART_RxCpltCallback+0x100>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_UART_RxCpltCallback+0xfc>)
 8003f32:	4809      	ldr	r0, [pc, #36]	; (8003f58 <HAL_UART_RxCpltCallback+0xf8>)
 8003f34:	f00e fb5c 	bl	80125f0 <HAL_UART_Receive_DMA>
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	24001438 	.word	0x24001438
 8003f44:	24001b24 	.word	0x24001b24
 8003f48:	240013a4 	.word	0x240013a4
 8003f4c:	24004310 	.word	0x24004310
 8003f50:	240014cc 	.word	0x240014cc
 8003f54:	24004330 	.word	0x24004330
 8003f58:	240015f4 	.word	0x240015f4
 8003f5c:	24004450 	.word	0x24004450
 8003f60:	24000000 	.word	0x24000000
 8003f64:	2400445c 	.word	0x2400445c

08003f68 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003f68:	b5b0      	push	{r4, r5, r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a68      	ldr	r2, [pc, #416]	; (800411c <HAL_UARTEx_RxEventCallback+0x1b4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	f040 80c9 	bne.w	8004112 <HAL_UARTEx_RxEventCallback+0x1aa>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 8003f80:	4b67      	ldr	r3, [pc, #412]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b78      	cmp	r3, #120	; 0x78
 8003f86:	d116      	bne.n	8003fb6 <HAL_UARTEx_RxEventCallback+0x4e>
 8003f88:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003f8a:	785b      	ldrb	r3, [r3, #1]
 8003f8c:	2b69      	cmp	r3, #105	; 0x69
 8003f8e:	d112      	bne.n	8003fb6 <HAL_UARTEx_RxEventCallback+0x4e>
 8003f90:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003f92:	789b      	ldrb	r3, [r3, #2]
 8003f94:	2b6c      	cmp	r3, #108	; 0x6c
 8003f96:	d10e      	bne.n	8003fb6 <HAL_UARTEx_RxEventCallback+0x4e>
 8003f98:	4b61      	ldr	r3, [pc, #388]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003f9a:	78db      	ldrb	r3, [r3, #3]
 8003f9c:	2b69      	cmp	r3, #105	; 0x69
 8003f9e:	d10a      	bne.n	8003fb6 <HAL_UARTEx_RxEventCallback+0x4e>
 8003fa0:	4b5f      	ldr	r3, [pc, #380]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fa2:	791b      	ldrb	r3, [r3, #4]
 8003fa4:	2b6e      	cmp	r3, #110	; 0x6e
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 8003fa8:	230a      	movs	r3, #10
 8003faa:	223c      	movs	r2, #60	; 0x3c
 8003fac:	495d      	ldr	r1, [pc, #372]	; (8004124 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fae:	485e      	ldr	r0, [pc, #376]	; (8004128 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8003fb0:	f00e fa10 	bl	80123d4 <HAL_UART_Transmit>
 8003fb4:	e047      	b.n	8004046 <HAL_UARTEx_RxEventCallback+0xde>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 8003fb6:	4b5a      	ldr	r3, [pc, #360]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b61      	cmp	r3, #97	; 0x61
 8003fbc:	d140      	bne.n	8004040 <HAL_UARTEx_RxEventCallback+0xd8>
 8003fbe:	4b58      	ldr	r3, [pc, #352]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fc0:	785b      	ldrb	r3, [r3, #1]
 8003fc2:	2b63      	cmp	r3, #99	; 0x63
 8003fc4:	d13c      	bne.n	8004040 <HAL_UARTEx_RxEventCallback+0xd8>
 8003fc6:	4b56      	ldr	r3, [pc, #344]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fc8:	789b      	ldrb	r3, [r3, #2]
 8003fca:	2b73      	cmp	r3, #115	; 0x73
 8003fcc:	d138      	bne.n	8004040 <HAL_UARTEx_RxEventCallback+0xd8>
 8003fce:	4b54      	ldr	r3, [pc, #336]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fd0:	78db      	ldrb	r3, [r3, #3]
 8003fd2:	2b72      	cmp	r3, #114	; 0x72
 8003fd4:	d134      	bne.n	8004040 <HAL_UARTEx_RxEventCallback+0xd8>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 8003fd6:	2338      	movs	r3, #56	; 0x38
 8003fd8:	60fb      	str	r3, [r7, #12]
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 8003fda:	4a51      	ldr	r2, [pc, #324]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b62      	cmp	r3, #98	; 0x62
 8003fe4:	d111      	bne.n	800400a <HAL_UARTEx_RxEventCallback+0xa2>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	4a4d      	ldr	r2, [pc, #308]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
 8003fee:	2b34      	cmp	r3, #52	; 0x34
 8003ff0:	d10b      	bne.n	800400a <HAL_UARTEx_RxEventCallback+0xa2>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003ff8:	5cd3      	ldrb	r3, [r2, r3]
 8003ffa:	2b30      	cmp	r3, #48	; 0x30
 8003ffc:	d105      	bne.n	800400a <HAL_UARTEx_RxEventCallback+0xa2>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3303      	adds	r3, #3
 8004002:	4a47      	ldr	r2, [pc, #284]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004004:	5cd3      	ldrb	r3, [r2, r3]
 8004006:	2b31      	cmp	r3, #49	; 0x31
 8004008:	d003      	beq.n	8004012 <HAL_UARTEx_RxEventCallback+0xaa>
				printf("Receive Wrong Data\n");
 800400a:	4848      	ldr	r0, [pc, #288]	; (800412c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800400c:	f011 f8ea 	bl	80151e4 <puts>
				printf("Write the Configuration Complete!\n");
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));

			}

		}else{
 8004010:	e019      	b.n	8004046 <HAL_UARTEx_RxEventCallback+0xde>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 8004012:	4a44      	ldr	r2, [pc, #272]	; (8004124 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8004014:	4b42      	ldr	r3, [pc, #264]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004016:	4614      	mov	r4, r2
 8004018:	461d      	mov	r5, r3
 800401a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800401c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800401e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004022:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004026:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800402a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				printf("Write the Configuration Complete!\n");
 800402e:	4840      	ldr	r0, [pc, #256]	; (8004130 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8004030:	f011 f8d8 	bl	80151e4 <puts>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 8004034:	223c      	movs	r2, #60	; 0x3c
 8004036:	2100      	movs	r1, #0
 8004038:	483a      	ldr	r0, [pc, #232]	; (8004124 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800403a:	f7fc ff2f 	bl	8000e9c <QSPI_W25Q64JV_Write>
		}else{
 800403e:	e002      	b.n	8004046 <HAL_UARTEx_RxEventCallback+0xde>
			printf("Receive Wrong Data\n");
 8004040:	483a      	ldr	r0, [pc, #232]	; (800412c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8004042:	f011 f8cf 	bl	80151e4 <puts>
			//HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8004046:	2264      	movs	r2, #100	; 0x64
 8004048:	4935      	ldr	r1, [pc, #212]	; (8004120 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800404a:	4837      	ldr	r0, [pc, #220]	; (8004128 <HAL_UARTEx_RxEventCallback+0x1c0>)
 800404c:	f010 f9b4 	bl	80143b8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a38      	ldr	r2, [pc, #224]	; (8004138 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d04a      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a37      	ldr	r2, [pc, #220]	; (800413c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d045      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 8004064:	4b33      	ldr	r3, [pc, #204]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a35      	ldr	r2, [pc, #212]	; (8004140 <HAL_UARTEx_RxEventCallback+0x1d8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d040      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 800406e:	4b31      	ldr	r3, [pc, #196]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a34      	ldr	r2, [pc, #208]	; (8004144 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d03b      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 8004078:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a32      	ldr	r2, [pc, #200]	; (8004148 <HAL_UARTEx_RxEventCallback+0x1e0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d036      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 8004082:	4b2c      	ldr	r3, [pc, #176]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_UARTEx_RxEventCallback+0x1e4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d031      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 800408c:	4b29      	ldr	r3, [pc, #164]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2f      	ldr	r2, [pc, #188]	; (8004150 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d02c      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 8004096:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2e      	ldr	r2, [pc, #184]	; (8004154 <HAL_UARTEx_RxEventCallback+0x1ec>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d027      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040a0:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2c      	ldr	r2, [pc, #176]	; (8004158 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d022      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040aa:	4b22      	ldr	r3, [pc, #136]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a2b      	ldr	r2, [pc, #172]	; (800415c <HAL_UARTEx_RxEventCallback+0x1f4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d01d      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040b4:	4b1f      	ldr	r3, [pc, #124]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a29      	ldr	r2, [pc, #164]	; (8004160 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d018      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a28      	ldr	r2, [pc, #160]	; (8004164 <HAL_UARTEx_RxEventCallback+0x1fc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d013      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a26      	ldr	r2, [pc, #152]	; (8004168 <HAL_UARTEx_RxEventCallback+0x200>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00e      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a25      	ldr	r2, [pc, #148]	; (800416c <HAL_UARTEx_RxEventCallback+0x204>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d009      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040dc:	4b15      	ldr	r3, [pc, #84]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a23      	ldr	r2, [pc, #140]	; (8004170 <HAL_UARTEx_RxEventCallback+0x208>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d004      	beq.n	80040f0 <HAL_UARTEx_RxEventCallback+0x188>
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a22      	ldr	r2, [pc, #136]	; (8004174 <HAL_UARTEx_RxEventCallback+0x20c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d108      	bne.n	8004102 <HAL_UARTEx_RxEventCallback+0x19a>
 80040f0:	4b10      	ldr	r3, [pc, #64]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0208 	bic.w	r2, r2, #8
 80040fe:	601a      	str	r2, [r3, #0]
	}
}
 8004100:	e007      	b.n	8004112 <HAL_UARTEx_RxEventCallback+0x1aa>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f022 0204 	bic.w	r2, r2, #4
 8004110:	601a      	str	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bdb0      	pop	{r4, r5, r7, pc}
 800411a:	bf00      	nop
 800411c:	40007800 	.word	0x40007800
 8004120:	240043bc 	.word	0x240043bc
 8004124:	24000004 	.word	0x24000004
 8004128:	24001560 	.word	0x24001560
 800412c:	080170f4 	.word	0x080170f4
 8004130:	08017108 	.word	0x08017108
 8004134:	24001868 	.word	0x24001868
 8004138:	40020010 	.word	0x40020010
 800413c:	40020028 	.word	0x40020028
 8004140:	40020040 	.word	0x40020040
 8004144:	40020058 	.word	0x40020058
 8004148:	40020070 	.word	0x40020070
 800414c:	40020088 	.word	0x40020088
 8004150:	400200a0 	.word	0x400200a0
 8004154:	400200b8 	.word	0x400200b8
 8004158:	40020410 	.word	0x40020410
 800415c:	40020428 	.word	0x40020428
 8004160:	40020440 	.word	0x40020440
 8004164:	40020458 	.word	0x40020458
 8004168:	40020470 	.word	0x40020470
 800416c:	40020488 	.word	0x40020488
 8004170:	400204a0 	.word	0x400204a0
 8004174:	400204b8 	.word	0x400204b8

08004178 <HAL_UART_ErrorCallback>:


void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==huart_esc.Instance) {
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b48      	ldr	r3, [pc, #288]	; (80042a8 <HAL_UART_ErrorCallback+0x130>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d105      	bne.n	8004198 <HAL_UART_ErrorCallback+0x20>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 800418c:	2220      	movs	r2, #32
 800418e:	4947      	ldr	r1, [pc, #284]	; (80042ac <HAL_UART_ErrorCallback+0x134>)
 8004190:	4845      	ldr	r0, [pc, #276]	; (80042a8 <HAL_UART_ErrorCallback+0x130>)
 8004192:	f00e fa2d 	bl	80125f0 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
	}else if(UartHandle->Instance==UART7){
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
	}
}
 8004196:	e082      	b.n	800429e <HAL_UART_ErrorCallback+0x126>
    }else if(UartHandle->Instance==huart_f103.Instance) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4b44      	ldr	r3, [pc, #272]	; (80042b0 <HAL_UART_ErrorCallback+0x138>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d105      	bne.n	80041b0 <HAL_UART_ErrorCallback+0x38>
    	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+1);
 80041a4:	2221      	movs	r2, #33	; 0x21
 80041a6:	4943      	ldr	r1, [pc, #268]	; (80042b4 <HAL_UART_ErrorCallback+0x13c>)
 80041a8:	4841      	ldr	r0, [pc, #260]	; (80042b0 <HAL_UART_ErrorCallback+0x138>)
 80041aa:	f00e fa21 	bl	80125f0 <HAL_UART_Receive_DMA>
}
 80041ae:	e076      	b.n	800429e <HAL_UART_ErrorCallback+0x126>
    else if(UartHandle->Instance==huart_imu.Instance) {
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b40      	ldr	r3, [pc, #256]	; (80042b8 <HAL_UART_ErrorCallback+0x140>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d105      	bne.n	80041c8 <HAL_UART_ErrorCallback+0x50>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
 80041bc:	220b      	movs	r2, #11
 80041be:	493f      	ldr	r1, [pc, #252]	; (80042bc <HAL_UART_ErrorCallback+0x144>)
 80041c0:	483d      	ldr	r0, [pc, #244]	; (80042b8 <HAL_UART_ErrorCallback+0x140>)
 80041c2:	f00e fa15 	bl	80125f0 <HAL_UART_Receive_DMA>
}
 80041c6:	e06a      	b.n	800429e <HAL_UART_ErrorCallback+0x126>
	}else if(UartHandle->Instance==UART7){
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a3c      	ldr	r2, [pc, #240]	; (80042c0 <HAL_UART_ErrorCallback+0x148>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d165      	bne.n	800429e <HAL_UART_ErrorCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 80041d2:	2264      	movs	r2, #100	; 0x64
 80041d4:	493b      	ldr	r1, [pc, #236]	; (80042c4 <HAL_UART_ErrorCallback+0x14c>)
 80041d6:	483c      	ldr	r0, [pc, #240]	; (80042c8 <HAL_UART_ErrorCallback+0x150>)
 80041d8:	f010 f8ee 	bl	80143b8 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a3b      	ldr	r2, [pc, #236]	; (80042d0 <HAL_UART_ErrorCallback+0x158>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04a      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 80041e6:	4b39      	ldr	r3, [pc, #228]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a3a      	ldr	r2, [pc, #232]	; (80042d4 <HAL_UART_ErrorCallback+0x15c>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d045      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a38      	ldr	r2, [pc, #224]	; (80042d8 <HAL_UART_ErrorCallback+0x160>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d040      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 80041fa:	4b34      	ldr	r3, [pc, #208]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a37      	ldr	r2, [pc, #220]	; (80042dc <HAL_UART_ErrorCallback+0x164>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d03b      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a35      	ldr	r2, [pc, #212]	; (80042e0 <HAL_UART_ErrorCallback+0x168>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d036      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 800420e:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a34      	ldr	r2, [pc, #208]	; (80042e4 <HAL_UART_ErrorCallback+0x16c>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d031      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004218:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a32      	ldr	r2, [pc, #200]	; (80042e8 <HAL_UART_ErrorCallback+0x170>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02c      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a31      	ldr	r2, [pc, #196]	; (80042ec <HAL_UART_ErrorCallback+0x174>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d027      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2f      	ldr	r2, [pc, #188]	; (80042f0 <HAL_UART_ErrorCallback+0x178>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004236:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a2e      	ldr	r2, [pc, #184]	; (80042f4 <HAL_UART_ErrorCallback+0x17c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01d      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004240:	4b22      	ldr	r3, [pc, #136]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <HAL_UART_ErrorCallback+0x180>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 800424a:	4b20      	ldr	r3, [pc, #128]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a2b      	ldr	r2, [pc, #172]	; (80042fc <HAL_UART_ErrorCallback+0x184>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a29      	ldr	r2, [pc, #164]	; (8004300 <HAL_UART_ErrorCallback+0x188>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 800425e:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a28      	ldr	r2, [pc, #160]	; (8004304 <HAL_UART_ErrorCallback+0x18c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a26      	ldr	r2, [pc, #152]	; (8004308 <HAL_UART_ErrorCallback+0x190>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_UART_ErrorCallback+0x104>
 8004272:	4b16      	ldr	r3, [pc, #88]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a25      	ldr	r2, [pc, #148]	; (800430c <HAL_UART_ErrorCallback+0x194>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <HAL_UART_ErrorCallback+0x116>
 800427c:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0208 	bic.w	r2, r2, #8
 800428a:	601a      	str	r2, [r3, #0]
}
 800428c:	e007      	b.n	800429e <HAL_UART_ErrorCallback+0x126>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_UART_ErrorCallback+0x154>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0204 	bic.w	r2, r2, #4
 800429c:	601a      	str	r2, [r3, #0]
}
 800429e:	bf00      	nop
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	240013a4 	.word	0x240013a4
 80042ac:	24004310 	.word	0x24004310
 80042b0:	240014cc 	.word	0x240014cc
 80042b4:	24004330 	.word	0x24004330
 80042b8:	240015f4 	.word	0x240015f4
 80042bc:	24004450 	.word	0x24004450
 80042c0:	40007800 	.word	0x40007800
 80042c4:	240043bc 	.word	0x240043bc
 80042c8:	24001560 	.word	0x24001560
 80042cc:	24001868 	.word	0x24001868
 80042d0:	40020010 	.word	0x40020010
 80042d4:	40020028 	.word	0x40020028
 80042d8:	40020040 	.word	0x40020040
 80042dc:	40020058 	.word	0x40020058
 80042e0:	40020070 	.word	0x40020070
 80042e4:	40020088 	.word	0x40020088
 80042e8:	400200a0 	.word	0x400200a0
 80042ec:	400200b8 	.word	0x400200b8
 80042f0:	40020410 	.word	0x40020410
 80042f4:	40020428 	.word	0x40020428
 80042f8:	40020440 	.word	0x40020440
 80042fc:	40020458 	.word	0x40020458
 8004300:	40020470 	.word	0x40020470
 8004304:	40020488 	.word	0x40020488
 8004308:	400204a0 	.word	0x400204a0
 800430c:	400204b8 	.word	0x400204b8

08004310 <HAL_TIM_IC_CaptureCallback>:

//pwm input capture callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004310:	b580      	push	{r7, lr}
 8004312:	b088      	sub	sp, #32
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]

	if(input_mode == INPUT_MODE_SOFTWARE)return;
 8004318:	4b4e      	ldr	r3, [pc, #312]	; (8004454 <HAL_TIM_IC_CaptureCallback+0x144>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8095 	beq.w	800444c <HAL_TIM_IC_CaptureCallback+0x13c>

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a4c      	ldr	r2, [pc, #304]	; (8004458 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d131      	bne.n	8004390 <HAL_TIM_IC_CaptureCallback+0x80>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7f1b      	ldrb	r3, [r3, #28]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d12d      	bne.n	8004390 <HAL_TIM_IC_CaptureCallback+0x80>
		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004334:	2100      	movs	r1, #0
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f00d f8a6 	bl	8011488 <HAL_TIM_ReadCapturedValue>
 800433c:	61f8      	str	r0, [r7, #28]
		uint32_t temp_servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800433e:	2104      	movs	r1, #4
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f00d f8a1 	bl	8011488 <HAL_TIM_ReadCapturedValue>
 8004346:	61b8      	str	r0, [r7, #24]
		int32_t diff = temp_servo_duty - servo_duty;
 8004348:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_TIM_IC_CaptureCallback+0x14c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69ba      	ldr	r2, [r7, #24]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
		if(abs(diff) > 2){
 8004352:	6978      	ldr	r0, [r7, #20]
 8004354:	f7fd fd8f 	bl	8001e76 <_ZSt3absl>
 8004358:	4603      	mov	r3, r0
 800435a:	2b02      	cmp	r3, #2
 800435c:	bfcc      	ite	gt
 800435e:	2301      	movgt	r3, #1
 8004360:	2300      	movle	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d006      	beq.n	8004376 <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,temp_servo_duty);
 8004368:	4b3d      	ldr	r3, [pc, #244]	; (8004460 <HAL_TIM_IC_CaptureCallback+0x150>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	635a      	str	r2, [r3, #52]	; 0x34
			servo_duty = temp_servo_duty;
 8004370:	4a3a      	ldr	r2, [pc, #232]	; (800445c <HAL_TIM_IC_CaptureCallback+0x14c>)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2200      	movs	r2, #0
 800437c:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800437e:	2100      	movs	r1, #0
 8004380:	4838      	ldr	r0, [pc, #224]	; (8004464 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004382:	f00c fb27 	bl	80109d4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004386:	2104      	movs	r1, #4
 8004388:	4836      	ldr	r0, [pc, #216]	; (8004464 <HAL_TIM_IC_CaptureCallback+0x154>)
 800438a:	f00c fa1f 	bl	80107cc <HAL_TIM_IC_Start>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800438e:	e035      	b.n	80043fc <HAL_TIM_IC_CaptureCallback+0xec>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a34      	ldr	r2, [pc, #208]	; (8004468 <HAL_TIM_IC_CaptureCallback+0x158>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d130      	bne.n	80043fc <HAL_TIM_IC_CaptureCallback+0xec>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7f1b      	ldrb	r3, [r3, #28]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d12c      	bne.n	80043fc <HAL_TIM_IC_CaptureCallback+0xec>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80043a2:	2100      	movs	r1, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f00d f86f 	bl	8011488 <HAL_TIM_ReadCapturedValue>
 80043aa:	61f8      	str	r0, [r7, #28]
		uint32_t temp_esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80043ac:	2104      	movs	r1, #4
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f00d f86a 	bl	8011488 <HAL_TIM_ReadCapturedValue>
 80043b4:	6138      	str	r0, [r7, #16]
		int32_t diff = temp_esc_duty - esc_duty;
 80043b6:	4b2d      	ldr	r3, [pc, #180]	; (800446c <HAL_TIM_IC_CaptureCallback+0x15c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	60fb      	str	r3, [r7, #12]
		if(abs(diff) >2){
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7fd fd58 	bl	8001e76 <_ZSt3absl>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	bfcc      	ite	gt
 80043cc:	2301      	movgt	r3, #1
 80043ce:	2300      	movle	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <HAL_TIM_IC_CaptureCallback+0xd4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,temp_esc_duty);
 80043d6:	4b22      	ldr	r3, [pc, #136]	; (8004460 <HAL_TIM_IC_CaptureCallback+0x150>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	639a      	str	r2, [r3, #56]	; 0x38
			esc_duty = temp_esc_duty;
 80043de:	4a23      	ldr	r2, [pc, #140]	; (800446c <HAL_TIM_IC_CaptureCallback+0x15c>)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2200      	movs	r2, #0
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80043ec:	2100      	movs	r1, #0
 80043ee:	4820      	ldr	r0, [pc, #128]	; (8004470 <HAL_TIM_IC_CaptureCallback+0x160>)
 80043f0:	f00c faf0 	bl	80109d4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80043f4:	2104      	movs	r1, #4
 80043f6:	481e      	ldr	r0, [pc, #120]	; (8004470 <HAL_TIM_IC_CaptureCallback+0x160>)
 80043f8:	f00c f9e8 	bl	80107cc <HAL_TIM_IC_Start>

	}
	int32_t diff = temp_freq-input_freq;
 80043fc:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_TIM_IC_CaptureCallback+0x164>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	60bb      	str	r3, [r7, #8]
	if(input_freq<1000 || abs(diff)>50){
 8004406:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800440e:	d305      	bcc.n	800441c <HAL_TIM_IC_CaptureCallback+0x10c>
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f7fd fd30 	bl	8001e76 <_ZSt3absl>
 8004416:	4603      	mov	r3, r0
 8004418:	2b32      	cmp	r3, #50	; 0x32
 800441a:	dd01      	ble.n	8004420 <HAL_TIM_IC_CaptureCallback+0x110>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <HAL_TIM_IC_CaptureCallback+0x112>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d013      	beq.n	800444e <HAL_TIM_IC_CaptureCallback+0x13e>
		input_freq=temp_freq;
 8004426:	4a13      	ldr	r2, [pc, #76]	; (8004474 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 800442c:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_TIM_IC_CaptureCallback+0x150>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	62da      	str	r2, [r3, #44]	; 0x2c
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	60d3      	str	r3, [r2, #12]
		esc_servo_arr = 1000000/input_freq-1;
 800443a:	4b0e      	ldr	r3, [pc, #56]	; (8004474 <HAL_TIM_IC_CaptureCallback+0x164>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <HAL_TIM_IC_CaptureCallback+0x168>)
 8004440:	fbb2 f3f3 	udiv	r3, r2, r3
 8004444:	3b01      	subs	r3, #1
 8004446:	4a0d      	ldr	r2, [pc, #52]	; (800447c <HAL_TIM_IC_CaptureCallback+0x16c>)
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	e000      	b.n	800444e <HAL_TIM_IC_CaptureCallback+0x13e>
	if(input_mode == INPUT_MODE_SOFTWARE)return;
 800444c:	bf00      	nop
	}


}
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	24004420 	.word	0x24004420
 8004458:	40000c00 	.word	0x40000c00
 800445c:	24004444 	.word	0x24004444
 8004460:	240019f0 	.word	0x240019f0
 8004464:	24001a3c 	.word	0x24001a3c
 8004468:	40014000 	.word	0x40014000
 800446c:	24004448 	.word	0x24004448
 8004470:	24001a88 	.word	0x24001a88
 8004474:	2400444c 	.word	0x2400444c
 8004478:	000f4240 	.word	0x000f4240
 800447c:	24004428 	.word	0x24004428

08004480 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

	//ros publish
	if(htim->Instance==TIM16){
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a74      	ldr	r2, [pc, #464]	; (8004660 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f040 80d3 	bne.w	800463a <HAL_TIM_PeriodElapsedCallback+0x1ba>
		memcpy(&sensor_msg.data[0],speed,wheel_speed_size*sizeof(float));
 8004494:	4b73      	ldr	r3, [pc, #460]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	2240      	movs	r2, #64	; 0x40
 800449a:	4973      	ldr	r1, [pc, #460]	; (8004668 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800449c:	4618      	mov	r0, r3
 800449e:	f011 f854 	bl	801554a <memcpy>
		for(uint8_t i=0;i<force_size;++i){
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
 80044a6:	e01e      	b.n	80044e6 <HAL_TIM_PeriodElapsedCallback+0x66>
			sensor_msg.data[wheel_speed_size+i]=(float)force_raw[i]*3.3/0xFFFF;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
 80044aa:	4a70      	ldr	r2, [pc, #448]	; (800466c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80044ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b0:	ee07 3a90 	vmov	s15, r3
 80044b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80044bc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8004648 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 80044c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80044c4:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8004650 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80044c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80044cc:	4b65      	ldr	r3, [pc, #404]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80044ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	3310      	adds	r3, #16
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044dc:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<force_size;++i){
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	3301      	adds	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	d9dd      	bls.n	80044a8 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		sensor_msg.data[wheel_speed_size+force_size]=esc_sensor.throttle/100.0;
 80044ec:	4b60      	ldr	r3, [pc, #384]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80044ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80044fa:	ed9f 5b57 	vldr	d5, [pc, #348]	; 8004658 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 80044fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004502:	4b58      	ldr	r3, [pc, #352]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004506:	3360      	adds	r3, #96	; 0x60
 8004508:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800450c:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size+force_size + 1] = esc_sensor.voltage;
 8004510:	4b54      	ldr	r3, [pc, #336]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	3364      	adds	r3, #100	; 0x64
 8004516:	4a56      	ldr	r2, [pc, #344]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004518:	6892      	ldr	r2, [r2, #8]
 800451a:	601a      	str	r2, [r3, #0]
		sensor_msg.data[wheel_speed_size+force_size + 2] = esc_sensor.current;
 800451c:	4b51      	ldr	r3, [pc, #324]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800451e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004520:	3368      	adds	r3, #104	; 0x68
 8004522:	4a53      	ldr	r2, [pc, #332]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004524:	68d2      	ldr	r2, [r2, #12]
 8004526:	601a      	str	r2, [r3, #0]
		sensor_msg.data[wheel_speed_size+force_size + 3] = (float)esc_sensor.temperature;
 8004528:	4b51      	ldr	r3, [pc, #324]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800452a:	8a1a      	ldrh	r2, [r3, #16]
 800452c:	4b4d      	ldr	r3, [pc, #308]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800452e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004530:	336c      	adds	r3, #108	; 0x6c
 8004532:	ee07 2a90 	vmov	s15, r2
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size+force_size + 4] = (float)esc_sensor.rpm;
 800453e:	4b4c      	ldr	r3, [pc, #304]	; (8004670 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b48      	ldr	r3, [pc, #288]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	3370      	adds	r3, #112	; 0x70
 8004548:	ee07 2a90 	vmov	s15, r2
 800454c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004550:	edc3 7a00 	vstr	s15, [r3]

		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 0] = jy901.getAccX();
 8004554:	4847      	ldr	r0, [pc, #284]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004556:	f7fc f98f 	bl	8000878 <_ZN6CJY9017getAccXEv>
 800455a:	eeb0 7b40 	vmov.f64	d7, d0
 800455e:	4b41      	ldr	r3, [pc, #260]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	3374      	adds	r3, #116	; 0x74
 8004564:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004568:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 1] = jy901.getAccY();
 800456c:	4841      	ldr	r0, [pc, #260]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800456e:	f7fc f99f 	bl	80008b0 <_ZN6CJY9017getAccYEv>
 8004572:	eeb0 7b40 	vmov.f64	d7, d0
 8004576:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	3378      	adds	r3, #120	; 0x78
 800457c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004580:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 2] = jy901.getAccZ();
 8004584:	483b      	ldr	r0, [pc, #236]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004586:	f7fc f9af 	bl	80008e8 <_ZN6CJY9017getAccZEv>
 800458a:	eeb0 7b40 	vmov.f64	d7, d0
 800458e:	4b35      	ldr	r3, [pc, #212]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004592:	337c      	adds	r3, #124	; 0x7c
 8004594:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004598:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 3] = jy901.getGyroX();
 800459c:	4835      	ldr	r0, [pc, #212]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800459e:	f7fc f9bf 	bl	8000920 <_ZN6CJY9018getGyroXEv>
 80045a2:	eeb0 7b40 	vmov.f64	d7, d0
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	3380      	adds	r3, #128	; 0x80
 80045ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045b0:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 4] = jy901.getGyroY();
 80045b4:	482f      	ldr	r0, [pc, #188]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80045b6:	f7fc f9cf 	bl	8000958 <_ZN6CJY9018getGyroYEv>
 80045ba:	eeb0 7b40 	vmov.f64	d7, d0
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	3384      	adds	r3, #132	; 0x84
 80045c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045c8:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 5] = jy901.getGyroZ();
 80045cc:	4829      	ldr	r0, [pc, #164]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80045ce:	f7fc f9df 	bl	8000990 <_ZN6CJY9018getGyroZEv>
 80045d2:	eeb0 7b40 	vmov.f64	d7, d0
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	3388      	adds	r3, #136	; 0x88
 80045dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045e0:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 6] = jy901.getRoll();
 80045e4:	4823      	ldr	r0, [pc, #140]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80045e6:	f7fc f9ef 	bl	80009c8 <_ZN6CJY9017getRollEv>
 80045ea:	eeb0 7b40 	vmov.f64	d7, d0
 80045ee:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	338c      	adds	r3, #140	; 0x8c
 80045f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80045f8:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 7] = jy901.getPitch();
 80045fc:	481d      	ldr	r0, [pc, #116]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80045fe:	f7fc f9ff 	bl	8000a00 <_ZN6CJY9018getPitchEv>
 8004602:	eeb0 7b40 	vmov.f64	d7, d0
 8004606:	4b17      	ldr	r3, [pc, #92]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	3390      	adds	r3, #144	; 0x90
 800460c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004610:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 8] = jy901.getYaw();
 8004614:	4817      	ldr	r0, [pc, #92]	; (8004674 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004616:	f7fc fa0f 	bl	8000a38 <_ZN6CJY9016getYawEv>
 800461a:	eeb0 7b40 	vmov.f64	d7, d0
 800461e:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	3394      	adds	r3, #148	; 0x94
 8004624:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004628:	edc3 7a00 	vstr	s15, [r3]

		ros_pub.publish(&sensor_msg);
 800462c:	490d      	ldr	r1, [pc, #52]	; (8004664 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800462e:	4812      	ldr	r0, [pc, #72]	; (8004678 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004630:	f7fe fa97 	bl	8002b62 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8004634:	4811      	ldr	r0, [pc, #68]	; (800467c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004636:	f000 fc8c 	bl	8004f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>
			//apply pid
		}

	}*/

}
 800463a:	bf00      	nop
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	f3af 8000 	nop.w
 8004648:	66666666 	.word	0x66666666
 800464c:	400a6666 	.word	0x400a6666
 8004650:	00000000 	.word	0x00000000
 8004654:	40efffe0 	.word	0x40efffe0
 8004658:	00000000 	.word	0x00000000
 800465c:	40590000 	.word	0x40590000
 8004660:	40014400 	.word	0x40014400
 8004664:	240042b8 	.word	0x240042b8
 8004668:	24004354 	.word	0x24004354
 800466c:	24004394 	.word	0x24004394
 8004670:	240042fc 	.word	0x240042fc
 8004674:	2400445c 	.word	0x2400445c
 8004678:	240042e8 	.word	0x240042e8
 800467c:	24001b24 	.word	0x24001b24

08004680 <_Z14speed_callbackRKN8std_msgs7Float32E>:
		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
	}
}

void speed_callback(const std_msgs::Float32& msg){
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <_Z14speed_callbackRKN8std_msgs7Float32E+0x34>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d00b      	beq.n	80046a8 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>
 8004690:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <_Z14speed_callbackRKN8std_msgs7Float32E+0x38>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>
	pid_its=0;
 8004698:	4b08      	ldr	r3, [pc, #32]	; (80046bc <_Z14speed_callbackRKN8std_msgs7Float32E+0x3c>)
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <_Z14speed_callbackRKN8std_msgs7Float32E+0x40>)
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	e000      	b.n	80046aa <_Z14speed_callbackRKN8std_msgs7Float32E+0x2a>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 80046a8:	bf00      	nop
}
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	24004420 	.word	0x24004420
 80046b8:	240043b4 	.word	0x240043b4
 80046bc:	240043b5 	.word	0x240043b5
 80046c0:	240043b8 	.word	0x240043b8

080046c4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

void duty_cycle_callback(const std_msgs::Float32& msg){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 80046cc:	4b19      	ldr	r3, [pc, #100]	; (8004734 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x70>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d02a      	beq.n	800472a <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x66>
 80046d4:	4b18      	ldr	r3, [pc, #96]	; (8004738 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x74>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d026      	beq.n	800472a <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x66>
	int32_t esc_count = msg.data * esc_servo_arr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	ed93 7a01 	vldr	s14, [r3, #4]
 80046e2:	4b16      	ldr	r3, [pc, #88]	; (800473c <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x78>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046f6:	ee17 3a90 	vmov	r3, s15
 80046fa:	60fb      	str	r3, [r7, #12]
	if(abs(esc_count - pre_esc_ccr)>5){
 80046fc:	4b10      	ldr	r3, [pc, #64]	; (8004740 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x7c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	4618      	mov	r0, r3
 8004706:	f7fd fbb6 	bl	8001e76 <_ZSt3absl>
 800470a:	4603      	mov	r3, r0
 800470c:	2b05      	cmp	r3, #5
 800470e:	bfcc      	ite	gt
 8004710:	2301      	movgt	r3, #1
 8004712:	2300      	movle	r3, #0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x68>
		pre_esc_ccr = esc_count;
 800471a:	4a09      	ldr	r2, [pc, #36]	; (8004740 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x7c>)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_count);
 8004720:	4b08      	ldr	r3, [pc, #32]	; (8004744 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x80>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
 8004728:	e000      	b.n	800472c <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x68>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 800472a:	bf00      	nop
	}
}
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	24004420 	.word	0x24004420
 8004738:	240043b4 	.word	0x240043b4
 800473c:	24004428 	.word	0x24004428
 8004740:	24004430 	.word	0x24004430
 8004744:	240019f0 	.word	0x240019f0

08004748 <_Z17steering_callbackRKN8std_msgs7Float32E>:

void steering_callback(const std_msgs::Float32& msg){
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 8004750:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <_Z17steering_callbackRKN8std_msgs7Float32E+0x70>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d02b      	beq.n	80047b0 <_Z17steering_callbackRKN8std_msgs7Float32E+0x68>
	int32_t steering_pulse = parameters.steering_ratio*msg.data + parameters.steering_offset;
 8004758:	4b18      	ldr	r3, [pc, #96]	; (80047bc <_Z17steering_callbackRKN8std_msgs7Float32E+0x74>)
 800475a:	ed93 7a08 	vldr	s14, [r3, #32]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	edd3 7a01 	vldr	s15, [r3, #4]
 8004764:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004768:	4b14      	ldr	r3, [pc, #80]	; (80047bc <_Z17steering_callbackRKN8std_msgs7Float32E+0x74>)
 800476a:	8b9b      	ldrh	r3, [r3, #28]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004774:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004778:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800477c:	ee17 3a90 	vmov	r3, s15
 8004780:	60fb      	str	r3, [r7, #12]
	if(abs(steering_pulse - pre_servo_ccr)>5){
 8004782:	4b0f      	ldr	r3, [pc, #60]	; (80047c0 <_Z17steering_callbackRKN8std_msgs7Float32E+0x78>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fb73 	bl	8001e76 <_ZSt3absl>
 8004790:	4603      	mov	r3, r0
 8004792:	2b05      	cmp	r3, #5
 8004794:	bfcc      	ite	gt
 8004796:	2301      	movgt	r3, #1
 8004798:	2300      	movle	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <_Z17steering_callbackRKN8std_msgs7Float32E+0x6a>
		pre_servo_ccr = steering_pulse;
 80047a0:	4a07      	ldr	r2, [pc, #28]	; (80047c0 <_Z17steering_callbackRKN8std_msgs7Float32E+0x78>)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,steering_pulse);
 80047a6:	4b07      	ldr	r3, [pc, #28]	; (80047c4 <_Z17steering_callbackRKN8std_msgs7Float32E+0x7c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	635a      	str	r2, [r3, #52]	; 0x34
 80047ae:	e000      	b.n	80047b2 <_Z17steering_callbackRKN8std_msgs7Float32E+0x6a>
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 80047b0:	bf00      	nop
	}
}
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	24004420 	.word	0x24004420
 80047bc:	24000004 	.word	0x24000004
 80047c0:	2400442c 	.word	0x2400442c
 80047c4:	240019f0 	.word	0x240019f0

080047c8 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

void brake_callback(const std_msgs::Float32MultiArray& msg){
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*brake_arr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	ed93 7a00 	vldr	s14, [r3]
 80047d8:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	ee07 3a90 	vmov	s15, r3
 80047e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047ec:	ee17 3a90 	vmov	r3, s15
 80047f0:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 80047f2:	4b37      	ldr	r3, [pc, #220]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d006      	beq.n	800480a <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 80047fc:	4a34      	ldr	r2, [pc, #208]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 8004802:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*brake_arr;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480e:	3304      	adds	r3, #4
 8004810:	ed93 7a00 	vldr	s14, [r3]
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	ee07 3a90 	vmov	s15, r3
 800481c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004828:	ee17 3a90 	vmov	r3, s15
 800482c:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 800482e:	4b28      	ldr	r3, [pc, #160]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d006      	beq.n	8004846 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 800483e:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*brake_arr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	3308      	adds	r3, #8
 800484c:	ed93 7a00 	vldr	s14, [r3]
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004864:	ee17 3a90 	vmov	r3, s15
 8004868:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 800486a:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	429a      	cmp	r2, r3
 8004872:	d006      	beq.n	8004882 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 8004874:	4a16      	ldr	r2, [pc, #88]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 800487a:	4b16      	ldr	r3, [pc, #88]	; (80048d4 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*brake_arr;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	330c      	adds	r3, #12
 8004888:	ed93 7a00 	vldr	s14, [r3]
 800488c:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048a0:	ee17 3a90 	vmov	r3, s15
 80048a4:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d006      	beq.n	80048be <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 80048b0:	4a07      	ldr	r2, [pc, #28]	; (80048d0 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 80048b6:	4b07      	ldr	r3, [pc, #28]	; (80048d4 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	24004424 	.word	0x24004424
 80048d0:	24004434 	.word	0x24004434
 80048d4:	240019a4 	.word	0x240019a4

080048d8 <_Z19input_mode_callbackRKN8std_msgs4BoolE>:

void input_mode_callback(const std_msgs::Bool& msg){
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, (GPIO_PinState)msg.data);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	791b      	ldrb	r3, [r3, #4]
 80048e4:	461a      	mov	r2, r3
 80048e6:	2120      	movs	r1, #32
 80048e8:	4803      	ldr	r0, [pc, #12]	; (80048f8 <_Z19input_mode_callbackRKN8std_msgs4BoolE+0x20>)
 80048ea:	f007 fabf 	bl	800be6c <HAL_GPIO_WritePin>

}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	58020400 	.word	0x58020400

080048fc <_Z17pid_mode_callbackRKN8std_msgs4BoolE>:

void pid_mode_callback(const std_msgs::Bool& msg){
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	if(msg.data != (bool)pid_mode){
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	791b      	ldrb	r3, [r3, #4]
 8004908:	461a      	mov	r2, r3
 800490a:	4b0c      	ldr	r3, [pc, #48]	; (800493c <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x40>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	429a      	cmp	r2, r3
 800491a:	d00b      	beq.n	8004934 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x38>
		pid_mode = (PIDMode_TypeDef)msg.data;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	791b      	ldrb	r3, [r3, #4]
 8004920:	461a      	mov	r2, r3
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x40>)
 8004924:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)msg.data);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	791b      	ldrb	r3, [r3, #4]
 800492a:	461a      	mov	r2, r3
 800492c:	2120      	movs	r1, #32
 800492e:	4804      	ldr	r0, [pc, #16]	; (8004940 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x44>)
 8004930:	f007 fa9c 	bl	800be6c <HAL_GPIO_WritePin>
	}
}
 8004934:	bf00      	nop
 8004936:	3708      	adds	r7, #8
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	240043b4 	.word	0x240043b4
 8004940:	58020c00 	.word	0x58020c00

08004944 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_9) {
 800494e:	88fb      	ldrh	r3, [r7, #6]
 8004950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004954:	d116      	bne.n	8004984 <HAL_GPIO_EXTI_Callback+0x40>
	  auto state = HAL_GPIO_ReadPin(PID_MODE_INPUT_GPIO_Port, PID_MODE_INPUT_Pin);
 8004956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <HAL_GPIO_EXTI_Callback+0x48>)
 800495c:	f007 fa6e 	bl	800be3c <HAL_GPIO_ReadPin>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]
	  if(state==GPIO_PIN_SET){
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d103      	bne.n	8004972 <HAL_GPIO_EXTI_Callback+0x2e>
		  pid_mode = PID_MODE_AUTOMATIC;
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_GPIO_EXTI_Callback+0x4c>)
 800496c:	2201      	movs	r2, #1
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	e002      	b.n	8004978 <HAL_GPIO_EXTI_Callback+0x34>
	  }else{
		  pid_mode = PID_MODE_MANUAL;
 8004972:	4b07      	ldr	r3, [pc, #28]	; (8004990 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8004978:	7bfb      	ldrb	r3, [r7, #15]
 800497a:	461a      	mov	r2, r3
 800497c:	2120      	movs	r1, #32
 800497e:	4805      	ldr	r0, [pc, #20]	; (8004994 <HAL_GPIO_EXTI_Callback+0x50>)
 8004980:	f007 fa74 	bl	800be6c <HAL_GPIO_WritePin>
  }
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	58021000 	.word	0x58021000
 8004990:	240043b4 	.word	0x240043b4
 8004994:	58020c00 	.word	0x58020c00

08004998 <_Z9adc_setupv>:

void adc_setup(){
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
 800499c:	2208      	movs	r2, #8
 800499e:	4903      	ldr	r1, [pc, #12]	; (80049ac <_Z9adc_setupv+0x14>)
 80049a0:	4803      	ldr	r0, [pc, #12]	; (80049b0 <_Z9adc_setupv+0x18>)
 80049a2:	f002 ff79 	bl	8007898 <HAL_ADC_Start_DMA>
}
 80049a6:	bf00      	nop
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	24004394 	.word	0x24004394
 80049b0:	240012b8 	.word	0x240012b8

080049b4 <_Z10uart_setupv>:

void uart_setup(){
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80049b8:	2220      	movs	r2, #32
 80049ba:	493b      	ldr	r1, [pc, #236]	; (8004aa8 <_Z10uart_setupv+0xf4>)
 80049bc:	483b      	ldr	r0, [pc, #236]	; (8004aac <_Z10uart_setupv+0xf8>)
 80049be:	f00d fe17 	bl	80125f0 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+4);
 80049c2:	2224      	movs	r2, #36	; 0x24
 80049c4:	493a      	ldr	r1, [pc, #232]	; (8004ab0 <_Z10uart_setupv+0xfc>)
 80049c6:	483b      	ldr	r0, [pc, #236]	; (8004ab4 <_Z10uart_setupv+0x100>)
 80049c8:	f00d fe12 	bl	80125f0 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 80049cc:	220b      	movs	r2, #11
 80049ce:	493a      	ldr	r1, [pc, #232]	; (8004ab8 <_Z10uart_setupv+0x104>)
 80049d0:	483a      	ldr	r0, [pc, #232]	; (8004abc <_Z10uart_setupv+0x108>)
 80049d2:	f00d fe0d 	bl	80125f0 <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 80049d6:	2264      	movs	r2, #100	; 0x64
 80049d8:	4939      	ldr	r1, [pc, #228]	; (8004ac0 <_Z10uart_setupv+0x10c>)
 80049da:	483a      	ldr	r0, [pc, #232]	; (8004ac4 <_Z10uart_setupv+0x110>)
 80049dc:	f00f fcec 	bl	80143b8 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80049e0:	4b39      	ldr	r3, [pc, #228]	; (8004ac8 <_Z10uart_setupv+0x114>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a39      	ldr	r2, [pc, #228]	; (8004acc <_Z10uart_setupv+0x118>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d04a      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 80049ea:	4b37      	ldr	r3, [pc, #220]	; (8004ac8 <_Z10uart_setupv+0x114>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a38      	ldr	r2, [pc, #224]	; (8004ad0 <_Z10uart_setupv+0x11c>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d045      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 80049f4:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <_Z10uart_setupv+0x114>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a36      	ldr	r2, [pc, #216]	; (8004ad4 <_Z10uart_setupv+0x120>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d040      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 80049fe:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a35      	ldr	r2, [pc, #212]	; (8004ad8 <_Z10uart_setupv+0x124>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d03b      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a08:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a33      	ldr	r2, [pc, #204]	; (8004adc <_Z10uart_setupv+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d036      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a32      	ldr	r2, [pc, #200]	; (8004ae0 <_Z10uart_setupv+0x12c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d031      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <_Z10uart_setupv+0x130>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d02c      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a26:	4b28      	ldr	r3, [pc, #160]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ae8 <_Z10uart_setupv+0x134>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d027      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a30:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <_Z10uart_setupv+0x138>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d022      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <_Z10uart_setupv+0x13c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d01d      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a44:	4b20      	ldr	r3, [pc, #128]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a2a      	ldr	r2, [pc, #168]	; (8004af4 <_Z10uart_setupv+0x140>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d018      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <_Z10uart_setupv+0x144>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d013      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a58:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a27      	ldr	r2, [pc, #156]	; (8004afc <_Z10uart_setupv+0x148>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d00e      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a62:	4b19      	ldr	r3, [pc, #100]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <_Z10uart_setupv+0x14c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d009      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a6c:	4b16      	ldr	r3, [pc, #88]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a24      	ldr	r2, [pc, #144]	; (8004b04 <_Z10uart_setupv+0x150>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <_Z10uart_setupv+0xcc>
 8004a76:	4b14      	ldr	r3, [pc, #80]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a23      	ldr	r2, [pc, #140]	; (8004b08 <_Z10uart_setupv+0x154>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d108      	bne.n	8004a92 <_Z10uart_setupv+0xde>
 8004a80:	4b11      	ldr	r3, [pc, #68]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0208 	bic.w	r2, r2, #8
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	e008      	b.n	8004aa4 <_Z10uart_setupv+0xf0>
 8004a92:	4b0d      	ldr	r3, [pc, #52]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <_Z10uart_setupv+0x114>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0204 	bic.w	r2, r2, #4
 8004aa0:	601a      	str	r2, [r3, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	24004310 	.word	0x24004310
 8004aac:	240013a4 	.word	0x240013a4
 8004ab0:	24004330 	.word	0x24004330
 8004ab4:	240014cc 	.word	0x240014cc
 8004ab8:	24004450 	.word	0x24004450
 8004abc:	240015f4 	.word	0x240015f4
 8004ac0:	240043bc 	.word	0x240043bc
 8004ac4:	24001560 	.word	0x24001560
 8004ac8:	24001868 	.word	0x24001868
 8004acc:	40020010 	.word	0x40020010
 8004ad0:	40020028 	.word	0x40020028
 8004ad4:	40020040 	.word	0x40020040
 8004ad8:	40020058 	.word	0x40020058
 8004adc:	40020070 	.word	0x40020070
 8004ae0:	40020088 	.word	0x40020088
 8004ae4:	400200a0 	.word	0x400200a0
 8004ae8:	400200b8 	.word	0x400200b8
 8004aec:	40020410 	.word	0x40020410
 8004af0:	40020428 	.word	0x40020428
 8004af4:	40020440 	.word	0x40020440
 8004af8:	40020458 	.word	0x40020458
 8004afc:	40020470 	.word	0x40020470
 8004b00:	40020488 	.word	0x40020488
 8004b04:	400204a0 	.word	0x400204a0
 8004b08:	400204b8 	.word	0x400204b8

08004b0c <_Z11timer_setupv>:

void timer_setup(){
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
	//set ros publish frequency
	uint32_t fe = uint32_t(10000/parameters.publish_frequency-1);
 8004b12:	4b52      	ldr	r3, [pc, #328]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b14:	7d1b      	ldrb	r3, [r3, #20]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f242 7310 	movw	r3, #10000	; 0x2710
 8004b1c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b20:	3b01      	subs	r3, #1
 8004b22:	607b      	str	r3, [r7, #4]
	//set tim16 ARR value based on topic publish frequency and start tim16, 10000 = 100M/(9999+1), where 9999 is the prescale of timer16
	__HAL_TIM_SET_AUTORELOAD(&htim16,fe);
 8004b24:	4b4e      	ldr	r3, [pc, #312]	; (8004c60 <_Z11timer_setupv+0x154>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b2c:	4a4c      	ldr	r2, [pc, #304]	; (8004c60 <_Z11timer_setupv+0x154>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	60d3      	str	r3, [r2, #12]
	//set tim7 ARR value based on PID calculation frequency and start tim7
	__HAL_TIM_SET_AUTORELOAD(&htim7,uint32_t(10000/parameters.pid_frequency-1));
	HAL_TIM_Base_Start_IT(&htim7);*/

	//start esc and steering servo pwm output
	input_freq = parameters.steering_esc_pwm_frequency;
 8004b32:	4b4a      	ldr	r3, [pc, #296]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b34:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b3c:	ee17 2a90 	vmov	r2, s15
 8004b40:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <_Z11timer_setupv+0x158>)
 8004b42:	601a      	str	r2, [r3, #0]
	esc_servo_arr = 1000000/parameters.steering_esc_pwm_frequency-1;
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b46:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b4a:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004c68 <_Z11timer_setupv+0x15c>
 8004b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5e:	ee17 2a90 	vmov	r2, s15
 8004b62:	4b42      	ldr	r3, [pc, #264]	; (8004c6c <_Z11timer_setupv+0x160>)
 8004b64:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3,esc_servo_arr);
 8004b66:	4b42      	ldr	r3, [pc, #264]	; (8004c70 <_Z11timer_setupv+0x164>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a40      	ldr	r2, [pc, #256]	; (8004c6c <_Z11timer_setupv+0x160>)
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <_Z11timer_setupv+0x160>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a3e      	ldr	r2, [pc, #248]	; (8004c70 <_Z11timer_setupv+0x164>)
 8004b76:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 8004b78:	4b38      	ldr	r3, [pc, #224]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b7a:	8b9a      	ldrh	r2, [r3, #28]
 8004b7c:	4b3c      	ldr	r3, [pc, #240]	; (8004c70 <_Z11timer_setupv+0x164>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	635a      	str	r2, [r3, #52]	; 0x34
	pre_servo_ccr = parameters.steering_offset;
 8004b82:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b84:	8b9b      	ldrh	r3, [r3, #28]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <_Z11timer_setupv+0x168>)
 8004b8a:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 8004b8c:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b90:	4b37      	ldr	r3, [pc, #220]	; (8004c70 <_Z11timer_setupv+0x164>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
	pre_esc_ccr = parameters.esc_offset;
 8004b96:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004b98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	4b36      	ldr	r3, [pc, #216]	; (8004c78 <_Z11timer_setupv+0x16c>)
 8004b9e:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4833      	ldr	r0, [pc, #204]	; (8004c70 <_Z11timer_setupv+0x164>)
 8004ba4:	f00b fca2 	bl	80104ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004ba8:	2104      	movs	r1, #4
 8004baa:	4831      	ldr	r0, [pc, #196]	; (8004c70 <_Z11timer_setupv+0x164>)
 8004bac:	f00b fc9e 	bl	80104ec <HAL_TIM_PWM_Start>

	//set brake pwm, prescaler 99, timer frequency is 100MHz
	__HAL_TIM_SET_PRESCALER(&htim2,99);
 8004bb0:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2263      	movs	r2, #99	; 0x63
 8004bb6:	629a      	str	r2, [r3, #40]	; 0x28
	//set tim2 ARR value based on brake frequency and start tim6, 1000000 = 100M/(99+1)
	brake_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 8004bb8:	4b28      	ldr	r3, [pc, #160]	; (8004c5c <_Z11timer_setupv+0x150>)
 8004bba:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004bbe:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004c68 <_Z11timer_setupv+0x15c>
 8004bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004bca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd2:	ee17 2a90 	vmov	r2, s15
 8004bd6:	4b2a      	ldr	r3, [pc, #168]	; (8004c80 <_Z11timer_setupv+0x174>)
 8004bd8:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,brake_arr);
 8004bda:	4b28      	ldr	r3, [pc, #160]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a28      	ldr	r2, [pc, #160]	; (8004c80 <_Z11timer_setupv+0x174>)
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004be4:	4b26      	ldr	r3, [pc, #152]	; (8004c80 <_Z11timer_setupv+0x174>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004bea:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004bec:	2100      	movs	r1, #0
 8004bee:	4823      	ldr	r0, [pc, #140]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004bf0:	f00b fc7c 	bl	80104ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004bf4:	2104      	movs	r1, #4
 8004bf6:	4821      	ldr	r0, [pc, #132]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004bf8:	f00b fc78 	bl	80104ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004bfc:	2108      	movs	r1, #8
 8004bfe:	481f      	ldr	r0, [pc, #124]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004c00:	f00b fc74 	bl	80104ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004c04:	210c      	movs	r1, #12
 8004c06:	481d      	ldr	r0, [pc, #116]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004c08:	f00b fc70 	bl	80104ec <HAL_TIM_PWM_Start>
	//initial value zeros
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2200      	movs	r2, #0
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8004c14:	4b19      	ldr	r3, [pc, #100]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2200      	movs	r2, #0
 8004c22:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 8004c24:	4b15      	ldr	r3, [pc, #84]	; (8004c7c <_Z11timer_setupv+0x170>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

	//pwm input capture for servo and esc
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4815      	ldr	r0, [pc, #84]	; (8004c84 <_Z11timer_setupv+0x178>)
 8004c30:	f00b fed0 	bl	80109d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004c34:	2104      	movs	r1, #4
 8004c36:	4813      	ldr	r0, [pc, #76]	; (8004c84 <_Z11timer_setupv+0x178>)
 8004c38:	f00b fdc8 	bl	80107cc <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4812      	ldr	r0, [pc, #72]	; (8004c88 <_Z11timer_setupv+0x17c>)
 8004c40:	f00b fec8 	bl	80109d4 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004c44:	2104      	movs	r1, #4
 8004c46:	4810      	ldr	r0, [pc, #64]	; (8004c88 <_Z11timer_setupv+0x17c>)
 8004c48:	f00b fdc0 	bl	80107cc <HAL_TIM_IC_Start>

	//start ros publish
	//this timer should start as the last one.
	HAL_TIM_Base_Start_IT(&htim16);
 8004c4c:	4804      	ldr	r0, [pc, #16]	; (8004c60 <_Z11timer_setupv+0x154>)
 8004c4e:	f00b fb73 	bl	8010338 <HAL_TIM_Base_Start_IT>

}
 8004c52:	bf00      	nop
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	24000004 	.word	0x24000004
 8004c60:	24001ad4 	.word	0x24001ad4
 8004c64:	2400444c 	.word	0x2400444c
 8004c68:	49742400 	.word	0x49742400
 8004c6c:	24004428 	.word	0x24004428
 8004c70:	240019f0 	.word	0x240019f0
 8004c74:	2400442c 	.word	0x2400442c
 8004c78:	24004430 	.word	0x24004430
 8004c7c:	240019a4 	.word	0x240019a4
 8004c80:	24004424 	.word	0x24004424
 8004c84:	24001a3c 	.word	0x24001a3c
 8004c88:	24001a88 	.word	0x24001a88

08004c8c <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );

void ros_setup(){
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0

	//setup the sensor message, the first 16 data are speed, next 8 data are force, next
	sensor_msg.data_length = wheel_speed_size + force_size + vesc_size + imu_size;
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <_Z9ros_setupv+0x70>)
 8004c92:	2226      	movs	r2, #38	; 0x26
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_msg.data = new std_msgs::Float32MultiArray::_data_type[sensor_msg.data_length];
 8004c96:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <_Z9ros_setupv+0x70>)
 8004c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9a:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d201      	bcs.n	8004ca6 <_Z9ros_setupv+0x1a>
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	e001      	b.n	8004caa <_Z9ros_setupv+0x1e>
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004caa:	4618      	mov	r0, r3
 8004cac:	f00f fc26 	bl	80144fc <_Znaj>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <_Z9ros_setupv+0x70>)
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c

	nh.initNode();
 8004cb8:	4811      	ldr	r0, [pc, #68]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cba:	f000 fc37 	bl	800552c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(speed_sub);
 8004cbe:	4911      	ldr	r1, [pc, #68]	; (8004d04 <_Z9ros_setupv+0x78>)
 8004cc0:	480f      	ldr	r0, [pc, #60]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cc2:	f000 fc5c 	bl	800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(input_mode_sub);
 8004cc6:	4910      	ldr	r1, [pc, #64]	; (8004d08 <_Z9ros_setupv+0x7c>)
 8004cc8:	480d      	ldr	r0, [pc, #52]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cca:	f000 fc58 	bl	800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(brake_sub);
 8004cce:	490f      	ldr	r1, [pc, #60]	; (8004d0c <_Z9ros_setupv+0x80>)
 8004cd0:	480b      	ldr	r0, [pc, #44]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cd2:	f000 fc54 	bl	800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(steering_sub);
 8004cd6:	490e      	ldr	r1, [pc, #56]	; (8004d10 <_Z9ros_setupv+0x84>)
 8004cd8:	4809      	ldr	r0, [pc, #36]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cda:	f000 fc50 	bl	800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(duty_cycle_sub);
 8004cde:	490d      	ldr	r1, [pc, #52]	; (8004d14 <_Z9ros_setupv+0x88>)
 8004ce0:	4807      	ldr	r0, [pc, #28]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004ce2:	f000 fc4c 	bl	800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(pid_mode_sub);
 8004ce6:	490c      	ldr	r1, [pc, #48]	; (8004d18 <_Z9ros_setupv+0x8c>)
 8004ce8:	4805      	ldr	r0, [pc, #20]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cea:	f000 fc48 	bl	800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>

	nh.advertise(ros_pub);
 8004cee:	490b      	ldr	r1, [pc, #44]	; (8004d1c <_Z9ros_setupv+0x90>)
 8004cf0:	4803      	ldr	r0, [pc, #12]	; (8004d00 <_Z9ros_setupv+0x74>)
 8004cf2:	f000 fc71 	bl	80055d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	240042b8 	.word	0x240042b8
 8004d00:	24001b24 	.word	0x24001b24
 8004d04:	240044e4 	.word	0x240044e4
 8004d08:	2400457c 	.word	0x2400457c
 8004d0c:	24004538 	.word	0x24004538
 8004d10:	2400451c 	.word	0x2400451c
 8004d14:	24004500 	.word	0x24004500
 8004d18:	24004598 	.word	0x24004598
 8004d1c:	240042e8 	.word	0x240042e8

08004d20 <_Z15read_parametersv>:
	//blue and yellow led, default off
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
}

void read_parameters(){
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 8004d26:	f7fb ff41 	bl	8000bac <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 8004d2a:	f7fb ff47 	bl	8000bbc <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004d2e:	1d3b      	adds	r3, r7, #4
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fc f93f 	bl	8000fb4 <QSPI_W25Q64JV_DeviceID>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d002      	beq.n	8004d4c <_Z15read_parametersv+0x2c>
	    printf("Initializing ROM\n");
 8004d46:	4820      	ldr	r0, [pc, #128]	; (8004dc8 <_Z15read_parametersv+0xa8>)
 8004d48:	f010 fa4c 	bl	80151e4 <puts>
	}
	printf("Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 8004d4c:	793b      	ldrb	r3, [r7, #4]
 8004d4e:	4619      	mov	r1, r3
 8004d50:	797b      	ldrb	r3, [r7, #5]
 8004d52:	461a      	mov	r2, r3
 8004d54:	481d      	ldr	r0, [pc, #116]	; (8004dcc <_Z15read_parametersv+0xac>)
 8004d56:	f010 f9df 	bl	8015118 <iprintf>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 8004d5a:	463b      	mov	r3, r7
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb ffa9 	bl	8000cb8 <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 8004d66:	783b      	ldrb	r3, [r7, #0]
 8004d68:	2b61      	cmp	r3, #97	; 0x61
 8004d6a:	d108      	bne.n	8004d7e <_Z15read_parametersv+0x5e>
 8004d6c:	787b      	ldrb	r3, [r7, #1]
 8004d6e:	2b63      	cmp	r3, #99	; 0x63
 8004d70:	d105      	bne.n	8004d7e <_Z15read_parametersv+0x5e>
 8004d72:	78bb      	ldrb	r3, [r7, #2]
 8004d74:	2b73      	cmp	r3, #115	; 0x73
 8004d76:	d102      	bne.n	8004d7e <_Z15read_parametersv+0x5e>
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	2b72      	cmp	r3, #114	; 0x72
 8004d7c:	d003      	beq.n	8004d86 <_Z15read_parametersv+0x66>
		printf("Reading parameters fails, use default parameters\n");
 8004d7e:	4814      	ldr	r0, [pc, #80]	; (8004dd0 <_Z15read_parametersv+0xb0>)
 8004d80:	f010 fa30 	bl	80151e4 <puts>
		return;
 8004d84:	e01c      	b.n	8004dc0 <_Z15read_parametersv+0xa0>
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 8004d86:	223c      	movs	r2, #60	; 0x3c
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4812      	ldr	r0, [pc, #72]	; (8004dd4 <_Z15read_parametersv+0xb4>)
 8004d8c:	f7fb ff94 	bl	8000cb8 <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <_Z15read_parametersv+0xb4>)
 8004d92:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d96:	2b62      	cmp	r3, #98	; 0x62
 8004d98:	d10e      	bne.n	8004db8 <_Z15read_parametersv+0x98>
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <_Z15read_parametersv+0xb4>)
 8004d9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004da0:	2b34      	cmp	r3, #52	; 0x34
 8004da2:	d109      	bne.n	8004db8 <_Z15read_parametersv+0x98>
 8004da4:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <_Z15read_parametersv+0xb4>)
 8004da6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004daa:	2b30      	cmp	r3, #48	; 0x30
 8004dac:	d104      	bne.n	8004db8 <_Z15read_parametersv+0x98>
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <_Z15read_parametersv+0xb4>)
 8004db0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8004db4:	2b31      	cmp	r3, #49	; 0x31
 8004db6:	d003      	beq.n	8004dc0 <_Z15read_parametersv+0xa0>
		printf("Reading parameters fails, use default parameters\n");
 8004db8:	4805      	ldr	r0, [pc, #20]	; (8004dd0 <_Z15read_parametersv+0xb0>)
 8004dba:	f010 fa13 	bl	80151e4 <puts>
		return;
 8004dbe:	bf00      	nop
	}
}
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0801712c 	.word	0x0801712c
 8004dcc:	08017140 	.word	0x08017140
 8004dd0:	0801716c 	.word	0x0801716c
 8004dd4:	24000004 	.word	0x24000004

08004dd8 <setup>:


void setup(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
	DWT_Init();
 8004ddc:	f7fe fd7a 	bl	80038d4 <_ZL8DWT_Initv>
	read_parameters();
 8004de0:	f7ff ff9e 	bl	8004d20 <_Z15read_parametersv>
	uart_setup();
 8004de4:	f7ff fde6 	bl	80049b4 <_Z10uart_setupv>
	adc_setup();
 8004de8:	f7ff fdd6 	bl	8004998 <_Z9adc_setupv>
	ros_setup();
 8004dec:	f7ff ff4e 	bl	8004c8c <_Z9ros_setupv>
	timer_setup();
 8004df0:	f7ff fe8c 	bl	8004b0c <_Z11timer_setupv>
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2120      	movs	r1, #32
 8004df8:	4808      	ldr	r0, [pc, #32]	; (8004e1c <setup+0x44>)
 8004dfa:	f007 f837 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	2108      	movs	r1, #8
 8004e02:	4807      	ldr	r0, [pc, #28]	; (8004e20 <setup+0x48>)
 8004e04:	f007 f832 	bl	800be6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)pid_mode);
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <setup+0x4c>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2120      	movs	r1, #32
 8004e10:	4805      	ldr	r0, [pc, #20]	; (8004e28 <setup+0x50>)
 8004e12:	f007 f82b 	bl	800be6c <HAL_GPIO_WritePin>
}
 8004e16:	bf00      	nop
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	58020400 	.word	0x58020400
 8004e20:	58021000 	.word	0x58021000
 8004e24:	240043b4 	.word	0x240043b4
 8004e28:	58020c00 	.word	0x58020c00

08004e2c <loop>:

uint8_t loop_index = 0;

void loop(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
	auto state = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin);
 8004e32:	2180      	movs	r1, #128	; 0x80
 8004e34:	4819      	ldr	r0, [pc, #100]	; (8004e9c <loop+0x70>)
 8004e36:	f007 f801 	bl	800be3c <HAL_GPIO_ReadPin>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	71fb      	strb	r3, [r7, #7]

	if(state==GPIO_PIN_SET){
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d103      	bne.n	8004e4c <loop+0x20>
		input_mode = INPUT_MODE_CONTROLLER;
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <loop+0x74>)
 8004e46:	2201      	movs	r2, #1
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e005      	b.n	8004e58 <loop+0x2c>
	}else if(state==GPIO_PIN_RESET){
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <loop+0x2c>
		input_mode = INPUT_MODE_SOFTWARE;
 8004e52:	4b13      	ldr	r3, [pc, #76]	; (8004ea0 <loop+0x74>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, state);
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2108      	movs	r1, #8
 8004e5e:	4811      	ldr	r0, [pc, #68]	; (8004ea4 <loop+0x78>)
 8004e60:	f007 f804 	bl	800be6c <HAL_GPIO_WritePin>

	loop_index++;
 8004e64:	4b10      	ldr	r3, [pc, #64]	; (8004ea8 <loop+0x7c>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <loop+0x7c>)
 8004e6e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8004e70:	2064      	movs	r0, #100	; 0x64
 8004e72:	f002 f937 	bl	80070e4 <HAL_Delay>
	if(loop_index==5){
 8004e76:	4b0c      	ldr	r3, [pc, #48]	; (8004ea8 <loop+0x7c>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b05      	cmp	r3, #5
 8004e7c:	d106      	bne.n	8004e8c <loop+0x60>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8004e7e:	2140      	movs	r1, #64	; 0x40
 8004e80:	4808      	ldr	r0, [pc, #32]	; (8004ea4 <loop+0x78>)
 8004e82:	f007 f80c 	bl	800be9e <HAL_GPIO_TogglePin>
		loop_index=0;
 8004e86:	4b08      	ldr	r3, [pc, #32]	; (8004ea8 <loop+0x7c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]
	}
	HAL_IWDG_Refresh(&hiwdg1);
 8004e8c:	4807      	ldr	r0, [pc, #28]	; (8004eac <loop+0x80>)
 8004e8e:	f007 f889 	bl	800bfa4 <HAL_IWDG_Refresh>
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	58020400 	.word	0x58020400
 8004ea0:	24004420 	.word	0x24004420
 8004ea4:	58020c00 	.word	0x58020c00
 8004ea8:	240045b4 	.word	0x240045b4
 8004eac:	24001394 	.word	0x24001394

08004eb0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	e00c      	b.n	8004eda <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	fa22 f103 	lsr.w	r1, r2, r3
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	b2ca      	uxtb	r2, r1
 8004ed2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b03      	cmp	r3, #3
 8004ede:	d9ef      	bls.n	8004ec0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	3714      	adds	r7, #20
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eec:	4770      	bx	lr

08004eee <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004eee:	b480      	push	{r7}
 8004ef0:	b085      	sub	sp, #20
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e010      	b.n	8004f26 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	440a      	add	r2, r1
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	4611      	mov	r1, r2
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	00d2      	lsls	r2, r2, #3
 8004f16:	fa01 f202 	lsl.w	r2, r1, r2
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b03      	cmp	r3, #3
 8004f2a:	d9eb      	bls.n	8004f04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
  }
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd ffe8 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 8004f64:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f6c:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d905      	bls.n	8004f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f8e:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00e      	beq.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f9c:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d906      	bls.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004fac:	461a      	mov	r2, r3
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d014      	beq.n	8004fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fd ffb6 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad2      	subs	r2, r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	bf8c      	ite	hi
 8004fd8:	2301      	movhi	r3, #1
 8004fda:	2300      	movls	r3, #0
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8004fe2:	f06f 0301 	mvn.w	r3, #1
 8004fe6:	e221      	b.n	800542c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3304      	adds	r3, #4
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7fd fed1 	bl	8002d94 <_ZN13STM32Hardware4readEv>
 8004ff2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f2c0 81fa 	blt.w	80053f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005002:	f8d3 2754 	ldr.w	r2, [r3, #1876]	; 0x754
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4413      	add	r3, r2
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005010:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800501a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800501e:	2b07      	cmp	r3, #7
 8005020:	d12b      	bne.n	800507a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005028:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 8005034:	f8c1 2750 	str.w	r2, [r1, #1872]	; 0x750
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	b2d1      	uxtb	r1, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	4413      	add	r3, r2
 8005040:	460a      	mov	r2, r1
 8005042:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800504c:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005050:	3b01      	subs	r3, #1
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005058:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005062:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1a4      	bne.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005070:	461a      	mov	r2, r3
 8005072:	2308      	movs	r3, #8
 8005074:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005078:	e79c      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005080:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005084:	2b00      	cmp	r3, #0
 8005086:	d130      	bne.n	80050ea <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2bff      	cmp	r3, #255	; 0xff
 800508c:	d112      	bne.n	80050b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x162>
        {
          mode_++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005094:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005098:	3301      	adds	r3, #1
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80050a0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3314      	adds	r3, #20
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80050ae:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 80050b2:	e77f      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd ff3b 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 80050be:	4602      	mov	r2, r0
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bf8c      	ite	hi
 80050cc:	2301      	movhi	r3, #1
 80050ce:	2300      	movls	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f43f af6e 	beq.w	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
          return SPIN_TIMEOUT;
 80050e4:	f06f 0301 	mvn.w	r3, #1
 80050e8:	e1a0      	b.n	800542c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050f0:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d121      	bne.n	800513c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2bfe      	cmp	r3, #254	; 0xfe
 80050fc:	d10b      	bne.n	8005116 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1c4>
        {
          mode_++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005104:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005108:	3301      	adds	r3, #1
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005110:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005114:	e74e      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800511c:	461a      	mov	r2, r3
 800511e:	2300      	movs	r3, #0
 8005120:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          if (configured_ == false)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800512a:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 800512e:	2b00      	cmp	r3, #0
 8005130:	f47f af40 	bne.w	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa7f 	bl	8005638 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
 800513a:	e73b      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005142:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005146:	2b02      	cmp	r3, #2
 8005148:	d120      	bne.n	800518c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005150:	461a      	mov	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        index_ = 0;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800515e:	461a      	mov	r2, r3
 8005160:	2300      	movs	r3, #0
 8005162:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
        mode_++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800516c:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005170:	3301      	adds	r3, #1
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005178:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte for calculating size checksum */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005182:	461a      	mov	r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 800518a:	e713      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005192:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005196:	2b03      	cmp	r3, #3
 8005198:	d118      	bne.n	80051cc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051a0:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	4413      	add	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80051b0:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        mode_++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051ba:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051be:	3301      	adds	r3, #1
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80051c6:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80051ca:	e6f3      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051d2:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d11f      	bne.n	800521a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051e0:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80051e4:	425a      	negs	r2, r3
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	bf58      	it	pl
 80051ec:	4253      	negpl	r3, r2
 80051ee:	2bff      	cmp	r3, #255	; 0xff
 80051f0:	d10b      	bne.n	800520a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2b8>
          mode_++;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051f8:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051fc:	3301      	adds	r3, #1
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005204:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005208:	e6d4      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005210:	461a      	mov	r2, r3
 8005212:	2300      	movs	r3, #0
 8005214:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005218:	e6cc      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005220:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005224:	2b05      	cmp	r3, #5
 8005226:	d119      	bne.n	800525c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800522e:	461a      	mov	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800523c:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005240:	3301      	adds	r3, #1
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005248:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte included in checksum */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005252:	461a      	mov	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 800525a:	e6ab      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005262:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005266:	2b06      	cmp	r3, #6
 8005268:	d123      	bne.n	80052b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005270:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	4413      	add	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005280:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_ = MODE_MESSAGE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800528a:	461a      	mov	r2, r3
 800528c:	2307      	movs	r3, #7
 800528e:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if (bytes_ == 0)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005298:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 800529c:	2b00      	cmp	r3, #0
 800529e:	f47f ae89 	bne.w	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052a8:	461a      	mov	r2, r3
 80052aa:	2308      	movs	r3, #8
 80052ac:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80052b0:	e680      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052b8:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052bc:	2b08      	cmp	r3, #8
 80052be:	f47f ae79 	bne.w	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052c8:	461a      	mov	r2, r3
 80052ca:	2300      	movs	r3, #0
 80052cc:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if ((checksum_ % 256) == 255)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052d6:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80052da:	425a      	negs	r2, r3
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	bf58      	it	pl
 80052e2:	4253      	negpl	r3, r2
 80052e4:	2bff      	cmp	r3, #255	; 0xff
 80052e6:	f47f ae65 	bne.w	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052f0:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d116      	bne.n	8005326 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f99d 	bl	8005638 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f9b8 	bl	8005674 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800530a:	461a      	mov	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
            last_sync_receive_time = c_time;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005318:	461a      	mov	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
            return SPIN_ERR;
 8005320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005324:	e082      	b.n	800542c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800532c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005330:	2b0a      	cmp	r3, #10
 8005332:	d107      	bne.n	8005344 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800533a:	4619      	mov	r1, r3
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa83 	bl	8005848 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>
 8005342:	e637      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800534a:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 800534e:	2b06      	cmp	r3, #6
 8005350:	d111      	bne.n	8005376 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	f242 736c 	movw	r3, #10092	; 0x276c
 8005358:	4413      	add	r3, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005360:	4611      	mov	r1, r2
 8005362:	4618      	mov	r0, r3
 8005364:	f7fd fa59 	bl	800281a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8005374:	e61e      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800537c:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005380:	2b0b      	cmp	r3, #11
 8005382:	d106      	bne.n	8005392 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x440>
          {
            configured_ = false;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8005390:	e610      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005398:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 800539c:	3b64      	subs	r3, #100	; 0x64
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f43f ae02 	beq.w	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053b6:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80053ba:	3b64      	subs	r3, #100	; 0x64
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	6858      	ldr	r0, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ce:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80053d2:	3b64      	subs	r3, #100	; 0x64
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80053ea:	4611      	mov	r1, r2
 80053ec:	4798      	blx	r3
    while (true)
 80053ee:	e5e1      	b.n	8004fb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 80053f0:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053f8:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d014      	beq.n	800542a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005406:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005412:	4293      	cmp	r3, r2
 8005414:	d909      	bls.n	800542a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f90e 	bl	8005638 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
    }

    return SPIN_OK;
 800542a:	2300      	movs	r3, #0
  }
 800542c:	4618      	mov	r0, r3
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	4a04      	ldr	r2, [pc, #16]	; (8005450 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	08017354 	.word	0x08017354

08005454 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff ffe5 	bl	8005434 <_ZN3ros11Subscriber_C1Ev>
 800546a:	4a0b      	ldr	r2, [pc, #44]	; (8005498 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	330c      	adds	r3, #12
 8005474:	4618      	mov	r0, r3
 8005476:	f7fe f927 	bl	80036c8 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  };
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4618      	mov	r0, r3
 8005490:	3710      	adds	r7, #16
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	080172b0 	.word	0x080172b0

0800549c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff ffc1 	bl	8005434 <_ZN3ros11Subscriber_C1Ev>
 80054b2:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	330c      	adds	r3, #12
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fd ffc9 	bl	8003454 <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	609a      	str	r2, [r3, #8]
  };
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	08017298 	.word	0x08017298

080054e4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ff9d 	bl	8005434 <_ZN3ros11Subscriber_C1Ev>
 80054fa:	4a0b      	ldr	r2, [pc, #44]	; (8005528 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	601a      	str	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	330c      	adds	r3, #12
 8005504:	4618      	mov	r0, r3
 8005506:	f7fe f97b 	bl	8003800 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	609a      	str	r2, [r3, #8]
  };
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	08017280 	.word	0x08017280

0800552c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	3304      	adds	r3, #4
 8005538:	4618      	mov	r0, r3
 800553a:	f7fd fc0f 	bl	8002d5c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005544:	461a      	mov	r2, r3
 8005546:	2300      	movs	r3, #0
 8005548:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
    bytes_ = 0;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005552:	461a      	mov	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
    index_ = 0;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005560:	461a      	mov	r2, r3
 8005562:	2300      	movs	r3, #0
 8005564:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
    topic_ = 0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800556e:	461a      	mov	r2, r3
 8005570:	2300      	movs	r3, #0
 8005572:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
  };
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e01a      	b.n	80055c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10e      	bne.n	80055be <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	605a      	str	r2, [r3, #4]
        return true;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e006      	b.n	80055cc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3301      	adds	r3, #1
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b63      	cmp	r3, #99	; 0x63
 80055c8:	dde1      	ble.n	800558e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 80055ca:	2300      	movs	r3, #0
  }
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
 80055e6:	e01d      	b.n	8005624 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d111      	bne.n	800561e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	4413      	add	r3, r2
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	60da      	str	r2, [r3, #12]
        return true;
 800561a:	2301      	movs	r3, #1
 800561c:	e006      	b.n	800562c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3301      	adds	r3, #1
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b63      	cmp	r3, #99	; 0x63
 8005628:	ddde      	ble.n	80055e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 800562a:	2300      	movs	r3, #0
  }
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	4618      	mov	r0, r3
 8005646:	f7fc fc45 	bl	8001ed4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f107 020c 	add.w	r2, r7, #12
 8005654:	210a      	movs	r1, #10
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
    rt_time = hardware_.time();
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3304      	adds	r3, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f7fd fc68 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 8005664:	4602      	mov	r2, r0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800566c:	bf00      	nop
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b08b      	sub	sp, #44	; 0x2c
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800567c:	f107 030c 	add.w	r3, r7, #12
 8005680:	4618      	mov	r0, r3
 8005682:	f7fc fd17 	bl	80020b4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
 800568a:	e062      	b.n	8005752 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d056      	beq.n	800574c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	3308      	adds	r3, #8
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4608      	mov	r0, r1
 80056ec:	4798      	blx	r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	6859      	ldr	r1, [r3, #4]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4608      	mov	r0, r1
 800571a:	4798      	blx	r3
 800571c:	4603      	mov	r3, r0
 800571e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005724:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681c      	ldr	r4, [r3, #0]
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005730:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f7fd fa25 	bl	8002b8a <_ZN3ros9Publisher15getEndpointTypeEv>
 8005740:	4601      	mov	r1, r0
 8005742:	f107 030c 	add.w	r3, r7, #12
 8005746:	461a      	mov	r2, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	3301      	adds	r3, #1
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	2b63      	cmp	r3, #99	; 0x63
 8005756:	dd99      	ble.n	800568c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005758:	2300      	movs	r3, #0
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
 800575c:	e067      	b.n	800582e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d05b      	beq.n	8005828 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005774:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	b29b      	uxth	r3, r3
 8005782:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005788:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	6859      	ldr	r1, [r3, #4]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4608      	mov	r0, r1
 80057ba:	4798      	blx	r3
 80057bc:	4603      	mov	r3, r0
 80057be:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4413      	add	r3, r2
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4608      	mov	r0, r1
 80057e4:	4798      	blx	r3
 80057e6:	4603      	mov	r3, r0
 80057e8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80057ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ee:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681c      	ldr	r4, [r3, #0]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fa:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	6859      	ldr	r1, [r3, #4]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3304      	adds	r3, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4608      	mov	r0, r1
 800581a:	4798      	blx	r3
 800581c:	4601      	mov	r1, r0
 800581e:	f107 030c 	add.w	r3, r7, #12
 8005822:	461a      	mov	r2, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	3301      	adds	r3, #1
 800582c:	627b      	str	r3, [r7, #36]	; 0x24
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	2b63      	cmp	r3, #99	; 0x63
 8005832:	dd94      	ble.n	800575e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
  }
 8005840:	bf00      	nop
 8005842:	372c      	adds	r7, #44	; 0x2c
 8005844:	46bd      	mov	sp, r7
 8005846:	bd90      	pop	{r4, r7, pc}

08005848 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4618      	mov	r0, r3
 8005858:	f7fc fb3c 	bl	8001ed4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7fd fb67 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 8005866:	4602      	mov	r2, r0
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	6839      	ldr	r1, [r7, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fc fb9b 	bl	8001fb4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4916      	ldr	r1, [pc, #88]	; (80058dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005884:	fba1 1303 	umull	r1, r3, r1, r3
 8005888:	099b      	lsrs	r3, r3, #6
 800588a:	4413      	add	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800588e:	6939      	ldr	r1, [r7, #16]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005894:	fba3 0302 	umull	r0, r3, r3, r2
 8005898:	099b      	lsrs	r3, r3, #6
 800589a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800589e:	fb00 f303 	mul.w	r3, r0, r3
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x98>)
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	440b      	add	r3, r1
 80058ac:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80058ae:	f107 0308 	add.w	r3, r7, #8
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f8c0 	bl	8005a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3304      	adds	r3, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fd fb37 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 80058c6:	4602      	mov	r2, r0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058ce:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  }
 80058d2:	bf00      	nop
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	10624dd3 	.word	0x10624dd3
 80058e0:	000f4240 	.word	0x000f4240

080058e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b63      	cmp	r3, #99	; 0x63
 80058f4:	dd0b      	ble.n	800590e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058fc:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005900:	f083 0301 	eor.w	r3, r3, #1
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800590a:	2300      	movs	r3, #0
 800590c:	e090      	b.n	8005a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	f241 4324 	movw	r3, #5156	; 0x1424
 800591a:	440b      	add	r3, r1
 800591c:	3307      	adds	r3, #7
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	4790      	blx	r2
 8005924:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800592c:	22ff      	movs	r2, #255	; 0xff
 800592e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	22fe      	movs	r2, #254	; 0xfe
 800593a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	b2da      	uxtb	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005948:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	b29b      	uxth	r3, r3
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	b29b      	uxth	r3, r3
 8005954:	b2da      	uxtb	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595c:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005966:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005970:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8005974:	4413      	add	r3, r2
 8005976:	b2db      	uxtb	r3, r3
 8005978:	43db      	mvns	r3, r3
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005982:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005990:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	b21b      	sxth	r3, r3
 8005998:	121b      	asrs	r3, r3, #8
 800599a:	b21b      	sxth	r3, r3
 800599c:	b2da      	uxtb	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059a4:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80059ac:	2305      	movs	r3, #5
 80059ae:	61bb      	str	r3, [r7, #24]
 80059b0:	e00d      	b.n	80059ce <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	441a      	add	r2, r3
 80059b8:	f241 4324 	movw	r3, #5156	; 0x1424
 80059bc:	4413      	add	r3, r2
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	4413      	add	r3, r2
 80059c6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	3301      	adds	r3, #1
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	3306      	adds	r3, #6
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	ddec      	ble.n	80059b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	3307      	adds	r3, #7
 80059dc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	425a      	negs	r2, r3
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	bf58      	it	pl
 80059e8:	4253      	negpl	r3, r2
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	1c59      	adds	r1, r3, #1
 80059f0:	6179      	str	r1, [r7, #20]
 80059f2:	43d2      	mvns	r2, r2
 80059f4:	b2d1      	uxtb	r1, r2
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	441a      	add	r2, r3
 80059fa:	f241 4324 	movw	r3, #5156	; 0x1424
 80059fe:	4413      	add	r3, r2
 8005a00:	460a      	mov	r2, r1
 8005a02:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	dc0b      	bgt.n	8005a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	1d18      	adds	r0, r3, #4
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	f241 4324 	movw	r3, #5156	; 0x1424
 8005a16:	4413      	add	r3, r2
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	f7fd fa44 	bl	8002ea8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	e005      	b.n	8005a30 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005a24:	4904      	ldr	r1, [pc, #16]	; (8005a38 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 f848 	bl	8005abc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	080171a0 	.word	0x080171a0

08005a3c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fd fa72 	bl	8002f34 <_ZN13STM32Hardware4timeEv>
 8005a50:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	4915      	ldr	r1, [pc, #84]	; (8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005a5a:	fba1 1303 	umull	r1, r3, r1, r3
 8005a5e:	099b      	lsrs	r3, r3, #6
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	1e5a      	subs	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	6859      	ldr	r1, [r3, #4]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005a72:	fba3 0302 	umull	r0, r3, r3, r2
 8005a76:	099b      	lsrs	r3, r3, #6
 8005a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a7c:	fb00 f303 	mul.w	r3, r0, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8005a84:	fb02 f303 	mul.w	r3, r2, r3
 8005a88:	1aca      	subs	r2, r1, r3
 8005a8a:	4b0b      	ldr	r3, [pc, #44]	; (8005ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8005a8c:	4413      	add	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	f001 fa36 	bl	8006f14 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	10624dd3 	.word	0x10624dd3
 8005ab4:	000f4240 	.word	0x000f4240
 8005ab8:	3b9aca00 	.word	0x3b9aca00

08005abc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005ac6:	683a      	ldr	r2, [r7, #0]
 8005ac8:	2103      	movs	r1, #3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f804 	bl	8005ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>
  }
 8005ad0:	bf00      	nop
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005ae6:	f107 0314 	add.w	r3, r7, #20
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fc fca6 	bl	800243c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005af0:	7afb      	ldrb	r3, [r7, #11]
 8005af2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f107 0214 	add.w	r2, r7, #20
 8005b02:	2107      	movs	r1, #7
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	4798      	blx	r3
  }
 8005b08:	bf00      	nop
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <_Z41__static_initialization_and_destruction_0ii>:
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d138      	bne.n	8005b92 <_Z41__static_initialization_and_destruction_0ii+0x82>
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d133      	bne.n	8005b92 <_Z41__static_initialization_and_destruction_0ii+0x82>
ros::NodeHandle nh;
 8005b2a:	481c      	ldr	r0, [pc, #112]	; (8005b9c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8005b2c:	f7fd fefa 	bl	8003924 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>
std_msgs::Float32MultiArray sensor_msg;
 8005b30:	481b      	ldr	r0, [pc, #108]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005b32:	f7fd fc8f 	bl	8003454 <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher ros_pub("stm32_sensor", &sensor_msg);
 8005b36:	2300      	movs	r3, #0
 8005b38:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005b3a:	491a      	ldr	r1, [pc, #104]	; (8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005b3c:	481a      	ldr	r0, [pc, #104]	; (8005ba8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005b3e:	f7fc fff9 	bl	8002b34 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
CJY901 jy901(&huart8);
 8005b42:	491a      	ldr	r1, [pc, #104]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005b44:	481a      	ldr	r0, [pc, #104]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005b46:	f7fa fdb9 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4a19      	ldr	r2, [pc, #100]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8005b4e:	491a      	ldr	r1, [pc, #104]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8005b50:	481a      	ldr	r0, [pc, #104]	; (8005bbc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8005b52:	f7ff fc7f 	bl	8005454 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 8005b56:	2301      	movs	r3, #1
 8005b58:	4a19      	ldr	r2, [pc, #100]	; (8005bc0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8005b5a:	491a      	ldr	r1, [pc, #104]	; (8005bc4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8005b5c:	481a      	ldr	r0, [pc, #104]	; (8005bc8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005b5e:	f7ff fc79 	bl	8005454 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 8005b62:	2301      	movs	r3, #1
 8005b64:	4a19      	ldr	r2, [pc, #100]	; (8005bcc <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005b66:	491a      	ldr	r1, [pc, #104]	; (8005bd0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005b68:	481a      	ldr	r0, [pc, #104]	; (8005bd4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005b6a:	f7ff fc73 	bl	8005454 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005b72:	491a      	ldr	r1, [pc, #104]	; (8005bdc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005b74:	481a      	ldr	r0, [pc, #104]	; (8005be0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005b76:	f7ff fc91 	bl	800549c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	4a19      	ldr	r2, [pc, #100]	; (8005be4 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8005b7e:	491a      	ldr	r1, [pc, #104]	; (8005be8 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8005b80:	481a      	ldr	r0, [pc, #104]	; (8005bec <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8005b82:	f7ff fcaf 	bl	80054e4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );
 8005b86:	2301      	movs	r3, #1
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8005b8a:	491a      	ldr	r1, [pc, #104]	; (8005bf4 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8005b8c:	481a      	ldr	r0, [pc, #104]	; (8005bf8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8005b8e:	f7ff fca9 	bl	80054e4 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	24001b24 	.word	0x24001b24
 8005ba0:	240042b8 	.word	0x240042b8
 8005ba4:	080171dc 	.word	0x080171dc
 8005ba8:	240042e8 	.word	0x240042e8
 8005bac:	240015f4 	.word	0x240015f4
 8005bb0:	2400445c 	.word	0x2400445c
 8005bb4:	08004681 	.word	0x08004681
 8005bb8:	080171ec 	.word	0x080171ec
 8005bbc:	240044e4 	.word	0x240044e4
 8005bc0:	080046c5 	.word	0x080046c5
 8005bc4:	080171fc 	.word	0x080171fc
 8005bc8:	24004500 	.word	0x24004500
 8005bcc:	08004749 	.word	0x08004749
 8005bd0:	08017210 	.word	0x08017210
 8005bd4:	2400451c 	.word	0x2400451c
 8005bd8:	080047c9 	.word	0x080047c9
 8005bdc:	08017224 	.word	0x08017224
 8005be0:	24004538 	.word	0x24004538
 8005be4:	080048d9 	.word	0x080048d9
 8005be8:	08017234 	.word	0x08017234
 8005bec:	2400457c 	.word	0x2400457c
 8005bf0:	080048fd 	.word	0x080048fd
 8005bf4:	08017248 	.word	0x08017248
 8005bf8:	24004598 	.word	0x24004598

08005bfc <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	330c      	adds	r3, #12
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fd fe26 	bl	800385e <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	320c      	adds	r2, #12
 8005c1a:	4610      	mov	r0, r2
 8005c1c:	4798      	blx	r3
  }
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	699b      	ldr	r3, [r3, #24]
  }
 8005c32:	4618      	mov	r0, r3
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b082      	sub	sp, #8
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fd fe26 	bl	800389c <_ZN8std_msgs4Bool7getTypeEv>
 8005c50:	4603      	mov	r3, r0
  }
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	330c      	adds	r3, #12
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fd fe26 	bl	80038b8 <_ZN8std_msgs4Bool6getMD5Ev>
 8005c6c:	4603      	mov	r3, r0
  }
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	330c      	adds	r3, #12
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd fc76 	bl	8003578 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	320c      	adds	r2, #12
 8005c94:	4610      	mov	r0, r2
 8005c96:	4798      	blx	r3
  }
 8005c98:	bf00      	nop
 8005c9a:	3708      	adds	r7, #8
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8005cac:	4618      	mov	r0, r3
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fd fce3 	bl	8003690 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8005cca:	4603      	mov	r3, r0
  }
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fd fce3 	bl	80036ac <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8005ce6:	4603      	mov	r3, r0
  }
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	330c      	adds	r3, #12
 8005cfe:	6839      	ldr	r1, [r7, #0]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd fd29 	bl	8003758 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	320c      	adds	r2, #12
 8005d0e:	4610      	mov	r0, r2
 8005d10:	4798      	blx	r3
  }
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
  }
 8005d26:	4618      	mov	r0, r3
 8005d28:	370c      	adds	r7, #12
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr

08005d32 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fd42 	bl	80037c8 <_ZN8std_msgs7Float327getTypeEv>
 8005d44:	4603      	mov	r3, r0
  }
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b082      	sub	sp, #8
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fd fd42 	bl	80037e4 <_ZN8std_msgs7Float326getMD5Ev>
 8005d60:	4603      	mov	r3, r0
  }
 8005d62:	4618      	mov	r0, r3
 8005d64:	3708      	adds	r7, #8
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
    return configured_;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d78:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
  };
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <_GLOBAL__sub_I_nh>:
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005d90:	2001      	movs	r0, #1
 8005d92:	f7ff febd 	bl	8005b10 <_Z41__static_initialization_and_destruction_0ii>
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <HAL_MspInit+0x30>)
 8005da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005da4:	4a08      	ldr	r2, [pc, #32]	; (8005dc8 <HAL_MspInit+0x30>)
 8005da6:	f043 0302 	orr.w	r3, r3, #2
 8005daa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dae:	4b06      	ldr	r3, [pc, #24]	; (8005dc8 <HAL_MspInit+0x30>)
 8005db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	607b      	str	r3, [r7, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr
 8005dc8:	58024400 	.word	0x58024400

08005dcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0bc      	sub	sp, #240	; 0xf0
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005dd8:	2200      	movs	r2, #0
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	605a      	str	r2, [r3, #4]
 8005dde:	609a      	str	r2, [r3, #8]
 8005de0:	60da      	str	r2, [r3, #12]
 8005de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005de4:	f107 0318 	add.w	r3, r7, #24
 8005de8:	22c0      	movs	r2, #192	; 0xc0
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f00f fad9 	bl	80153a4 <memset>
  if(hadc->Instance==ADC1)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a67      	ldr	r2, [pc, #412]	; (8005f94 <HAL_ADC_MspInit+0x1c8>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	f040 80c6 	bne.w	8005f8a <HAL_ADC_MspInit+0x1be>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005dfe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005e02:	f04f 0300 	mov.w	r3, #0
 8005e06:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 8005e0a:	230a      	movs	r3, #10
 8005e0c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 128;
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005e12:	2302      	movs	r3, #2
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8005e16:	2302      	movs	r3, #2
 8005e18:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 8;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8005e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e22:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005e24:	2300      	movs	r3, #0
 8005e26:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e34:	f107 0318 	add.w	r3, r7, #24
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f007 fd27 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8005e44:	f7fc f812 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005e48:	4b53      	ldr	r3, [pc, #332]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e4e:	4a52      	ldr	r2, [pc, #328]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e50:	f043 0320 	orr.w	r3, r3, #32
 8005e54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005e58:	4b4f      	ldr	r3, [pc, #316]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e66:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e6c:	4a4a      	ldr	r2, [pc, #296]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e6e:	f043 0304 	orr.w	r3, r3, #4
 8005e72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e76:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	613b      	str	r3, [r7, #16]
 8005e82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e84:	4b44      	ldr	r3, [pc, #272]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e8a:	4a43      	ldr	r2, [pc, #268]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e8c:	f043 0301 	orr.w	r3, r3, #1
 8005e90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e94:	4b40      	ldr	r3, [pc, #256]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ea2:	4b3d      	ldr	r3, [pc, #244]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ea8:	4a3b      	ldr	r2, [pc, #236]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005eaa:	f043 0302 	orr.w	r3, r3, #2
 8005eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005eb2:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <HAL_ADC_MspInit+0x1cc>)
 8005eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	60bb      	str	r3, [r7, #8]
 8005ebe:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8005ec0:	2333      	movs	r3, #51	; 0x33
 8005ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ed2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4830      	ldr	r0, [pc, #192]	; (8005f9c <HAL_ADC_MspInit+0x1d0>)
 8005eda:	f005 fdff 	bl	800badc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8005ede:	2350      	movs	r3, #80	; 0x50
 8005ee0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ef0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	482a      	ldr	r0, [pc, #168]	; (8005fa0 <HAL_ADC_MspInit+0x1d4>)
 8005ef8:	f005 fdf0 	bl	800badc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8005efc:	2303      	movs	r3, #3
 8005efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f02:	2303      	movs	r3, #3
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005f12:	4619      	mov	r1, r3
 8005f14:	4823      	ldr	r0, [pc, #140]	; (8005fa4 <HAL_ADC_MspInit+0x1d8>)
 8005f16:	f005 fde1 	bl	800badc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8005f1a:	4b23      	ldr	r3, [pc, #140]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f1c:	4a23      	ldr	r2, [pc, #140]	; (8005fac <HAL_ADC_MspInit+0x1e0>)
 8005f1e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005f20:	4b21      	ldr	r3, [pc, #132]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f22:	2209      	movs	r2, #9
 8005f24:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f2c:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005f32:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f38:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f40:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f48:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005f4a:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f50:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f58:	4b13      	ldr	r3, [pc, #76]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005f5e:	4812      	ldr	r0, [pc, #72]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f60:	f002 ff80 	bl	8008e64 <HAL_DMA_Init>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8005f6a:	f7fb ff7f 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a0d      	ldr	r2, [pc, #52]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f72:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f74:	4a0c      	ldr	r2, [pc, #48]	; (8005fa8 <HAL_ADC_MspInit+0x1dc>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	2012      	movs	r0, #18
 8005f80:	f002 ff3b 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005f84:	2012      	movs	r0, #18
 8005f86:	f002 ff52 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005f8a:	bf00      	nop
 8005f8c:	37f0      	adds	r7, #240	; 0xf0
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40022000 	.word	0x40022000
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	58020800 	.word	0x58020800
 8005fa0:	58020000 	.word	0x58020000
 8005fa4:	58020400 	.word	0x58020400
 8005fa8:	2400131c 	.word	0x2400131c
 8005fac:	40020028 	.word	0x40020028

08005fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b0c4      	sub	sp, #272	; 0x110
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fba:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fbe:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fc0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	605a      	str	r2, [r3, #4]
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fd4:	22c0      	movs	r2, #192	; 0xc0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f00f f9e3 	bl	80153a4 <memset>
  if(huart->Instance==LPUART1)
 8005fde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fe2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4aa7      	ldr	r2, [pc, #668]	; (8006288 <HAL_UART_MspInit+0x2d8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	f040 8084 	bne.w	80060fa <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005ff2:	f04f 0204 	mov.w	r2, #4
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006004:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006008:	4618      	mov	r0, r3
 800600a:	f007 fc3f 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8006014:	f7fb ff2a 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006018:	4b9c      	ldr	r3, [pc, #624]	; (800628c <HAL_UART_MspInit+0x2dc>)
 800601a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800601e:	4a9b      	ldr	r2, [pc, #620]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006020:	f043 0308 	orr.w	r3, r3, #8
 8006024:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006028:	4b98      	ldr	r3, [pc, #608]	; (800628c <HAL_UART_MspInit+0x2dc>)
 800602a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
 8006034:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006036:	4b95      	ldr	r3, [pc, #596]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800603c:	4a93      	ldr	r2, [pc, #588]	; (800628c <HAL_UART_MspInit+0x2dc>)
 800603e:	f043 0301 	orr.w	r3, r3, #1
 8006042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006046:	4b91      	ldr	r3, [pc, #580]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	633b      	str	r3, [r7, #48]	; 0x30
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006054:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605c:	2302      	movs	r3, #2
 800605e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006062:	2300      	movs	r3, #0
 8006064:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006068:	2300      	movs	r3, #0
 800606a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 800606e:	2303      	movs	r3, #3
 8006070:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006074:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006078:	4619      	mov	r1, r3
 800607a:	4885      	ldr	r0, [pc, #532]	; (8006290 <HAL_UART_MspInit+0x2e0>)
 800607c:	f005 fd2e 	bl	800badc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8006080:	4b84      	ldr	r3, [pc, #528]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 8006082:	4a85      	ldr	r2, [pc, #532]	; (8006298 <HAL_UART_MspInit+0x2e8>)
 8006084:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8006086:	4b83      	ldr	r3, [pc, #524]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 8006088:	2209      	movs	r2, #9
 800608a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800608c:	4b81      	ldr	r3, [pc, #516]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006092:	4b80      	ldr	r3, [pc, #512]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 8006094:	2200      	movs	r2, #0
 8006096:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006098:	4b7e      	ldr	r3, [pc, #504]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 800609a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800609e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060a0:	4b7c      	ldr	r3, [pc, #496]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060a6:	4b7b      	ldr	r3, [pc, #492]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80060ac:	4b79      	ldr	r3, [pc, #484]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80060b4:	4b77      	ldr	r3, [pc, #476]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80060ba:	4876      	ldr	r0, [pc, #472]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060bc:	f002 fed2 	bl	8008e64 <HAL_DMA_Init>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 80060c6:	f7fb fed1 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80060ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a6f      	ldr	r2, [pc, #444]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80060da:	4a6e      	ldr	r2, [pc, #440]	; (8006294 <HAL_UART_MspInit+0x2e4>)
 80060dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80060e8:	2200      	movs	r2, #0
 80060ea:	2100      	movs	r1, #0
 80060ec:	208e      	movs	r0, #142	; 0x8e
 80060ee:	f002 fe84 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80060f2:	208e      	movs	r0, #142	; 0x8e
 80060f4:	f002 fe9b 	bl	8008e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 80060f8:	e2d4      	b.n	80066a4 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART4)
 80060fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a65      	ldr	r2, [pc, #404]	; (800629c <HAL_UART_MspInit+0x2ec>)
 8006108:	4293      	cmp	r3, r2
 800610a:	f040 80d3 	bne.w	80062b4 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800610e:	f04f 0202 	mov.w	r2, #2
 8006112:	f04f 0300 	mov.w	r3, #0
 8006116:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800611a:	2300      	movs	r3, #0
 800611c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006124:	4618      	mov	r0, r3
 8006126:	f007 fbb1 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8006130:	f7fb fe9c 	bl	8001e6c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8006134:	4b55      	ldr	r3, [pc, #340]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800613a:	4a54      	ldr	r2, [pc, #336]	; (800628c <HAL_UART_MspInit+0x2dc>)
 800613c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006140:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006144:	4b51      	ldr	r3, [pc, #324]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800614a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800614e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006152:	4b4e      	ldr	r3, [pc, #312]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006158:	4a4c      	ldr	r2, [pc, #304]	; (800628c <HAL_UART_MspInit+0x2dc>)
 800615a:	f043 0308 	orr.w	r3, r3, #8
 800615e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006162:	4b4a      	ldr	r3, [pc, #296]	; (800628c <HAL_UART_MspInit+0x2dc>)
 8006164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006168:	f003 0308 	and.w	r3, r3, #8
 800616c:	62bb      	str	r3, [r7, #40]	; 0x28
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006170:	2303      	movs	r3, #3
 8006172:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006176:	2302      	movs	r3, #2
 8006178:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617c:	2300      	movs	r3, #0
 800617e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006182:	2300      	movs	r3, #0
 8006184:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006188:	2308      	movs	r3, #8
 800618a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800618e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006192:	4619      	mov	r1, r3
 8006194:	4842      	ldr	r0, [pc, #264]	; (80062a0 <HAL_UART_MspInit+0x2f0>)
 8006196:	f005 fca1 	bl	800badc <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800619a:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 800619c:	4a42      	ldr	r2, [pc, #264]	; (80062a8 <HAL_UART_MspInit+0x2f8>)
 800619e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80061a0:	4b40      	ldr	r3, [pc, #256]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061a2:	223f      	movs	r2, #63	; 0x3f
 80061a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061a6:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061ac:	4b3d      	ldr	r3, [pc, #244]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061b2:	4b3c      	ldr	r3, [pc, #240]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061b8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061ba:	4b3a      	ldr	r3, [pc, #232]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061bc:	2200      	movs	r2, #0
 80061be:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061c0:	4b38      	ldr	r3, [pc, #224]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80061c6:	4b37      	ldr	r3, [pc, #220]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80061cc:	4b35      	ldr	r3, [pc, #212]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80061d2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061d4:	4b33      	ldr	r3, [pc, #204]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80061da:	4832      	ldr	r0, [pc, #200]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061dc:	f002 fe42 	bl	8008e64 <HAL_DMA_Init>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d001      	beq.n	80061ea <HAL_UART_MspInit+0x23a>
      Error_Handler();
 80061e6:	f7fb fe41 	bl	8001e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80061ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2b      	ldr	r2, [pc, #172]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80061fa:	4a2a      	ldr	r2, [pc, #168]	; (80062a4 <HAL_UART_MspInit+0x2f4>)
 80061fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006200:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006208:	4b28      	ldr	r3, [pc, #160]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 800620a:	4a29      	ldr	r2, [pc, #164]	; (80062b0 <HAL_UART_MspInit+0x300>)
 800620c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006210:	2240      	movs	r2, #64	; 0x40
 8006212:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006214:	4b25      	ldr	r3, [pc, #148]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006216:	2240      	movs	r2, #64	; 0x40
 8006218:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 800621c:	2200      	movs	r2, #0
 800621e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006220:	4b22      	ldr	r3, [pc, #136]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006222:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006226:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 800622a:	2200      	movs	r2, #0
 800622c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800622e:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006230:	2200      	movs	r2, #0
 8006232:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006234:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006236:	2200      	movs	r2, #0
 8006238:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800623a:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 800623c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006240:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006242:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006244:	2200      	movs	r2, #0
 8006246:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006248:	4818      	ldr	r0, [pc, #96]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 800624a:	f002 fe0b 	bl	8008e64 <HAL_DMA_Init>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_MspInit+0x2a8>
      Error_Handler();
 8006254:	f7fb fe0a 	bl	8001e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8006258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800625c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a12      	ldr	r2, [pc, #72]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006264:	67da      	str	r2, [r3, #124]	; 0x7c
 8006266:	4a11      	ldr	r2, [pc, #68]	; (80062ac <HAL_UART_MspInit+0x2fc>)
 8006268:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800626c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006274:	2200      	movs	r2, #0
 8006276:	2100      	movs	r1, #0
 8006278:	2034      	movs	r0, #52	; 0x34
 800627a:	f002 fdbe 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800627e:	2034      	movs	r0, #52	; 0x34
 8006280:	f002 fdd5 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 8006284:	e20e      	b.n	80066a4 <HAL_UART_MspInit+0x6f4>
 8006286:	bf00      	nop
 8006288:	58000c00 	.word	0x58000c00
 800628c:	58024400 	.word	0x58024400
 8006290:	58020000 	.word	0x58020000
 8006294:	24001688 	.word	0x24001688
 8006298:	58025408 	.word	0x58025408
 800629c:	40004c00 	.word	0x40004c00
 80062a0:	58020c00 	.word	0x58020c00
 80062a4:	24001700 	.word	0x24001700
 80062a8:	40020058 	.word	0x40020058
 80062ac:	24001778 	.word	0x24001778
 80062b0:	40020070 	.word	0x40020070
  else if(huart->Instance==UART5)
 80062b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80062b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a9f      	ldr	r2, [pc, #636]	; (8006540 <HAL_UART_MspInit+0x590>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	f040 8087 	bne.w	80063d6 <HAL_UART_MspInit+0x426>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80062c8:	f04f 0202 	mov.w	r2, #2
 80062cc:	f04f 0300 	mov.w	r3, #0
 80062d0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80062da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062de:	4618      	mov	r0, r3
 80062e0:	f007 fad4 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80062ea:	f7fb fdbf 	bl	8001e6c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80062ee:	4b95      	ldr	r3, [pc, #596]	; (8006544 <HAL_UART_MspInit+0x594>)
 80062f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80062f4:	4a93      	ldr	r2, [pc, #588]	; (8006544 <HAL_UART_MspInit+0x594>)
 80062f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80062fe:	4b91      	ldr	r3, [pc, #580]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006300:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006304:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800630c:	4b8d      	ldr	r3, [pc, #564]	; (8006544 <HAL_UART_MspInit+0x594>)
 800630e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006312:	4a8c      	ldr	r2, [pc, #560]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800631c:	4b89      	ldr	r3, [pc, #548]	; (8006544 <HAL_UART_MspInit+0x594>)
 800631e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800632a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800632e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006332:	2302      	movs	r3, #2
 8006334:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800633e:	2300      	movs	r3, #0
 8006340:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8006344:	230e      	movs	r3, #14
 8006346:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800634a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800634e:	4619      	mov	r1, r3
 8006350:	487d      	ldr	r0, [pc, #500]	; (8006548 <HAL_UART_MspInit+0x598>)
 8006352:	f005 fbc3 	bl	800badc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream5;
 8006356:	4b7d      	ldr	r3, [pc, #500]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006358:	4a7d      	ldr	r2, [pc, #500]	; (8006550 <HAL_UART_MspInit+0x5a0>)
 800635a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 800635c:	4b7b      	ldr	r3, [pc, #492]	; (800654c <HAL_UART_MspInit+0x59c>)
 800635e:	2241      	movs	r2, #65	; 0x41
 8006360:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006362:	4b7a      	ldr	r3, [pc, #488]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006364:	2200      	movs	r2, #0
 8006366:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006368:	4b78      	ldr	r3, [pc, #480]	; (800654c <HAL_UART_MspInit+0x59c>)
 800636a:	2200      	movs	r2, #0
 800636c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800636e:	4b77      	ldr	r3, [pc, #476]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006370:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006374:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006376:	4b75      	ldr	r3, [pc, #468]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006378:	2200      	movs	r2, #0
 800637a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800637c:	4b73      	ldr	r3, [pc, #460]	; (800654c <HAL_UART_MspInit+0x59c>)
 800637e:	2200      	movs	r2, #0
 8006380:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8006382:	4b72      	ldr	r3, [pc, #456]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006388:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800638a:	4b70      	ldr	r3, [pc, #448]	; (800654c <HAL_UART_MspInit+0x59c>)
 800638c:	2200      	movs	r2, #0
 800638e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006390:	4b6e      	ldr	r3, [pc, #440]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006392:	2200      	movs	r2, #0
 8006394:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006396:	486d      	ldr	r0, [pc, #436]	; (800654c <HAL_UART_MspInit+0x59c>)
 8006398:	f002 fd64 	bl	8008e64 <HAL_DMA_Init>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_UART_MspInit+0x3f6>
      Error_Handler();
 80063a2:	f7fb fd63 	bl	8001e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80063a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a66      	ldr	r2, [pc, #408]	; (800654c <HAL_UART_MspInit+0x59c>)
 80063b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80063b6:	4a65      	ldr	r2, [pc, #404]	; (800654c <HAL_UART_MspInit+0x59c>)
 80063b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80063c4:	2200      	movs	r2, #0
 80063c6:	2100      	movs	r1, #0
 80063c8:	2035      	movs	r0, #53	; 0x35
 80063ca:	f002 fd16 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80063ce:	2035      	movs	r0, #53	; 0x35
 80063d0:	f002 fd2d 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 80063d4:	e166      	b.n	80066a4 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART7)
 80063d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a5c      	ldr	r2, [pc, #368]	; (8006554 <HAL_UART_MspInit+0x5a4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	f040 80bf 	bne.w	8006568 <HAL_UART_MspInit+0x5b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80063ea:	f04f 0202 	mov.w	r2, #2
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80063f6:	2300      	movs	r3, #0
 80063f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006400:	4618      	mov	r0, r3
 8006402:	f007 fa43 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <HAL_UART_MspInit+0x460>
      Error_Handler();
 800640c:	f7fb fd2e 	bl	8001e6c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006410:	4b4c      	ldr	r3, [pc, #304]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006412:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006416:	4a4b      	ldr	r2, [pc, #300]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800641c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006420:	4b48      	ldr	r3, [pc, #288]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006422:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006426:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800642e:	4b45      	ldr	r3, [pc, #276]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006434:	4a43      	ldr	r2, [pc, #268]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006436:	f043 0310 	orr.w	r3, r3, #16
 800643a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800643e:	4b41      	ldr	r3, [pc, #260]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800644c:	4b3d      	ldr	r3, [pc, #244]	; (8006544 <HAL_UART_MspInit+0x594>)
 800644e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006452:	4a3c      	ldr	r2, [pc, #240]	; (8006544 <HAL_UART_MspInit+0x594>)
 8006454:	f043 0301 	orr.w	r3, r3, #1
 8006458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800645c:	4b39      	ldr	r3, [pc, #228]	; (8006544 <HAL_UART_MspInit+0x594>)
 800645e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	617b      	str	r3, [r7, #20]
 8006468:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800646a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800646e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006472:	2302      	movs	r3, #2
 8006474:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006478:	2300      	movs	r3, #0
 800647a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006484:	2307      	movs	r3, #7
 8006486:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800648a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800648e:	4619      	mov	r1, r3
 8006490:	4831      	ldr	r0, [pc, #196]	; (8006558 <HAL_UART_MspInit+0x5a8>)
 8006492:	f005 fb23 	bl	800badc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800649a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064a4:	2300      	movs	r3, #0
 80064a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80064b0:	230b      	movs	r3, #11
 80064b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064b6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80064ba:	4619      	mov	r1, r3
 80064bc:	4827      	ldr	r0, [pc, #156]	; (800655c <HAL_UART_MspInit+0x5ac>)
 80064be:	f005 fb0d 	bl	800badc <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 80064c2:	4b27      	ldr	r3, [pc, #156]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064c4:	4a27      	ldr	r2, [pc, #156]	; (8006564 <HAL_UART_MspInit+0x5b4>)
 80064c6:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80064c8:	4b25      	ldr	r3, [pc, #148]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064ca:	224f      	movs	r2, #79	; 0x4f
 80064cc:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064ce:	4b24      	ldr	r3, [pc, #144]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064d4:	4b22      	ldr	r3, [pc, #136]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064da:	4b21      	ldr	r3, [pc, #132]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064e0:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064e2:	4b1f      	ldr	r3, [pc, #124]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064e8:	4b1d      	ldr	r3, [pc, #116]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80064ee:	4b1c      	ldr	r3, [pc, #112]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064f4:	4b1a      	ldr	r3, [pc, #104]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064fa:	4b19      	ldr	r3, [pc, #100]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8006500:	4817      	ldr	r0, [pc, #92]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 8006502:	f002 fcaf 	bl	8008e64 <HAL_DMA_Init>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d001      	beq.n	8006510 <HAL_UART_MspInit+0x560>
      Error_Handler();
 800650c:	f7fb fcae 	bl	8001e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8006510:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006514:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a11      	ldr	r2, [pc, #68]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006520:	4a0f      	ldr	r2, [pc, #60]	; (8006560 <HAL_UART_MspInit+0x5b0>)
 8006522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006526:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	2052      	movs	r0, #82	; 0x52
 8006534:	f002 fc61 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006538:	2052      	movs	r0, #82	; 0x52
 800653a:	f002 fc78 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 800653e:	e0b1      	b.n	80066a4 <HAL_UART_MspInit+0x6f4>
 8006540:	40005000 	.word	0x40005000
 8006544:	58024400 	.word	0x58024400
 8006548:	58020400 	.word	0x58020400
 800654c:	240017f0 	.word	0x240017f0
 8006550:	40020088 	.word	0x40020088
 8006554:	40007800 	.word	0x40007800
 8006558:	58021000 	.word	0x58021000
 800655c:	58020000 	.word	0x58020000
 8006560:	24001868 	.word	0x24001868
 8006564:	40020040 	.word	0x40020040
  else if(huart->Instance==UART8)
 8006568:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800656c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a4e      	ldr	r2, [pc, #312]	; (80066b0 <HAL_UART_MspInit+0x700>)
 8006576:	4293      	cmp	r3, r2
 8006578:	f040 8094 	bne.w	80066a4 <HAL_UART_MspInit+0x6f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800657c:	f04f 0202 	mov.w	r2, #2
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006588:	2300      	movs	r3, #0
 800658a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800658e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006592:	4618      	mov	r0, r3
 8006594:	f007 f97a 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 800659e:	f7fb fc65 	bl	8001e6c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80065a2:	4b44      	ldr	r3, [pc, #272]	; (80066b4 <HAL_UART_MspInit+0x704>)
 80065a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065a8:	4a42      	ldr	r2, [pc, #264]	; (80066b4 <HAL_UART_MspInit+0x704>)
 80065aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80065b2:	4b40      	ldr	r3, [pc, #256]	; (80066b4 <HAL_UART_MspInit+0x704>)
 80065b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80065bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065c0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80065ce:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80065d0:	4b38      	ldr	r3, [pc, #224]	; (80066b4 <HAL_UART_MspInit+0x704>)
 80065d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065d6:	4a37      	ldr	r2, [pc, #220]	; (80066b4 <HAL_UART_MspInit+0x704>)
 80065d8:	f043 0310 	orr.w	r3, r3, #16
 80065dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065e0:	4b34      	ldr	r3, [pc, #208]	; (80066b4 <HAL_UART_MspInit+0x704>)
 80065e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065e6:	f003 0210 	and.w	r2, r3, #16
 80065ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80065f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065fc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065fe:	2303      	movs	r3, #3
 8006600:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006604:	2302      	movs	r3, #2
 8006606:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660a:	2300      	movs	r3, #0
 800660c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006616:	2308      	movs	r3, #8
 8006618:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800661c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006620:	4619      	mov	r1, r3
 8006622:	4825      	ldr	r0, [pc, #148]	; (80066b8 <HAL_UART_MspInit+0x708>)
 8006624:	f005 fa5a 	bl	800badc <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8006628:	4b24      	ldr	r3, [pc, #144]	; (80066bc <HAL_UART_MspInit+0x70c>)
 800662a:	4a25      	ldr	r2, [pc, #148]	; (80066c0 <HAL_UART_MspInit+0x710>)
 800662c:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800662e:	4b23      	ldr	r3, [pc, #140]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006630:	2251      	movs	r2, #81	; 0x51
 8006632:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006634:	4b21      	ldr	r3, [pc, #132]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006636:	2200      	movs	r2, #0
 8006638:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800663a:	4b20      	ldr	r3, [pc, #128]	; (80066bc <HAL_UART_MspInit+0x70c>)
 800663c:	2200      	movs	r2, #0
 800663e:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006640:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006642:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006646:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006648:	4b1c      	ldr	r3, [pc, #112]	; (80066bc <HAL_UART_MspInit+0x70c>)
 800664a:	2200      	movs	r2, #0
 800664c:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800664e:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006650:	2200      	movs	r2, #0
 8006652:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8006654:	4b19      	ldr	r3, [pc, #100]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006656:	2200      	movs	r2, #0
 8006658:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 800665a:	4b18      	ldr	r3, [pc, #96]	; (80066bc <HAL_UART_MspInit+0x70c>)
 800665c:	2200      	movs	r2, #0
 800665e:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006660:	4b16      	ldr	r3, [pc, #88]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006662:	2200      	movs	r2, #0
 8006664:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006666:	4815      	ldr	r0, [pc, #84]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006668:	f002 fbfc 	bl	8008e64 <HAL_DMA_Init>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_UART_MspInit+0x6c6>
      Error_Handler();
 8006672:	f7fb fbfb 	bl	8001e6c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8006676:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800667a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0e      	ldr	r2, [pc, #56]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006682:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006686:	4a0d      	ldr	r2, [pc, #52]	; (80066bc <HAL_UART_MspInit+0x70c>)
 8006688:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800668c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8006694:	2200      	movs	r2, #0
 8006696:	2100      	movs	r1, #0
 8006698:	2053      	movs	r0, #83	; 0x53
 800669a:	f002 fbae 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800669e:	2053      	movs	r0, #83	; 0x53
 80066a0:	f002 fbc5 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 80066a4:	bf00      	nop
 80066a6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40007c00 	.word	0x40007c00
 80066b4:	58024400 	.word	0x58024400
 80066b8:	58021000 	.word	0x58021000
 80066bc:	240018e0 	.word	0x240018e0
 80066c0:	40020010 	.word	0x40020010

080066c4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b0bc      	sub	sp, #240	; 0xf0
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80066d0:	2200      	movs	r2, #0
 80066d2:	601a      	str	r2, [r3, #0]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	609a      	str	r2, [r3, #8]
 80066d8:	60da      	str	r2, [r3, #12]
 80066da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80066dc:	f107 0318 	add.w	r3, r7, #24
 80066e0:	22c0      	movs	r2, #192	; 0xc0
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f00e fe5d 	bl	80153a4 <memset>
  if(hqspi->Instance==QUADSPI)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a55      	ldr	r2, [pc, #340]	; (8006844 <HAL_QSPI_MspInit+0x180>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	f040 80a3 	bne.w	800683c <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80066f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8006702:	2300      	movs	r3, #0
 8006704:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006706:	f107 0318 	add.w	r3, r7, #24
 800670a:	4618      	mov	r0, r3
 800670c:	f007 f8be 	bl	800d88c <HAL_RCCEx_PeriphCLKConfig>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8006716:	f7fb fba9 	bl	8001e6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800671a:	4b4b      	ldr	r3, [pc, #300]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 800671c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006720:	4a49      	ldr	r2, [pc, #292]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 8006722:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006726:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800672a:	4b47      	ldr	r3, [pc, #284]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 800672c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8006730:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006738:	4b43      	ldr	r3, [pc, #268]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 800673a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800673e:	4a42      	ldr	r2, [pc, #264]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 8006740:	f043 0310 	orr.w	r3, r3, #16
 8006744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006748:	4b3f      	ldr	r3, [pc, #252]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 800674a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	613b      	str	r3, [r7, #16]
 8006754:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006756:	4b3c      	ldr	r3, [pc, #240]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 8006758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800675c:	4a3a      	ldr	r2, [pc, #232]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006766:	4b38      	ldr	r3, [pc, #224]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 8006768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006774:	4b34      	ldr	r3, [pc, #208]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 8006776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800677a:	4a33      	ldr	r2, [pc, #204]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 800677c:	f043 0308 	orr.w	r3, r3, #8
 8006780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006784:	4b30      	ldr	r3, [pc, #192]	; (8006848 <HAL_QSPI_MspInit+0x184>)
 8006786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	60bb      	str	r3, [r7, #8]
 8006790:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006792:	2304      	movs	r3, #4
 8006794:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006798:	2302      	movs	r3, #2
 800679a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067a4:	2300      	movs	r3, #0
 80067a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80067aa:	2309      	movs	r3, #9
 80067ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067b0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80067b4:	4619      	mov	r1, r3
 80067b6:	4825      	ldr	r0, [pc, #148]	; (800684c <HAL_QSPI_MspInit+0x188>)
 80067b8:	f005 f990 	bl	800badc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067bc:	2304      	movs	r3, #4
 80067be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c2:	2302      	movs	r3, #2
 80067c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067ce:	2300      	movs	r3, #0
 80067d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80067d4:	2309      	movs	r3, #9
 80067d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80067de:	4619      	mov	r1, r3
 80067e0:	481b      	ldr	r0, [pc, #108]	; (8006850 <HAL_QSPI_MspInit+0x18c>)
 80067e2:	f005 f97b 	bl	800badc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80067e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80067ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067ee:	2302      	movs	r3, #2
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067f4:	2300      	movs	r3, #0
 80067f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006800:	2309      	movs	r3, #9
 8006802:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006806:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800680a:	4619      	mov	r1, r3
 800680c:	4811      	ldr	r0, [pc, #68]	; (8006854 <HAL_QSPI_MspInit+0x190>)
 800680e:	f005 f965 	bl	800badc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006812:	2340      	movs	r3, #64	; 0x40
 8006814:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006818:	2302      	movs	r3, #2
 800681a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006824:	2300      	movs	r3, #0
 8006826:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800682a:	230a      	movs	r3, #10
 800682c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006830:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006834:	4619      	mov	r1, r3
 8006836:	4806      	ldr	r0, [pc, #24]	; (8006850 <HAL_QSPI_MspInit+0x18c>)
 8006838:	f005 f950 	bl	800badc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800683c:	bf00      	nop
 800683e:	37f0      	adds	r7, #240	; 0xf0
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	52005000 	.word	0x52005000
 8006848:	58024400 	.word	0x58024400
 800684c:	58021000 	.word	0x58021000
 8006850:	58020400 	.word	0x58020400
 8006854:	58020c00 	.word	0x58020c00

08006858 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08e      	sub	sp, #56	; 0x38
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006878:	d10f      	bne.n	800689a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800687a:	4b5e      	ldr	r3, [pc, #376]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 800687c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006880:	4a5c      	ldr	r2, [pc, #368]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800688a:	4b5a      	ldr	r3, [pc, #360]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 800688c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	623b      	str	r3, [r7, #32]
 8006896:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006898:	e0a8      	b.n	80069ec <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM3)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a56      	ldr	r2, [pc, #344]	; (80069f8 <HAL_TIM_Base_MspInit+0x1a0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d10f      	bne.n	80068c4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80068a4:	4b53      	ldr	r3, [pc, #332]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068aa:	4a52      	ldr	r2, [pc, #328]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80068b4:	4b4f      	ldr	r3, [pc, #316]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	69fb      	ldr	r3, [r7, #28]
}
 80068c2:	e093      	b.n	80069ec <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM5)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a4c      	ldr	r2, [pc, #304]	; (80069fc <HAL_TIM_Base_MspInit+0x1a4>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d136      	bne.n	800693c <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80068ce:	4b49      	ldr	r3, [pc, #292]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068d4:	4a47      	ldr	r2, [pc, #284]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068d6:	f043 0308 	orr.w	r3, r3, #8
 80068da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80068de:	4b45      	ldr	r3, [pc, #276]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068e4:	f003 0308 	and.w	r3, r3, #8
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068ec:	4b41      	ldr	r3, [pc, #260]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068f2:	4a40      	ldr	r2, [pc, #256]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068f4:	f043 0301 	orr.w	r3, r3, #1
 80068f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068fc:	4b3d      	ldr	r3, [pc, #244]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80068fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800690a:	2301      	movs	r3, #1
 800690c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690e:	2302      	movs	r3, #2
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2300      	movs	r3, #0
 8006914:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006916:	2300      	movs	r3, #0
 8006918:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800691a:	2302      	movs	r3, #2
 800691c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800691e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006922:	4619      	mov	r1, r3
 8006924:	4836      	ldr	r0, [pc, #216]	; (8006a00 <HAL_TIM_Base_MspInit+0x1a8>)
 8006926:	f005 f8d9 	bl	800badc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800692a:	2200      	movs	r2, #0
 800692c:	2100      	movs	r1, #0
 800692e:	2032      	movs	r0, #50	; 0x32
 8006930:	f002 fa63 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006934:	2032      	movs	r0, #50	; 0x32
 8006936:	f002 fa7a 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 800693a:	e057      	b.n	80069ec <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM15)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a30      	ldr	r2, [pc, #192]	; (8006a04 <HAL_TIM_Base_MspInit+0x1ac>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d136      	bne.n	80069b4 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006946:	4b2b      	ldr	r3, [pc, #172]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 8006948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800694c:	4a29      	ldr	r2, [pc, #164]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 800694e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006952:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006956:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 8006958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800695c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006964:	4b23      	ldr	r3, [pc, #140]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 8006966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800696a:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 800696c:	f043 0310 	orr.w	r3, r3, #16
 8006970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006974:	4b1f      	ldr	r3, [pc, #124]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 8006976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006982:	2320      	movs	r3, #32
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006986:	2302      	movs	r3, #2
 8006988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698a:	2300      	movs	r3, #0
 800698c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800698e:	2300      	movs	r3, #0
 8006990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006992:	2304      	movs	r3, #4
 8006994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800699a:	4619      	mov	r1, r3
 800699c:	481a      	ldr	r0, [pc, #104]	; (8006a08 <HAL_TIM_Base_MspInit+0x1b0>)
 800699e:	f005 f89d 	bl	800badc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80069a2:	2200      	movs	r2, #0
 80069a4:	2100      	movs	r1, #0
 80069a6:	2074      	movs	r0, #116	; 0x74
 80069a8:	f002 fa27 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80069ac:	2074      	movs	r0, #116	; 0x74
 80069ae:	f002 fa3e 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 80069b2:	e01b      	b.n	80069ec <HAL_TIM_Base_MspInit+0x194>
  else if(htim_base->Instance==TIM16)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <HAL_TIM_Base_MspInit+0x1b4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d116      	bne.n	80069ec <HAL_TIM_Base_MspInit+0x194>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80069be:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80069c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069c4:	4a0b      	ldr	r2, [pc, #44]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80069c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <HAL_TIM_Base_MspInit+0x19c>)
 80069d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80069dc:	2200      	movs	r2, #0
 80069de:	2100      	movs	r1, #0
 80069e0:	2075      	movs	r0, #117	; 0x75
 80069e2:	f002 fa0a 	bl	8008dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80069e6:	2075      	movs	r0, #117	; 0x75
 80069e8:	f002 fa21 	bl	8008e2e <HAL_NVIC_EnableIRQ>
}
 80069ec:	bf00      	nop
 80069ee:	3738      	adds	r7, #56	; 0x38
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	58024400 	.word	0x58024400
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	58020000 	.word	0x58020000
 8006a04:	40014000 	.word	0x40014000
 8006a08:	58021000 	.word	0x58021000
 8006a0c:	40014400 	.word	0x40014400

08006a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08a      	sub	sp, #40	; 0x28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	609a      	str	r2, [r3, #8]
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a30:	d120      	bne.n	8006a74 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a32:	4b24      	ldr	r3, [pc, #144]	; (8006ac4 <HAL_TIM_MspPostInit+0xb4>)
 8006a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a38:	4a22      	ldr	r2, [pc, #136]	; (8006ac4 <HAL_TIM_MspPostInit+0xb4>)
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a42:	4b20      	ldr	r3, [pc, #128]	; (8006ac4 <HAL_TIM_MspPostInit+0xb4>)
 8006a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	613b      	str	r3, [r7, #16]
 8006a4e:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8006a50:	f248 030e 	movw	r3, #32782	; 0x800e
 8006a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a56:	2302      	movs	r3, #2
 8006a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a62:	2301      	movs	r3, #1
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a66:	f107 0314 	add.w	r3, r7, #20
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4816      	ldr	r0, [pc, #88]	; (8006ac8 <HAL_TIM_MspPostInit+0xb8>)
 8006a6e:	f005 f835 	bl	800badc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006a72:	e023      	b.n	8006abc <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a14      	ldr	r2, [pc, #80]	; (8006acc <HAL_TIM_MspPostInit+0xbc>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d11e      	bne.n	8006abc <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a7e:	4b11      	ldr	r3, [pc, #68]	; (8006ac4 <HAL_TIM_MspPostInit+0xb4>)
 8006a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a84:	4a0f      	ldr	r2, [pc, #60]	; (8006ac4 <HAL_TIM_MspPostInit+0xb4>)
 8006a86:	f043 0304 	orr.w	r3, r3, #4
 8006a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ac4 <HAL_TIM_MspPostInit+0xb4>)
 8006a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006a9c:	23c0      	movs	r3, #192	; 0xc0
 8006a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006aac:	2302      	movs	r3, #2
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ab0:	f107 0314 	add.w	r3, r7, #20
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <HAL_TIM_MspPostInit+0xc0>)
 8006ab8:	f005 f810 	bl	800badc <HAL_GPIO_Init>
}
 8006abc:	bf00      	nop
 8006abe:	3728      	adds	r7, #40	; 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	58024400 	.word	0x58024400
 8006ac8:	58020000 	.word	0x58020000
 8006acc:	40000400 	.word	0x40000400
 8006ad0:	58020800 	.word	0x58020800

08006ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006ad8:	e7fe      	b.n	8006ad8 <NMI_Handler+0x4>

08006ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ada:	b480      	push	{r7}
 8006adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ade:	e7fe      	b.n	8006ade <HardFault_Handler+0x4>

08006ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ae4:	e7fe      	b.n	8006ae4 <MemManage_Handler+0x4>

08006ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006aea:	e7fe      	b.n	8006aea <BusFault_Handler+0x4>

08006aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006af0:	e7fe      	b.n	8006af0 <UsageFault_Handler+0x4>

08006af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006af2:	b480      	push	{r7}
 8006af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b12:	bf00      	nop
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b20:	f000 fac0 	bl	80070a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b24:	bf00      	nop
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8006b2c:	4802      	ldr	r0, [pc, #8]	; (8006b38 <DMA1_Stream0_IRQHandler+0x10>)
 8006b2e:	f003 fcc3 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006b32:	bf00      	nop
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	240018e0 	.word	0x240018e0

08006b3c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006b40:	4802      	ldr	r0, [pc, #8]	; (8006b4c <DMA1_Stream1_IRQHandler+0x10>)
 8006b42:	f003 fcb9 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	2400131c 	.word	0x2400131c

08006b50 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006b54:	4802      	ldr	r0, [pc, #8]	; (8006b60 <DMA1_Stream2_IRQHandler+0x10>)
 8006b56:	f003 fcaf 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006b5a:	bf00      	nop
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	24001868 	.word	0x24001868

08006b64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006b68:	4802      	ldr	r0, [pc, #8]	; (8006b74 <DMA1_Stream3_IRQHandler+0x10>)
 8006b6a:	f003 fca5 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006b6e:	bf00      	nop
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	24001700 	.word	0x24001700

08006b78 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006b7c:	4802      	ldr	r0, [pc, #8]	; (8006b88 <DMA1_Stream4_IRQHandler+0x10>)
 8006b7e:	f003 fc9b 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006b82:	bf00      	nop
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	24001778 	.word	0x24001778

08006b8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006b90:	4802      	ldr	r0, [pc, #8]	; (8006b9c <DMA1_Stream5_IRQHandler+0x10>)
 8006b92:	f003 fc91 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	240017f0 	.word	0x240017f0

08006ba0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006ba4:	4802      	ldr	r0, [pc, #8]	; (8006bb0 <ADC_IRQHandler+0x10>)
 8006ba6:	f000 ff3b 	bl	8007a20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006baa:	bf00      	nop
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	240012b8 	.word	0x240012b8

08006bb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PID_MODE_INPUT_Pin);
 8006bb8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006bbc:	f005 f989 	bl	800bed2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006bc0:	bf00      	nop
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006bc8:	4802      	ldr	r0, [pc, #8]	; (8006bd4 <TIM5_IRQHandler+0x10>)
 8006bca:	f00a f853 	bl	8010c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006bce:	bf00      	nop
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	24001a3c 	.word	0x24001a3c

08006bd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006bdc:	4802      	ldr	r0, [pc, #8]	; (8006be8 <UART4_IRQHandler+0x10>)
 8006bde:	f00b fd53 	bl	8012688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006be2:	bf00      	nop
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	24001438 	.word	0x24001438

08006bec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006bf0:	4802      	ldr	r0, [pc, #8]	; (8006bfc <UART5_IRQHandler+0x10>)
 8006bf2:	f00b fd49 	bl	8012688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	240014cc 	.word	0x240014cc

08006c00 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006c04:	4802      	ldr	r0, [pc, #8]	; (8006c10 <UART7_IRQHandler+0x10>)
 8006c06:	f00b fd3f 	bl	8012688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	24001560 	.word	0x24001560

08006c14 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006c18:	4802      	ldr	r0, [pc, #8]	; (8006c24 <UART8_IRQHandler+0x10>)
 8006c1a:	f00b fd35 	bl	8012688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006c1e:	bf00      	nop
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	240015f4 	.word	0x240015f4

08006c28 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006c2c:	4802      	ldr	r0, [pc, #8]	; (8006c38 <TIM15_IRQHandler+0x10>)
 8006c2e:	f00a f821 	bl	8010c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	24001a88 	.word	0x24001a88

08006c3c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006c40:	4802      	ldr	r0, [pc, #8]	; (8006c4c <TIM16_IRQHandler+0x10>)
 8006c42:	f00a f817 	bl	8010c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	24001ad4 	.word	0x24001ad4

08006c50 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006c54:	4802      	ldr	r0, [pc, #8]	; (8006c60 <BDMA_Channel0_IRQHandler+0x10>)
 8006c56:	f003 fc2f 	bl	800a4b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	24001688 	.word	0x24001688

08006c64 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006c68:	4802      	ldr	r0, [pc, #8]	; (8006c74 <LPUART1_IRQHandler+0x10>)
 8006c6a:	f00b fd0d 	bl	8012688 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	240013a4 	.word	0x240013a4

08006c78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	af00      	add	r7, sp, #0
  return 1;
 8006c7c:	2301      	movs	r3, #1
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <_kill>:

int _kill(int pid, int sig)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006c92:	f00e fc2d 	bl	80154f0 <__errno>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2216      	movs	r2, #22
 8006c9a:	601a      	str	r2, [r3, #0]
  return -1;
 8006c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <_exit>:

void _exit (int status)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006cb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f7ff ffe7 	bl	8006c88 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006cba:	e7fe      	b.n	8006cba <_exit+0x12>

08006cbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	e00a      	b.n	8006ce4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006cce:	f3af 8000 	nop.w
 8006cd2:	4601      	mov	r1, r0
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	1c5a      	adds	r2, r3, #1
 8006cd8:	60ba      	str	r2, [r7, #8]
 8006cda:	b2ca      	uxtb	r2, r1
 8006cdc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	dbf0      	blt.n	8006cce <_read+0x12>
  }

  return len;
 8006cec:	687b      	ldr	r3, [r7, #4]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b086      	sub	sp, #24
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	60f8      	str	r0, [r7, #12]
 8006cfe:	60b9      	str	r1, [r7, #8]
 8006d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	e009      	b.n	8006d1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	60ba      	str	r2, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fa f98b 	bl	800102c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	697a      	ldr	r2, [r7, #20]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	dbf1      	blt.n	8006d08 <_write+0x12>
  }
  return len;
 8006d24:	687b      	ldr	r3, [r7, #4]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <_close>:

int _close(int file)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d56:	605a      	str	r2, [r3, #4]
  return 0;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	370c      	adds	r7, #12
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <_isatty>:

int _isatty(int file)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b083      	sub	sp, #12
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006d6e:	2301      	movs	r3, #1
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
	...

08006d98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006da0:	4a14      	ldr	r2, [pc, #80]	; (8006df4 <_sbrk+0x5c>)
 8006da2:	4b15      	ldr	r3, [pc, #84]	; (8006df8 <_sbrk+0x60>)
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006dac:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <_sbrk+0x64>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <_sbrk+0x64>)
 8006db6:	4a12      	ldr	r2, [pc, #72]	; (8006e00 <_sbrk+0x68>)
 8006db8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <_sbrk+0x64>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d207      	bcs.n	8006dd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006dc8:	f00e fb92 	bl	80154f0 <__errno>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	220c      	movs	r2, #12
 8006dd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dd6:	e009      	b.n	8006dec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <_sbrk+0x64>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <_sbrk+0x64>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	4a05      	ldr	r2, [pc, #20]	; (8006dfc <_sbrk+0x64>)
 8006de8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006dea:	68fb      	ldr	r3, [r7, #12]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}
 8006df4:	24080000 	.word	0x24080000
 8006df8:	00000400 	.word	0x00000400
 8006dfc:	240045b8 	.word	0x240045b8
 8006e00:	24004710 	.word	0x24004710

08006e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006e04:	b480      	push	{r7}
 8006e06:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006e08:	4b37      	ldr	r3, [pc, #220]	; (8006ee8 <SystemInit+0xe4>)
 8006e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e0e:	4a36      	ldr	r2, [pc, #216]	; (8006ee8 <SystemInit+0xe4>)
 8006e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e18:	4b34      	ldr	r3, [pc, #208]	; (8006eec <SystemInit+0xe8>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	2b06      	cmp	r3, #6
 8006e22:	d807      	bhi.n	8006e34 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006e24:	4b31      	ldr	r3, [pc, #196]	; (8006eec <SystemInit+0xe8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f023 030f 	bic.w	r3, r3, #15
 8006e2c:	4a2f      	ldr	r2, [pc, #188]	; (8006eec <SystemInit+0xe8>)
 8006e2e:	f043 0307 	orr.w	r3, r3, #7
 8006e32:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006e34:	4b2e      	ldr	r3, [pc, #184]	; (8006ef0 <SystemInit+0xec>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a2d      	ldr	r2, [pc, #180]	; (8006ef0 <SystemInit+0xec>)
 8006e3a:	f043 0301 	orr.w	r3, r3, #1
 8006e3e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006e40:	4b2b      	ldr	r3, [pc, #172]	; (8006ef0 <SystemInit+0xec>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006e46:	4b2a      	ldr	r3, [pc, #168]	; (8006ef0 <SystemInit+0xec>)
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4929      	ldr	r1, [pc, #164]	; (8006ef0 <SystemInit+0xec>)
 8006e4c:	4b29      	ldr	r3, [pc, #164]	; (8006ef4 <SystemInit+0xf0>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006e52:	4b26      	ldr	r3, [pc, #152]	; (8006eec <SystemInit+0xe8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006e5e:	4b23      	ldr	r3, [pc, #140]	; (8006eec <SystemInit+0xe8>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f023 030f 	bic.w	r3, r3, #15
 8006e66:	4a21      	ldr	r2, [pc, #132]	; (8006eec <SystemInit+0xe8>)
 8006e68:	f043 0307 	orr.w	r3, r3, #7
 8006e6c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006e6e:	4b20      	ldr	r3, [pc, #128]	; (8006ef0 <SystemInit+0xec>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006e74:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <SystemInit+0xec>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006e7a:	4b1d      	ldr	r3, [pc, #116]	; (8006ef0 <SystemInit+0xec>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006e80:	4b1b      	ldr	r3, [pc, #108]	; (8006ef0 <SystemInit+0xec>)
 8006e82:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <SystemInit+0xf4>)
 8006e84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006e86:	4b1a      	ldr	r3, [pc, #104]	; (8006ef0 <SystemInit+0xec>)
 8006e88:	4a1c      	ldr	r2, [pc, #112]	; (8006efc <SystemInit+0xf8>)
 8006e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006e8c:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <SystemInit+0xec>)
 8006e8e:	4a1c      	ldr	r2, [pc, #112]	; (8006f00 <SystemInit+0xfc>)
 8006e90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006e92:	4b17      	ldr	r3, [pc, #92]	; (8006ef0 <SystemInit+0xec>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <SystemInit+0xec>)
 8006e9a:	4a19      	ldr	r2, [pc, #100]	; (8006f00 <SystemInit+0xfc>)
 8006e9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006e9e:	4b14      	ldr	r3, [pc, #80]	; (8006ef0 <SystemInit+0xec>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006ea4:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <SystemInit+0xec>)
 8006ea6:	4a16      	ldr	r2, [pc, #88]	; (8006f00 <SystemInit+0xfc>)
 8006ea8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <SystemInit+0xec>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <SystemInit+0xec>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a0e      	ldr	r2, [pc, #56]	; (8006ef0 <SystemInit+0xec>)
 8006eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006ebc:	4b0c      	ldr	r3, [pc, #48]	; (8006ef0 <SystemInit+0xec>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <SystemInit+0x100>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	4b10      	ldr	r3, [pc, #64]	; (8006f08 <SystemInit+0x104>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ece:	d202      	bcs.n	8006ed6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006ed0:	4b0e      	ldr	r3, [pc, #56]	; (8006f0c <SystemInit+0x108>)
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006ed6:	4b0e      	ldr	r3, [pc, #56]	; (8006f10 <SystemInit+0x10c>)
 8006ed8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006edc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006ede:	bf00      	nop
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	e000ed00 	.word	0xe000ed00
 8006eec:	52002000 	.word	0x52002000
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	eaf6ed7f 	.word	0xeaf6ed7f
 8006ef8:	02020200 	.word	0x02020200
 8006efc:	01ff0000 	.word	0x01ff0000
 8006f00:	01010280 	.word	0x01010280
 8006f04:	5c001000 	.word	0x5c001000
 8006f08:	ffff0000 	.word	0xffff0000
 8006f0c:	51008108 	.word	0x51008108
 8006f10:	52004000 	.word	0x52004000

08006f14 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	0a5a      	lsrs	r2, r3, #9
 8006f24:	490f      	ldr	r1, [pc, #60]	; (8006f64 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006f26:	fba1 1202 	umull	r1, r2, r1, r2
 8006f2a:	09d2      	lsrs	r2, r2, #7
 8006f2c:	490e      	ldr	r1, [pc, #56]	; (8006f68 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006f2e:	fb01 f202 	mul.w	r2, r1, r2
 8006f32:	1a9b      	subs	r3, r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	0a5b      	lsrs	r3, r3, #9
 8006f3c:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	09db      	lsrs	r3, r3, #7
 8006f44:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	441a      	add	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	601a      	str	r2, [r3, #0]
}
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	00044b83 	.word	0x00044b83
 8006f68:	3b9aca00 	.word	0x3b9aca00

08006f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f70:	f7ff ff48 	bl	8006e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f74:	480c      	ldr	r0, [pc, #48]	; (8006fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f76:	490d      	ldr	r1, [pc, #52]	; (8006fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f78:	4a0d      	ldr	r2, [pc, #52]	; (8006fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f7c:	e002      	b.n	8006f84 <LoopCopyDataInit>

08006f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f82:	3304      	adds	r3, #4

08006f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f88:	d3f9      	bcc.n	8006f7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f8a:	4a0a      	ldr	r2, [pc, #40]	; (8006fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f8c:	4c0a      	ldr	r4, [pc, #40]	; (8006fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006f90:	e001      	b.n	8006f96 <LoopFillZerobss>

08006f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006f94:	3204      	adds	r2, #4

08006f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006f98:	d3fb      	bcc.n	8006f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006f9a:	f00e faaf 	bl	80154fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006f9e:	f7fa f857 	bl	8001050 <main>
  bx  lr
 8006fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006fa4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006fa8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006fac:	24000218 	.word	0x24000218
  ldr r2, =_sidata
 8006fb0:	080177bc 	.word	0x080177bc
  ldr r2, =_sbss
 8006fb4:	24000218 	.word	0x24000218
  ldr r4, =_ebss
 8006fb8:	24004710 	.word	0x24004710

08006fbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fbc:	e7fe      	b.n	8006fbc <ADC3_IRQHandler>
	...

08006fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fc6:	2003      	movs	r0, #3
 8006fc8:	f001 ff0c 	bl	8008de4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fcc:	f006 fa88 	bl	800d4e0 <HAL_RCC_GetSysClockFreq>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b15      	ldr	r3, [pc, #84]	; (8007028 <HAL_Init+0x68>)
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	0a1b      	lsrs	r3, r3, #8
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	4913      	ldr	r1, [pc, #76]	; (800702c <HAL_Init+0x6c>)
 8006fde:	5ccb      	ldrb	r3, [r1, r3]
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fe8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fea:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_Init+0x68>)
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	4a0e      	ldr	r2, [pc, #56]	; (800702c <HAL_Init+0x6c>)
 8006ff4:	5cd3      	ldrb	r3, [r2, r3]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8007000:	4a0b      	ldr	r2, [pc, #44]	; (8007030 <HAL_Init+0x70>)
 8007002:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007004:	4a0b      	ldr	r2, [pc, #44]	; (8007034 <HAL_Init+0x74>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800700a:	200f      	movs	r0, #15
 800700c:	f000 f814 	bl	8007038 <HAL_InitTick>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e002      	b.n	8007020 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800701a:	f7fe febd 	bl	8005d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	58024400 	.word	0x58024400
 800702c:	080173f0 	.word	0x080173f0
 8007030:	24000044 	.word	0x24000044
 8007034:	24000040 	.word	0x24000040

08007038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007040:	4b15      	ldr	r3, [pc, #84]	; (8007098 <HAL_InitTick+0x60>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d101      	bne.n	800704c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	e021      	b.n	8007090 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800704c:	4b13      	ldr	r3, [pc, #76]	; (800709c <HAL_InitTick+0x64>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	4b11      	ldr	r3, [pc, #68]	; (8007098 <HAL_InitTick+0x60>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	4619      	mov	r1, r3
 8007056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800705a:	fbb3 f3f1 	udiv	r3, r3, r1
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	4618      	mov	r0, r3
 8007064:	f001 fef1 	bl	8008e4a <HAL_SYSTICK_Config>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e00e      	b.n	8007090 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b0f      	cmp	r3, #15
 8007076:	d80a      	bhi.n	800708e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007078:	2200      	movs	r2, #0
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007080:	f001 febb 	bl	8008dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007084:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <HAL_InitTick+0x68>)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
 800708c:	e000      	b.n	8007090 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	2400004c 	.word	0x2400004c
 800709c:	24000040 	.word	0x24000040
 80070a0:	24000048 	.word	0x24000048

080070a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80070a8:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <HAL_IncTick+0x20>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <HAL_IncTick+0x24>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4413      	add	r3, r2
 80070b4:	4a04      	ldr	r2, [pc, #16]	; (80070c8 <HAL_IncTick+0x24>)
 80070b6:	6013      	str	r3, [r2, #0]
}
 80070b8:	bf00      	nop
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	2400004c 	.word	0x2400004c
 80070c8:	240045bc 	.word	0x240045bc

080070cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return uwTick;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_GetTick+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	240045bc 	.word	0x240045bc

080070e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070ec:	f7ff ffee 	bl	80070cc <HAL_GetTick>
 80070f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fc:	d005      	beq.n	800710a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <HAL_Delay+0x44>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800710a:	bf00      	nop
 800710c:	f7ff ffde 	bl	80070cc <HAL_GetTick>
 8007110:	4602      	mov	r2, r0
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	1ad3      	subs	r3, r2, r3
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	429a      	cmp	r2, r3
 800711a:	d8f7      	bhi.n	800710c <HAL_Delay+0x28>
  {
  }
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	2400004c 	.word	0x2400004c

0800712c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007130:	4b03      	ldr	r3, [pc, #12]	; (8007140 <HAL_GetREVID+0x14>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	0c1b      	lsrs	r3, r3, #16
}
 8007136:	4618      	mov	r0, r3
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	5c001000 	.word	0x5c001000

08007144 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]
}
 800715e:	bf00      	nop
 8007160:	370c      	adds	r7, #12
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	609a      	str	r2, [r3, #8]
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
 80071b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3360      	adds	r3, #96	; 0x60
 80071be:	461a      	mov	r2, r3
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	430b      	orrs	r3, r1
 80071da:	431a      	orrs	r2, r3
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80071e0:	bf00      	nop
 80071e2:	371c      	adds	r7, #28
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	f003 031f 	and.w	r3, r3, #31
 8007206:	6879      	ldr	r1, [r7, #4]
 8007208:	fa01 f303 	lsl.w	r3, r1, r3
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	611a      	str	r2, [r3, #16]
}
 8007212:	bf00      	nop
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800721e:	b480      	push	{r7}
 8007220:	b087      	sub	sp, #28
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	3360      	adds	r3, #96	; 0x60
 800722e:	461a      	mov	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	431a      	orrs	r2, r3
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	601a      	str	r2, [r3, #0]
  }
}
 8007248:	bf00      	nop
 800724a:	371c      	adds	r7, #28
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800727a:	b480      	push	{r7}
 800727c:	b087      	sub	sp, #28
 800727e:	af00      	add	r7, sp, #0
 8007280:	60f8      	str	r0, [r7, #12]
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3330      	adds	r3, #48	; 0x30
 800728a:	461a      	mov	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	f003 030c 	and.w	r3, r3, #12
 8007296:	4413      	add	r3, r2
 8007298:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	211f      	movs	r1, #31
 80072a6:	fa01 f303 	lsl.w	r3, r1, r3
 80072aa:	43db      	mvns	r3, r3
 80072ac:	401a      	ands	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	0e9b      	lsrs	r3, r3, #26
 80072b2:	f003 011f 	and.w	r1, r3, #31
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	fa01 f303 	lsl.w	r3, r1, r3
 80072c0:	431a      	orrs	r2, r3
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b083      	sub	sp, #12
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	f023 0203 	bic.w	r2, r3, #3
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	60da      	str	r2, [r3, #12]
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007304:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800731e:	b480      	push	{r7}
 8007320:	b087      	sub	sp, #28
 8007322:	af00      	add	r7, sp, #0
 8007324:	60f8      	str	r0, [r7, #12]
 8007326:	60b9      	str	r1, [r7, #8]
 8007328:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	3314      	adds	r3, #20
 800732e:	461a      	mov	r2, r3
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	0e5b      	lsrs	r3, r3, #25
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	f003 0304 	and.w	r3, r3, #4
 800733a:	4413      	add	r3, r2
 800733c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	0d1b      	lsrs	r3, r3, #20
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	2107      	movs	r1, #7
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	401a      	ands	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	0d1b      	lsrs	r3, r3, #20
 8007358:	f003 031f 	and.w	r3, r3, #31
 800735c:	6879      	ldr	r1, [r7, #4]
 800735e:	fa01 f303 	lsl.w	r3, r1, r3
 8007362:	431a      	orrs	r2, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007368:	bf00      	nop
 800736a:	371c      	adds	r7, #28
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0318 	and.w	r3, r3, #24
 8007396:	4908      	ldr	r1, [pc, #32]	; (80073b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007398:	40d9      	lsrs	r1, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	400b      	ands	r3, r1
 800739e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073a2:	431a      	orrs	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80073aa:	bf00      	nop
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	000fffff 	.word	0x000fffff

080073bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f003 031f 	and.w	r3, r3, #31
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	370c      	adds	r7, #12
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	4b04      	ldr	r3, [pc, #16]	; (8007414 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007402:	4013      	ands	r3, r2
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6093      	str	r3, [r2, #8]
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	5fffffc0 	.word	0x5fffffc0

08007418 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800742c:	d101      	bne.n	8007432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <LL_ADC_EnableInternalRegulator+0x24>)
 800744e:	4013      	ands	r3, r2
 8007450:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	6fffffc0 	.word	0x6fffffc0

08007468 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800747c:	d101      	bne.n	8007482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800747e:	2301      	movs	r3, #1
 8007480:	e000      	b.n	8007484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <LL_ADC_Enable+0x24>)
 800749e:	4013      	ands	r3, r2
 80074a0:	f043 0201 	orr.w	r2, r3, #1
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	7fffffc0 	.word	0x7fffffc0

080074b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <LL_ADC_IsEnabled+0x18>
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <LL_ADC_IsEnabled+0x1a>
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
	...

080074e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	4b05      	ldr	r3, [pc, #20]	; (8007504 <LL_ADC_REG_StartConversion+0x24>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	f043 0204 	orr.w	r2, r3, #4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	7fffffc0 	.word	0x7fffffc0

08007508 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007508:	b480      	push	{r7}
 800750a:	b083      	sub	sp, #12
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b04      	cmp	r3, #4
 800751a:	d101      	bne.n	8007520 <LL_ADC_REG_IsConversionOngoing+0x18>
 800751c:	2301      	movs	r3, #1
 800751e:	e000      	b.n	8007522 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b08      	cmp	r3, #8
 8007540:	d101      	bne.n	8007546 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007554:	b590      	push	{r4, r7, lr}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007560:	2300      	movs	r3, #0
 8007562:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e18f      	b.n	800788e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007578:	2b00      	cmp	r3, #0
 800757a:	d109      	bne.n	8007590 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fe fc25 	bl	8005dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff ff3f 	bl	8007418 <LL_ADC_IsDeepPowerDownEnabled>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d004      	beq.n	80075aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff25 	bl	80073f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff ff5a 	bl	8007468 <LL_ADC_IsInternalRegulatorEnabled>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d114      	bne.n	80075e4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff ff3e 	bl	8007440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80075c4:	4b87      	ldr	r3, [pc, #540]	; (80077e4 <HAL_ADC_Init+0x290>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	099b      	lsrs	r3, r3, #6
 80075ca:	4a87      	ldr	r2, [pc, #540]	; (80077e8 <HAL_ADC_Init+0x294>)
 80075cc:	fba2 2303 	umull	r2, r3, r2, r3
 80075d0:	099b      	lsrs	r3, r3, #6
 80075d2:	3301      	adds	r3, #1
 80075d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80075d6:	e002      	b.n	80075de <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	3b01      	subs	r3, #1
 80075dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f9      	bne.n	80075d8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff ff3d 	bl	8007468 <LL_ADC_IsInternalRegulatorEnabled>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10d      	bne.n	8007610 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	f043 0210 	orr.w	r2, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007604:	f043 0201 	orr.w	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff ff77 	bl	8007508 <LL_ADC_REG_IsConversionOngoing>
 800761a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	f040 8129 	bne.w	800787c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 8125 	bne.w	800787c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007636:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800763a:	f043 0202 	orr.w	r2, r3, #2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ff36 	bl	80074b8 <LL_ADC_IsEnabled>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d136      	bne.n	80076c0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a65      	ldr	r2, [pc, #404]	; (80077ec <HAL_ADC_Init+0x298>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d004      	beq.n	8007666 <HAL_ADC_Init+0x112>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a63      	ldr	r2, [pc, #396]	; (80077f0 <HAL_ADC_Init+0x29c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10e      	bne.n	8007684 <HAL_ADC_Init+0x130>
 8007666:	4861      	ldr	r0, [pc, #388]	; (80077ec <HAL_ADC_Init+0x298>)
 8007668:	f7ff ff26 	bl	80074b8 <LL_ADC_IsEnabled>
 800766c:	4604      	mov	r4, r0
 800766e:	4860      	ldr	r0, [pc, #384]	; (80077f0 <HAL_ADC_Init+0x29c>)
 8007670:	f7ff ff22 	bl	80074b8 <LL_ADC_IsEnabled>
 8007674:	4603      	mov	r3, r0
 8007676:	4323      	orrs	r3, r4
 8007678:	2b00      	cmp	r3, #0
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	e008      	b.n	8007696 <HAL_ADC_Init+0x142>
 8007684:	485b      	ldr	r0, [pc, #364]	; (80077f4 <HAL_ADC_Init+0x2a0>)
 8007686:	f7ff ff17 	bl	80074b8 <LL_ADC_IsEnabled>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	bf0c      	ite	eq
 8007690:	2301      	moveq	r3, #1
 8007692:	2300      	movne	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d012      	beq.n	80076c0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a53      	ldr	r2, [pc, #332]	; (80077ec <HAL_ADC_Init+0x298>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d004      	beq.n	80076ae <HAL_ADC_Init+0x15a>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a51      	ldr	r2, [pc, #324]	; (80077f0 <HAL_ADC_Init+0x29c>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d101      	bne.n	80076b2 <HAL_ADC_Init+0x15e>
 80076ae:	4a52      	ldr	r2, [pc, #328]	; (80077f8 <HAL_ADC_Init+0x2a4>)
 80076b0:	e000      	b.n	80076b4 <HAL_ADC_Init+0x160>
 80076b2:	4a52      	ldr	r2, [pc, #328]	; (80077fc <HAL_ADC_Init+0x2a8>)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	4619      	mov	r1, r3
 80076ba:	4610      	mov	r0, r2
 80076bc:	f7ff fd42 	bl	8007144 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80076c0:	f7ff fd34 	bl	800712c <HAL_GetREVID>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d914      	bls.n	80076f8 <HAL_ADC_Init+0x1a4>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b10      	cmp	r3, #16
 80076d4:	d110      	bne.n	80076f8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7d5b      	ldrb	r3, [r3, #21]
 80076da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80076e0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80076e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7f1b      	ldrb	r3, [r3, #28]
 80076ec:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80076ee:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80076f0:	f043 030c 	orr.w	r3, r3, #12
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e00d      	b.n	8007714 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7d5b      	ldrb	r3, [r3, #21]
 80076fc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007702:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007708:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	7f1b      	ldrb	r3, [r3, #28]
 800770e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007710:	4313      	orrs	r3, r2
 8007712:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7f1b      	ldrb	r3, [r3, #28]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d106      	bne.n	800772a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	3b01      	subs	r3, #1
 8007722:	045b      	lsls	r3, r3, #17
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	4313      	orrs	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007736:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800773e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4313      	orrs	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <HAL_ADC_Init+0x2ac>)
 800774e:	4013      	ands	r3, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6812      	ldr	r2, [r2, #0]
 8007754:	69b9      	ldr	r1, [r7, #24]
 8007756:	430b      	orrs	r3, r1
 8007758:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff fed2 	bl	8007508 <LL_ADC_REG_IsConversionOngoing>
 8007764:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fedf 	bl	800752e <LL_ADC_INJ_IsConversionOngoing>
 8007770:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d15f      	bne.n	8007838 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d15c      	bne.n	8007838 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	7d1b      	ldrb	r3, [r3, #20]
 8007782:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8007788:	4313      	orrs	r3, r2
 800778a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68da      	ldr	r2, [r3, #12]
 8007792:	4b1c      	ldr	r3, [pc, #112]	; (8007804 <HAL_ADC_Init+0x2b0>)
 8007794:	4013      	ands	r3, r2
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	6812      	ldr	r2, [r2, #0]
 800779a:	69b9      	ldr	r1, [r7, #24]
 800779c:	430b      	orrs	r3, r1
 800779e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d130      	bne.n	800780c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	4b14      	ldr	r3, [pc, #80]	; (8007808 <HAL_ADC_Init+0x2b4>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80077be:	3a01      	subs	r2, #1
 80077c0:	0411      	lsls	r1, r2, #16
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80077c6:	4311      	orrs	r1, r2
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80077cc:	4311      	orrs	r1, r2
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80077d2:	430a      	orrs	r2, r1
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	611a      	str	r2, [r3, #16]
 80077e0:	e01c      	b.n	800781c <HAL_ADC_Init+0x2c8>
 80077e2:	bf00      	nop
 80077e4:	24000040 	.word	0x24000040
 80077e8:	053e2d63 	.word	0x053e2d63
 80077ec:	40022000 	.word	0x40022000
 80077f0:	40022100 	.word	0x40022100
 80077f4:	58026000 	.word	0x58026000
 80077f8:	40022300 	.word	0x40022300
 80077fc:	58026300 	.word	0x58026300
 8007800:	fff0c003 	.word	0xfff0c003
 8007804:	ffffbffc 	.word	0xffffbffc
 8007808:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691a      	ldr	r2, [r3, #16]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0201 	bic.w	r2, r2, #1
 800781a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ffc4 	bl	80087c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d10c      	bne.n	800785a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007846:	f023 010f 	bic.w	r1, r3, #15
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	1e5a      	subs	r2, r3, #1
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	430a      	orrs	r2, r1
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
 8007858:	e007      	b.n	800786a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 020f 	bic.w	r2, r2, #15
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	f043 0201 	orr.w	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	655a      	str	r2, [r3, #84]	; 0x54
 800787a:	e007      	b.n	800788c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007880:	f043 0210 	orr.w	r2, r3, #16
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800788c:	7ffb      	ldrb	r3, [r7, #31]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3724      	adds	r7, #36	; 0x24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd90      	pop	{r4, r7, pc}
 8007896:	bf00      	nop

08007898 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a55      	ldr	r2, [pc, #340]	; (8007a00 <HAL_ADC_Start_DMA+0x168>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d004      	beq.n	80078b8 <HAL_ADC_Start_DMA+0x20>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a54      	ldr	r2, [pc, #336]	; (8007a04 <HAL_ADC_Start_DMA+0x16c>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d101      	bne.n	80078bc <HAL_ADC_Start_DMA+0x24>
 80078b8:	4b53      	ldr	r3, [pc, #332]	; (8007a08 <HAL_ADC_Start_DMA+0x170>)
 80078ba:	e000      	b.n	80078be <HAL_ADC_Start_DMA+0x26>
 80078bc:	4b53      	ldr	r3, [pc, #332]	; (8007a0c <HAL_ADC_Start_DMA+0x174>)
 80078be:	4618      	mov	r0, r3
 80078c0:	f7ff fd7c 	bl	80073bc <LL_ADC_GetMultimode>
 80078c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fe1c 	bl	8007508 <LL_ADC_REG_IsConversionOngoing>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 808c 	bne.w	80079f0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d101      	bne.n	80078e6 <HAL_ADC_Start_DMA+0x4e>
 80078e2:	2302      	movs	r3, #2
 80078e4:	e087      	b.n	80079f6 <HAL_ADC_Start_DMA+0x15e>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d005      	beq.n	8007900 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	2b05      	cmp	r3, #5
 80078f8:	d002      	beq.n	8007900 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d170      	bne.n	80079e2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 fe3f 	bl	8008584 <ADC_Enable>
 8007906:	4603      	mov	r3, r0
 8007908:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800790a:	7dfb      	ldrb	r3, [r7, #23]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d163      	bne.n	80079d8 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007914:	4b3e      	ldr	r3, [pc, #248]	; (8007a10 <HAL_ADC_Start_DMA+0x178>)
 8007916:	4013      	ands	r3, r2
 8007918:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a37      	ldr	r2, [pc, #220]	; (8007a04 <HAL_ADC_Start_DMA+0x16c>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d002      	beq.n	8007930 <HAL_ADC_Start_DMA+0x98>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	e000      	b.n	8007932 <HAL_ADC_Start_DMA+0x9a>
 8007930:	4b33      	ldr	r3, [pc, #204]	; (8007a00 <HAL_ADC_Start_DMA+0x168>)
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	4293      	cmp	r3, r2
 8007938:	d002      	beq.n	8007940 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007944:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007950:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007954:	2b00      	cmp	r3, #0
 8007956:	d006      	beq.n	8007966 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800795c:	f023 0206 	bic.w	r2, r3, #6
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	659a      	str	r2, [r3, #88]	; 0x58
 8007964:	e002      	b.n	800796c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007970:	4a28      	ldr	r2, [pc, #160]	; (8007a14 <HAL_ADC_Start_DMA+0x17c>)
 8007972:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007978:	4a27      	ldr	r2, [pc, #156]	; (8007a18 <HAL_ADC_Start_DMA+0x180>)
 800797a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007980:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <HAL_ADC_Start_DMA+0x184>)
 8007982:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	221c      	movs	r2, #28
 800798a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0210 	orr.w	r2, r2, #16
 80079a2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7ff fc8f 	bl	80072d2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3340      	adds	r3, #64	; 0x40
 80079be:	4619      	mov	r1, r3
 80079c0:	68ba      	ldr	r2, [r7, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f001 fdaa 	bl	800951c <HAL_DMA_Start_IT>
 80079c8:	4603      	mov	r3, r0
 80079ca:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff fd85 	bl	80074e0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80079d6:	e00d      	b.n	80079f4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80079e0:	e008      	b.n	80079f4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80079ee:	e001      	b.n	80079f4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80079f0:	2302      	movs	r3, #2
 80079f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80079f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40022000 	.word	0x40022000
 8007a04:	40022100 	.word	0x40022100
 8007a08:	40022300 	.word	0x40022300
 8007a0c:	58026300 	.word	0x58026300
 8007a10:	fffff0fe 	.word	0xfffff0fe
 8007a14:	08008699 	.word	0x08008699
 8007a18:	08008771 	.word	0x08008771
 8007a1c:	0800878d 	.word	0x0800878d

08007a20 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b08a      	sub	sp, #40	; 0x28
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007a28:	2300      	movs	r3, #0
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a87      	ldr	r2, [pc, #540]	; (8007c60 <HAL_ADC_IRQHandler+0x240>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d004      	beq.n	8007a50 <HAL_ADC_IRQHandler+0x30>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a86      	ldr	r2, [pc, #536]	; (8007c64 <HAL_ADC_IRQHandler+0x244>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d101      	bne.n	8007a54 <HAL_ADC_IRQHandler+0x34>
 8007a50:	4b85      	ldr	r3, [pc, #532]	; (8007c68 <HAL_ADC_IRQHandler+0x248>)
 8007a52:	e000      	b.n	8007a56 <HAL_ADC_IRQHandler+0x36>
 8007a54:	4b85      	ldr	r3, [pc, #532]	; (8007c6c <HAL_ADC_IRQHandler+0x24c>)
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fcb0 	bl	80073bc <LL_ADC_GetMultimode>
 8007a5c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	f003 0302 	and.w	r3, r3, #2
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d017      	beq.n	8007a98 <HAL_ADC_IRQHandler+0x78>
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d012      	beq.n	8007a98 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d105      	bne.n	8007a8a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a82:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fff2 	bl	8008a74 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2202      	movs	r2, #2
 8007a96:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d004      	beq.n	8007aac <HAL_ADC_IRQHandler+0x8c>
 8007aa2:	69bb      	ldr	r3, [r7, #24]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8083 	beq.w	8007bbe <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	f003 0308 	and.w	r3, r3, #8
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d07d      	beq.n	8007bbe <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ac6:	f003 0310 	and.w	r3, r3, #16
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d105      	bne.n	8007ada <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7ff fbb8 	bl	8007254 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d062      	beq.n	8007bb0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a5d      	ldr	r2, [pc, #372]	; (8007c64 <HAL_ADC_IRQHandler+0x244>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d002      	beq.n	8007afa <HAL_ADC_IRQHandler+0xda>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	e000      	b.n	8007afc <HAL_ADC_IRQHandler+0xdc>
 8007afa:	4b59      	ldr	r3, [pc, #356]	; (8007c60 <HAL_ADC_IRQHandler+0x240>)
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6812      	ldr	r2, [r2, #0]
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d008      	beq.n	8007b16 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d005      	beq.n	8007b16 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b05      	cmp	r3, #5
 8007b0e:	d002      	beq.n	8007b16 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b09      	cmp	r3, #9
 8007b14:	d104      	bne.n	8007b20 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	623b      	str	r3, [r7, #32]
 8007b1e:	e00c      	b.n	8007b3a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a4f      	ldr	r2, [pc, #316]	; (8007c64 <HAL_ADC_IRQHandler+0x244>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d002      	beq.n	8007b30 <HAL_ADC_IRQHandler+0x110>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	e000      	b.n	8007b32 <HAL_ADC_IRQHandler+0x112>
 8007b30:	4b4b      	ldr	r3, [pc, #300]	; (8007c60 <HAL_ADC_IRQHandler+0x240>)
 8007b32:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d135      	bne.n	8007bb0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b08      	cmp	r3, #8
 8007b50:	d12e      	bne.n	8007bb0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff fcd6 	bl	8007508 <LL_ADC_REG_IsConversionOngoing>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d11a      	bne.n	8007b98 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 020c 	bic.w	r2, r2, #12
 8007b70:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d112      	bne.n	8007bb0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8e:	f043 0201 	orr.w	r2, r3, #1
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	655a      	str	r2, [r3, #84]	; 0x54
 8007b96:	e00b      	b.n	8007bb0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	f043 0210 	orr.w	r2, r3, #16
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba8:	f043 0201 	orr.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f96f 	bl	8007e94 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	220c      	movs	r2, #12
 8007bbc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <HAL_ADC_IRQHandler+0x1b2>
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f003 0320 	and.w	r3, r3, #32
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d10b      	bne.n	8007bea <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 80a0 	beq.w	8007d1e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 809a 	beq.w	8007d1e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bee:	f003 0310 	and.w	r3, r3, #16
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d105      	bne.n	8007c02 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff fb76 	bl	80072f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007c0c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f7ff fb1e 	bl	8007254 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007c18:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a11      	ldr	r2, [pc, #68]	; (8007c64 <HAL_ADC_IRQHandler+0x244>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d002      	beq.n	8007c2a <HAL_ADC_IRQHandler+0x20a>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	e000      	b.n	8007c2c <HAL_ADC_IRQHandler+0x20c>
 8007c2a:	4b0d      	ldr	r3, [pc, #52]	; (8007c60 <HAL_ADC_IRQHandler+0x240>)
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	6812      	ldr	r2, [r2, #0]
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d008      	beq.n	8007c46 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b06      	cmp	r3, #6
 8007c3e:	d002      	beq.n	8007c46 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2b07      	cmp	r3, #7
 8007c44:	d104      	bne.n	8007c50 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	68db      	ldr	r3, [r3, #12]
 8007c4c:	623b      	str	r3, [r7, #32]
 8007c4e:	e014      	b.n	8007c7a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a03      	ldr	r2, [pc, #12]	; (8007c64 <HAL_ADC_IRQHandler+0x244>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00a      	beq.n	8007c70 <HAL_ADC_IRQHandler+0x250>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	e008      	b.n	8007c72 <HAL_ADC_IRQHandler+0x252>
 8007c60:	40022000 	.word	0x40022000
 8007c64:	40022100 	.word	0x40022100
 8007c68:	40022300 	.word	0x40022300
 8007c6c:	58026300 	.word	0x58026300
 8007c70:	4b84      	ldr	r3, [pc, #528]	; (8007e84 <HAL_ADC_IRQHandler+0x464>)
 8007c72:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d047      	beq.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d007      	beq.n	8007c9a <HAL_ADC_IRQHandler+0x27a>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03f      	beq.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d13a      	bne.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca4:	2b40      	cmp	r3, #64	; 0x40
 8007ca6:	d133      	bne.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007ca8:	6a3b      	ldr	r3, [r7, #32]
 8007caa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d12e      	bne.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fc39 	bl	800752e <LL_ADC_INJ_IsConversionOngoing>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11a      	bne.n	8007cf8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007cd0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d112      	bne.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cee:	f043 0201 	orr.w	r2, r3, #1
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	655a      	str	r2, [r3, #84]	; 0x54
 8007cf6:	e00b      	b.n	8007d10 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cfc:	f043 0210 	orr.w	r2, r3, #16
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fe87 	bl	8008a24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2260      	movs	r2, #96	; 0x60
 8007d1c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d011      	beq.n	8007d4c <HAL_ADC_IRQHandler+0x32c>
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00c      	beq.n	8007d4c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f8bc 	bl	8007ebc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2280      	movs	r2, #128	; 0x80
 8007d4a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d012      	beq.n	8007d7c <HAL_ADC_IRQHandler+0x35c>
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00d      	beq.n	8007d7c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d64:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 fe6d 	bl	8008a4c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d7a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d012      	beq.n	8007dac <HAL_ADC_IRQHandler+0x38c>
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00d      	beq.n	8007dac <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fe5f 	bl	8008a60 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007daa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f003 0310 	and.w	r3, r3, #16
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d043      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x41e>
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	f003 0310 	and.w	r3, r3, #16
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d03e      	beq.n	8007e3e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d102      	bne.n	8007dce <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
 8007dcc:	e021      	b.n	8007e12 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d015      	beq.n	8007e00 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a2a      	ldr	r2, [pc, #168]	; (8007e84 <HAL_ADC_IRQHandler+0x464>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d004      	beq.n	8007de8 <HAL_ADC_IRQHandler+0x3c8>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a29      	ldr	r2, [pc, #164]	; (8007e88 <HAL_ADC_IRQHandler+0x468>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d101      	bne.n	8007dec <HAL_ADC_IRQHandler+0x3cc>
 8007de8:	4b28      	ldr	r3, [pc, #160]	; (8007e8c <HAL_ADC_IRQHandler+0x46c>)
 8007dea:	e000      	b.n	8007dee <HAL_ADC_IRQHandler+0x3ce>
 8007dec:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <HAL_ADC_IRQHandler+0x470>)
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff faf2 	bl	80073d8 <LL_ADC_GetMultiDMATransfer>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00b      	beq.n	8007e12 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfe:	e008      	b.n	8007e12 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	f003 0303 	and.w	r3, r3, #3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d10e      	bne.n	8007e36 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e28:	f043 0202 	orr.w	r2, r3, #2
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f84d 	bl	8007ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2210      	movs	r2, #16
 8007e3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d018      	beq.n	8007e7a <HAL_ADC_IRQHandler+0x45a>
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d013      	beq.n	8007e7a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	f043 0208 	orr.w	r2, r3, #8
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fddf 	bl	8008a38 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007e7a:	bf00      	nop
 8007e7c:	3728      	adds	r7, #40	; 0x28
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	40022000 	.word	0x40022000
 8007e88:	40022100 	.word	0x40022100
 8007e8c:	40022300 	.word	0x40022300
 8007e90:	58026300 	.word	0x58026300

08007e94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr

08007ebc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b0a1      	sub	sp, #132	; 0x84
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	4a9d      	ldr	r2, [pc, #628]	; (8008174 <HAL_ADC_ConfigChannel+0x290>)
 8007efe:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d101      	bne.n	8007f0e <HAL_ADC_ConfigChannel+0x2a>
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	e321      	b.n	8008552 <HAL_ADC_ConfigChannel+0x66e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff faf4 	bl	8007508 <LL_ADC_REG_IsConversionOngoing>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f040 8306 	bne.w	8008534 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d108      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x62>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	0e9b      	lsrs	r3, r3, #26
 8007f3a:	f003 031f 	and.w	r3, r3, #31
 8007f3e:	2201      	movs	r2, #1
 8007f40:	fa02 f303 	lsl.w	r3, r2, r3
 8007f44:	e016      	b.n	8007f74 <HAL_ADC_ConfigChannel+0x90>
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f4e:	fa93 f3a3 	rbit	r3, r3
 8007f52:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007f54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f56:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8007f5e:	2320      	movs	r3, #32
 8007f60:	e003      	b.n	8007f6a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8007f62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f64:	fab3 f383 	clz	r3, r3
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 031f 	and.w	r3, r3, #31
 8007f6e:	2201      	movs	r2, #1
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	6812      	ldr	r2, [r2, #0]
 8007f78:	69d1      	ldr	r1, [r2, #28]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6812      	ldr	r2, [r2, #0]
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6859      	ldr	r1, [r3, #4]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f7ff f973 	bl	800727a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff fab5 	bl	8007508 <LL_ADC_REG_IsConversionOngoing>
 8007f9e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7ff fac2 	bl	800752e <LL_ADC_INJ_IsConversionOngoing>
 8007faa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 80b3 	bne.w	800811a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 80af 	bne.w	800811a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6818      	ldr	r0, [r3, #0]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f7ff f9a8 	bl	800731e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007fce:	4b6a      	ldr	r3, [pc, #424]	; (8008178 <HAL_ADC_ConfigChannel+0x294>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fda:	d10b      	bne.n	8007ff4 <HAL_ADC_ConfigChannel+0x110>
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff2:	e01d      	b.n	8008030 <HAL_ADC_ConfigChannel+0x14c>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0310 	and.w	r3, r3, #16
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10b      	bne.n	800801a <HAL_ADC_ConfigChannel+0x136>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695a      	ldr	r2, [r3, #20]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	089b      	lsrs	r3, r3, #2
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	fa02 f303 	lsl.w	r3, r2, r3
 8008018:	e00a      	b.n	8008030 <HAL_ADC_ConfigChannel+0x14c>
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	089b      	lsrs	r3, r3, #2
 8008026:	f003 0304 	and.w	r3, r3, #4
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	2b04      	cmp	r3, #4
 8008038:	d027      	beq.n	800808a <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6919      	ldr	r1, [r3, #16]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008048:	f7ff f8b0 	bl	80071ac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6818      	ldr	r0, [r3, #0]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	6919      	ldr	r1, [r3, #16]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	7e5b      	ldrb	r3, [r3, #25]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d102      	bne.n	8008062 <HAL_ADC_ConfigChannel+0x17e>
 800805c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008060:	e000      	b.n	8008064 <HAL_ADC_ConfigChannel+0x180>
 8008062:	2300      	movs	r3, #0
 8008064:	461a      	mov	r2, r3
 8008066:	f7ff f8da 	bl	800721e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6919      	ldr	r1, [r3, #16]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	7e1b      	ldrb	r3, [r3, #24]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d102      	bne.n	8008080 <HAL_ADC_ConfigChannel+0x19c>
 800807a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800807e:	e000      	b.n	8008082 <HAL_ADC_ConfigChannel+0x19e>
 8008080:	2300      	movs	r3, #0
 8008082:	461a      	mov	r2, r3
 8008084:	f7ff f8b2 	bl	80071ec <LL_ADC_SetDataRightShift>
 8008088:	e047      	b.n	800811a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008090:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	069b      	lsls	r3, r3, #26
 800809a:	429a      	cmp	r2, r3
 800809c:	d107      	bne.n	80080ae <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80080ac:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80080b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	069b      	lsls	r3, r3, #26
 80080be:	429a      	cmp	r2, r3
 80080c0:	d107      	bne.n	80080d2 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80080d0:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	069b      	lsls	r3, r3, #26
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d107      	bne.n	80080f6 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80080f4:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	069b      	lsls	r3, r3, #26
 8008106:	429a      	cmp	r2, r3
 8008108:	d107      	bne.n	800811a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008118:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f9ca 	bl	80074b8 <LL_ADC_IsEnabled>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	f040 820d 	bne.w	8008546 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6818      	ldr	r0, [r3, #0]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	6819      	ldr	r1, [r3, #0]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	461a      	mov	r2, r3
 800813a:	f7ff f91b 	bl	8007374 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <HAL_ADC_ConfigChannel+0x290>)
 8008144:	4293      	cmp	r3, r2
 8008146:	f040 8133 	bne.w	80083b0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008156:	2b00      	cmp	r3, #0
 8008158:	d110      	bne.n	800817c <HAL_ADC_ConfigChannel+0x298>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	0e9b      	lsrs	r3, r3, #26
 8008160:	3301      	adds	r3, #1
 8008162:	f003 031f 	and.w	r3, r3, #31
 8008166:	2b09      	cmp	r3, #9
 8008168:	bf94      	ite	ls
 800816a:	2301      	movls	r3, #1
 800816c:	2300      	movhi	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	e01e      	b.n	80081b0 <HAL_ADC_ConfigChannel+0x2cc>
 8008172:	bf00      	nop
 8008174:	47ff0000 	.word	0x47ff0000
 8008178:	5c001000 	.word	0x5c001000
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008184:	fa93 f3a3 	rbit	r3, r3
 8008188:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800818a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800818e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8008194:	2320      	movs	r3, #32
 8008196:	e003      	b.n	80081a0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819a:	fab3 f383 	clz	r3, r3
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	3301      	adds	r3, #1
 80081a2:	f003 031f 	and.w	r3, r3, #31
 80081a6:	2b09      	cmp	r3, #9
 80081a8:	bf94      	ite	ls
 80081aa:	2301      	movls	r3, #1
 80081ac:	2300      	movhi	r3, #0
 80081ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d079      	beq.n	80082a8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d107      	bne.n	80081d0 <HAL_ADC_ConfigChannel+0x2ec>
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	0e9b      	lsrs	r3, r3, #26
 80081c6:	3301      	adds	r3, #1
 80081c8:	069b      	lsls	r3, r3, #26
 80081ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081ce:	e015      	b.n	80081fc <HAL_ADC_ConfigChannel+0x318>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d8:	fa93 f3a3 	rbit	r3, r3
 80081dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80081de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80081e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d101      	bne.n	80081ec <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80081e8:	2320      	movs	r3, #32
 80081ea:	e003      	b.n	80081f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80081ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ee:	fab3 f383 	clz	r3, r3
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	3301      	adds	r3, #1
 80081f6:	069b      	lsls	r3, r3, #26
 80081f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <HAL_ADC_ConfigChannel+0x338>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	0e9b      	lsrs	r3, r3, #26
 800820e:	3301      	adds	r3, #1
 8008210:	f003 031f 	and.w	r3, r3, #31
 8008214:	2101      	movs	r1, #1
 8008216:	fa01 f303 	lsl.w	r3, r1, r3
 800821a:	e017      	b.n	800824c <HAL_ADC_ConfigChannel+0x368>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008224:	fa93 f3a3 	rbit	r3, r3
 8008228:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800822a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800822e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8008234:	2320      	movs	r3, #32
 8008236:	e003      	b.n	8008240 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8008238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823a:	fab3 f383 	clz	r3, r3
 800823e:	b2db      	uxtb	r3, r3
 8008240:	3301      	adds	r3, #1
 8008242:	f003 031f 	and.w	r3, r3, #31
 8008246:	2101      	movs	r1, #1
 8008248:	fa01 f303 	lsl.w	r3, r1, r3
 800824c:	ea42 0103 	orr.w	r1, r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <HAL_ADC_ConfigChannel+0x38e>
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	0e9b      	lsrs	r3, r3, #26
 8008262:	3301      	adds	r3, #1
 8008264:	f003 021f 	and.w	r2, r3, #31
 8008268:	4613      	mov	r3, r2
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	4413      	add	r3, r2
 800826e:	051b      	lsls	r3, r3, #20
 8008270:	e018      	b.n	80082a4 <HAL_ADC_ConfigChannel+0x3c0>
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800827a:	fa93 f3a3 	rbit	r3, r3
 800827e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 800828a:	2320      	movs	r3, #32
 800828c:	e003      	b.n	8008296 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	fab3 f383 	clz	r3, r3
 8008294:	b2db      	uxtb	r3, r3
 8008296:	3301      	adds	r3, #1
 8008298:	f003 021f 	and.w	r2, r3, #31
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082a4:	430b      	orrs	r3, r1
 80082a6:	e07e      	b.n	80083a6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d107      	bne.n	80082c4 <HAL_ADC_ConfigChannel+0x3e0>
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	0e9b      	lsrs	r3, r3, #26
 80082ba:	3301      	adds	r3, #1
 80082bc:	069b      	lsls	r3, r3, #26
 80082be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082c2:	e015      	b.n	80082f0 <HAL_ADC_ConfigChannel+0x40c>
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082cc:	fa93 f3a3 	rbit	r3, r3
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80082dc:	2320      	movs	r3, #32
 80082de:	e003      	b.n	80082e8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	fab3 f383 	clz	r3, r3
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	3301      	adds	r3, #1
 80082ea:	069b      	lsls	r3, r3, #26
 80082ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d109      	bne.n	8008310 <HAL_ADC_ConfigChannel+0x42c>
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	0e9b      	lsrs	r3, r3, #26
 8008302:	3301      	adds	r3, #1
 8008304:	f003 031f 	and.w	r3, r3, #31
 8008308:	2101      	movs	r1, #1
 800830a:	fa01 f303 	lsl.w	r3, r1, r3
 800830e:	e017      	b.n	8008340 <HAL_ADC_ConfigChannel+0x45c>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	fa93 f3a3 	rbit	r3, r3
 800831c:	61bb      	str	r3, [r7, #24]
  return result;
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8008328:	2320      	movs	r3, #32
 800832a:	e003      	b.n	8008334 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	fab3 f383 	clz	r3, r3
 8008332:	b2db      	uxtb	r3, r3
 8008334:	3301      	adds	r3, #1
 8008336:	f003 031f 	and.w	r3, r3, #31
 800833a:	2101      	movs	r1, #1
 800833c:	fa01 f303 	lsl.w	r3, r1, r3
 8008340:	ea42 0103 	orr.w	r1, r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10d      	bne.n	800836c <HAL_ADC_ConfigChannel+0x488>
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	0e9b      	lsrs	r3, r3, #26
 8008356:	3301      	adds	r3, #1
 8008358:	f003 021f 	and.w	r2, r3, #31
 800835c:	4613      	mov	r3, r2
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	4413      	add	r3, r2
 8008362:	3b1e      	subs	r3, #30
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800836a:	e01b      	b.n	80083a4 <HAL_ADC_ConfigChannel+0x4c0>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	fa93 f3a3 	rbit	r3, r3
 8008378:	60fb      	str	r3, [r7, #12]
  return result;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8008384:	2320      	movs	r3, #32
 8008386:	e003      	b.n	8008390 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	fab3 f383 	clz	r3, r3
 800838e:	b2db      	uxtb	r3, r3
 8008390:	3301      	adds	r3, #1
 8008392:	f003 021f 	and.w	r2, r3, #31
 8008396:	4613      	mov	r3, r2
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	4413      	add	r3, r2
 800839c:	3b1e      	subs	r3, #30
 800839e:	051b      	lsls	r3, r3, #20
 80083a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083a4:	430b      	orrs	r3, r1
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	6892      	ldr	r2, [r2, #8]
 80083aa:	4619      	mov	r1, r3
 80083ac:	f7fe ffb7 	bl	800731e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f280 80c6 	bge.w	8008546 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a67      	ldr	r2, [pc, #412]	; (800855c <HAL_ADC_ConfigChannel+0x678>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d004      	beq.n	80083ce <HAL_ADC_ConfigChannel+0x4ea>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a65      	ldr	r2, [pc, #404]	; (8008560 <HAL_ADC_ConfigChannel+0x67c>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d101      	bne.n	80083d2 <HAL_ADC_ConfigChannel+0x4ee>
 80083ce:	4b65      	ldr	r3, [pc, #404]	; (8008564 <HAL_ADC_ConfigChannel+0x680>)
 80083d0:	e000      	b.n	80083d4 <HAL_ADC_ConfigChannel+0x4f0>
 80083d2:	4b65      	ldr	r3, [pc, #404]	; (8008568 <HAL_ADC_ConfigChannel+0x684>)
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe fedb 	bl	8007190 <LL_ADC_GetCommonPathInternalCh>
 80083da:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5e      	ldr	r2, [pc, #376]	; (800855c <HAL_ADC_ConfigChannel+0x678>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d004      	beq.n	80083f0 <HAL_ADC_ConfigChannel+0x50c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a5d      	ldr	r2, [pc, #372]	; (8008560 <HAL_ADC_ConfigChannel+0x67c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d10e      	bne.n	800840e <HAL_ADC_ConfigChannel+0x52a>
 80083f0:	485a      	ldr	r0, [pc, #360]	; (800855c <HAL_ADC_ConfigChannel+0x678>)
 80083f2:	f7ff f861 	bl	80074b8 <LL_ADC_IsEnabled>
 80083f6:	4604      	mov	r4, r0
 80083f8:	4859      	ldr	r0, [pc, #356]	; (8008560 <HAL_ADC_ConfigChannel+0x67c>)
 80083fa:	f7ff f85d 	bl	80074b8 <LL_ADC_IsEnabled>
 80083fe:	4603      	mov	r3, r0
 8008400:	4323      	orrs	r3, r4
 8008402:	2b00      	cmp	r3, #0
 8008404:	bf0c      	ite	eq
 8008406:	2301      	moveq	r3, #1
 8008408:	2300      	movne	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	e008      	b.n	8008420 <HAL_ADC_ConfigChannel+0x53c>
 800840e:	4857      	ldr	r0, [pc, #348]	; (800856c <HAL_ADC_ConfigChannel+0x688>)
 8008410:	f7ff f852 	bl	80074b8 <LL_ADC_IsEnabled>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	bf0c      	ite	eq
 800841a:	2301      	moveq	r3, #1
 800841c:	2300      	movne	r3, #0
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	d07d      	beq.n	8008520 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a51      	ldr	r2, [pc, #324]	; (8008570 <HAL_ADC_ConfigChannel+0x68c>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d130      	bne.n	8008490 <HAL_ADC_ConfigChannel+0x5ac>
 800842e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d12b      	bne.n	8008490 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a4b      	ldr	r2, [pc, #300]	; (800856c <HAL_ADC_ConfigChannel+0x688>)
 800843e:	4293      	cmp	r3, r2
 8008440:	f040 8081 	bne.w	8008546 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a44      	ldr	r2, [pc, #272]	; (800855c <HAL_ADC_ConfigChannel+0x678>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_ADC_ConfigChannel+0x574>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a43      	ldr	r2, [pc, #268]	; (8008560 <HAL_ADC_ConfigChannel+0x67c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d101      	bne.n	800845c <HAL_ADC_ConfigChannel+0x578>
 8008458:	4a42      	ldr	r2, [pc, #264]	; (8008564 <HAL_ADC_ConfigChannel+0x680>)
 800845a:	e000      	b.n	800845e <HAL_ADC_ConfigChannel+0x57a>
 800845c:	4a42      	ldr	r2, [pc, #264]	; (8008568 <HAL_ADC_ConfigChannel+0x684>)
 800845e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008464:	4619      	mov	r1, r3
 8008466:	4610      	mov	r0, r2
 8008468:	f7fe fe7f 	bl	800716a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800846c:	4b41      	ldr	r3, [pc, #260]	; (8008574 <HAL_ADC_ConfigChannel+0x690>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	099b      	lsrs	r3, r3, #6
 8008472:	4a41      	ldr	r2, [pc, #260]	; (8008578 <HAL_ADC_ConfigChannel+0x694>)
 8008474:	fba2 2303 	umull	r2, r3, r2, r3
 8008478:	099b      	lsrs	r3, r3, #6
 800847a:	3301      	adds	r3, #1
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008480:	e002      	b.n	8008488 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	3b01      	subs	r3, #1
 8008486:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f9      	bne.n	8008482 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800848e:	e05a      	b.n	8008546 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a39      	ldr	r2, [pc, #228]	; (800857c <HAL_ADC_ConfigChannel+0x698>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d11e      	bne.n	80084d8 <HAL_ADC_ConfigChannel+0x5f4>
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d119      	bne.n	80084d8 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a30      	ldr	r2, [pc, #192]	; (800856c <HAL_ADC_ConfigChannel+0x688>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d14b      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a2a      	ldr	r2, [pc, #168]	; (800855c <HAL_ADC_ConfigChannel+0x678>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d004      	beq.n	80084c2 <HAL_ADC_ConfigChannel+0x5de>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a28      	ldr	r2, [pc, #160]	; (8008560 <HAL_ADC_ConfigChannel+0x67c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d101      	bne.n	80084c6 <HAL_ADC_ConfigChannel+0x5e2>
 80084c2:	4a28      	ldr	r2, [pc, #160]	; (8008564 <HAL_ADC_ConfigChannel+0x680>)
 80084c4:	e000      	b.n	80084c8 <HAL_ADC_ConfigChannel+0x5e4>
 80084c6:	4a28      	ldr	r2, [pc, #160]	; (8008568 <HAL_ADC_ConfigChannel+0x684>)
 80084c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fe4a 	bl	800716a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80084d6:	e036      	b.n	8008546 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a28      	ldr	r2, [pc, #160]	; (8008580 <HAL_ADC_ConfigChannel+0x69c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d131      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x662>
 80084e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d12c      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1e      	ldr	r2, [pc, #120]	; (800856c <HAL_ADC_ConfigChannel+0x688>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d127      	bne.n	8008546 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a18      	ldr	r2, [pc, #96]	; (800855c <HAL_ADC_ConfigChannel+0x678>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d004      	beq.n	800850a <HAL_ADC_ConfigChannel+0x626>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a16      	ldr	r2, [pc, #88]	; (8008560 <HAL_ADC_ConfigChannel+0x67c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d101      	bne.n	800850e <HAL_ADC_ConfigChannel+0x62a>
 800850a:	4a16      	ldr	r2, [pc, #88]	; (8008564 <HAL_ADC_ConfigChannel+0x680>)
 800850c:	e000      	b.n	8008510 <HAL_ADC_ConfigChannel+0x62c>
 800850e:	4a16      	ldr	r2, [pc, #88]	; (8008568 <HAL_ADC_ConfigChannel+0x684>)
 8008510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008512:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008516:	4619      	mov	r1, r3
 8008518:	4610      	mov	r0, r2
 800851a:	f7fe fe26 	bl	800716a <LL_ADC_SetCommonPathInternalCh>
 800851e:	e012      	b.n	8008546 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008524:	f043 0220 	orr.w	r2, r3, #32
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008532:	e008      	b.n	8008546 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008538:	f043 0220 	orr.w	r2, r3, #32
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800854e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8008552:	4618      	mov	r0, r3
 8008554:	3784      	adds	r7, #132	; 0x84
 8008556:	46bd      	mov	sp, r7
 8008558:	bd90      	pop	{r4, r7, pc}
 800855a:	bf00      	nop
 800855c:	40022000 	.word	0x40022000
 8008560:	40022100 	.word	0x40022100
 8008564:	40022300 	.word	0x40022300
 8008568:	58026300 	.word	0x58026300
 800856c:	58026000 	.word	0x58026000
 8008570:	cb840000 	.word	0xcb840000
 8008574:	24000040 	.word	0x24000040
 8008578:	053e2d63 	.word	0x053e2d63
 800857c:	c7520000 	.word	0xc7520000
 8008580:	cfb80000 	.word	0xcfb80000

08008584 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe ff91 	bl	80074b8 <LL_ADC_IsEnabled>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d16e      	bne.n	800867a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	689a      	ldr	r2, [r3, #8]
 80085a2:	4b38      	ldr	r3, [pc, #224]	; (8008684 <ADC_Enable+0x100>)
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	f043 0210 	orr.w	r2, r3, #16
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ba:	f043 0201 	orr.w	r2, r3, #1
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e05a      	b.n	800867c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe ff60 	bl	8007490 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80085d0:	f7fe fd7c 	bl	80070cc <HAL_GetTick>
 80085d4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a2b      	ldr	r2, [pc, #172]	; (8008688 <ADC_Enable+0x104>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <ADC_Enable+0x66>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a29      	ldr	r2, [pc, #164]	; (800868c <ADC_Enable+0x108>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d101      	bne.n	80085ee <ADC_Enable+0x6a>
 80085ea:	4b29      	ldr	r3, [pc, #164]	; (8008690 <ADC_Enable+0x10c>)
 80085ec:	e000      	b.n	80085f0 <ADC_Enable+0x6c>
 80085ee:	4b29      	ldr	r3, [pc, #164]	; (8008694 <ADC_Enable+0x110>)
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe fee3 	bl	80073bc <LL_ADC_GetMultimode>
 80085f6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a23      	ldr	r2, [pc, #140]	; (800868c <ADC_Enable+0x108>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d002      	beq.n	8008608 <ADC_Enable+0x84>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	e000      	b.n	800860a <ADC_Enable+0x86>
 8008608:	4b1f      	ldr	r3, [pc, #124]	; (8008688 <ADC_Enable+0x104>)
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6812      	ldr	r2, [r2, #0]
 800860e:	4293      	cmp	r3, r2
 8008610:	d02c      	beq.n	800866c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d130      	bne.n	800867a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008618:	e028      	b.n	800866c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe ff4a 	bl	80074b8 <LL_ADC_IsEnabled>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d104      	bne.n	8008634 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe ff2e 	bl	8007490 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008634:	f7fe fd4a 	bl	80070cc <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d914      	bls.n	800866c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	2b01      	cmp	r3, #1
 800864e:	d00d      	beq.n	800866c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008654:	f043 0210 	orr.w	r2, r3, #16
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008660:	f043 0201 	orr.w	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e007      	b.n	800867c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b01      	cmp	r3, #1
 8008678:	d1cf      	bne.n	800861a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800867a:	2300      	movs	r3, #0
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	8000003f 	.word	0x8000003f
 8008688:	40022000 	.word	0x40022000
 800868c:	40022100 	.word	0x40022100
 8008690:	40022300 	.word	0x40022300
 8008694:	58026300 	.word	0x58026300

08008698 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b084      	sub	sp, #16
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d14b      	bne.n	800874a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0308 	and.w	r3, r3, #8
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d021      	beq.n	8008710 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fe fdbf 	bl	8007254 <LL_ADC_REG_IsTriggerSourceSWStart>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d032      	beq.n	8008742 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d12b      	bne.n	8008742 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d11f      	bne.n	8008742 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008706:	f043 0201 	orr.w	r2, r3, #1
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	655a      	str	r2, [r3, #84]	; 0x54
 800870e:	e018      	b.n	8008742 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b00      	cmp	r3, #0
 800871c:	d111      	bne.n	8008742 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d105      	bne.n	8008742 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873a:	f043 0201 	orr.w	r2, r3, #1
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f7ff fba6 	bl	8007e94 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008748:	e00e      	b.n	8008768 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874e:	f003 0310 	and.w	r3, r3, #16
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff fbba 	bl	8007ed0 <HAL_ADC_ErrorCallback>
}
 800875c:	e004      	b.n	8008768 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800877e:	68f8      	ldr	r0, [r7, #12]
 8008780:	f7ff fb92 	bl	8007ea8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800879e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087aa:	f043 0204 	orr.w	r2, r3, #4
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff fb8c 	bl	8007ed0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80087b8:	bf00      	nop
 80087ba:	3710      	adds	r7, #16
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a7a      	ldr	r2, [pc, #488]	; (80089b8 <ADC_ConfigureBoostMode+0x1f8>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <ADC_ConfigureBoostMode+0x1c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a79      	ldr	r2, [pc, #484]	; (80089bc <ADC_ConfigureBoostMode+0x1fc>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d109      	bne.n	80087f0 <ADC_ConfigureBoostMode+0x30>
 80087dc:	4b78      	ldr	r3, [pc, #480]	; (80089c0 <ADC_ConfigureBoostMode+0x200>)
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e008      	b.n	8008802 <ADC_ConfigureBoostMode+0x42>
 80087f0:	4b74      	ldr	r3, [pc, #464]	; (80089c4 <ADC_ConfigureBoostMode+0x204>)
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d01c      	beq.n	8008840 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008806:	f004 ffe5 	bl	800d7d4 <HAL_RCC_GetHCLKFreq>
 800880a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008814:	d010      	beq.n	8008838 <ADC_ConfigureBoostMode+0x78>
 8008816:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800881a:	d873      	bhi.n	8008904 <ADC_ConfigureBoostMode+0x144>
 800881c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008820:	d002      	beq.n	8008828 <ADC_ConfigureBoostMode+0x68>
 8008822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008826:	d16d      	bne.n	8008904 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	0c1b      	lsrs	r3, r3, #16
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	fbb2 f3f3 	udiv	r3, r2, r3
 8008834:	60fb      	str	r3, [r7, #12]
        break;
 8008836:	e068      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	089b      	lsrs	r3, r3, #2
 800883c:	60fb      	str	r3, [r7, #12]
        break;
 800883e:	e064      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008840:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008844:	f04f 0100 	mov.w	r1, #0
 8008848:	f006 fa2a 	bl	800eca0 <HAL_RCCEx_GetPeriphCLKFreq>
 800884c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008856:	d051      	beq.n	80088fc <ADC_ConfigureBoostMode+0x13c>
 8008858:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800885c:	d854      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 800885e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008862:	d047      	beq.n	80088f4 <ADC_ConfigureBoostMode+0x134>
 8008864:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008868:	d84e      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 800886a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800886e:	d03d      	beq.n	80088ec <ADC_ConfigureBoostMode+0x12c>
 8008870:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008874:	d848      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 8008876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800887a:	d033      	beq.n	80088e4 <ADC_ConfigureBoostMode+0x124>
 800887c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008880:	d842      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 8008882:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008886:	d029      	beq.n	80088dc <ADC_ConfigureBoostMode+0x11c>
 8008888:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800888c:	d83c      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 800888e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008892:	d01a      	beq.n	80088ca <ADC_ConfigureBoostMode+0x10a>
 8008894:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008898:	d836      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 800889a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800889e:	d014      	beq.n	80088ca <ADC_ConfigureBoostMode+0x10a>
 80088a0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80088a4:	d830      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 80088a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088aa:	d00e      	beq.n	80088ca <ADC_ConfigureBoostMode+0x10a>
 80088ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088b0:	d82a      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 80088b2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80088b6:	d008      	beq.n	80088ca <ADC_ConfigureBoostMode+0x10a>
 80088b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80088bc:	d824      	bhi.n	8008908 <ADC_ConfigureBoostMode+0x148>
 80088be:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088c2:	d002      	beq.n	80088ca <ADC_ConfigureBoostMode+0x10a>
 80088c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80088c8:	d11e      	bne.n	8008908 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	0c9b      	lsrs	r3, r3, #18
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	68fa      	ldr	r2, [r7, #12]
 80088d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d8:	60fb      	str	r3, [r7, #12]
        break;
 80088da:	e016      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	091b      	lsrs	r3, r3, #4
 80088e0:	60fb      	str	r3, [r7, #12]
        break;
 80088e2:	e012      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	60fb      	str	r3, [r7, #12]
        break;
 80088ea:	e00e      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	099b      	lsrs	r3, r3, #6
 80088f0:	60fb      	str	r3, [r7, #12]
        break;
 80088f2:	e00a      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	09db      	lsrs	r3, r3, #7
 80088f8:	60fb      	str	r3, [r7, #12]
        break;
 80088fa:	e006      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0a1b      	lsrs	r3, r3, #8
 8008900:	60fb      	str	r3, [r7, #12]
        break;
 8008902:	e002      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
        break;
 8008904:	bf00      	nop
 8008906:	e000      	b.n	800890a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008908:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800890a:	f7fe fc0f 	bl	800712c <HAL_GetREVID>
 800890e:	4603      	mov	r3, r0
 8008910:	f241 0203 	movw	r2, #4099	; 0x1003
 8008914:	4293      	cmp	r3, r2
 8008916:	d815      	bhi.n	8008944 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a2b      	ldr	r2, [pc, #172]	; (80089c8 <ADC_ConfigureBoostMode+0x208>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d908      	bls.n	8008932 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	689a      	ldr	r2, [r3, #8]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800892e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008930:	e03e      	b.n	80089b0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	689a      	ldr	r2, [r3, #8]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008940:	609a      	str	r2, [r3, #8]
}
 8008942:	e035      	b.n	80089b0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	085b      	lsrs	r3, r3, #1
 8008948:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	4a1f      	ldr	r2, [pc, #124]	; (80089cc <ADC_ConfigureBoostMode+0x20c>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d808      	bhi.n	8008964 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008960:	609a      	str	r2, [r3, #8]
}
 8008962:	e025      	b.n	80089b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4a1a      	ldr	r2, [pc, #104]	; (80089d0 <ADC_ConfigureBoostMode+0x210>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d80a      	bhi.n	8008982 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800897e:	609a      	str	r2, [r3, #8]
}
 8008980:	e016      	b.n	80089b0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <ADC_ConfigureBoostMode+0x214>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d80a      	bhi.n	80089a0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800899c:	609a      	str	r2, [r3, #8]
}
 800899e:	e007      	b.n	80089b0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689a      	ldr	r2, [r3, #8]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80089ae:	609a      	str	r2, [r3, #8]
}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	40022000 	.word	0x40022000
 80089bc:	40022100 	.word	0x40022100
 80089c0:	40022300 	.word	0x40022300
 80089c4:	58026300 	.word	0x58026300
 80089c8:	01312d00 	.word	0x01312d00
 80089cc:	005f5e10 	.word	0x005f5e10
 80089d0:	00bebc20 	.word	0x00bebc20
 80089d4:	017d7840 	.word	0x017d7840

080089d8 <LL_ADC_IsEnabled>:
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d101      	bne.n	80089f0 <LL_ADC_IsEnabled+0x18>
 80089ec:	2301      	movs	r3, #1
 80089ee:	e000      	b.n	80089f2 <LL_ADC_IsEnabled+0x1a>
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr

080089fe <LL_ADC_REG_IsConversionOngoing>:
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d101      	bne.n	8008a16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008a12:	2301      	movs	r3, #1
 8008a14:	e000      	b.n	8008a18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008a40:	bf00      	nop
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008a54:	bf00      	nop
 8008a56:	370c      	adds	r7, #12
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr

08008a60 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008a68:	bf00      	nop
 8008a6a:	370c      	adds	r7, #12
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008a88:	b590      	push	{r4, r7, lr}
 8008a8a:	b09f      	sub	sp, #124	; 0x7c
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d101      	bne.n	8008aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e0be      	b.n	8008c24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a5c      	ldr	r2, [pc, #368]	; (8008c2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d102      	bne.n	8008ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008ac0:	4b5b      	ldr	r3, [pc, #364]	; (8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008ac2:	60bb      	str	r3, [r7, #8]
 8008ac4:	e001      	b.n	8008aca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad4:	f043 0220 	orr.w	r2, r3, #32
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e09d      	b.n	8008c24 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff ff87 	bl	80089fe <LL_ADC_REG_IsConversionOngoing>
 8008af0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7ff ff81 	bl	80089fe <LL_ADC_REG_IsConversionOngoing>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d17f      	bne.n	8008c02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d17c      	bne.n	8008c02 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a47      	ldr	r2, [pc, #284]	; (8008c2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d004      	beq.n	8008b1c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a46      	ldr	r2, [pc, #280]	; (8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d101      	bne.n	8008b20 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008b1c:	4b45      	ldr	r3, [pc, #276]	; (8008c34 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008b1e:	e000      	b.n	8008b22 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008b20:	4b45      	ldr	r3, [pc, #276]	; (8008c38 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008b22:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d039      	beq.n	8008ba0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b3c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a3a      	ldr	r2, [pc, #232]	; (8008c2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d004      	beq.n	8008b52 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a38      	ldr	r2, [pc, #224]	; (8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10e      	bne.n	8008b70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008b52:	4836      	ldr	r0, [pc, #216]	; (8008c2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008b54:	f7ff ff40 	bl	80089d8 <LL_ADC_IsEnabled>
 8008b58:	4604      	mov	r4, r0
 8008b5a:	4835      	ldr	r0, [pc, #212]	; (8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008b5c:	f7ff ff3c 	bl	80089d8 <LL_ADC_IsEnabled>
 8008b60:	4603      	mov	r3, r0
 8008b62:	4323      	orrs	r3, r4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bf0c      	ite	eq
 8008b68:	2301      	moveq	r3, #1
 8008b6a:	2300      	movne	r3, #0
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	e008      	b.n	8008b82 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008b70:	4832      	ldr	r0, [pc, #200]	; (8008c3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008b72:	f7ff ff31 	bl	80089d8 <LL_ADC_IsEnabled>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bf0c      	ite	eq
 8008b7c:	2301      	moveq	r3, #1
 8008b7e:	2300      	movne	r3, #0
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d047      	beq.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b88:	689a      	ldr	r2, [r3, #8]
 8008b8a:	4b2d      	ldr	r3, [pc, #180]	; (8008c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008b8c:	4013      	ands	r3, r2
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	6811      	ldr	r1, [r2, #0]
 8008b92:	683a      	ldr	r2, [r7, #0]
 8008b94:	6892      	ldr	r2, [r2, #8]
 8008b96:	430a      	orrs	r2, r1
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008b9e:	e03a      	b.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008baa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d004      	beq.n	8008bc0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a1d      	ldr	r2, [pc, #116]	; (8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d10e      	bne.n	8008bde <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008bc0:	481a      	ldr	r0, [pc, #104]	; (8008c2c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008bc2:	f7ff ff09 	bl	80089d8 <LL_ADC_IsEnabled>
 8008bc6:	4604      	mov	r4, r0
 8008bc8:	4819      	ldr	r0, [pc, #100]	; (8008c30 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008bca:	f7ff ff05 	bl	80089d8 <LL_ADC_IsEnabled>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	4323      	orrs	r3, r4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	bf0c      	ite	eq
 8008bd6:	2301      	moveq	r3, #1
 8008bd8:	2300      	movne	r3, #0
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	e008      	b.n	8008bf0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008bde:	4817      	ldr	r0, [pc, #92]	; (8008c3c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008be0:	f7ff fefa 	bl	80089d8 <LL_ADC_IsEnabled>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bf0c      	ite	eq
 8008bea:	2301      	moveq	r3, #1
 8008bec:	2300      	movne	r3, #0
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d010      	beq.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf6:	689a      	ldr	r2, [r3, #8]
 8008bf8:	4b11      	ldr	r3, [pc, #68]	; (8008c40 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008bfa:	4013      	ands	r3, r2
 8008bfc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bfe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008c00:	e009      	b.n	8008c16 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c06:	f043 0220 	orr.w	r2, r3, #32
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008c14:	e000      	b.n	8008c18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008c16:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008c20:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	377c      	adds	r7, #124	; 0x7c
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd90      	pop	{r4, r7, pc}
 8008c2c:	40022000 	.word	0x40022000
 8008c30:	40022100 	.word	0x40022100
 8008c34:	40022300 	.word	0x40022300
 8008c38:	58026300 	.word	0x58026300
 8008c3c:	58026000 	.word	0x58026000
 8008c40:	fffff0e0 	.word	0xfffff0e0

08008c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <__NVIC_SetPriorityGrouping+0x40>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008c60:	4013      	ands	r3, r2
 8008c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008c6c:	4b06      	ldr	r3, [pc, #24]	; (8008c88 <__NVIC_SetPriorityGrouping+0x44>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c72:	4a04      	ldr	r2, [pc, #16]	; (8008c84 <__NVIC_SetPriorityGrouping+0x40>)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	60d3      	str	r3, [r2, #12]
}
 8008c78:	bf00      	nop
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	e000ed00 	.word	0xe000ed00
 8008c88:	05fa0000 	.word	0x05fa0000

08008c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c90:	4b04      	ldr	r3, [pc, #16]	; (8008ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	0a1b      	lsrs	r3, r3, #8
 8008c96:	f003 0307 	and.w	r3, r3, #7
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	e000ed00 	.word	0xe000ed00

08008ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	db0b      	blt.n	8008cd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008cba:	88fb      	ldrh	r3, [r7, #6]
 8008cbc:	f003 021f 	and.w	r2, r3, #31
 8008cc0:	4907      	ldr	r1, [pc, #28]	; (8008ce0 <__NVIC_EnableIRQ+0x38>)
 8008cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cc6:	095b      	lsrs	r3, r3, #5
 8008cc8:	2001      	movs	r0, #1
 8008cca:	fa00 f202 	lsl.w	r2, r0, r2
 8008cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008cd2:	bf00      	nop
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	e000e100 	.word	0xe000e100

08008ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	4603      	mov	r3, r0
 8008cec:	6039      	str	r1, [r7, #0]
 8008cee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008cf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	db0a      	blt.n	8008d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	490c      	ldr	r1, [pc, #48]	; (8008d30 <__NVIC_SetPriority+0x4c>)
 8008cfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008d02:	0112      	lsls	r2, r2, #4
 8008d04:	b2d2      	uxtb	r2, r2
 8008d06:	440b      	add	r3, r1
 8008d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008d0c:	e00a      	b.n	8008d24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	b2da      	uxtb	r2, r3
 8008d12:	4908      	ldr	r1, [pc, #32]	; (8008d34 <__NVIC_SetPriority+0x50>)
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	f003 030f 	and.w	r3, r3, #15
 8008d1a:	3b04      	subs	r3, #4
 8008d1c:	0112      	lsls	r2, r2, #4
 8008d1e:	b2d2      	uxtb	r2, r2
 8008d20:	440b      	add	r3, r1
 8008d22:	761a      	strb	r2, [r3, #24]
}
 8008d24:	bf00      	nop
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	e000e100 	.word	0xe000e100
 8008d34:	e000ed00 	.word	0xe000ed00

08008d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b089      	sub	sp, #36	; 0x24
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	60b9      	str	r1, [r7, #8]
 8008d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f003 0307 	and.w	r3, r3, #7
 8008d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f1c3 0307 	rsb	r3, r3, #7
 8008d52:	2b04      	cmp	r3, #4
 8008d54:	bf28      	it	cs
 8008d56:	2304      	movcs	r3, #4
 8008d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	2b06      	cmp	r3, #6
 8008d60:	d902      	bls.n	8008d68 <NVIC_EncodePriority+0x30>
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	3b03      	subs	r3, #3
 8008d66:	e000      	b.n	8008d6a <NVIC_EncodePriority+0x32>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	fa02 f303 	lsl.w	r3, r2, r3
 8008d76:	43da      	mvns	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	401a      	ands	r2, r3
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	fa01 f303 	lsl.w	r3, r1, r3
 8008d8a:	43d9      	mvns	r1, r3
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d90:	4313      	orrs	r3, r2
         );
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3724      	adds	r7, #36	; 0x24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008db0:	d301      	bcc.n	8008db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008db2:	2301      	movs	r3, #1
 8008db4:	e00f      	b.n	8008dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008db6:	4a0a      	ldr	r2, [pc, #40]	; (8008de0 <SysTick_Config+0x40>)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	3b01      	subs	r3, #1
 8008dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008dbe:	210f      	movs	r1, #15
 8008dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dc4:	f7ff ff8e 	bl	8008ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <SysTick_Config+0x40>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008dce:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <SysTick_Config+0x40>)
 8008dd0:	2207      	movs	r2, #7
 8008dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3708      	adds	r7, #8
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	e000e010 	.word	0xe000e010

08008de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ff29 	bl	8008c44 <__NVIC_SetPriorityGrouping>
}
 8008df2:	bf00      	nop
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b086      	sub	sp, #24
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	4603      	mov	r3, r0
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	607a      	str	r2, [r7, #4]
 8008e06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008e08:	f7ff ff40 	bl	8008c8c <__NVIC_GetPriorityGrouping>
 8008e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	6978      	ldr	r0, [r7, #20]
 8008e14:	f7ff ff90 	bl	8008d38 <NVIC_EncodePriority>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e1e:	4611      	mov	r1, r2
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff ff5f 	bl	8008ce4 <__NVIC_SetPriority>
}
 8008e26:	bf00      	nop
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	4603      	mov	r3, r0
 8008e36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008e38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff ff33 	bl	8008ca8 <__NVIC_EnableIRQ>
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7ff ffa4 	bl	8008da0 <SysTick_Config>
 8008e58:	4603      	mov	r3, r0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
	...

08008e64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b086      	sub	sp, #24
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008e6c:	f7fe f92e 	bl	80070cc <HAL_GetTick>
 8008e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e316      	b.n	80094aa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a66      	ldr	r2, [pc, #408]	; (800901c <HAL_DMA_Init+0x1b8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d04a      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a65      	ldr	r2, [pc, #404]	; (8009020 <HAL_DMA_Init+0x1bc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d045      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a63      	ldr	r2, [pc, #396]	; (8009024 <HAL_DMA_Init+0x1c0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d040      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a62      	ldr	r2, [pc, #392]	; (8009028 <HAL_DMA_Init+0x1c4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d03b      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a60      	ldr	r2, [pc, #384]	; (800902c <HAL_DMA_Init+0x1c8>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d036      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a5f      	ldr	r2, [pc, #380]	; (8009030 <HAL_DMA_Init+0x1cc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d031      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a5d      	ldr	r2, [pc, #372]	; (8009034 <HAL_DMA_Init+0x1d0>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d02c      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a5c      	ldr	r2, [pc, #368]	; (8009038 <HAL_DMA_Init+0x1d4>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d027      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a5a      	ldr	r2, [pc, #360]	; (800903c <HAL_DMA_Init+0x1d8>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d022      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a59      	ldr	r2, [pc, #356]	; (8009040 <HAL_DMA_Init+0x1dc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d01d      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a57      	ldr	r2, [pc, #348]	; (8009044 <HAL_DMA_Init+0x1e0>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d018      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a56      	ldr	r2, [pc, #344]	; (8009048 <HAL_DMA_Init+0x1e4>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d013      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a54      	ldr	r2, [pc, #336]	; (800904c <HAL_DMA_Init+0x1e8>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00e      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a53      	ldr	r2, [pc, #332]	; (8009050 <HAL_DMA_Init+0x1ec>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d009      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a51      	ldr	r2, [pc, #324]	; (8009054 <HAL_DMA_Init+0x1f0>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <HAL_DMA_Init+0xb8>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a50      	ldr	r2, [pc, #320]	; (8009058 <HAL_DMA_Init+0x1f4>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d101      	bne.n	8008f20 <HAL_DMA_Init+0xbc>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <HAL_DMA_Init+0xbe>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f000 813b 	beq.w	800919e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a37      	ldr	r2, [pc, #220]	; (800901c <HAL_DMA_Init+0x1b8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d04a      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a36      	ldr	r2, [pc, #216]	; (8009020 <HAL_DMA_Init+0x1bc>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d045      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a34      	ldr	r2, [pc, #208]	; (8009024 <HAL_DMA_Init+0x1c0>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d040      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a33      	ldr	r2, [pc, #204]	; (8009028 <HAL_DMA_Init+0x1c4>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d03b      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a31      	ldr	r2, [pc, #196]	; (800902c <HAL_DMA_Init+0x1c8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d036      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4a30      	ldr	r2, [pc, #192]	; (8009030 <HAL_DMA_Init+0x1cc>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d031      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a2e      	ldr	r2, [pc, #184]	; (8009034 <HAL_DMA_Init+0x1d0>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d02c      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a2d      	ldr	r2, [pc, #180]	; (8009038 <HAL_DMA_Init+0x1d4>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d027      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a2b      	ldr	r2, [pc, #172]	; (800903c <HAL_DMA_Init+0x1d8>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d022      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a2a      	ldr	r2, [pc, #168]	; (8009040 <HAL_DMA_Init+0x1dc>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d01d      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a28      	ldr	r2, [pc, #160]	; (8009044 <HAL_DMA_Init+0x1e0>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d018      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a27      	ldr	r2, [pc, #156]	; (8009048 <HAL_DMA_Init+0x1e4>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d013      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a25      	ldr	r2, [pc, #148]	; (800904c <HAL_DMA_Init+0x1e8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d00e      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a24      	ldr	r2, [pc, #144]	; (8009050 <HAL_DMA_Init+0x1ec>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d009      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a22      	ldr	r2, [pc, #136]	; (8009054 <HAL_DMA_Init+0x1f0>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d004      	beq.n	8008fd8 <HAL_DMA_Init+0x174>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a21      	ldr	r2, [pc, #132]	; (8009058 <HAL_DMA_Init+0x1f4>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d108      	bne.n	8008fea <HAL_DMA_Init+0x186>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f022 0201 	bic.w	r2, r2, #1
 8008fe6:	601a      	str	r2, [r3, #0]
 8008fe8:	e007      	b.n	8008ffa <HAL_DMA_Init+0x196>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0201 	bic.w	r2, r2, #1
 8008ff8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008ffa:	e02f      	b.n	800905c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ffc:	f7fe f866 	bl	80070cc <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b05      	cmp	r3, #5
 8009008:	d928      	bls.n	800905c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2220      	movs	r2, #32
 800900e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2203      	movs	r2, #3
 8009014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e246      	b.n	80094aa <HAL_DMA_Init+0x646>
 800901c:	40020010 	.word	0x40020010
 8009020:	40020028 	.word	0x40020028
 8009024:	40020040 	.word	0x40020040
 8009028:	40020058 	.word	0x40020058
 800902c:	40020070 	.word	0x40020070
 8009030:	40020088 	.word	0x40020088
 8009034:	400200a0 	.word	0x400200a0
 8009038:	400200b8 	.word	0x400200b8
 800903c:	40020410 	.word	0x40020410
 8009040:	40020428 	.word	0x40020428
 8009044:	40020440 	.word	0x40020440
 8009048:	40020458 	.word	0x40020458
 800904c:	40020470 	.word	0x40020470
 8009050:	40020488 	.word	0x40020488
 8009054:	400204a0 	.word	0x400204a0
 8009058:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 0301 	and.w	r3, r3, #1
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1c8      	bne.n	8008ffc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4b83      	ldr	r3, [pc, #524]	; (8009284 <HAL_DMA_Init+0x420>)
 8009076:	4013      	ands	r3, r2
 8009078:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8009082:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800908e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699b      	ldr	r3, [r3, #24]
 8009094:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800909a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a1b      	ldr	r3, [r3, #32]
 80090a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80090a2:	697a      	ldr	r2, [r7, #20]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	d107      	bne.n	80090c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	4313      	orrs	r3, r2
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	4313      	orrs	r3, r2
 80090be:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80090c0:	4b71      	ldr	r3, [pc, #452]	; (8009288 <HAL_DMA_Init+0x424>)
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	4b71      	ldr	r3, [pc, #452]	; (800928c <HAL_DMA_Init+0x428>)
 80090c6:	4013      	ands	r3, r2
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090cc:	d328      	bcc.n	8009120 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	2b28      	cmp	r3, #40	; 0x28
 80090d4:	d903      	bls.n	80090de <HAL_DMA_Init+0x27a>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2b2e      	cmp	r3, #46	; 0x2e
 80090dc:	d917      	bls.n	800910e <HAL_DMA_Init+0x2aa>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	2b3e      	cmp	r3, #62	; 0x3e
 80090e4:	d903      	bls.n	80090ee <HAL_DMA_Init+0x28a>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b42      	cmp	r3, #66	; 0x42
 80090ec:	d90f      	bls.n	800910e <HAL_DMA_Init+0x2aa>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	2b46      	cmp	r3, #70	; 0x46
 80090f4:	d903      	bls.n	80090fe <HAL_DMA_Init+0x29a>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	2b48      	cmp	r3, #72	; 0x48
 80090fc:	d907      	bls.n	800910e <HAL_DMA_Init+0x2aa>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	2b4e      	cmp	r3, #78	; 0x4e
 8009104:	d905      	bls.n	8009112 <HAL_DMA_Init+0x2ae>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2b52      	cmp	r3, #82	; 0x52
 800910c:	d801      	bhi.n	8009112 <HAL_DMA_Init+0x2ae>
 800910e:	2301      	movs	r3, #1
 8009110:	e000      	b.n	8009114 <HAL_DMA_Init+0x2b0>
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800911e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	697a      	ldr	r2, [r7, #20]
 8009126:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009146:	2b04      	cmp	r3, #4
 8009148:	d117      	bne.n	800917a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	697a      	ldr	r2, [r7, #20]
 8009150:	4313      	orrs	r3, r2
 8009152:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00e      	beq.n	800917a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f002 fb33 	bl	800b7c8 <DMA_CheckFifoParam>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d008      	beq.n	800917a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2240      	movs	r2, #64	; 0x40
 800916c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8009176:	2301      	movs	r3, #1
 8009178:	e197      	b.n	80094aa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	697a      	ldr	r2, [r7, #20]
 8009180:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f002 fa6e 	bl	800b664 <DMA_CalcBaseAndBitshift>
 8009188:	4603      	mov	r3, r0
 800918a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009190:	f003 031f 	and.w	r3, r3, #31
 8009194:	223f      	movs	r2, #63	; 0x3f
 8009196:	409a      	lsls	r2, r3
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	609a      	str	r2, [r3, #8]
 800919c:	e0cd      	b.n	800933a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a3b      	ldr	r2, [pc, #236]	; (8009290 <HAL_DMA_Init+0x42c>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d022      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a39      	ldr	r2, [pc, #228]	; (8009294 <HAL_DMA_Init+0x430>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d01d      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a38      	ldr	r2, [pc, #224]	; (8009298 <HAL_DMA_Init+0x434>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d018      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a36      	ldr	r2, [pc, #216]	; (800929c <HAL_DMA_Init+0x438>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d013      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a35      	ldr	r2, [pc, #212]	; (80092a0 <HAL_DMA_Init+0x43c>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d00e      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a33      	ldr	r2, [pc, #204]	; (80092a4 <HAL_DMA_Init+0x440>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d009      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a32      	ldr	r2, [pc, #200]	; (80092a8 <HAL_DMA_Init+0x444>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d004      	beq.n	80091ee <HAL_DMA_Init+0x38a>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a30      	ldr	r2, [pc, #192]	; (80092ac <HAL_DMA_Init+0x448>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d101      	bne.n	80091f2 <HAL_DMA_Init+0x38e>
 80091ee:	2301      	movs	r3, #1
 80091f0:	e000      	b.n	80091f4 <HAL_DMA_Init+0x390>
 80091f2:	2300      	movs	r3, #0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 8097 	beq.w	8009328 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a24      	ldr	r2, [pc, #144]	; (8009290 <HAL_DMA_Init+0x42c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d021      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a22      	ldr	r2, [pc, #136]	; (8009294 <HAL_DMA_Init+0x430>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d01c      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a21      	ldr	r2, [pc, #132]	; (8009298 <HAL_DMA_Init+0x434>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d017      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1f      	ldr	r2, [pc, #124]	; (800929c <HAL_DMA_Init+0x438>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d012      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a1e      	ldr	r2, [pc, #120]	; (80092a0 <HAL_DMA_Init+0x43c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d00d      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a1c      	ldr	r2, [pc, #112]	; (80092a4 <HAL_DMA_Init+0x440>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d008      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1b      	ldr	r2, [pc, #108]	; (80092a8 <HAL_DMA_Init+0x444>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d003      	beq.n	8009248 <HAL_DMA_Init+0x3e4>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a19      	ldr	r2, [pc, #100]	; (80092ac <HAL_DMA_Init+0x448>)
 8009246:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4b13      	ldr	r3, [pc, #76]	; (80092b0 <HAL_DMA_Init+0x44c>)
 8009264:	4013      	ands	r3, r2
 8009266:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d021      	beq.n	80092b4 <HAL_DMA_Init+0x450>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	2b80      	cmp	r3, #128	; 0x80
 8009276:	d102      	bne.n	800927e <HAL_DMA_Init+0x41a>
 8009278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800927c:	e01b      	b.n	80092b6 <HAL_DMA_Init+0x452>
 800927e:	2300      	movs	r3, #0
 8009280:	e019      	b.n	80092b6 <HAL_DMA_Init+0x452>
 8009282:	bf00      	nop
 8009284:	fe10803f 	.word	0xfe10803f
 8009288:	5c001000 	.word	0x5c001000
 800928c:	ffff0000 	.word	0xffff0000
 8009290:	58025408 	.word	0x58025408
 8009294:	5802541c 	.word	0x5802541c
 8009298:	58025430 	.word	0x58025430
 800929c:	58025444 	.word	0x58025444
 80092a0:	58025458 	.word	0x58025458
 80092a4:	5802546c 	.word	0x5802546c
 80092a8:	58025480 	.word	0x58025480
 80092ac:	58025494 	.word	0x58025494
 80092b0:	fffe000f 	.word	0xfffe000f
 80092b4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	68d2      	ldr	r2, [r2, #12]
 80092ba:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80092bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80092c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	695b      	ldr	r3, [r3, #20]
 80092ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80092cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80092d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	69db      	ldr	r3, [r3, #28]
 80092da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80092dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6a1b      	ldr	r3, [r3, #32]
 80092e2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80092e4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80092e6:	697a      	ldr	r2, [r7, #20]
 80092e8:	4313      	orrs	r3, r2
 80092ea:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	4b6e      	ldr	r3, [pc, #440]	; (80094b4 <HAL_DMA_Init+0x650>)
 80092fc:	4413      	add	r3, r2
 80092fe:	4a6e      	ldr	r2, [pc, #440]	; (80094b8 <HAL_DMA_Init+0x654>)
 8009300:	fba2 2303 	umull	r2, r3, r2, r3
 8009304:	091b      	lsrs	r3, r3, #4
 8009306:	009a      	lsls	r2, r3, #2
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f002 f9a9 	bl	800b664 <DMA_CalcBaseAndBitshift>
 8009312:	4603      	mov	r3, r0
 8009314:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931a:	f003 031f 	and.w	r3, r3, #31
 800931e:	2201      	movs	r2, #1
 8009320:	409a      	lsls	r2, r3
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	e008      	b.n	800933a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2240      	movs	r2, #64	; 0x40
 800932c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2203      	movs	r2, #3
 8009332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e0b7      	b.n	80094aa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a5f      	ldr	r2, [pc, #380]	; (80094bc <HAL_DMA_Init+0x658>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d072      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a5d      	ldr	r2, [pc, #372]	; (80094c0 <HAL_DMA_Init+0x65c>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d06d      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a5c      	ldr	r2, [pc, #368]	; (80094c4 <HAL_DMA_Init+0x660>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d068      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a5a      	ldr	r2, [pc, #360]	; (80094c8 <HAL_DMA_Init+0x664>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d063      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a59      	ldr	r2, [pc, #356]	; (80094cc <HAL_DMA_Init+0x668>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d05e      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a57      	ldr	r2, [pc, #348]	; (80094d0 <HAL_DMA_Init+0x66c>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d059      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a56      	ldr	r2, [pc, #344]	; (80094d4 <HAL_DMA_Init+0x670>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d054      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a54      	ldr	r2, [pc, #336]	; (80094d8 <HAL_DMA_Init+0x674>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d04f      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a53      	ldr	r2, [pc, #332]	; (80094dc <HAL_DMA_Init+0x678>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d04a      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a51      	ldr	r2, [pc, #324]	; (80094e0 <HAL_DMA_Init+0x67c>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d045      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a50      	ldr	r2, [pc, #320]	; (80094e4 <HAL_DMA_Init+0x680>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d040      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a4e      	ldr	r2, [pc, #312]	; (80094e8 <HAL_DMA_Init+0x684>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d03b      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a4d      	ldr	r2, [pc, #308]	; (80094ec <HAL_DMA_Init+0x688>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d036      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a4b      	ldr	r2, [pc, #300]	; (80094f0 <HAL_DMA_Init+0x68c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d031      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a4a      	ldr	r2, [pc, #296]	; (80094f4 <HAL_DMA_Init+0x690>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d02c      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a48      	ldr	r2, [pc, #288]	; (80094f8 <HAL_DMA_Init+0x694>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d027      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a47      	ldr	r2, [pc, #284]	; (80094fc <HAL_DMA_Init+0x698>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d022      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a45      	ldr	r2, [pc, #276]	; (8009500 <HAL_DMA_Init+0x69c>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d01d      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a44      	ldr	r2, [pc, #272]	; (8009504 <HAL_DMA_Init+0x6a0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d018      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a42      	ldr	r2, [pc, #264]	; (8009508 <HAL_DMA_Init+0x6a4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d013      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a41      	ldr	r2, [pc, #260]	; (800950c <HAL_DMA_Init+0x6a8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d00e      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a3f      	ldr	r2, [pc, #252]	; (8009510 <HAL_DMA_Init+0x6ac>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a3e      	ldr	r2, [pc, #248]	; (8009514 <HAL_DMA_Init+0x6b0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d004      	beq.n	800942a <HAL_DMA_Init+0x5c6>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a3c      	ldr	r2, [pc, #240]	; (8009518 <HAL_DMA_Init+0x6b4>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d101      	bne.n	800942e <HAL_DMA_Init+0x5ca>
 800942a:	2301      	movs	r3, #1
 800942c:	e000      	b.n	8009430 <HAL_DMA_Init+0x5cc>
 800942e:	2300      	movs	r3, #0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d032      	beq.n	800949a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f002 fa43 	bl	800b8c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	2b80      	cmp	r3, #128	; 0x80
 8009440:	d102      	bne.n	8009448 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800945c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d010      	beq.n	8009488 <HAL_DMA_Init+0x624>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2b08      	cmp	r3, #8
 800946c:	d80c      	bhi.n	8009488 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f002 fac0 	bl	800b9f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009484:	605a      	str	r2, [r3, #4]
 8009486:	e008      	b.n	800949a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2201      	movs	r2, #1
 80094a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	a7fdabf8 	.word	0xa7fdabf8
 80094b8:	cccccccd 	.word	0xcccccccd
 80094bc:	40020010 	.word	0x40020010
 80094c0:	40020028 	.word	0x40020028
 80094c4:	40020040 	.word	0x40020040
 80094c8:	40020058 	.word	0x40020058
 80094cc:	40020070 	.word	0x40020070
 80094d0:	40020088 	.word	0x40020088
 80094d4:	400200a0 	.word	0x400200a0
 80094d8:	400200b8 	.word	0x400200b8
 80094dc:	40020410 	.word	0x40020410
 80094e0:	40020428 	.word	0x40020428
 80094e4:	40020440 	.word	0x40020440
 80094e8:	40020458 	.word	0x40020458
 80094ec:	40020470 	.word	0x40020470
 80094f0:	40020488 	.word	0x40020488
 80094f4:	400204a0 	.word	0x400204a0
 80094f8:	400204b8 	.word	0x400204b8
 80094fc:	58025408 	.word	0x58025408
 8009500:	5802541c 	.word	0x5802541c
 8009504:	58025430 	.word	0x58025430
 8009508:	58025444 	.word	0x58025444
 800950c:	58025458 	.word	0x58025458
 8009510:	5802546c 	.word	0x5802546c
 8009514:	58025480 	.word	0x58025480
 8009518:	58025494 	.word	0x58025494

0800951c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e226      	b.n	8009986 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <HAL_DMA_Start_IT+0x2a>
 8009542:	2302      	movs	r3, #2
 8009544:	e21f      	b.n	8009986 <HAL_DMA_Start_IT+0x46a>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b01      	cmp	r3, #1
 8009558:	f040 820a 	bne.w	8009970 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2202      	movs	r2, #2
 8009560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a68      	ldr	r2, [pc, #416]	; (8009710 <HAL_DMA_Start_IT+0x1f4>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d04a      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a66      	ldr	r2, [pc, #408]	; (8009714 <HAL_DMA_Start_IT+0x1f8>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d045      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a65      	ldr	r2, [pc, #404]	; (8009718 <HAL_DMA_Start_IT+0x1fc>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d040      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a63      	ldr	r2, [pc, #396]	; (800971c <HAL_DMA_Start_IT+0x200>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d03b      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a62      	ldr	r2, [pc, #392]	; (8009720 <HAL_DMA_Start_IT+0x204>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d036      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a60      	ldr	r2, [pc, #384]	; (8009724 <HAL_DMA_Start_IT+0x208>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d031      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a5f      	ldr	r2, [pc, #380]	; (8009728 <HAL_DMA_Start_IT+0x20c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d02c      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a5d      	ldr	r2, [pc, #372]	; (800972c <HAL_DMA_Start_IT+0x210>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d027      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a5c      	ldr	r2, [pc, #368]	; (8009730 <HAL_DMA_Start_IT+0x214>)
 80095c0:	4293      	cmp	r3, r2
 80095c2:	d022      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a5a      	ldr	r2, [pc, #360]	; (8009734 <HAL_DMA_Start_IT+0x218>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d01d      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a59      	ldr	r2, [pc, #356]	; (8009738 <HAL_DMA_Start_IT+0x21c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d018      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4a57      	ldr	r2, [pc, #348]	; (800973c <HAL_DMA_Start_IT+0x220>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d013      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a56      	ldr	r2, [pc, #344]	; (8009740 <HAL_DMA_Start_IT+0x224>)
 80095e8:	4293      	cmp	r3, r2
 80095ea:	d00e      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a54      	ldr	r2, [pc, #336]	; (8009744 <HAL_DMA_Start_IT+0x228>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d009      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a53      	ldr	r2, [pc, #332]	; (8009748 <HAL_DMA_Start_IT+0x22c>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d004      	beq.n	800960a <HAL_DMA_Start_IT+0xee>
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a51      	ldr	r2, [pc, #324]	; (800974c <HAL_DMA_Start_IT+0x230>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d108      	bne.n	800961c <HAL_DMA_Start_IT+0x100>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	e007      	b.n	800962c <HAL_DMA_Start_IT+0x110>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 0201 	bic.w	r2, r2, #1
 800962a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	68b9      	ldr	r1, [r7, #8]
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f001 fe6a 	bl	800b30c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a34      	ldr	r2, [pc, #208]	; (8009710 <HAL_DMA_Start_IT+0x1f4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d04a      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a33      	ldr	r2, [pc, #204]	; (8009714 <HAL_DMA_Start_IT+0x1f8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d045      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a31      	ldr	r2, [pc, #196]	; (8009718 <HAL_DMA_Start_IT+0x1fc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d040      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a30      	ldr	r2, [pc, #192]	; (800971c <HAL_DMA_Start_IT+0x200>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d03b      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a2e      	ldr	r2, [pc, #184]	; (8009720 <HAL_DMA_Start_IT+0x204>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d036      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a2d      	ldr	r2, [pc, #180]	; (8009724 <HAL_DMA_Start_IT+0x208>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d031      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a2b      	ldr	r2, [pc, #172]	; (8009728 <HAL_DMA_Start_IT+0x20c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d02c      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a2a      	ldr	r2, [pc, #168]	; (800972c <HAL_DMA_Start_IT+0x210>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d027      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a28      	ldr	r2, [pc, #160]	; (8009730 <HAL_DMA_Start_IT+0x214>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d022      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a27      	ldr	r2, [pc, #156]	; (8009734 <HAL_DMA_Start_IT+0x218>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d01d      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a25      	ldr	r2, [pc, #148]	; (8009738 <HAL_DMA_Start_IT+0x21c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d018      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a24      	ldr	r2, [pc, #144]	; (800973c <HAL_DMA_Start_IT+0x220>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d013      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a22      	ldr	r2, [pc, #136]	; (8009740 <HAL_DMA_Start_IT+0x224>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d00e      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a21      	ldr	r2, [pc, #132]	; (8009744 <HAL_DMA_Start_IT+0x228>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d009      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <HAL_DMA_Start_IT+0x22c>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d004      	beq.n	80096d8 <HAL_DMA_Start_IT+0x1bc>
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4a1e      	ldr	r2, [pc, #120]	; (800974c <HAL_DMA_Start_IT+0x230>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d101      	bne.n	80096dc <HAL_DMA_Start_IT+0x1c0>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <HAL_DMA_Start_IT+0x1c2>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d036      	beq.n	8009750 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f023 021e 	bic.w	r2, r3, #30
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f042 0216 	orr.w	r2, r2, #22
 80096f4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d03e      	beq.n	800977c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0208 	orr.w	r2, r2, #8
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e035      	b.n	800977c <HAL_DMA_Start_IT+0x260>
 8009710:	40020010 	.word	0x40020010
 8009714:	40020028 	.word	0x40020028
 8009718:	40020040 	.word	0x40020040
 800971c:	40020058 	.word	0x40020058
 8009720:	40020070 	.word	0x40020070
 8009724:	40020088 	.word	0x40020088
 8009728:	400200a0 	.word	0x400200a0
 800972c:	400200b8 	.word	0x400200b8
 8009730:	40020410 	.word	0x40020410
 8009734:	40020428 	.word	0x40020428
 8009738:	40020440 	.word	0x40020440
 800973c:	40020458 	.word	0x40020458
 8009740:	40020470 	.word	0x40020470
 8009744:	40020488 	.word	0x40020488
 8009748:	400204a0 	.word	0x400204a0
 800974c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f023 020e 	bic.w	r2, r3, #14
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 020a 	orr.w	r2, r2, #10
 8009762:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009768:	2b00      	cmp	r3, #0
 800976a:	d007      	beq.n	800977c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f042 0204 	orr.w	r2, r2, #4
 800977a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a83      	ldr	r2, [pc, #524]	; (8009990 <HAL_DMA_Start_IT+0x474>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d072      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a82      	ldr	r2, [pc, #520]	; (8009994 <HAL_DMA_Start_IT+0x478>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d06d      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a80      	ldr	r2, [pc, #512]	; (8009998 <HAL_DMA_Start_IT+0x47c>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d068      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a7f      	ldr	r2, [pc, #508]	; (800999c <HAL_DMA_Start_IT+0x480>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d063      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a7d      	ldr	r2, [pc, #500]	; (80099a0 <HAL_DMA_Start_IT+0x484>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d05e      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a7c      	ldr	r2, [pc, #496]	; (80099a4 <HAL_DMA_Start_IT+0x488>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d059      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a7a      	ldr	r2, [pc, #488]	; (80099a8 <HAL_DMA_Start_IT+0x48c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d054      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a79      	ldr	r2, [pc, #484]	; (80099ac <HAL_DMA_Start_IT+0x490>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d04f      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a77      	ldr	r2, [pc, #476]	; (80099b0 <HAL_DMA_Start_IT+0x494>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d04a      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a76      	ldr	r2, [pc, #472]	; (80099b4 <HAL_DMA_Start_IT+0x498>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d045      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a74      	ldr	r2, [pc, #464]	; (80099b8 <HAL_DMA_Start_IT+0x49c>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d040      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a73      	ldr	r2, [pc, #460]	; (80099bc <HAL_DMA_Start_IT+0x4a0>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d03b      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a71      	ldr	r2, [pc, #452]	; (80099c0 <HAL_DMA_Start_IT+0x4a4>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d036      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a70      	ldr	r2, [pc, #448]	; (80099c4 <HAL_DMA_Start_IT+0x4a8>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d031      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a6e      	ldr	r2, [pc, #440]	; (80099c8 <HAL_DMA_Start_IT+0x4ac>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d02c      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a6d      	ldr	r2, [pc, #436]	; (80099cc <HAL_DMA_Start_IT+0x4b0>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d027      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a6b      	ldr	r2, [pc, #428]	; (80099d0 <HAL_DMA_Start_IT+0x4b4>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d022      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a6a      	ldr	r2, [pc, #424]	; (80099d4 <HAL_DMA_Start_IT+0x4b8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d01d      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a68      	ldr	r2, [pc, #416]	; (80099d8 <HAL_DMA_Start_IT+0x4bc>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d018      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a67      	ldr	r2, [pc, #412]	; (80099dc <HAL_DMA_Start_IT+0x4c0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d013      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a65      	ldr	r2, [pc, #404]	; (80099e0 <HAL_DMA_Start_IT+0x4c4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00e      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a64      	ldr	r2, [pc, #400]	; (80099e4 <HAL_DMA_Start_IT+0x4c8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d009      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a62      	ldr	r2, [pc, #392]	; (80099e8 <HAL_DMA_Start_IT+0x4cc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d004      	beq.n	800986c <HAL_DMA_Start_IT+0x350>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a61      	ldr	r2, [pc, #388]	; (80099ec <HAL_DMA_Start_IT+0x4d0>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d101      	bne.n	8009870 <HAL_DMA_Start_IT+0x354>
 800986c:	2301      	movs	r3, #1
 800986e:	e000      	b.n	8009872 <HAL_DMA_Start_IT+0x356>
 8009870:	2300      	movs	r3, #0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d01a      	beq.n	80098ac <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d007      	beq.n	8009894 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009892:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009898:	2b00      	cmp	r3, #0
 800989a:	d007      	beq.n	80098ac <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80098a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098aa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4a37      	ldr	r2, [pc, #220]	; (8009990 <HAL_DMA_Start_IT+0x474>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d04a      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a36      	ldr	r2, [pc, #216]	; (8009994 <HAL_DMA_Start_IT+0x478>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d045      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a34      	ldr	r2, [pc, #208]	; (8009998 <HAL_DMA_Start_IT+0x47c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d040      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a33      	ldr	r2, [pc, #204]	; (800999c <HAL_DMA_Start_IT+0x480>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d03b      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a31      	ldr	r2, [pc, #196]	; (80099a0 <HAL_DMA_Start_IT+0x484>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d036      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a30      	ldr	r2, [pc, #192]	; (80099a4 <HAL_DMA_Start_IT+0x488>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d031      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a2e      	ldr	r2, [pc, #184]	; (80099a8 <HAL_DMA_Start_IT+0x48c>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d02c      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a2d      	ldr	r2, [pc, #180]	; (80099ac <HAL_DMA_Start_IT+0x490>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d027      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a2b      	ldr	r2, [pc, #172]	; (80099b0 <HAL_DMA_Start_IT+0x494>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d022      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a2a      	ldr	r2, [pc, #168]	; (80099b4 <HAL_DMA_Start_IT+0x498>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d01d      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a28      	ldr	r2, [pc, #160]	; (80099b8 <HAL_DMA_Start_IT+0x49c>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d018      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a27      	ldr	r2, [pc, #156]	; (80099bc <HAL_DMA_Start_IT+0x4a0>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a25      	ldr	r2, [pc, #148]	; (80099c0 <HAL_DMA_Start_IT+0x4a4>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00e      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a24      	ldr	r2, [pc, #144]	; (80099c4 <HAL_DMA_Start_IT+0x4a8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d009      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a22      	ldr	r2, [pc, #136]	; (80099c8 <HAL_DMA_Start_IT+0x4ac>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <HAL_DMA_Start_IT+0x430>
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a21      	ldr	r2, [pc, #132]	; (80099cc <HAL_DMA_Start_IT+0x4b0>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d108      	bne.n	800995e <HAL_DMA_Start_IT+0x442>
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f042 0201 	orr.w	r2, r2, #1
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	e012      	b.n	8009984 <HAL_DMA_Start_IT+0x468>
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f042 0201 	orr.w	r2, r2, #1
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	e009      	b.n	8009984 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009976:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009980:	2301      	movs	r3, #1
 8009982:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009984:	7dfb      	ldrb	r3, [r7, #23]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	bf00      	nop
 8009990:	40020010 	.word	0x40020010
 8009994:	40020028 	.word	0x40020028
 8009998:	40020040 	.word	0x40020040
 800999c:	40020058 	.word	0x40020058
 80099a0:	40020070 	.word	0x40020070
 80099a4:	40020088 	.word	0x40020088
 80099a8:	400200a0 	.word	0x400200a0
 80099ac:	400200b8 	.word	0x400200b8
 80099b0:	40020410 	.word	0x40020410
 80099b4:	40020428 	.word	0x40020428
 80099b8:	40020440 	.word	0x40020440
 80099bc:	40020458 	.word	0x40020458
 80099c0:	40020470 	.word	0x40020470
 80099c4:	40020488 	.word	0x40020488
 80099c8:	400204a0 	.word	0x400204a0
 80099cc:	400204b8 	.word	0x400204b8
 80099d0:	58025408 	.word	0x58025408
 80099d4:	5802541c 	.word	0x5802541c
 80099d8:	58025430 	.word	0x58025430
 80099dc:	58025444 	.word	0x58025444
 80099e0:	58025458 	.word	0x58025458
 80099e4:	5802546c 	.word	0x5802546c
 80099e8:	58025480 	.word	0x58025480
 80099ec:	58025494 	.word	0x58025494

080099f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80099f8:	f7fd fb68 	bl	80070cc <HAL_GetTick>
 80099fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	e2dc      	b.n	8009fc2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d008      	beq.n	8009a26 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2280      	movs	r2, #128	; 0x80
 8009a18:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e2cd      	b.n	8009fc2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a76      	ldr	r2, [pc, #472]	; (8009c04 <HAL_DMA_Abort+0x214>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d04a      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a74      	ldr	r2, [pc, #464]	; (8009c08 <HAL_DMA_Abort+0x218>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d045      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a73      	ldr	r2, [pc, #460]	; (8009c0c <HAL_DMA_Abort+0x21c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d040      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a71      	ldr	r2, [pc, #452]	; (8009c10 <HAL_DMA_Abort+0x220>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d03b      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a70      	ldr	r2, [pc, #448]	; (8009c14 <HAL_DMA_Abort+0x224>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d036      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a6e      	ldr	r2, [pc, #440]	; (8009c18 <HAL_DMA_Abort+0x228>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d031      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a6d      	ldr	r2, [pc, #436]	; (8009c1c <HAL_DMA_Abort+0x22c>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d02c      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a6b      	ldr	r2, [pc, #428]	; (8009c20 <HAL_DMA_Abort+0x230>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d027      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a6a      	ldr	r2, [pc, #424]	; (8009c24 <HAL_DMA_Abort+0x234>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d022      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a68      	ldr	r2, [pc, #416]	; (8009c28 <HAL_DMA_Abort+0x238>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d01d      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a67      	ldr	r2, [pc, #412]	; (8009c2c <HAL_DMA_Abort+0x23c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d018      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a65      	ldr	r2, [pc, #404]	; (8009c30 <HAL_DMA_Abort+0x240>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d013      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a64      	ldr	r2, [pc, #400]	; (8009c34 <HAL_DMA_Abort+0x244>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d00e      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a62      	ldr	r2, [pc, #392]	; (8009c38 <HAL_DMA_Abort+0x248>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d009      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a61      	ldr	r2, [pc, #388]	; (8009c3c <HAL_DMA_Abort+0x24c>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d004      	beq.n	8009ac6 <HAL_DMA_Abort+0xd6>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a5f      	ldr	r2, [pc, #380]	; (8009c40 <HAL_DMA_Abort+0x250>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d101      	bne.n	8009aca <HAL_DMA_Abort+0xda>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <HAL_DMA_Abort+0xdc>
 8009aca:	2300      	movs	r3, #0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d013      	beq.n	8009af8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f022 021e 	bic.w	r2, r2, #30
 8009ade:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	695a      	ldr	r2, [r3, #20]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009aee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	617b      	str	r3, [r7, #20]
 8009af6:	e00a      	b.n	8009b0e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f022 020e 	bic.w	r2, r2, #14
 8009b06:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a3c      	ldr	r2, [pc, #240]	; (8009c04 <HAL_DMA_Abort+0x214>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d072      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a3a      	ldr	r2, [pc, #232]	; (8009c08 <HAL_DMA_Abort+0x218>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d06d      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a39      	ldr	r2, [pc, #228]	; (8009c0c <HAL_DMA_Abort+0x21c>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d068      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a37      	ldr	r2, [pc, #220]	; (8009c10 <HAL_DMA_Abort+0x220>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d063      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a36      	ldr	r2, [pc, #216]	; (8009c14 <HAL_DMA_Abort+0x224>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d05e      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a34      	ldr	r2, [pc, #208]	; (8009c18 <HAL_DMA_Abort+0x228>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d059      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a33      	ldr	r2, [pc, #204]	; (8009c1c <HAL_DMA_Abort+0x22c>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d054      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a31      	ldr	r2, [pc, #196]	; (8009c20 <HAL_DMA_Abort+0x230>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d04f      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4a30      	ldr	r2, [pc, #192]	; (8009c24 <HAL_DMA_Abort+0x234>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d04a      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4a2e      	ldr	r2, [pc, #184]	; (8009c28 <HAL_DMA_Abort+0x238>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d045      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a2d      	ldr	r2, [pc, #180]	; (8009c2c <HAL_DMA_Abort+0x23c>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d040      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a2b      	ldr	r2, [pc, #172]	; (8009c30 <HAL_DMA_Abort+0x240>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d03b      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <HAL_DMA_Abort+0x244>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d036      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a28      	ldr	r2, [pc, #160]	; (8009c38 <HAL_DMA_Abort+0x248>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d031      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a27      	ldr	r2, [pc, #156]	; (8009c3c <HAL_DMA_Abort+0x24c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d02c      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a25      	ldr	r2, [pc, #148]	; (8009c40 <HAL_DMA_Abort+0x250>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d027      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a24      	ldr	r2, [pc, #144]	; (8009c44 <HAL_DMA_Abort+0x254>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d022      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a22      	ldr	r2, [pc, #136]	; (8009c48 <HAL_DMA_Abort+0x258>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d01d      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <HAL_DMA_Abort+0x25c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d018      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <HAL_DMA_Abort+0x260>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d013      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_DMA_Abort+0x264>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d00e      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1c      	ldr	r2, [pc, #112]	; (8009c58 <HAL_DMA_Abort+0x268>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d009      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <HAL_DMA_Abort+0x26c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d004      	beq.n	8009bfe <HAL_DMA_Abort+0x20e>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a19      	ldr	r2, [pc, #100]	; (8009c60 <HAL_DMA_Abort+0x270>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d132      	bne.n	8009c64 <HAL_DMA_Abort+0x274>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e031      	b.n	8009c66 <HAL_DMA_Abort+0x276>
 8009c02:	bf00      	nop
 8009c04:	40020010 	.word	0x40020010
 8009c08:	40020028 	.word	0x40020028
 8009c0c:	40020040 	.word	0x40020040
 8009c10:	40020058 	.word	0x40020058
 8009c14:	40020070 	.word	0x40020070
 8009c18:	40020088 	.word	0x40020088
 8009c1c:	400200a0 	.word	0x400200a0
 8009c20:	400200b8 	.word	0x400200b8
 8009c24:	40020410 	.word	0x40020410
 8009c28:	40020428 	.word	0x40020428
 8009c2c:	40020440 	.word	0x40020440
 8009c30:	40020458 	.word	0x40020458
 8009c34:	40020470 	.word	0x40020470
 8009c38:	40020488 	.word	0x40020488
 8009c3c:	400204a0 	.word	0x400204a0
 8009c40:	400204b8 	.word	0x400204b8
 8009c44:	58025408 	.word	0x58025408
 8009c48:	5802541c 	.word	0x5802541c
 8009c4c:	58025430 	.word	0x58025430
 8009c50:	58025444 	.word	0x58025444
 8009c54:	58025458 	.word	0x58025458
 8009c58:	5802546c 	.word	0x5802546c
 8009c5c:	58025480 	.word	0x58025480
 8009c60:	58025494 	.word	0x58025494
 8009c64:	2300      	movs	r3, #0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c78:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a6d      	ldr	r2, [pc, #436]	; (8009e34 <HAL_DMA_Abort+0x444>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d04a      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a6b      	ldr	r2, [pc, #428]	; (8009e38 <HAL_DMA_Abort+0x448>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d045      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a6a      	ldr	r2, [pc, #424]	; (8009e3c <HAL_DMA_Abort+0x44c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d040      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a68      	ldr	r2, [pc, #416]	; (8009e40 <HAL_DMA_Abort+0x450>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d03b      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a67      	ldr	r2, [pc, #412]	; (8009e44 <HAL_DMA_Abort+0x454>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d036      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a65      	ldr	r2, [pc, #404]	; (8009e48 <HAL_DMA_Abort+0x458>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d031      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a64      	ldr	r2, [pc, #400]	; (8009e4c <HAL_DMA_Abort+0x45c>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d02c      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a62      	ldr	r2, [pc, #392]	; (8009e50 <HAL_DMA_Abort+0x460>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d027      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a61      	ldr	r2, [pc, #388]	; (8009e54 <HAL_DMA_Abort+0x464>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d022      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	4a5f      	ldr	r2, [pc, #380]	; (8009e58 <HAL_DMA_Abort+0x468>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d01d      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	4a5e      	ldr	r2, [pc, #376]	; (8009e5c <HAL_DMA_Abort+0x46c>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d018      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4a5c      	ldr	r2, [pc, #368]	; (8009e60 <HAL_DMA_Abort+0x470>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d013      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4a5b      	ldr	r2, [pc, #364]	; (8009e64 <HAL_DMA_Abort+0x474>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00e      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a59      	ldr	r2, [pc, #356]	; (8009e68 <HAL_DMA_Abort+0x478>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d009      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a58      	ldr	r2, [pc, #352]	; (8009e6c <HAL_DMA_Abort+0x47c>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d004      	beq.n	8009d1a <HAL_DMA_Abort+0x32a>
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4a56      	ldr	r2, [pc, #344]	; (8009e70 <HAL_DMA_Abort+0x480>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d108      	bne.n	8009d2c <HAL_DMA_Abort+0x33c>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	e007      	b.n	8009d3c <HAL_DMA_Abort+0x34c>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0201 	bic.w	r2, r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009d3c:	e013      	b.n	8009d66 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009d3e:	f7fd f9c5 	bl	80070cc <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b05      	cmp	r3, #5
 8009d4a:	d90c      	bls.n	8009d66 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2203      	movs	r2, #3
 8009d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e12d      	b.n	8009fc2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d1e5      	bne.n	8009d3e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a2f      	ldr	r2, [pc, #188]	; (8009e34 <HAL_DMA_Abort+0x444>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d04a      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a2d      	ldr	r2, [pc, #180]	; (8009e38 <HAL_DMA_Abort+0x448>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d045      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a2c      	ldr	r2, [pc, #176]	; (8009e3c <HAL_DMA_Abort+0x44c>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d040      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a2a      	ldr	r2, [pc, #168]	; (8009e40 <HAL_DMA_Abort+0x450>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d03b      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a29      	ldr	r2, [pc, #164]	; (8009e44 <HAL_DMA_Abort+0x454>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d036      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a27      	ldr	r2, [pc, #156]	; (8009e48 <HAL_DMA_Abort+0x458>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d031      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a26      	ldr	r2, [pc, #152]	; (8009e4c <HAL_DMA_Abort+0x45c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d02c      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a24      	ldr	r2, [pc, #144]	; (8009e50 <HAL_DMA_Abort+0x460>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d027      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a23      	ldr	r2, [pc, #140]	; (8009e54 <HAL_DMA_Abort+0x464>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d022      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a21      	ldr	r2, [pc, #132]	; (8009e58 <HAL_DMA_Abort+0x468>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d01d      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a20      	ldr	r2, [pc, #128]	; (8009e5c <HAL_DMA_Abort+0x46c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d018      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a1e      	ldr	r2, [pc, #120]	; (8009e60 <HAL_DMA_Abort+0x470>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d013      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a1d      	ldr	r2, [pc, #116]	; (8009e64 <HAL_DMA_Abort+0x474>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d00e      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a1b      	ldr	r2, [pc, #108]	; (8009e68 <HAL_DMA_Abort+0x478>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d009      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a1a      	ldr	r2, [pc, #104]	; (8009e6c <HAL_DMA_Abort+0x47c>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d004      	beq.n	8009e12 <HAL_DMA_Abort+0x422>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a18      	ldr	r2, [pc, #96]	; (8009e70 <HAL_DMA_Abort+0x480>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d101      	bne.n	8009e16 <HAL_DMA_Abort+0x426>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e000      	b.n	8009e18 <HAL_DMA_Abort+0x428>
 8009e16:	2300      	movs	r3, #0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d02b      	beq.n	8009e74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e26:	f003 031f 	and.w	r3, r3, #31
 8009e2a:	223f      	movs	r2, #63	; 0x3f
 8009e2c:	409a      	lsls	r2, r3
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	609a      	str	r2, [r3, #8]
 8009e32:	e02a      	b.n	8009e8a <HAL_DMA_Abort+0x49a>
 8009e34:	40020010 	.word	0x40020010
 8009e38:	40020028 	.word	0x40020028
 8009e3c:	40020040 	.word	0x40020040
 8009e40:	40020058 	.word	0x40020058
 8009e44:	40020070 	.word	0x40020070
 8009e48:	40020088 	.word	0x40020088
 8009e4c:	400200a0 	.word	0x400200a0
 8009e50:	400200b8 	.word	0x400200b8
 8009e54:	40020410 	.word	0x40020410
 8009e58:	40020428 	.word	0x40020428
 8009e5c:	40020440 	.word	0x40020440
 8009e60:	40020458 	.word	0x40020458
 8009e64:	40020470 	.word	0x40020470
 8009e68:	40020488 	.word	0x40020488
 8009e6c:	400204a0 	.word	0x400204a0
 8009e70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e7e:	f003 031f 	and.w	r3, r3, #31
 8009e82:	2201      	movs	r2, #1
 8009e84:	409a      	lsls	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a4f      	ldr	r2, [pc, #316]	; (8009fcc <HAL_DMA_Abort+0x5dc>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d072      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a4d      	ldr	r2, [pc, #308]	; (8009fd0 <HAL_DMA_Abort+0x5e0>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d06d      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a4c      	ldr	r2, [pc, #304]	; (8009fd4 <HAL_DMA_Abort+0x5e4>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d068      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a4a      	ldr	r2, [pc, #296]	; (8009fd8 <HAL_DMA_Abort+0x5e8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d063      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a49      	ldr	r2, [pc, #292]	; (8009fdc <HAL_DMA_Abort+0x5ec>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d05e      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a47      	ldr	r2, [pc, #284]	; (8009fe0 <HAL_DMA_Abort+0x5f0>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d059      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a46      	ldr	r2, [pc, #280]	; (8009fe4 <HAL_DMA_Abort+0x5f4>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d054      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a44      	ldr	r2, [pc, #272]	; (8009fe8 <HAL_DMA_Abort+0x5f8>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d04f      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	4a43      	ldr	r2, [pc, #268]	; (8009fec <HAL_DMA_Abort+0x5fc>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d04a      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a41      	ldr	r2, [pc, #260]	; (8009ff0 <HAL_DMA_Abort+0x600>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d045      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a40      	ldr	r2, [pc, #256]	; (8009ff4 <HAL_DMA_Abort+0x604>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d040      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4a3e      	ldr	r2, [pc, #248]	; (8009ff8 <HAL_DMA_Abort+0x608>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d03b      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4a3d      	ldr	r2, [pc, #244]	; (8009ffc <HAL_DMA_Abort+0x60c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d036      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a3b      	ldr	r2, [pc, #236]	; (800a000 <HAL_DMA_Abort+0x610>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d031      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a3a      	ldr	r2, [pc, #232]	; (800a004 <HAL_DMA_Abort+0x614>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d02c      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	4a38      	ldr	r2, [pc, #224]	; (800a008 <HAL_DMA_Abort+0x618>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d027      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4a37      	ldr	r2, [pc, #220]	; (800a00c <HAL_DMA_Abort+0x61c>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d022      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a35      	ldr	r2, [pc, #212]	; (800a010 <HAL_DMA_Abort+0x620>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d01d      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a34      	ldr	r2, [pc, #208]	; (800a014 <HAL_DMA_Abort+0x624>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d018      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a32      	ldr	r2, [pc, #200]	; (800a018 <HAL_DMA_Abort+0x628>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d013      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a31      	ldr	r2, [pc, #196]	; (800a01c <HAL_DMA_Abort+0x62c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d00e      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a2f      	ldr	r2, [pc, #188]	; (800a020 <HAL_DMA_Abort+0x630>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d009      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a2e      	ldr	r2, [pc, #184]	; (800a024 <HAL_DMA_Abort+0x634>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d004      	beq.n	8009f7a <HAL_DMA_Abort+0x58a>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a2c      	ldr	r2, [pc, #176]	; (800a028 <HAL_DMA_Abort+0x638>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d101      	bne.n	8009f7e <HAL_DMA_Abort+0x58e>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e000      	b.n	8009f80 <HAL_DMA_Abort+0x590>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d015      	beq.n	8009fb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009f8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00c      	beq.n	8009fb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009fa4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009fae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	40020010 	.word	0x40020010
 8009fd0:	40020028 	.word	0x40020028
 8009fd4:	40020040 	.word	0x40020040
 8009fd8:	40020058 	.word	0x40020058
 8009fdc:	40020070 	.word	0x40020070
 8009fe0:	40020088 	.word	0x40020088
 8009fe4:	400200a0 	.word	0x400200a0
 8009fe8:	400200b8 	.word	0x400200b8
 8009fec:	40020410 	.word	0x40020410
 8009ff0:	40020428 	.word	0x40020428
 8009ff4:	40020440 	.word	0x40020440
 8009ff8:	40020458 	.word	0x40020458
 8009ffc:	40020470 	.word	0x40020470
 800a000:	40020488 	.word	0x40020488
 800a004:	400204a0 	.word	0x400204a0
 800a008:	400204b8 	.word	0x400204b8
 800a00c:	58025408 	.word	0x58025408
 800a010:	5802541c 	.word	0x5802541c
 800a014:	58025430 	.word	0x58025430
 800a018:	58025444 	.word	0x58025444
 800a01c:	58025458 	.word	0x58025458
 800a020:	5802546c 	.word	0x5802546c
 800a024:	58025480 	.word	0x58025480
 800a028:	58025494 	.word	0x58025494

0800a02c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e237      	b.n	800a4ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b02      	cmp	r3, #2
 800a048:	d004      	beq.n	800a054 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2280      	movs	r2, #128	; 0x80
 800a04e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e22c      	b.n	800a4ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a5c      	ldr	r2, [pc, #368]	; (800a1cc <HAL_DMA_Abort_IT+0x1a0>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d04a      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a5b      	ldr	r2, [pc, #364]	; (800a1d0 <HAL_DMA_Abort_IT+0x1a4>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d045      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a59      	ldr	r2, [pc, #356]	; (800a1d4 <HAL_DMA_Abort_IT+0x1a8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d040      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a58      	ldr	r2, [pc, #352]	; (800a1d8 <HAL_DMA_Abort_IT+0x1ac>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d03b      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a56      	ldr	r2, [pc, #344]	; (800a1dc <HAL_DMA_Abort_IT+0x1b0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d036      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a55      	ldr	r2, [pc, #340]	; (800a1e0 <HAL_DMA_Abort_IT+0x1b4>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d031      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a53      	ldr	r2, [pc, #332]	; (800a1e4 <HAL_DMA_Abort_IT+0x1b8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d02c      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a52      	ldr	r2, [pc, #328]	; (800a1e8 <HAL_DMA_Abort_IT+0x1bc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d027      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a50      	ldr	r2, [pc, #320]	; (800a1ec <HAL_DMA_Abort_IT+0x1c0>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d022      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a4f      	ldr	r2, [pc, #316]	; (800a1f0 <HAL_DMA_Abort_IT+0x1c4>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d01d      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a4d      	ldr	r2, [pc, #308]	; (800a1f4 <HAL_DMA_Abort_IT+0x1c8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d018      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a4c      	ldr	r2, [pc, #304]	; (800a1f8 <HAL_DMA_Abort_IT+0x1cc>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d013      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a4a      	ldr	r2, [pc, #296]	; (800a1fc <HAL_DMA_Abort_IT+0x1d0>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d00e      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a49      	ldr	r2, [pc, #292]	; (800a200 <HAL_DMA_Abort_IT+0x1d4>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d009      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a47      	ldr	r2, [pc, #284]	; (800a204 <HAL_DMA_Abort_IT+0x1d8>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d004      	beq.n	800a0f4 <HAL_DMA_Abort_IT+0xc8>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a46      	ldr	r2, [pc, #280]	; (800a208 <HAL_DMA_Abort_IT+0x1dc>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d101      	bne.n	800a0f8 <HAL_DMA_Abort_IT+0xcc>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <HAL_DMA_Abort_IT+0xce>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 8086 	beq.w	800a20c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2204      	movs	r2, #4
 800a104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a2f      	ldr	r2, [pc, #188]	; (800a1cc <HAL_DMA_Abort_IT+0x1a0>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d04a      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a2e      	ldr	r2, [pc, #184]	; (800a1d0 <HAL_DMA_Abort_IT+0x1a4>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d045      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a2c      	ldr	r2, [pc, #176]	; (800a1d4 <HAL_DMA_Abort_IT+0x1a8>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d040      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a2b      	ldr	r2, [pc, #172]	; (800a1d8 <HAL_DMA_Abort_IT+0x1ac>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d03b      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a29      	ldr	r2, [pc, #164]	; (800a1dc <HAL_DMA_Abort_IT+0x1b0>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d036      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	4a28      	ldr	r2, [pc, #160]	; (800a1e0 <HAL_DMA_Abort_IT+0x1b4>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d031      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <HAL_DMA_Abort_IT+0x1b8>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d02c      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a25      	ldr	r2, [pc, #148]	; (800a1e8 <HAL_DMA_Abort_IT+0x1bc>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d027      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a23      	ldr	r2, [pc, #140]	; (800a1ec <HAL_DMA_Abort_IT+0x1c0>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d022      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a22      	ldr	r2, [pc, #136]	; (800a1f0 <HAL_DMA_Abort_IT+0x1c4>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d01d      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a20      	ldr	r2, [pc, #128]	; (800a1f4 <HAL_DMA_Abort_IT+0x1c8>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d018      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <HAL_DMA_Abort_IT+0x1cc>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d013      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4a1d      	ldr	r2, [pc, #116]	; (800a1fc <HAL_DMA_Abort_IT+0x1d0>)
 800a186:	4293      	cmp	r3, r2
 800a188:	d00e      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <HAL_DMA_Abort_IT+0x1d4>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d009      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a1a      	ldr	r2, [pc, #104]	; (800a204 <HAL_DMA_Abort_IT+0x1d8>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d004      	beq.n	800a1a8 <HAL_DMA_Abort_IT+0x17c>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	4a19      	ldr	r2, [pc, #100]	; (800a208 <HAL_DMA_Abort_IT+0x1dc>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d108      	bne.n	800a1ba <HAL_DMA_Abort_IT+0x18e>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f022 0201 	bic.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	e178      	b.n	800a4ac <HAL_DMA_Abort_IT+0x480>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f022 0201 	bic.w	r2, r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	e16f      	b.n	800a4ac <HAL_DMA_Abort_IT+0x480>
 800a1cc:	40020010 	.word	0x40020010
 800a1d0:	40020028 	.word	0x40020028
 800a1d4:	40020040 	.word	0x40020040
 800a1d8:	40020058 	.word	0x40020058
 800a1dc:	40020070 	.word	0x40020070
 800a1e0:	40020088 	.word	0x40020088
 800a1e4:	400200a0 	.word	0x400200a0
 800a1e8:	400200b8 	.word	0x400200b8
 800a1ec:	40020410 	.word	0x40020410
 800a1f0:	40020428 	.word	0x40020428
 800a1f4:	40020440 	.word	0x40020440
 800a1f8:	40020458 	.word	0x40020458
 800a1fc:	40020470 	.word	0x40020470
 800a200:	40020488 	.word	0x40020488
 800a204:	400204a0 	.word	0x400204a0
 800a208:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f022 020e 	bic.w	r2, r2, #14
 800a21a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a6c      	ldr	r2, [pc, #432]	; (800a3d4 <HAL_DMA_Abort_IT+0x3a8>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d04a      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a6b      	ldr	r2, [pc, #428]	; (800a3d8 <HAL_DMA_Abort_IT+0x3ac>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d045      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a69      	ldr	r2, [pc, #420]	; (800a3dc <HAL_DMA_Abort_IT+0x3b0>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d040      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a68      	ldr	r2, [pc, #416]	; (800a3e0 <HAL_DMA_Abort_IT+0x3b4>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d03b      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a66      	ldr	r2, [pc, #408]	; (800a3e4 <HAL_DMA_Abort_IT+0x3b8>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d036      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a65      	ldr	r2, [pc, #404]	; (800a3e8 <HAL_DMA_Abort_IT+0x3bc>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d031      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a63      	ldr	r2, [pc, #396]	; (800a3ec <HAL_DMA_Abort_IT+0x3c0>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d02c      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a62      	ldr	r2, [pc, #392]	; (800a3f0 <HAL_DMA_Abort_IT+0x3c4>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d027      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a60      	ldr	r2, [pc, #384]	; (800a3f4 <HAL_DMA_Abort_IT+0x3c8>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d022      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a5f      	ldr	r2, [pc, #380]	; (800a3f8 <HAL_DMA_Abort_IT+0x3cc>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d01d      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a5d      	ldr	r2, [pc, #372]	; (800a3fc <HAL_DMA_Abort_IT+0x3d0>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d018      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a5c      	ldr	r2, [pc, #368]	; (800a400 <HAL_DMA_Abort_IT+0x3d4>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d013      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a5a      	ldr	r2, [pc, #360]	; (800a404 <HAL_DMA_Abort_IT+0x3d8>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00e      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a59      	ldr	r2, [pc, #356]	; (800a408 <HAL_DMA_Abort_IT+0x3dc>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d009      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a57      	ldr	r2, [pc, #348]	; (800a40c <HAL_DMA_Abort_IT+0x3e0>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d004      	beq.n	800a2bc <HAL_DMA_Abort_IT+0x290>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a56      	ldr	r2, [pc, #344]	; (800a410 <HAL_DMA_Abort_IT+0x3e4>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d108      	bne.n	800a2ce <HAL_DMA_Abort_IT+0x2a2>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f022 0201 	bic.w	r2, r2, #1
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	e007      	b.n	800a2de <HAL_DMA_Abort_IT+0x2b2>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f022 0201 	bic.w	r2, r2, #1
 800a2dc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a3c      	ldr	r2, [pc, #240]	; (800a3d4 <HAL_DMA_Abort_IT+0x3a8>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d072      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a3a      	ldr	r2, [pc, #232]	; (800a3d8 <HAL_DMA_Abort_IT+0x3ac>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d06d      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a39      	ldr	r2, [pc, #228]	; (800a3dc <HAL_DMA_Abort_IT+0x3b0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d068      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a37      	ldr	r2, [pc, #220]	; (800a3e0 <HAL_DMA_Abort_IT+0x3b4>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d063      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a36      	ldr	r2, [pc, #216]	; (800a3e4 <HAL_DMA_Abort_IT+0x3b8>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d05e      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <HAL_DMA_Abort_IT+0x3bc>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d059      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a33      	ldr	r2, [pc, #204]	; (800a3ec <HAL_DMA_Abort_IT+0x3c0>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d054      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a31      	ldr	r2, [pc, #196]	; (800a3f0 <HAL_DMA_Abort_IT+0x3c4>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d04f      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a30      	ldr	r2, [pc, #192]	; (800a3f4 <HAL_DMA_Abort_IT+0x3c8>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d04a      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a2e      	ldr	r2, [pc, #184]	; (800a3f8 <HAL_DMA_Abort_IT+0x3cc>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d045      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a2d      	ldr	r2, [pc, #180]	; (800a3fc <HAL_DMA_Abort_IT+0x3d0>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d040      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a2b      	ldr	r2, [pc, #172]	; (800a400 <HAL_DMA_Abort_IT+0x3d4>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d03b      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a2a      	ldr	r2, [pc, #168]	; (800a404 <HAL_DMA_Abort_IT+0x3d8>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d036      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a28      	ldr	r2, [pc, #160]	; (800a408 <HAL_DMA_Abort_IT+0x3dc>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d031      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a27      	ldr	r2, [pc, #156]	; (800a40c <HAL_DMA_Abort_IT+0x3e0>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d02c      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a25      	ldr	r2, [pc, #148]	; (800a410 <HAL_DMA_Abort_IT+0x3e4>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d027      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a24      	ldr	r2, [pc, #144]	; (800a414 <HAL_DMA_Abort_IT+0x3e8>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d022      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a22      	ldr	r2, [pc, #136]	; (800a418 <HAL_DMA_Abort_IT+0x3ec>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d01d      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a21      	ldr	r2, [pc, #132]	; (800a41c <HAL_DMA_Abort_IT+0x3f0>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d018      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a1f      	ldr	r2, [pc, #124]	; (800a420 <HAL_DMA_Abort_IT+0x3f4>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d013      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a1e      	ldr	r2, [pc, #120]	; (800a424 <HAL_DMA_Abort_IT+0x3f8>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d00e      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a1c      	ldr	r2, [pc, #112]	; (800a428 <HAL_DMA_Abort_IT+0x3fc>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d009      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a1b      	ldr	r2, [pc, #108]	; (800a42c <HAL_DMA_Abort_IT+0x400>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d004      	beq.n	800a3ce <HAL_DMA_Abort_IT+0x3a2>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a19      	ldr	r2, [pc, #100]	; (800a430 <HAL_DMA_Abort_IT+0x404>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d132      	bne.n	800a434 <HAL_DMA_Abort_IT+0x408>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e031      	b.n	800a436 <HAL_DMA_Abort_IT+0x40a>
 800a3d2:	bf00      	nop
 800a3d4:	40020010 	.word	0x40020010
 800a3d8:	40020028 	.word	0x40020028
 800a3dc:	40020040 	.word	0x40020040
 800a3e0:	40020058 	.word	0x40020058
 800a3e4:	40020070 	.word	0x40020070
 800a3e8:	40020088 	.word	0x40020088
 800a3ec:	400200a0 	.word	0x400200a0
 800a3f0:	400200b8 	.word	0x400200b8
 800a3f4:	40020410 	.word	0x40020410
 800a3f8:	40020428 	.word	0x40020428
 800a3fc:	40020440 	.word	0x40020440
 800a400:	40020458 	.word	0x40020458
 800a404:	40020470 	.word	0x40020470
 800a408:	40020488 	.word	0x40020488
 800a40c:	400204a0 	.word	0x400204a0
 800a410:	400204b8 	.word	0x400204b8
 800a414:	58025408 	.word	0x58025408
 800a418:	5802541c 	.word	0x5802541c
 800a41c:	58025430 	.word	0x58025430
 800a420:	58025444 	.word	0x58025444
 800a424:	58025458 	.word	0x58025458
 800a428:	5802546c 	.word	0x5802546c
 800a42c:	58025480 	.word	0x58025480
 800a430:	58025494 	.word	0x58025494
 800a434:	2300      	movs	r3, #0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d028      	beq.n	800a48c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a444:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a448:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a44e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a454:	f003 031f 	and.w	r3, r3, #31
 800a458:	2201      	movs	r2, #1
 800a45a:	409a      	lsls	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a468:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00c      	beq.n	800a48c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a47c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a480:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a48a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop

0800a4b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b08a      	sub	sp, #40	; 0x28
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a4c4:	4b67      	ldr	r3, [pc, #412]	; (800a664 <HAL_DMA_IRQHandler+0x1ac>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a67      	ldr	r2, [pc, #412]	; (800a668 <HAL_DMA_IRQHandler+0x1b0>)
 800a4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ce:	0a9b      	lsrs	r3, r3, #10
 800a4d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a4de:	6a3b      	ldr	r3, [r7, #32]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a5f      	ldr	r2, [pc, #380]	; (800a66c <HAL_DMA_IRQHandler+0x1b4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d04a      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a5d      	ldr	r2, [pc, #372]	; (800a670 <HAL_DMA_IRQHandler+0x1b8>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d045      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a5c      	ldr	r2, [pc, #368]	; (800a674 <HAL_DMA_IRQHandler+0x1bc>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d040      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	4a5a      	ldr	r2, [pc, #360]	; (800a678 <HAL_DMA_IRQHandler+0x1c0>)
 800a50e:	4293      	cmp	r3, r2
 800a510:	d03b      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4a59      	ldr	r2, [pc, #356]	; (800a67c <HAL_DMA_IRQHandler+0x1c4>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d036      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4a57      	ldr	r2, [pc, #348]	; (800a680 <HAL_DMA_IRQHandler+0x1c8>)
 800a522:	4293      	cmp	r3, r2
 800a524:	d031      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a56      	ldr	r2, [pc, #344]	; (800a684 <HAL_DMA_IRQHandler+0x1cc>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d02c      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a54      	ldr	r2, [pc, #336]	; (800a688 <HAL_DMA_IRQHandler+0x1d0>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d027      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a53      	ldr	r2, [pc, #332]	; (800a68c <HAL_DMA_IRQHandler+0x1d4>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d022      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a51      	ldr	r2, [pc, #324]	; (800a690 <HAL_DMA_IRQHandler+0x1d8>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d01d      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a50      	ldr	r2, [pc, #320]	; (800a694 <HAL_DMA_IRQHandler+0x1dc>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d018      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a4e      	ldr	r2, [pc, #312]	; (800a698 <HAL_DMA_IRQHandler+0x1e0>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d013      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a4d      	ldr	r2, [pc, #308]	; (800a69c <HAL_DMA_IRQHandler+0x1e4>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d00e      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a4b      	ldr	r2, [pc, #300]	; (800a6a0 <HAL_DMA_IRQHandler+0x1e8>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d009      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a4a      	ldr	r2, [pc, #296]	; (800a6a4 <HAL_DMA_IRQHandler+0x1ec>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d004      	beq.n	800a58a <HAL_DMA_IRQHandler+0xd2>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a48      	ldr	r2, [pc, #288]	; (800a6a8 <HAL_DMA_IRQHandler+0x1f0>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d101      	bne.n	800a58e <HAL_DMA_IRQHandler+0xd6>
 800a58a:	2301      	movs	r3, #1
 800a58c:	e000      	b.n	800a590 <HAL_DMA_IRQHandler+0xd8>
 800a58e:	2300      	movs	r3, #0
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 842b 	beq.w	800adec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a59a:	f003 031f 	and.w	r3, r3, #31
 800a59e:	2208      	movs	r2, #8
 800a5a0:	409a      	lsls	r2, r3
 800a5a2:	69bb      	ldr	r3, [r7, #24]
 800a5a4:	4013      	ands	r3, r2
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 80a2 	beq.w	800a6f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a2e      	ldr	r2, [pc, #184]	; (800a66c <HAL_DMA_IRQHandler+0x1b4>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d04a      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a2d      	ldr	r2, [pc, #180]	; (800a670 <HAL_DMA_IRQHandler+0x1b8>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d045      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	4a2b      	ldr	r2, [pc, #172]	; (800a674 <HAL_DMA_IRQHandler+0x1bc>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d040      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a2a      	ldr	r2, [pc, #168]	; (800a678 <HAL_DMA_IRQHandler+0x1c0>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d03b      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a28      	ldr	r2, [pc, #160]	; (800a67c <HAL_DMA_IRQHandler+0x1c4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d036      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a27      	ldr	r2, [pc, #156]	; (800a680 <HAL_DMA_IRQHandler+0x1c8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d031      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a25      	ldr	r2, [pc, #148]	; (800a684 <HAL_DMA_IRQHandler+0x1cc>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d02c      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a24      	ldr	r2, [pc, #144]	; (800a688 <HAL_DMA_IRQHandler+0x1d0>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d027      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a22      	ldr	r2, [pc, #136]	; (800a68c <HAL_DMA_IRQHandler+0x1d4>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d022      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a21      	ldr	r2, [pc, #132]	; (800a690 <HAL_DMA_IRQHandler+0x1d8>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d01d      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4a1f      	ldr	r2, [pc, #124]	; (800a694 <HAL_DMA_IRQHandler+0x1dc>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d018      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4a1e      	ldr	r2, [pc, #120]	; (800a698 <HAL_DMA_IRQHandler+0x1e0>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d013      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4a1c      	ldr	r2, [pc, #112]	; (800a69c <HAL_DMA_IRQHandler+0x1e4>)
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d00e      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a1b      	ldr	r2, [pc, #108]	; (800a6a0 <HAL_DMA_IRQHandler+0x1e8>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d009      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a19      	ldr	r2, [pc, #100]	; (800a6a4 <HAL_DMA_IRQHandler+0x1ec>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d004      	beq.n	800a64c <HAL_DMA_IRQHandler+0x194>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a18      	ldr	r2, [pc, #96]	; (800a6a8 <HAL_DMA_IRQHandler+0x1f0>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d12f      	bne.n	800a6ac <HAL_DMA_IRQHandler+0x1f4>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 0304 	and.w	r3, r3, #4
 800a656:	2b00      	cmp	r3, #0
 800a658:	bf14      	ite	ne
 800a65a:	2301      	movne	r3, #1
 800a65c:	2300      	moveq	r3, #0
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	e02e      	b.n	800a6c0 <HAL_DMA_IRQHandler+0x208>
 800a662:	bf00      	nop
 800a664:	24000040 	.word	0x24000040
 800a668:	1b4e81b5 	.word	0x1b4e81b5
 800a66c:	40020010 	.word	0x40020010
 800a670:	40020028 	.word	0x40020028
 800a674:	40020040 	.word	0x40020040
 800a678:	40020058 	.word	0x40020058
 800a67c:	40020070 	.word	0x40020070
 800a680:	40020088 	.word	0x40020088
 800a684:	400200a0 	.word	0x400200a0
 800a688:	400200b8 	.word	0x400200b8
 800a68c:	40020410 	.word	0x40020410
 800a690:	40020428 	.word	0x40020428
 800a694:	40020440 	.word	0x40020440
 800a698:	40020458 	.word	0x40020458
 800a69c:	40020470 	.word	0x40020470
 800a6a0:	40020488 	.word	0x40020488
 800a6a4:	400204a0 	.word	0x400204a0
 800a6a8:	400204b8 	.word	0x400204b8
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	bf14      	ite	ne
 800a6ba:	2301      	movne	r3, #1
 800a6bc:	2300      	moveq	r3, #0
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d015      	beq.n	800a6f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0204 	bic.w	r2, r2, #4
 800a6d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6d8:	f003 031f 	and.w	r3, r3, #31
 800a6dc:	2208      	movs	r2, #8
 800a6de:	409a      	lsls	r2, r3
 800a6e0:	6a3b      	ldr	r3, [r7, #32]
 800a6e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e8:	f043 0201 	orr.w	r2, r3, #1
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	69ba      	ldr	r2, [r7, #24]
 800a6fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	d06e      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a69      	ldr	r2, [pc, #420]	; (800a8b0 <HAL_DMA_IRQHandler+0x3f8>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d04a      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4a67      	ldr	r2, [pc, #412]	; (800a8b4 <HAL_DMA_IRQHandler+0x3fc>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d045      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4a66      	ldr	r2, [pc, #408]	; (800a8b8 <HAL_DMA_IRQHandler+0x400>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d040      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a64      	ldr	r2, [pc, #400]	; (800a8bc <HAL_DMA_IRQHandler+0x404>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d03b      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a63      	ldr	r2, [pc, #396]	; (800a8c0 <HAL_DMA_IRQHandler+0x408>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d036      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a61      	ldr	r2, [pc, #388]	; (800a8c4 <HAL_DMA_IRQHandler+0x40c>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d031      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	4a60      	ldr	r2, [pc, #384]	; (800a8c8 <HAL_DMA_IRQHandler+0x410>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d02c      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a5e      	ldr	r2, [pc, #376]	; (800a8cc <HAL_DMA_IRQHandler+0x414>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d027      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4a5d      	ldr	r2, [pc, #372]	; (800a8d0 <HAL_DMA_IRQHandler+0x418>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d022      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a5b      	ldr	r2, [pc, #364]	; (800a8d4 <HAL_DMA_IRQHandler+0x41c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d01d      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a5a      	ldr	r2, [pc, #360]	; (800a8d8 <HAL_DMA_IRQHandler+0x420>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d018      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a58      	ldr	r2, [pc, #352]	; (800a8dc <HAL_DMA_IRQHandler+0x424>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d013      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a57      	ldr	r2, [pc, #348]	; (800a8e0 <HAL_DMA_IRQHandler+0x428>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d00e      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a55      	ldr	r2, [pc, #340]	; (800a8e4 <HAL_DMA_IRQHandler+0x42c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d009      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a54      	ldr	r2, [pc, #336]	; (800a8e8 <HAL_DMA_IRQHandler+0x430>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d004      	beq.n	800a7a6 <HAL_DMA_IRQHandler+0x2ee>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a52      	ldr	r2, [pc, #328]	; (800a8ec <HAL_DMA_IRQHandler+0x434>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d10a      	bne.n	800a7bc <HAL_DMA_IRQHandler+0x304>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	bf14      	ite	ne
 800a7b4:	2301      	movne	r3, #1
 800a7b6:	2300      	moveq	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	e003      	b.n	800a7c4 <HAL_DMA_IRQHandler+0x30c>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00d      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	409a      	lsls	r2, r3
 800a7d4:	6a3b      	ldr	r3, [r7, #32]
 800a7d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7dc:	f043 0202 	orr.w	r2, r3, #2
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7e8:	f003 031f 	and.w	r3, r3, #31
 800a7ec:	2204      	movs	r2, #4
 800a7ee:	409a      	lsls	r2, r3
 800a7f0:	69bb      	ldr	r3, [r7, #24]
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 808f 	beq.w	800a918 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a2c      	ldr	r2, [pc, #176]	; (800a8b0 <HAL_DMA_IRQHandler+0x3f8>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d04a      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a2a      	ldr	r2, [pc, #168]	; (800a8b4 <HAL_DMA_IRQHandler+0x3fc>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d045      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a29      	ldr	r2, [pc, #164]	; (800a8b8 <HAL_DMA_IRQHandler+0x400>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d040      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a27      	ldr	r2, [pc, #156]	; (800a8bc <HAL_DMA_IRQHandler+0x404>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d03b      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a26      	ldr	r2, [pc, #152]	; (800a8c0 <HAL_DMA_IRQHandler+0x408>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d036      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a24      	ldr	r2, [pc, #144]	; (800a8c4 <HAL_DMA_IRQHandler+0x40c>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d031      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a23      	ldr	r2, [pc, #140]	; (800a8c8 <HAL_DMA_IRQHandler+0x410>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d02c      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a21      	ldr	r2, [pc, #132]	; (800a8cc <HAL_DMA_IRQHandler+0x414>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d027      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a20      	ldr	r2, [pc, #128]	; (800a8d0 <HAL_DMA_IRQHandler+0x418>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d022      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a1e      	ldr	r2, [pc, #120]	; (800a8d4 <HAL_DMA_IRQHandler+0x41c>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d01d      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a1d      	ldr	r2, [pc, #116]	; (800a8d8 <HAL_DMA_IRQHandler+0x420>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d018      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a1b      	ldr	r2, [pc, #108]	; (800a8dc <HAL_DMA_IRQHandler+0x424>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d013      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a1a      	ldr	r2, [pc, #104]	; (800a8e0 <HAL_DMA_IRQHandler+0x428>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d00e      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a18      	ldr	r2, [pc, #96]	; (800a8e4 <HAL_DMA_IRQHandler+0x42c>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d009      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a17      	ldr	r2, [pc, #92]	; (800a8e8 <HAL_DMA_IRQHandler+0x430>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d004      	beq.n	800a89a <HAL_DMA_IRQHandler+0x3e2>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a15      	ldr	r2, [pc, #84]	; (800a8ec <HAL_DMA_IRQHandler+0x434>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d12a      	bne.n	800a8f0 <HAL_DMA_IRQHandler+0x438>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0302 	and.w	r3, r3, #2
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	bf14      	ite	ne
 800a8a8:	2301      	movne	r3, #1
 800a8aa:	2300      	moveq	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	e023      	b.n	800a8f8 <HAL_DMA_IRQHandler+0x440>
 800a8b0:	40020010 	.word	0x40020010
 800a8b4:	40020028 	.word	0x40020028
 800a8b8:	40020040 	.word	0x40020040
 800a8bc:	40020058 	.word	0x40020058
 800a8c0:	40020070 	.word	0x40020070
 800a8c4:	40020088 	.word	0x40020088
 800a8c8:	400200a0 	.word	0x400200a0
 800a8cc:	400200b8 	.word	0x400200b8
 800a8d0:	40020410 	.word	0x40020410
 800a8d4:	40020428 	.word	0x40020428
 800a8d8:	40020440 	.word	0x40020440
 800a8dc:	40020458 	.word	0x40020458
 800a8e0:	40020470 	.word	0x40020470
 800a8e4:	40020488 	.word	0x40020488
 800a8e8:	400204a0 	.word	0x400204a0
 800a8ec:	400204b8 	.word	0x400204b8
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00d      	beq.n	800a918 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a900:	f003 031f 	and.w	r3, r3, #31
 800a904:	2204      	movs	r2, #4
 800a906:	409a      	lsls	r2, r3
 800a908:	6a3b      	ldr	r3, [r7, #32]
 800a90a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a910:	f043 0204 	orr.w	r2, r3, #4
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a91c:	f003 031f 	and.w	r3, r3, #31
 800a920:	2210      	movs	r2, #16
 800a922:	409a      	lsls	r2, r3
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	4013      	ands	r3, r2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 80a6 	beq.w	800aa7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4a85      	ldr	r2, [pc, #532]	; (800ab48 <HAL_DMA_IRQHandler+0x690>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d04a      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a83      	ldr	r2, [pc, #524]	; (800ab4c <HAL_DMA_IRQHandler+0x694>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d045      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a82      	ldr	r2, [pc, #520]	; (800ab50 <HAL_DMA_IRQHandler+0x698>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d040      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a80      	ldr	r2, [pc, #512]	; (800ab54 <HAL_DMA_IRQHandler+0x69c>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d03b      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a7f      	ldr	r2, [pc, #508]	; (800ab58 <HAL_DMA_IRQHandler+0x6a0>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d036      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a7d      	ldr	r2, [pc, #500]	; (800ab5c <HAL_DMA_IRQHandler+0x6a4>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d031      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a7c      	ldr	r2, [pc, #496]	; (800ab60 <HAL_DMA_IRQHandler+0x6a8>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d02c      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a7a      	ldr	r2, [pc, #488]	; (800ab64 <HAL_DMA_IRQHandler+0x6ac>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d027      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4a79      	ldr	r2, [pc, #484]	; (800ab68 <HAL_DMA_IRQHandler+0x6b0>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d022      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	4a77      	ldr	r2, [pc, #476]	; (800ab6c <HAL_DMA_IRQHandler+0x6b4>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d01d      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a76      	ldr	r2, [pc, #472]	; (800ab70 <HAL_DMA_IRQHandler+0x6b8>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d018      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a74      	ldr	r2, [pc, #464]	; (800ab74 <HAL_DMA_IRQHandler+0x6bc>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d013      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a73      	ldr	r2, [pc, #460]	; (800ab78 <HAL_DMA_IRQHandler+0x6c0>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00e      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a71      	ldr	r2, [pc, #452]	; (800ab7c <HAL_DMA_IRQHandler+0x6c4>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d009      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a70      	ldr	r2, [pc, #448]	; (800ab80 <HAL_DMA_IRQHandler+0x6c8>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d004      	beq.n	800a9ce <HAL_DMA_IRQHandler+0x516>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a6e      	ldr	r2, [pc, #440]	; (800ab84 <HAL_DMA_IRQHandler+0x6cc>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d10a      	bne.n	800a9e4 <HAL_DMA_IRQHandler+0x52c>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bf14      	ite	ne
 800a9dc:	2301      	movne	r3, #1
 800a9de:	2300      	moveq	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	e009      	b.n	800a9f8 <HAL_DMA_IRQHandler+0x540>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0304 	and.w	r3, r3, #4
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	bf14      	ite	ne
 800a9f2:	2301      	movne	r3, #1
 800a9f4:	2300      	moveq	r3, #0
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d03e      	beq.n	800aa7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa00:	f003 031f 	and.w	r3, r3, #31
 800aa04:	2210      	movs	r2, #16
 800aa06:	409a      	lsls	r2, r3
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d018      	beq.n	800aa4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d108      	bne.n	800aa3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d024      	beq.n	800aa7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	4798      	blx	r3
 800aa38:	e01f      	b.n	800aa7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d01b      	beq.n	800aa7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
 800aa4a:	e016      	b.n	800aa7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d107      	bne.n	800aa6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f022 0208 	bic.w	r2, r2, #8
 800aa68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7e:	f003 031f 	and.w	r3, r3, #31
 800aa82:	2220      	movs	r2, #32
 800aa84:	409a      	lsls	r2, r3
 800aa86:	69bb      	ldr	r3, [r7, #24]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f000 8110 	beq.w	800acb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a2c      	ldr	r2, [pc, #176]	; (800ab48 <HAL_DMA_IRQHandler+0x690>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d04a      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a2b      	ldr	r2, [pc, #172]	; (800ab4c <HAL_DMA_IRQHandler+0x694>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d045      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a29      	ldr	r2, [pc, #164]	; (800ab50 <HAL_DMA_IRQHandler+0x698>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d040      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a28      	ldr	r2, [pc, #160]	; (800ab54 <HAL_DMA_IRQHandler+0x69c>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d03b      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <HAL_DMA_IRQHandler+0x6a0>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d036      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a25      	ldr	r2, [pc, #148]	; (800ab5c <HAL_DMA_IRQHandler+0x6a4>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d031      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a23      	ldr	r2, [pc, #140]	; (800ab60 <HAL_DMA_IRQHandler+0x6a8>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d02c      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a22      	ldr	r2, [pc, #136]	; (800ab64 <HAL_DMA_IRQHandler+0x6ac>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d027      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a20      	ldr	r2, [pc, #128]	; (800ab68 <HAL_DMA_IRQHandler+0x6b0>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d022      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a1f      	ldr	r2, [pc, #124]	; (800ab6c <HAL_DMA_IRQHandler+0x6b4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d01d      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a1d      	ldr	r2, [pc, #116]	; (800ab70 <HAL_DMA_IRQHandler+0x6b8>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d018      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a1c      	ldr	r2, [pc, #112]	; (800ab74 <HAL_DMA_IRQHandler+0x6bc>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d013      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a1a      	ldr	r2, [pc, #104]	; (800ab78 <HAL_DMA_IRQHandler+0x6c0>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d00e      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a19      	ldr	r2, [pc, #100]	; (800ab7c <HAL_DMA_IRQHandler+0x6c4>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d009      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a17      	ldr	r2, [pc, #92]	; (800ab80 <HAL_DMA_IRQHandler+0x6c8>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d004      	beq.n	800ab30 <HAL_DMA_IRQHandler+0x678>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a16      	ldr	r2, [pc, #88]	; (800ab84 <HAL_DMA_IRQHandler+0x6cc>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d12b      	bne.n	800ab88 <HAL_DMA_IRQHandler+0x6d0>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f003 0310 	and.w	r3, r3, #16
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	bf14      	ite	ne
 800ab3e:	2301      	movne	r3, #1
 800ab40:	2300      	moveq	r3, #0
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	e02a      	b.n	800ab9c <HAL_DMA_IRQHandler+0x6e4>
 800ab46:	bf00      	nop
 800ab48:	40020010 	.word	0x40020010
 800ab4c:	40020028 	.word	0x40020028
 800ab50:	40020040 	.word	0x40020040
 800ab54:	40020058 	.word	0x40020058
 800ab58:	40020070 	.word	0x40020070
 800ab5c:	40020088 	.word	0x40020088
 800ab60:	400200a0 	.word	0x400200a0
 800ab64:	400200b8 	.word	0x400200b8
 800ab68:	40020410 	.word	0x40020410
 800ab6c:	40020428 	.word	0x40020428
 800ab70:	40020440 	.word	0x40020440
 800ab74:	40020458 	.word	0x40020458
 800ab78:	40020470 	.word	0x40020470
 800ab7c:	40020488 	.word	0x40020488
 800ab80:	400204a0 	.word	0x400204a0
 800ab84:	400204b8 	.word	0x400204b8
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f003 0302 	and.w	r3, r3, #2
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	bf14      	ite	ne
 800ab96:	2301      	movne	r3, #1
 800ab98:	2300      	moveq	r3, #0
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 8087 	beq.w	800acb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba6:	f003 031f 	and.w	r3, r3, #31
 800abaa:	2220      	movs	r2, #32
 800abac:	409a      	lsls	r2, r3
 800abae:	6a3b      	ldr	r3, [r7, #32]
 800abb0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800abb8:	b2db      	uxtb	r3, r3
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d139      	bne.n	800ac32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 0216 	bic.w	r2, r2, #22
 800abcc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	695a      	ldr	r2, [r3, #20]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800abdc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <HAL_DMA_IRQHandler+0x736>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abea:	2b00      	cmp	r3, #0
 800abec:	d007      	beq.n	800abfe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0208 	bic.w	r2, r2, #8
 800abfc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac02:	f003 031f 	and.w	r3, r3, #31
 800ac06:	223f      	movs	r2, #63	; 0x3f
 800ac08:	409a      	lsls	r2, r3
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2201      	movs	r2, #1
 800ac12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f000 834a 	beq.w	800b2bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	4798      	blx	r3
          }
          return;
 800ac30:	e344      	b.n	800b2bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d018      	beq.n	800ac72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d108      	bne.n	800ac60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d02c      	beq.n	800acb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	4798      	blx	r3
 800ac5e:	e027      	b.n	800acb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d023      	beq.n	800acb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	4798      	blx	r3
 800ac70:	e01e      	b.n	800acb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d10f      	bne.n	800aca0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f022 0210 	bic.w	r2, r2, #16
 800ac8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 8306 	beq.w	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8088 	beq.w	800add8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2204      	movs	r2, #4
 800accc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a7a      	ldr	r2, [pc, #488]	; (800aec0 <HAL_DMA_IRQHandler+0xa08>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d04a      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a79      	ldr	r2, [pc, #484]	; (800aec4 <HAL_DMA_IRQHandler+0xa0c>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d045      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a77      	ldr	r2, [pc, #476]	; (800aec8 <HAL_DMA_IRQHandler+0xa10>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d040      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a76      	ldr	r2, [pc, #472]	; (800aecc <HAL_DMA_IRQHandler+0xa14>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d03b      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a74      	ldr	r2, [pc, #464]	; (800aed0 <HAL_DMA_IRQHandler+0xa18>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d036      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a73      	ldr	r2, [pc, #460]	; (800aed4 <HAL_DMA_IRQHandler+0xa1c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d031      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a71      	ldr	r2, [pc, #452]	; (800aed8 <HAL_DMA_IRQHandler+0xa20>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d02c      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a70      	ldr	r2, [pc, #448]	; (800aedc <HAL_DMA_IRQHandler+0xa24>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d027      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a6e      	ldr	r2, [pc, #440]	; (800aee0 <HAL_DMA_IRQHandler+0xa28>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d022      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a6d      	ldr	r2, [pc, #436]	; (800aee4 <HAL_DMA_IRQHandler+0xa2c>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d01d      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a6b      	ldr	r2, [pc, #428]	; (800aee8 <HAL_DMA_IRQHandler+0xa30>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d018      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a6a      	ldr	r2, [pc, #424]	; (800aeec <HAL_DMA_IRQHandler+0xa34>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d013      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a68      	ldr	r2, [pc, #416]	; (800aef0 <HAL_DMA_IRQHandler+0xa38>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00e      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a67      	ldr	r2, [pc, #412]	; (800aef4 <HAL_DMA_IRQHandler+0xa3c>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d009      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a65      	ldr	r2, [pc, #404]	; (800aef8 <HAL_DMA_IRQHandler+0xa40>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d004      	beq.n	800ad70 <HAL_DMA_IRQHandler+0x8b8>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a64      	ldr	r2, [pc, #400]	; (800aefc <HAL_DMA_IRQHandler+0xa44>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d108      	bne.n	800ad82 <HAL_DMA_IRQHandler+0x8ca>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0201 	bic.w	r2, r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	e007      	b.n	800ad92 <HAL_DMA_IRQHandler+0x8da>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	3301      	adds	r3, #1
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d307      	bcc.n	800adae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f003 0301 	and.w	r3, r3, #1
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1f2      	bne.n	800ad92 <HAL_DMA_IRQHandler+0x8da>
 800adac:	e000      	b.n	800adb0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800adae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2203      	movs	r2, #3
 800adc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800adc6:	e003      	b.n	800add0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8272 	beq.w	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
 800adea:	e26c      	b.n	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a43      	ldr	r2, [pc, #268]	; (800af00 <HAL_DMA_IRQHandler+0xa48>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d022      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a42      	ldr	r2, [pc, #264]	; (800af04 <HAL_DMA_IRQHandler+0xa4c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d01d      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a40      	ldr	r2, [pc, #256]	; (800af08 <HAL_DMA_IRQHandler+0xa50>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d018      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	4a3f      	ldr	r2, [pc, #252]	; (800af0c <HAL_DMA_IRQHandler+0xa54>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d013      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a3d      	ldr	r2, [pc, #244]	; (800af10 <HAL_DMA_IRQHandler+0xa58>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d00e      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a3c      	ldr	r2, [pc, #240]	; (800af14 <HAL_DMA_IRQHandler+0xa5c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d009      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a3a      	ldr	r2, [pc, #232]	; (800af18 <HAL_DMA_IRQHandler+0xa60>)
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d004      	beq.n	800ae3c <HAL_DMA_IRQHandler+0x984>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	4a39      	ldr	r2, [pc, #228]	; (800af1c <HAL_DMA_IRQHandler+0xa64>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d101      	bne.n	800ae40 <HAL_DMA_IRQHandler+0x988>
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e000      	b.n	800ae42 <HAL_DMA_IRQHandler+0x98a>
 800ae40:	2300      	movs	r3, #0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f000 823f 	beq.w	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae54:	f003 031f 	and.w	r3, r3, #31
 800ae58:	2204      	movs	r2, #4
 800ae5a:	409a      	lsls	r2, r3
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80cd 	beq.w	800b000 <HAL_DMA_IRQHandler+0xb48>
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f003 0304 	and.w	r3, r3, #4
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80c7 	beq.w	800b000 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	2204      	movs	r2, #4
 800ae7c:	409a      	lsls	r2, r3
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d049      	beq.n	800af20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d109      	bne.n	800aeaa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 8210 	beq.w	800b2c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aea8:	e20a      	b.n	800b2c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8206 	beq.w	800b2c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aebc:	e200      	b.n	800b2c0 <HAL_DMA_IRQHandler+0xe08>
 800aebe:	bf00      	nop
 800aec0:	40020010 	.word	0x40020010
 800aec4:	40020028 	.word	0x40020028
 800aec8:	40020040 	.word	0x40020040
 800aecc:	40020058 	.word	0x40020058
 800aed0:	40020070 	.word	0x40020070
 800aed4:	40020088 	.word	0x40020088
 800aed8:	400200a0 	.word	0x400200a0
 800aedc:	400200b8 	.word	0x400200b8
 800aee0:	40020410 	.word	0x40020410
 800aee4:	40020428 	.word	0x40020428
 800aee8:	40020440 	.word	0x40020440
 800aeec:	40020458 	.word	0x40020458
 800aef0:	40020470 	.word	0x40020470
 800aef4:	40020488 	.word	0x40020488
 800aef8:	400204a0 	.word	0x400204a0
 800aefc:	400204b8 	.word	0x400204b8
 800af00:	58025408 	.word	0x58025408
 800af04:	5802541c 	.word	0x5802541c
 800af08:	58025430 	.word	0x58025430
 800af0c:	58025444 	.word	0x58025444
 800af10:	58025458 	.word	0x58025458
 800af14:	5802546c 	.word	0x5802546c
 800af18:	58025480 	.word	0x58025480
 800af1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f003 0320 	and.w	r3, r3, #32
 800af26:	2b00      	cmp	r3, #0
 800af28:	d160      	bne.n	800afec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a7f      	ldr	r2, [pc, #508]	; (800b12c <HAL_DMA_IRQHandler+0xc74>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d04a      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	4a7d      	ldr	r2, [pc, #500]	; (800b130 <HAL_DMA_IRQHandler+0xc78>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d045      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4a7c      	ldr	r2, [pc, #496]	; (800b134 <HAL_DMA_IRQHandler+0xc7c>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d040      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a7a      	ldr	r2, [pc, #488]	; (800b138 <HAL_DMA_IRQHandler+0xc80>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d03b      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a79      	ldr	r2, [pc, #484]	; (800b13c <HAL_DMA_IRQHandler+0xc84>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d036      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a77      	ldr	r2, [pc, #476]	; (800b140 <HAL_DMA_IRQHandler+0xc88>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d031      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a76      	ldr	r2, [pc, #472]	; (800b144 <HAL_DMA_IRQHandler+0xc8c>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d02c      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a74      	ldr	r2, [pc, #464]	; (800b148 <HAL_DMA_IRQHandler+0xc90>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d027      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a73      	ldr	r2, [pc, #460]	; (800b14c <HAL_DMA_IRQHandler+0xc94>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d022      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4a71      	ldr	r2, [pc, #452]	; (800b150 <HAL_DMA_IRQHandler+0xc98>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d01d      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4a70      	ldr	r2, [pc, #448]	; (800b154 <HAL_DMA_IRQHandler+0xc9c>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d018      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a6e      	ldr	r2, [pc, #440]	; (800b158 <HAL_DMA_IRQHandler+0xca0>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d013      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a6d      	ldr	r2, [pc, #436]	; (800b15c <HAL_DMA_IRQHandler+0xca4>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	d00e      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a6b      	ldr	r2, [pc, #428]	; (800b160 <HAL_DMA_IRQHandler+0xca8>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d009      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a6a      	ldr	r2, [pc, #424]	; (800b164 <HAL_DMA_IRQHandler+0xcac>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d004      	beq.n	800afca <HAL_DMA_IRQHandler+0xb12>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a68      	ldr	r2, [pc, #416]	; (800b168 <HAL_DMA_IRQHandler+0xcb0>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d108      	bne.n	800afdc <HAL_DMA_IRQHandler+0xb24>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f022 0208 	bic.w	r2, r2, #8
 800afd8:	601a      	str	r2, [r3, #0]
 800afda:	e007      	b.n	800afec <HAL_DMA_IRQHandler+0xb34>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f022 0204 	bic.w	r2, r2, #4
 800afea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f000 8165 	beq.w	800b2c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800affe:	e15f      	b.n	800b2c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b004:	f003 031f 	and.w	r3, r3, #31
 800b008:	2202      	movs	r2, #2
 800b00a:	409a      	lsls	r2, r3
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4013      	ands	r3, r2
 800b010:	2b00      	cmp	r3, #0
 800b012:	f000 80c5 	beq.w	800b1a0 <HAL_DMA_IRQHandler+0xce8>
 800b016:	693b      	ldr	r3, [r7, #16]
 800b018:	f003 0302 	and.w	r3, r3, #2
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 80bf 	beq.w	800b1a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b026:	f003 031f 	and.w	r3, r3, #31
 800b02a:	2202      	movs	r2, #2
 800b02c:	409a      	lsls	r2, r3
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d018      	beq.n	800b06e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d109      	bne.n	800b05a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f000 813a 	beq.w	800b2c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b058:	e134      	b.n	800b2c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f000 8130 	beq.w	800b2c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b06c:	e12a      	b.n	800b2c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f003 0320 	and.w	r3, r3, #32
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 8089 	bne.w	800b18c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a2b      	ldr	r2, [pc, #172]	; (800b12c <HAL_DMA_IRQHandler+0xc74>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d04a      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a29      	ldr	r2, [pc, #164]	; (800b130 <HAL_DMA_IRQHandler+0xc78>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d045      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a28      	ldr	r2, [pc, #160]	; (800b134 <HAL_DMA_IRQHandler+0xc7c>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d040      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a26      	ldr	r2, [pc, #152]	; (800b138 <HAL_DMA_IRQHandler+0xc80>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d03b      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a25      	ldr	r2, [pc, #148]	; (800b13c <HAL_DMA_IRQHandler+0xc84>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d036      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a23      	ldr	r2, [pc, #140]	; (800b140 <HAL_DMA_IRQHandler+0xc88>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d031      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a22      	ldr	r2, [pc, #136]	; (800b144 <HAL_DMA_IRQHandler+0xc8c>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d02c      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a20      	ldr	r2, [pc, #128]	; (800b148 <HAL_DMA_IRQHandler+0xc90>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d027      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a1f      	ldr	r2, [pc, #124]	; (800b14c <HAL_DMA_IRQHandler+0xc94>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d022      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a1d      	ldr	r2, [pc, #116]	; (800b150 <HAL_DMA_IRQHandler+0xc98>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d01d      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4a1c      	ldr	r2, [pc, #112]	; (800b154 <HAL_DMA_IRQHandler+0xc9c>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d018      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a1a      	ldr	r2, [pc, #104]	; (800b158 <HAL_DMA_IRQHandler+0xca0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d013      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a19      	ldr	r2, [pc, #100]	; (800b15c <HAL_DMA_IRQHandler+0xca4>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d00e      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a17      	ldr	r2, [pc, #92]	; (800b160 <HAL_DMA_IRQHandler+0xca8>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d009      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a16      	ldr	r2, [pc, #88]	; (800b164 <HAL_DMA_IRQHandler+0xcac>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d004      	beq.n	800b11a <HAL_DMA_IRQHandler+0xc62>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a14      	ldr	r2, [pc, #80]	; (800b168 <HAL_DMA_IRQHandler+0xcb0>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d128      	bne.n	800b16c <HAL_DMA_IRQHandler+0xcb4>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f022 0214 	bic.w	r2, r2, #20
 800b128:	601a      	str	r2, [r3, #0]
 800b12a:	e027      	b.n	800b17c <HAL_DMA_IRQHandler+0xcc4>
 800b12c:	40020010 	.word	0x40020010
 800b130:	40020028 	.word	0x40020028
 800b134:	40020040 	.word	0x40020040
 800b138:	40020058 	.word	0x40020058
 800b13c:	40020070 	.word	0x40020070
 800b140:	40020088 	.word	0x40020088
 800b144:	400200a0 	.word	0x400200a0
 800b148:	400200b8 	.word	0x400200b8
 800b14c:	40020410 	.word	0x40020410
 800b150:	40020428 	.word	0x40020428
 800b154:	40020440 	.word	0x40020440
 800b158:	40020458 	.word	0x40020458
 800b15c:	40020470 	.word	0x40020470
 800b160:	40020488 	.word	0x40020488
 800b164:	400204a0 	.word	0x400204a0
 800b168:	400204b8 	.word	0x400204b8
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f022 020a 	bic.w	r2, r2, #10
 800b17a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b190:	2b00      	cmp	r3, #0
 800b192:	f000 8097 	beq.w	800b2c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b19e:	e091      	b.n	800b2c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1a4:	f003 031f 	and.w	r3, r3, #31
 800b1a8:	2208      	movs	r2, #8
 800b1aa:	409a      	lsls	r2, r3
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 8088 	beq.w	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	f003 0308 	and.w	r3, r3, #8
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 8082 	beq.w	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a41      	ldr	r2, [pc, #260]	; (800b2cc <HAL_DMA_IRQHandler+0xe14>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d04a      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	4a3f      	ldr	r2, [pc, #252]	; (800b2d0 <HAL_DMA_IRQHandler+0xe18>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d045      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	4a3e      	ldr	r2, [pc, #248]	; (800b2d4 <HAL_DMA_IRQHandler+0xe1c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d040      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4a3c      	ldr	r2, [pc, #240]	; (800b2d8 <HAL_DMA_IRQHandler+0xe20>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d03b      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a3b      	ldr	r2, [pc, #236]	; (800b2dc <HAL_DMA_IRQHandler+0xe24>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d036      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a39      	ldr	r2, [pc, #228]	; (800b2e0 <HAL_DMA_IRQHandler+0xe28>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d031      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a38      	ldr	r2, [pc, #224]	; (800b2e4 <HAL_DMA_IRQHandler+0xe2c>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d02c      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a36      	ldr	r2, [pc, #216]	; (800b2e8 <HAL_DMA_IRQHandler+0xe30>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d027      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a35      	ldr	r2, [pc, #212]	; (800b2ec <HAL_DMA_IRQHandler+0xe34>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d022      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a33      	ldr	r2, [pc, #204]	; (800b2f0 <HAL_DMA_IRQHandler+0xe38>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d01d      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	4a32      	ldr	r2, [pc, #200]	; (800b2f4 <HAL_DMA_IRQHandler+0xe3c>)
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d018      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a30      	ldr	r2, [pc, #192]	; (800b2f8 <HAL_DMA_IRQHandler+0xe40>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d013      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a2f      	ldr	r2, [pc, #188]	; (800b2fc <HAL_DMA_IRQHandler+0xe44>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d00e      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a2d      	ldr	r2, [pc, #180]	; (800b300 <HAL_DMA_IRQHandler+0xe48>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d009      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a2c      	ldr	r2, [pc, #176]	; (800b304 <HAL_DMA_IRQHandler+0xe4c>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d004      	beq.n	800b262 <HAL_DMA_IRQHandler+0xdaa>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	4a2a      	ldr	r2, [pc, #168]	; (800b308 <HAL_DMA_IRQHandler+0xe50>)
 800b25e:	4293      	cmp	r3, r2
 800b260:	d108      	bne.n	800b274 <HAL_DMA_IRQHandler+0xdbc>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f022 021c 	bic.w	r2, r2, #28
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	e007      	b.n	800b284 <HAL_DMA_IRQHandler+0xdcc>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 020e 	bic.w	r2, r2, #14
 800b282:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b288:	f003 031f 	and.w	r3, r3, #31
 800b28c:	2201      	movs	r2, #1
 800b28e:	409a      	lsls	r2, r3
 800b290:	69fb      	ldr	r3, [r7, #28]
 800b292:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2201      	movs	r2, #1
 800b298:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d009      	beq.n	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	4798      	blx	r3
 800b2ba:	e004      	b.n	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b2bc:	bf00      	nop
 800b2be:	e002      	b.n	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2c0:	bf00      	nop
 800b2c2:	e000      	b.n	800b2c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b2c6:	3728      	adds	r7, #40	; 0x28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	40020010 	.word	0x40020010
 800b2d0:	40020028 	.word	0x40020028
 800b2d4:	40020040 	.word	0x40020040
 800b2d8:	40020058 	.word	0x40020058
 800b2dc:	40020070 	.word	0x40020070
 800b2e0:	40020088 	.word	0x40020088
 800b2e4:	400200a0 	.word	0x400200a0
 800b2e8:	400200b8 	.word	0x400200b8
 800b2ec:	40020410 	.word	0x40020410
 800b2f0:	40020428 	.word	0x40020428
 800b2f4:	40020440 	.word	0x40020440
 800b2f8:	40020458 	.word	0x40020458
 800b2fc:	40020470 	.word	0x40020470
 800b300:	40020488 	.word	0x40020488
 800b304:	400204a0 	.word	0x400204a0
 800b308:	400204b8 	.word	0x400204b8

0800b30c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
 800b318:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b324:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a7f      	ldr	r2, [pc, #508]	; (800b528 <DMA_SetConfig+0x21c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d072      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a7d      	ldr	r2, [pc, #500]	; (800b52c <DMA_SetConfig+0x220>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d06d      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a7c      	ldr	r2, [pc, #496]	; (800b530 <DMA_SetConfig+0x224>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d068      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a7a      	ldr	r2, [pc, #488]	; (800b534 <DMA_SetConfig+0x228>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d063      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a79      	ldr	r2, [pc, #484]	; (800b538 <DMA_SetConfig+0x22c>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d05e      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a77      	ldr	r2, [pc, #476]	; (800b53c <DMA_SetConfig+0x230>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d059      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a76      	ldr	r2, [pc, #472]	; (800b540 <DMA_SetConfig+0x234>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d054      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a74      	ldr	r2, [pc, #464]	; (800b544 <DMA_SetConfig+0x238>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d04f      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a73      	ldr	r2, [pc, #460]	; (800b548 <DMA_SetConfig+0x23c>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d04a      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a71      	ldr	r2, [pc, #452]	; (800b54c <DMA_SetConfig+0x240>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d045      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a70      	ldr	r2, [pc, #448]	; (800b550 <DMA_SetConfig+0x244>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d040      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a6e      	ldr	r2, [pc, #440]	; (800b554 <DMA_SetConfig+0x248>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d03b      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a6d      	ldr	r2, [pc, #436]	; (800b558 <DMA_SetConfig+0x24c>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d036      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a6b      	ldr	r2, [pc, #428]	; (800b55c <DMA_SetConfig+0x250>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d031      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a6a      	ldr	r2, [pc, #424]	; (800b560 <DMA_SetConfig+0x254>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d02c      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a68      	ldr	r2, [pc, #416]	; (800b564 <DMA_SetConfig+0x258>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d027      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a67      	ldr	r2, [pc, #412]	; (800b568 <DMA_SetConfig+0x25c>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d022      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a65      	ldr	r2, [pc, #404]	; (800b56c <DMA_SetConfig+0x260>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d01d      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a64      	ldr	r2, [pc, #400]	; (800b570 <DMA_SetConfig+0x264>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d018      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a62      	ldr	r2, [pc, #392]	; (800b574 <DMA_SetConfig+0x268>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d013      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a61      	ldr	r2, [pc, #388]	; (800b578 <DMA_SetConfig+0x26c>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00e      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a5f      	ldr	r2, [pc, #380]	; (800b57c <DMA_SetConfig+0x270>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d009      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a5e      	ldr	r2, [pc, #376]	; (800b580 <DMA_SetConfig+0x274>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d004      	beq.n	800b416 <DMA_SetConfig+0x10a>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a5c      	ldr	r2, [pc, #368]	; (800b584 <DMA_SetConfig+0x278>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d101      	bne.n	800b41a <DMA_SetConfig+0x10e>
 800b416:	2301      	movs	r3, #1
 800b418:	e000      	b.n	800b41c <DMA_SetConfig+0x110>
 800b41a:	2300      	movs	r3, #0
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00d      	beq.n	800b43c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b428:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b436:	68fa      	ldr	r2, [r7, #12]
 800b438:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b43a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4a39      	ldr	r2, [pc, #228]	; (800b528 <DMA_SetConfig+0x21c>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d04a      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a38      	ldr	r2, [pc, #224]	; (800b52c <DMA_SetConfig+0x220>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d045      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a36      	ldr	r2, [pc, #216]	; (800b530 <DMA_SetConfig+0x224>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d040      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a35      	ldr	r2, [pc, #212]	; (800b534 <DMA_SetConfig+0x228>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d03b      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	4a33      	ldr	r2, [pc, #204]	; (800b538 <DMA_SetConfig+0x22c>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d036      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a32      	ldr	r2, [pc, #200]	; (800b53c <DMA_SetConfig+0x230>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d031      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a30      	ldr	r2, [pc, #192]	; (800b540 <DMA_SetConfig+0x234>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d02c      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a2f      	ldr	r2, [pc, #188]	; (800b544 <DMA_SetConfig+0x238>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d027      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a2d      	ldr	r2, [pc, #180]	; (800b548 <DMA_SetConfig+0x23c>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d022      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a2c      	ldr	r2, [pc, #176]	; (800b54c <DMA_SetConfig+0x240>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d01d      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a2a      	ldr	r2, [pc, #168]	; (800b550 <DMA_SetConfig+0x244>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d018      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a29      	ldr	r2, [pc, #164]	; (800b554 <DMA_SetConfig+0x248>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d013      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a27      	ldr	r2, [pc, #156]	; (800b558 <DMA_SetConfig+0x24c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d00e      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	4a26      	ldr	r2, [pc, #152]	; (800b55c <DMA_SetConfig+0x250>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d009      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a24      	ldr	r2, [pc, #144]	; (800b560 <DMA_SetConfig+0x254>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d004      	beq.n	800b4dc <DMA_SetConfig+0x1d0>
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4a23      	ldr	r2, [pc, #140]	; (800b564 <DMA_SetConfig+0x258>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d101      	bne.n	800b4e0 <DMA_SetConfig+0x1d4>
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e000      	b.n	800b4e2 <DMA_SetConfig+0x1d6>
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d059      	beq.n	800b59a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4ea:	f003 031f 	and.w	r3, r3, #31
 800b4ee:	223f      	movs	r2, #63	; 0x3f
 800b4f0:	409a      	lsls	r2, r3
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b504:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	2b40      	cmp	r3, #64	; 0x40
 800b514:	d138      	bne.n	800b588 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b526:	e086      	b.n	800b636 <DMA_SetConfig+0x32a>
 800b528:	40020010 	.word	0x40020010
 800b52c:	40020028 	.word	0x40020028
 800b530:	40020040 	.word	0x40020040
 800b534:	40020058 	.word	0x40020058
 800b538:	40020070 	.word	0x40020070
 800b53c:	40020088 	.word	0x40020088
 800b540:	400200a0 	.word	0x400200a0
 800b544:	400200b8 	.word	0x400200b8
 800b548:	40020410 	.word	0x40020410
 800b54c:	40020428 	.word	0x40020428
 800b550:	40020440 	.word	0x40020440
 800b554:	40020458 	.word	0x40020458
 800b558:	40020470 	.word	0x40020470
 800b55c:	40020488 	.word	0x40020488
 800b560:	400204a0 	.word	0x400204a0
 800b564:	400204b8 	.word	0x400204b8
 800b568:	58025408 	.word	0x58025408
 800b56c:	5802541c 	.word	0x5802541c
 800b570:	58025430 	.word	0x58025430
 800b574:	58025444 	.word	0x58025444
 800b578:	58025458 	.word	0x58025458
 800b57c:	5802546c 	.word	0x5802546c
 800b580:	58025480 	.word	0x58025480
 800b584:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68ba      	ldr	r2, [r7, #8]
 800b58e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	687a      	ldr	r2, [r7, #4]
 800b596:	60da      	str	r2, [r3, #12]
}
 800b598:	e04d      	b.n	800b636 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a29      	ldr	r2, [pc, #164]	; (800b644 <DMA_SetConfig+0x338>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d022      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a27      	ldr	r2, [pc, #156]	; (800b648 <DMA_SetConfig+0x33c>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d01d      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a26      	ldr	r2, [pc, #152]	; (800b64c <DMA_SetConfig+0x340>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d018      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a24      	ldr	r2, [pc, #144]	; (800b650 <DMA_SetConfig+0x344>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d013      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a23      	ldr	r2, [pc, #140]	; (800b654 <DMA_SetConfig+0x348>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d00e      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a21      	ldr	r2, [pc, #132]	; (800b658 <DMA_SetConfig+0x34c>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d009      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a20      	ldr	r2, [pc, #128]	; (800b65c <DMA_SetConfig+0x350>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d004      	beq.n	800b5ea <DMA_SetConfig+0x2de>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a1e      	ldr	r2, [pc, #120]	; (800b660 <DMA_SetConfig+0x354>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d101      	bne.n	800b5ee <DMA_SetConfig+0x2e2>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <DMA_SetConfig+0x2e4>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d020      	beq.n	800b636 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	409a      	lsls	r2, r3
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	683a      	ldr	r2, [r7, #0]
 800b60a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	2b40      	cmp	r3, #64	; 0x40
 800b612:	d108      	bne.n	800b626 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	60da      	str	r2, [r3, #12]
}
 800b624:	e007      	b.n	800b636 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	60da      	str	r2, [r3, #12]
}
 800b636:	bf00      	nop
 800b638:	371c      	adds	r7, #28
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	58025408 	.word	0x58025408
 800b648:	5802541c 	.word	0x5802541c
 800b64c:	58025430 	.word	0x58025430
 800b650:	58025444 	.word	0x58025444
 800b654:	58025458 	.word	0x58025458
 800b658:	5802546c 	.word	0x5802546c
 800b65c:	58025480 	.word	0x58025480
 800b660:	58025494 	.word	0x58025494

0800b664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b664:	b480      	push	{r7}
 800b666:	b085      	sub	sp, #20
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a42      	ldr	r2, [pc, #264]	; (800b77c <DMA_CalcBaseAndBitshift+0x118>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d04a      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a41      	ldr	r2, [pc, #260]	; (800b780 <DMA_CalcBaseAndBitshift+0x11c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d045      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a3f      	ldr	r2, [pc, #252]	; (800b784 <DMA_CalcBaseAndBitshift+0x120>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d040      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a3e      	ldr	r2, [pc, #248]	; (800b788 <DMA_CalcBaseAndBitshift+0x124>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d03b      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a3c      	ldr	r2, [pc, #240]	; (800b78c <DMA_CalcBaseAndBitshift+0x128>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d036      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a3b      	ldr	r2, [pc, #236]	; (800b790 <DMA_CalcBaseAndBitshift+0x12c>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d031      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a39      	ldr	r2, [pc, #228]	; (800b794 <DMA_CalcBaseAndBitshift+0x130>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d02c      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a38      	ldr	r2, [pc, #224]	; (800b798 <DMA_CalcBaseAndBitshift+0x134>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d027      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a36      	ldr	r2, [pc, #216]	; (800b79c <DMA_CalcBaseAndBitshift+0x138>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d022      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a35      	ldr	r2, [pc, #212]	; (800b7a0 <DMA_CalcBaseAndBitshift+0x13c>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d01d      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a33      	ldr	r2, [pc, #204]	; (800b7a4 <DMA_CalcBaseAndBitshift+0x140>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d018      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a32      	ldr	r2, [pc, #200]	; (800b7a8 <DMA_CalcBaseAndBitshift+0x144>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d013      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a30      	ldr	r2, [pc, #192]	; (800b7ac <DMA_CalcBaseAndBitshift+0x148>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d00e      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a2f      	ldr	r2, [pc, #188]	; (800b7b0 <DMA_CalcBaseAndBitshift+0x14c>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d009      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4a2d      	ldr	r2, [pc, #180]	; (800b7b4 <DMA_CalcBaseAndBitshift+0x150>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d004      	beq.n	800b70c <DMA_CalcBaseAndBitshift+0xa8>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	4a2c      	ldr	r2, [pc, #176]	; (800b7b8 <DMA_CalcBaseAndBitshift+0x154>)
 800b708:	4293      	cmp	r3, r2
 800b70a:	d101      	bne.n	800b710 <DMA_CalcBaseAndBitshift+0xac>
 800b70c:	2301      	movs	r3, #1
 800b70e:	e000      	b.n	800b712 <DMA_CalcBaseAndBitshift+0xae>
 800b710:	2300      	movs	r3, #0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d024      	beq.n	800b760 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	3b10      	subs	r3, #16
 800b71e:	4a27      	ldr	r2, [pc, #156]	; (800b7bc <DMA_CalcBaseAndBitshift+0x158>)
 800b720:	fba2 2303 	umull	r2, r3, r2, r3
 800b724:	091b      	lsrs	r3, r3, #4
 800b726:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f003 0307 	and.w	r3, r3, #7
 800b72e:	4a24      	ldr	r2, [pc, #144]	; (800b7c0 <DMA_CalcBaseAndBitshift+0x15c>)
 800b730:	5cd3      	ldrb	r3, [r2, r3]
 800b732:	461a      	mov	r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b03      	cmp	r3, #3
 800b73c:	d908      	bls.n	800b750 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	461a      	mov	r2, r3
 800b744:	4b1f      	ldr	r3, [pc, #124]	; (800b7c4 <DMA_CalcBaseAndBitshift+0x160>)
 800b746:	4013      	ands	r3, r2
 800b748:	1d1a      	adds	r2, r3, #4
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	659a      	str	r2, [r3, #88]	; 0x58
 800b74e:	e00d      	b.n	800b76c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	461a      	mov	r2, r3
 800b756:	4b1b      	ldr	r3, [pc, #108]	; (800b7c4 <DMA_CalcBaseAndBitshift+0x160>)
 800b758:	4013      	ands	r3, r2
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	6593      	str	r3, [r2, #88]	; 0x58
 800b75e:	e005      	b.n	800b76c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr
 800b77c:	40020010 	.word	0x40020010
 800b780:	40020028 	.word	0x40020028
 800b784:	40020040 	.word	0x40020040
 800b788:	40020058 	.word	0x40020058
 800b78c:	40020070 	.word	0x40020070
 800b790:	40020088 	.word	0x40020088
 800b794:	400200a0 	.word	0x400200a0
 800b798:	400200b8 	.word	0x400200b8
 800b79c:	40020410 	.word	0x40020410
 800b7a0:	40020428 	.word	0x40020428
 800b7a4:	40020440 	.word	0x40020440
 800b7a8:	40020458 	.word	0x40020458
 800b7ac:	40020470 	.word	0x40020470
 800b7b0:	40020488 	.word	0x40020488
 800b7b4:	400204a0 	.word	0x400204a0
 800b7b8:	400204b8 	.word	0x400204b8
 800b7bc:	aaaaaaab 	.word	0xaaaaaaab
 800b7c0:	08017400 	.word	0x08017400
 800b7c4:	fffffc00 	.word	0xfffffc00

0800b7c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d120      	bne.n	800b81e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	2b03      	cmp	r3, #3
 800b7e2:	d858      	bhi.n	800b896 <DMA_CheckFifoParam+0xce>
 800b7e4:	a201      	add	r2, pc, #4	; (adr r2, 800b7ec <DMA_CheckFifoParam+0x24>)
 800b7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ea:	bf00      	nop
 800b7ec:	0800b7fd 	.word	0x0800b7fd
 800b7f0:	0800b80f 	.word	0x0800b80f
 800b7f4:	0800b7fd 	.word	0x0800b7fd
 800b7f8:	0800b897 	.word	0x0800b897
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d048      	beq.n	800b89a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b80c:	e045      	b.n	800b89a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b812:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b816:	d142      	bne.n	800b89e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b81c:	e03f      	b.n	800b89e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b826:	d123      	bne.n	800b870 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d838      	bhi.n	800b8a2 <DMA_CheckFifoParam+0xda>
 800b830:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <DMA_CheckFifoParam+0x70>)
 800b832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b836:	bf00      	nop
 800b838:	0800b849 	.word	0x0800b849
 800b83c:	0800b84f 	.word	0x0800b84f
 800b840:	0800b849 	.word	0x0800b849
 800b844:	0800b861 	.word	0x0800b861
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	73fb      	strb	r3, [r7, #15]
        break;
 800b84c:	e030      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d025      	beq.n	800b8a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b85e:	e022      	b.n	800b8a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b864:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b868:	d11f      	bne.n	800b8aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b86e:	e01c      	b.n	800b8aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	2b02      	cmp	r3, #2
 800b876:	d902      	bls.n	800b87e <DMA_CheckFifoParam+0xb6>
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d003      	beq.n	800b884 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b87c:	e018      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	73fb      	strb	r3, [r7, #15]
        break;
 800b882:	e015      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00e      	beq.n	800b8ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	73fb      	strb	r3, [r7, #15]
    break;
 800b894:	e00b      	b.n	800b8ae <DMA_CheckFifoParam+0xe6>
        break;
 800b896:	bf00      	nop
 800b898:	e00a      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        break;
 800b89a:	bf00      	nop
 800b89c:	e008      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        break;
 800b89e:	bf00      	nop
 800b8a0:	e006      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        break;
 800b8a2:	bf00      	nop
 800b8a4:	e004      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        break;
 800b8a6:	bf00      	nop
 800b8a8:	e002      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
        break;
 800b8aa:	bf00      	nop
 800b8ac:	e000      	b.n	800b8b0 <DMA_CheckFifoParam+0xe8>
    break;
 800b8ae:	bf00      	nop
    }
  }

  return status;
 800b8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop

0800b8c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a38      	ldr	r2, [pc, #224]	; (800b9b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d022      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a36      	ldr	r2, [pc, #216]	; (800b9b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d01d      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a35      	ldr	r2, [pc, #212]	; (800b9bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d018      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a33      	ldr	r2, [pc, #204]	; (800b9c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d013      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a32      	ldr	r2, [pc, #200]	; (800b9c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d00e      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4a30      	ldr	r2, [pc, #192]	; (800b9c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d009      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a2f      	ldr	r2, [pc, #188]	; (800b9cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d004      	beq.n	800b91e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a2d      	ldr	r2, [pc, #180]	; (800b9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d101      	bne.n	800b922 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b91e:	2301      	movs	r3, #1
 800b920:	e000      	b.n	800b924 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b922:	2300      	movs	r3, #0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01a      	beq.n	800b95e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	b2db      	uxtb	r3, r3
 800b92e:	3b08      	subs	r3, #8
 800b930:	4a28      	ldr	r2, [pc, #160]	; (800b9d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	091b      	lsrs	r3, r3, #4
 800b938:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4b26      	ldr	r3, [pc, #152]	; (800b9d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b93e:	4413      	add	r3, r2
 800b940:	009b      	lsls	r3, r3, #2
 800b942:	461a      	mov	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4a24      	ldr	r2, [pc, #144]	; (800b9dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b94c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f003 031f 	and.w	r3, r3, #31
 800b954:	2201      	movs	r2, #1
 800b956:	409a      	lsls	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b95c:	e024      	b.n	800b9a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	b2db      	uxtb	r3, r3
 800b964:	3b10      	subs	r3, #16
 800b966:	4a1e      	ldr	r2, [pc, #120]	; (800b9e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b968:	fba2 2303 	umull	r2, r3, r2, r3
 800b96c:	091b      	lsrs	r3, r3, #4
 800b96e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	4a1c      	ldr	r2, [pc, #112]	; (800b9e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d806      	bhi.n	800b986 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	4a1b      	ldr	r2, [pc, #108]	; (800b9e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d902      	bls.n	800b986 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	3308      	adds	r3, #8
 800b984:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	4b18      	ldr	r3, [pc, #96]	; (800b9ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b98a:	4413      	add	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	461a      	mov	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a16      	ldr	r2, [pc, #88]	; (800b9f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b998:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f003 031f 	and.w	r3, r3, #31
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	409a      	lsls	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b9a8:	bf00      	nop
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	58025408 	.word	0x58025408
 800b9b8:	5802541c 	.word	0x5802541c
 800b9bc:	58025430 	.word	0x58025430
 800b9c0:	58025444 	.word	0x58025444
 800b9c4:	58025458 	.word	0x58025458
 800b9c8:	5802546c 	.word	0x5802546c
 800b9cc:	58025480 	.word	0x58025480
 800b9d0:	58025494 	.word	0x58025494
 800b9d4:	cccccccd 	.word	0xcccccccd
 800b9d8:	16009600 	.word	0x16009600
 800b9dc:	58025880 	.word	0x58025880
 800b9e0:	aaaaaaab 	.word	0xaaaaaaab
 800b9e4:	400204b8 	.word	0x400204b8
 800b9e8:	4002040f 	.word	0x4002040f
 800b9ec:	10008200 	.word	0x10008200
 800b9f0:	40020880 	.word	0x40020880

0800b9f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d04a      	beq.n	800baa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2b08      	cmp	r3, #8
 800ba0e:	d847      	bhi.n	800baa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a25      	ldr	r2, [pc, #148]	; (800baac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d022      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a24      	ldr	r2, [pc, #144]	; (800bab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d01d      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a22      	ldr	r2, [pc, #136]	; (800bab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d018      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a21      	ldr	r2, [pc, #132]	; (800bab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d013      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a1f      	ldr	r2, [pc, #124]	; (800babc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d00e      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a1e      	ldr	r2, [pc, #120]	; (800bac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d009      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a1c      	ldr	r2, [pc, #112]	; (800bac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	d004      	beq.n	800ba60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a1b      	ldr	r2, [pc, #108]	; (800bac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d101      	bne.n	800ba64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ba60:	2301      	movs	r3, #1
 800ba62:	e000      	b.n	800ba66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ba64:	2300      	movs	r3, #0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00a      	beq.n	800ba80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ba6a:	68fa      	ldr	r2, [r7, #12]
 800ba6c:	4b17      	ldr	r3, [pc, #92]	; (800bacc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ba6e:	4413      	add	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	461a      	mov	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a15      	ldr	r2, [pc, #84]	; (800bad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ba7c:	671a      	str	r2, [r3, #112]	; 0x70
 800ba7e:	e009      	b.n	800ba94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ba80:	68fa      	ldr	r2, [r7, #12]
 800ba82:	4b14      	ldr	r3, [pc, #80]	; (800bad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ba84:	4413      	add	r3, r2
 800ba86:	009b      	lsls	r3, r3, #2
 800ba88:	461a      	mov	r2, r3
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	4a11      	ldr	r2, [pc, #68]	; (800bad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ba92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	3b01      	subs	r3, #1
 800ba98:	2201      	movs	r2, #1
 800ba9a:	409a      	lsls	r2, r3
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800baa0:	bf00      	nop
 800baa2:	3714      	adds	r7, #20
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr
 800baac:	58025408 	.word	0x58025408
 800bab0:	5802541c 	.word	0x5802541c
 800bab4:	58025430 	.word	0x58025430
 800bab8:	58025444 	.word	0x58025444
 800babc:	58025458 	.word	0x58025458
 800bac0:	5802546c 	.word	0x5802546c
 800bac4:	58025480 	.word	0x58025480
 800bac8:	58025494 	.word	0x58025494
 800bacc:	1600963f 	.word	0x1600963f
 800bad0:	58025940 	.word	0x58025940
 800bad4:	1000823f 	.word	0x1000823f
 800bad8:	40020940 	.word	0x40020940

0800badc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800badc:	b480      	push	{r7}
 800bade:	b089      	sub	sp, #36	; 0x24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800baea:	4b89      	ldr	r3, [pc, #548]	; (800bd10 <HAL_GPIO_Init+0x234>)
 800baec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800baee:	e194      	b.n	800be1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	681a      	ldr	r2, [r3, #0]
 800baf4:	2101      	movs	r1, #1
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	fa01 f303 	lsl.w	r3, r1, r3
 800bafc:	4013      	ands	r3, r2
 800bafe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	f000 8186 	beq.w	800be14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	f003 0303 	and.w	r3, r3, #3
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d005      	beq.n	800bb20 <HAL_GPIO_Init+0x44>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	f003 0303 	and.w	r3, r3, #3
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d130      	bne.n	800bb82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	2203      	movs	r2, #3
 800bb2c:	fa02 f303 	lsl.w	r3, r2, r3
 800bb30:	43db      	mvns	r3, r3
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	4013      	ands	r3, r2
 800bb36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	68da      	ldr	r2, [r3, #12]
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	005b      	lsls	r3, r3, #1
 800bb40:	fa02 f303 	lsl.w	r3, r2, r3
 800bb44:	69ba      	ldr	r2, [r7, #24]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69ba      	ldr	r2, [r7, #24]
 800bb4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bb56:	2201      	movs	r2, #1
 800bb58:	69fb      	ldr	r3, [r7, #28]
 800bb5a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb5e:	43db      	mvns	r3, r3
 800bb60:	69ba      	ldr	r2, [r7, #24]
 800bb62:	4013      	ands	r3, r2
 800bb64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	091b      	lsrs	r3, r3, #4
 800bb6c:	f003 0201 	and.w	r2, r3, #1
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	fa02 f303 	lsl.w	r3, r2, r3
 800bb76:	69ba      	ldr	r2, [r7, #24]
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	685b      	ldr	r3, [r3, #4]
 800bb86:	f003 0303 	and.w	r3, r3, #3
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d017      	beq.n	800bbbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	005b      	lsls	r3, r3, #1
 800bb98:	2203      	movs	r2, #3
 800bb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800bb9e:	43db      	mvns	r3, r3
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	4013      	ands	r3, r2
 800bba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	689a      	ldr	r2, [r3, #8]
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	005b      	lsls	r3, r3, #1
 800bbae:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	69ba      	ldr	r2, [r7, #24]
 800bbbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	f003 0303 	and.w	r3, r3, #3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d123      	bne.n	800bc12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	08da      	lsrs	r2, r3, #3
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3208      	adds	r2, #8
 800bbd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	220f      	movs	r2, #15
 800bbe2:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe6:	43db      	mvns	r3, r3
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	4013      	ands	r3, r2
 800bbec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	f003 0307 	and.w	r3, r3, #7
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	fa02 f303 	lsl.w	r3, r2, r3
 800bbfe:	69ba      	ldr	r2, [r7, #24]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	08da      	lsrs	r2, r3, #3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	3208      	adds	r2, #8
 800bc0c:	69b9      	ldr	r1, [r7, #24]
 800bc0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	005b      	lsls	r3, r3, #1
 800bc1c:	2203      	movs	r2, #3
 800bc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc22:	43db      	mvns	r3, r3
 800bc24:	69ba      	ldr	r2, [r7, #24]
 800bc26:	4013      	ands	r3, r2
 800bc28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f003 0203 	and.w	r2, r3, #3
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	fa02 f303 	lsl.w	r3, r2, r3
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	69ba      	ldr	r2, [r7, #24]
 800bc44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	685b      	ldr	r3, [r3, #4]
 800bc4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80e0 	beq.w	800be14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bc54:	4b2f      	ldr	r3, [pc, #188]	; (800bd14 <HAL_GPIO_Init+0x238>)
 800bc56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc5a:	4a2e      	ldr	r2, [pc, #184]	; (800bd14 <HAL_GPIO_Init+0x238>)
 800bc5c:	f043 0302 	orr.w	r3, r3, #2
 800bc60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bc64:	4b2b      	ldr	r3, [pc, #172]	; (800bd14 <HAL_GPIO_Init+0x238>)
 800bc66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bc72:	4a29      	ldr	r2, [pc, #164]	; (800bd18 <HAL_GPIO_Init+0x23c>)
 800bc74:	69fb      	ldr	r3, [r7, #28]
 800bc76:	089b      	lsrs	r3, r3, #2
 800bc78:	3302      	adds	r3, #2
 800bc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	f003 0303 	and.w	r3, r3, #3
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	220f      	movs	r2, #15
 800bc8a:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8e:	43db      	mvns	r3, r3
 800bc90:	69ba      	ldr	r2, [r7, #24]
 800bc92:	4013      	ands	r3, r2
 800bc94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a20      	ldr	r2, [pc, #128]	; (800bd1c <HAL_GPIO_Init+0x240>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d052      	beq.n	800bd44 <HAL_GPIO_Init+0x268>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a1f      	ldr	r2, [pc, #124]	; (800bd20 <HAL_GPIO_Init+0x244>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d031      	beq.n	800bd0a <HAL_GPIO_Init+0x22e>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a1e      	ldr	r2, [pc, #120]	; (800bd24 <HAL_GPIO_Init+0x248>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d02b      	beq.n	800bd06 <HAL_GPIO_Init+0x22a>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a1d      	ldr	r2, [pc, #116]	; (800bd28 <HAL_GPIO_Init+0x24c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d025      	beq.n	800bd02 <HAL_GPIO_Init+0x226>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a1c      	ldr	r2, [pc, #112]	; (800bd2c <HAL_GPIO_Init+0x250>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d01f      	beq.n	800bcfe <HAL_GPIO_Init+0x222>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a1b      	ldr	r2, [pc, #108]	; (800bd30 <HAL_GPIO_Init+0x254>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d019      	beq.n	800bcfa <HAL_GPIO_Init+0x21e>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a1a      	ldr	r2, [pc, #104]	; (800bd34 <HAL_GPIO_Init+0x258>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d013      	beq.n	800bcf6 <HAL_GPIO_Init+0x21a>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	4a19      	ldr	r2, [pc, #100]	; (800bd38 <HAL_GPIO_Init+0x25c>)
 800bcd2:	4293      	cmp	r3, r2
 800bcd4:	d00d      	beq.n	800bcf2 <HAL_GPIO_Init+0x216>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a18      	ldr	r2, [pc, #96]	; (800bd3c <HAL_GPIO_Init+0x260>)
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d007      	beq.n	800bcee <HAL_GPIO_Init+0x212>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a17      	ldr	r2, [pc, #92]	; (800bd40 <HAL_GPIO_Init+0x264>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d101      	bne.n	800bcea <HAL_GPIO_Init+0x20e>
 800bce6:	2309      	movs	r3, #9
 800bce8:	e02d      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bcea:	230a      	movs	r3, #10
 800bcec:	e02b      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bcee:	2308      	movs	r3, #8
 800bcf0:	e029      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bcf2:	2307      	movs	r3, #7
 800bcf4:	e027      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bcf6:	2306      	movs	r3, #6
 800bcf8:	e025      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bcfa:	2305      	movs	r3, #5
 800bcfc:	e023      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bcfe:	2304      	movs	r3, #4
 800bd00:	e021      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bd02:	2303      	movs	r3, #3
 800bd04:	e01f      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bd06:	2302      	movs	r3, #2
 800bd08:	e01d      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	e01b      	b.n	800bd46 <HAL_GPIO_Init+0x26a>
 800bd0e:	bf00      	nop
 800bd10:	58000080 	.word	0x58000080
 800bd14:	58024400 	.word	0x58024400
 800bd18:	58000400 	.word	0x58000400
 800bd1c:	58020000 	.word	0x58020000
 800bd20:	58020400 	.word	0x58020400
 800bd24:	58020800 	.word	0x58020800
 800bd28:	58020c00 	.word	0x58020c00
 800bd2c:	58021000 	.word	0x58021000
 800bd30:	58021400 	.word	0x58021400
 800bd34:	58021800 	.word	0x58021800
 800bd38:	58021c00 	.word	0x58021c00
 800bd3c:	58022000 	.word	0x58022000
 800bd40:	58022400 	.word	0x58022400
 800bd44:	2300      	movs	r3, #0
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	f002 0203 	and.w	r2, r2, #3
 800bd4c:	0092      	lsls	r2, r2, #2
 800bd4e:	4093      	lsls	r3, r2
 800bd50:	69ba      	ldr	r2, [r7, #24]
 800bd52:	4313      	orrs	r3, r2
 800bd54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bd56:	4938      	ldr	r1, [pc, #224]	; (800be38 <HAL_GPIO_Init+0x35c>)
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	089b      	lsrs	r3, r3, #2
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bd64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	43db      	mvns	r3, r3
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	4013      	ands	r3, r2
 800bd74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bd82:	69ba      	ldr	r2, [r7, #24]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bd8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bd92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	43db      	mvns	r3, r3
 800bd9e:	69ba      	ldr	r2, [r7, #24]
 800bda0:	4013      	ands	r3, r2
 800bda2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	685b      	ldr	r3, [r3, #4]
 800bda8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d003      	beq.n	800bdb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bdb0:	69ba      	ldr	r2, [r7, #24]
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bdb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	685b      	ldr	r3, [r3, #4]
 800bdc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	43db      	mvns	r3, r3
 800bdca:	69ba      	ldr	r2, [r7, #24]
 800bdcc:	4013      	ands	r3, r2
 800bdce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d003      	beq.n	800bde4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800bddc:	69ba      	ldr	r2, [r7, #24]
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	69ba      	ldr	r2, [r7, #24]
 800bde8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	43db      	mvns	r3, r3
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	4013      	ands	r3, r2
 800bdf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be02:	2b00      	cmp	r3, #0
 800be04:	d003      	beq.n	800be0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800be06:	69ba      	ldr	r2, [r7, #24]
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	4313      	orrs	r3, r2
 800be0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	69ba      	ldr	r2, [r7, #24]
 800be12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	3301      	adds	r3, #1
 800be18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	fa22 f303 	lsr.w	r3, r2, r3
 800be24:	2b00      	cmp	r3, #0
 800be26:	f47f ae63 	bne.w	800baf0 <HAL_GPIO_Init+0x14>
  }
}
 800be2a:	bf00      	nop
 800be2c:	bf00      	nop
 800be2e:	3724      	adds	r7, #36	; 0x24
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	58000400 	.word	0x58000400

0800be3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	460b      	mov	r3, r1
 800be46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	691a      	ldr	r2, [r3, #16]
 800be4c:	887b      	ldrh	r3, [r7, #2]
 800be4e:	4013      	ands	r3, r2
 800be50:	2b00      	cmp	r3, #0
 800be52:	d002      	beq.n	800be5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800be54:	2301      	movs	r3, #1
 800be56:	73fb      	strb	r3, [r7, #15]
 800be58:	e001      	b.n	800be5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3714      	adds	r7, #20
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	460b      	mov	r3, r1
 800be76:	807b      	strh	r3, [r7, #2]
 800be78:	4613      	mov	r3, r2
 800be7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800be7c:	787b      	ldrb	r3, [r7, #1]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d003      	beq.n	800be8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800be82:	887a      	ldrh	r2, [r7, #2]
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800be88:	e003      	b.n	800be92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800be8a:	887b      	ldrh	r3, [r7, #2]
 800be8c:	041a      	lsls	r2, r3, #16
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	619a      	str	r2, [r3, #24]
}
 800be92:	bf00      	nop
 800be94:	370c      	adds	r7, #12
 800be96:	46bd      	mov	sp, r7
 800be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9c:	4770      	bx	lr

0800be9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800be9e:	b480      	push	{r7}
 800bea0:	b085      	sub	sp, #20
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	6078      	str	r0, [r7, #4]
 800bea6:	460b      	mov	r3, r1
 800bea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800beb0:	887a      	ldrh	r2, [r7, #2]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4013      	ands	r3, r2
 800beb6:	041a      	lsls	r2, r3, #16
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	43d9      	mvns	r1, r3
 800bebc:	887b      	ldrh	r3, [r7, #2]
 800bebe:	400b      	ands	r3, r1
 800bec0:	431a      	orrs	r2, r3
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	619a      	str	r2, [r3, #24]
}
 800bec6:	bf00      	nop
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	4603      	mov	r3, r0
 800beda:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800bedc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bee0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bee4:	88fb      	ldrh	r3, [r7, #6]
 800bee6:	4013      	ands	r3, r2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d008      	beq.n	800befe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800beec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bef0:	88fb      	ldrh	r3, [r7, #6]
 800bef2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bef6:	88fb      	ldrh	r3, [r7, #6]
 800bef8:	4618      	mov	r0, r3
 800befa:	f7f8 fd23 	bl	8004944 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800befe:	bf00      	nop
 800bf00:	3708      	adds	r7, #8
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e041      	b.n	800bf9c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800bf20:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f245 5255 	movw	r2, #21845	; 0x5555
 800bf2a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	6852      	ldr	r2, [r2, #4]
 800bf34:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	6892      	ldr	r2, [r2, #8]
 800bf3e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800bf40:	f7fb f8c4 	bl	80070cc <HAL_GetTick>
 800bf44:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800bf46:	e00f      	b.n	800bf68 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800bf48:	f7fb f8c0 	bl	80070cc <HAL_GetTick>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	2b31      	cmp	r3, #49	; 0x31
 800bf54:	d908      	bls.n	800bf68 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	f003 0307 	and.w	r3, r3, #7
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d001      	beq.n	800bf68 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e019      	b.n	800bf9c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	f003 0307 	and.w	r3, r3, #7
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d1e8      	bne.n	800bf48 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d005      	beq.n	800bf90 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	68d2      	ldr	r2, [r2, #12]
 800bf8c:	611a      	str	r2, [r3, #16]
 800bf8e:	e004      	b.n	800bf9a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bf98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3710      	adds	r7, #16
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bfb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bfb6:	2300      	movs	r3, #0
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	370c      	adds	r7, #12
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800bfcc:	4b19      	ldr	r3, [pc, #100]	; (800c034 <HAL_PWREx_ConfigSupply+0x70>)
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	f003 0304 	and.w	r3, r3, #4
 800bfd4:	2b04      	cmp	r3, #4
 800bfd6:	d00a      	beq.n	800bfee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800bfd8:	4b16      	ldr	r3, [pc, #88]	; (800c034 <HAL_PWREx_ConfigSupply+0x70>)
 800bfda:	68db      	ldr	r3, [r3, #12]
 800bfdc:	f003 0307 	and.w	r3, r3, #7
 800bfe0:	687a      	ldr	r2, [r7, #4]
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d001      	beq.n	800bfea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e01f      	b.n	800c02a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800bfea:	2300      	movs	r3, #0
 800bfec:	e01d      	b.n	800c02a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800bfee:	4b11      	ldr	r3, [pc, #68]	; (800c034 <HAL_PWREx_ConfigSupply+0x70>)
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	f023 0207 	bic.w	r2, r3, #7
 800bff6:	490f      	ldr	r1, [pc, #60]	; (800c034 <HAL_PWREx_ConfigSupply+0x70>)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800bffe:	f7fb f865 	bl	80070cc <HAL_GetTick>
 800c002:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c004:	e009      	b.n	800c01a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c006:	f7fb f861 	bl	80070cc <HAL_GetTick>
 800c00a:	4602      	mov	r2, r0
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	1ad3      	subs	r3, r2, r3
 800c010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c014:	d901      	bls.n	800c01a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e007      	b.n	800c02a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c01a:	4b06      	ldr	r3, [pc, #24]	; (800c034 <HAL_PWREx_ConfigSupply+0x70>)
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c022:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c026:	d1ee      	bne.n	800c006 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	58024800 	.word	0x58024800

0800c038 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b086      	sub	sp, #24
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c040:	f7fb f844 	bl	80070cc <HAL_GetTick>
 800c044:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d101      	bne.n	800c050 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c04c:	2301      	movs	r3, #1
 800c04e:	e05f      	b.n	800c110 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c056:	b2db      	uxtb	r3, r3
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d107      	bne.n	800c06c <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f7fa fb31 	bl	80066c4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c062:	f241 3188 	movw	r1, #5000	; 0x1388
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 fa5e 	bl	800c528 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	689b      	ldr	r3, [r3, #8]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	021a      	lsls	r2, r3, #8
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	430a      	orrs	r2, r1
 800c084:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	2120      	movs	r1, #32
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fa56 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c098:	4603      	mov	r3, r0
 800c09a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c09c:	7afb      	ldrb	r3, [r7, #11]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d135      	bne.n	800c10e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	4b1b      	ldr	r3, [pc, #108]	; (800c118 <HAL_QSPI_Init+0xe0>)
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	6852      	ldr	r2, [r2, #4]
 800c0b0:	0611      	lsls	r1, r2, #24
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	68d2      	ldr	r2, [r2, #12]
 800c0b6:	4311      	orrs	r1, r2
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	69d2      	ldr	r2, [r2, #28]
 800c0bc:	4311      	orrs	r1, r2
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	6a12      	ldr	r2, [r2, #32]
 800c0c2:	4311      	orrs	r1, r2
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	6812      	ldr	r2, [r2, #0]
 800c0c8:	430b      	orrs	r3, r1
 800c0ca:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	685a      	ldr	r2, [r3, #4]
 800c0d2:	4b12      	ldr	r3, [pc, #72]	; (800c11c <HAL_QSPI_Init+0xe4>)
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	6912      	ldr	r2, [r2, #16]
 800c0da:	0411      	lsls	r1, r2, #16
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	6952      	ldr	r2, [r2, #20]
 800c0e0:	4311      	orrs	r1, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	6992      	ldr	r2, [r2, #24]
 800c0e6:	4311      	orrs	r1, r2
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	6812      	ldr	r2, [r2, #0]
 800c0ec:	430b      	orrs	r3, r1
 800c0ee:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f042 0201 	orr.w	r2, r2, #1
 800c0fe:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	2201      	movs	r2, #1
 800c10a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800c10e:	7afb      	ldrb	r3, [r7, #11]
}
 800c110:	4618      	mov	r0, r3
 800c112:	3710      	adds	r7, #16
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	00ffff2f 	.word	0x00ffff2f
 800c11c:	ffe0f8fe 	.word	0xffe0f8fe

0800c120 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af02      	add	r7, sp, #8
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c12c:	f7fa ffce 	bl	80070cc <HAL_GetTick>
 800c130:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c138:	b2db      	uxtb	r3, r3
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d101      	bne.n	800c142 <HAL_QSPI_Command+0x22>
 800c13e:	2302      	movs	r3, #2
 800c140:	e048      	b.n	800c1d4 <HAL_QSPI_Command+0xb4>
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2201      	movs	r2, #1
 800c146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b01      	cmp	r3, #1
 800c154:	d137      	bne.n	800c1c6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	2202      	movs	r2, #2
 800c160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	9300      	str	r3, [sp, #0]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	2200      	movs	r2, #0
 800c16c:	2120      	movs	r1, #32
 800c16e:	68f8      	ldr	r0, [r7, #12]
 800c170:	f000 f9e8 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c174:	4603      	mov	r3, r0
 800c176:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d125      	bne.n	800c1ca <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c17e:	2200      	movs	r2, #0
 800c180:	68b9      	ldr	r1, [r7, #8]
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f000 fa15 	bl	800c5b2 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d115      	bne.n	800c1bc <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	9300      	str	r3, [sp, #0]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	2201      	movs	r2, #1
 800c198:	2102      	movs	r1, #2
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 f9d2 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c1a4:	7dfb      	ldrb	r3, [r7, #23]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d10f      	bne.n	800c1ca <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1ba:	e006      	b.n	800c1ca <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c1c4:	e001      	b.n	800c1ca <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3718      	adds	r7, #24
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08a      	sub	sp, #40	; 0x28
 800c1e0:	af02      	add	r7, sp, #8
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c1ec:	f7fa ff6e 	bl	80070cc <HAL_GetTick>
 800c1f0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3320      	adds	r3, #32
 800c1f8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c200:	b2db      	uxtb	r3, r3
 800c202:	2b01      	cmp	r3, #1
 800c204:	d101      	bne.n	800c20a <HAL_QSPI_Transmit+0x2e>
 800c206:	2302      	movs	r3, #2
 800c208:	e076      	b.n	800c2f8 <HAL_QSPI_Transmit+0x11c>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d165      	bne.n	800c2ea <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2200      	movs	r2, #0
 800c222:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d056      	beq.n	800c2d8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2212      	movs	r2, #18
 800c22e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	691b      	ldr	r3, [r3, #16]
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	68ba      	ldr	r2, [r7, #8]
 800c24e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	695a      	ldr	r2, [r3, #20]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c25e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c260:	e01b      	b.n	800c29a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	9300      	str	r3, [sp, #0]
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	2201      	movs	r2, #1
 800c26a:	2104      	movs	r1, #4
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f969 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c272:	4603      	mov	r3, r0
 800c274:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c276:	7ffb      	ldrb	r3, [r7, #31]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d113      	bne.n	800c2a4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c280:	781a      	ldrb	r2, [r3, #0]
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c294:	1e5a      	subs	r2, r3, #1
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d1df      	bne.n	800c262 <HAL_QSPI_Transmit+0x86>
 800c2a2:	e000      	b.n	800c2a6 <HAL_QSPI_Transmit+0xca>
          break;
 800c2a4:	bf00      	nop
      }

      if (status == HAL_OK)
 800c2a6:	7ffb      	ldrb	r3, [r7, #31]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d110      	bne.n	800c2ce <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	2102      	movs	r1, #2
 800c2b6:	68f8      	ldr	r0, [r7, #12]
 800c2b8:	f000 f944 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c2c0:	7ffb      	ldrb	r3, [r7, #31]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d103      	bne.n	800c2ce <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c2d6:	e00a      	b.n	800c2ee <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2dc:	f043 0208 	orr.w	r2, r3, #8
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	77fb      	strb	r3, [r7, #31]
 800c2e8:	e001      	b.n	800c2ee <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c2ea:	2302      	movs	r3, #2
 800c2ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c2f6:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3720      	adds	r7, #32
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b08a      	sub	sp, #40	; 0x28
 800c304:	af02      	add	r7, sp, #8
 800c306:	60f8      	str	r0, [r7, #12]
 800c308:	60b9      	str	r1, [r7, #8]
 800c30a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c310:	f7fa fedc 	bl	80070cc <HAL_GetTick>
 800c314:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3320      	adds	r3, #32
 800c324:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	2b01      	cmp	r3, #1
 800c330:	d101      	bne.n	800c336 <HAL_QSPI_Receive+0x36>
 800c332:	2302      	movs	r3, #2
 800c334:	e07d      	b.n	800c432 <HAL_QSPI_Receive+0x132>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	2201      	movs	r2, #1
 800c33a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c344:	b2db      	uxtb	r3, r3
 800c346:	2b01      	cmp	r3, #1
 800c348:	d16c      	bne.n	800c424 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2200      	movs	r2, #0
 800c34e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d05d      	beq.n	800c412 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2222      	movs	r2, #34	; 0x22
 800c35a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	691b      	ldr	r3, [r3, #16]
 800c370:	1c5a      	adds	r2, r3, #1
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c38e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	697a      	ldr	r2, [r7, #20]
 800c396:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c398:	e01c      	b.n	800c3d4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	69bb      	ldr	r3, [r7, #24]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	2106      	movs	r1, #6
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f000 f8cd 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c3ae:	7ffb      	ldrb	r3, [r7, #31]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d114      	bne.n	800c3de <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	7812      	ldrb	r2, [r2, #0]
 800c3bc:	b2d2      	uxtb	r2, r2
 800c3be:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3c4:	1c5a      	adds	r2, r3, #1
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	1e5a      	subs	r2, r3, #1
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d1de      	bne.n	800c39a <HAL_QSPI_Receive+0x9a>
 800c3dc:	e000      	b.n	800c3e0 <HAL_QSPI_Receive+0xe0>
          break;
 800c3de:	bf00      	nop
      }

      if (status == HAL_OK)
 800c3e0:	7ffb      	ldrb	r3, [r7, #31]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d110      	bne.n	800c408 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	9300      	str	r3, [sp, #0]
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	2102      	movs	r1, #2
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f000 f8a7 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c3fa:	7ffb      	ldrb	r3, [r7, #31]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d103      	bne.n	800c408 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2202      	movs	r2, #2
 800c406:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c410:	e00a      	b.n	800c428 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c416:	f043 0208 	orr.w	r2, r3, #8
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	77fb      	strb	r3, [r7, #31]
 800c422:	e001      	b.n	800c428 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c424:	2302      	movs	r3, #2
 800c426:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c430:	7ffb      	ldrb	r3, [r7, #31]
}
 800c432:	4618      	mov	r0, r3
 800c434:	3720      	adds	r7, #32
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}

0800c43a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c43a:	b580      	push	{r7, lr}
 800c43c:	b088      	sub	sp, #32
 800c43e:	af02      	add	r7, sp, #8
 800c440:	60f8      	str	r0, [r7, #12]
 800c442:	60b9      	str	r1, [r7, #8]
 800c444:	607a      	str	r2, [r7, #4]
 800c446:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c448:	f7fa fe40 	bl	80070cc <HAL_GetTick>
 800c44c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b01      	cmp	r3, #1
 800c458:	d101      	bne.n	800c45e <HAL_QSPI_AutoPolling+0x24>
 800c45a:	2302      	movs	r3, #2
 800c45c:	e060      	b.n	800c520 <HAL_QSPI_AutoPolling+0xe6>
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2201      	movs	r2, #1
 800c462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d14f      	bne.n	800c512 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2200      	movs	r2, #0
 800c476:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2242      	movs	r2, #66	; 0x42
 800c47c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2200      	movs	r2, #0
 800c488:	2120      	movs	r1, #32
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 f85a 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c490:	4603      	mov	r3, r0
 800c492:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c494:	7dfb      	ldrb	r3, [r7, #23]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d13d      	bne.n	800c516 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	6812      	ldr	r2, [r2, #0]
 800c4a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	6852      	ldr	r2, [r2, #4]
 800c4ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	6892      	ldr	r2, [r2, #8]
 800c4b6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	691b      	ldr	r3, [r3, #16]
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c4d0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c4da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c4de:	68b9      	ldr	r1, [r7, #8]
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f000 f866 	bl	800c5b2 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	2108      	movs	r1, #8
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 f827 	bl	800c544 <QSPI_WaitFlagStateUntilTimeout>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10a      	bne.n	800c516 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2208      	movs	r2, #8
 800c506:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2201      	movs	r2, #1
 800c50c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c510:	e001      	b.n	800c516 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c512:	2302      	movs	r3, #2
 800c514:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	603b      	str	r3, [r7, #0]
 800c550:	4613      	mov	r3, r2
 800c552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c554:	e01a      	b.n	800c58c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c55c:	d016      	beq.n	800c58c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c55e:	f7fa fdb5 	bl	80070cc <HAL_GetTick>
 800c562:	4602      	mov	r2, r0
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	69ba      	ldr	r2, [r7, #24]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d302      	bcc.n	800c574 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10b      	bne.n	800c58c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	2204      	movs	r2, #4
 800c578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c580:	f043 0201 	orr.w	r2, r3, #1
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e00e      	b.n	800c5aa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	689a      	ldr	r2, [r3, #8]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	4013      	ands	r3, r2
 800c596:	2b00      	cmp	r3, #0
 800c598:	bf14      	ite	ne
 800c59a:	2301      	movne	r3, #1
 800c59c:	2300      	moveq	r3, #0
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	79fb      	ldrb	r3, [r7, #7]
 800c5a4:	429a      	cmp	r2, r3
 800c5a6:	d1d6      	bne.n	800c556 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5a8:	2300      	movs	r3, #0
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}

0800c5b2 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b085      	sub	sp, #20
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	60f8      	str	r0, [r7, #12]
 800c5ba:	60b9      	str	r1, [r7, #8]
 800c5bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d009      	beq.n	800c5da <QSPI_Config+0x28>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c5cc:	d005      	beq.n	800c5da <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3a01      	subs	r2, #1
 800c5d8:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	f000 80b9 	beq.w	800c756 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d05f      	beq.n	800c6ac <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	68ba      	ldr	r2, [r7, #8]
 800c5f2:	6892      	ldr	r2, [r2, #8]
 800c5f4:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d031      	beq.n	800c662 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c606:	431a      	orrs	r2, r3
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c60c:	431a      	orrs	r2, r3
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c612:	431a      	orrs	r2, r3
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	695b      	ldr	r3, [r3, #20]
 800c618:	049b      	lsls	r3, r3, #18
 800c61a:	431a      	orrs	r2, r3
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	431a      	orrs	r2, r3
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	431a      	orrs	r2, r3
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	431a      	orrs	r2, r3
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	69db      	ldr	r3, [r3, #28]
 800c632:	431a      	orrs	r2, r3
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	699b      	ldr	r3, [r3, #24]
 800c638:	431a      	orrs	r2, r3
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	ea42 0103 	orr.w	r1, r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	430a      	orrs	r2, r1
 800c64a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c652:	f000 812e 	beq.w	800c8b2 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	6852      	ldr	r2, [r2, #4]
 800c65e:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c660:	e127      	b.n	800c8b2 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66a:	431a      	orrs	r2, r3
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c670:	431a      	orrs	r2, r3
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c676:	431a      	orrs	r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	695b      	ldr	r3, [r3, #20]
 800c67c:	049b      	lsls	r3, r3, #18
 800c67e:	431a      	orrs	r2, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	691b      	ldr	r3, [r3, #16]
 800c684:	431a      	orrs	r2, r3
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	69db      	ldr	r3, [r3, #28]
 800c690:	431a      	orrs	r2, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	699b      	ldr	r3, [r3, #24]
 800c696:	431a      	orrs	r2, r3
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	ea42 0103 	orr.w	r1, r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	615a      	str	r2, [r3, #20]
}
 800c6aa:	e102      	b.n	800c8b2 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	69db      	ldr	r3, [r3, #28]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d02e      	beq.n	800c712 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6c2:	431a      	orrs	r2, r3
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c8:	431a      	orrs	r2, r3
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	695b      	ldr	r3, [r3, #20]
 800c6ce:	049b      	lsls	r3, r3, #18
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	431a      	orrs	r2, r3
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	ea42 0103 	orr.w	r1, r2, r3
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c702:	f000 80d6 	beq.w	800c8b2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68ba      	ldr	r2, [r7, #8]
 800c70c:	6852      	ldr	r2, [r2, #4]
 800c70e:	619a      	str	r2, [r3, #24]
}
 800c710:	e0cf      	b.n	800c8b2 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c71a:	431a      	orrs	r2, r3
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c720:	431a      	orrs	r2, r3
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c726:	431a      	orrs	r2, r3
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	049b      	lsls	r3, r3, #18
 800c72e:	431a      	orrs	r2, r3
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	6a1b      	ldr	r3, [r3, #32]
 800c734:	431a      	orrs	r2, r3
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	69db      	ldr	r3, [r3, #28]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	699b      	ldr	r3, [r3, #24]
 800c740:	431a      	orrs	r2, r3
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	ea42 0103 	orr.w	r1, r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	430a      	orrs	r2, r1
 800c752:	615a      	str	r2, [r3, #20]
}
 800c754:	e0ad      	b.n	800c8b2 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d058      	beq.n	800c810 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	68ba      	ldr	r2, [r7, #8]
 800c764:	6892      	ldr	r2, [r2, #8]
 800c766:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	69db      	ldr	r3, [r3, #28]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d02d      	beq.n	800c7cc <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c778:	431a      	orrs	r2, r3
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c77e:	431a      	orrs	r2, r3
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c784:	431a      	orrs	r2, r3
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	049b      	lsls	r3, r3, #18
 800c78c:	431a      	orrs	r2, r3
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	431a      	orrs	r2, r3
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	6a1b      	ldr	r3, [r3, #32]
 800c798:	431a      	orrs	r2, r3
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	431a      	orrs	r2, r3
 800c7a0:	68bb      	ldr	r3, [r7, #8]
 800c7a2:	69db      	ldr	r3, [r3, #28]
 800c7a4:	431a      	orrs	r2, r3
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	699b      	ldr	r3, [r3, #24]
 800c7aa:	ea42 0103 	orr.w	r1, r2, r3
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	430a      	orrs	r2, r1
 800c7b6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c7be:	d078      	beq.n	800c8b2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68ba      	ldr	r2, [r7, #8]
 800c7c6:	6852      	ldr	r2, [r2, #4]
 800c7c8:	619a      	str	r2, [r3, #24]
}
 800c7ca:	e072      	b.n	800c8b2 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7d4:	431a      	orrs	r2, r3
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	049b      	lsls	r3, r3, #18
 800c7e8:	431a      	orrs	r2, r3
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	691b      	ldr	r3, [r3, #16]
 800c7ee:	431a      	orrs	r2, r3
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	431a      	orrs	r2, r3
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	69db      	ldr	r3, [r3, #28]
 800c7fa:	431a      	orrs	r2, r3
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	ea42 0103 	orr.w	r1, r2, r3
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	430a      	orrs	r2, r1
 800c80c:	615a      	str	r2, [r3, #20]
}
 800c80e:	e050      	b.n	800c8b2 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	69db      	ldr	r3, [r3, #28]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d02a      	beq.n	800c86e <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c820:	431a      	orrs	r2, r3
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c826:	431a      	orrs	r2, r3
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c82c:	431a      	orrs	r2, r3
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	695b      	ldr	r3, [r3, #20]
 800c832:	049b      	lsls	r3, r3, #18
 800c834:	431a      	orrs	r2, r3
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	6a1b      	ldr	r3, [r3, #32]
 800c83a:	431a      	orrs	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	68db      	ldr	r3, [r3, #12]
 800c840:	431a      	orrs	r2, r3
 800c842:	68bb      	ldr	r3, [r7, #8]
 800c844:	69db      	ldr	r3, [r3, #28]
 800c846:	431a      	orrs	r2, r3
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	ea42 0103 	orr.w	r1, r2, r3
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	430a      	orrs	r2, r1
 800c858:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c860:	d027      	beq.n	800c8b2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68ba      	ldr	r2, [r7, #8]
 800c868:	6852      	ldr	r2, [r2, #4]
 800c86a:	619a      	str	r2, [r3, #24]
}
 800c86c:	e021      	b.n	800c8b2 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c872:	2b00      	cmp	r3, #0
 800c874:	d01d      	beq.n	800c8b2 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87e:	431a      	orrs	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c884:	431a      	orrs	r2, r3
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	431a      	orrs	r2, r3
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	695b      	ldr	r3, [r3, #20]
 800c890:	049b      	lsls	r3, r3, #18
 800c892:	431a      	orrs	r2, r3
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	6a1b      	ldr	r3, [r3, #32]
 800c898:	431a      	orrs	r2, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	69db      	ldr	r3, [r3, #28]
 800c89e:	431a      	orrs	r2, r3
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	699b      	ldr	r3, [r3, #24]
 800c8a4:	ea42 0103 	orr.w	r1, r2, r3
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	430a      	orrs	r2, r1
 800c8b0:	615a      	str	r2, [r3, #20]
}
 800c8b2:	bf00      	nop
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
	...

0800c8c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b08c      	sub	sp, #48	; 0x30
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d102      	bne.n	800c8d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	f000 bc48 	b.w	800d164 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0301 	and.w	r3, r3, #1
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 8088 	beq.w	800c9f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c8e2:	4b99      	ldr	r3, [pc, #612]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c8ec:	4b96      	ldr	r3, [pc, #600]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8f0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	2b10      	cmp	r3, #16
 800c8f6:	d007      	beq.n	800c908 <HAL_RCC_OscConfig+0x48>
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	2b18      	cmp	r3, #24
 800c8fc:	d111      	bne.n	800c922 <HAL_RCC_OscConfig+0x62>
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	f003 0303 	and.w	r3, r3, #3
 800c904:	2b02      	cmp	r3, #2
 800c906:	d10c      	bne.n	800c922 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c908:	4b8f      	ldr	r3, [pc, #572]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c910:	2b00      	cmp	r3, #0
 800c912:	d06d      	beq.n	800c9f0 <HAL_RCC_OscConfig+0x130>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d169      	bne.n	800c9f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	f000 bc21 	b.w	800d164 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c92a:	d106      	bne.n	800c93a <HAL_RCC_OscConfig+0x7a>
 800c92c:	4b86      	ldr	r3, [pc, #536]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a85      	ldr	r2, [pc, #532]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c936:	6013      	str	r3, [r2, #0]
 800c938:	e02e      	b.n	800c998 <HAL_RCC_OscConfig+0xd8>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10c      	bne.n	800c95c <HAL_RCC_OscConfig+0x9c>
 800c942:	4b81      	ldr	r3, [pc, #516]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a80      	ldr	r2, [pc, #512]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	4b7e      	ldr	r3, [pc, #504]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a7d      	ldr	r2, [pc, #500]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c954:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c958:	6013      	str	r3, [r2, #0]
 800c95a:	e01d      	b.n	800c998 <HAL_RCC_OscConfig+0xd8>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c964:	d10c      	bne.n	800c980 <HAL_RCC_OscConfig+0xc0>
 800c966:	4b78      	ldr	r3, [pc, #480]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a77      	ldr	r2, [pc, #476]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c96c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c970:	6013      	str	r3, [r2, #0]
 800c972:	4b75      	ldr	r3, [pc, #468]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a74      	ldr	r2, [pc, #464]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c97c:	6013      	str	r3, [r2, #0]
 800c97e:	e00b      	b.n	800c998 <HAL_RCC_OscConfig+0xd8>
 800c980:	4b71      	ldr	r3, [pc, #452]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a70      	ldr	r2, [pc, #448]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c986:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	4b6e      	ldr	r3, [pc, #440]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	4a6d      	ldr	r2, [pc, #436]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c996:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d013      	beq.n	800c9c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9a0:	f7fa fb94 	bl	80070cc <HAL_GetTick>
 800c9a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c9a6:	e008      	b.n	800c9ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9a8:	f7fa fb90 	bl	80070cc <HAL_GetTick>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2b64      	cmp	r3, #100	; 0x64
 800c9b4:	d901      	bls.n	800c9ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e3d4      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c9ba:	4b63      	ldr	r3, [pc, #396]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d0f0      	beq.n	800c9a8 <HAL_RCC_OscConfig+0xe8>
 800c9c6:	e014      	b.n	800c9f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9c8:	f7fa fb80 	bl	80070cc <HAL_GetTick>
 800c9cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9ce:	e008      	b.n	800c9e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9d0:	f7fa fb7c 	bl	80070cc <HAL_GetTick>
 800c9d4:	4602      	mov	r2, r0
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	2b64      	cmp	r3, #100	; 0x64
 800c9dc:	d901      	bls.n	800c9e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c9de:	2303      	movs	r3, #3
 800c9e0:	e3c0      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c9e2:	4b59      	ldr	r3, [pc, #356]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d1f0      	bne.n	800c9d0 <HAL_RCC_OscConfig+0x110>
 800c9ee:	e000      	b.n	800c9f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c9f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 0302 	and.w	r3, r3, #2
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	f000 80ca 	beq.w	800cb94 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ca00:	4b51      	ldr	r3, [pc, #324]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca08:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ca0a:	4b4f      	ldr	r3, [pc, #316]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d007      	beq.n	800ca26 <HAL_RCC_OscConfig+0x166>
 800ca16:	6a3b      	ldr	r3, [r7, #32]
 800ca18:	2b18      	cmp	r3, #24
 800ca1a:	d156      	bne.n	800caca <HAL_RCC_OscConfig+0x20a>
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	f003 0303 	and.w	r3, r3, #3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d151      	bne.n	800caca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca26:	4b48      	ldr	r3, [pc, #288]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 0304 	and.w	r3, r3, #4
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d005      	beq.n	800ca3e <HAL_RCC_OscConfig+0x17e>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	68db      	ldr	r3, [r3, #12]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	e392      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ca3e:	4b42      	ldr	r3, [pc, #264]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f023 0219 	bic.w	r2, r3, #25
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	493f      	ldr	r1, [pc, #252]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca4c:	4313      	orrs	r3, r2
 800ca4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca50:	f7fa fb3c 	bl	80070cc <HAL_GetTick>
 800ca54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca56:	e008      	b.n	800ca6a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca58:	f7fa fb38 	bl	80070cc <HAL_GetTick>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d901      	bls.n	800ca6a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ca66:	2303      	movs	r3, #3
 800ca68:	e37c      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ca6a:	4b37      	ldr	r3, [pc, #220]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	f003 0304 	and.w	r3, r3, #4
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d0f0      	beq.n	800ca58 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca76:	f7fa fb59 	bl	800712c <HAL_GetREVID>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	f241 0203 	movw	r2, #4099	; 0x1003
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d817      	bhi.n	800cab4 <HAL_RCC_OscConfig+0x1f4>
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	2b40      	cmp	r3, #64	; 0x40
 800ca8a:	d108      	bne.n	800ca9e <HAL_RCC_OscConfig+0x1de>
 800ca8c:	4b2e      	ldr	r3, [pc, #184]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ca94:	4a2c      	ldr	r2, [pc, #176]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800ca96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca9a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ca9c:	e07a      	b.n	800cb94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca9e:	4b2a      	ldr	r3, [pc, #168]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	031b      	lsls	r3, r3, #12
 800caac:	4926      	ldr	r1, [pc, #152]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800caae:	4313      	orrs	r3, r2
 800cab0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cab2:	e06f      	b.n	800cb94 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cab4:	4b24      	ldr	r3, [pc, #144]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	691b      	ldr	r3, [r3, #16]
 800cac0:	061b      	lsls	r3, r3, #24
 800cac2:	4921      	ldr	r1, [pc, #132]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cac8:	e064      	b.n	800cb94 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d047      	beq.n	800cb62 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cad2:	4b1d      	ldr	r3, [pc, #116]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f023 0219 	bic.w	r2, r3, #25
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	68db      	ldr	r3, [r3, #12]
 800cade:	491a      	ldr	r1, [pc, #104]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cae0:	4313      	orrs	r3, r2
 800cae2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cae4:	f7fa faf2 	bl	80070cc <HAL_GetTick>
 800cae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800caea:	e008      	b.n	800cafe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800caec:	f7fa faee 	bl	80070cc <HAL_GetTick>
 800caf0:	4602      	mov	r2, r0
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	1ad3      	subs	r3, r2, r3
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d901      	bls.n	800cafe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e332      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cafe:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	f003 0304 	and.w	r3, r3, #4
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d0f0      	beq.n	800caec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb0a:	f7fa fb0f 	bl	800712c <HAL_GetREVID>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	f241 0203 	movw	r2, #4099	; 0x1003
 800cb14:	4293      	cmp	r3, r2
 800cb16:	d819      	bhi.n	800cb4c <HAL_RCC_OscConfig+0x28c>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	2b40      	cmp	r3, #64	; 0x40
 800cb1e:	d108      	bne.n	800cb32 <HAL_RCC_OscConfig+0x272>
 800cb20:	4b09      	ldr	r3, [pc, #36]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cb28:	4a07      	ldr	r2, [pc, #28]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cb2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb2e:	6053      	str	r3, [r2, #4]
 800cb30:	e030      	b.n	800cb94 <HAL_RCC_OscConfig+0x2d4>
 800cb32:	4b05      	ldr	r3, [pc, #20]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	031b      	lsls	r3, r3, #12
 800cb40:	4901      	ldr	r1, [pc, #4]	; (800cb48 <HAL_RCC_OscConfig+0x288>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	604b      	str	r3, [r1, #4]
 800cb46:	e025      	b.n	800cb94 <HAL_RCC_OscConfig+0x2d4>
 800cb48:	58024400 	.word	0x58024400
 800cb4c:	4b9a      	ldr	r3, [pc, #616]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	691b      	ldr	r3, [r3, #16]
 800cb58:	061b      	lsls	r3, r3, #24
 800cb5a:	4997      	ldr	r1, [pc, #604]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	604b      	str	r3, [r1, #4]
 800cb60:	e018      	b.n	800cb94 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cb62:	4b95      	ldr	r3, [pc, #596]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a94      	ldr	r2, [pc, #592]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cb68:	f023 0301 	bic.w	r3, r3, #1
 800cb6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb6e:	f7fa faad 	bl	80070cc <HAL_GetTick>
 800cb72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb74:	e008      	b.n	800cb88 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cb76:	f7fa faa9 	bl	80070cc <HAL_GetTick>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d901      	bls.n	800cb88 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800cb84:	2303      	movs	r3, #3
 800cb86:	e2ed      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cb88:	4b8b      	ldr	r3, [pc, #556]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0304 	and.w	r3, r3, #4
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d1f0      	bne.n	800cb76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0310 	and.w	r3, r3, #16
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 80a9 	beq.w	800ccf4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cba2:	4b85      	ldr	r3, [pc, #532]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbaa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cbac:	4b82      	ldr	r3, [pc, #520]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cbae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	2b08      	cmp	r3, #8
 800cbb6:	d007      	beq.n	800cbc8 <HAL_RCC_OscConfig+0x308>
 800cbb8:	69bb      	ldr	r3, [r7, #24]
 800cbba:	2b18      	cmp	r3, #24
 800cbbc:	d13a      	bne.n	800cc34 <HAL_RCC_OscConfig+0x374>
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	f003 0303 	and.w	r3, r3, #3
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d135      	bne.n	800cc34 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cbc8:	4b7b      	ldr	r3, [pc, #492]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x320>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	69db      	ldr	r3, [r3, #28]
 800cbd8:	2b80      	cmp	r3, #128	; 0x80
 800cbda:	d001      	beq.n	800cbe0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800cbdc:	2301      	movs	r3, #1
 800cbde:	e2c1      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cbe0:	f7fa faa4 	bl	800712c <HAL_GetREVID>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f241 0203 	movw	r2, #4099	; 0x1003
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d817      	bhi.n	800cc1e <HAL_RCC_OscConfig+0x35e>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	2b20      	cmp	r3, #32
 800cbf4:	d108      	bne.n	800cc08 <HAL_RCC_OscConfig+0x348>
 800cbf6:	4b70      	ldr	r3, [pc, #448]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cbfe:	4a6e      	ldr	r2, [pc, #440]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc04:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc06:	e075      	b.n	800ccf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc08:	4b6b      	ldr	r3, [pc, #428]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6a1b      	ldr	r3, [r3, #32]
 800cc14:	069b      	lsls	r3, r3, #26
 800cc16:	4968      	ldr	r1, [pc, #416]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc1c:	e06a      	b.n	800ccf4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc1e:	4b66      	ldr	r3, [pc, #408]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	061b      	lsls	r3, r3, #24
 800cc2c:	4962      	ldr	r1, [pc, #392]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cc32:	e05f      	b.n	800ccf4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	69db      	ldr	r3, [r3, #28]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d042      	beq.n	800ccc2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cc3c:	4b5e      	ldr	r3, [pc, #376]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a5d      	ldr	r2, [pc, #372]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc48:	f7fa fa40 	bl	80070cc <HAL_GetTick>
 800cc4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc4e:	e008      	b.n	800cc62 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cc50:	f7fa fa3c 	bl	80070cc <HAL_GetTick>
 800cc54:	4602      	mov	r2, r0
 800cc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	2b02      	cmp	r3, #2
 800cc5c:	d901      	bls.n	800cc62 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cc5e:	2303      	movs	r3, #3
 800cc60:	e280      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cc62:	4b55      	ldr	r3, [pc, #340]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0f0      	beq.n	800cc50 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cc6e:	f7fa fa5d 	bl	800712c <HAL_GetREVID>
 800cc72:	4603      	mov	r3, r0
 800cc74:	f241 0203 	movw	r2, #4099	; 0x1003
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d817      	bhi.n	800ccac <HAL_RCC_OscConfig+0x3ec>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6a1b      	ldr	r3, [r3, #32]
 800cc80:	2b20      	cmp	r3, #32
 800cc82:	d108      	bne.n	800cc96 <HAL_RCC_OscConfig+0x3d6>
 800cc84:	4b4c      	ldr	r3, [pc, #304]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cc8c:	4a4a      	ldr	r2, [pc, #296]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cc92:	6053      	str	r3, [r2, #4]
 800cc94:	e02e      	b.n	800ccf4 <HAL_RCC_OscConfig+0x434>
 800cc96:	4b48      	ldr	r3, [pc, #288]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cc98:	685b      	ldr	r3, [r3, #4]
 800cc9a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	069b      	lsls	r3, r3, #26
 800cca4:	4944      	ldr	r1, [pc, #272]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cca6:	4313      	orrs	r3, r2
 800cca8:	604b      	str	r3, [r1, #4]
 800ccaa:	e023      	b.n	800ccf4 <HAL_RCC_OscConfig+0x434>
 800ccac:	4b42      	ldr	r3, [pc, #264]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6a1b      	ldr	r3, [r3, #32]
 800ccb8:	061b      	lsls	r3, r3, #24
 800ccba:	493f      	ldr	r1, [pc, #252]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60cb      	str	r3, [r1, #12]
 800ccc0:	e018      	b.n	800ccf4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ccc2:	4b3d      	ldr	r3, [pc, #244]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a3c      	ldr	r2, [pc, #240]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800ccc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cccc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccce:	f7fa f9fd 	bl	80070cc <HAL_GetTick>
 800ccd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ccd4:	e008      	b.n	800cce8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ccd6:	f7fa f9f9 	bl	80070cc <HAL_GetTick>
 800ccda:	4602      	mov	r2, r0
 800ccdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccde:	1ad3      	subs	r3, r2, r3
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d901      	bls.n	800cce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cce4:	2303      	movs	r3, #3
 800cce6:	e23d      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cce8:	4b33      	ldr	r3, [pc, #204]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d1f0      	bne.n	800ccd6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f003 0308 	and.w	r3, r3, #8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d036      	beq.n	800cd6e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	695b      	ldr	r3, [r3, #20]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d019      	beq.n	800cd3c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd08:	4b2b      	ldr	r3, [pc, #172]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd0c:	4a2a      	ldr	r2, [pc, #168]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd0e:	f043 0301 	orr.w	r3, r3, #1
 800cd12:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd14:	f7fa f9da 	bl	80070cc <HAL_GetTick>
 800cd18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd1a:	e008      	b.n	800cd2e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd1c:	f7fa f9d6 	bl	80070cc <HAL_GetTick>
 800cd20:	4602      	mov	r2, r0
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	2b02      	cmp	r3, #2
 800cd28:	d901      	bls.n	800cd2e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cd2a:	2303      	movs	r3, #3
 800cd2c:	e21a      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cd2e:	4b22      	ldr	r3, [pc, #136]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd32:	f003 0302 	and.w	r3, r3, #2
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0f0      	beq.n	800cd1c <HAL_RCC_OscConfig+0x45c>
 800cd3a:	e018      	b.n	800cd6e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd3c:	4b1e      	ldr	r3, [pc, #120]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd40:	4a1d      	ldr	r2, [pc, #116]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd42:	f023 0301 	bic.w	r3, r3, #1
 800cd46:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd48:	f7fa f9c0 	bl	80070cc <HAL_GetTick>
 800cd4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd4e:	e008      	b.n	800cd62 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd50:	f7fa f9bc 	bl	80070cc <HAL_GetTick>
 800cd54:	4602      	mov	r2, r0
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	2b02      	cmp	r3, #2
 800cd5c:	d901      	bls.n	800cd62 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cd5e:	2303      	movs	r3, #3
 800cd60:	e200      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cd62:	4b15      	ldr	r3, [pc, #84]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd66:	f003 0302 	and.w	r3, r3, #2
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1f0      	bne.n	800cd50 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f003 0320 	and.w	r3, r3, #32
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d039      	beq.n	800cdee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d01c      	beq.n	800cdbc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cd82:	4b0d      	ldr	r3, [pc, #52]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	4a0c      	ldr	r2, [pc, #48]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cd88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cd8c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cd8e:	f7fa f99d 	bl	80070cc <HAL_GetTick>
 800cd92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cd94:	e008      	b.n	800cda8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cd96:	f7fa f999 	bl	80070cc <HAL_GetTick>
 800cd9a:	4602      	mov	r2, r0
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	1ad3      	subs	r3, r2, r3
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d901      	bls.n	800cda8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e1dd      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cda8:	4b03      	ldr	r3, [pc, #12]	; (800cdb8 <HAL_RCC_OscConfig+0x4f8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0f0      	beq.n	800cd96 <HAL_RCC_OscConfig+0x4d6>
 800cdb4:	e01b      	b.n	800cdee <HAL_RCC_OscConfig+0x52e>
 800cdb6:	bf00      	nop
 800cdb8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cdbc:	4b9b      	ldr	r3, [pc, #620]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a9a      	ldr	r2, [pc, #616]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cdc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cdc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cdc8:	f7fa f980 	bl	80070cc <HAL_GetTick>
 800cdcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cdce:	e008      	b.n	800cde2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cdd0:	f7fa f97c 	bl	80070cc <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d901      	bls.n	800cde2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e1c0      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cde2:	4b92      	ldr	r3, [pc, #584]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1f0      	bne.n	800cdd0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 0304 	and.w	r3, r3, #4
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 8081 	beq.w	800cefe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cdfc:	4b8c      	ldr	r3, [pc, #560]	; (800d030 <HAL_RCC_OscConfig+0x770>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a8b      	ldr	r2, [pc, #556]	; (800d030 <HAL_RCC_OscConfig+0x770>)
 800ce02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce08:	f7fa f960 	bl	80070cc <HAL_GetTick>
 800ce0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce0e:	e008      	b.n	800ce22 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce10:	f7fa f95c 	bl	80070cc <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	2b64      	cmp	r3, #100	; 0x64
 800ce1c:	d901      	bls.n	800ce22 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	e1a0      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce22:	4b83      	ldr	r3, [pc, #524]	; (800d030 <HAL_RCC_OscConfig+0x770>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f0      	beq.n	800ce10 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d106      	bne.n	800ce44 <HAL_RCC_OscConfig+0x584>
 800ce36:	4b7d      	ldr	r3, [pc, #500]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce3a:	4a7c      	ldr	r2, [pc, #496]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce3c:	f043 0301 	orr.w	r3, r3, #1
 800ce40:	6713      	str	r3, [r2, #112]	; 0x70
 800ce42:	e02d      	b.n	800cea0 <HAL_RCC_OscConfig+0x5e0>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d10c      	bne.n	800ce66 <HAL_RCC_OscConfig+0x5a6>
 800ce4c:	4b77      	ldr	r3, [pc, #476]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce50:	4a76      	ldr	r2, [pc, #472]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce52:	f023 0301 	bic.w	r3, r3, #1
 800ce56:	6713      	str	r3, [r2, #112]	; 0x70
 800ce58:	4b74      	ldr	r3, [pc, #464]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce5c:	4a73      	ldr	r2, [pc, #460]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce5e:	f023 0304 	bic.w	r3, r3, #4
 800ce62:	6713      	str	r3, [r2, #112]	; 0x70
 800ce64:	e01c      	b.n	800cea0 <HAL_RCC_OscConfig+0x5e0>
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	689b      	ldr	r3, [r3, #8]
 800ce6a:	2b05      	cmp	r3, #5
 800ce6c:	d10c      	bne.n	800ce88 <HAL_RCC_OscConfig+0x5c8>
 800ce6e:	4b6f      	ldr	r3, [pc, #444]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce72:	4a6e      	ldr	r2, [pc, #440]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce74:	f043 0304 	orr.w	r3, r3, #4
 800ce78:	6713      	str	r3, [r2, #112]	; 0x70
 800ce7a:	4b6c      	ldr	r3, [pc, #432]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce7e:	4a6b      	ldr	r2, [pc, #428]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce80:	f043 0301 	orr.w	r3, r3, #1
 800ce84:	6713      	str	r3, [r2, #112]	; 0x70
 800ce86:	e00b      	b.n	800cea0 <HAL_RCC_OscConfig+0x5e0>
 800ce88:	4b68      	ldr	r3, [pc, #416]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce8c:	4a67      	ldr	r2, [pc, #412]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce8e:	f023 0301 	bic.w	r3, r3, #1
 800ce92:	6713      	str	r3, [r2, #112]	; 0x70
 800ce94:	4b65      	ldr	r3, [pc, #404]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce98:	4a64      	ldr	r2, [pc, #400]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800ce9a:	f023 0304 	bic.w	r3, r3, #4
 800ce9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d015      	beq.n	800ced4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cea8:	f7fa f910 	bl	80070cc <HAL_GetTick>
 800ceac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ceae:	e00a      	b.n	800cec6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ceb0:	f7fa f90c 	bl	80070cc <HAL_GetTick>
 800ceb4:	4602      	mov	r2, r0
 800ceb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	f241 3288 	movw	r2, #5000	; 0x1388
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d901      	bls.n	800cec6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cec2:	2303      	movs	r3, #3
 800cec4:	e14e      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cec6:	4b59      	ldr	r3, [pc, #356]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceca:	f003 0302 	and.w	r3, r3, #2
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d0ee      	beq.n	800ceb0 <HAL_RCC_OscConfig+0x5f0>
 800ced2:	e014      	b.n	800cefe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ced4:	f7fa f8fa 	bl	80070cc <HAL_GetTick>
 800ced8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ceda:	e00a      	b.n	800cef2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cedc:	f7fa f8f6 	bl	80070cc <HAL_GetTick>
 800cee0:	4602      	mov	r2, r0
 800cee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cee4:	1ad3      	subs	r3, r2, r3
 800cee6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d901      	bls.n	800cef2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800ceee:	2303      	movs	r3, #3
 800cef0:	e138      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cef2:	4b4e      	ldr	r3, [pc, #312]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef6:	f003 0302 	and.w	r3, r3, #2
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d1ee      	bne.n	800cedc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 812d 	beq.w	800d162 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cf08:	4b48      	ldr	r3, [pc, #288]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cf10:	2b18      	cmp	r3, #24
 800cf12:	f000 80bd 	beq.w	800d090 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	f040 809e 	bne.w	800d05c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf20:	4b42      	ldr	r3, [pc, #264]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	4a41      	ldr	r2, [pc, #260]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cf2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf2c:	f7fa f8ce 	bl	80070cc <HAL_GetTick>
 800cf30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf32:	e008      	b.n	800cf46 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf34:	f7fa f8ca 	bl	80070cc <HAL_GetTick>
 800cf38:	4602      	mov	r2, r0
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	1ad3      	subs	r3, r2, r3
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d901      	bls.n	800cf46 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cf42:	2303      	movs	r3, #3
 800cf44:	e10e      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cf46:	4b39      	ldr	r3, [pc, #228]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1f0      	bne.n	800cf34 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf52:	4b36      	ldr	r3, [pc, #216]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf56:	4b37      	ldr	r3, [pc, #220]	; (800d034 <HAL_RCC_OscConfig+0x774>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cf62:	0112      	lsls	r2, r2, #4
 800cf64:	430a      	orrs	r2, r1
 800cf66:	4931      	ldr	r1, [pc, #196]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	628b      	str	r3, [r1, #40]	; 0x28
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf70:	3b01      	subs	r3, #1
 800cf72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf7a:	3b01      	subs	r3, #1
 800cf7c:	025b      	lsls	r3, r3, #9
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	431a      	orrs	r2, r3
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf86:	3b01      	subs	r3, #1
 800cf88:	041b      	lsls	r3, r3, #16
 800cf8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf8e:	431a      	orrs	r2, r3
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf94:	3b01      	subs	r3, #1
 800cf96:	061b      	lsls	r3, r3, #24
 800cf98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf9c:	4923      	ldr	r1, [pc, #140]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cfa2:	4b22      	ldr	r3, [pc, #136]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	4a21      	ldr	r2, [pc, #132]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfa8:	f023 0301 	bic.w	r3, r3, #1
 800cfac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cfae:	4b1f      	ldr	r3, [pc, #124]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfb2:	4b21      	ldr	r3, [pc, #132]	; (800d038 <HAL_RCC_OscConfig+0x778>)
 800cfb4:	4013      	ands	r3, r2
 800cfb6:	687a      	ldr	r2, [r7, #4]
 800cfb8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cfba:	00d2      	lsls	r2, r2, #3
 800cfbc:	491b      	ldr	r1, [pc, #108]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfbe:	4313      	orrs	r3, r2
 800cfc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800cfc2:	4b1a      	ldr	r3, [pc, #104]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc6:	f023 020c 	bic.w	r2, r3, #12
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfce:	4917      	ldr	r1, [pc, #92]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800cfd4:	4b15      	ldr	r3, [pc, #84]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	f023 0202 	bic.w	r2, r3, #2
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe0:	4912      	ldr	r1, [pc, #72]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800cfe6:	4b11      	ldr	r3, [pc, #68]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	4a10      	ldr	r2, [pc, #64]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cfec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cff0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cff2:	4b0e      	ldr	r3, [pc, #56]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cff6:	4a0d      	ldr	r2, [pc, #52]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800cff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cffc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800cffe:	4b0b      	ldr	r3, [pc, #44]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800d000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d002:	4a0a      	ldr	r2, [pc, #40]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800d004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d00a:	4b08      	ldr	r3, [pc, #32]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800d00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d00e:	4a07      	ldr	r2, [pc, #28]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800d010:	f043 0301 	orr.w	r3, r3, #1
 800d014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d016:	4b05      	ldr	r3, [pc, #20]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a04      	ldr	r2, [pc, #16]	; (800d02c <HAL_RCC_OscConfig+0x76c>)
 800d01c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d022:	f7fa f853 	bl	80070cc <HAL_GetTick>
 800d026:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d028:	e011      	b.n	800d04e <HAL_RCC_OscConfig+0x78e>
 800d02a:	bf00      	nop
 800d02c:	58024400 	.word	0x58024400
 800d030:	58024800 	.word	0x58024800
 800d034:	fffffc0c 	.word	0xfffffc0c
 800d038:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d03c:	f7fa f846 	bl	80070cc <HAL_GetTick>
 800d040:	4602      	mov	r2, r0
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	1ad3      	subs	r3, r2, r3
 800d046:	2b02      	cmp	r3, #2
 800d048:	d901      	bls.n	800d04e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d04a:	2303      	movs	r3, #3
 800d04c:	e08a      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d04e:	4b47      	ldr	r3, [pc, #284]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d0f0      	beq.n	800d03c <HAL_RCC_OscConfig+0x77c>
 800d05a:	e082      	b.n	800d162 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d05c:	4b43      	ldr	r3, [pc, #268]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a42      	ldr	r2, [pc, #264]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d068:	f7fa f830 	bl	80070cc <HAL_GetTick>
 800d06c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d06e:	e008      	b.n	800d082 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d070:	f7fa f82c 	bl	80070cc <HAL_GetTick>
 800d074:	4602      	mov	r2, r0
 800d076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	2b02      	cmp	r3, #2
 800d07c:	d901      	bls.n	800d082 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e070      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d082:	4b3a      	ldr	r3, [pc, #232]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1f0      	bne.n	800d070 <HAL_RCC_OscConfig+0x7b0>
 800d08e:	e068      	b.n	800d162 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d090:	4b36      	ldr	r3, [pc, #216]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d094:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d096:	4b35      	ldr	r3, [pc, #212]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d031      	beq.n	800d108 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	f003 0203 	and.w	r2, r3, #3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d12a      	bne.n	800d108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	091b      	lsrs	r3, r3, #4
 800d0b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d122      	bne.n	800d108 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d11a      	bne.n	800d108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	0a5b      	lsrs	r3, r3, #9
 800d0d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d111      	bne.n	800d108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	0c1b      	lsrs	r3, r3, #16
 800d0e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d108      	bne.n	800d108 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	0e1b      	lsrs	r3, r3, #24
 800d0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d102:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d104:	429a      	cmp	r2, r3
 800d106:	d001      	beq.n	800d10c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d108:	2301      	movs	r3, #1
 800d10a:	e02b      	b.n	800d164 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d10c:	4b17      	ldr	r3, [pc, #92]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d110:	08db      	lsrs	r3, r3, #3
 800d112:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d116:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d11c:	693a      	ldr	r2, [r7, #16]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d01f      	beq.n	800d162 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d122:	4b12      	ldr	r3, [pc, #72]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	4a11      	ldr	r2, [pc, #68]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d128:	f023 0301 	bic.w	r3, r3, #1
 800d12c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d12e:	f7f9 ffcd 	bl	80070cc <HAL_GetTick>
 800d132:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d134:	bf00      	nop
 800d136:	f7f9 ffc9 	bl	80070cc <HAL_GetTick>
 800d13a:	4602      	mov	r2, r0
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	4293      	cmp	r3, r2
 800d140:	d0f9      	beq.n	800d136 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d142:	4b0a      	ldr	r3, [pc, #40]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d146:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <HAL_RCC_OscConfig+0x8b0>)
 800d148:	4013      	ands	r3, r2
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d14e:	00d2      	lsls	r2, r2, #3
 800d150:	4906      	ldr	r1, [pc, #24]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d152:	4313      	orrs	r3, r2
 800d154:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d156:	4b05      	ldr	r3, [pc, #20]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15a:	4a04      	ldr	r2, [pc, #16]	; (800d16c <HAL_RCC_OscConfig+0x8ac>)
 800d15c:	f043 0301 	orr.w	r3, r3, #1
 800d160:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3730      	adds	r7, #48	; 0x30
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}
 800d16c:	58024400 	.word	0x58024400
 800d170:	ffff0007 	.word	0xffff0007

0800d174 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d184:	2301      	movs	r3, #1
 800d186:	e19c      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d188:	4b8a      	ldr	r3, [pc, #552]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 030f 	and.w	r3, r3, #15
 800d190:	683a      	ldr	r2, [r7, #0]
 800d192:	429a      	cmp	r2, r3
 800d194:	d910      	bls.n	800d1b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d196:	4b87      	ldr	r3, [pc, #540]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f023 020f 	bic.w	r2, r3, #15
 800d19e:	4985      	ldr	r1, [pc, #532]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1a6:	4b83      	ldr	r3, [pc, #524]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 030f 	and.w	r3, r3, #15
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d001      	beq.n	800d1b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e184      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d010      	beq.n	800d1e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691a      	ldr	r2, [r3, #16]
 800d1c8:	4b7b      	ldr	r3, [pc, #492]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d908      	bls.n	800d1e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d1d4:	4b78      	ldr	r3, [pc, #480]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	691b      	ldr	r3, [r3, #16]
 800d1e0:	4975      	ldr	r1, [pc, #468]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f003 0308 	and.w	r3, r3, #8
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d010      	beq.n	800d214 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	695a      	ldr	r2, [r3, #20]
 800d1f6:	4b70      	ldr	r3, [pc, #448]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d1f8:	69db      	ldr	r3, [r3, #28]
 800d1fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d908      	bls.n	800d214 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d202:	4b6d      	ldr	r3, [pc, #436]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d204:	69db      	ldr	r3, [r3, #28]
 800d206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	695b      	ldr	r3, [r3, #20]
 800d20e:	496a      	ldr	r1, [pc, #424]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d210:	4313      	orrs	r3, r2
 800d212:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0310 	and.w	r3, r3, #16
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d010      	beq.n	800d242 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	699a      	ldr	r2, [r3, #24]
 800d224:	4b64      	ldr	r3, [pc, #400]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d226:	69db      	ldr	r3, [r3, #28]
 800d228:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d908      	bls.n	800d242 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d230:	4b61      	ldr	r3, [pc, #388]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	699b      	ldr	r3, [r3, #24]
 800d23c:	495e      	ldr	r1, [pc, #376]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d23e:	4313      	orrs	r3, r2
 800d240:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 0320 	and.w	r3, r3, #32
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d010      	beq.n	800d270 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	69da      	ldr	r2, [r3, #28]
 800d252:	4b59      	ldr	r3, [pc, #356]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d908      	bls.n	800d270 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d25e:	4b56      	ldr	r3, [pc, #344]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d260:	6a1b      	ldr	r3, [r3, #32]
 800d262:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	69db      	ldr	r3, [r3, #28]
 800d26a:	4953      	ldr	r1, [pc, #332]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 0302 	and.w	r3, r3, #2
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d010      	beq.n	800d29e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	68da      	ldr	r2, [r3, #12]
 800d280:	4b4d      	ldr	r3, [pc, #308]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d282:	699b      	ldr	r3, [r3, #24]
 800d284:	f003 030f 	and.w	r3, r3, #15
 800d288:	429a      	cmp	r2, r3
 800d28a:	d908      	bls.n	800d29e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d28c:	4b4a      	ldr	r3, [pc, #296]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	f023 020f 	bic.w	r2, r3, #15
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	4947      	ldr	r1, [pc, #284]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d29a:	4313      	orrs	r3, r2
 800d29c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f003 0301 	and.w	r3, r3, #1
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d055      	beq.n	800d356 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d2aa:	4b43      	ldr	r3, [pc, #268]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d2ac:	699b      	ldr	r3, [r3, #24]
 800d2ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	689b      	ldr	r3, [r3, #8]
 800d2b6:	4940      	ldr	r1, [pc, #256]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d107      	bne.n	800d2d4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d2c4:	4b3c      	ldr	r3, [pc, #240]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d121      	bne.n	800d314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	e0f6      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	2b03      	cmp	r3, #3
 800d2da:	d107      	bne.n	800d2ec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d2dc:	4b36      	ldr	r3, [pc, #216]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d115      	bne.n	800d314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	e0ea      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d107      	bne.n	800d304 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2f4:	4b30      	ldr	r3, [pc, #192]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d109      	bne.n	800d314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d300:	2301      	movs	r3, #1
 800d302:	e0de      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d304:	4b2c      	ldr	r3, [pc, #176]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f003 0304 	and.w	r3, r3, #4
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e0d6      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d314:	4b28      	ldr	r3, [pc, #160]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d316:	691b      	ldr	r3, [r3, #16]
 800d318:	f023 0207 	bic.w	r2, r3, #7
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	4925      	ldr	r1, [pc, #148]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d322:	4313      	orrs	r3, r2
 800d324:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d326:	f7f9 fed1 	bl	80070cc <HAL_GetTick>
 800d32a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d32c:	e00a      	b.n	800d344 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d32e:	f7f9 fecd 	bl	80070cc <HAL_GetTick>
 800d332:	4602      	mov	r2, r0
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	1ad3      	subs	r3, r2, r3
 800d338:	f241 3288 	movw	r2, #5000	; 0x1388
 800d33c:	4293      	cmp	r3, r2
 800d33e:	d901      	bls.n	800d344 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e0be      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d344:	4b1c      	ldr	r3, [pc, #112]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	00db      	lsls	r3, r3, #3
 800d352:	429a      	cmp	r2, r3
 800d354:	d1eb      	bne.n	800d32e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f003 0302 	and.w	r3, r3, #2
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d010      	beq.n	800d384 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	68da      	ldr	r2, [r3, #12]
 800d366:	4b14      	ldr	r3, [pc, #80]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d368:	699b      	ldr	r3, [r3, #24]
 800d36a:	f003 030f 	and.w	r3, r3, #15
 800d36e:	429a      	cmp	r2, r3
 800d370:	d208      	bcs.n	800d384 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d372:	4b11      	ldr	r3, [pc, #68]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	f023 020f 	bic.w	r2, r3, #15
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	68db      	ldr	r3, [r3, #12]
 800d37e:	490e      	ldr	r1, [pc, #56]	; (800d3b8 <HAL_RCC_ClockConfig+0x244>)
 800d380:	4313      	orrs	r3, r2
 800d382:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d384:	4b0b      	ldr	r3, [pc, #44]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f003 030f 	and.w	r3, r3, #15
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d214      	bcs.n	800d3bc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d392:	4b08      	ldr	r3, [pc, #32]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f023 020f 	bic.w	r2, r3, #15
 800d39a:	4906      	ldr	r1, [pc, #24]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	4313      	orrs	r3, r2
 800d3a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d3a2:	4b04      	ldr	r3, [pc, #16]	; (800d3b4 <HAL_RCC_ClockConfig+0x240>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f003 030f 	and.w	r3, r3, #15
 800d3aa:	683a      	ldr	r2, [r7, #0]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d005      	beq.n	800d3bc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e086      	b.n	800d4c2 <HAL_RCC_ClockConfig+0x34e>
 800d3b4:	52002000 	.word	0x52002000
 800d3b8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f003 0304 	and.w	r3, r3, #4
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d010      	beq.n	800d3ea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	691a      	ldr	r2, [r3, #16]
 800d3cc:	4b3f      	ldr	r3, [pc, #252]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d3ce:	699b      	ldr	r3, [r3, #24]
 800d3d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d208      	bcs.n	800d3ea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d3d8:	4b3c      	ldr	r3, [pc, #240]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	4939      	ldr	r1, [pc, #228]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f003 0308 	and.w	r3, r3, #8
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d010      	beq.n	800d418 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	695a      	ldr	r2, [r3, #20]
 800d3fa:	4b34      	ldr	r3, [pc, #208]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d3fc:	69db      	ldr	r3, [r3, #28]
 800d3fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d402:	429a      	cmp	r2, r3
 800d404:	d208      	bcs.n	800d418 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d406:	4b31      	ldr	r3, [pc, #196]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d408:	69db      	ldr	r3, [r3, #28]
 800d40a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	492e      	ldr	r1, [pc, #184]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d414:	4313      	orrs	r3, r2
 800d416:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0310 	and.w	r3, r3, #16
 800d420:	2b00      	cmp	r3, #0
 800d422:	d010      	beq.n	800d446 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	699a      	ldr	r2, [r3, #24]
 800d428:	4b28      	ldr	r3, [pc, #160]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d42a:	69db      	ldr	r3, [r3, #28]
 800d42c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d430:	429a      	cmp	r2, r3
 800d432:	d208      	bcs.n	800d446 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d434:	4b25      	ldr	r3, [pc, #148]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d436:	69db      	ldr	r3, [r3, #28]
 800d438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	699b      	ldr	r3, [r3, #24]
 800d440:	4922      	ldr	r1, [pc, #136]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d442:	4313      	orrs	r3, r2
 800d444:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f003 0320 	and.w	r3, r3, #32
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d010      	beq.n	800d474 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	69da      	ldr	r2, [r3, #28]
 800d456:	4b1d      	ldr	r3, [pc, #116]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d458:	6a1b      	ldr	r3, [r3, #32]
 800d45a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d45e:	429a      	cmp	r2, r3
 800d460:	d208      	bcs.n	800d474 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d462:	4b1a      	ldr	r3, [pc, #104]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d464:	6a1b      	ldr	r3, [r3, #32]
 800d466:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	69db      	ldr	r3, [r3, #28]
 800d46e:	4917      	ldr	r1, [pc, #92]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d470:	4313      	orrs	r3, r2
 800d472:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d474:	f000 f834 	bl	800d4e0 <HAL_RCC_GetSysClockFreq>
 800d478:	4602      	mov	r2, r0
 800d47a:	4b14      	ldr	r3, [pc, #80]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d47c:	699b      	ldr	r3, [r3, #24]
 800d47e:	0a1b      	lsrs	r3, r3, #8
 800d480:	f003 030f 	and.w	r3, r3, #15
 800d484:	4912      	ldr	r1, [pc, #72]	; (800d4d0 <HAL_RCC_ClockConfig+0x35c>)
 800d486:	5ccb      	ldrb	r3, [r1, r3]
 800d488:	f003 031f 	and.w	r3, r3, #31
 800d48c:	fa22 f303 	lsr.w	r3, r2, r3
 800d490:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d492:	4b0e      	ldr	r3, [pc, #56]	; (800d4cc <HAL_RCC_ClockConfig+0x358>)
 800d494:	699b      	ldr	r3, [r3, #24]
 800d496:	f003 030f 	and.w	r3, r3, #15
 800d49a:	4a0d      	ldr	r2, [pc, #52]	; (800d4d0 <HAL_RCC_ClockConfig+0x35c>)
 800d49c:	5cd3      	ldrb	r3, [r2, r3]
 800d49e:	f003 031f 	and.w	r3, r3, #31
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	fa22 f303 	lsr.w	r3, r2, r3
 800d4a8:	4a0a      	ldr	r2, [pc, #40]	; (800d4d4 <HAL_RCC_ClockConfig+0x360>)
 800d4aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d4ac:	4a0a      	ldr	r2, [pc, #40]	; (800d4d8 <HAL_RCC_ClockConfig+0x364>)
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d4b2:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <HAL_RCC_ClockConfig+0x368>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7f9 fdbe 	bl	8007038 <HAL_InitTick>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	58024400 	.word	0x58024400
 800d4d0:	080173f0 	.word	0x080173f0
 800d4d4:	24000044 	.word	0x24000044
 800d4d8:	24000040 	.word	0x24000040
 800d4dc:	24000048 	.word	0x24000048

0800d4e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b089      	sub	sp, #36	; 0x24
 800d4e4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d4e6:	4bb3      	ldr	r3, [pc, #716]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4e8:	691b      	ldr	r3, [r3, #16]
 800d4ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4ee:	2b18      	cmp	r3, #24
 800d4f0:	f200 8155 	bhi.w	800d79e <HAL_RCC_GetSysClockFreq+0x2be>
 800d4f4:	a201      	add	r2, pc, #4	; (adr r2, 800d4fc <HAL_RCC_GetSysClockFreq+0x1c>)
 800d4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4fa:	bf00      	nop
 800d4fc:	0800d561 	.word	0x0800d561
 800d500:	0800d79f 	.word	0x0800d79f
 800d504:	0800d79f 	.word	0x0800d79f
 800d508:	0800d79f 	.word	0x0800d79f
 800d50c:	0800d79f 	.word	0x0800d79f
 800d510:	0800d79f 	.word	0x0800d79f
 800d514:	0800d79f 	.word	0x0800d79f
 800d518:	0800d79f 	.word	0x0800d79f
 800d51c:	0800d587 	.word	0x0800d587
 800d520:	0800d79f 	.word	0x0800d79f
 800d524:	0800d79f 	.word	0x0800d79f
 800d528:	0800d79f 	.word	0x0800d79f
 800d52c:	0800d79f 	.word	0x0800d79f
 800d530:	0800d79f 	.word	0x0800d79f
 800d534:	0800d79f 	.word	0x0800d79f
 800d538:	0800d79f 	.word	0x0800d79f
 800d53c:	0800d58d 	.word	0x0800d58d
 800d540:	0800d79f 	.word	0x0800d79f
 800d544:	0800d79f 	.word	0x0800d79f
 800d548:	0800d79f 	.word	0x0800d79f
 800d54c:	0800d79f 	.word	0x0800d79f
 800d550:	0800d79f 	.word	0x0800d79f
 800d554:	0800d79f 	.word	0x0800d79f
 800d558:	0800d79f 	.word	0x0800d79f
 800d55c:	0800d593 	.word	0x0800d593
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d560:	4b94      	ldr	r3, [pc, #592]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	f003 0320 	and.w	r3, r3, #32
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d009      	beq.n	800d580 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d56c:	4b91      	ldr	r3, [pc, #580]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	08db      	lsrs	r3, r3, #3
 800d572:	f003 0303 	and.w	r3, r3, #3
 800d576:	4a90      	ldr	r2, [pc, #576]	; (800d7b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d578:	fa22 f303 	lsr.w	r3, r2, r3
 800d57c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d57e:	e111      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d580:	4b8d      	ldr	r3, [pc, #564]	; (800d7b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d582:	61bb      	str	r3, [r7, #24]
      break;
 800d584:	e10e      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d586:	4b8d      	ldr	r3, [pc, #564]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d588:	61bb      	str	r3, [r7, #24]
      break;
 800d58a:	e10b      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d58c:	4b8c      	ldr	r3, [pc, #560]	; (800d7c0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d58e:	61bb      	str	r3, [r7, #24]
      break;
 800d590:	e108      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d592:	4b88      	ldr	r3, [pc, #544]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d596:	f003 0303 	and.w	r3, r3, #3
 800d59a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d59c:	4b85      	ldr	r3, [pc, #532]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d59e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a0:	091b      	lsrs	r3, r3, #4
 800d5a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d5a6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d5a8:	4b82      	ldr	r3, [pc, #520]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5b2:	4b80      	ldr	r3, [pc, #512]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	08db      	lsrs	r3, r3, #3
 800d5b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	fb02 f303 	mul.w	r3, r2, r3
 800d5c2:	ee07 3a90 	vmov	s15, r3
 800d5c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	f000 80e1 	beq.w	800d798 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	2b02      	cmp	r3, #2
 800d5da:	f000 8083 	beq.w	800d6e4 <HAL_RCC_GetSysClockFreq+0x204>
 800d5de:	697b      	ldr	r3, [r7, #20]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	f200 80a1 	bhi.w	800d728 <HAL_RCC_GetSysClockFreq+0x248>
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x114>
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d056      	beq.n	800d6a0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d5f2:	e099      	b.n	800d728 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5f4:	4b6f      	ldr	r3, [pc, #444]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	f003 0320 	and.w	r3, r3, #32
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d02d      	beq.n	800d65c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d600:	4b6c      	ldr	r3, [pc, #432]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	08db      	lsrs	r3, r3, #3
 800d606:	f003 0303 	and.w	r3, r3, #3
 800d60a:	4a6b      	ldr	r2, [pc, #428]	; (800d7b8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d60c:	fa22 f303 	lsr.w	r3, r2, r3
 800d610:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	ee07 3a90 	vmov	s15, r3
 800d618:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d61c:	693b      	ldr	r3, [r7, #16]
 800d61e:	ee07 3a90 	vmov	s15, r3
 800d622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d62a:	4b62      	ldr	r3, [pc, #392]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d632:	ee07 3a90 	vmov	s15, r3
 800d636:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d63a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d63e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d7c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d642:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d646:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d64a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d64e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d652:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d656:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d65a:	e087      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	ee07 3a90 	vmov	s15, r3
 800d662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d666:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d7c8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d66a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d66e:	4b51      	ldr	r3, [pc, #324]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d672:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d676:	ee07 3a90 	vmov	s15, r3
 800d67a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d67e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d682:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d7c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d686:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d68a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d68e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d692:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d69a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d69e:	e065      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	ee07 3a90 	vmov	s15, r3
 800d6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6aa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d7cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800d6ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6b2:	4b40      	ldr	r3, [pc, #256]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ba:	ee07 3a90 	vmov	s15, r3
 800d6be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d6c6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d7c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d6ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d6e2:	e043      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6e4:	693b      	ldr	r3, [r7, #16]
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6ee:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d7d0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d6f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6f6:	4b2f      	ldr	r3, [pc, #188]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d6f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fe:	ee07 3a90 	vmov	s15, r3
 800d702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d706:	ed97 6a02 	vldr	s12, [r7, #8]
 800d70a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d7c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d70e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d71a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d71e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d722:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d726:	e021      	b.n	800d76c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	ee07 3a90 	vmov	s15, r3
 800d72e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d732:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d7cc <HAL_RCC_GetSysClockFreq+0x2ec>
 800d736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d73a:	4b1e      	ldr	r3, [pc, #120]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d73e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d742:	ee07 3a90 	vmov	s15, r3
 800d746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d74a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d74e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d7c4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d75a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d75e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d762:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d766:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d76a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d76c:	4b11      	ldr	r3, [pc, #68]	; (800d7b4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d770:	0a5b      	lsrs	r3, r3, #9
 800d772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d776:	3301      	adds	r3, #1
 800d778:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d784:	edd7 6a07 	vldr	s13, [r7, #28]
 800d788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d78c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d790:	ee17 3a90 	vmov	r3, s15
 800d794:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d796:	e005      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d798:	2300      	movs	r3, #0
 800d79a:	61bb      	str	r3, [r7, #24]
      break;
 800d79c:	e002      	b.n	800d7a4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d79e:	4b07      	ldr	r3, [pc, #28]	; (800d7bc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d7a0:	61bb      	str	r3, [r7, #24]
      break;
 800d7a2:	bf00      	nop
  }

  return sysclockfreq;
 800d7a4:	69bb      	ldr	r3, [r7, #24]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3724      	adds	r7, #36	; 0x24
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	58024400 	.word	0x58024400
 800d7b8:	03d09000 	.word	0x03d09000
 800d7bc:	003d0900 	.word	0x003d0900
 800d7c0:	017d7840 	.word	0x017d7840
 800d7c4:	46000000 	.word	0x46000000
 800d7c8:	4c742400 	.word	0x4c742400
 800d7cc:	4a742400 	.word	0x4a742400
 800d7d0:	4bbebc20 	.word	0x4bbebc20

0800d7d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d7da:	f7ff fe81 	bl	800d4e0 <HAL_RCC_GetSysClockFreq>
 800d7de:	4602      	mov	r2, r0
 800d7e0:	4b10      	ldr	r3, [pc, #64]	; (800d824 <HAL_RCC_GetHCLKFreq+0x50>)
 800d7e2:	699b      	ldr	r3, [r3, #24]
 800d7e4:	0a1b      	lsrs	r3, r3, #8
 800d7e6:	f003 030f 	and.w	r3, r3, #15
 800d7ea:	490f      	ldr	r1, [pc, #60]	; (800d828 <HAL_RCC_GetHCLKFreq+0x54>)
 800d7ec:	5ccb      	ldrb	r3, [r1, r3]
 800d7ee:	f003 031f 	and.w	r3, r3, #31
 800d7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d7f6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d7f8:	4b0a      	ldr	r3, [pc, #40]	; (800d824 <HAL_RCC_GetHCLKFreq+0x50>)
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	f003 030f 	and.w	r3, r3, #15
 800d800:	4a09      	ldr	r2, [pc, #36]	; (800d828 <HAL_RCC_GetHCLKFreq+0x54>)
 800d802:	5cd3      	ldrb	r3, [r2, r3]
 800d804:	f003 031f 	and.w	r3, r3, #31
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	fa22 f303 	lsr.w	r3, r2, r3
 800d80e:	4a07      	ldr	r2, [pc, #28]	; (800d82c <HAL_RCC_GetHCLKFreq+0x58>)
 800d810:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d812:	4a07      	ldr	r2, [pc, #28]	; (800d830 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d818:	4b04      	ldr	r3, [pc, #16]	; (800d82c <HAL_RCC_GetHCLKFreq+0x58>)
 800d81a:	681b      	ldr	r3, [r3, #0]
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	3708      	adds	r7, #8
 800d820:	46bd      	mov	sp, r7
 800d822:	bd80      	pop	{r7, pc}
 800d824:	58024400 	.word	0x58024400
 800d828:	080173f0 	.word	0x080173f0
 800d82c:	24000044 	.word	0x24000044
 800d830:	24000040 	.word	0x24000040

0800d834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d838:	f7ff ffcc 	bl	800d7d4 <HAL_RCC_GetHCLKFreq>
 800d83c:	4602      	mov	r2, r0
 800d83e:	4b06      	ldr	r3, [pc, #24]	; (800d858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d840:	69db      	ldr	r3, [r3, #28]
 800d842:	091b      	lsrs	r3, r3, #4
 800d844:	f003 0307 	and.w	r3, r3, #7
 800d848:	4904      	ldr	r1, [pc, #16]	; (800d85c <HAL_RCC_GetPCLK1Freq+0x28>)
 800d84a:	5ccb      	ldrb	r3, [r1, r3]
 800d84c:	f003 031f 	and.w	r3, r3, #31
 800d850:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d854:	4618      	mov	r0, r3
 800d856:	bd80      	pop	{r7, pc}
 800d858:	58024400 	.word	0x58024400
 800d85c:	080173f0 	.word	0x080173f0

0800d860 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d864:	f7ff ffb6 	bl	800d7d4 <HAL_RCC_GetHCLKFreq>
 800d868:	4602      	mov	r2, r0
 800d86a:	4b06      	ldr	r3, [pc, #24]	; (800d884 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	0a1b      	lsrs	r3, r3, #8
 800d870:	f003 0307 	and.w	r3, r3, #7
 800d874:	4904      	ldr	r1, [pc, #16]	; (800d888 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d876:	5ccb      	ldrb	r3, [r1, r3]
 800d878:	f003 031f 	and.w	r3, r3, #31
 800d87c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d880:	4618      	mov	r0, r3
 800d882:	bd80      	pop	{r7, pc}
 800d884:	58024400 	.word	0x58024400
 800d888:	080173f0 	.word	0x080173f0

0800d88c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d88c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d890:	b0ca      	sub	sp, #296	; 0x128
 800d892:	af00      	add	r7, sp, #0
 800d894:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d898:	2300      	movs	r3, #0
 800d89a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d89e:	2300      	movs	r3, #0
 800d8a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d8b0:	2500      	movs	r5, #0
 800d8b2:	ea54 0305 	orrs.w	r3, r4, r5
 800d8b6:	d049      	beq.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d8c2:	d02f      	beq.n	800d924 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d8c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d8c8:	d828      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d8ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8ce:	d01a      	beq.n	800d906 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d8d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d8d4:	d822      	bhi.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d003      	beq.n	800d8e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d8da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8de:	d007      	beq.n	800d8f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d8e0:	e01c      	b.n	800d91c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d8e2:	4bb8      	ldr	r3, [pc, #736]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8e6:	4ab7      	ldr	r2, [pc, #732]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d8ee:	e01a      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8f4:	3308      	adds	r3, #8
 800d8f6:	2102      	movs	r1, #2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f002 fb61 	bl	800ffc0 <RCCEx_PLL2_Config>
 800d8fe:	4603      	mov	r3, r0
 800d900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d904:	e00f      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d90a:	3328      	adds	r3, #40	; 0x28
 800d90c:	2102      	movs	r1, #2
 800d90e:	4618      	mov	r0, r3
 800d910:	f002 fc08 	bl	8010124 <RCCEx_PLL3_Config>
 800d914:	4603      	mov	r3, r0
 800d916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d91a:	e004      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d922:	e000      	b.n	800d926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d924:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d926:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10a      	bne.n	800d944 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d92e:	4ba5      	ldr	r3, [pc, #660]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d932:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d93c:	4aa1      	ldr	r2, [pc, #644]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d93e:	430b      	orrs	r3, r1
 800d940:	6513      	str	r3, [r2, #80]	; 0x50
 800d942:	e003      	b.n	800d94c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d948:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d94c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d954:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d958:	f04f 0900 	mov.w	r9, #0
 800d95c:	ea58 0309 	orrs.w	r3, r8, r9
 800d960:	d047      	beq.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d968:	2b04      	cmp	r3, #4
 800d96a:	d82a      	bhi.n	800d9c2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d96c:	a201      	add	r2, pc, #4	; (adr r2, 800d974 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d972:	bf00      	nop
 800d974:	0800d989 	.word	0x0800d989
 800d978:	0800d997 	.word	0x0800d997
 800d97c:	0800d9ad 	.word	0x0800d9ad
 800d980:	0800d9cb 	.word	0x0800d9cb
 800d984:	0800d9cb 	.word	0x0800d9cb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d988:	4b8e      	ldr	r3, [pc, #568]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d98c:	4a8d      	ldr	r2, [pc, #564]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d98e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d992:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d994:	e01a      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d99a:	3308      	adds	r3, #8
 800d99c:	2100      	movs	r1, #0
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f002 fb0e 	bl	800ffc0 <RCCEx_PLL2_Config>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d9aa:	e00f      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9b0:	3328      	adds	r3, #40	; 0x28
 800d9b2:	2100      	movs	r1, #0
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	f002 fbb5 	bl	8010124 <RCCEx_PLL3_Config>
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d9c0:	e004      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d9c8:	e000      	b.n	800d9cc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d9ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d10a      	bne.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d9d4:	4b7b      	ldr	r3, [pc, #492]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d8:	f023 0107 	bic.w	r1, r3, #7
 800d9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9e2:	4a78      	ldr	r2, [pc, #480]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9e4:	430b      	orrs	r3, r1
 800d9e6:	6513      	str	r3, [r2, #80]	; 0x50
 800d9e8:	e003      	b.n	800d9f2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9fa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d9fe:	f04f 0b00 	mov.w	fp, #0
 800da02:	ea5a 030b 	orrs.w	r3, sl, fp
 800da06:	d04c      	beq.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800da08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da12:	d030      	beq.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800da14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da18:	d829      	bhi.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800da1a:	2bc0      	cmp	r3, #192	; 0xc0
 800da1c:	d02d      	beq.n	800da7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800da1e:	2bc0      	cmp	r3, #192	; 0xc0
 800da20:	d825      	bhi.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800da22:	2b80      	cmp	r3, #128	; 0x80
 800da24:	d018      	beq.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800da26:	2b80      	cmp	r3, #128	; 0x80
 800da28:	d821      	bhi.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d002      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800da2e:	2b40      	cmp	r3, #64	; 0x40
 800da30:	d007      	beq.n	800da42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800da32:	e01c      	b.n	800da6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da34:	4b63      	ldr	r3, [pc, #396]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da38:	4a62      	ldr	r2, [pc, #392]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da40:	e01c      	b.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da46:	3308      	adds	r3, #8
 800da48:	2100      	movs	r1, #0
 800da4a:	4618      	mov	r0, r3
 800da4c:	f002 fab8 	bl	800ffc0 <RCCEx_PLL2_Config>
 800da50:	4603      	mov	r3, r0
 800da52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da56:	e011      	b.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da5c:	3328      	adds	r3, #40	; 0x28
 800da5e:	2100      	movs	r1, #0
 800da60:	4618      	mov	r0, r3
 800da62:	f002 fb5f 	bl	8010124 <RCCEx_PLL3_Config>
 800da66:	4603      	mov	r3, r0
 800da68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800da6c:	e006      	b.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da6e:	2301      	movs	r3, #1
 800da70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da74:	e002      	b.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800da76:	bf00      	nop
 800da78:	e000      	b.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800da7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da80:	2b00      	cmp	r3, #0
 800da82:	d10a      	bne.n	800da9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800da84:	4b4f      	ldr	r3, [pc, #316]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800da8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da92:	4a4c      	ldr	r2, [pc, #304]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800da94:	430b      	orrs	r3, r1
 800da96:	6513      	str	r3, [r2, #80]	; 0x50
 800da98:	e003      	b.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800daa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daaa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800daae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800dab2:	2300      	movs	r3, #0
 800dab4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800dab8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800dabc:	460b      	mov	r3, r1
 800dabe:	4313      	orrs	r3, r2
 800dac0:	d053      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dac6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800daca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dace:	d035      	beq.n	800db3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800dad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dad4:	d82e      	bhi.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dad6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dada:	d031      	beq.n	800db40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800dadc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dae0:	d828      	bhi.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800dae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dae6:	d01a      	beq.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800dae8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daec:	d822      	bhi.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d003      	beq.n	800dafa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800daf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800daf6:	d007      	beq.n	800db08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800daf8:	e01c      	b.n	800db34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dafa:	4b32      	ldr	r3, [pc, #200]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dafc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafe:	4a31      	ldr	r2, [pc, #196]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db06:	e01c      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db0c:	3308      	adds	r3, #8
 800db0e:	2100      	movs	r1, #0
 800db10:	4618      	mov	r0, r3
 800db12:	f002 fa55 	bl	800ffc0 <RCCEx_PLL2_Config>
 800db16:	4603      	mov	r3, r0
 800db18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800db1c:	e011      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800db1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db22:	3328      	adds	r3, #40	; 0x28
 800db24:	2100      	movs	r1, #0
 800db26:	4618      	mov	r0, r3
 800db28:	f002 fafc 	bl	8010124 <RCCEx_PLL3_Config>
 800db2c:	4603      	mov	r3, r0
 800db2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800db32:	e006      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800db3a:	e002      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800db3c:	bf00      	nop
 800db3e:	e000      	b.n	800db42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800db40:	bf00      	nop
    }

    if (ret == HAL_OK)
 800db42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10b      	bne.n	800db62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800db4a:	4b1e      	ldr	r3, [pc, #120]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db4e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800db52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800db5a:	4a1a      	ldr	r2, [pc, #104]	; (800dbc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800db5c:	430b      	orrs	r3, r1
 800db5e:	6593      	str	r3, [r2, #88]	; 0x58
 800db60:	e003      	b.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800db6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800db76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800db7a:	2300      	movs	r3, #0
 800db7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800db80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800db84:	460b      	mov	r3, r1
 800db86:	4313      	orrs	r3, r2
 800db88:	d056      	beq.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800db8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800db92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db96:	d038      	beq.n	800dc0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800db98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800db9c:	d831      	bhi.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800db9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dba2:	d034      	beq.n	800dc0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800dba4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800dba8:	d82b      	bhi.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dbaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbae:	d01d      	beq.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x360>
 800dbb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbb4:	d825      	bhi.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d006      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800dbba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dbbe:	d00a      	beq.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dbc0:	e01f      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800dbc2:	bf00      	nop
 800dbc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbc8:	4ba2      	ldr	r3, [pc, #648]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbcc:	4aa1      	ldr	r2, [pc, #644]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dbd4:	e01c      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbda:	3308      	adds	r3, #8
 800dbdc:	2100      	movs	r1, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f002 f9ee 	bl	800ffc0 <RCCEx_PLL2_Config>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dbea:	e011      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbf0:	3328      	adds	r3, #40	; 0x28
 800dbf2:	2100      	movs	r1, #0
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f002 fa95 	bl	8010124 <RCCEx_PLL3_Config>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc00:	e006      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc08:	e002      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dc0a:	bf00      	nop
 800dc0c:	e000      	b.n	800dc10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dc0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d10b      	bne.n	800dc30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800dc18:	4b8e      	ldr	r3, [pc, #568]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc1c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800dc20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800dc28:	4a8a      	ldr	r2, [pc, #552]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc2a:	430b      	orrs	r3, r1
 800dc2c:	6593      	str	r3, [r2, #88]	; 0x58
 800dc2e:	e003      	b.n	800dc38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800dc38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800dc44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800dc4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800dc52:	460b      	mov	r3, r1
 800dc54:	4313      	orrs	r3, r2
 800dc56:	d03a      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800dc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc5e:	2b30      	cmp	r3, #48	; 0x30
 800dc60:	d01f      	beq.n	800dca2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dc62:	2b30      	cmp	r3, #48	; 0x30
 800dc64:	d819      	bhi.n	800dc9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dc66:	2b20      	cmp	r3, #32
 800dc68:	d00c      	beq.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800dc6a:	2b20      	cmp	r3, #32
 800dc6c:	d815      	bhi.n	800dc9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d019      	beq.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800dc72:	2b10      	cmp	r3, #16
 800dc74:	d111      	bne.n	800dc9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc76:	4b77      	ldr	r3, [pc, #476]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc7a:	4a76      	ldr	r2, [pc, #472]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dc82:	e011      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dc84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc88:	3308      	adds	r3, #8
 800dc8a:	2102      	movs	r1, #2
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f002 f997 	bl	800ffc0 <RCCEx_PLL2_Config>
 800dc92:	4603      	mov	r3, r0
 800dc94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dc98:	e006      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dca0:	e002      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dca2:	bf00      	nop
 800dca4:	e000      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800dca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10a      	bne.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800dcb0:	4b68      	ldr	r3, [pc, #416]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcb4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800dcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcbe:	4a65      	ldr	r2, [pc, #404]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dcc0:	430b      	orrs	r3, r1
 800dcc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dcc4:	e003      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800dcda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dcde:	2300      	movs	r3, #0
 800dce0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dce4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800dce8:	460b      	mov	r3, r1
 800dcea:	4313      	orrs	r3, r2
 800dcec:	d051      	beq.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcf8:	d035      	beq.n	800dd66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dcfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcfe:	d82e      	bhi.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dd00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dd04:	d031      	beq.n	800dd6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dd06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dd0a:	d828      	bhi.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dd0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd10:	d01a      	beq.n	800dd48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dd12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dd16:	d822      	bhi.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d003      	beq.n	800dd24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dd1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd20:	d007      	beq.n	800dd32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dd22:	e01c      	b.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd24:	4b4b      	ldr	r3, [pc, #300]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd28:	4a4a      	ldr	r2, [pc, #296]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd30:	e01c      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd36:	3308      	adds	r3, #8
 800dd38:	2100      	movs	r1, #0
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	f002 f940 	bl	800ffc0 <RCCEx_PLL2_Config>
 800dd40:	4603      	mov	r3, r0
 800dd42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd46:	e011      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd4c:	3328      	adds	r3, #40	; 0x28
 800dd4e:	2100      	movs	r1, #0
 800dd50:	4618      	mov	r0, r3
 800dd52:	f002 f9e7 	bl	8010124 <RCCEx_PLL3_Config>
 800dd56:	4603      	mov	r3, r0
 800dd58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dd5c:	e006      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd5e:	2301      	movs	r3, #1
 800dd60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd64:	e002      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dd66:	bf00      	nop
 800dd68:	e000      	b.n	800dd6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dd6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10a      	bne.n	800dd8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dd74:	4b37      	ldr	r3, [pc, #220]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd82:	4a34      	ldr	r2, [pc, #208]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dd84:	430b      	orrs	r3, r1
 800dd86:	6513      	str	r3, [r2, #80]	; 0x50
 800dd88:	e003      	b.n	800dd92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dd92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800dd9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dda2:	2300      	movs	r3, #0
 800dda4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dda8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ddac:	460b      	mov	r3, r1
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	d056      	beq.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ddb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ddbc:	d033      	beq.n	800de26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800ddbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ddc2:	d82c      	bhi.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ddc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ddc8:	d02f      	beq.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800ddca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ddce:	d826      	bhi.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800ddd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ddd4:	d02b      	beq.n	800de2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800ddd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ddda:	d820      	bhi.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dde0:	d012      	beq.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800dde2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dde6:	d81a      	bhi.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d022      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800ddec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddf0:	d115      	bne.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ddf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddf6:	3308      	adds	r3, #8
 800ddf8:	2101      	movs	r1, #1
 800ddfa:	4618      	mov	r0, r3
 800ddfc:	f002 f8e0 	bl	800ffc0 <RCCEx_PLL2_Config>
 800de00:	4603      	mov	r3, r0
 800de02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de06:	e015      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800de08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de0c:	3328      	adds	r3, #40	; 0x28
 800de0e:	2101      	movs	r1, #1
 800de10:	4618      	mov	r0, r3
 800de12:	f002 f987 	bl	8010124 <RCCEx_PLL3_Config>
 800de16:	4603      	mov	r3, r0
 800de18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800de1c:	e00a      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de1e:	2301      	movs	r3, #1
 800de20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800de24:	e006      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de26:	bf00      	nop
 800de28:	e004      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de2a:	bf00      	nop
 800de2c:	e002      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de2e:	bf00      	nop
 800de30:	e000      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800de32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10d      	bne.n	800de58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800de3c:	4b05      	ldr	r3, [pc, #20]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800de44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de4a:	4a02      	ldr	r2, [pc, #8]	; (800de54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800de4c:	430b      	orrs	r3, r1
 800de4e:	6513      	str	r3, [r2, #80]	; 0x50
 800de50:	e006      	b.n	800de60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800de52:	bf00      	nop
 800de54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800de60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de68:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800de6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800de70:	2300      	movs	r3, #0
 800de72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800de76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800de7a:	460b      	mov	r3, r1
 800de7c:	4313      	orrs	r3, r2
 800de7e:	d055      	beq.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800de80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800de88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800de8c:	d033      	beq.n	800def6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800de8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800de92:	d82c      	bhi.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800de94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de98:	d02f      	beq.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800de9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800de9e:	d826      	bhi.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dea0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dea4:	d02b      	beq.n	800defe <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dea6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800deaa:	d820      	bhi.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800deac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deb0:	d012      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800deb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deb6:	d81a      	bhi.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x662>
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d022      	beq.n	800df02 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800debc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dec0:	d115      	bne.n	800deee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dec6:	3308      	adds	r3, #8
 800dec8:	2101      	movs	r1, #1
 800deca:	4618      	mov	r0, r3
 800decc:	f002 f878 	bl	800ffc0 <RCCEx_PLL2_Config>
 800ded0:	4603      	mov	r3, r0
 800ded2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ded6:	e015      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ded8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dedc:	3328      	adds	r3, #40	; 0x28
 800dede:	2101      	movs	r1, #1
 800dee0:	4618      	mov	r0, r3
 800dee2:	f002 f91f 	bl	8010124 <RCCEx_PLL3_Config>
 800dee6:	4603      	mov	r3, r0
 800dee8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800deec:	e00a      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800deee:	2301      	movs	r3, #1
 800def0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800def4:	e006      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800def6:	bf00      	nop
 800def8:	e004      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800defa:	bf00      	nop
 800defc:	e002      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800defe:	bf00      	nop
 800df00:	e000      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800df02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10b      	bne.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800df0c:	4ba3      	ldr	r3, [pc, #652]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df10:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800df14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800df1c:	4a9f      	ldr	r2, [pc, #636]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df1e:	430b      	orrs	r3, r1
 800df20:	6593      	str	r3, [r2, #88]	; 0x58
 800df22:	e003      	b.n	800df2c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800df2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800df38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800df3c:	2300      	movs	r3, #0
 800df3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800df42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800df46:	460b      	mov	r3, r1
 800df48:	4313      	orrs	r3, r2
 800df4a:	d037      	beq.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800df4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df56:	d00e      	beq.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800df58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df5c:	d816      	bhi.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d018      	beq.n	800df94 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800df62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800df66:	d111      	bne.n	800df8c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df68:	4b8c      	ldr	r3, [pc, #560]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df6c:	4a8b      	ldr	r2, [pc, #556]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800df74:	e00f      	b.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df7a:	3308      	adds	r3, #8
 800df7c:	2101      	movs	r1, #1
 800df7e:	4618      	mov	r0, r3
 800df80:	f002 f81e 	bl	800ffc0 <RCCEx_PLL2_Config>
 800df84:	4603      	mov	r3, r0
 800df86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800df8a:	e004      	b.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800df8c:	2301      	movs	r3, #1
 800df8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df92:	e000      	b.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800df94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10a      	bne.n	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800df9e:	4b7f      	ldr	r3, [pc, #508]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfa2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800dfa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfac:	4a7b      	ldr	r2, [pc, #492]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfae:	430b      	orrs	r3, r1
 800dfb0:	6513      	str	r3, [r2, #80]	; 0x50
 800dfb2:	e003      	b.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfb4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800dfbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfc4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800dfc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800dfcc:	2300      	movs	r3, #0
 800dfce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800dfd2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	d039      	beq.n	800e050 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800dfdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dfe2:	2b03      	cmp	r3, #3
 800dfe4:	d81c      	bhi.n	800e020 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800dfe6:	a201      	add	r2, pc, #4	; (adr r2, 800dfec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800dfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfec:	0800e029 	.word	0x0800e029
 800dff0:	0800dffd 	.word	0x0800dffd
 800dff4:	0800e00b 	.word	0x0800e00b
 800dff8:	0800e029 	.word	0x0800e029
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dffc:	4b67      	ldr	r3, [pc, #412]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e000:	4a66      	ldr	r2, [pc, #408]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e006:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e008:	e00f      	b.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e00e:	3308      	adds	r3, #8
 800e010:	2102      	movs	r1, #2
 800e012:	4618      	mov	r0, r3
 800e014:	f001 ffd4 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e018:	4603      	mov	r3, r0
 800e01a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e01e:	e004      	b.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e020:	2301      	movs	r3, #1
 800e022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e026:	e000      	b.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e02a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d10a      	bne.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e032:	4b5a      	ldr	r3, [pc, #360]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e036:	f023 0103 	bic.w	r1, r3, #3
 800e03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e03e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e040:	4a56      	ldr	r2, [pc, #344]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e042:	430b      	orrs	r3, r1
 800e044:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e046:	e003      	b.n	800e050 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e04c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e058:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e05c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e060:	2300      	movs	r3, #0
 800e062:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e066:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e06a:	460b      	mov	r3, r1
 800e06c:	4313      	orrs	r3, r2
 800e06e:	f000 809f 	beq.w	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e072:	4b4b      	ldr	r3, [pc, #300]	; (800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	4a4a      	ldr	r2, [pc, #296]	; (800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e07c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e07e:	f7f9 f825 	bl	80070cc <HAL_GetTick>
 800e082:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e086:	e00b      	b.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e088:	f7f9 f820 	bl	80070cc <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	2b64      	cmp	r3, #100	; 0x64
 800e096:	d903      	bls.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e098:	2303      	movs	r3, #3
 800e09a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e09e:	e005      	b.n	800e0ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e0a0:	4b3f      	ldr	r3, [pc, #252]	; (800e1a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d0ed      	beq.n	800e088 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d179      	bne.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e0b4:	4b39      	ldr	r3, [pc, #228]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e0c0:	4053      	eors	r3, r2
 800e0c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d015      	beq.n	800e0f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0ca:	4b34      	ldr	r3, [pc, #208]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e0d6:	4b31      	ldr	r3, [pc, #196]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	4a30      	ldr	r2, [pc, #192]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e0e2:	4b2e      	ldr	r3, [pc, #184]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0e6:	4a2d      	ldr	r2, [pc, #180]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e0ee:	4a2b      	ldr	r2, [pc, #172]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e0f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e0f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e0f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e0fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e102:	d118      	bne.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e104:	f7f8 ffe2 	bl	80070cc <HAL_GetTick>
 800e108:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e10c:	e00d      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e10e:	f7f8 ffdd 	bl	80070cc <HAL_GetTick>
 800e112:	4602      	mov	r2, r0
 800e114:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e118:	1ad2      	subs	r2, r2, r3
 800e11a:	f241 3388 	movw	r3, #5000	; 0x1388
 800e11e:	429a      	cmp	r2, r3
 800e120:	d903      	bls.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e122:	2303      	movs	r3, #3
 800e124:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e128:	e005      	b.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e12a:	4b1c      	ldr	r3, [pc, #112]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e12e:	f003 0302 	and.w	r3, r3, #2
 800e132:	2b00      	cmp	r3, #0
 800e134:	d0eb      	beq.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d129      	bne.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e142:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e14a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e14e:	d10e      	bne.n	800e16e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e150:	4b12      	ldr	r3, [pc, #72]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e152:	691b      	ldr	r3, [r3, #16]
 800e154:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e15c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e160:	091a      	lsrs	r2, r3, #4
 800e162:	4b10      	ldr	r3, [pc, #64]	; (800e1a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e164:	4013      	ands	r3, r2
 800e166:	4a0d      	ldr	r2, [pc, #52]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e168:	430b      	orrs	r3, r1
 800e16a:	6113      	str	r3, [r2, #16]
 800e16c:	e005      	b.n	800e17a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e16e:	4b0b      	ldr	r3, [pc, #44]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e170:	691b      	ldr	r3, [r3, #16]
 800e172:	4a0a      	ldr	r2, [pc, #40]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e174:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e178:	6113      	str	r3, [r2, #16]
 800e17a:	4b08      	ldr	r3, [pc, #32]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e17c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e182:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e18a:	4a04      	ldr	r2, [pc, #16]	; (800e19c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e18c:	430b      	orrs	r3, r1
 800e18e:	6713      	str	r3, [r2, #112]	; 0x70
 800e190:	e00e      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e196:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e19a:	e009      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e19c:	58024400 	.word	0x58024400
 800e1a0:	58024800 	.word	0x58024800
 800e1a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b8:	f002 0301 	and.w	r3, r2, #1
 800e1bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e1c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	f000 8089 	beq.w	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e1d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d8:	2b28      	cmp	r3, #40	; 0x28
 800e1da:	d86b      	bhi.n	800e2b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e1dc:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e2:	bf00      	nop
 800e1e4:	0800e2bd 	.word	0x0800e2bd
 800e1e8:	0800e2b5 	.word	0x0800e2b5
 800e1ec:	0800e2b5 	.word	0x0800e2b5
 800e1f0:	0800e2b5 	.word	0x0800e2b5
 800e1f4:	0800e2b5 	.word	0x0800e2b5
 800e1f8:	0800e2b5 	.word	0x0800e2b5
 800e1fc:	0800e2b5 	.word	0x0800e2b5
 800e200:	0800e2b5 	.word	0x0800e2b5
 800e204:	0800e289 	.word	0x0800e289
 800e208:	0800e2b5 	.word	0x0800e2b5
 800e20c:	0800e2b5 	.word	0x0800e2b5
 800e210:	0800e2b5 	.word	0x0800e2b5
 800e214:	0800e2b5 	.word	0x0800e2b5
 800e218:	0800e2b5 	.word	0x0800e2b5
 800e21c:	0800e2b5 	.word	0x0800e2b5
 800e220:	0800e2b5 	.word	0x0800e2b5
 800e224:	0800e29f 	.word	0x0800e29f
 800e228:	0800e2b5 	.word	0x0800e2b5
 800e22c:	0800e2b5 	.word	0x0800e2b5
 800e230:	0800e2b5 	.word	0x0800e2b5
 800e234:	0800e2b5 	.word	0x0800e2b5
 800e238:	0800e2b5 	.word	0x0800e2b5
 800e23c:	0800e2b5 	.word	0x0800e2b5
 800e240:	0800e2b5 	.word	0x0800e2b5
 800e244:	0800e2bd 	.word	0x0800e2bd
 800e248:	0800e2b5 	.word	0x0800e2b5
 800e24c:	0800e2b5 	.word	0x0800e2b5
 800e250:	0800e2b5 	.word	0x0800e2b5
 800e254:	0800e2b5 	.word	0x0800e2b5
 800e258:	0800e2b5 	.word	0x0800e2b5
 800e25c:	0800e2b5 	.word	0x0800e2b5
 800e260:	0800e2b5 	.word	0x0800e2b5
 800e264:	0800e2bd 	.word	0x0800e2bd
 800e268:	0800e2b5 	.word	0x0800e2b5
 800e26c:	0800e2b5 	.word	0x0800e2b5
 800e270:	0800e2b5 	.word	0x0800e2b5
 800e274:	0800e2b5 	.word	0x0800e2b5
 800e278:	0800e2b5 	.word	0x0800e2b5
 800e27c:	0800e2b5 	.word	0x0800e2b5
 800e280:	0800e2b5 	.word	0x0800e2b5
 800e284:	0800e2bd 	.word	0x0800e2bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e28c:	3308      	adds	r3, #8
 800e28e:	2101      	movs	r1, #1
 800e290:	4618      	mov	r0, r3
 800e292:	f001 fe95 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e296:	4603      	mov	r3, r0
 800e298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e29c:	e00f      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2a2:	3328      	adds	r3, #40	; 0x28
 800e2a4:	2101      	movs	r1, #1
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f001 ff3c 	bl	8010124 <RCCEx_PLL3_Config>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e2b2:	e004      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e2ba:	e000      	b.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e2be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d10a      	bne.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e2c6:	4bbf      	ldr	r3, [pc, #764]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2d4:	4abb      	ldr	r2, [pc, #748]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e2d6:	430b      	orrs	r3, r1
 800e2d8:	6553      	str	r3, [r2, #84]	; 0x54
 800e2da:	e003      	b.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e2e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ec:	f002 0302 	and.w	r3, r2, #2
 800e2f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e2fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e2fe:	460b      	mov	r3, r1
 800e300:	4313      	orrs	r3, r2
 800e302:	d041      	beq.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e30a:	2b05      	cmp	r3, #5
 800e30c:	d824      	bhi.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e30e:	a201      	add	r2, pc, #4	; (adr r2, 800e314 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e314:	0800e361 	.word	0x0800e361
 800e318:	0800e32d 	.word	0x0800e32d
 800e31c:	0800e343 	.word	0x0800e343
 800e320:	0800e361 	.word	0x0800e361
 800e324:	0800e361 	.word	0x0800e361
 800e328:	0800e361 	.word	0x0800e361
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e330:	3308      	adds	r3, #8
 800e332:	2101      	movs	r1, #1
 800e334:	4618      	mov	r0, r3
 800e336:	f001 fe43 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e33a:	4603      	mov	r3, r0
 800e33c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e340:	e00f      	b.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e346:	3328      	adds	r3, #40	; 0x28
 800e348:	2101      	movs	r1, #1
 800e34a:	4618      	mov	r0, r3
 800e34c:	f001 feea 	bl	8010124 <RCCEx_PLL3_Config>
 800e350:	4603      	mov	r3, r0
 800e352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e356:	e004      	b.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e358:	2301      	movs	r3, #1
 800e35a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e35e:	e000      	b.n	800e362 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e360:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10a      	bne.n	800e380 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e36a:	4b96      	ldr	r3, [pc, #600]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e36c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e36e:	f023 0107 	bic.w	r1, r3, #7
 800e372:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e376:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e378:	4a92      	ldr	r2, [pc, #584]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e37a:	430b      	orrs	r3, r1
 800e37c:	6553      	str	r3, [r2, #84]	; 0x54
 800e37e:	e003      	b.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e384:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	f002 0304 	and.w	r3, r2, #4
 800e394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e398:	2300      	movs	r3, #0
 800e39a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e39e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e3a2:	460b      	mov	r3, r1
 800e3a4:	4313      	orrs	r3, r2
 800e3a6:	d044      	beq.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e3b0:	2b05      	cmp	r3, #5
 800e3b2:	d825      	bhi.n	800e400 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e3b4:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ba:	bf00      	nop
 800e3bc:	0800e409 	.word	0x0800e409
 800e3c0:	0800e3d5 	.word	0x0800e3d5
 800e3c4:	0800e3eb 	.word	0x0800e3eb
 800e3c8:	0800e409 	.word	0x0800e409
 800e3cc:	0800e409 	.word	0x0800e409
 800e3d0:	0800e409 	.word	0x0800e409
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3d8:	3308      	adds	r3, #8
 800e3da:	2101      	movs	r1, #1
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f001 fdef 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e3e8:	e00f      	b.n	800e40a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ee:	3328      	adds	r3, #40	; 0x28
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f001 fe96 	bl	8010124 <RCCEx_PLL3_Config>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e3fe:	e004      	b.n	800e40a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e400:	2301      	movs	r3, #1
 800e402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e406:	e000      	b.n	800e40a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10b      	bne.n	800e42a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e412:	4b6c      	ldr	r3, [pc, #432]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e416:	f023 0107 	bic.w	r1, r3, #7
 800e41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e41e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e422:	4a68      	ldr	r2, [pc, #416]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e424:	430b      	orrs	r3, r1
 800e426:	6593      	str	r3, [r2, #88]	; 0x58
 800e428:	e003      	b.n	800e432 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e42a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e42e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43a:	f002 0320 	and.w	r3, r2, #32
 800e43e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e442:	2300      	movs	r3, #0
 800e444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e44c:	460b      	mov	r3, r1
 800e44e:	4313      	orrs	r3, r2
 800e450:	d055      	beq.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e45a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e45e:	d033      	beq.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e460:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e464:	d82c      	bhi.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e46a:	d02f      	beq.n	800e4cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e46c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e470:	d826      	bhi.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e476:	d02b      	beq.n	800e4d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e478:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e47c:	d820      	bhi.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e47e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e482:	d012      	beq.n	800e4aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e488:	d81a      	bhi.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d022      	beq.n	800e4d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e48e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e492:	d115      	bne.n	800e4c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e498:	3308      	adds	r3, #8
 800e49a:	2100      	movs	r1, #0
 800e49c:	4618      	mov	r0, r3
 800e49e:	f001 fd8f 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e4a8:	e015      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e4aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ae:	3328      	adds	r3, #40	; 0x28
 800e4b0:	2102      	movs	r1, #2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f001 fe36 	bl	8010124 <RCCEx_PLL3_Config>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e4be:	e00a      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e4c6:	e006      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4c8:	bf00      	nop
 800e4ca:	e004      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4cc:	bf00      	nop
 800e4ce:	e002      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4d0:	bf00      	nop
 800e4d2:	e000      	b.n	800e4d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e4d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d10b      	bne.n	800e4f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e4de:	4b39      	ldr	r3, [pc, #228]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e4e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ee:	4a35      	ldr	r2, [pc, #212]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e4f0:	430b      	orrs	r3, r1
 800e4f2:	6553      	str	r3, [r2, #84]	; 0x54
 800e4f4:	e003      	b.n	800e4fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e4fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e50a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e50e:	2300      	movs	r3, #0
 800e510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e514:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e518:	460b      	mov	r3, r1
 800e51a:	4313      	orrs	r3, r2
 800e51c:	d058      	beq.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e51e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e522:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e526:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e52a:	d033      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e52c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e530:	d82c      	bhi.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e536:	d02f      	beq.n	800e598 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e53c:	d826      	bhi.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e53e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e542:	d02b      	beq.n	800e59c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e544:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e548:	d820      	bhi.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e54a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e54e:	d012      	beq.n	800e576 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e550:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e554:	d81a      	bhi.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e556:	2b00      	cmp	r3, #0
 800e558:	d022      	beq.n	800e5a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e55a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e55e:	d115      	bne.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e564:	3308      	adds	r3, #8
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f001 fd29 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e56e:	4603      	mov	r3, r0
 800e570:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e574:	e015      	b.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e57a:	3328      	adds	r3, #40	; 0x28
 800e57c:	2102      	movs	r1, #2
 800e57e:	4618      	mov	r0, r3
 800e580:	f001 fdd0 	bl	8010124 <RCCEx_PLL3_Config>
 800e584:	4603      	mov	r3, r0
 800e586:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e58a:	e00a      	b.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e592:	e006      	b.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e594:	bf00      	nop
 800e596:	e004      	b.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e598:	bf00      	nop
 800e59a:	e002      	b.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e59c:	bf00      	nop
 800e59e:	e000      	b.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e5a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e5a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10e      	bne.n	800e5c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e5aa:	4b06      	ldr	r3, [pc, #24]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e5ba:	4a02      	ldr	r2, [pc, #8]	; (800e5c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5bc:	430b      	orrs	r3, r1
 800e5be:	6593      	str	r3, [r2, #88]	; 0x58
 800e5c0:	e006      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e5c2:	bf00      	nop
 800e5c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e5dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e5e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	4313      	orrs	r3, r2
 800e5ee:	d055      	beq.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e5f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e5fc:	d033      	beq.n	800e666 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e5fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e602:	d82c      	bhi.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e608:	d02f      	beq.n	800e66a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e60a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e60e:	d826      	bhi.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e610:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e614:	d02b      	beq.n	800e66e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e616:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e61a:	d820      	bhi.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e620:	d012      	beq.n	800e648 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e626:	d81a      	bhi.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d022      	beq.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e62c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e630:	d115      	bne.n	800e65e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e636:	3308      	adds	r3, #8
 800e638:	2100      	movs	r1, #0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f001 fcc0 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e640:	4603      	mov	r3, r0
 800e642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e646:	e015      	b.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e648:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e64c:	3328      	adds	r3, #40	; 0x28
 800e64e:	2102      	movs	r1, #2
 800e650:	4618      	mov	r0, r3
 800e652:	f001 fd67 	bl	8010124 <RCCEx_PLL3_Config>
 800e656:	4603      	mov	r3, r0
 800e658:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e65c:	e00a      	b.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e65e:	2301      	movs	r3, #1
 800e660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e664:	e006      	b.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e666:	bf00      	nop
 800e668:	e004      	b.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e66a:	bf00      	nop
 800e66c:	e002      	b.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e66e:	bf00      	nop
 800e670:	e000      	b.n	800e674 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d10b      	bne.n	800e694 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e67c:	4ba1      	ldr	r3, [pc, #644]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e67e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e680:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e688:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e68c:	4a9d      	ldr	r2, [pc, #628]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e68e:	430b      	orrs	r3, r1
 800e690:	6593      	str	r3, [r2, #88]	; 0x58
 800e692:	e003      	b.n	800e69c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e694:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e698:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e69c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a4:	f002 0308 	and.w	r3, r2, #8
 800e6a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e6b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	d01e      	beq.n	800e6fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e6bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e6c8:	d10c      	bne.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e6ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6ce:	3328      	adds	r3, #40	; 0x28
 800e6d0:	2102      	movs	r1, #2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 fd26 	bl	8010124 <RCCEx_PLL3_Config>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e6e4:	4b87      	ldr	r3, [pc, #540]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6f4:	4a83      	ldr	r2, [pc, #524]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6f6:	430b      	orrs	r3, r1
 800e6f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e6fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f002 0310 	and.w	r3, r2, #16
 800e706:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e70a:	2300      	movs	r3, #0
 800e70c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e710:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e714:	460b      	mov	r3, r1
 800e716:	4313      	orrs	r3, r2
 800e718:	d01e      	beq.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e71e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e726:	d10c      	bne.n	800e742 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e72c:	3328      	adds	r3, #40	; 0x28
 800e72e:	2102      	movs	r1, #2
 800e730:	4618      	mov	r0, r3
 800e732:	f001 fcf7 	bl	8010124 <RCCEx_PLL3_Config>
 800e736:	4603      	mov	r3, r0
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d002      	beq.n	800e742 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e73c:	2301      	movs	r3, #1
 800e73e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e742:	4b70      	ldr	r3, [pc, #448]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e746:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e74e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e752:	4a6c      	ldr	r2, [pc, #432]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e754:	430b      	orrs	r3, r1
 800e756:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e760:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e764:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e768:	2300      	movs	r3, #0
 800e76a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e76e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e772:	460b      	mov	r3, r1
 800e774:	4313      	orrs	r3, r2
 800e776:	d03e      	beq.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e778:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e77c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e784:	d022      	beq.n	800e7cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e78a:	d81b      	bhi.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d003      	beq.n	800e798 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e794:	d00b      	beq.n	800e7ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e796:	e015      	b.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e79c:	3308      	adds	r3, #8
 800e79e:	2100      	movs	r1, #0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f001 fc0d 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e7ac:	e00f      	b.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e7ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7b2:	3328      	adds	r3, #40	; 0x28
 800e7b4:	2102      	movs	r1, #2
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f001 fcb4 	bl	8010124 <RCCEx_PLL3_Config>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e7c2:	e004      	b.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e7ca:	e000      	b.n	800e7ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d10b      	bne.n	800e7ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e7d6:	4b4b      	ldr	r3, [pc, #300]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e7e6:	4a47      	ldr	r2, [pc, #284]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e7e8:	430b      	orrs	r3, r1
 800e7ea:	6593      	str	r3, [r2, #88]	; 0x58
 800e7ec:	e003      	b.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e7f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e802:	67bb      	str	r3, [r7, #120]	; 0x78
 800e804:	2300      	movs	r3, #0
 800e806:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e808:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e80c:	460b      	mov	r3, r1
 800e80e:	4313      	orrs	r3, r2
 800e810:	d03b      	beq.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e81a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e81e:	d01f      	beq.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e824:	d818      	bhi.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e826:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e82a:	d003      	beq.n	800e834 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e82c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e830:	d007      	beq.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e832:	e011      	b.n	800e858 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e834:	4b33      	ldr	r3, [pc, #204]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e838:	4a32      	ldr	r2, [pc, #200]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e83a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e83e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e840:	e00f      	b.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e846:	3328      	adds	r3, #40	; 0x28
 800e848:	2101      	movs	r1, #1
 800e84a:	4618      	mov	r0, r3
 800e84c:	f001 fc6a 	bl	8010124 <RCCEx_PLL3_Config>
 800e850:	4603      	mov	r3, r0
 800e852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e856:	e004      	b.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e858:	2301      	movs	r3, #1
 800e85a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e85e:	e000      	b.n	800e862 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10b      	bne.n	800e882 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e86a:	4b26      	ldr	r3, [pc, #152]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e86e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e87a:	4a22      	ldr	r2, [pc, #136]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e87c:	430b      	orrs	r3, r1
 800e87e:	6553      	str	r3, [r2, #84]	; 0x54
 800e880:	e003      	b.n	800e88a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e892:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e896:	673b      	str	r3, [r7, #112]	; 0x70
 800e898:	2300      	movs	r3, #0
 800e89a:	677b      	str	r3, [r7, #116]	; 0x74
 800e89c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	4313      	orrs	r3, r2
 800e8a4:	d034      	beq.n	800e910 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e8a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d003      	beq.n	800e8b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8b4:	d007      	beq.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e8b6:	e011      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8b8:	4b12      	ldr	r3, [pc, #72]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8bc:	4a11      	ldr	r2, [pc, #68]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e8c4:	e00e      	b.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8ca:	3308      	adds	r3, #8
 800e8cc:	2102      	movs	r1, #2
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f001 fb76 	bl	800ffc0 <RCCEx_PLL2_Config>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e8da:	e003      	b.n	800e8e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e8e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e8e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10d      	bne.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e8ec:	4b05      	ldr	r3, [pc, #20]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8fa:	4a02      	ldr	r2, [pc, #8]	; (800e904 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e8fc:	430b      	orrs	r3, r1
 800e8fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e900:	e006      	b.n	800e910 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e902:	bf00      	nop
 800e904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e90c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e918:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e91c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e91e:	2300      	movs	r3, #0
 800e920:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e922:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e926:	460b      	mov	r3, r1
 800e928:	4313      	orrs	r3, r2
 800e92a:	d00c      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e930:	3328      	adds	r3, #40	; 0x28
 800e932:	2102      	movs	r1, #2
 800e934:	4618      	mov	r0, r3
 800e936:	f001 fbf5 	bl	8010124 <RCCEx_PLL3_Config>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e940:	2301      	movs	r3, #1
 800e942:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e952:	663b      	str	r3, [r7, #96]	; 0x60
 800e954:	2300      	movs	r3, #0
 800e956:	667b      	str	r3, [r7, #100]	; 0x64
 800e958:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e95c:	460b      	mov	r3, r1
 800e95e:	4313      	orrs	r3, r2
 800e960:	d038      	beq.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e96a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e96e:	d018      	beq.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e974:	d811      	bhi.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e97a:	d014      	beq.n	800e9a6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e97c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e980:	d80b      	bhi.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e982:	2b00      	cmp	r3, #0
 800e984:	d011      	beq.n	800e9aa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e98a:	d106      	bne.n	800e99a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e98c:	4bc3      	ldr	r3, [pc, #780]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e990:	4ac2      	ldr	r2, [pc, #776]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e996:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e998:	e008      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e99a:	2301      	movs	r3, #1
 800e99c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e9a0:	e004      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e9a2:	bf00      	nop
 800e9a4:	e002      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e9a6:	bf00      	nop
 800e9a8:	e000      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e9aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e9ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10b      	bne.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e9b4:	4bb9      	ldr	r3, [pc, #740]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e9bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9c4:	4ab5      	ldr	r2, [pc, #724]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9c6:	430b      	orrs	r3, r1
 800e9c8:	6553      	str	r3, [r2, #84]	; 0x54
 800e9ca:	e003      	b.n	800e9d4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e9d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9dc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e9e0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e9e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	4313      	orrs	r3, r2
 800e9ee:	d009      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e9f0:	4baa      	ldr	r3, [pc, #680]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e9f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9fe:	4aa7      	ldr	r2, [pc, #668]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea00:	430b      	orrs	r3, r1
 800ea02:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ea04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ea10:	653b      	str	r3, [r7, #80]	; 0x50
 800ea12:	2300      	movs	r3, #0
 800ea14:	657b      	str	r3, [r7, #84]	; 0x54
 800ea16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	d00a      	beq.n	800ea36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ea20:	4b9e      	ldr	r3, [pc, #632]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea22:	691b      	ldr	r3, [r3, #16]
 800ea24:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ea28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ea30:	4a9a      	ldr	r2, [pc, #616]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea32:	430b      	orrs	r3, r1
 800ea34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ea36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ea42:	64bb      	str	r3, [r7, #72]	; 0x48
 800ea44:	2300      	movs	r3, #0
 800ea46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	4313      	orrs	r3, r2
 800ea50:	d009      	beq.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ea52:	4b92      	ldr	r3, [pc, #584]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea56:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ea5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea60:	4a8e      	ldr	r2, [pc, #568]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea62:	430b      	orrs	r3, r1
 800ea64:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ea66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea6e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ea72:	643b      	str	r3, [r7, #64]	; 0x40
 800ea74:	2300      	movs	r3, #0
 800ea76:	647b      	str	r3, [r7, #68]	; 0x44
 800ea78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	d00e      	beq.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ea82:	4b86      	ldr	r3, [pc, #536]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea84:	691b      	ldr	r3, [r3, #16]
 800ea86:	4a85      	ldr	r2, [pc, #532]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea8c:	6113      	str	r3, [r2, #16]
 800ea8e:	4b83      	ldr	r3, [pc, #524]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea90:	6919      	ldr	r1, [r3, #16]
 800ea92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ea9a:	4a80      	ldr	r2, [pc, #512]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ea9c:	430b      	orrs	r3, r1
 800ea9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800eaa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800eaac:	63bb      	str	r3, [r7, #56]	; 0x38
 800eaae:	2300      	movs	r3, #0
 800eab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eab2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800eab6:	460b      	mov	r3, r1
 800eab8:	4313      	orrs	r3, r2
 800eaba:	d009      	beq.n	800ead0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800eabc:	4b77      	ldr	r3, [pc, #476]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eac0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800eac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaca:	4a74      	ldr	r2, [pc, #464]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eacc:	430b      	orrs	r3, r1
 800eace:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ead0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800eadc:	633b      	str	r3, [r7, #48]	; 0x30
 800eade:	2300      	movs	r3, #0
 800eae0:	637b      	str	r3, [r7, #52]	; 0x34
 800eae2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800eae6:	460b      	mov	r3, r1
 800eae8:	4313      	orrs	r3, r2
 800eaea:	d00a      	beq.n	800eb02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eaec:	4b6b      	ldr	r3, [pc, #428]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eaee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eaf0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800eaf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eafc:	4a67      	ldr	r2, [pc, #412]	; (800ec9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eafe:	430b      	orrs	r3, r1
 800eb00:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800eb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	62b9      	str	r1, [r7, #40]	; 0x28
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800eb18:	460b      	mov	r3, r1
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	d011      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800eb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb22:	3308      	adds	r3, #8
 800eb24:	2100      	movs	r1, #0
 800eb26:	4618      	mov	r0, r3
 800eb28:	f001 fa4a 	bl	800ffc0 <RCCEx_PLL2_Config>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eb32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d003      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800eb42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb4a:	2100      	movs	r1, #0
 800eb4c:	6239      	str	r1, [r7, #32]
 800eb4e:	f003 0302 	and.w	r3, r3, #2
 800eb52:	627b      	str	r3, [r7, #36]	; 0x24
 800eb54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	d011      	beq.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800eb5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb62:	3308      	adds	r3, #8
 800eb64:	2101      	movs	r1, #1
 800eb66:	4618      	mov	r0, r3
 800eb68:	f001 fa2a 	bl	800ffc0 <RCCEx_PLL2_Config>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eb72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d003      	beq.n	800eb82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800eb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8a:	2100      	movs	r1, #0
 800eb8c:	61b9      	str	r1, [r7, #24]
 800eb8e:	f003 0304 	and.w	r3, r3, #4
 800eb92:	61fb      	str	r3, [r7, #28]
 800eb94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	4313      	orrs	r3, r2
 800eb9c:	d011      	beq.n	800ebc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eba2:	3308      	adds	r3, #8
 800eba4:	2102      	movs	r1, #2
 800eba6:	4618      	mov	r0, r3
 800eba8:	f001 fa0a 	bl	800ffc0 <RCCEx_PLL2_Config>
 800ebac:	4603      	mov	r3, r0
 800ebae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ebb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d003      	beq.n	800ebc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ebc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebca:	2100      	movs	r1, #0
 800ebcc:	6139      	str	r1, [r7, #16]
 800ebce:	f003 0308 	and.w	r3, r3, #8
 800ebd2:	617b      	str	r3, [r7, #20]
 800ebd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ebd8:	460b      	mov	r3, r1
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	d011      	beq.n	800ec02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ebde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebe2:	3328      	adds	r3, #40	; 0x28
 800ebe4:	2100      	movs	r1, #0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f001 fa9c 	bl	8010124 <RCCEx_PLL3_Config>
 800ebec:	4603      	mov	r3, r0
 800ebee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ebf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d003      	beq.n	800ec02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ec02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	60b9      	str	r1, [r7, #8]
 800ec0e:	f003 0310 	and.w	r3, r3, #16
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	4313      	orrs	r3, r2
 800ec1c:	d011      	beq.n	800ec42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ec1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec22:	3328      	adds	r3, #40	; 0x28
 800ec24:	2101      	movs	r1, #1
 800ec26:	4618      	mov	r0, r3
 800ec28:	f001 fa7c 	bl	8010124 <RCCEx_PLL3_Config>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ec32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d003      	beq.n	800ec42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ec42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6039      	str	r1, [r7, #0]
 800ec4e:	f003 0320 	and.w	r3, r3, #32
 800ec52:	607b      	str	r3, [r7, #4]
 800ec54:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ec58:	460b      	mov	r3, r1
 800ec5a:	4313      	orrs	r3, r2
 800ec5c:	d011      	beq.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ec5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec62:	3328      	adds	r3, #40	; 0x28
 800ec64:	2102      	movs	r1, #2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f001 fa5c 	bl	8010124 <RCCEx_PLL3_Config>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ec72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d003      	beq.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ec82:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e000      	b.n	800ec90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ec96:	46bd      	mov	sp, r7
 800ec98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec9c:	58024400 	.word	0x58024400

0800eca0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b090      	sub	sp, #64	; 0x40
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ecaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecae:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ecb2:	430b      	orrs	r3, r1
 800ecb4:	f040 8094 	bne.w	800ede0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ecb8:	4b9e      	ldr	r3, [pc, #632]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecbc:	f003 0307 	and.w	r3, r3, #7
 800ecc0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ecc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecc4:	2b04      	cmp	r3, #4
 800ecc6:	f200 8087 	bhi.w	800edd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ecca:	a201      	add	r2, pc, #4	; (adr r2, 800ecd0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800eccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecd0:	0800ece5 	.word	0x0800ece5
 800ecd4:	0800ed0d 	.word	0x0800ed0d
 800ecd8:	0800ed35 	.word	0x0800ed35
 800ecdc:	0800edd1 	.word	0x0800edd1
 800ece0:	0800ed5d 	.word	0x0800ed5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ece4:	4b93      	ldr	r3, [pc, #588]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ecf0:	d108      	bne.n	800ed04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ecf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f001 f810 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed00:	f000 bd45 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed08:	f000 bd41 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed0c:	4b89      	ldr	r3, [pc, #548]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed18:	d108      	bne.n	800ed2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed1a:	f107 0318 	add.w	r3, r7, #24
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f000 fd54 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed24:	69bb      	ldr	r3, [r7, #24]
 800ed26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed28:	f000 bd31 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed30:	f000 bd2d 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed34:	4b7f      	ldr	r3, [pc, #508]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed40:	d108      	bne.n	800ed54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed42:	f107 030c 	add.w	r3, r7, #12
 800ed46:	4618      	mov	r0, r3
 800ed48:	f000 fe94 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed50:	f000 bd1d 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed54:	2300      	movs	r3, #0
 800ed56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed58:	f000 bd19 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ed5c:	4b75      	ldr	r3, [pc, #468]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ed64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed66:	4b73      	ldr	r3, [pc, #460]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	f003 0304 	and.w	r3, r3, #4
 800ed6e:	2b04      	cmp	r3, #4
 800ed70:	d10c      	bne.n	800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ed72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d109      	bne.n	800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed78:	4b6e      	ldr	r3, [pc, #440]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	08db      	lsrs	r3, r3, #3
 800ed7e:	f003 0303 	and.w	r3, r3, #3
 800ed82:	4a6d      	ldr	r2, [pc, #436]	; (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ed84:	fa22 f303 	lsr.w	r3, r2, r3
 800ed88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed8a:	e01f      	b.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed8c:	4b69      	ldr	r3, [pc, #420]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed98:	d106      	bne.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ed9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eda0:	d102      	bne.n	800eda8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eda2:	4b66      	ldr	r3, [pc, #408]	; (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eda4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eda6:	e011      	b.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eda8:	4b62      	ldr	r3, [pc, #392]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edb4:	d106      	bne.n	800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800edb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edbc:	d102      	bne.n	800edc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800edbe:	4b60      	ldr	r3, [pc, #384]	; (800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800edc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edc2:	e003      	b.n	800edcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800edc4:	2300      	movs	r3, #0
 800edc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800edc8:	f000 bce1 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800edcc:	f000 bcdf 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800edd0:	4b5c      	ldr	r3, [pc, #368]	; (800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800edd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800edd4:	f000 bcdb 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800edd8:	2300      	movs	r3, #0
 800edda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eddc:	f000 bcd7 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ede0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ede4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ede8:	430b      	orrs	r3, r1
 800edea:	f040 80ad 	bne.w	800ef48 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800edee:	4b51      	ldr	r3, [pc, #324]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800edf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800edf2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800edf6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edfe:	d056      	beq.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee06:	f200 8090 	bhi.w	800ef2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ee0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0c:	2bc0      	cmp	r3, #192	; 0xc0
 800ee0e:	f000 8088 	beq.w	800ef22 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ee12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee14:	2bc0      	cmp	r3, #192	; 0xc0
 800ee16:	f200 8088 	bhi.w	800ef2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	2b80      	cmp	r3, #128	; 0x80
 800ee1e:	d032      	beq.n	800ee86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ee20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee22:	2b80      	cmp	r3, #128	; 0x80
 800ee24:	f200 8081 	bhi.w	800ef2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ee28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d003      	beq.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee30:	2b40      	cmp	r3, #64	; 0x40
 800ee32:	d014      	beq.n	800ee5e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ee34:	e079      	b.n	800ef2a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee36:	4b3f      	ldr	r3, [pc, #252]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee42:	d108      	bne.n	800ee56 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f000 ff67 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee52:	f000 bc9c 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee56:	2300      	movs	r3, #0
 800ee58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee5a:	f000 bc98 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee5e:	4b35      	ldr	r3, [pc, #212]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee6a:	d108      	bne.n	800ee7e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee6c:	f107 0318 	add.w	r3, r7, #24
 800ee70:	4618      	mov	r0, r3
 800ee72:	f000 fcab 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee7a:	f000 bc88 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee82:	f000 bc84 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee86:	4b2b      	ldr	r3, [pc, #172]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee92:	d108      	bne.n	800eea6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee94:	f107 030c 	add.w	r3, r7, #12
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f000 fdeb 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eea2:	f000 bc74 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eeaa:	f000 bc70 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800eeae:	4b21      	ldr	r3, [pc, #132]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eeb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eeb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eeb8:	4b1e      	ldr	r3, [pc, #120]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	d10c      	bne.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800eec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d109      	bne.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eeca:	4b1a      	ldr	r3, [pc, #104]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	08db      	lsrs	r3, r3, #3
 800eed0:	f003 0303 	and.w	r3, r3, #3
 800eed4:	4a18      	ldr	r2, [pc, #96]	; (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800eed6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eedc:	e01f      	b.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eede:	4b15      	ldr	r3, [pc, #84]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeea:	d106      	bne.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800eeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eef2:	d102      	bne.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eef4:	4b11      	ldr	r3, [pc, #68]	; (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eef8:	e011      	b.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eefa:	4b0e      	ldr	r3, [pc, #56]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef06:	d106      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ef08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef0e:	d102      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ef10:	4b0b      	ldr	r3, [pc, #44]	; (800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ef12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef14:	e003      	b.n	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ef1a:	f000 bc38 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef1e:	f000 bc36 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ef22:	4b08      	ldr	r3, [pc, #32]	; (800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ef24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef26:	f000 bc32 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef2e:	f000 bc2e 	b.w	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ef32:	bf00      	nop
 800ef34:	58024400 	.word	0x58024400
 800ef38:	03d09000 	.word	0x03d09000
 800ef3c:	003d0900 	.word	0x003d0900
 800ef40:	017d7840 	.word	0x017d7840
 800ef44:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ef48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef4c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ef50:	430b      	orrs	r3, r1
 800ef52:	f040 809c 	bne.w	800f08e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ef56:	4b9e      	ldr	r3, [pc, #632]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef5a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ef5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ef60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef66:	d054      	beq.n	800f012 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ef6e:	f200 808b 	bhi.w	800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ef78:	f000 8083 	beq.w	800f082 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800ef7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ef82:	f200 8081 	bhi.w	800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef8c:	d02f      	beq.n	800efee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800ef8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef94:	d878      	bhi.n	800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ef96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d004      	beq.n	800efa6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800ef9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800efa2:	d012      	beq.n	800efca <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800efa4:	e070      	b.n	800f088 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800efa6:	4b8a      	ldr	r3, [pc, #552]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efb2:	d107      	bne.n	800efc4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800efb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 feaf 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efc2:	e3e4      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efc4:	2300      	movs	r3, #0
 800efc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efc8:	e3e1      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efca:	4b81      	ldr	r3, [pc, #516]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800efd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800efd6:	d107      	bne.n	800efe8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efd8:	f107 0318 	add.w	r3, r7, #24
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 fbf5 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efe6:	e3d2      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efe8:	2300      	movs	r3, #0
 800efea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efec:	e3cf      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efee:	4b78      	ldr	r3, [pc, #480]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eff6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800effa:	d107      	bne.n	800f00c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800effc:	f107 030c 	add.w	r3, r7, #12
 800f000:	4618      	mov	r0, r3
 800f002:	f000 fd37 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f00a:	e3c0      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f010:	e3bd      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f012:	4b6f      	ldr	r3, [pc, #444]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f016:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f01a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f01c:	4b6c      	ldr	r3, [pc, #432]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b04      	cmp	r3, #4
 800f026:	d10c      	bne.n	800f042 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d109      	bne.n	800f042 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f02e:	4b68      	ldr	r3, [pc, #416]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	08db      	lsrs	r3, r3, #3
 800f034:	f003 0303 	and.w	r3, r3, #3
 800f038:	4a66      	ldr	r2, [pc, #408]	; (800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f03a:	fa22 f303 	lsr.w	r3, r2, r3
 800f03e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f040:	e01e      	b.n	800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f042:	4b63      	ldr	r3, [pc, #396]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f04a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f04e:	d106      	bne.n	800f05e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f052:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f056:	d102      	bne.n	800f05e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f058:	4b5f      	ldr	r3, [pc, #380]	; (800f1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f05a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f05c:	e010      	b.n	800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f05e:	4b5c      	ldr	r3, [pc, #368]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f066:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f06a:	d106      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f06c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f072:	d102      	bne.n	800f07a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f074:	4b59      	ldr	r3, [pc, #356]	; (800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f076:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f078:	e002      	b.n	800f080 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f07e:	e386      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f080:	e385      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f082:	4b57      	ldr	r3, [pc, #348]	; (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f084:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f086:	e382      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f088:	2300      	movs	r3, #0
 800f08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f08c:	e37f      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f08e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f092:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f096:	430b      	orrs	r3, r1
 800f098:	f040 80a7 	bne.w	800f1ea <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f09c:	4b4c      	ldr	r3, [pc, #304]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f09e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0a0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f0a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f0ac:	d055      	beq.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f0b4:	f200 8096 	bhi.w	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f0be:	f000 8084 	beq.w	800f1ca <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f0c8:	f200 808c 	bhi.w	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0d2:	d030      	beq.n	800f136 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0da:	f200 8083 	bhi.w	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d004      	beq.n	800f0ee <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f0ea:	d012      	beq.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f0ec:	e07a      	b.n	800f1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0ee:	4b38      	ldr	r3, [pc, #224]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0fa:	d107      	bne.n	800f10c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f100:	4618      	mov	r0, r3
 800f102:	f000 fe0b 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f10a:	e340      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f10c:	2300      	movs	r3, #0
 800f10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f110:	e33d      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f112:	4b2f      	ldr	r3, [pc, #188]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f11a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f11e:	d107      	bne.n	800f130 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f120:	f107 0318 	add.w	r3, r7, #24
 800f124:	4618      	mov	r0, r3
 800f126:	f000 fb51 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f12a:	69bb      	ldr	r3, [r7, #24]
 800f12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f12e:	e32e      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f134:	e32b      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f136:	4b26      	ldr	r3, [pc, #152]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f142:	d107      	bne.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f144:	f107 030c 	add.w	r3, r7, #12
 800f148:	4618      	mov	r0, r3
 800f14a:	f000 fc93 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f152:	e31c      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f154:	2300      	movs	r3, #0
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f158:	e319      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f15a:	4b1d      	ldr	r3, [pc, #116]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f15e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f162:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f164:	4b1a      	ldr	r3, [pc, #104]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f003 0304 	and.w	r3, r3, #4
 800f16c:	2b04      	cmp	r3, #4
 800f16e:	d10c      	bne.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f172:	2b00      	cmp	r3, #0
 800f174:	d109      	bne.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f176:	4b16      	ldr	r3, [pc, #88]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	08db      	lsrs	r3, r3, #3
 800f17c:	f003 0303 	and.w	r3, r3, #3
 800f180:	4a14      	ldr	r2, [pc, #80]	; (800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f182:	fa22 f303 	lsr.w	r3, r2, r3
 800f186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f188:	e01e      	b.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f18a:	4b11      	ldr	r3, [pc, #68]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f196:	d106      	bne.n	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f19e:	d102      	bne.n	800f1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f1a0:	4b0d      	ldr	r3, [pc, #52]	; (800f1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1a4:	e010      	b.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f1a6:	4b0a      	ldr	r3, [pc, #40]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1b2:	d106      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1ba:	d102      	bne.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1bc:	4b07      	ldr	r3, [pc, #28]	; (800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f1be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1c0:	e002      	b.n	800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f1c6:	e2e2      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1c8:	e2e1      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1ca:	4b05      	ldr	r3, [pc, #20]	; (800f1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f1cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1ce:	e2de      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1d0:	58024400 	.word	0x58024400
 800f1d4:	03d09000 	.word	0x03d09000
 800f1d8:	003d0900 	.word	0x003d0900
 800f1dc:	017d7840 	.word	0x017d7840
 800f1e0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f1e8:	e2d1      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1ee:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f1f2:	430b      	orrs	r3, r1
 800f1f4:	f040 809c 	bne.w	800f330 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f1f8:	4b93      	ldr	r3, [pc, #588]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f200:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f208:	d054      	beq.n	800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f210:	f200 808b 	bhi.w	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f21a:	f000 8083 	beq.w	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f224:	f200 8081 	bhi.w	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f22e:	d02f      	beq.n	800f290 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f236:	d878      	bhi.n	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d004      	beq.n	800f248 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f244:	d012      	beq.n	800f26c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f246:	e070      	b.n	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f248:	4b7f      	ldr	r3, [pc, #508]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f254:	d107      	bne.n	800f266 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f25a:	4618      	mov	r0, r3
 800f25c:	f000 fd5e 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f264:	e293      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f266:	2300      	movs	r3, #0
 800f268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f26a:	e290      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f26c:	4b76      	ldr	r3, [pc, #472]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f278:	d107      	bne.n	800f28a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f27a:	f107 0318 	add.w	r3, r7, #24
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 faa4 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f288:	e281      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f28a:	2300      	movs	r3, #0
 800f28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f28e:	e27e      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f290:	4b6d      	ldr	r3, [pc, #436]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f29c:	d107      	bne.n	800f2ae <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f29e:	f107 030c 	add.w	r3, r7, #12
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 fbe6 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2ac:	e26f      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2b2:	e26c      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f2b4:	4b64      	ldr	r3, [pc, #400]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f2bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f2be:	4b62      	ldr	r3, [pc, #392]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f003 0304 	and.w	r3, r3, #4
 800f2c6:	2b04      	cmp	r3, #4
 800f2c8:	d10c      	bne.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d109      	bne.n	800f2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f2d0:	4b5d      	ldr	r3, [pc, #372]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	08db      	lsrs	r3, r3, #3
 800f2d6:	f003 0303 	and.w	r3, r3, #3
 800f2da:	4a5c      	ldr	r2, [pc, #368]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800f2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2e2:	e01e      	b.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f2e4:	4b58      	ldr	r3, [pc, #352]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f2f0:	d106      	bne.n	800f300 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f2f8:	d102      	bne.n	800f300 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f2fa:	4b55      	ldr	r3, [pc, #340]	; (800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2fe:	e010      	b.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f300:	4b51      	ldr	r3, [pc, #324]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f30c:	d106      	bne.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f314:	d102      	bne.n	800f31c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f316:	4b4f      	ldr	r3, [pc, #316]	; (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f31a:	e002      	b.n	800f322 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f31c:	2300      	movs	r3, #0
 800f31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f320:	e235      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f322:	e234      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f324:	4b4c      	ldr	r3, [pc, #304]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f328:	e231      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f32e:	e22e      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f330:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f334:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f338:	430b      	orrs	r3, r1
 800f33a:	f040 808f 	bne.w	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f33e:	4b42      	ldr	r3, [pc, #264]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f342:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f346:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f34e:	d06b      	beq.n	800f428 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f352:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f356:	d874      	bhi.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f35e:	d056      	beq.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f362:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f366:	d86c      	bhi.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f36e:	d03b      	beq.n	800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f372:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f376:	d864      	bhi.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f37e:	d021      	beq.n	800f3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f382:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f386:	d85c      	bhi.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d004      	beq.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f394:	d004      	beq.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f396:	e054      	b.n	800f442 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f398:	f7fe fa4c 	bl	800d834 <HAL_RCC_GetPCLK1Freq>
 800f39c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f39e:	e1f6      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3a0:	4b29      	ldr	r3, [pc, #164]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3ac:	d107      	bne.n	800f3be <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3ae:	f107 0318 	add.w	r3, r7, #24
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fa0a 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3bc:	e1e7      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3c2:	e1e4      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3c4:	4b20      	ldr	r3, [pc, #128]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3d0:	d107      	bne.n	800f3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3d2:	f107 030c 	add.w	r3, r7, #12
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f000 fb4c 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3e0:	e1d5      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e6:	e1d2      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f3e8:	4b17      	ldr	r3, [pc, #92]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	f003 0304 	and.w	r3, r3, #4
 800f3f0:	2b04      	cmp	r3, #4
 800f3f2:	d109      	bne.n	800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f3f4:	4b14      	ldr	r3, [pc, #80]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	08db      	lsrs	r3, r3, #3
 800f3fa:	f003 0303 	and.w	r3, r3, #3
 800f3fe:	4a13      	ldr	r2, [pc, #76]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f400:	fa22 f303 	lsr.w	r3, r2, r3
 800f404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f406:	e1c2      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f40c:	e1bf      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f40e:	4b0e      	ldr	r3, [pc, #56]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f41a:	d102      	bne.n	800f422 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f41c:	4b0c      	ldr	r3, [pc, #48]	; (800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f420:	e1b5      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f426:	e1b2      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f428:	4b07      	ldr	r3, [pc, #28]	; (800f448 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f434:	d102      	bne.n	800f43c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f436:	4b07      	ldr	r3, [pc, #28]	; (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f43a:	e1a8      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f43c:	2300      	movs	r3, #0
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f440:	e1a5      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f446:	e1a2      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f448:	58024400 	.word	0x58024400
 800f44c:	03d09000 	.word	0x03d09000
 800f450:	003d0900 	.word	0x003d0900
 800f454:	017d7840 	.word	0x017d7840
 800f458:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f45c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f460:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f464:	430b      	orrs	r3, r1
 800f466:	d173      	bne.n	800f550 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f468:	4b9c      	ldr	r3, [pc, #624]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f46a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f46c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f470:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f474:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f478:	d02f      	beq.n	800f4da <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f480:	d863      	bhi.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	2b00      	cmp	r3, #0
 800f486:	d004      	beq.n	800f492 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f48e:	d012      	beq.n	800f4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f490:	e05b      	b.n	800f54a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f492:	4b92      	ldr	r3, [pc, #584]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f49a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f49e:	d107      	bne.n	800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4a0:	f107 0318 	add.w	r3, r7, #24
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f000 f991 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f4aa:	69bb      	ldr	r3, [r7, #24]
 800f4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ae:	e16e      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4b4:	e16b      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4b6:	4b89      	ldr	r3, [pc, #548]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4c2:	d107      	bne.n	800f4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4c4:	f107 030c 	add.w	r3, r7, #12
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f000 fad3 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4d2:	e15c      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4d8:	e159      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f4da:	4b80      	ldr	r3, [pc, #512]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f4de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f4e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4e4:	4b7d      	ldr	r3, [pc, #500]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	f003 0304 	and.w	r3, r3, #4
 800f4ec:	2b04      	cmp	r3, #4
 800f4ee:	d10c      	bne.n	800f50a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d109      	bne.n	800f50a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4f6:	4b79      	ldr	r3, [pc, #484]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	08db      	lsrs	r3, r3, #3
 800f4fc:	f003 0303 	and.w	r3, r3, #3
 800f500:	4a77      	ldr	r2, [pc, #476]	; (800f6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f502:	fa22 f303 	lsr.w	r3, r2, r3
 800f506:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f508:	e01e      	b.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f50a:	4b74      	ldr	r3, [pc, #464]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f516:	d106      	bne.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f51a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f51e:	d102      	bne.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f520:	4b70      	ldr	r3, [pc, #448]	; (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f522:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f524:	e010      	b.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f526:	4b6d      	ldr	r3, [pc, #436]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f52e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f532:	d106      	bne.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f53a:	d102      	bne.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f53c:	4b6a      	ldr	r3, [pc, #424]	; (800f6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f53e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f540:	e002      	b.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f546:	e122      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f548:	e121      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f54e:	e11e      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f550:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f554:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f558:	430b      	orrs	r3, r1
 800f55a:	d133      	bne.n	800f5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f55c:	4b5f      	ldr	r3, [pc, #380]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f564:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d004      	beq.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f572:	d012      	beq.n	800f59a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f574:	e023      	b.n	800f5be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f576:	4b59      	ldr	r3, [pc, #356]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f582:	d107      	bne.n	800f594 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 fbc7 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f592:	e0fc      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f594:	2300      	movs	r3, #0
 800f596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f598:	e0f9      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f59a:	4b50      	ldr	r3, [pc, #320]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5a6:	d107      	bne.n	800f5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5a8:	f107 0318 	add.w	r3, r7, #24
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f000 f90d 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f5b2:	6a3b      	ldr	r3, [r7, #32]
 800f5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5b6:	e0ea      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5bc:	e0e7      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5c2:	e0e4      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5c8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f5cc:	430b      	orrs	r3, r1
 800f5ce:	f040 808d 	bne.w	800f6ec <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f5d2:	4b42      	ldr	r3, [pc, #264]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5d6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f5da:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f5e2:	d06b      	beq.n	800f6bc <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f5e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f5ea:	d874      	bhi.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5f2:	d056      	beq.n	800f6a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f5f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5fa:	d86c      	bhi.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f602:	d03b      	beq.n	800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f606:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f60a:	d864      	bhi.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f612:	d021      	beq.n	800f658 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f616:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f61a:	d85c      	bhi.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d004      	beq.n	800f62c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f624:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f628:	d004      	beq.n	800f634 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f62a:	e054      	b.n	800f6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f62c:	f000 f8b8 	bl	800f7a0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f630:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f632:	e0ac      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f634:	4b29      	ldr	r3, [pc, #164]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f63c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f640:	d107      	bne.n	800f652 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f642:	f107 0318 	add.w	r3, r7, #24
 800f646:	4618      	mov	r0, r3
 800f648:	f000 f8c0 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f64c:	69fb      	ldr	r3, [r7, #28]
 800f64e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f650:	e09d      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f652:	2300      	movs	r3, #0
 800f654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f656:	e09a      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f658:	4b20      	ldr	r3, [pc, #128]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f664:	d107      	bne.n	800f676 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f666:	f107 030c 	add.w	r3, r7, #12
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 fa02 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f674:	e08b      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f676:	2300      	movs	r3, #0
 800f678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f67a:	e088      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f67c:	4b17      	ldr	r3, [pc, #92]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f003 0304 	and.w	r3, r3, #4
 800f684:	2b04      	cmp	r3, #4
 800f686:	d109      	bne.n	800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f688:	4b14      	ldr	r3, [pc, #80]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	08db      	lsrs	r3, r3, #3
 800f68e:	f003 0303 	and.w	r3, r3, #3
 800f692:	4a13      	ldr	r2, [pc, #76]	; (800f6e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f694:	fa22 f303 	lsr.w	r3, r2, r3
 800f698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f69a:	e078      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f69c:	2300      	movs	r3, #0
 800f69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6a0:	e075      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f6a2:	4b0e      	ldr	r3, [pc, #56]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6ae:	d102      	bne.n	800f6b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f6b0:	4b0c      	ldr	r3, [pc, #48]	; (800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6b4:	e06b      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6ba:	e068      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f6bc:	4b07      	ldr	r3, [pc, #28]	; (800f6dc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6c8:	d102      	bne.n	800f6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f6ca:	4b07      	ldr	r3, [pc, #28]	; (800f6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6ce:	e05e      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6d4:	e05b      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6da:	e058      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f6dc:	58024400 	.word	0x58024400
 800f6e0:	03d09000 	.word	0x03d09000
 800f6e4:	003d0900 	.word	0x003d0900
 800f6e8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f6ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f6f4:	430b      	orrs	r3, r1
 800f6f6:	d148      	bne.n	800f78a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f6f8:	4b27      	ldr	r3, [pc, #156]	; (800f798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f700:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f708:	d02a      	beq.n	800f760 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f70a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f710:	d838      	bhi.n	800f784 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f714:	2b00      	cmp	r3, #0
 800f716:	d004      	beq.n	800f722 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f71e:	d00d      	beq.n	800f73c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f720:	e030      	b.n	800f784 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f722:	4b1d      	ldr	r3, [pc, #116]	; (800f798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f72a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f72e:	d102      	bne.n	800f736 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f730:	4b1a      	ldr	r3, [pc, #104]	; (800f79c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f732:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f734:	e02b      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f736:	2300      	movs	r3, #0
 800f738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f73a:	e028      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f73c:	4b16      	ldr	r3, [pc, #88]	; (800f798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f748:	d107      	bne.n	800f75a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 fae4 	bl	800fd1c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f758:	e019      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f75a:	2300      	movs	r3, #0
 800f75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f75e:	e016      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f760:	4b0d      	ldr	r3, [pc, #52]	; (800f798 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f76c:	d107      	bne.n	800f77e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f76e:	f107 0318 	add.w	r3, r7, #24
 800f772:	4618      	mov	r0, r3
 800f774:	f000 f82a 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f77c:	e007      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f77e:	2300      	movs	r3, #0
 800f780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f782:	e004      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f784:	2300      	movs	r3, #0
 800f786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f788:	e001      	b.n	800f78e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800f78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f790:	4618      	mov	r0, r3
 800f792:	3740      	adds	r7, #64	; 0x40
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	58024400 	.word	0x58024400
 800f79c:	017d7840 	.word	0x017d7840

0800f7a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f7a4:	f7fe f816 	bl	800d7d4 <HAL_RCC_GetHCLKFreq>
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	4b06      	ldr	r3, [pc, #24]	; (800f7c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f7ac:	6a1b      	ldr	r3, [r3, #32]
 800f7ae:	091b      	lsrs	r3, r3, #4
 800f7b0:	f003 0307 	and.w	r3, r3, #7
 800f7b4:	4904      	ldr	r1, [pc, #16]	; (800f7c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f7b6:	5ccb      	ldrb	r3, [r1, r3]
 800f7b8:	f003 031f 	and.w	r3, r3, #31
 800f7bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	bd80      	pop	{r7, pc}
 800f7c4:	58024400 	.word	0x58024400
 800f7c8:	080173f0 	.word	0x080173f0

0800f7cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b089      	sub	sp, #36	; 0x24
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f7d4:	4ba1      	ldr	r3, [pc, #644]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7d8:	f003 0303 	and.w	r3, r3, #3
 800f7dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f7de:	4b9f      	ldr	r3, [pc, #636]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e2:	0b1b      	lsrs	r3, r3, #12
 800f7e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f7ea:	4b9c      	ldr	r3, [pc, #624]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ee:	091b      	lsrs	r3, r3, #4
 800f7f0:	f003 0301 	and.w	r3, r3, #1
 800f7f4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f7f6:	4b99      	ldr	r3, [pc, #612]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7fa:	08db      	lsrs	r3, r3, #3
 800f7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f800:	693a      	ldr	r2, [r7, #16]
 800f802:	fb02 f303 	mul.w	r3, r2, r3
 800f806:	ee07 3a90 	vmov	s15, r3
 800f80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f80e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	2b00      	cmp	r3, #0
 800f816:	f000 8111 	beq.w	800fa3c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	2b02      	cmp	r3, #2
 800f81e:	f000 8083 	beq.w	800f928 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f822:	69bb      	ldr	r3, [r7, #24]
 800f824:	2b02      	cmp	r3, #2
 800f826:	f200 80a1 	bhi.w	800f96c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d003      	beq.n	800f838 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	2b01      	cmp	r3, #1
 800f834:	d056      	beq.n	800f8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f836:	e099      	b.n	800f96c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f838:	4b88      	ldr	r3, [pc, #544]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	f003 0320 	and.w	r3, r3, #32
 800f840:	2b00      	cmp	r3, #0
 800f842:	d02d      	beq.n	800f8a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f844:	4b85      	ldr	r3, [pc, #532]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	08db      	lsrs	r3, r3, #3
 800f84a:	f003 0303 	and.w	r3, r3, #3
 800f84e:	4a84      	ldr	r2, [pc, #528]	; (800fa60 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f850:	fa22 f303 	lsr.w	r3, r2, r3
 800f854:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	ee07 3a90 	vmov	s15, r3
 800f85c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	ee07 3a90 	vmov	s15, r3
 800f866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f86e:	4b7b      	ldr	r3, [pc, #492]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f876:	ee07 3a90 	vmov	s15, r3
 800f87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f882:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fa64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f89a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f89e:	e087      	b.n	800f9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	ee07 3a90 	vmov	s15, r3
 800f8a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fa68 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f8ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8b2:	4b6a      	ldr	r3, [pc, #424]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ba:	ee07 3a90 	vmov	s15, r3
 800f8be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fa64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f8ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f8e2:	e065      	b.n	800f9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	ee07 3a90 	vmov	s15, r3
 800f8ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fa6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f8f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8f6:	4b59      	ldr	r3, [pc, #356]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8fe:	ee07 3a90 	vmov	s15, r3
 800f902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f906:	ed97 6a03 	vldr	s12, [r7, #12]
 800f90a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fa64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f90e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f91a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f91e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f926:	e043      	b.n	800f9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	ee07 3a90 	vmov	s15, r3
 800f92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f932:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fa70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f93a:	4b48      	ldr	r3, [pc, #288]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f93e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f942:	ee07 3a90 	vmov	s15, r3
 800f946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f94a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f94e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fa64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f95a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f95e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f962:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f96a:	e021      	b.n	800f9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	ee07 3a90 	vmov	s15, r3
 800f972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f976:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fa6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f97a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f97e:	4b37      	ldr	r3, [pc, #220]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f986:	ee07 3a90 	vmov	s15, r3
 800f98a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f98e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f992:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fa64 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f99a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f99e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f9b0:	4b2a      	ldr	r3, [pc, #168]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b4:	0a5b      	lsrs	r3, r3, #9
 800f9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ba:	ee07 3a90 	vmov	s15, r3
 800f9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9d6:	ee17 2a90 	vmov	r2, s15
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f9de:	4b1f      	ldr	r3, [pc, #124]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e2:	0c1b      	lsrs	r3, r3, #16
 800f9e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9e8:	ee07 3a90 	vmov	s15, r3
 800f9ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa04:	ee17 2a90 	vmov	r2, s15
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fa0c:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fa0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa10:	0e1b      	lsrs	r3, r3, #24
 800fa12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa16:	ee07 3a90 	vmov	s15, r3
 800fa1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa26:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa32:	ee17 2a90 	vmov	r2, s15
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fa3a:	e008      	b.n	800fa4e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	609a      	str	r2, [r3, #8]
}
 800fa4e:	bf00      	nop
 800fa50:	3724      	adds	r7, #36	; 0x24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr
 800fa5a:	bf00      	nop
 800fa5c:	58024400 	.word	0x58024400
 800fa60:	03d09000 	.word	0x03d09000
 800fa64:	46000000 	.word	0x46000000
 800fa68:	4c742400 	.word	0x4c742400
 800fa6c:	4a742400 	.word	0x4a742400
 800fa70:	4bbebc20 	.word	0x4bbebc20

0800fa74 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b089      	sub	sp, #36	; 0x24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa7c:	4ba1      	ldr	r3, [pc, #644]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa80:	f003 0303 	and.w	r3, r3, #3
 800fa84:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fa86:	4b9f      	ldr	r3, [pc, #636]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8a:	0d1b      	lsrs	r3, r3, #20
 800fa8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa90:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fa92:	4b9c      	ldr	r3, [pc, #624]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa96:	0a1b      	lsrs	r3, r3, #8
 800fa98:	f003 0301 	and.w	r3, r3, #1
 800fa9c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fa9e:	4b99      	ldr	r3, [pc, #612]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800faa2:	08db      	lsrs	r3, r3, #3
 800faa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800faa8:	693a      	ldr	r2, [r7, #16]
 800faaa:	fb02 f303 	mul.w	r3, r2, r3
 800faae:	ee07 3a90 	vmov	s15, r3
 800fab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800faba:	697b      	ldr	r3, [r7, #20]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	f000 8111 	beq.w	800fce4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fac2:	69bb      	ldr	r3, [r7, #24]
 800fac4:	2b02      	cmp	r3, #2
 800fac6:	f000 8083 	beq.w	800fbd0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	2b02      	cmp	r3, #2
 800face:	f200 80a1 	bhi.w	800fc14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d003      	beq.n	800fae0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fad8:	69bb      	ldr	r3, [r7, #24]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d056      	beq.n	800fb8c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fade:	e099      	b.n	800fc14 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fae0:	4b88      	ldr	r3, [pc, #544]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	f003 0320 	and.w	r3, r3, #32
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d02d      	beq.n	800fb48 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800faec:	4b85      	ldr	r3, [pc, #532]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	08db      	lsrs	r3, r3, #3
 800faf2:	f003 0303 	and.w	r3, r3, #3
 800faf6:	4a84      	ldr	r2, [pc, #528]	; (800fd08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800faf8:	fa22 f303 	lsr.w	r3, r2, r3
 800fafc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	ee07 3a90 	vmov	s15, r3
 800fb04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb08:	697b      	ldr	r3, [r7, #20]
 800fb0a:	ee07 3a90 	vmov	s15, r3
 800fb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb16:	4b7b      	ldr	r3, [pc, #492]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb1e:	ee07 3a90 	vmov	s15, r3
 800fb22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb26:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb46:	e087      	b.n	800fc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	ee07 3a90 	vmov	s15, r3
 800fb4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fd10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fb56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb5a:	4b6a      	ldr	r3, [pc, #424]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb62:	ee07 3a90 	vmov	s15, r3
 800fb66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fb8a:	e065      	b.n	800fc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	ee07 3a90 	vmov	s15, r3
 800fb92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fd14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb9e:	4b59      	ldr	r3, [pc, #356]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fba6:	ee07 3a90 	vmov	s15, r3
 800fbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbae:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbce:	e043      	b.n	800fc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	ee07 3a90 	vmov	s15, r3
 800fbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fd18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbe2:	4b48      	ldr	r3, [pc, #288]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbea:	ee07 3a90 	vmov	s15, r3
 800fbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc12:	e021      	b.n	800fc58 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fc14:	697b      	ldr	r3, [r7, #20]
 800fc16:	ee07 3a90 	vmov	s15, r3
 800fc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fd14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc26:	4b37      	ldr	r3, [pc, #220]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc2e:	ee07 3a90 	vmov	s15, r3
 800fc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc36:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fd0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc56:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800fc58:	4b2a      	ldr	r3, [pc, #168]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5c:	0a5b      	lsrs	r3, r3, #9
 800fc5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc62:	ee07 3a90 	vmov	s15, r3
 800fc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc72:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc7e:	ee17 2a90 	vmov	r2, s15
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fc86:	4b1f      	ldr	r3, [pc, #124]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc8a:	0c1b      	lsrs	r3, r3, #16
 800fc8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc90:	ee07 3a90 	vmov	s15, r3
 800fc94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fca0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcac:	ee17 2a90 	vmov	r2, s15
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fcb4:	4b13      	ldr	r3, [pc, #76]	; (800fd04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fcb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcb8:	0e1b      	lsrs	r3, r3, #24
 800fcba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcbe:	ee07 3a90 	vmov	s15, r3
 800fcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcce:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcda:	ee17 2a90 	vmov	r2, s15
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fce2:	e008      	b.n	800fcf6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2200      	movs	r2, #0
 800fce8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	609a      	str	r2, [r3, #8]
}
 800fcf6:	bf00      	nop
 800fcf8:	3724      	adds	r7, #36	; 0x24
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	58024400 	.word	0x58024400
 800fd08:	03d09000 	.word	0x03d09000
 800fd0c:	46000000 	.word	0x46000000
 800fd10:	4c742400 	.word	0x4c742400
 800fd14:	4a742400 	.word	0x4a742400
 800fd18:	4bbebc20 	.word	0x4bbebc20

0800fd1c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b089      	sub	sp, #36	; 0x24
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd24:	4ba0      	ldr	r3, [pc, #640]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd28:	f003 0303 	and.w	r3, r3, #3
 800fd2c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fd2e:	4b9e      	ldr	r3, [pc, #632]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd32:	091b      	lsrs	r3, r3, #4
 800fd34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd38:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fd3a:	4b9b      	ldr	r3, [pc, #620]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd3e:	f003 0301 	and.w	r3, r3, #1
 800fd42:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fd44:	4b98      	ldr	r3, [pc, #608]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd48:	08db      	lsrs	r3, r3, #3
 800fd4a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd4e:	693a      	ldr	r2, [r7, #16]
 800fd50:	fb02 f303 	mul.w	r3, r2, r3
 800fd54:	ee07 3a90 	vmov	s15, r3
 800fd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd5c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	f000 8111 	beq.w	800ff8a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	2b02      	cmp	r3, #2
 800fd6c:	f000 8083 	beq.w	800fe76 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	2b02      	cmp	r3, #2
 800fd74:	f200 80a1 	bhi.w	800feba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d003      	beq.n	800fd86 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d056      	beq.n	800fe32 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fd84:	e099      	b.n	800feba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd86:	4b88      	ldr	r3, [pc, #544]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f003 0320 	and.w	r3, r3, #32
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d02d      	beq.n	800fdee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fd92:	4b85      	ldr	r3, [pc, #532]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	08db      	lsrs	r3, r3, #3
 800fd98:	f003 0303 	and.w	r3, r3, #3
 800fd9c:	4a83      	ldr	r2, [pc, #524]	; (800ffac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fd9e:	fa22 f303 	lsr.w	r3, r2, r3
 800fda2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	ee07 3a90 	vmov	s15, r3
 800fdaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	ee07 3a90 	vmov	s15, r3
 800fdb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdbc:	4b7a      	ldr	r3, [pc, #488]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdc4:	ee07 3a90 	vmov	s15, r3
 800fdc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdcc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ffb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fdd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fde0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fde4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fde8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fdec:	e087      	b.n	800fefe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	ee07 3a90 	vmov	s15, r3
 800fdf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdf8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ffb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fdfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe00:	4b69      	ldr	r3, [pc, #420]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe08:	ee07 3a90 	vmov	s15, r3
 800fe0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe10:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe14:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ffb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe2c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe30:	e065      	b.n	800fefe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	ee07 3a90 	vmov	s15, r3
 800fe38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ffb8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fe40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe44:	4b58      	ldr	r3, [pc, #352]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe4c:	ee07 3a90 	vmov	s15, r3
 800fe50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe54:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe58:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ffb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe70:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe74:	e043      	b.n	800fefe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	ee07 3a90 	vmov	s15, r3
 800fe7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ffbc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fe84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe88:	4b47      	ldr	r3, [pc, #284]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe90:	ee07 3a90 	vmov	s15, r3
 800fe94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe98:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ffb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800feac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feb4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feb8:	e021      	b.n	800fefe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800feba:	697b      	ldr	r3, [r7, #20]
 800febc:	ee07 3a90 	vmov	s15, r3
 800fec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fec4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ffb4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fecc:	4b36      	ldr	r3, [pc, #216]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fed4:	ee07 3a90 	vmov	s15, r3
 800fed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fedc:	ed97 6a03 	vldr	s12, [r7, #12]
 800fee0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ffb0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800feec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fef8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fefc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fefe:	4b2a      	ldr	r3, [pc, #168]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff02:	0a5b      	lsrs	r3, r3, #9
 800ff04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff08:	ee07 3a90 	vmov	s15, r3
 800ff0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff18:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff24:	ee17 2a90 	vmov	r2, s15
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ff2c:	4b1e      	ldr	r3, [pc, #120]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff30:	0c1b      	lsrs	r3, r3, #16
 800ff32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff36:	ee07 3a90 	vmov	s15, r3
 800ff3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff52:	ee17 2a90 	vmov	r2, s15
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ff5a:	4b13      	ldr	r3, [pc, #76]	; (800ffa8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff5e:	0e1b      	lsrs	r3, r3, #24
 800ff60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff64:	ee07 3a90 	vmov	s15, r3
 800ff68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff80:	ee17 2a90 	vmov	r2, s15
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ff88:	e008      	b.n	800ff9c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2200      	movs	r2, #0
 800ff94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	2200      	movs	r2, #0
 800ff9a:	609a      	str	r2, [r3, #8]
}
 800ff9c:	bf00      	nop
 800ff9e:	3724      	adds	r7, #36	; 0x24
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	58024400 	.word	0x58024400
 800ffac:	03d09000 	.word	0x03d09000
 800ffb0:	46000000 	.word	0x46000000
 800ffb4:	4c742400 	.word	0x4c742400
 800ffb8:	4a742400 	.word	0x4a742400
 800ffbc:	4bbebc20 	.word	0x4bbebc20

0800ffc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b084      	sub	sp, #16
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
 800ffc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ffce:	4b53      	ldr	r3, [pc, #332]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 800ffd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffd2:	f003 0303 	and.w	r3, r3, #3
 800ffd6:	2b03      	cmp	r3, #3
 800ffd8:	d101      	bne.n	800ffde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	e099      	b.n	8010112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ffde:	4b4f      	ldr	r3, [pc, #316]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4a4e      	ldr	r2, [pc, #312]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 800ffe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ffe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffea:	f7f7 f86f 	bl	80070cc <HAL_GetTick>
 800ffee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fff0:	e008      	b.n	8010004 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fff2:	f7f7 f86b 	bl	80070cc <HAL_GetTick>
 800fff6:	4602      	mov	r2, r0
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d901      	bls.n	8010004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010000:	2303      	movs	r3, #3
 8010002:	e086      	b.n	8010112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8010004:	4b45      	ldr	r3, [pc, #276]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1f0      	bne.n	800fff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8010010:	4b42      	ldr	r3, [pc, #264]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	031b      	lsls	r3, r3, #12
 801001e:	493f      	ldr	r1, [pc, #252]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010020:	4313      	orrs	r3, r2
 8010022:	628b      	str	r3, [r1, #40]	; 0x28
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	685b      	ldr	r3, [r3, #4]
 8010028:	3b01      	subs	r3, #1
 801002a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	689b      	ldr	r3, [r3, #8]
 8010032:	3b01      	subs	r3, #1
 8010034:	025b      	lsls	r3, r3, #9
 8010036:	b29b      	uxth	r3, r3
 8010038:	431a      	orrs	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	68db      	ldr	r3, [r3, #12]
 801003e:	3b01      	subs	r3, #1
 8010040:	041b      	lsls	r3, r3, #16
 8010042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010046:	431a      	orrs	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	3b01      	subs	r3, #1
 801004e:	061b      	lsls	r3, r3, #24
 8010050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010054:	4931      	ldr	r1, [pc, #196]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010056:	4313      	orrs	r3, r2
 8010058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801005a:	4b30      	ldr	r3, [pc, #192]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 801005c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801005e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	695b      	ldr	r3, [r3, #20]
 8010066:	492d      	ldr	r1, [pc, #180]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010068:	4313      	orrs	r3, r2
 801006a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801006c:	4b2b      	ldr	r3, [pc, #172]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 801006e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010070:	f023 0220 	bic.w	r2, r3, #32
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	699b      	ldr	r3, [r3, #24]
 8010078:	4928      	ldr	r1, [pc, #160]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 801007a:	4313      	orrs	r3, r2
 801007c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801007e:	4b27      	ldr	r3, [pc, #156]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010082:	4a26      	ldr	r2, [pc, #152]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010084:	f023 0310 	bic.w	r3, r3, #16
 8010088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801008a:	4b24      	ldr	r3, [pc, #144]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 801008c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801008e:	4b24      	ldr	r3, [pc, #144]	; (8010120 <RCCEx_PLL2_Config+0x160>)
 8010090:	4013      	ands	r3, r2
 8010092:	687a      	ldr	r2, [r7, #4]
 8010094:	69d2      	ldr	r2, [r2, #28]
 8010096:	00d2      	lsls	r2, r2, #3
 8010098:	4920      	ldr	r1, [pc, #128]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 801009a:	4313      	orrs	r3, r2
 801009c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801009e:	4b1f      	ldr	r3, [pc, #124]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100a2:	4a1e      	ldr	r2, [pc, #120]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100a4:	f043 0310 	orr.w	r3, r3, #16
 80100a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d106      	bne.n	80100be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80100b0:	4b1a      	ldr	r3, [pc, #104]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b4:	4a19      	ldr	r2, [pc, #100]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80100bc:	e00f      	b.n	80100de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d106      	bne.n	80100d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80100c4:	4b15      	ldr	r3, [pc, #84]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c8:	4a14      	ldr	r2, [pc, #80]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80100ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80100d0:	e005      	b.n	80100de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80100d2:	4b12      	ldr	r3, [pc, #72]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d6:	4a11      	ldr	r2, [pc, #68]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80100dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80100de:	4b0f      	ldr	r3, [pc, #60]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4a0e      	ldr	r2, [pc, #56]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 80100e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80100e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100ea:	f7f6 ffef 	bl	80070cc <HAL_GetTick>
 80100ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100f0:	e008      	b.n	8010104 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80100f2:	f7f6 ffeb 	bl	80070cc <HAL_GetTick>
 80100f6:	4602      	mov	r2, r0
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	1ad3      	subs	r3, r2, r3
 80100fc:	2b02      	cmp	r3, #2
 80100fe:	d901      	bls.n	8010104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010100:	2303      	movs	r3, #3
 8010102:	e006      	b.n	8010112 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8010104:	4b05      	ldr	r3, [pc, #20]	; (801011c <RCCEx_PLL2_Config+0x15c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801010c:	2b00      	cmp	r3, #0
 801010e:	d0f0      	beq.n	80100f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8010110:	7bfb      	ldrb	r3, [r7, #15]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	58024400 	.word	0x58024400
 8010120:	ffff0007 	.word	0xffff0007

08010124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801012e:	2300      	movs	r3, #0
 8010130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8010132:	4b53      	ldr	r3, [pc, #332]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010136:	f003 0303 	and.w	r3, r3, #3
 801013a:	2b03      	cmp	r3, #3
 801013c:	d101      	bne.n	8010142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801013e:	2301      	movs	r3, #1
 8010140:	e099      	b.n	8010276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8010142:	4b4f      	ldr	r3, [pc, #316]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	4a4e      	ldr	r2, [pc, #312]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801014c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801014e:	f7f6 ffbd 	bl	80070cc <HAL_GetTick>
 8010152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010154:	e008      	b.n	8010168 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010156:	f7f6 ffb9 	bl	80070cc <HAL_GetTick>
 801015a:	4602      	mov	r2, r0
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	1ad3      	subs	r3, r2, r3
 8010160:	2b02      	cmp	r3, #2
 8010162:	d901      	bls.n	8010168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010164:	2303      	movs	r3, #3
 8010166:	e086      	b.n	8010276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010168:	4b45      	ldr	r3, [pc, #276]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1f0      	bne.n	8010156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010174:	4b42      	ldr	r3, [pc, #264]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	051b      	lsls	r3, r3, #20
 8010182:	493f      	ldr	r1, [pc, #252]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010184:	4313      	orrs	r3, r2
 8010186:	628b      	str	r3, [r1, #40]	; 0x28
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	3b01      	subs	r3, #1
 801018e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	3b01      	subs	r3, #1
 8010198:	025b      	lsls	r3, r3, #9
 801019a:	b29b      	uxth	r3, r3
 801019c:	431a      	orrs	r2, r3
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	68db      	ldr	r3, [r3, #12]
 80101a2:	3b01      	subs	r3, #1
 80101a4:	041b      	lsls	r3, r3, #16
 80101a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80101aa:	431a      	orrs	r2, r3
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	691b      	ldr	r3, [r3, #16]
 80101b0:	3b01      	subs	r3, #1
 80101b2:	061b      	lsls	r3, r3, #24
 80101b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80101b8:	4931      	ldr	r1, [pc, #196]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101ba:	4313      	orrs	r3, r2
 80101bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80101be:	4b30      	ldr	r3, [pc, #192]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	695b      	ldr	r3, [r3, #20]
 80101ca:	492d      	ldr	r1, [pc, #180]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101cc:	4313      	orrs	r3, r2
 80101ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80101d0:	4b2b      	ldr	r3, [pc, #172]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	699b      	ldr	r3, [r3, #24]
 80101dc:	4928      	ldr	r1, [pc, #160]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101de:	4313      	orrs	r3, r2
 80101e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80101e2:	4b27      	ldr	r3, [pc, #156]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101e6:	4a26      	ldr	r2, [pc, #152]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80101ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80101ee:	4b24      	ldr	r3, [pc, #144]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101f2:	4b24      	ldr	r3, [pc, #144]	; (8010284 <RCCEx_PLL3_Config+0x160>)
 80101f4:	4013      	ands	r3, r2
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	69d2      	ldr	r2, [r2, #28]
 80101fa:	00d2      	lsls	r2, r2, #3
 80101fc:	4920      	ldr	r1, [pc, #128]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 80101fe:	4313      	orrs	r3, r2
 8010200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010202:	4b1f      	ldr	r3, [pc, #124]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010206:	4a1e      	ldr	r2, [pc, #120]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801020c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d106      	bne.n	8010222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010214:	4b1a      	ldr	r3, [pc, #104]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010218:	4a19      	ldr	r2, [pc, #100]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 801021a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801021e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010220:	e00f      	b.n	8010242 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	2b01      	cmp	r3, #1
 8010226:	d106      	bne.n	8010236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010228:	4b15      	ldr	r3, [pc, #84]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 801022a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022c:	4a14      	ldr	r2, [pc, #80]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 801022e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010234:	e005      	b.n	8010242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010236:	4b12      	ldr	r3, [pc, #72]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801023a:	4a11      	ldr	r2, [pc, #68]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 801023c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010242:	4b0f      	ldr	r3, [pc, #60]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	4a0e      	ldr	r2, [pc, #56]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 8010248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801024c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801024e:	f7f6 ff3d 	bl	80070cc <HAL_GetTick>
 8010252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010254:	e008      	b.n	8010268 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010256:	f7f6 ff39 	bl	80070cc <HAL_GetTick>
 801025a:	4602      	mov	r2, r0
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	2b02      	cmp	r3, #2
 8010262:	d901      	bls.n	8010268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010264:	2303      	movs	r3, #3
 8010266:	e006      	b.n	8010276 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010268:	4b05      	ldr	r3, [pc, #20]	; (8010280 <RCCEx_PLL3_Config+0x15c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010270:	2b00      	cmp	r3, #0
 8010272:	d0f0      	beq.n	8010256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010274:	7bfb      	ldrb	r3, [r7, #15]
}
 8010276:	4618      	mov	r0, r3
 8010278:	3710      	adds	r7, #16
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	58024400 	.word	0x58024400
 8010284:	ffff0007 	.word	0xffff0007

08010288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b082      	sub	sp, #8
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d101      	bne.n	801029a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010296:	2301      	movs	r3, #1
 8010298:	e049      	b.n	801032e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	2200      	movs	r2, #0
 80102aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7f6 fad2 	bl	8006858 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2202      	movs	r2, #2
 80102b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681a      	ldr	r2, [r3, #0]
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	3304      	adds	r3, #4
 80102c4:	4619      	mov	r1, r3
 80102c6:	4610      	mov	r0, r2
 80102c8:	f001 f940 	bl	801154c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2201      	movs	r2, #1
 8010320:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2201      	movs	r2, #1
 8010328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801032c:	2300      	movs	r3, #0
}
 801032e:	4618      	mov	r0, r3
 8010330:	3708      	adds	r7, #8
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
	...

08010338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010338:	b480      	push	{r7}
 801033a:	b085      	sub	sp, #20
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010346:	b2db      	uxtb	r3, r3
 8010348:	2b01      	cmp	r3, #1
 801034a:	d001      	beq.n	8010350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801034c:	2301      	movs	r3, #1
 801034e:	e054      	b.n	80103fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2202      	movs	r2, #2
 8010354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	68da      	ldr	r2, [r3, #12]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f042 0201 	orr.w	r2, r2, #1
 8010366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a26      	ldr	r2, [pc, #152]	; (8010408 <HAL_TIM_Base_Start_IT+0xd0>)
 801036e:	4293      	cmp	r3, r2
 8010370:	d022      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801037a:	d01d      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	4a22      	ldr	r2, [pc, #136]	; (801040c <HAL_TIM_Base_Start_IT+0xd4>)
 8010382:	4293      	cmp	r3, r2
 8010384:	d018      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	4a21      	ldr	r2, [pc, #132]	; (8010410 <HAL_TIM_Base_Start_IT+0xd8>)
 801038c:	4293      	cmp	r3, r2
 801038e:	d013      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4a1f      	ldr	r2, [pc, #124]	; (8010414 <HAL_TIM_Base_Start_IT+0xdc>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d00e      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	4a1e      	ldr	r2, [pc, #120]	; (8010418 <HAL_TIM_Base_Start_IT+0xe0>)
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d009      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	4a1c      	ldr	r2, [pc, #112]	; (801041c <HAL_TIM_Base_Start_IT+0xe4>)
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d004      	beq.n	80103b8 <HAL_TIM_Base_Start_IT+0x80>
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4a1b      	ldr	r2, [pc, #108]	; (8010420 <HAL_TIM_Base_Start_IT+0xe8>)
 80103b4:	4293      	cmp	r3, r2
 80103b6:	d115      	bne.n	80103e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	689a      	ldr	r2, [r3, #8]
 80103be:	4b19      	ldr	r3, [pc, #100]	; (8010424 <HAL_TIM_Base_Start_IT+0xec>)
 80103c0:	4013      	ands	r3, r2
 80103c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	2b06      	cmp	r3, #6
 80103c8:	d015      	beq.n	80103f6 <HAL_TIM_Base_Start_IT+0xbe>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103d0:	d011      	beq.n	80103f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	f042 0201 	orr.w	r2, r2, #1
 80103e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103e2:	e008      	b.n	80103f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	f042 0201 	orr.w	r2, r2, #1
 80103f2:	601a      	str	r2, [r3, #0]
 80103f4:	e000      	b.n	80103f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80103f8:	2300      	movs	r3, #0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3714      	adds	r7, #20
 80103fe:	46bd      	mov	sp, r7
 8010400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop
 8010408:	40010000 	.word	0x40010000
 801040c:	40000400 	.word	0x40000400
 8010410:	40000800 	.word	0x40000800
 8010414:	40000c00 	.word	0x40000c00
 8010418:	40010400 	.word	0x40010400
 801041c:	40001800 	.word	0x40001800
 8010420:	40014000 	.word	0x40014000
 8010424:	00010007 	.word	0x00010007

08010428 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010436:	2301      	movs	r3, #1
 8010438:	e049      	b.n	80104ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d106      	bne.n	8010454 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2200      	movs	r2, #0
 801044a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801044e:	6878      	ldr	r0, [r7, #4]
 8010450:	f000 f841 	bl	80104d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2202      	movs	r2, #2
 8010458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681a      	ldr	r2, [r3, #0]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3304      	adds	r3, #4
 8010464:	4619      	mov	r1, r3
 8010466:	4610      	mov	r0, r2
 8010468:	f001 f870 	bl	801154c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2201      	movs	r2, #1
 8010470:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2201      	movs	r2, #1
 8010478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2201      	movs	r2, #1
 8010480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2201      	movs	r2, #1
 8010488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2201      	movs	r2, #1
 8010490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2201      	movs	r2, #1
 80104a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2201      	movs	r2, #1
 80104a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2201      	movs	r2, #1
 80104b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2201      	movs	r2, #1
 80104c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2201      	movs	r2, #1
 80104c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3708      	adds	r7, #8
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80104d6:	b480      	push	{r7}
 80104d8:	b083      	sub	sp, #12
 80104da:	af00      	add	r7, sp, #0
 80104dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80104de:	bf00      	nop
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e8:	4770      	bx	lr
	...

080104ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d109      	bne.n	8010510 <HAL_TIM_PWM_Start+0x24>
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b01      	cmp	r3, #1
 8010506:	bf14      	ite	ne
 8010508:	2301      	movne	r3, #1
 801050a:	2300      	moveq	r3, #0
 801050c:	b2db      	uxtb	r3, r3
 801050e:	e03c      	b.n	801058a <HAL_TIM_PWM_Start+0x9e>
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	2b04      	cmp	r3, #4
 8010514:	d109      	bne.n	801052a <HAL_TIM_PWM_Start+0x3e>
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801051c:	b2db      	uxtb	r3, r3
 801051e:	2b01      	cmp	r3, #1
 8010520:	bf14      	ite	ne
 8010522:	2301      	movne	r3, #1
 8010524:	2300      	moveq	r3, #0
 8010526:	b2db      	uxtb	r3, r3
 8010528:	e02f      	b.n	801058a <HAL_TIM_PWM_Start+0x9e>
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	2b08      	cmp	r3, #8
 801052e:	d109      	bne.n	8010544 <HAL_TIM_PWM_Start+0x58>
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010536:	b2db      	uxtb	r3, r3
 8010538:	2b01      	cmp	r3, #1
 801053a:	bf14      	ite	ne
 801053c:	2301      	movne	r3, #1
 801053e:	2300      	moveq	r3, #0
 8010540:	b2db      	uxtb	r3, r3
 8010542:	e022      	b.n	801058a <HAL_TIM_PWM_Start+0x9e>
 8010544:	683b      	ldr	r3, [r7, #0]
 8010546:	2b0c      	cmp	r3, #12
 8010548:	d109      	bne.n	801055e <HAL_TIM_PWM_Start+0x72>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010550:	b2db      	uxtb	r3, r3
 8010552:	2b01      	cmp	r3, #1
 8010554:	bf14      	ite	ne
 8010556:	2301      	movne	r3, #1
 8010558:	2300      	moveq	r3, #0
 801055a:	b2db      	uxtb	r3, r3
 801055c:	e015      	b.n	801058a <HAL_TIM_PWM_Start+0x9e>
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b10      	cmp	r3, #16
 8010562:	d109      	bne.n	8010578 <HAL_TIM_PWM_Start+0x8c>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801056a:	b2db      	uxtb	r3, r3
 801056c:	2b01      	cmp	r3, #1
 801056e:	bf14      	ite	ne
 8010570:	2301      	movne	r3, #1
 8010572:	2300      	moveq	r3, #0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	e008      	b.n	801058a <HAL_TIM_PWM_Start+0x9e>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b01      	cmp	r3, #1
 8010582:	bf14      	ite	ne
 8010584:	2301      	movne	r3, #1
 8010586:	2300      	moveq	r3, #0
 8010588:	b2db      	uxtb	r3, r3
 801058a:	2b00      	cmp	r3, #0
 801058c:	d001      	beq.n	8010592 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801058e:	2301      	movs	r3, #1
 8010590:	e0a1      	b.n	80106d6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d104      	bne.n	80105a2 <HAL_TIM_PWM_Start+0xb6>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2202      	movs	r2, #2
 801059c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105a0:	e023      	b.n	80105ea <HAL_TIM_PWM_Start+0xfe>
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	2b04      	cmp	r3, #4
 80105a6:	d104      	bne.n	80105b2 <HAL_TIM_PWM_Start+0xc6>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2202      	movs	r2, #2
 80105ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105b0:	e01b      	b.n	80105ea <HAL_TIM_PWM_Start+0xfe>
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	2b08      	cmp	r3, #8
 80105b6:	d104      	bne.n	80105c2 <HAL_TIM_PWM_Start+0xd6>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2202      	movs	r2, #2
 80105bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105c0:	e013      	b.n	80105ea <HAL_TIM_PWM_Start+0xfe>
 80105c2:	683b      	ldr	r3, [r7, #0]
 80105c4:	2b0c      	cmp	r3, #12
 80105c6:	d104      	bne.n	80105d2 <HAL_TIM_PWM_Start+0xe6>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2202      	movs	r2, #2
 80105cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105d0:	e00b      	b.n	80105ea <HAL_TIM_PWM_Start+0xfe>
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	2b10      	cmp	r3, #16
 80105d6:	d104      	bne.n	80105e2 <HAL_TIM_PWM_Start+0xf6>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2202      	movs	r2, #2
 80105dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105e0:	e003      	b.n	80105ea <HAL_TIM_PWM_Start+0xfe>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2202      	movs	r2, #2
 80105e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2201      	movs	r2, #1
 80105f0:	6839      	ldr	r1, [r7, #0]
 80105f2:	4618      	mov	r0, r3
 80105f4:	f001 fdcc 	bl	8012190 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	4a38      	ldr	r2, [pc, #224]	; (80106e0 <HAL_TIM_PWM_Start+0x1f4>)
 80105fe:	4293      	cmp	r3, r2
 8010600:	d013      	beq.n	801062a <HAL_TIM_PWM_Start+0x13e>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	4a37      	ldr	r2, [pc, #220]	; (80106e4 <HAL_TIM_PWM_Start+0x1f8>)
 8010608:	4293      	cmp	r3, r2
 801060a:	d00e      	beq.n	801062a <HAL_TIM_PWM_Start+0x13e>
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	4a35      	ldr	r2, [pc, #212]	; (80106e8 <HAL_TIM_PWM_Start+0x1fc>)
 8010612:	4293      	cmp	r3, r2
 8010614:	d009      	beq.n	801062a <HAL_TIM_PWM_Start+0x13e>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4a34      	ldr	r2, [pc, #208]	; (80106ec <HAL_TIM_PWM_Start+0x200>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d004      	beq.n	801062a <HAL_TIM_PWM_Start+0x13e>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4a32      	ldr	r2, [pc, #200]	; (80106f0 <HAL_TIM_PWM_Start+0x204>)
 8010626:	4293      	cmp	r3, r2
 8010628:	d101      	bne.n	801062e <HAL_TIM_PWM_Start+0x142>
 801062a:	2301      	movs	r3, #1
 801062c:	e000      	b.n	8010630 <HAL_TIM_PWM_Start+0x144>
 801062e:	2300      	movs	r3, #0
 8010630:	2b00      	cmp	r3, #0
 8010632:	d007      	beq.n	8010644 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010642:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a25      	ldr	r2, [pc, #148]	; (80106e0 <HAL_TIM_PWM_Start+0x1f4>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d022      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010656:	d01d      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a25      	ldr	r2, [pc, #148]	; (80106f4 <HAL_TIM_PWM_Start+0x208>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d018      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a24      	ldr	r2, [pc, #144]	; (80106f8 <HAL_TIM_PWM_Start+0x20c>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d013      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a22      	ldr	r2, [pc, #136]	; (80106fc <HAL_TIM_PWM_Start+0x210>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d00e      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a1a      	ldr	r2, [pc, #104]	; (80106e4 <HAL_TIM_PWM_Start+0x1f8>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d009      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a1e      	ldr	r2, [pc, #120]	; (8010700 <HAL_TIM_PWM_Start+0x214>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d004      	beq.n	8010694 <HAL_TIM_PWM_Start+0x1a8>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a16      	ldr	r2, [pc, #88]	; (80106e8 <HAL_TIM_PWM_Start+0x1fc>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d115      	bne.n	80106c0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	689a      	ldr	r2, [r3, #8]
 801069a:	4b1a      	ldr	r3, [pc, #104]	; (8010704 <HAL_TIM_PWM_Start+0x218>)
 801069c:	4013      	ands	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2b06      	cmp	r3, #6
 80106a4:	d015      	beq.n	80106d2 <HAL_TIM_PWM_Start+0x1e6>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106ac:	d011      	beq.n	80106d2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f042 0201 	orr.w	r2, r2, #1
 80106bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106be:	e008      	b.n	80106d2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f042 0201 	orr.w	r2, r2, #1
 80106ce:	601a      	str	r2, [r3, #0]
 80106d0:	e000      	b.n	80106d4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3710      	adds	r7, #16
 80106da:	46bd      	mov	sp, r7
 80106dc:	bd80      	pop	{r7, pc}
 80106de:	bf00      	nop
 80106e0:	40010000 	.word	0x40010000
 80106e4:	40010400 	.word	0x40010400
 80106e8:	40014000 	.word	0x40014000
 80106ec:	40014400 	.word	0x40014400
 80106f0:	40014800 	.word	0x40014800
 80106f4:	40000400 	.word	0x40000400
 80106f8:	40000800 	.word	0x40000800
 80106fc:	40000c00 	.word	0x40000c00
 8010700:	40001800 	.word	0x40001800
 8010704:	00010007 	.word	0x00010007

08010708 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d101      	bne.n	801071a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010716:	2301      	movs	r3, #1
 8010718:	e049      	b.n	80107ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010720:	b2db      	uxtb	r3, r3
 8010722:	2b00      	cmp	r3, #0
 8010724:	d106      	bne.n	8010734 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f000 f841 	bl	80107b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	2202      	movs	r2, #2
 8010738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681a      	ldr	r2, [r3, #0]
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3304      	adds	r3, #4
 8010744:	4619      	mov	r1, r3
 8010746:	4610      	mov	r0, r2
 8010748:	f000 ff00 	bl	801154c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2201      	movs	r2, #1
 8010758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2201      	movs	r2, #1
 8010760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2201      	movs	r2, #1
 8010768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2201      	movs	r2, #1
 8010770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2201      	movs	r2, #1
 8010778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2201      	movs	r2, #1
 8010788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2201      	movs	r2, #1
 8010798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2201      	movs	r2, #1
 80107a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3708      	adds	r7, #8
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}

080107b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80107b6:	b480      	push	{r7}
 80107b8:	b083      	sub	sp, #12
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80107be:	bf00      	nop
 80107c0:	370c      	adds	r7, #12
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr
	...

080107cc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d104      	bne.n	80107e6 <HAL_TIM_IC_Start+0x1a>
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107e2:	b2db      	uxtb	r3, r3
 80107e4:	e023      	b.n	801082e <HAL_TIM_IC_Start+0x62>
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	2b04      	cmp	r3, #4
 80107ea:	d104      	bne.n	80107f6 <HAL_TIM_IC_Start+0x2a>
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107f2:	b2db      	uxtb	r3, r3
 80107f4:	e01b      	b.n	801082e <HAL_TIM_IC_Start+0x62>
 80107f6:	683b      	ldr	r3, [r7, #0]
 80107f8:	2b08      	cmp	r3, #8
 80107fa:	d104      	bne.n	8010806 <HAL_TIM_IC_Start+0x3a>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010802:	b2db      	uxtb	r3, r3
 8010804:	e013      	b.n	801082e <HAL_TIM_IC_Start+0x62>
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2b0c      	cmp	r3, #12
 801080a:	d104      	bne.n	8010816 <HAL_TIM_IC_Start+0x4a>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010812:	b2db      	uxtb	r3, r3
 8010814:	e00b      	b.n	801082e <HAL_TIM_IC_Start+0x62>
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	2b10      	cmp	r3, #16
 801081a:	d104      	bne.n	8010826 <HAL_TIM_IC_Start+0x5a>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010822:	b2db      	uxtb	r3, r3
 8010824:	e003      	b.n	801082e <HAL_TIM_IC_Start+0x62>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801082c:	b2db      	uxtb	r3, r3
 801082e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010830:	683b      	ldr	r3, [r7, #0]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d104      	bne.n	8010840 <HAL_TIM_IC_Start+0x74>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801083c:	b2db      	uxtb	r3, r3
 801083e:	e013      	b.n	8010868 <HAL_TIM_IC_Start+0x9c>
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	2b04      	cmp	r3, #4
 8010844:	d104      	bne.n	8010850 <HAL_TIM_IC_Start+0x84>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801084c:	b2db      	uxtb	r3, r3
 801084e:	e00b      	b.n	8010868 <HAL_TIM_IC_Start+0x9c>
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	2b08      	cmp	r3, #8
 8010854:	d104      	bne.n	8010860 <HAL_TIM_IC_Start+0x94>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801085c:	b2db      	uxtb	r3, r3
 801085e:	e003      	b.n	8010868 <HAL_TIM_IC_Start+0x9c>
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010866:	b2db      	uxtb	r3, r3
 8010868:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801086a:	7bfb      	ldrb	r3, [r7, #15]
 801086c:	2b01      	cmp	r3, #1
 801086e:	d102      	bne.n	8010876 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010870:	7bbb      	ldrb	r3, [r7, #14]
 8010872:	2b01      	cmp	r3, #1
 8010874:	d001      	beq.n	801087a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8010876:	2301      	movs	r3, #1
 8010878:	e097      	b.n	80109aa <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d104      	bne.n	801088a <HAL_TIM_IC_Start+0xbe>
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2202      	movs	r2, #2
 8010884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010888:	e023      	b.n	80108d2 <HAL_TIM_IC_Start+0x106>
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b04      	cmp	r3, #4
 801088e:	d104      	bne.n	801089a <HAL_TIM_IC_Start+0xce>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2202      	movs	r2, #2
 8010894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010898:	e01b      	b.n	80108d2 <HAL_TIM_IC_Start+0x106>
 801089a:	683b      	ldr	r3, [r7, #0]
 801089c:	2b08      	cmp	r3, #8
 801089e:	d104      	bne.n	80108aa <HAL_TIM_IC_Start+0xde>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2202      	movs	r2, #2
 80108a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80108a8:	e013      	b.n	80108d2 <HAL_TIM_IC_Start+0x106>
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	2b0c      	cmp	r3, #12
 80108ae:	d104      	bne.n	80108ba <HAL_TIM_IC_Start+0xee>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2202      	movs	r2, #2
 80108b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80108b8:	e00b      	b.n	80108d2 <HAL_TIM_IC_Start+0x106>
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	2b10      	cmp	r3, #16
 80108be:	d104      	bne.n	80108ca <HAL_TIM_IC_Start+0xfe>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2202      	movs	r2, #2
 80108c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108c8:	e003      	b.n	80108d2 <HAL_TIM_IC_Start+0x106>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2202      	movs	r2, #2
 80108ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d104      	bne.n	80108e2 <HAL_TIM_IC_Start+0x116>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2202      	movs	r2, #2
 80108dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80108e0:	e013      	b.n	801090a <HAL_TIM_IC_Start+0x13e>
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	2b04      	cmp	r3, #4
 80108e6:	d104      	bne.n	80108f2 <HAL_TIM_IC_Start+0x126>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2202      	movs	r2, #2
 80108ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80108f0:	e00b      	b.n	801090a <HAL_TIM_IC_Start+0x13e>
 80108f2:	683b      	ldr	r3, [r7, #0]
 80108f4:	2b08      	cmp	r3, #8
 80108f6:	d104      	bne.n	8010902 <HAL_TIM_IC_Start+0x136>
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2202      	movs	r2, #2
 80108fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010900:	e003      	b.n	801090a <HAL_TIM_IC_Start+0x13e>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	2202      	movs	r2, #2
 8010906:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	2201      	movs	r2, #1
 8010910:	6839      	ldr	r1, [r7, #0]
 8010912:	4618      	mov	r0, r3
 8010914:	f001 fc3c 	bl	8012190 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4a25      	ldr	r2, [pc, #148]	; (80109b4 <HAL_TIM_IC_Start+0x1e8>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d022      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801092a:	d01d      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4a21      	ldr	r2, [pc, #132]	; (80109b8 <HAL_TIM_IC_Start+0x1ec>)
 8010932:	4293      	cmp	r3, r2
 8010934:	d018      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	4a20      	ldr	r2, [pc, #128]	; (80109bc <HAL_TIM_IC_Start+0x1f0>)
 801093c:	4293      	cmp	r3, r2
 801093e:	d013      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	4a1e      	ldr	r2, [pc, #120]	; (80109c0 <HAL_TIM_IC_Start+0x1f4>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d00e      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a1d      	ldr	r2, [pc, #116]	; (80109c4 <HAL_TIM_IC_Start+0x1f8>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d009      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a1b      	ldr	r2, [pc, #108]	; (80109c8 <HAL_TIM_IC_Start+0x1fc>)
 801095a:	4293      	cmp	r3, r2
 801095c:	d004      	beq.n	8010968 <HAL_TIM_IC_Start+0x19c>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	4a1a      	ldr	r2, [pc, #104]	; (80109cc <HAL_TIM_IC_Start+0x200>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d115      	bne.n	8010994 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	689a      	ldr	r2, [r3, #8]
 801096e:	4b18      	ldr	r3, [pc, #96]	; (80109d0 <HAL_TIM_IC_Start+0x204>)
 8010970:	4013      	ands	r3, r2
 8010972:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	2b06      	cmp	r3, #6
 8010978:	d015      	beq.n	80109a6 <HAL_TIM_IC_Start+0x1da>
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010980:	d011      	beq.n	80109a6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	681a      	ldr	r2, [r3, #0]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	f042 0201 	orr.w	r2, r2, #1
 8010990:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010992:	e008      	b.n	80109a6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	681a      	ldr	r2, [r3, #0]
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f042 0201 	orr.w	r2, r2, #1
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	e000      	b.n	80109a8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	40010000 	.word	0x40010000
 80109b8:	40000400 	.word	0x40000400
 80109bc:	40000800 	.word	0x40000800
 80109c0:	40000c00 	.word	0x40000c00
 80109c4:	40010400 	.word	0x40010400
 80109c8:	40001800 	.word	0x40001800
 80109cc:	40014000 	.word	0x40014000
 80109d0:	00010007 	.word	0x00010007

080109d4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b084      	sub	sp, #16
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
 80109dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80109de:	2300      	movs	r3, #0
 80109e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d104      	bne.n	80109f2 <HAL_TIM_IC_Start_IT+0x1e>
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	e023      	b.n	8010a3a <HAL_TIM_IC_Start_IT+0x66>
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2b04      	cmp	r3, #4
 80109f6:	d104      	bne.n	8010a02 <HAL_TIM_IC_Start_IT+0x2e>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	e01b      	b.n	8010a3a <HAL_TIM_IC_Start_IT+0x66>
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	2b08      	cmp	r3, #8
 8010a06:	d104      	bne.n	8010a12 <HAL_TIM_IC_Start_IT+0x3e>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010a0e:	b2db      	uxtb	r3, r3
 8010a10:	e013      	b.n	8010a3a <HAL_TIM_IC_Start_IT+0x66>
 8010a12:	683b      	ldr	r3, [r7, #0]
 8010a14:	2b0c      	cmp	r3, #12
 8010a16:	d104      	bne.n	8010a22 <HAL_TIM_IC_Start_IT+0x4e>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	e00b      	b.n	8010a3a <HAL_TIM_IC_Start_IT+0x66>
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	2b10      	cmp	r3, #16
 8010a26:	d104      	bne.n	8010a32 <HAL_TIM_IC_Start_IT+0x5e>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	e003      	b.n	8010a3a <HAL_TIM_IC_Start_IT+0x66>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d104      	bne.n	8010a4c <HAL_TIM_IC_Start_IT+0x78>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	e013      	b.n	8010a74 <HAL_TIM_IC_Start_IT+0xa0>
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	2b04      	cmp	r3, #4
 8010a50:	d104      	bne.n	8010a5c <HAL_TIM_IC_Start_IT+0x88>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a58:	b2db      	uxtb	r3, r3
 8010a5a:	e00b      	b.n	8010a74 <HAL_TIM_IC_Start_IT+0xa0>
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	2b08      	cmp	r3, #8
 8010a60:	d104      	bne.n	8010a6c <HAL_TIM_IC_Start_IT+0x98>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010a68:	b2db      	uxtb	r3, r3
 8010a6a:	e003      	b.n	8010a74 <HAL_TIM_IC_Start_IT+0xa0>
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010a72:	b2db      	uxtb	r3, r3
 8010a74:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010a76:	7bbb      	ldrb	r3, [r7, #14]
 8010a78:	2b01      	cmp	r3, #1
 8010a7a:	d102      	bne.n	8010a82 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010a7c:	7b7b      	ldrb	r3, [r7, #13]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d001      	beq.n	8010a86 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8010a82:	2301      	movs	r3, #1
 8010a84:	e0e2      	b.n	8010c4c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010a86:	683b      	ldr	r3, [r7, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d104      	bne.n	8010a96 <HAL_TIM_IC_Start_IT+0xc2>
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2202      	movs	r2, #2
 8010a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010a94:	e023      	b.n	8010ade <HAL_TIM_IC_Start_IT+0x10a>
 8010a96:	683b      	ldr	r3, [r7, #0]
 8010a98:	2b04      	cmp	r3, #4
 8010a9a:	d104      	bne.n	8010aa6 <HAL_TIM_IC_Start_IT+0xd2>
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	2202      	movs	r2, #2
 8010aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010aa4:	e01b      	b.n	8010ade <HAL_TIM_IC_Start_IT+0x10a>
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	2b08      	cmp	r3, #8
 8010aaa:	d104      	bne.n	8010ab6 <HAL_TIM_IC_Start_IT+0xe2>
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2202      	movs	r2, #2
 8010ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ab4:	e013      	b.n	8010ade <HAL_TIM_IC_Start_IT+0x10a>
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	2b0c      	cmp	r3, #12
 8010aba:	d104      	bne.n	8010ac6 <HAL_TIM_IC_Start_IT+0xf2>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	2202      	movs	r2, #2
 8010ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010ac4:	e00b      	b.n	8010ade <HAL_TIM_IC_Start_IT+0x10a>
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	2b10      	cmp	r3, #16
 8010aca:	d104      	bne.n	8010ad6 <HAL_TIM_IC_Start_IT+0x102>
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2202      	movs	r2, #2
 8010ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010ad4:	e003      	b.n	8010ade <HAL_TIM_IC_Start_IT+0x10a>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	2202      	movs	r2, #2
 8010ada:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d104      	bne.n	8010aee <HAL_TIM_IC_Start_IT+0x11a>
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	2202      	movs	r2, #2
 8010ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010aec:	e013      	b.n	8010b16 <HAL_TIM_IC_Start_IT+0x142>
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2b04      	cmp	r3, #4
 8010af2:	d104      	bne.n	8010afe <HAL_TIM_IC_Start_IT+0x12a>
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	2202      	movs	r2, #2
 8010af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010afc:	e00b      	b.n	8010b16 <HAL_TIM_IC_Start_IT+0x142>
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b08      	cmp	r3, #8
 8010b02:	d104      	bne.n	8010b0e <HAL_TIM_IC_Start_IT+0x13a>
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2202      	movs	r2, #2
 8010b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b0c:	e003      	b.n	8010b16 <HAL_TIM_IC_Start_IT+0x142>
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	2202      	movs	r2, #2
 8010b12:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	2b0c      	cmp	r3, #12
 8010b1a:	d841      	bhi.n	8010ba0 <HAL_TIM_IC_Start_IT+0x1cc>
 8010b1c:	a201      	add	r2, pc, #4	; (adr r2, 8010b24 <HAL_TIM_IC_Start_IT+0x150>)
 8010b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b22:	bf00      	nop
 8010b24:	08010b59 	.word	0x08010b59
 8010b28:	08010ba1 	.word	0x08010ba1
 8010b2c:	08010ba1 	.word	0x08010ba1
 8010b30:	08010ba1 	.word	0x08010ba1
 8010b34:	08010b6b 	.word	0x08010b6b
 8010b38:	08010ba1 	.word	0x08010ba1
 8010b3c:	08010ba1 	.word	0x08010ba1
 8010b40:	08010ba1 	.word	0x08010ba1
 8010b44:	08010b7d 	.word	0x08010b7d
 8010b48:	08010ba1 	.word	0x08010ba1
 8010b4c:	08010ba1 	.word	0x08010ba1
 8010b50:	08010ba1 	.word	0x08010ba1
 8010b54:	08010b8f 	.word	0x08010b8f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	68da      	ldr	r2, [r3, #12]
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f042 0202 	orr.w	r2, r2, #2
 8010b66:	60da      	str	r2, [r3, #12]
      break;
 8010b68:	e01d      	b.n	8010ba6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	68da      	ldr	r2, [r3, #12]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	f042 0204 	orr.w	r2, r2, #4
 8010b78:	60da      	str	r2, [r3, #12]
      break;
 8010b7a:	e014      	b.n	8010ba6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68da      	ldr	r2, [r3, #12]
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f042 0208 	orr.w	r2, r2, #8
 8010b8a:	60da      	str	r2, [r3, #12]
      break;
 8010b8c:	e00b      	b.n	8010ba6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	68da      	ldr	r2, [r3, #12]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	f042 0210 	orr.w	r2, r2, #16
 8010b9c:	60da      	str	r2, [r3, #12]
      break;
 8010b9e:	e002      	b.n	8010ba6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8010ba4:	bf00      	nop
  }

  if (status == HAL_OK)
 8010ba6:	7bfb      	ldrb	r3, [r7, #15]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d14e      	bne.n	8010c4a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	6839      	ldr	r1, [r7, #0]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f001 faeb 	bl	8012190 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	4a25      	ldr	r2, [pc, #148]	; (8010c54 <HAL_TIM_IC_Start_IT+0x280>)
 8010bc0:	4293      	cmp	r3, r2
 8010bc2:	d022      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010bcc:	d01d      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	4a21      	ldr	r2, [pc, #132]	; (8010c58 <HAL_TIM_IC_Start_IT+0x284>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	d018      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4a1f      	ldr	r2, [pc, #124]	; (8010c5c <HAL_TIM_IC_Start_IT+0x288>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d013      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	4a1e      	ldr	r2, [pc, #120]	; (8010c60 <HAL_TIM_IC_Start_IT+0x28c>)
 8010be8:	4293      	cmp	r3, r2
 8010bea:	d00e      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	4a1c      	ldr	r2, [pc, #112]	; (8010c64 <HAL_TIM_IC_Start_IT+0x290>)
 8010bf2:	4293      	cmp	r3, r2
 8010bf4:	d009      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	4a1b      	ldr	r2, [pc, #108]	; (8010c68 <HAL_TIM_IC_Start_IT+0x294>)
 8010bfc:	4293      	cmp	r3, r2
 8010bfe:	d004      	beq.n	8010c0a <HAL_TIM_IC_Start_IT+0x236>
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	4a19      	ldr	r2, [pc, #100]	; (8010c6c <HAL_TIM_IC_Start_IT+0x298>)
 8010c06:	4293      	cmp	r3, r2
 8010c08:	d115      	bne.n	8010c36 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689a      	ldr	r2, [r3, #8]
 8010c10:	4b17      	ldr	r3, [pc, #92]	; (8010c70 <HAL_TIM_IC_Start_IT+0x29c>)
 8010c12:	4013      	ands	r3, r2
 8010c14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	2b06      	cmp	r3, #6
 8010c1a:	d015      	beq.n	8010c48 <HAL_TIM_IC_Start_IT+0x274>
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c22:	d011      	beq.n	8010c48 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	f042 0201 	orr.w	r2, r2, #1
 8010c32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c34:	e008      	b.n	8010c48 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	f042 0201 	orr.w	r2, r2, #1
 8010c44:	601a      	str	r2, [r3, #0]
 8010c46:	e000      	b.n	8010c4a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c48:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}
 8010c54:	40010000 	.word	0x40010000
 8010c58:	40000400 	.word	0x40000400
 8010c5c:	40000800 	.word	0x40000800
 8010c60:	40000c00 	.word	0x40000c00
 8010c64:	40010400 	.word	0x40010400
 8010c68:	40001800 	.word	0x40001800
 8010c6c:	40014000 	.word	0x40014000
 8010c70:	00010007 	.word	0x00010007

08010c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	f003 0302 	and.w	r3, r3, #2
 8010c86:	2b02      	cmp	r3, #2
 8010c88:	d122      	bne.n	8010cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	68db      	ldr	r3, [r3, #12]
 8010c90:	f003 0302 	and.w	r3, r3, #2
 8010c94:	2b02      	cmp	r3, #2
 8010c96:	d11b      	bne.n	8010cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f06f 0202 	mvn.w	r2, #2
 8010ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2201      	movs	r2, #1
 8010ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	f003 0303 	and.w	r3, r3, #3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d003      	beq.n	8010cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f7f3 fb2a 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8010cbc:	e005      	b.n	8010cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fc26 	bl	8011510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 fc2d 	bl	8011524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	2200      	movs	r2, #0
 8010cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	f003 0304 	and.w	r3, r3, #4
 8010cda:	2b04      	cmp	r3, #4
 8010cdc:	d122      	bne.n	8010d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	f003 0304 	and.w	r3, r3, #4
 8010ce8:	2b04      	cmp	r3, #4
 8010cea:	d11b      	bne.n	8010d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f06f 0204 	mvn.w	r2, #4
 8010cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2202      	movs	r2, #2
 8010cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d003      	beq.n	8010d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f7f3 fb00 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8010d10:	e005      	b.n	8010d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f000 fbfc 	bl	8011510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	f000 fc03 	bl	8011524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2200      	movs	r2, #0
 8010d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	691b      	ldr	r3, [r3, #16]
 8010d2a:	f003 0308 	and.w	r3, r3, #8
 8010d2e:	2b08      	cmp	r3, #8
 8010d30:	d122      	bne.n	8010d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	f003 0308 	and.w	r3, r3, #8
 8010d3c:	2b08      	cmp	r3, #8
 8010d3e:	d11b      	bne.n	8010d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f06f 0208 	mvn.w	r2, #8
 8010d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2204      	movs	r2, #4
 8010d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	69db      	ldr	r3, [r3, #28]
 8010d56:	f003 0303 	and.w	r3, r3, #3
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d003      	beq.n	8010d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010d5e:	6878      	ldr	r0, [r7, #4]
 8010d60:	f7f3 fad6 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8010d64:	e005      	b.n	8010d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 fbd2 	bl	8011510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f000 fbd9 	bl	8011524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	2200      	movs	r2, #0
 8010d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	691b      	ldr	r3, [r3, #16]
 8010d7e:	f003 0310 	and.w	r3, r3, #16
 8010d82:	2b10      	cmp	r3, #16
 8010d84:	d122      	bne.n	8010dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	f003 0310 	and.w	r3, r3, #16
 8010d90:	2b10      	cmp	r3, #16
 8010d92:	d11b      	bne.n	8010dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	f06f 0210 	mvn.w	r2, #16
 8010d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2208      	movs	r2, #8
 8010da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	69db      	ldr	r3, [r3, #28]
 8010daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d003      	beq.n	8010dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f7f3 faac 	bl	8004310 <HAL_TIM_IC_CaptureCallback>
 8010db8:	e005      	b.n	8010dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fba8 	bl	8011510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f000 fbaf 	bl	8011524 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	691b      	ldr	r3, [r3, #16]
 8010dd2:	f003 0301 	and.w	r3, r3, #1
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d10e      	bne.n	8010df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	68db      	ldr	r3, [r3, #12]
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d107      	bne.n	8010df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f06f 0201 	mvn.w	r2, #1
 8010df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f7f3 fb44 	bl	8004480 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e02:	2b80      	cmp	r3, #128	; 0x80
 8010e04:	d10e      	bne.n	8010e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e10:	2b80      	cmp	r3, #128	; 0x80
 8010e12:	d107      	bne.n	8010e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f001 fa74 	bl	801230c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	691b      	ldr	r3, [r3, #16]
 8010e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010e32:	d10e      	bne.n	8010e52 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68db      	ldr	r3, [r3, #12]
 8010e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010e3e:	2b80      	cmp	r3, #128	; 0x80
 8010e40:	d107      	bne.n	8010e52 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f001 fa67 	bl	8012320 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	691b      	ldr	r3, [r3, #16]
 8010e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5c:	2b40      	cmp	r3, #64	; 0x40
 8010e5e:	d10e      	bne.n	8010e7e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68db      	ldr	r3, [r3, #12]
 8010e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e6a:	2b40      	cmp	r3, #64	; 0x40
 8010e6c:	d107      	bne.n	8010e7e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 fb5d 	bl	8011538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	691b      	ldr	r3, [r3, #16]
 8010e84:	f003 0320 	and.w	r3, r3, #32
 8010e88:	2b20      	cmp	r3, #32
 8010e8a:	d10e      	bne.n	8010eaa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	68db      	ldr	r3, [r3, #12]
 8010e92:	f003 0320 	and.w	r3, r3, #32
 8010e96:	2b20      	cmp	r3, #32
 8010e98:	d107      	bne.n	8010eaa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	f06f 0220 	mvn.w	r2, #32
 8010ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f001 fa27 	bl	80122f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010eaa:	bf00      	nop
 8010eac:	3708      	adds	r7, #8
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}

08010eb2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010eb2:	b580      	push	{r7, lr}
 8010eb4:	b086      	sub	sp, #24
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	60f8      	str	r0, [r7, #12]
 8010eba:	60b9      	str	r1, [r7, #8]
 8010ebc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ebe:	2300      	movs	r3, #0
 8010ec0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d101      	bne.n	8010ed0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8010ecc:	2302      	movs	r3, #2
 8010ece:	e088      	b.n	8010fe2 <HAL_TIM_IC_ConfigChannel+0x130>
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	2201      	movs	r2, #1
 8010ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d11b      	bne.n	8010f16 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010ee6:	68bb      	ldr	r3, [r7, #8]
 8010ee8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010eee:	f000 ff87 	bl	8011e00 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	699a      	ldr	r2, [r3, #24]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	f022 020c 	bic.w	r2, r2, #12
 8010f00:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	6999      	ldr	r1, [r3, #24]
 8010f08:	68bb      	ldr	r3, [r7, #8]
 8010f0a:	689a      	ldr	r2, [r3, #8]
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	430a      	orrs	r2, r1
 8010f12:	619a      	str	r2, [r3, #24]
 8010f14:	e060      	b.n	8010fd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b04      	cmp	r3, #4
 8010f1a:	d11c      	bne.n	8010f56 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010f24:	68bb      	ldr	r3, [r7, #8]
 8010f26:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8010f2c:	f001 f80b 	bl	8011f46 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	699a      	ldr	r2, [r3, #24]
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010f3e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	6999      	ldr	r1, [r3, #24]
 8010f46:	68bb      	ldr	r3, [r7, #8]
 8010f48:	689b      	ldr	r3, [r3, #8]
 8010f4a:	021a      	lsls	r2, r3, #8
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	430a      	orrs	r2, r1
 8010f52:	619a      	str	r2, [r3, #24]
 8010f54:	e040      	b.n	8010fd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2b08      	cmp	r3, #8
 8010f5a:	d11b      	bne.n	8010f94 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8010f6c:	f001 f858 	bl	8012020 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	69da      	ldr	r2, [r3, #28]
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	f022 020c 	bic.w	r2, r2, #12
 8010f7e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	69d9      	ldr	r1, [r3, #28]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	689a      	ldr	r2, [r3, #8]
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	430a      	orrs	r2, r1
 8010f90:	61da      	str	r2, [r3, #28]
 8010f92:	e021      	b.n	8010fd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2b0c      	cmp	r3, #12
 8010f98:	d11c      	bne.n	8010fd4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8010faa:	f001 f875 	bl	8012098 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	69da      	ldr	r2, [r3, #28]
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010fbc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	69d9      	ldr	r1, [r3, #28]
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	021a      	lsls	r2, r3, #8
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	430a      	orrs	r2, r1
 8010fd0:	61da      	str	r2, [r3, #28]
 8010fd2:	e001      	b.n	8010fd8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	3718      	adds	r7, #24
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bd80      	pop	{r7, pc}
	...

08010fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b086      	sub	sp, #24
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60f8      	str	r0, [r7, #12]
 8010ff4:	60b9      	str	r1, [r7, #8]
 8010ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011002:	2b01      	cmp	r3, #1
 8011004:	d101      	bne.n	801100a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8011006:	2302      	movs	r3, #2
 8011008:	e0ff      	b.n	801120a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	2201      	movs	r2, #1
 801100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	2b14      	cmp	r3, #20
 8011016:	f200 80f0 	bhi.w	80111fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 801101a:	a201      	add	r2, pc, #4	; (adr r2, 8011020 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801101c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011020:	08011075 	.word	0x08011075
 8011024:	080111fb 	.word	0x080111fb
 8011028:	080111fb 	.word	0x080111fb
 801102c:	080111fb 	.word	0x080111fb
 8011030:	080110b5 	.word	0x080110b5
 8011034:	080111fb 	.word	0x080111fb
 8011038:	080111fb 	.word	0x080111fb
 801103c:	080111fb 	.word	0x080111fb
 8011040:	080110f7 	.word	0x080110f7
 8011044:	080111fb 	.word	0x080111fb
 8011048:	080111fb 	.word	0x080111fb
 801104c:	080111fb 	.word	0x080111fb
 8011050:	08011137 	.word	0x08011137
 8011054:	080111fb 	.word	0x080111fb
 8011058:	080111fb 	.word	0x080111fb
 801105c:	080111fb 	.word	0x080111fb
 8011060:	08011179 	.word	0x08011179
 8011064:	080111fb 	.word	0x080111fb
 8011068:	080111fb 	.word	0x080111fb
 801106c:	080111fb 	.word	0x080111fb
 8011070:	080111b9 	.word	0x080111b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	68b9      	ldr	r1, [r7, #8]
 801107a:	4618      	mov	r0, r3
 801107c:	f000 fb00 	bl	8011680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	699a      	ldr	r2, [r3, #24]
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	f042 0208 	orr.w	r2, r2, #8
 801108e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	699a      	ldr	r2, [r3, #24]
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	f022 0204 	bic.w	r2, r2, #4
 801109e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	6999      	ldr	r1, [r3, #24]
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	691a      	ldr	r2, [r3, #16]
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	430a      	orrs	r2, r1
 80110b0:	619a      	str	r2, [r3, #24]
      break;
 80110b2:	e0a5      	b.n	8011200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	68b9      	ldr	r1, [r7, #8]
 80110ba:	4618      	mov	r0, r3
 80110bc:	f000 fb70 	bl	80117a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	699a      	ldr	r2, [r3, #24]
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80110ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	699a      	ldr	r2, [r3, #24]
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80110de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	6999      	ldr	r1, [r3, #24]
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	691b      	ldr	r3, [r3, #16]
 80110ea:	021a      	lsls	r2, r3, #8
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	430a      	orrs	r2, r1
 80110f2:	619a      	str	r2, [r3, #24]
      break;
 80110f4:	e084      	b.n	8011200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	68b9      	ldr	r1, [r7, #8]
 80110fc:	4618      	mov	r0, r3
 80110fe:	f000 fbd9 	bl	80118b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	69da      	ldr	r2, [r3, #28]
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f042 0208 	orr.w	r2, r2, #8
 8011110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	69da      	ldr	r2, [r3, #28]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	f022 0204 	bic.w	r2, r2, #4
 8011120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	69d9      	ldr	r1, [r3, #28]
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	691a      	ldr	r2, [r3, #16]
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	430a      	orrs	r2, r1
 8011132:	61da      	str	r2, [r3, #28]
      break;
 8011134:	e064      	b.n	8011200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	68b9      	ldr	r1, [r7, #8]
 801113c:	4618      	mov	r0, r3
 801113e:	f000 fc41 	bl	80119c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	69da      	ldr	r2, [r3, #28]
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	69da      	ldr	r2, [r3, #28]
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	69d9      	ldr	r1, [r3, #28]
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	691b      	ldr	r3, [r3, #16]
 801116c:	021a      	lsls	r2, r3, #8
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	430a      	orrs	r2, r1
 8011174:	61da      	str	r2, [r3, #28]
      break;
 8011176:	e043      	b.n	8011200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	68b9      	ldr	r1, [r7, #8]
 801117e:	4618      	mov	r0, r3
 8011180:	f000 fc8a 	bl	8011a98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	f042 0208 	orr.w	r2, r2, #8
 8011192:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	f022 0204 	bic.w	r2, r2, #4
 80111a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	691a      	ldr	r2, [r3, #16]
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	430a      	orrs	r2, r1
 80111b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80111b6:	e023      	b.n	8011200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	68b9      	ldr	r1, [r7, #8]
 80111be:	4618      	mov	r0, r3
 80111c0:	f000 fcce 	bl	8011b60 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80111d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80111e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	021a      	lsls	r2, r3, #8
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	430a      	orrs	r2, r1
 80111f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80111f8:	e002      	b.n	8011200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80111fa:	2301      	movs	r3, #1
 80111fc:	75fb      	strb	r3, [r7, #23]
      break;
 80111fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	2200      	movs	r2, #0
 8011204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011208:	7dfb      	ldrb	r3, [r7, #23]
}
 801120a:	4618      	mov	r0, r3
 801120c:	3718      	adds	r7, #24
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop

08011214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801121e:	2300      	movs	r3, #0
 8011220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011228:	2b01      	cmp	r3, #1
 801122a:	d101      	bne.n	8011230 <HAL_TIM_ConfigClockSource+0x1c>
 801122c:	2302      	movs	r3, #2
 801122e:	e0dc      	b.n	80113ea <HAL_TIM_ConfigClockSource+0x1d6>
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2201      	movs	r2, #1
 8011234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2202      	movs	r2, #2
 801123c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	689b      	ldr	r3, [r3, #8]
 8011246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011248:	68ba      	ldr	r2, [r7, #8]
 801124a:	4b6a      	ldr	r3, [pc, #424]	; (80113f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801124c:	4013      	ands	r3, r2
 801124e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	68ba      	ldr	r2, [r7, #8]
 801125e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	4a64      	ldr	r2, [pc, #400]	; (80113f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011266:	4293      	cmp	r3, r2
 8011268:	f000 80a9 	beq.w	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 801126c:	4a62      	ldr	r2, [pc, #392]	; (80113f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801126e:	4293      	cmp	r3, r2
 8011270:	f200 80ae 	bhi.w	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011274:	4a61      	ldr	r2, [pc, #388]	; (80113fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8011276:	4293      	cmp	r3, r2
 8011278:	f000 80a1 	beq.w	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 801127c:	4a5f      	ldr	r2, [pc, #380]	; (80113fc <HAL_TIM_ConfigClockSource+0x1e8>)
 801127e:	4293      	cmp	r3, r2
 8011280:	f200 80a6 	bhi.w	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011284:	4a5e      	ldr	r2, [pc, #376]	; (8011400 <HAL_TIM_ConfigClockSource+0x1ec>)
 8011286:	4293      	cmp	r3, r2
 8011288:	f000 8099 	beq.w	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 801128c:	4a5c      	ldr	r2, [pc, #368]	; (8011400 <HAL_TIM_ConfigClockSource+0x1ec>)
 801128e:	4293      	cmp	r3, r2
 8011290:	f200 809e 	bhi.w	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011298:	f000 8091 	beq.w	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 801129c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80112a0:	f200 8096 	bhi.w	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112a8:	f000 8089 	beq.w	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 80112ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112b0:	f200 808e 	bhi.w	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112b8:	d03e      	beq.n	8011338 <HAL_TIM_ConfigClockSource+0x124>
 80112ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80112be:	f200 8087 	bhi.w	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112c6:	f000 8086 	beq.w	80113d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80112ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80112ce:	d87f      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112d0:	2b70      	cmp	r3, #112	; 0x70
 80112d2:	d01a      	beq.n	801130a <HAL_TIM_ConfigClockSource+0xf6>
 80112d4:	2b70      	cmp	r3, #112	; 0x70
 80112d6:	d87b      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112d8:	2b60      	cmp	r3, #96	; 0x60
 80112da:	d050      	beq.n	801137e <HAL_TIM_ConfigClockSource+0x16a>
 80112dc:	2b60      	cmp	r3, #96	; 0x60
 80112de:	d877      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112e0:	2b50      	cmp	r3, #80	; 0x50
 80112e2:	d03c      	beq.n	801135e <HAL_TIM_ConfigClockSource+0x14a>
 80112e4:	2b50      	cmp	r3, #80	; 0x50
 80112e6:	d873      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112e8:	2b40      	cmp	r3, #64	; 0x40
 80112ea:	d058      	beq.n	801139e <HAL_TIM_ConfigClockSource+0x18a>
 80112ec:	2b40      	cmp	r3, #64	; 0x40
 80112ee:	d86f      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112f0:	2b30      	cmp	r3, #48	; 0x30
 80112f2:	d064      	beq.n	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 80112f4:	2b30      	cmp	r3, #48	; 0x30
 80112f6:	d86b      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80112f8:	2b20      	cmp	r3, #32
 80112fa:	d060      	beq.n	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 80112fc:	2b20      	cmp	r3, #32
 80112fe:	d867      	bhi.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8011300:	2b00      	cmp	r3, #0
 8011302:	d05c      	beq.n	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 8011304:	2b10      	cmp	r3, #16
 8011306:	d05a      	beq.n	80113be <HAL_TIM_ConfigClockSource+0x1aa>
 8011308:	e062      	b.n	80113d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801131a:	f000 ff19 	bl	8012150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	689b      	ldr	r3, [r3, #8]
 8011324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011326:	68bb      	ldr	r3, [r7, #8]
 8011328:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801132c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	68ba      	ldr	r2, [r7, #8]
 8011334:	609a      	str	r2, [r3, #8]
      break;
 8011336:	e04f      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011340:	683b      	ldr	r3, [r7, #0]
 8011342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011348:	f000 ff02 	bl	8012150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	689a      	ldr	r2, [r3, #8]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801135a:	609a      	str	r2, [r3, #8]
      break;
 801135c:	e03c      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011362:	683b      	ldr	r3, [r7, #0]
 8011364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801136a:	461a      	mov	r2, r3
 801136c:	f000 fdbc 	bl	8011ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	2150      	movs	r1, #80	; 0x50
 8011376:	4618      	mov	r0, r3
 8011378:	f000 fecc 	bl	8012114 <TIM_ITRx_SetConfig>
      break;
 801137c:	e02c      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8011382:	683b      	ldr	r3, [r7, #0]
 8011384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011386:	683b      	ldr	r3, [r7, #0]
 8011388:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801138a:	461a      	mov	r2, r3
 801138c:	f000 fe18 	bl	8011fc0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2160      	movs	r1, #96	; 0x60
 8011396:	4618      	mov	r0, r3
 8011398:	f000 febc 	bl	8012114 <TIM_ITRx_SetConfig>
      break;
 801139c:	e01c      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80113a2:	683b      	ldr	r3, [r7, #0]
 80113a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80113a6:	683b      	ldr	r3, [r7, #0]
 80113a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80113aa:	461a      	mov	r2, r3
 80113ac:	f000 fd9c 	bl	8011ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	2140      	movs	r1, #64	; 0x40
 80113b6:	4618      	mov	r0, r3
 80113b8:	f000 feac 	bl	8012114 <TIM_ITRx_SetConfig>
      break;
 80113bc:	e00c      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	681a      	ldr	r2, [r3, #0]
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	681b      	ldr	r3, [r3, #0]
 80113c6:	4619      	mov	r1, r3
 80113c8:	4610      	mov	r0, r2
 80113ca:	f000 fea3 	bl	8012114 <TIM_ITRx_SetConfig>
      break;
 80113ce:	e003      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80113d0:	2301      	movs	r3, #1
 80113d2:	73fb      	strb	r3, [r7, #15]
      break;
 80113d4:	e000      	b.n	80113d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80113d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	2201      	movs	r2, #1
 80113dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2200      	movs	r2, #0
 80113e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80113e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3710      	adds	r7, #16
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	ffceff88 	.word	0xffceff88
 80113f8:	00100040 	.word	0x00100040
 80113fc:	00100030 	.word	0x00100030
 8011400:	00100020 	.word	0x00100020

08011404 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011414:	2b01      	cmp	r3, #1
 8011416:	d101      	bne.n	801141c <HAL_TIM_SlaveConfigSynchro+0x18>
 8011418:	2302      	movs	r3, #2
 801141a:	e031      	b.n	8011480 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	2201      	movs	r2, #1
 8011420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2202      	movs	r2, #2
 8011428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801142c:	6839      	ldr	r1, [r7, #0]
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f000 fbfc 	bl	8011c2c <TIM_SlaveTimer_SetConfig>
 8011434:	4603      	mov	r3, r0
 8011436:	2b00      	cmp	r3, #0
 8011438:	d009      	beq.n	801144e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2201      	movs	r2, #1
 801143e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	2200      	movs	r2, #0
 8011446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801144a:	2301      	movs	r3, #1
 801144c:	e018      	b.n	8011480 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68da      	ldr	r2, [r3, #12]
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801145c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	68da      	ldr	r2, [r3, #12]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801146c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	2201      	movs	r2, #1
 8011472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011488:	b480      	push	{r7}
 801148a:	b085      	sub	sp, #20
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
 8011490:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8011492:	2300      	movs	r3, #0
 8011494:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	2b0c      	cmp	r3, #12
 801149a:	d831      	bhi.n	8011500 <HAL_TIM_ReadCapturedValue+0x78>
 801149c:	a201      	add	r2, pc, #4	; (adr r2, 80114a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 801149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a2:	bf00      	nop
 80114a4:	080114d9 	.word	0x080114d9
 80114a8:	08011501 	.word	0x08011501
 80114ac:	08011501 	.word	0x08011501
 80114b0:	08011501 	.word	0x08011501
 80114b4:	080114e3 	.word	0x080114e3
 80114b8:	08011501 	.word	0x08011501
 80114bc:	08011501 	.word	0x08011501
 80114c0:	08011501 	.word	0x08011501
 80114c4:	080114ed 	.word	0x080114ed
 80114c8:	08011501 	.word	0x08011501
 80114cc:	08011501 	.word	0x08011501
 80114d0:	08011501 	.word	0x08011501
 80114d4:	080114f7 	.word	0x080114f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114de:	60fb      	str	r3, [r7, #12]

      break;
 80114e0:	e00f      	b.n	8011502 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114e8:	60fb      	str	r3, [r7, #12]

      break;
 80114ea:	e00a      	b.n	8011502 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114f2:	60fb      	str	r3, [r7, #12]

      break;
 80114f4:	e005      	b.n	8011502 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114fc:	60fb      	str	r3, [r7, #12]

      break;
 80114fe:	e000      	b.n	8011502 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8011500:	bf00      	nop
  }

  return tmpreg;
 8011502:	68fb      	ldr	r3, [r7, #12]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3714      	adds	r7, #20
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011518:	bf00      	nop
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801152c:	bf00      	nop
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011540:	bf00      	nop
 8011542:	370c      	adds	r7, #12
 8011544:	46bd      	mov	sp, r7
 8011546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154a:	4770      	bx	lr

0801154c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801154c:	b480      	push	{r7}
 801154e:	b085      	sub	sp, #20
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	4a40      	ldr	r2, [pc, #256]	; (8011660 <TIM_Base_SetConfig+0x114>)
 8011560:	4293      	cmp	r3, r2
 8011562:	d013      	beq.n	801158c <TIM_Base_SetConfig+0x40>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801156a:	d00f      	beq.n	801158c <TIM_Base_SetConfig+0x40>
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	4a3d      	ldr	r2, [pc, #244]	; (8011664 <TIM_Base_SetConfig+0x118>)
 8011570:	4293      	cmp	r3, r2
 8011572:	d00b      	beq.n	801158c <TIM_Base_SetConfig+0x40>
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4a3c      	ldr	r2, [pc, #240]	; (8011668 <TIM_Base_SetConfig+0x11c>)
 8011578:	4293      	cmp	r3, r2
 801157a:	d007      	beq.n	801158c <TIM_Base_SetConfig+0x40>
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	4a3b      	ldr	r2, [pc, #236]	; (801166c <TIM_Base_SetConfig+0x120>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d003      	beq.n	801158c <TIM_Base_SetConfig+0x40>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	4a3a      	ldr	r2, [pc, #232]	; (8011670 <TIM_Base_SetConfig+0x124>)
 8011588:	4293      	cmp	r3, r2
 801158a:	d108      	bne.n	801159e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011592:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011594:	683b      	ldr	r3, [r7, #0]
 8011596:	685b      	ldr	r3, [r3, #4]
 8011598:	68fa      	ldr	r2, [r7, #12]
 801159a:	4313      	orrs	r3, r2
 801159c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	4a2f      	ldr	r2, [pc, #188]	; (8011660 <TIM_Base_SetConfig+0x114>)
 80115a2:	4293      	cmp	r3, r2
 80115a4:	d01f      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115ac:	d01b      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	4a2c      	ldr	r2, [pc, #176]	; (8011664 <TIM_Base_SetConfig+0x118>)
 80115b2:	4293      	cmp	r3, r2
 80115b4:	d017      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	4a2b      	ldr	r2, [pc, #172]	; (8011668 <TIM_Base_SetConfig+0x11c>)
 80115ba:	4293      	cmp	r3, r2
 80115bc:	d013      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	4a2a      	ldr	r2, [pc, #168]	; (801166c <TIM_Base_SetConfig+0x120>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d00f      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4a29      	ldr	r2, [pc, #164]	; (8011670 <TIM_Base_SetConfig+0x124>)
 80115ca:	4293      	cmp	r3, r2
 80115cc:	d00b      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	4a28      	ldr	r2, [pc, #160]	; (8011674 <TIM_Base_SetConfig+0x128>)
 80115d2:	4293      	cmp	r3, r2
 80115d4:	d007      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	4a27      	ldr	r2, [pc, #156]	; (8011678 <TIM_Base_SetConfig+0x12c>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d003      	beq.n	80115e6 <TIM_Base_SetConfig+0x9a>
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4a26      	ldr	r2, [pc, #152]	; (801167c <TIM_Base_SetConfig+0x130>)
 80115e2:	4293      	cmp	r3, r2
 80115e4:	d108      	bne.n	80115f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	68fa      	ldr	r2, [r7, #12]
 80115f4:	4313      	orrs	r3, r2
 80115f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	695b      	ldr	r3, [r3, #20]
 8011602:	4313      	orrs	r3, r2
 8011604:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	68fa      	ldr	r2, [r7, #12]
 801160a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	689a      	ldr	r2, [r3, #8]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	4a10      	ldr	r2, [pc, #64]	; (8011660 <TIM_Base_SetConfig+0x114>)
 8011620:	4293      	cmp	r3, r2
 8011622:	d00f      	beq.n	8011644 <TIM_Base_SetConfig+0xf8>
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	4a12      	ldr	r2, [pc, #72]	; (8011670 <TIM_Base_SetConfig+0x124>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d00b      	beq.n	8011644 <TIM_Base_SetConfig+0xf8>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	4a11      	ldr	r2, [pc, #68]	; (8011674 <TIM_Base_SetConfig+0x128>)
 8011630:	4293      	cmp	r3, r2
 8011632:	d007      	beq.n	8011644 <TIM_Base_SetConfig+0xf8>
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4a10      	ldr	r2, [pc, #64]	; (8011678 <TIM_Base_SetConfig+0x12c>)
 8011638:	4293      	cmp	r3, r2
 801163a:	d003      	beq.n	8011644 <TIM_Base_SetConfig+0xf8>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	4a0f      	ldr	r2, [pc, #60]	; (801167c <TIM_Base_SetConfig+0x130>)
 8011640:	4293      	cmp	r3, r2
 8011642:	d103      	bne.n	801164c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	691a      	ldr	r2, [r3, #16]
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2201      	movs	r2, #1
 8011650:	615a      	str	r2, [r3, #20]
}
 8011652:	bf00      	nop
 8011654:	3714      	adds	r7, #20
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr
 801165e:	bf00      	nop
 8011660:	40010000 	.word	0x40010000
 8011664:	40000400 	.word	0x40000400
 8011668:	40000800 	.word	0x40000800
 801166c:	40000c00 	.word	0x40000c00
 8011670:	40010400 	.word	0x40010400
 8011674:	40014000 	.word	0x40014000
 8011678:	40014400 	.word	0x40014400
 801167c:	40014800 	.word	0x40014800

08011680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011680:	b480      	push	{r7}
 8011682:	b087      	sub	sp, #28
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
 8011688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6a1b      	ldr	r3, [r3, #32]
 801168e:	f023 0201 	bic.w	r2, r3, #1
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6a1b      	ldr	r3, [r3, #32]
 801169a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	699b      	ldr	r3, [r3, #24]
 80116a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80116a8:	68fa      	ldr	r2, [r7, #12]
 80116aa:	4b37      	ldr	r3, [pc, #220]	; (8011788 <TIM_OC1_SetConfig+0x108>)
 80116ac:	4013      	ands	r3, r2
 80116ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f023 0303 	bic.w	r3, r3, #3
 80116b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	68fa      	ldr	r2, [r7, #12]
 80116be:	4313      	orrs	r3, r2
 80116c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	f023 0302 	bic.w	r3, r3, #2
 80116c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	689b      	ldr	r3, [r3, #8]
 80116ce:	697a      	ldr	r2, [r7, #20]
 80116d0:	4313      	orrs	r3, r2
 80116d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	4a2d      	ldr	r2, [pc, #180]	; (801178c <TIM_OC1_SetConfig+0x10c>)
 80116d8:	4293      	cmp	r3, r2
 80116da:	d00f      	beq.n	80116fc <TIM_OC1_SetConfig+0x7c>
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	4a2c      	ldr	r2, [pc, #176]	; (8011790 <TIM_OC1_SetConfig+0x110>)
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d00b      	beq.n	80116fc <TIM_OC1_SetConfig+0x7c>
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	4a2b      	ldr	r2, [pc, #172]	; (8011794 <TIM_OC1_SetConfig+0x114>)
 80116e8:	4293      	cmp	r3, r2
 80116ea:	d007      	beq.n	80116fc <TIM_OC1_SetConfig+0x7c>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	4a2a      	ldr	r2, [pc, #168]	; (8011798 <TIM_OC1_SetConfig+0x118>)
 80116f0:	4293      	cmp	r3, r2
 80116f2:	d003      	beq.n	80116fc <TIM_OC1_SetConfig+0x7c>
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	4a29      	ldr	r2, [pc, #164]	; (801179c <TIM_OC1_SetConfig+0x11c>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d10c      	bne.n	8011716 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	f023 0308 	bic.w	r3, r3, #8
 8011702:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	697a      	ldr	r2, [r7, #20]
 801170a:	4313      	orrs	r3, r2
 801170c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	f023 0304 	bic.w	r3, r3, #4
 8011714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	4a1c      	ldr	r2, [pc, #112]	; (801178c <TIM_OC1_SetConfig+0x10c>)
 801171a:	4293      	cmp	r3, r2
 801171c:	d00f      	beq.n	801173e <TIM_OC1_SetConfig+0xbe>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	4a1b      	ldr	r2, [pc, #108]	; (8011790 <TIM_OC1_SetConfig+0x110>)
 8011722:	4293      	cmp	r3, r2
 8011724:	d00b      	beq.n	801173e <TIM_OC1_SetConfig+0xbe>
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	4a1a      	ldr	r2, [pc, #104]	; (8011794 <TIM_OC1_SetConfig+0x114>)
 801172a:	4293      	cmp	r3, r2
 801172c:	d007      	beq.n	801173e <TIM_OC1_SetConfig+0xbe>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	4a19      	ldr	r2, [pc, #100]	; (8011798 <TIM_OC1_SetConfig+0x118>)
 8011732:	4293      	cmp	r3, r2
 8011734:	d003      	beq.n	801173e <TIM_OC1_SetConfig+0xbe>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4a18      	ldr	r2, [pc, #96]	; (801179c <TIM_OC1_SetConfig+0x11c>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d111      	bne.n	8011762 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801174c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	695b      	ldr	r3, [r3, #20]
 8011752:	693a      	ldr	r2, [r7, #16]
 8011754:	4313      	orrs	r3, r2
 8011756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011758:	683b      	ldr	r3, [r7, #0]
 801175a:	699b      	ldr	r3, [r3, #24]
 801175c:	693a      	ldr	r2, [r7, #16]
 801175e:	4313      	orrs	r3, r2
 8011760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	693a      	ldr	r2, [r7, #16]
 8011766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	697a      	ldr	r2, [r7, #20]
 801177a:	621a      	str	r2, [r3, #32]
}
 801177c:	bf00      	nop
 801177e:	371c      	adds	r7, #28
 8011780:	46bd      	mov	sp, r7
 8011782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011786:	4770      	bx	lr
 8011788:	fffeff8f 	.word	0xfffeff8f
 801178c:	40010000 	.word	0x40010000
 8011790:	40010400 	.word	0x40010400
 8011794:	40014000 	.word	0x40014000
 8011798:	40014400 	.word	0x40014400
 801179c:	40014800 	.word	0x40014800

080117a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b087      	sub	sp, #28
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	6a1b      	ldr	r3, [r3, #32]
 80117ae:	f023 0210 	bic.w	r2, r3, #16
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	6a1b      	ldr	r3, [r3, #32]
 80117ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	699b      	ldr	r3, [r3, #24]
 80117c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	4b34      	ldr	r3, [pc, #208]	; (801189c <TIM_OC2_SetConfig+0xfc>)
 80117cc:	4013      	ands	r3, r2
 80117ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	021b      	lsls	r3, r3, #8
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	4313      	orrs	r3, r2
 80117e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	f023 0320 	bic.w	r3, r3, #32
 80117ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	689b      	ldr	r3, [r3, #8]
 80117f0:	011b      	lsls	r3, r3, #4
 80117f2:	697a      	ldr	r2, [r7, #20]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4a29      	ldr	r2, [pc, #164]	; (80118a0 <TIM_OC2_SetConfig+0x100>)
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d003      	beq.n	8011808 <TIM_OC2_SetConfig+0x68>
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	4a28      	ldr	r2, [pc, #160]	; (80118a4 <TIM_OC2_SetConfig+0x104>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d10d      	bne.n	8011824 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801180e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	68db      	ldr	r3, [r3, #12]
 8011814:	011b      	lsls	r3, r3, #4
 8011816:	697a      	ldr	r2, [r7, #20]
 8011818:	4313      	orrs	r3, r2
 801181a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011822:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4a1e      	ldr	r2, [pc, #120]	; (80118a0 <TIM_OC2_SetConfig+0x100>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d00f      	beq.n	801184c <TIM_OC2_SetConfig+0xac>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	4a1d      	ldr	r2, [pc, #116]	; (80118a4 <TIM_OC2_SetConfig+0x104>)
 8011830:	4293      	cmp	r3, r2
 8011832:	d00b      	beq.n	801184c <TIM_OC2_SetConfig+0xac>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	4a1c      	ldr	r2, [pc, #112]	; (80118a8 <TIM_OC2_SetConfig+0x108>)
 8011838:	4293      	cmp	r3, r2
 801183a:	d007      	beq.n	801184c <TIM_OC2_SetConfig+0xac>
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	4a1b      	ldr	r2, [pc, #108]	; (80118ac <TIM_OC2_SetConfig+0x10c>)
 8011840:	4293      	cmp	r3, r2
 8011842:	d003      	beq.n	801184c <TIM_OC2_SetConfig+0xac>
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	4a1a      	ldr	r2, [pc, #104]	; (80118b0 <TIM_OC2_SetConfig+0x110>)
 8011848:	4293      	cmp	r3, r2
 801184a:	d113      	bne.n	8011874 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801185a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801185c:	683b      	ldr	r3, [r7, #0]
 801185e:	695b      	ldr	r3, [r3, #20]
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	693a      	ldr	r2, [r7, #16]
 8011864:	4313      	orrs	r3, r2
 8011866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011868:	683b      	ldr	r3, [r7, #0]
 801186a:	699b      	ldr	r3, [r3, #24]
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	693a      	ldr	r2, [r7, #16]
 8011870:	4313      	orrs	r3, r2
 8011872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	693a      	ldr	r2, [r7, #16]
 8011878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	685a      	ldr	r2, [r3, #4]
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	697a      	ldr	r2, [r7, #20]
 801188c:	621a      	str	r2, [r3, #32]
}
 801188e:	bf00      	nop
 8011890:	371c      	adds	r7, #28
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
 801189a:	bf00      	nop
 801189c:	feff8fff 	.word	0xfeff8fff
 80118a0:	40010000 	.word	0x40010000
 80118a4:	40010400 	.word	0x40010400
 80118a8:	40014000 	.word	0x40014000
 80118ac:	40014400 	.word	0x40014400
 80118b0:	40014800 	.word	0x40014800

080118b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b087      	sub	sp, #28
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6a1b      	ldr	r3, [r3, #32]
 80118c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6a1b      	ldr	r3, [r3, #32]
 80118ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	69db      	ldr	r3, [r3, #28]
 80118da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	4b33      	ldr	r3, [pc, #204]	; (80119ac <TIM_OC3_SetConfig+0xf8>)
 80118e0:	4013      	ands	r3, r2
 80118e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f023 0303 	bic.w	r3, r3, #3
 80118ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	4313      	orrs	r3, r2
 80118f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80118f6:	697b      	ldr	r3, [r7, #20]
 80118f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80118fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	689b      	ldr	r3, [r3, #8]
 8011902:	021b      	lsls	r3, r3, #8
 8011904:	697a      	ldr	r2, [r7, #20]
 8011906:	4313      	orrs	r3, r2
 8011908:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	4a28      	ldr	r2, [pc, #160]	; (80119b0 <TIM_OC3_SetConfig+0xfc>)
 801190e:	4293      	cmp	r3, r2
 8011910:	d003      	beq.n	801191a <TIM_OC3_SetConfig+0x66>
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	4a27      	ldr	r2, [pc, #156]	; (80119b4 <TIM_OC3_SetConfig+0x100>)
 8011916:	4293      	cmp	r3, r2
 8011918:	d10d      	bne.n	8011936 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011920:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	021b      	lsls	r3, r3, #8
 8011928:	697a      	ldr	r2, [r7, #20]
 801192a:	4313      	orrs	r3, r2
 801192c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4a1d      	ldr	r2, [pc, #116]	; (80119b0 <TIM_OC3_SetConfig+0xfc>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d00f      	beq.n	801195e <TIM_OC3_SetConfig+0xaa>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	4a1c      	ldr	r2, [pc, #112]	; (80119b4 <TIM_OC3_SetConfig+0x100>)
 8011942:	4293      	cmp	r3, r2
 8011944:	d00b      	beq.n	801195e <TIM_OC3_SetConfig+0xaa>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	4a1b      	ldr	r2, [pc, #108]	; (80119b8 <TIM_OC3_SetConfig+0x104>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d007      	beq.n	801195e <TIM_OC3_SetConfig+0xaa>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4a1a      	ldr	r2, [pc, #104]	; (80119bc <TIM_OC3_SetConfig+0x108>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d003      	beq.n	801195e <TIM_OC3_SetConfig+0xaa>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	4a19      	ldr	r2, [pc, #100]	; (80119c0 <TIM_OC3_SetConfig+0x10c>)
 801195a:	4293      	cmp	r3, r2
 801195c:	d113      	bne.n	8011986 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801195e:	693b      	ldr	r3, [r7, #16]
 8011960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801196c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	695b      	ldr	r3, [r3, #20]
 8011972:	011b      	lsls	r3, r3, #4
 8011974:	693a      	ldr	r2, [r7, #16]
 8011976:	4313      	orrs	r3, r2
 8011978:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801197a:	683b      	ldr	r3, [r7, #0]
 801197c:	699b      	ldr	r3, [r3, #24]
 801197e:	011b      	lsls	r3, r3, #4
 8011980:	693a      	ldr	r2, [r7, #16]
 8011982:	4313      	orrs	r3, r2
 8011984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	693a      	ldr	r2, [r7, #16]
 801198a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	68fa      	ldr	r2, [r7, #12]
 8011990:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	685a      	ldr	r2, [r3, #4]
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	697a      	ldr	r2, [r7, #20]
 801199e:	621a      	str	r2, [r3, #32]
}
 80119a0:	bf00      	nop
 80119a2:	371c      	adds	r7, #28
 80119a4:	46bd      	mov	sp, r7
 80119a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119aa:	4770      	bx	lr
 80119ac:	fffeff8f 	.word	0xfffeff8f
 80119b0:	40010000 	.word	0x40010000
 80119b4:	40010400 	.word	0x40010400
 80119b8:	40014000 	.word	0x40014000
 80119bc:	40014400 	.word	0x40014400
 80119c0:	40014800 	.word	0x40014800

080119c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b087      	sub	sp, #28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6a1b      	ldr	r3, [r3, #32]
 80119d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6a1b      	ldr	r3, [r3, #32]
 80119de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	685b      	ldr	r3, [r3, #4]
 80119e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	69db      	ldr	r3, [r3, #28]
 80119ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80119ec:	68fa      	ldr	r2, [r7, #12]
 80119ee:	4b24      	ldr	r3, [pc, #144]	; (8011a80 <TIM_OC4_SetConfig+0xbc>)
 80119f0:	4013      	ands	r3, r2
 80119f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80119fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	021b      	lsls	r3, r3, #8
 8011a02:	68fa      	ldr	r2, [r7, #12]
 8011a04:	4313      	orrs	r3, r2
 8011a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	689b      	ldr	r3, [r3, #8]
 8011a14:	031b      	lsls	r3, r3, #12
 8011a16:	693a      	ldr	r2, [r7, #16]
 8011a18:	4313      	orrs	r3, r2
 8011a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4a19      	ldr	r2, [pc, #100]	; (8011a84 <TIM_OC4_SetConfig+0xc0>)
 8011a20:	4293      	cmp	r3, r2
 8011a22:	d00f      	beq.n	8011a44 <TIM_OC4_SetConfig+0x80>
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a18      	ldr	r2, [pc, #96]	; (8011a88 <TIM_OC4_SetConfig+0xc4>)
 8011a28:	4293      	cmp	r3, r2
 8011a2a:	d00b      	beq.n	8011a44 <TIM_OC4_SetConfig+0x80>
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	4a17      	ldr	r2, [pc, #92]	; (8011a8c <TIM_OC4_SetConfig+0xc8>)
 8011a30:	4293      	cmp	r3, r2
 8011a32:	d007      	beq.n	8011a44 <TIM_OC4_SetConfig+0x80>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	4a16      	ldr	r2, [pc, #88]	; (8011a90 <TIM_OC4_SetConfig+0xcc>)
 8011a38:	4293      	cmp	r3, r2
 8011a3a:	d003      	beq.n	8011a44 <TIM_OC4_SetConfig+0x80>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	4a15      	ldr	r2, [pc, #84]	; (8011a94 <TIM_OC4_SetConfig+0xd0>)
 8011a40:	4293      	cmp	r3, r2
 8011a42:	d109      	bne.n	8011a58 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	695b      	ldr	r3, [r3, #20]
 8011a50:	019b      	lsls	r3, r3, #6
 8011a52:	697a      	ldr	r2, [r7, #20]
 8011a54:	4313      	orrs	r3, r2
 8011a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	697a      	ldr	r2, [r7, #20]
 8011a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	68fa      	ldr	r2, [r7, #12]
 8011a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	685a      	ldr	r2, [r3, #4]
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	621a      	str	r2, [r3, #32]
}
 8011a72:	bf00      	nop
 8011a74:	371c      	adds	r7, #28
 8011a76:	46bd      	mov	sp, r7
 8011a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop
 8011a80:	feff8fff 	.word	0xfeff8fff
 8011a84:	40010000 	.word	0x40010000
 8011a88:	40010400 	.word	0x40010400
 8011a8c:	40014000 	.word	0x40014000
 8011a90:	40014400 	.word	0x40014400
 8011a94:	40014800 	.word	0x40014800

08011a98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011a98:	b480      	push	{r7}
 8011a9a:	b087      	sub	sp, #28
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	6a1b      	ldr	r3, [r3, #32]
 8011aa6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6a1b      	ldr	r3, [r3, #32]
 8011ab2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011ac0:	68fa      	ldr	r2, [r7, #12]
 8011ac2:	4b21      	ldr	r3, [pc, #132]	; (8011b48 <TIM_OC5_SetConfig+0xb0>)
 8011ac4:	4013      	ands	r3, r2
 8011ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	68fa      	ldr	r2, [r7, #12]
 8011ace:	4313      	orrs	r3, r2
 8011ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011ad8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011ada:	683b      	ldr	r3, [r7, #0]
 8011adc:	689b      	ldr	r3, [r3, #8]
 8011ade:	041b      	lsls	r3, r3, #16
 8011ae0:	693a      	ldr	r2, [r7, #16]
 8011ae2:	4313      	orrs	r3, r2
 8011ae4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	4a18      	ldr	r2, [pc, #96]	; (8011b4c <TIM_OC5_SetConfig+0xb4>)
 8011aea:	4293      	cmp	r3, r2
 8011aec:	d00f      	beq.n	8011b0e <TIM_OC5_SetConfig+0x76>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	4a17      	ldr	r2, [pc, #92]	; (8011b50 <TIM_OC5_SetConfig+0xb8>)
 8011af2:	4293      	cmp	r3, r2
 8011af4:	d00b      	beq.n	8011b0e <TIM_OC5_SetConfig+0x76>
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	4a16      	ldr	r2, [pc, #88]	; (8011b54 <TIM_OC5_SetConfig+0xbc>)
 8011afa:	4293      	cmp	r3, r2
 8011afc:	d007      	beq.n	8011b0e <TIM_OC5_SetConfig+0x76>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	4a15      	ldr	r2, [pc, #84]	; (8011b58 <TIM_OC5_SetConfig+0xc0>)
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d003      	beq.n	8011b0e <TIM_OC5_SetConfig+0x76>
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	4a14      	ldr	r2, [pc, #80]	; (8011b5c <TIM_OC5_SetConfig+0xc4>)
 8011b0a:	4293      	cmp	r3, r2
 8011b0c:	d109      	bne.n	8011b22 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011b14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	695b      	ldr	r3, [r3, #20]
 8011b1a:	021b      	lsls	r3, r3, #8
 8011b1c:	697a      	ldr	r2, [r7, #20]
 8011b1e:	4313      	orrs	r3, r2
 8011b20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	697a      	ldr	r2, [r7, #20]
 8011b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	68fa      	ldr	r2, [r7, #12]
 8011b2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011b2e:	683b      	ldr	r3, [r7, #0]
 8011b30:	685a      	ldr	r2, [r3, #4]
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	693a      	ldr	r2, [r7, #16]
 8011b3a:	621a      	str	r2, [r3, #32]
}
 8011b3c:	bf00      	nop
 8011b3e:	371c      	adds	r7, #28
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr
 8011b48:	fffeff8f 	.word	0xfffeff8f
 8011b4c:	40010000 	.word	0x40010000
 8011b50:	40010400 	.word	0x40010400
 8011b54:	40014000 	.word	0x40014000
 8011b58:	40014400 	.word	0x40014400
 8011b5c:	40014800 	.word	0x40014800

08011b60 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011b60:	b480      	push	{r7}
 8011b62:	b087      	sub	sp, #28
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6a1b      	ldr	r3, [r3, #32]
 8011b6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6a1b      	ldr	r3, [r3, #32]
 8011b7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011b88:	68fa      	ldr	r2, [r7, #12]
 8011b8a:	4b22      	ldr	r3, [pc, #136]	; (8011c14 <TIM_OC6_SetConfig+0xb4>)
 8011b8c:	4013      	ands	r3, r2
 8011b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	021b      	lsls	r3, r3, #8
 8011b96:	68fa      	ldr	r2, [r7, #12]
 8011b98:	4313      	orrs	r3, r2
 8011b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011ba4:	683b      	ldr	r3, [r7, #0]
 8011ba6:	689b      	ldr	r3, [r3, #8]
 8011ba8:	051b      	lsls	r3, r3, #20
 8011baa:	693a      	ldr	r2, [r7, #16]
 8011bac:	4313      	orrs	r3, r2
 8011bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	4a19      	ldr	r2, [pc, #100]	; (8011c18 <TIM_OC6_SetConfig+0xb8>)
 8011bb4:	4293      	cmp	r3, r2
 8011bb6:	d00f      	beq.n	8011bd8 <TIM_OC6_SetConfig+0x78>
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	4a18      	ldr	r2, [pc, #96]	; (8011c1c <TIM_OC6_SetConfig+0xbc>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d00b      	beq.n	8011bd8 <TIM_OC6_SetConfig+0x78>
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	4a17      	ldr	r2, [pc, #92]	; (8011c20 <TIM_OC6_SetConfig+0xc0>)
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d007      	beq.n	8011bd8 <TIM_OC6_SetConfig+0x78>
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	4a16      	ldr	r2, [pc, #88]	; (8011c24 <TIM_OC6_SetConfig+0xc4>)
 8011bcc:	4293      	cmp	r3, r2
 8011bce:	d003      	beq.n	8011bd8 <TIM_OC6_SetConfig+0x78>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	4a15      	ldr	r2, [pc, #84]	; (8011c28 <TIM_OC6_SetConfig+0xc8>)
 8011bd4:	4293      	cmp	r3, r2
 8011bd6:	d109      	bne.n	8011bec <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	695b      	ldr	r3, [r3, #20]
 8011be4:	029b      	lsls	r3, r3, #10
 8011be6:	697a      	ldr	r2, [r7, #20]
 8011be8:	4313      	orrs	r3, r2
 8011bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	697a      	ldr	r2, [r7, #20]
 8011bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	68fa      	ldr	r2, [r7, #12]
 8011bf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	685a      	ldr	r2, [r3, #4]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	693a      	ldr	r2, [r7, #16]
 8011c04:	621a      	str	r2, [r3, #32]
}
 8011c06:	bf00      	nop
 8011c08:	371c      	adds	r7, #28
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	feff8fff 	.word	0xfeff8fff
 8011c18:	40010000 	.word	0x40010000
 8011c1c:	40010400 	.word	0x40010400
 8011c20:	40014000 	.word	0x40014000
 8011c24:	40014400 	.word	0x40014400
 8011c28:	40014800 	.word	0x40014800

08011c2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b086      	sub	sp, #24
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011c36:	2300      	movs	r3, #0
 8011c38:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011c42:	693a      	ldr	r2, [r7, #16]
 8011c44:	4b65      	ldr	r3, [pc, #404]	; (8011ddc <TIM_SlaveTimer_SetConfig+0x1b0>)
 8011c46:	4013      	ands	r3, r2
 8011c48:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	693a      	ldr	r2, [r7, #16]
 8011c50:	4313      	orrs	r3, r2
 8011c52:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011c54:	693a      	ldr	r2, [r7, #16]
 8011c56:	4b62      	ldr	r3, [pc, #392]	; (8011de0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8011c58:	4013      	ands	r3, r2
 8011c5a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	693a      	ldr	r2, [r7, #16]
 8011c62:	4313      	orrs	r3, r2
 8011c64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	693a      	ldr	r2, [r7, #16]
 8011c6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	4a5c      	ldr	r2, [pc, #368]	; (8011de4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011c74:	4293      	cmp	r3, r2
 8011c76:	f000 80ab 	beq.w	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011c7a:	4a5a      	ldr	r2, [pc, #360]	; (8011de4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011c7c:	4293      	cmp	r3, r2
 8011c7e:	f200 80a4 	bhi.w	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c86:	f000 80a3 	beq.w	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c8e:	f200 809c 	bhi.w	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011c92:	4a55      	ldr	r2, [pc, #340]	; (8011de8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	f000 809b 	beq.w	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011c9a:	4a53      	ldr	r2, [pc, #332]	; (8011de8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011c9c:	4293      	cmp	r3, r2
 8011c9e:	f200 8094 	bhi.w	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011ca2:	4a52      	ldr	r2, [pc, #328]	; (8011dec <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011ca4:	4293      	cmp	r3, r2
 8011ca6:	f000 8093 	beq.w	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011caa:	4a50      	ldr	r2, [pc, #320]	; (8011dec <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011cac:	4293      	cmp	r3, r2
 8011cae:	f200 808c 	bhi.w	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011cb2:	4a4f      	ldr	r2, [pc, #316]	; (8011df0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011cb4:	4293      	cmp	r3, r2
 8011cb6:	f000 808b 	beq.w	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011cba:	4a4d      	ldr	r2, [pc, #308]	; (8011df0 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011cbc:	4293      	cmp	r3, r2
 8011cbe:	f200 8084 	bhi.w	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011cc2:	4a4c      	ldr	r2, [pc, #304]	; (8011df4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	f000 8083 	beq.w	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011cca:	4a4a      	ldr	r2, [pc, #296]	; (8011df4 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d87c      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011cd0:	4a49      	ldr	r2, [pc, #292]	; (8011df8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011cd2:	4293      	cmp	r3, r2
 8011cd4:	d07c      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011cd6:	4a48      	ldr	r2, [pc, #288]	; (8011df8 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011cd8:	4293      	cmp	r3, r2
 8011cda:	d876      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011cdc:	4a47      	ldr	r2, [pc, #284]	; (8011dfc <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011cde:	4293      	cmp	r3, r2
 8011ce0:	d076      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011ce2:	4a46      	ldr	r2, [pc, #280]	; (8011dfc <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	d870      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011ce8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011cec:	d070      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011cee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011cf2:	d86a      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cf8:	d06a      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011cfe:	d864      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d00:	2b70      	cmp	r3, #112	; 0x70
 8011d02:	d01a      	beq.n	8011d3a <TIM_SlaveTimer_SetConfig+0x10e>
 8011d04:	2b70      	cmp	r3, #112	; 0x70
 8011d06:	d860      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d08:	2b60      	cmp	r3, #96	; 0x60
 8011d0a:	d054      	beq.n	8011db6 <TIM_SlaveTimer_SetConfig+0x18a>
 8011d0c:	2b60      	cmp	r3, #96	; 0x60
 8011d0e:	d85c      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d10:	2b50      	cmp	r3, #80	; 0x50
 8011d12:	d046      	beq.n	8011da2 <TIM_SlaveTimer_SetConfig+0x176>
 8011d14:	2b50      	cmp	r3, #80	; 0x50
 8011d16:	d858      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d18:	2b40      	cmp	r3, #64	; 0x40
 8011d1a:	d019      	beq.n	8011d50 <TIM_SlaveTimer_SetConfig+0x124>
 8011d1c:	2b40      	cmp	r3, #64	; 0x40
 8011d1e:	d854      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d20:	2b30      	cmp	r3, #48	; 0x30
 8011d22:	d055      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011d24:	2b30      	cmp	r3, #48	; 0x30
 8011d26:	d850      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d28:	2b20      	cmp	r3, #32
 8011d2a:	d051      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011d2c:	2b20      	cmp	r3, #32
 8011d2e:	d84c      	bhi.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d04d      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011d34:	2b10      	cmp	r3, #16
 8011d36:	d04b      	beq.n	8011dd0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011d38:	e047      	b.n	8011dca <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011d4a:	f000 fa01 	bl	8012150 <TIM_ETR_SetConfig>
      break;
 8011d4e:	e040      	b.n	8011dd2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	2b05      	cmp	r3, #5
 8011d56:	d101      	bne.n	8011d5c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e03b      	b.n	8011dd4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	6a1b      	ldr	r3, [r3, #32]
 8011d62:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	6a1a      	ldr	r2, [r3, #32]
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f022 0201 	bic.w	r2, r2, #1
 8011d72:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	699b      	ldr	r3, [r3, #24]
 8011d7a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d82:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	691b      	ldr	r3, [r3, #16]
 8011d88:	011b      	lsls	r3, r3, #4
 8011d8a:	68ba      	ldr	r2, [r7, #8]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	68ba      	ldr	r2, [r7, #8]
 8011d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	621a      	str	r2, [r3, #32]
      break;
 8011da0:	e017      	b.n	8011dd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011dae:	461a      	mov	r2, r3
 8011db0:	f000 f89a 	bl	8011ee8 <TIM_TI1_ConfigInputStage>
      break;
 8011db4:	e00d      	b.n	8011dd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	f000 f8fc 	bl	8011fc0 <TIM_TI2_ConfigInputStage>
      break;
 8011dc8:	e003      	b.n	8011dd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	75fb      	strb	r3, [r7, #23]
      break;
 8011dce:	e000      	b.n	8011dd2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8011dd0:	bf00      	nop
  }

  return status;
 8011dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3718      	adds	r7, #24
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}
 8011ddc:	ffcfff8f 	.word	0xffcfff8f
 8011de0:	fffefff8 	.word	0xfffefff8
 8011de4:	00200010 	.word	0x00200010
 8011de8:	00100070 	.word	0x00100070
 8011dec:	00100060 	.word	0x00100060
 8011df0:	00100050 	.word	0x00100050
 8011df4:	00100040 	.word	0x00100040
 8011df8:	00100030 	.word	0x00100030
 8011dfc:	00100020 	.word	0x00100020

08011e00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b087      	sub	sp, #28
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	60f8      	str	r0, [r7, #12]
 8011e08:	60b9      	str	r1, [r7, #8]
 8011e0a:	607a      	str	r2, [r7, #4]
 8011e0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	6a1b      	ldr	r3, [r3, #32]
 8011e12:	f023 0201 	bic.w	r2, r3, #1
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	699b      	ldr	r3, [r3, #24]
 8011e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	6a1b      	ldr	r3, [r3, #32]
 8011e24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	4a28      	ldr	r2, [pc, #160]	; (8011ecc <TIM_TI1_SetConfig+0xcc>)
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	d01b      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011e34:	d017      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	4a25      	ldr	r2, [pc, #148]	; (8011ed0 <TIM_TI1_SetConfig+0xd0>)
 8011e3a:	4293      	cmp	r3, r2
 8011e3c:	d013      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	4a24      	ldr	r2, [pc, #144]	; (8011ed4 <TIM_TI1_SetConfig+0xd4>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d00f      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	4a23      	ldr	r2, [pc, #140]	; (8011ed8 <TIM_TI1_SetConfig+0xd8>)
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d00b      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	4a22      	ldr	r2, [pc, #136]	; (8011edc <TIM_TI1_SetConfig+0xdc>)
 8011e52:	4293      	cmp	r3, r2
 8011e54:	d007      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	4a21      	ldr	r2, [pc, #132]	; (8011ee0 <TIM_TI1_SetConfig+0xe0>)
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	d003      	beq.n	8011e66 <TIM_TI1_SetConfig+0x66>
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	4a20      	ldr	r2, [pc, #128]	; (8011ee4 <TIM_TI1_SetConfig+0xe4>)
 8011e62:	4293      	cmp	r3, r2
 8011e64:	d101      	bne.n	8011e6a <TIM_TI1_SetConfig+0x6a>
 8011e66:	2301      	movs	r3, #1
 8011e68:	e000      	b.n	8011e6c <TIM_TI1_SetConfig+0x6c>
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d008      	beq.n	8011e82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	f023 0303 	bic.w	r3, r3, #3
 8011e76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011e78:	697a      	ldr	r2, [r7, #20]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	617b      	str	r3, [r7, #20]
 8011e80:	e003      	b.n	8011e8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	f043 0301 	orr.w	r3, r3, #1
 8011e88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	011b      	lsls	r3, r3, #4
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	697a      	ldr	r2, [r7, #20]
 8011e9a:	4313      	orrs	r3, r2
 8011e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	f023 030a 	bic.w	r3, r3, #10
 8011ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	f003 030a 	and.w	r3, r3, #10
 8011eac:	693a      	ldr	r2, [r7, #16]
 8011eae:	4313      	orrs	r3, r2
 8011eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	697a      	ldr	r2, [r7, #20]
 8011eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	693a      	ldr	r2, [r7, #16]
 8011ebc:	621a      	str	r2, [r3, #32]
}
 8011ebe:	bf00      	nop
 8011ec0:	371c      	adds	r7, #28
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr
 8011eca:	bf00      	nop
 8011ecc:	40010000 	.word	0x40010000
 8011ed0:	40000400 	.word	0x40000400
 8011ed4:	40000800 	.word	0x40000800
 8011ed8:	40000c00 	.word	0x40000c00
 8011edc:	40010400 	.word	0x40010400
 8011ee0:	40001800 	.word	0x40001800
 8011ee4:	40014000 	.word	0x40014000

08011ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b087      	sub	sp, #28
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	6a1b      	ldr	r3, [r3, #32]
 8011ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	6a1b      	ldr	r3, [r3, #32]
 8011efe:	f023 0201 	bic.w	r2, r3, #1
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	699b      	ldr	r3, [r3, #24]
 8011f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011f0c:	693b      	ldr	r3, [r7, #16]
 8011f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	011b      	lsls	r3, r3, #4
 8011f18:	693a      	ldr	r2, [r7, #16]
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	f023 030a 	bic.w	r3, r3, #10
 8011f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011f26:	697a      	ldr	r2, [r7, #20]
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	4313      	orrs	r3, r2
 8011f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	693a      	ldr	r2, [r7, #16]
 8011f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	697a      	ldr	r2, [r7, #20]
 8011f38:	621a      	str	r2, [r3, #32]
}
 8011f3a:	bf00      	nop
 8011f3c:	371c      	adds	r7, #28
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011f46:	b480      	push	{r7}
 8011f48:	b087      	sub	sp, #28
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	60f8      	str	r0, [r7, #12]
 8011f4e:	60b9      	str	r1, [r7, #8]
 8011f50:	607a      	str	r2, [r7, #4]
 8011f52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	6a1b      	ldr	r3, [r3, #32]
 8011f58:	f023 0210 	bic.w	r2, r3, #16
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	699b      	ldr	r3, [r3, #24]
 8011f64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	6a1b      	ldr	r3, [r3, #32]
 8011f6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	021b      	lsls	r3, r3, #8
 8011f78:	697a      	ldr	r2, [r7, #20]
 8011f7a:	4313      	orrs	r3, r2
 8011f7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011f7e:	697b      	ldr	r3, [r7, #20]
 8011f80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011f84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8011f86:	683b      	ldr	r3, [r7, #0]
 8011f88:	031b      	lsls	r3, r3, #12
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	697a      	ldr	r2, [r7, #20]
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011f98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	011b      	lsls	r3, r3, #4
 8011f9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011fa2:	693a      	ldr	r2, [r7, #16]
 8011fa4:	4313      	orrs	r3, r2
 8011fa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	697a      	ldr	r2, [r7, #20]
 8011fac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	693a      	ldr	r2, [r7, #16]
 8011fb2:	621a      	str	r2, [r3, #32]
}
 8011fb4:	bf00      	nop
 8011fb6:	371c      	adds	r7, #28
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbe:	4770      	bx	lr

08011fc0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b087      	sub	sp, #28
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6a1b      	ldr	r3, [r3, #32]
 8011fd0:	f023 0210 	bic.w	r2, r3, #16
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	699b      	ldr	r3, [r3, #24]
 8011fdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	6a1b      	ldr	r3, [r3, #32]
 8011fe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011fe4:	697b      	ldr	r3, [r7, #20]
 8011fe6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011fea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	031b      	lsls	r3, r3, #12
 8011ff0:	697a      	ldr	r2, [r7, #20]
 8011ff2:	4313      	orrs	r3, r2
 8011ff4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011ffc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	011b      	lsls	r3, r3, #4
 8012002:	693a      	ldr	r2, [r7, #16]
 8012004:	4313      	orrs	r3, r2
 8012006:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	697a      	ldr	r2, [r7, #20]
 801200c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	693a      	ldr	r2, [r7, #16]
 8012012:	621a      	str	r2, [r3, #32]
}
 8012014:	bf00      	nop
 8012016:	371c      	adds	r7, #28
 8012018:	46bd      	mov	sp, r7
 801201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201e:	4770      	bx	lr

08012020 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012020:	b480      	push	{r7}
 8012022:	b087      	sub	sp, #28
 8012024:	af00      	add	r7, sp, #0
 8012026:	60f8      	str	r0, [r7, #12]
 8012028:	60b9      	str	r1, [r7, #8]
 801202a:	607a      	str	r2, [r7, #4]
 801202c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	6a1b      	ldr	r3, [r3, #32]
 8012032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	69db      	ldr	r3, [r3, #28]
 801203e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	6a1b      	ldr	r3, [r3, #32]
 8012044:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012046:	697b      	ldr	r3, [r7, #20]
 8012048:	f023 0303 	bic.w	r3, r3, #3
 801204c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801204e:	697a      	ldr	r2, [r7, #20]
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	4313      	orrs	r3, r2
 8012054:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012056:	697b      	ldr	r3, [r7, #20]
 8012058:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801205c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	011b      	lsls	r3, r3, #4
 8012062:	b2db      	uxtb	r3, r3
 8012064:	697a      	ldr	r2, [r7, #20]
 8012066:	4313      	orrs	r3, r2
 8012068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8012070:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	021b      	lsls	r3, r3, #8
 8012076:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 801207a:	693a      	ldr	r2, [r7, #16]
 801207c:	4313      	orrs	r3, r2
 801207e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	697a      	ldr	r2, [r7, #20]
 8012084:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	693a      	ldr	r2, [r7, #16]
 801208a:	621a      	str	r2, [r3, #32]
}
 801208c:	bf00      	nop
 801208e:	371c      	adds	r7, #28
 8012090:	46bd      	mov	sp, r7
 8012092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012096:	4770      	bx	lr

08012098 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012098:	b480      	push	{r7}
 801209a:	b087      	sub	sp, #28
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
 80120a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	6a1b      	ldr	r3, [r3, #32]
 80120aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	69db      	ldr	r3, [r3, #28]
 80120b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	6a1b      	ldr	r3, [r3, #32]
 80120bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80120c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	021b      	lsls	r3, r3, #8
 80120ca:	697a      	ldr	r2, [r7, #20]
 80120cc:	4313      	orrs	r3, r2
 80120ce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80120d0:	697b      	ldr	r3, [r7, #20]
 80120d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80120d6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	031b      	lsls	r3, r3, #12
 80120dc:	b29b      	uxth	r3, r3
 80120de:	697a      	ldr	r2, [r7, #20]
 80120e0:	4313      	orrs	r3, r2
 80120e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80120ea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	031b      	lsls	r3, r3, #12
 80120f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80120f4:	693a      	ldr	r2, [r7, #16]
 80120f6:	4313      	orrs	r3, r2
 80120f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	697a      	ldr	r2, [r7, #20]
 80120fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	693a      	ldr	r2, [r7, #16]
 8012104:	621a      	str	r2, [r3, #32]
}
 8012106:	bf00      	nop
 8012108:	371c      	adds	r7, #28
 801210a:	46bd      	mov	sp, r7
 801210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012110:	4770      	bx	lr
	...

08012114 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012114:	b480      	push	{r7}
 8012116:	b085      	sub	sp, #20
 8012118:	af00      	add	r7, sp, #0
 801211a:	6078      	str	r0, [r7, #4]
 801211c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	689b      	ldr	r3, [r3, #8]
 8012122:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012124:	68fa      	ldr	r2, [r7, #12]
 8012126:	4b09      	ldr	r3, [pc, #36]	; (801214c <TIM_ITRx_SetConfig+0x38>)
 8012128:	4013      	ands	r3, r2
 801212a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801212c:	683a      	ldr	r2, [r7, #0]
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	4313      	orrs	r3, r2
 8012132:	f043 0307 	orr.w	r3, r3, #7
 8012136:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	68fa      	ldr	r2, [r7, #12]
 801213c:	609a      	str	r2, [r3, #8]
}
 801213e:	bf00      	nop
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	ffcfff8f 	.word	0xffcfff8f

08012150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012150:	b480      	push	{r7}
 8012152:	b087      	sub	sp, #28
 8012154:	af00      	add	r7, sp, #0
 8012156:	60f8      	str	r0, [r7, #12]
 8012158:	60b9      	str	r1, [r7, #8]
 801215a:	607a      	str	r2, [r7, #4]
 801215c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801216a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	021a      	lsls	r2, r3, #8
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	431a      	orrs	r2, r3
 8012174:	68bb      	ldr	r3, [r7, #8]
 8012176:	4313      	orrs	r3, r2
 8012178:	697a      	ldr	r2, [r7, #20]
 801217a:	4313      	orrs	r3, r2
 801217c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	697a      	ldr	r2, [r7, #20]
 8012182:	609a      	str	r2, [r3, #8]
}
 8012184:	bf00      	nop
 8012186:	371c      	adds	r7, #28
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr

08012190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8012190:	b480      	push	{r7}
 8012192:	b087      	sub	sp, #28
 8012194:	af00      	add	r7, sp, #0
 8012196:	60f8      	str	r0, [r7, #12]
 8012198:	60b9      	str	r1, [r7, #8]
 801219a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	f003 031f 	and.w	r3, r3, #31
 80121a2:	2201      	movs	r2, #1
 80121a4:	fa02 f303 	lsl.w	r3, r2, r3
 80121a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	6a1a      	ldr	r2, [r3, #32]
 80121ae:	697b      	ldr	r3, [r7, #20]
 80121b0:	43db      	mvns	r3, r3
 80121b2:	401a      	ands	r2, r3
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	6a1a      	ldr	r2, [r3, #32]
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	f003 031f 	and.w	r3, r3, #31
 80121c2:	6879      	ldr	r1, [r7, #4]
 80121c4:	fa01 f303 	lsl.w	r3, r1, r3
 80121c8:	431a      	orrs	r2, r3
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	621a      	str	r2, [r3, #32]
}
 80121ce:	bf00      	nop
 80121d0:	371c      	adds	r7, #28
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr
	...

080121dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80121dc:	b480      	push	{r7}
 80121de:	b085      	sub	sp, #20
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d101      	bne.n	80121f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80121f0:	2302      	movs	r3, #2
 80121f2:	e06d      	b.n	80122d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2201      	movs	r2, #1
 80121f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2202      	movs	r2, #2
 8012200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	689b      	ldr	r3, [r3, #8]
 8012212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	4a30      	ldr	r2, [pc, #192]	; (80122dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801221a:	4293      	cmp	r3, r2
 801221c:	d004      	beq.n	8012228 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4a2f      	ldr	r2, [pc, #188]	; (80122e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d108      	bne.n	801223a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801222e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	685b      	ldr	r3, [r3, #4]
 8012234:	68fa      	ldr	r2, [r7, #12]
 8012236:	4313      	orrs	r3, r2
 8012238:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012240:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	68fa      	ldr	r2, [r7, #12]
 8012248:	4313      	orrs	r3, r2
 801224a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	68fa      	ldr	r2, [r7, #12]
 8012252:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	4a20      	ldr	r2, [pc, #128]	; (80122dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801225a:	4293      	cmp	r3, r2
 801225c:	d022      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012266:	d01d      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	4a1d      	ldr	r2, [pc, #116]	; (80122e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801226e:	4293      	cmp	r3, r2
 8012270:	d018      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	4a1c      	ldr	r2, [pc, #112]	; (80122e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012278:	4293      	cmp	r3, r2
 801227a:	d013      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	4a1a      	ldr	r2, [pc, #104]	; (80122ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8012282:	4293      	cmp	r3, r2
 8012284:	d00e      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	4a15      	ldr	r2, [pc, #84]	; (80122e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801228c:	4293      	cmp	r3, r2
 801228e:	d009      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	4a16      	ldr	r2, [pc, #88]	; (80122f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012296:	4293      	cmp	r3, r2
 8012298:	d004      	beq.n	80122a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	4a15      	ldr	r2, [pc, #84]	; (80122f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80122a0:	4293      	cmp	r3, r2
 80122a2:	d10c      	bne.n	80122be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80122aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	68ba      	ldr	r2, [r7, #8]
 80122b2:	4313      	orrs	r3, r2
 80122b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2201      	movs	r2, #1
 80122c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	2200      	movs	r2, #0
 80122ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	3714      	adds	r7, #20
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	40010000 	.word	0x40010000
 80122e0:	40010400 	.word	0x40010400
 80122e4:	40000400 	.word	0x40000400
 80122e8:	40000800 	.word	0x40000800
 80122ec:	40000c00 	.word	0x40000c00
 80122f0:	40001800 	.word	0x40001800
 80122f4:	40014000 	.word	0x40014000

080122f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b083      	sub	sp, #12
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012300:	bf00      	nop
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012314:	bf00      	nop
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012328:	bf00      	nop
 801232a:	370c      	adds	r7, #12
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b082      	sub	sp, #8
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	2b00      	cmp	r3, #0
 8012340:	d101      	bne.n	8012346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012342:	2301      	movs	r3, #1
 8012344:	e042      	b.n	80123cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801234c:	2b00      	cmp	r3, #0
 801234e:	d106      	bne.n	801235e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012358:	6878      	ldr	r0, [r7, #4]
 801235a:	f7f3 fe29 	bl	8005fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	2224      	movs	r2, #36	; 0x24
 8012362:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f022 0201 	bic.w	r2, r2, #1
 8012374:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f000 fd54 	bl	8012e24 <UART_SetConfig>
 801237c:	4603      	mov	r3, r0
 801237e:	2b01      	cmp	r3, #1
 8012380:	d101      	bne.n	8012386 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012382:	2301      	movs	r3, #1
 8012384:	e022      	b.n	80123cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801238a:	2b00      	cmp	r3, #0
 801238c:	d002      	beq.n	8012394 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f001 fab0 	bl	80138f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80123a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	689a      	ldr	r2, [r3, #8]
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80123b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	f042 0201 	orr.w	r2, r2, #1
 80123c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80123c4:	6878      	ldr	r0, [r7, #4]
 80123c6:	f001 fb37 	bl	8013a38 <UART_CheckIdleState>
 80123ca:	4603      	mov	r3, r0
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b08a      	sub	sp, #40	; 0x28
 80123d8:	af02      	add	r7, sp, #8
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	603b      	str	r3, [r7, #0]
 80123e0:	4613      	mov	r3, r2
 80123e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80123ea:	2b20      	cmp	r3, #32
 80123ec:	d17b      	bne.n	80124e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d002      	beq.n	80123fa <HAL_UART_Transmit+0x26>
 80123f4:	88fb      	ldrh	r3, [r7, #6]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d101      	bne.n	80123fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	e074      	b.n	80124e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	2200      	movs	r2, #0
 8012402:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2221      	movs	r2, #33	; 0x21
 801240a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801240e:	f7f4 fe5d 	bl	80070cc <HAL_GetTick>
 8012412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	88fa      	ldrh	r2, [r7, #6]
 8012418:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	88fa      	ldrh	r2, [r7, #6]
 8012420:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801242c:	d108      	bne.n	8012440 <HAL_UART_Transmit+0x6c>
 801242e:	68fb      	ldr	r3, [r7, #12]
 8012430:	691b      	ldr	r3, [r3, #16]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d104      	bne.n	8012440 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012436:	2300      	movs	r3, #0
 8012438:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801243a:	68bb      	ldr	r3, [r7, #8]
 801243c:	61bb      	str	r3, [r7, #24]
 801243e:	e003      	b.n	8012448 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012444:	2300      	movs	r3, #0
 8012446:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012448:	e030      	b.n	80124ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801244a:	683b      	ldr	r3, [r7, #0]
 801244c:	9300      	str	r3, [sp, #0]
 801244e:	697b      	ldr	r3, [r7, #20]
 8012450:	2200      	movs	r2, #0
 8012452:	2180      	movs	r1, #128	; 0x80
 8012454:	68f8      	ldr	r0, [r7, #12]
 8012456:	f001 fb99 	bl	8013b8c <UART_WaitOnFlagUntilTimeout>
 801245a:	4603      	mov	r3, r0
 801245c:	2b00      	cmp	r3, #0
 801245e:	d005      	beq.n	801246c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	2220      	movs	r2, #32
 8012464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012468:	2303      	movs	r3, #3
 801246a:	e03d      	b.n	80124e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d10b      	bne.n	801248a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	881b      	ldrh	r3, [r3, #0]
 8012476:	461a      	mov	r2, r3
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012480:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012482:	69bb      	ldr	r3, [r7, #24]
 8012484:	3302      	adds	r3, #2
 8012486:	61bb      	str	r3, [r7, #24]
 8012488:	e007      	b.n	801249a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801248a:	69fb      	ldr	r3, [r7, #28]
 801248c:	781a      	ldrb	r2, [r3, #0]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012494:	69fb      	ldr	r3, [r7, #28]
 8012496:	3301      	adds	r3, #1
 8012498:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80124a0:	b29b      	uxth	r3, r3
 80124a2:	3b01      	subs	r3, #1
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1c8      	bne.n	801244a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	9300      	str	r3, [sp, #0]
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	2200      	movs	r2, #0
 80124c0:	2140      	movs	r1, #64	; 0x40
 80124c2:	68f8      	ldr	r0, [r7, #12]
 80124c4:	f001 fb62 	bl	8013b8c <UART_WaitOnFlagUntilTimeout>
 80124c8:	4603      	mov	r3, r0
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d005      	beq.n	80124da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2220      	movs	r2, #32
 80124d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80124d6:	2303      	movs	r3, #3
 80124d8:	e006      	b.n	80124e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	2220      	movs	r2, #32
 80124de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80124e2:	2300      	movs	r3, #0
 80124e4:	e000      	b.n	80124e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80124e6:	2302      	movs	r3, #2
  }
}
 80124e8:	4618      	mov	r0, r3
 80124ea:	3720      	adds	r7, #32
 80124ec:	46bd      	mov	sp, r7
 80124ee:	bd80      	pop	{r7, pc}

080124f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b08a      	sub	sp, #40	; 0x28
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	4613      	mov	r3, r2
 80124fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012504:	2b20      	cmp	r3, #32
 8012506:	d167      	bne.n	80125d8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <HAL_UART_Transmit_DMA+0x24>
 801250e:	88fb      	ldrh	r3, [r7, #6]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d101      	bne.n	8012518 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8012514:	2301      	movs	r3, #1
 8012516:	e060      	b.n	80125da <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	68ba      	ldr	r2, [r7, #8]
 801251c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	88fa      	ldrh	r2, [r7, #6]
 8012522:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	88fa      	ldrh	r2, [r7, #6]
 801252a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	2200      	movs	r2, #0
 8012532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	2221      	movs	r2, #33	; 0x21
 801253a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012542:	2b00      	cmp	r3, #0
 8012544:	d028      	beq.n	8012598 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801254a:	4a26      	ldr	r2, [pc, #152]	; (80125e4 <HAL_UART_Transmit_DMA+0xf4>)
 801254c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012552:	4a25      	ldr	r2, [pc, #148]	; (80125e8 <HAL_UART_Transmit_DMA+0xf8>)
 8012554:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801255a:	4a24      	ldr	r2, [pc, #144]	; (80125ec <HAL_UART_Transmit_DMA+0xfc>)
 801255c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012562:	2200      	movs	r2, #0
 8012564:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801256e:	4619      	mov	r1, r3
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	3328      	adds	r3, #40	; 0x28
 8012576:	461a      	mov	r2, r3
 8012578:	88fb      	ldrh	r3, [r7, #6]
 801257a:	f7f6 ffcf 	bl	800951c <HAL_DMA_Start_IT>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d009      	beq.n	8012598 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2210      	movs	r2, #16
 8012588:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	2220      	movs	r2, #32
 8012590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8012594:	2301      	movs	r3, #1
 8012596:	e020      	b.n	80125da <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	2240      	movs	r2, #64	; 0x40
 801259e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	3308      	adds	r3, #8
 80125a6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	e853 3f00 	ldrex	r3, [r3]
 80125ae:	613b      	str	r3, [r7, #16]
   return(result);
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125b6:	627b      	str	r3, [r7, #36]	; 0x24
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	3308      	adds	r3, #8
 80125be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125c0:	623a      	str	r2, [r7, #32]
 80125c2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125c4:	69f9      	ldr	r1, [r7, #28]
 80125c6:	6a3a      	ldr	r2, [r7, #32]
 80125c8:	e841 2300 	strex	r3, r2, [r1]
 80125cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d1e5      	bne.n	80125a0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80125d4:	2300      	movs	r3, #0
 80125d6:	e000      	b.n	80125da <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80125d8:	2302      	movs	r3, #2
  }
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3728      	adds	r7, #40	; 0x28
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}
 80125e2:	bf00      	nop
 80125e4:	08013ef9 	.word	0x08013ef9
 80125e8:	08013f8f 	.word	0x08013f8f
 80125ec:	08014111 	.word	0x08014111

080125f0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b08a      	sub	sp, #40	; 0x28
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	4613      	mov	r3, r2
 80125fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012604:	2b20      	cmp	r3, #32
 8012606:	d137      	bne.n	8012678 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d002      	beq.n	8012614 <HAL_UART_Receive_DMA+0x24>
 801260e:	88fb      	ldrh	r3, [r7, #6]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d101      	bne.n	8012618 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8012614:	2301      	movs	r3, #1
 8012616:	e030      	b.n	801267a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2200      	movs	r2, #0
 801261c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	4a18      	ldr	r2, [pc, #96]	; (8012684 <HAL_UART_Receive_DMA+0x94>)
 8012624:	4293      	cmp	r3, r2
 8012626:	d01f      	beq.n	8012668 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	685b      	ldr	r3, [r3, #4]
 801262e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012632:	2b00      	cmp	r3, #0
 8012634:	d018      	beq.n	8012668 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	e853 3f00 	ldrex	r3, [r3]
 8012642:	613b      	str	r3, [r7, #16]
   return(result);
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801264a:	627b      	str	r3, [r7, #36]	; 0x24
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	461a      	mov	r2, r3
 8012652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012654:	623b      	str	r3, [r7, #32]
 8012656:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012658:	69f9      	ldr	r1, [r7, #28]
 801265a:	6a3a      	ldr	r2, [r7, #32]
 801265c:	e841 2300 	strex	r3, r2, [r1]
 8012660:	61bb      	str	r3, [r7, #24]
   return(result);
 8012662:	69bb      	ldr	r3, [r7, #24]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d1e6      	bne.n	8012636 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012668:	88fb      	ldrh	r3, [r7, #6]
 801266a:	461a      	mov	r2, r3
 801266c:	68b9      	ldr	r1, [r7, #8]
 801266e:	68f8      	ldr	r0, [r7, #12]
 8012670:	f001 faf4 	bl	8013c5c <UART_Start_Receive_DMA>
 8012674:	4603      	mov	r3, r0
 8012676:	e000      	b.n	801267a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012678:	2302      	movs	r3, #2
  }
}
 801267a:	4618      	mov	r0, r3
 801267c:	3728      	adds	r7, #40	; 0x28
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}
 8012682:	bf00      	nop
 8012684:	58000c00 	.word	0x58000c00

08012688 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012688:	b580      	push	{r7, lr}
 801268a:	b0ba      	sub	sp, #232	; 0xe8
 801268c:	af00      	add	r7, sp, #0
 801268e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	69db      	ldr	r3, [r3, #28]
 8012696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	689b      	ldr	r3, [r3, #8]
 80126aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80126ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80126b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80126b6:	4013      	ands	r3, r2
 80126b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80126bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d11b      	bne.n	80126fc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80126c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126c8:	f003 0320 	and.w	r3, r3, #32
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d015      	beq.n	80126fc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80126d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80126d4:	f003 0320 	and.w	r3, r3, #32
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d105      	bne.n	80126e8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80126dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d009      	beq.n	80126fc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	f000 8377 	beq.w	8012de0 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	4798      	blx	r3
      }
      return;
 80126fa:	e371      	b.n	8012de0 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80126fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012700:	2b00      	cmp	r3, #0
 8012702:	f000 8123 	beq.w	801294c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012706:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801270a:	4b8d      	ldr	r3, [pc, #564]	; (8012940 <HAL_UART_IRQHandler+0x2b8>)
 801270c:	4013      	ands	r3, r2
 801270e:	2b00      	cmp	r3, #0
 8012710:	d106      	bne.n	8012720 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012712:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012716:	4b8b      	ldr	r3, [pc, #556]	; (8012944 <HAL_UART_IRQHandler+0x2bc>)
 8012718:	4013      	ands	r3, r2
 801271a:	2b00      	cmp	r3, #0
 801271c:	f000 8116 	beq.w	801294c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012724:	f003 0301 	and.w	r3, r3, #1
 8012728:	2b00      	cmp	r3, #0
 801272a:	d011      	beq.n	8012750 <HAL_UART_IRQHandler+0xc8>
 801272c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012734:	2b00      	cmp	r3, #0
 8012736:	d00b      	beq.n	8012750 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2201      	movs	r2, #1
 801273e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012746:	f043 0201 	orr.w	r2, r3, #1
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012754:	f003 0302 	and.w	r3, r3, #2
 8012758:	2b00      	cmp	r3, #0
 801275a:	d011      	beq.n	8012780 <HAL_UART_IRQHandler+0xf8>
 801275c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012760:	f003 0301 	and.w	r3, r3, #1
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00b      	beq.n	8012780 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2202      	movs	r2, #2
 801276e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012776:	f043 0204 	orr.w	r2, r3, #4
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012784:	f003 0304 	and.w	r3, r3, #4
 8012788:	2b00      	cmp	r3, #0
 801278a:	d011      	beq.n	80127b0 <HAL_UART_IRQHandler+0x128>
 801278c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d00b      	beq.n	80127b0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	2204      	movs	r2, #4
 801279e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127a6:	f043 0202 	orr.w	r2, r3, #2
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80127b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127b4:	f003 0308 	and.w	r3, r3, #8
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d017      	beq.n	80127ec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80127bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127c0:	f003 0320 	and.w	r3, r3, #32
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d105      	bne.n	80127d4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80127c8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80127cc:	4b5c      	ldr	r3, [pc, #368]	; (8012940 <HAL_UART_IRQHandler+0x2b8>)
 80127ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00b      	beq.n	80127ec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	2208      	movs	r2, #8
 80127da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80127e2:	f043 0208 	orr.w	r2, r3, #8
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80127ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d012      	beq.n	801281e <HAL_UART_IRQHandler+0x196>
 80127f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012800:	2b00      	cmp	r3, #0
 8012802:	d00c      	beq.n	801281e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801280c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012814:	f043 0220 	orr.w	r2, r3, #32
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012824:	2b00      	cmp	r3, #0
 8012826:	f000 82dd 	beq.w	8012de4 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801282a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801282e:	f003 0320 	and.w	r3, r3, #32
 8012832:	2b00      	cmp	r3, #0
 8012834:	d013      	beq.n	801285e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801283a:	f003 0320 	and.w	r3, r3, #32
 801283e:	2b00      	cmp	r3, #0
 8012840:	d105      	bne.n	801284e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801284a:	2b00      	cmp	r3, #0
 801284c:	d007      	beq.n	801285e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012852:	2b00      	cmp	r3, #0
 8012854:	d003      	beq.n	801285e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012864:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	689b      	ldr	r3, [r3, #8]
 801286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012872:	2b40      	cmp	r3, #64	; 0x40
 8012874:	d005      	beq.n	8012882 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801287a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801287e:	2b00      	cmp	r3, #0
 8012880:	d054      	beq.n	801292c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012882:	6878      	ldr	r0, [r7, #4]
 8012884:	f001 fad2 	bl	8013e2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	689b      	ldr	r3, [r3, #8]
 801288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012892:	2b40      	cmp	r3, #64	; 0x40
 8012894:	d146      	bne.n	8012924 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	3308      	adds	r3, #8
 801289c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80128a4:	e853 3f00 	ldrex	r3, [r3]
 80128a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80128ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80128b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80128b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	3308      	adds	r3, #8
 80128be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80128c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80128c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80128ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80128d2:	e841 2300 	strex	r3, r2, [r1]
 80128d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80128da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d1d9      	bne.n	8012896 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d017      	beq.n	801291c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128f2:	4a15      	ldr	r2, [pc, #84]	; (8012948 <HAL_UART_IRQHandler+0x2c0>)
 80128f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128fc:	4618      	mov	r0, r3
 80128fe:	f7f7 fb95 	bl	800a02c <HAL_DMA_Abort_IT>
 8012902:	4603      	mov	r3, r0
 8012904:	2b00      	cmp	r3, #0
 8012906:	d019      	beq.n	801293c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012910:	687a      	ldr	r2, [r7, #4]
 8012912:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012916:	4610      	mov	r0, r2
 8012918:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801291a:	e00f      	b.n	801293c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f7f1 fc2b 	bl	8004178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012922:	e00b      	b.n	801293c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f7f1 fc27 	bl	8004178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801292a:	e007      	b.n	801293c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801292c:	6878      	ldr	r0, [r7, #4]
 801292e:	f7f1 fc23 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801293a:	e253      	b.n	8012de4 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801293c:	bf00      	nop
    return;
 801293e:	e251      	b.n	8012de4 <HAL_UART_IRQHandler+0x75c>
 8012940:	10000001 	.word	0x10000001
 8012944:	04000120 	.word	0x04000120
 8012948:	08014191 	.word	0x08014191

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012950:	2b01      	cmp	r3, #1
 8012952:	f040 81e7 	bne.w	8012d24 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801295a:	f003 0310 	and.w	r3, r3, #16
 801295e:	2b00      	cmp	r3, #0
 8012960:	f000 81e0 	beq.w	8012d24 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012968:	f003 0310 	and.w	r3, r3, #16
 801296c:	2b00      	cmp	r3, #0
 801296e:	f000 81d9 	beq.w	8012d24 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	2210      	movs	r2, #16
 8012978:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	689b      	ldr	r3, [r3, #8]
 8012980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012984:	2b40      	cmp	r3, #64	; 0x40
 8012986:	f040 8151 	bne.w	8012c2c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4a96      	ldr	r2, [pc, #600]	; (8012bec <HAL_UART_IRQHandler+0x564>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d068      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4a93      	ldr	r2, [pc, #588]	; (8012bf0 <HAL_UART_IRQHandler+0x568>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d061      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	4a91      	ldr	r2, [pc, #580]	; (8012bf4 <HAL_UART_IRQHandler+0x56c>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d05a      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4a8e      	ldr	r2, [pc, #568]	; (8012bf8 <HAL_UART_IRQHandler+0x570>)
 80129be:	4293      	cmp	r3, r2
 80129c0:	d053      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	4a8c      	ldr	r2, [pc, #560]	; (8012bfc <HAL_UART_IRQHandler+0x574>)
 80129cc:	4293      	cmp	r3, r2
 80129ce:	d04c      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	4a89      	ldr	r2, [pc, #548]	; (8012c00 <HAL_UART_IRQHandler+0x578>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d045      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	4a87      	ldr	r2, [pc, #540]	; (8012c04 <HAL_UART_IRQHandler+0x57c>)
 80129e8:	4293      	cmp	r3, r2
 80129ea:	d03e      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	4a84      	ldr	r2, [pc, #528]	; (8012c08 <HAL_UART_IRQHandler+0x580>)
 80129f6:	4293      	cmp	r3, r2
 80129f8:	d037      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	4a82      	ldr	r2, [pc, #520]	; (8012c0c <HAL_UART_IRQHandler+0x584>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d030      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a7f      	ldr	r2, [pc, #508]	; (8012c10 <HAL_UART_IRQHandler+0x588>)
 8012a12:	4293      	cmp	r3, r2
 8012a14:	d029      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	4a7d      	ldr	r2, [pc, #500]	; (8012c14 <HAL_UART_IRQHandler+0x58c>)
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d022      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	4a7a      	ldr	r2, [pc, #488]	; (8012c18 <HAL_UART_IRQHandler+0x590>)
 8012a2e:	4293      	cmp	r3, r2
 8012a30:	d01b      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	4a78      	ldr	r2, [pc, #480]	; (8012c1c <HAL_UART_IRQHandler+0x594>)
 8012a3c:	4293      	cmp	r3, r2
 8012a3e:	d014      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	4a75      	ldr	r2, [pc, #468]	; (8012c20 <HAL_UART_IRQHandler+0x598>)
 8012a4a:	4293      	cmp	r3, r2
 8012a4c:	d00d      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4a73      	ldr	r2, [pc, #460]	; (8012c24 <HAL_UART_IRQHandler+0x59c>)
 8012a58:	4293      	cmp	r3, r2
 8012a5a:	d006      	beq.n	8012a6a <HAL_UART_IRQHandler+0x3e2>
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a70      	ldr	r2, [pc, #448]	; (8012c28 <HAL_UART_IRQHandler+0x5a0>)
 8012a66:	4293      	cmp	r3, r2
 8012a68:	d106      	bne.n	8012a78 <HAL_UART_IRQHandler+0x3f0>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	685b      	ldr	r3, [r3, #4]
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	e005      	b.n	8012a84 <HAL_UART_IRQHandler+0x3fc>
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	f000 81ab 	beq.w	8012de8 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012a98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	f080 81a3 	bcs.w	8012de8 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012aa8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ab2:	69db      	ldr	r3, [r3, #28]
 8012ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012ab8:	f000 8087 	beq.w	8012bca <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ac4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012ac8:	e853 3f00 	ldrex	r3, [r3]
 8012acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012ad0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012ad8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012aea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012af6:	e841 2300 	strex	r3, r2, [r1]
 8012afa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d1da      	bne.n	8012abc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	3308      	adds	r3, #8
 8012b0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b10:	e853 3f00 	ldrex	r3, [r3]
 8012b14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b18:	f023 0301 	bic.w	r3, r3, #1
 8012b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	3308      	adds	r3, #8
 8012b26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012b2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012b32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012b36:	e841 2300 	strex	r3, r2, [r1]
 8012b3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e1      	bne.n	8012b06 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	3308      	adds	r3, #8
 8012b48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b4c:	e853 3f00 	ldrex	r3, [r3]
 8012b50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	3308      	adds	r3, #8
 8012b62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012b66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012b6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012b6e:	e841 2300 	strex	r3, r2, [r1]
 8012b72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012b74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d1e3      	bne.n	8012b42 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2220      	movs	r2, #32
 8012b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2200      	movs	r2, #0
 8012b86:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b90:	e853 3f00 	ldrex	r3, [r3]
 8012b94:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b98:	f023 0310 	bic.w	r3, r3, #16
 8012b9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8012bac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012bae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012bb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012bb2:	e841 2300 	strex	r3, r2, [r1]
 8012bb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1e4      	bne.n	8012b88 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	f7f6 ff13 	bl	80099f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	2202      	movs	r2, #2
 8012bce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012bdc:	b29b      	uxth	r3, r3
 8012bde:	1ad3      	subs	r3, r2, r3
 8012be0:	b29b      	uxth	r3, r3
 8012be2:	4619      	mov	r1, r3
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f7f1 f9bf 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012bea:	e0fd      	b.n	8012de8 <HAL_UART_IRQHandler+0x760>
 8012bec:	40020010 	.word	0x40020010
 8012bf0:	40020028 	.word	0x40020028
 8012bf4:	40020040 	.word	0x40020040
 8012bf8:	40020058 	.word	0x40020058
 8012bfc:	40020070 	.word	0x40020070
 8012c00:	40020088 	.word	0x40020088
 8012c04:	400200a0 	.word	0x400200a0
 8012c08:	400200b8 	.word	0x400200b8
 8012c0c:	40020410 	.word	0x40020410
 8012c10:	40020428 	.word	0x40020428
 8012c14:	40020440 	.word	0x40020440
 8012c18:	40020458 	.word	0x40020458
 8012c1c:	40020470 	.word	0x40020470
 8012c20:	40020488 	.word	0x40020488
 8012c24:	400204a0 	.word	0x400204a0
 8012c28:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c38:	b29b      	uxth	r3, r3
 8012c3a:	1ad3      	subs	r3, r2, r3
 8012c3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012c46:	b29b      	uxth	r3, r3
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f000 80cf 	beq.w	8012dec <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012c4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f000 80ca 	beq.w	8012dec <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c60:	e853 3f00 	ldrex	r3, [r3]
 8012c64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012c6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	461a      	mov	r2, r3
 8012c76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8012c7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012c80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c82:	e841 2300 	strex	r3, r2, [r1]
 8012c86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d1e4      	bne.n	8012c58 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	3308      	adds	r3, #8
 8012c94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	e853 3f00 	ldrex	r3, [r3]
 8012c9c:	623b      	str	r3, [r7, #32]
   return(result);
 8012c9e:	6a3a      	ldr	r2, [r7, #32]
 8012ca0:	4b55      	ldr	r3, [pc, #340]	; (8012df8 <HAL_UART_IRQHandler+0x770>)
 8012ca2:	4013      	ands	r3, r2
 8012ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	3308      	adds	r3, #8
 8012cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8012cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012cba:	e841 2300 	strex	r3, r2, [r1]
 8012cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d1e3      	bne.n	8012c8e <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	2220      	movs	r2, #32
 8012cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ce0:	693b      	ldr	r3, [r7, #16]
 8012ce2:	e853 3f00 	ldrex	r3, [r3]
 8012ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f023 0310 	bic.w	r3, r3, #16
 8012cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012cfc:	61fb      	str	r3, [r7, #28]
 8012cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d00:	69b9      	ldr	r1, [r7, #24]
 8012d02:	69fa      	ldr	r2, [r7, #28]
 8012d04:	e841 2300 	strex	r3, r2, [r1]
 8012d08:	617b      	str	r3, [r7, #20]
   return(result);
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d1e4      	bne.n	8012cda <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2202      	movs	r2, #2
 8012d14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7f1 f923 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012d22:	e063      	b.n	8012dec <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d00e      	beq.n	8012d4e <HAL_UART_IRQHandler+0x6c6>
 8012d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d008      	beq.n	8012d4e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f001 fa63 	bl	8014212 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012d4c:	e051      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d014      	beq.n	8012d84 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d105      	bne.n	8012d72 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d008      	beq.n	8012d84 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d03a      	beq.n	8012df0 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	4798      	blx	r3
    }
    return;
 8012d82:	e035      	b.n	8012df0 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d009      	beq.n	8012da4 <HAL_UART_IRQHandler+0x71c>
 8012d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d003      	beq.n	8012da4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012d9c:	6878      	ldr	r0, [r7, #4]
 8012d9e:	f001 fa0d 	bl	80141bc <UART_EndTransmit_IT>
    return;
 8012da2:	e026      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d009      	beq.n	8012dc4 <HAL_UART_IRQHandler+0x73c>
 8012db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d003      	beq.n	8012dc4 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012dbc:	6878      	ldr	r0, [r7, #4]
 8012dbe:	f001 fa3c 	bl	801423a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012dc2:	e016      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d010      	beq.n	8012df2 <HAL_UART_IRQHandler+0x76a>
 8012dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	da0c      	bge.n	8012df2 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f001 fa24 	bl	8014226 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012dde:	e008      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
      return;
 8012de0:	bf00      	nop
 8012de2:	e006      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
    return;
 8012de4:	bf00      	nop
 8012de6:	e004      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
      return;
 8012de8:	bf00      	nop
 8012dea:	e002      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
      return;
 8012dec:	bf00      	nop
 8012dee:	e000      	b.n	8012df2 <HAL_UART_IRQHandler+0x76a>
    return;
 8012df0:	bf00      	nop
  }
}
 8012df2:	37e8      	adds	r7, #232	; 0xe8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	effffffe 	.word	0xeffffffe

08012dfc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012e04:	bf00      	nop
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr

08012e10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012e28:	b092      	sub	sp, #72	; 0x48
 8012e2a:	af00      	add	r7, sp, #0
 8012e2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012e2e:	2300      	movs	r3, #0
 8012e30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	689a      	ldr	r2, [r3, #8]
 8012e38:	697b      	ldr	r3, [r7, #20]
 8012e3a:	691b      	ldr	r3, [r3, #16]
 8012e3c:	431a      	orrs	r2, r3
 8012e3e:	697b      	ldr	r3, [r7, #20]
 8012e40:	695b      	ldr	r3, [r3, #20]
 8012e42:	431a      	orrs	r2, r3
 8012e44:	697b      	ldr	r3, [r7, #20]
 8012e46:	69db      	ldr	r3, [r3, #28]
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	4bbe      	ldr	r3, [pc, #760]	; (801314c <UART_SetConfig+0x328>)
 8012e54:	4013      	ands	r3, r2
 8012e56:	697a      	ldr	r2, [r7, #20]
 8012e58:	6812      	ldr	r2, [r2, #0]
 8012e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012e5c:	430b      	orrs	r3, r1
 8012e5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012e60:	697b      	ldr	r3, [r7, #20]
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	685b      	ldr	r3, [r3, #4]
 8012e66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012e6a:	697b      	ldr	r3, [r7, #20]
 8012e6c:	68da      	ldr	r2, [r3, #12]
 8012e6e:	697b      	ldr	r3, [r7, #20]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	430a      	orrs	r2, r1
 8012e74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	699b      	ldr	r3, [r3, #24]
 8012e7a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012e7c:	697b      	ldr	r3, [r7, #20]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4ab3      	ldr	r2, [pc, #716]	; (8013150 <UART_SetConfig+0x32c>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d004      	beq.n	8012e90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012e86:	697b      	ldr	r3, [r7, #20]
 8012e88:	6a1b      	ldr	r3, [r3, #32]
 8012e8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012e90:	697b      	ldr	r3, [r7, #20]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	689a      	ldr	r2, [r3, #8]
 8012e96:	4baf      	ldr	r3, [pc, #700]	; (8013154 <UART_SetConfig+0x330>)
 8012e98:	4013      	ands	r3, r2
 8012e9a:	697a      	ldr	r2, [r7, #20]
 8012e9c:	6812      	ldr	r2, [r2, #0]
 8012e9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ea0:	430b      	orrs	r3, r1
 8012ea2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012ea4:	697b      	ldr	r3, [r7, #20]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eaa:	f023 010f 	bic.w	r1, r3, #15
 8012eae:	697b      	ldr	r3, [r7, #20]
 8012eb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012eb2:	697b      	ldr	r3, [r7, #20]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	430a      	orrs	r2, r1
 8012eb8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012eba:	697b      	ldr	r3, [r7, #20]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	4aa6      	ldr	r2, [pc, #664]	; (8013158 <UART_SetConfig+0x334>)
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d177      	bne.n	8012fb4 <UART_SetConfig+0x190>
 8012ec4:	4ba5      	ldr	r3, [pc, #660]	; (801315c <UART_SetConfig+0x338>)
 8012ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012ec8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012ecc:	2b28      	cmp	r3, #40	; 0x28
 8012ece:	d86d      	bhi.n	8012fac <UART_SetConfig+0x188>
 8012ed0:	a201      	add	r2, pc, #4	; (adr r2, 8012ed8 <UART_SetConfig+0xb4>)
 8012ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed6:	bf00      	nop
 8012ed8:	08012f7d 	.word	0x08012f7d
 8012edc:	08012fad 	.word	0x08012fad
 8012ee0:	08012fad 	.word	0x08012fad
 8012ee4:	08012fad 	.word	0x08012fad
 8012ee8:	08012fad 	.word	0x08012fad
 8012eec:	08012fad 	.word	0x08012fad
 8012ef0:	08012fad 	.word	0x08012fad
 8012ef4:	08012fad 	.word	0x08012fad
 8012ef8:	08012f85 	.word	0x08012f85
 8012efc:	08012fad 	.word	0x08012fad
 8012f00:	08012fad 	.word	0x08012fad
 8012f04:	08012fad 	.word	0x08012fad
 8012f08:	08012fad 	.word	0x08012fad
 8012f0c:	08012fad 	.word	0x08012fad
 8012f10:	08012fad 	.word	0x08012fad
 8012f14:	08012fad 	.word	0x08012fad
 8012f18:	08012f8d 	.word	0x08012f8d
 8012f1c:	08012fad 	.word	0x08012fad
 8012f20:	08012fad 	.word	0x08012fad
 8012f24:	08012fad 	.word	0x08012fad
 8012f28:	08012fad 	.word	0x08012fad
 8012f2c:	08012fad 	.word	0x08012fad
 8012f30:	08012fad 	.word	0x08012fad
 8012f34:	08012fad 	.word	0x08012fad
 8012f38:	08012f95 	.word	0x08012f95
 8012f3c:	08012fad 	.word	0x08012fad
 8012f40:	08012fad 	.word	0x08012fad
 8012f44:	08012fad 	.word	0x08012fad
 8012f48:	08012fad 	.word	0x08012fad
 8012f4c:	08012fad 	.word	0x08012fad
 8012f50:	08012fad 	.word	0x08012fad
 8012f54:	08012fad 	.word	0x08012fad
 8012f58:	08012f9d 	.word	0x08012f9d
 8012f5c:	08012fad 	.word	0x08012fad
 8012f60:	08012fad 	.word	0x08012fad
 8012f64:	08012fad 	.word	0x08012fad
 8012f68:	08012fad 	.word	0x08012fad
 8012f6c:	08012fad 	.word	0x08012fad
 8012f70:	08012fad 	.word	0x08012fad
 8012f74:	08012fad 	.word	0x08012fad
 8012f78:	08012fa5 	.word	0x08012fa5
 8012f7c:	2301      	movs	r3, #1
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f82:	e222      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012f84:	2304      	movs	r3, #4
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8a:	e21e      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012f8c:	2308      	movs	r3, #8
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f92:	e21a      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012f94:	2310      	movs	r3, #16
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9a:	e216      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012f9c:	2320      	movs	r3, #32
 8012f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fa2:	e212      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012fa4:	2340      	movs	r3, #64	; 0x40
 8012fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012faa:	e20e      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012fac:	2380      	movs	r3, #128	; 0x80
 8012fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fb2:	e20a      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a69      	ldr	r2, [pc, #420]	; (8013160 <UART_SetConfig+0x33c>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d130      	bne.n	8013020 <UART_SetConfig+0x1fc>
 8012fbe:	4b67      	ldr	r3, [pc, #412]	; (801315c <UART_SetConfig+0x338>)
 8012fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fc2:	f003 0307 	and.w	r3, r3, #7
 8012fc6:	2b05      	cmp	r3, #5
 8012fc8:	d826      	bhi.n	8013018 <UART_SetConfig+0x1f4>
 8012fca:	a201      	add	r2, pc, #4	; (adr r2, 8012fd0 <UART_SetConfig+0x1ac>)
 8012fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fd0:	08012fe9 	.word	0x08012fe9
 8012fd4:	08012ff1 	.word	0x08012ff1
 8012fd8:	08012ff9 	.word	0x08012ff9
 8012fdc:	08013001 	.word	0x08013001
 8012fe0:	08013009 	.word	0x08013009
 8012fe4:	08013011 	.word	0x08013011
 8012fe8:	2300      	movs	r3, #0
 8012fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fee:	e1ec      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012ff0:	2304      	movs	r3, #4
 8012ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ff6:	e1e8      	b.n	80133ca <UART_SetConfig+0x5a6>
 8012ff8:	2308      	movs	r3, #8
 8012ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ffe:	e1e4      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013000:	2310      	movs	r3, #16
 8013002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013006:	e1e0      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013008:	2320      	movs	r3, #32
 801300a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801300e:	e1dc      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013010:	2340      	movs	r3, #64	; 0x40
 8013012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013016:	e1d8      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013018:	2380      	movs	r3, #128	; 0x80
 801301a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801301e:	e1d4      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4a4f      	ldr	r2, [pc, #316]	; (8013164 <UART_SetConfig+0x340>)
 8013026:	4293      	cmp	r3, r2
 8013028:	d130      	bne.n	801308c <UART_SetConfig+0x268>
 801302a:	4b4c      	ldr	r3, [pc, #304]	; (801315c <UART_SetConfig+0x338>)
 801302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801302e:	f003 0307 	and.w	r3, r3, #7
 8013032:	2b05      	cmp	r3, #5
 8013034:	d826      	bhi.n	8013084 <UART_SetConfig+0x260>
 8013036:	a201      	add	r2, pc, #4	; (adr r2, 801303c <UART_SetConfig+0x218>)
 8013038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801303c:	08013055 	.word	0x08013055
 8013040:	0801305d 	.word	0x0801305d
 8013044:	08013065 	.word	0x08013065
 8013048:	0801306d 	.word	0x0801306d
 801304c:	08013075 	.word	0x08013075
 8013050:	0801307d 	.word	0x0801307d
 8013054:	2300      	movs	r3, #0
 8013056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801305a:	e1b6      	b.n	80133ca <UART_SetConfig+0x5a6>
 801305c:	2304      	movs	r3, #4
 801305e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013062:	e1b2      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013064:	2308      	movs	r3, #8
 8013066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801306a:	e1ae      	b.n	80133ca <UART_SetConfig+0x5a6>
 801306c:	2310      	movs	r3, #16
 801306e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013072:	e1aa      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013074:	2320      	movs	r3, #32
 8013076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801307a:	e1a6      	b.n	80133ca <UART_SetConfig+0x5a6>
 801307c:	2340      	movs	r3, #64	; 0x40
 801307e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013082:	e1a2      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013084:	2380      	movs	r3, #128	; 0x80
 8013086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801308a:	e19e      	b.n	80133ca <UART_SetConfig+0x5a6>
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4a35      	ldr	r2, [pc, #212]	; (8013168 <UART_SetConfig+0x344>)
 8013092:	4293      	cmp	r3, r2
 8013094:	d130      	bne.n	80130f8 <UART_SetConfig+0x2d4>
 8013096:	4b31      	ldr	r3, [pc, #196]	; (801315c <UART_SetConfig+0x338>)
 8013098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801309a:	f003 0307 	and.w	r3, r3, #7
 801309e:	2b05      	cmp	r3, #5
 80130a0:	d826      	bhi.n	80130f0 <UART_SetConfig+0x2cc>
 80130a2:	a201      	add	r2, pc, #4	; (adr r2, 80130a8 <UART_SetConfig+0x284>)
 80130a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a8:	080130c1 	.word	0x080130c1
 80130ac:	080130c9 	.word	0x080130c9
 80130b0:	080130d1 	.word	0x080130d1
 80130b4:	080130d9 	.word	0x080130d9
 80130b8:	080130e1 	.word	0x080130e1
 80130bc:	080130e9 	.word	0x080130e9
 80130c0:	2300      	movs	r3, #0
 80130c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130c6:	e180      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130c8:	2304      	movs	r3, #4
 80130ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ce:	e17c      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130d0:	2308      	movs	r3, #8
 80130d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130d6:	e178      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130d8:	2310      	movs	r3, #16
 80130da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130de:	e174      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130e0:	2320      	movs	r3, #32
 80130e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130e6:	e170      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130e8:	2340      	movs	r3, #64	; 0x40
 80130ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ee:	e16c      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130f0:	2380      	movs	r3, #128	; 0x80
 80130f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130f6:	e168      	b.n	80133ca <UART_SetConfig+0x5a6>
 80130f8:	697b      	ldr	r3, [r7, #20]
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	4a1b      	ldr	r2, [pc, #108]	; (801316c <UART_SetConfig+0x348>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d142      	bne.n	8013188 <UART_SetConfig+0x364>
 8013102:	4b16      	ldr	r3, [pc, #88]	; (801315c <UART_SetConfig+0x338>)
 8013104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013106:	f003 0307 	and.w	r3, r3, #7
 801310a:	2b05      	cmp	r3, #5
 801310c:	d838      	bhi.n	8013180 <UART_SetConfig+0x35c>
 801310e:	a201      	add	r2, pc, #4	; (adr r2, 8013114 <UART_SetConfig+0x2f0>)
 8013110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013114:	0801312d 	.word	0x0801312d
 8013118:	08013135 	.word	0x08013135
 801311c:	0801313d 	.word	0x0801313d
 8013120:	08013145 	.word	0x08013145
 8013124:	08013171 	.word	0x08013171
 8013128:	08013179 	.word	0x08013179
 801312c:	2300      	movs	r3, #0
 801312e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013132:	e14a      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013134:	2304      	movs	r3, #4
 8013136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801313a:	e146      	b.n	80133ca <UART_SetConfig+0x5a6>
 801313c:	2308      	movs	r3, #8
 801313e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013142:	e142      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013144:	2310      	movs	r3, #16
 8013146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801314a:	e13e      	b.n	80133ca <UART_SetConfig+0x5a6>
 801314c:	cfff69f3 	.word	0xcfff69f3
 8013150:	58000c00 	.word	0x58000c00
 8013154:	11fff4ff 	.word	0x11fff4ff
 8013158:	40011000 	.word	0x40011000
 801315c:	58024400 	.word	0x58024400
 8013160:	40004400 	.word	0x40004400
 8013164:	40004800 	.word	0x40004800
 8013168:	40004c00 	.word	0x40004c00
 801316c:	40005000 	.word	0x40005000
 8013170:	2320      	movs	r3, #32
 8013172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013176:	e128      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013178:	2340      	movs	r3, #64	; 0x40
 801317a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317e:	e124      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013180:	2380      	movs	r3, #128	; 0x80
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013186:	e120      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013188:	697b      	ldr	r3, [r7, #20]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4acb      	ldr	r2, [pc, #812]	; (80134bc <UART_SetConfig+0x698>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d176      	bne.n	8013280 <UART_SetConfig+0x45c>
 8013192:	4bcb      	ldr	r3, [pc, #812]	; (80134c0 <UART_SetConfig+0x69c>)
 8013194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013196:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801319a:	2b28      	cmp	r3, #40	; 0x28
 801319c:	d86c      	bhi.n	8013278 <UART_SetConfig+0x454>
 801319e:	a201      	add	r2, pc, #4	; (adr r2, 80131a4 <UART_SetConfig+0x380>)
 80131a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131a4:	08013249 	.word	0x08013249
 80131a8:	08013279 	.word	0x08013279
 80131ac:	08013279 	.word	0x08013279
 80131b0:	08013279 	.word	0x08013279
 80131b4:	08013279 	.word	0x08013279
 80131b8:	08013279 	.word	0x08013279
 80131bc:	08013279 	.word	0x08013279
 80131c0:	08013279 	.word	0x08013279
 80131c4:	08013251 	.word	0x08013251
 80131c8:	08013279 	.word	0x08013279
 80131cc:	08013279 	.word	0x08013279
 80131d0:	08013279 	.word	0x08013279
 80131d4:	08013279 	.word	0x08013279
 80131d8:	08013279 	.word	0x08013279
 80131dc:	08013279 	.word	0x08013279
 80131e0:	08013279 	.word	0x08013279
 80131e4:	08013259 	.word	0x08013259
 80131e8:	08013279 	.word	0x08013279
 80131ec:	08013279 	.word	0x08013279
 80131f0:	08013279 	.word	0x08013279
 80131f4:	08013279 	.word	0x08013279
 80131f8:	08013279 	.word	0x08013279
 80131fc:	08013279 	.word	0x08013279
 8013200:	08013279 	.word	0x08013279
 8013204:	08013261 	.word	0x08013261
 8013208:	08013279 	.word	0x08013279
 801320c:	08013279 	.word	0x08013279
 8013210:	08013279 	.word	0x08013279
 8013214:	08013279 	.word	0x08013279
 8013218:	08013279 	.word	0x08013279
 801321c:	08013279 	.word	0x08013279
 8013220:	08013279 	.word	0x08013279
 8013224:	08013269 	.word	0x08013269
 8013228:	08013279 	.word	0x08013279
 801322c:	08013279 	.word	0x08013279
 8013230:	08013279 	.word	0x08013279
 8013234:	08013279 	.word	0x08013279
 8013238:	08013279 	.word	0x08013279
 801323c:	08013279 	.word	0x08013279
 8013240:	08013279 	.word	0x08013279
 8013244:	08013271 	.word	0x08013271
 8013248:	2301      	movs	r3, #1
 801324a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801324e:	e0bc      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013250:	2304      	movs	r3, #4
 8013252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013256:	e0b8      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013258:	2308      	movs	r3, #8
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325e:	e0b4      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013260:	2310      	movs	r3, #16
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013266:	e0b0      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013268:	2320      	movs	r3, #32
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801326e:	e0ac      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013270:	2340      	movs	r3, #64	; 0x40
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013276:	e0a8      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013278:	2380      	movs	r3, #128	; 0x80
 801327a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801327e:	e0a4      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	4a8f      	ldr	r2, [pc, #572]	; (80134c4 <UART_SetConfig+0x6a0>)
 8013286:	4293      	cmp	r3, r2
 8013288:	d130      	bne.n	80132ec <UART_SetConfig+0x4c8>
 801328a:	4b8d      	ldr	r3, [pc, #564]	; (80134c0 <UART_SetConfig+0x69c>)
 801328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801328e:	f003 0307 	and.w	r3, r3, #7
 8013292:	2b05      	cmp	r3, #5
 8013294:	d826      	bhi.n	80132e4 <UART_SetConfig+0x4c0>
 8013296:	a201      	add	r2, pc, #4	; (adr r2, 801329c <UART_SetConfig+0x478>)
 8013298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801329c:	080132b5 	.word	0x080132b5
 80132a0:	080132bd 	.word	0x080132bd
 80132a4:	080132c5 	.word	0x080132c5
 80132a8:	080132cd 	.word	0x080132cd
 80132ac:	080132d5 	.word	0x080132d5
 80132b0:	080132dd 	.word	0x080132dd
 80132b4:	2300      	movs	r3, #0
 80132b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ba:	e086      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132bc:	2304      	movs	r3, #4
 80132be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132c2:	e082      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132c4:	2308      	movs	r3, #8
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ca:	e07e      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132cc:	2310      	movs	r3, #16
 80132ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132d2:	e07a      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132d4:	2320      	movs	r3, #32
 80132d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132da:	e076      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132dc:	2340      	movs	r3, #64	; 0x40
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132e2:	e072      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132e4:	2380      	movs	r3, #128	; 0x80
 80132e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ea:	e06e      	b.n	80133ca <UART_SetConfig+0x5a6>
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a75      	ldr	r2, [pc, #468]	; (80134c8 <UART_SetConfig+0x6a4>)
 80132f2:	4293      	cmp	r3, r2
 80132f4:	d130      	bne.n	8013358 <UART_SetConfig+0x534>
 80132f6:	4b72      	ldr	r3, [pc, #456]	; (80134c0 <UART_SetConfig+0x69c>)
 80132f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132fa:	f003 0307 	and.w	r3, r3, #7
 80132fe:	2b05      	cmp	r3, #5
 8013300:	d826      	bhi.n	8013350 <UART_SetConfig+0x52c>
 8013302:	a201      	add	r2, pc, #4	; (adr r2, 8013308 <UART_SetConfig+0x4e4>)
 8013304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013308:	08013321 	.word	0x08013321
 801330c:	08013329 	.word	0x08013329
 8013310:	08013331 	.word	0x08013331
 8013314:	08013339 	.word	0x08013339
 8013318:	08013341 	.word	0x08013341
 801331c:	08013349 	.word	0x08013349
 8013320:	2300      	movs	r3, #0
 8013322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013326:	e050      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013328:	2304      	movs	r3, #4
 801332a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801332e:	e04c      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013330:	2308      	movs	r3, #8
 8013332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013336:	e048      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013338:	2310      	movs	r3, #16
 801333a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801333e:	e044      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013340:	2320      	movs	r3, #32
 8013342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013346:	e040      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013348:	2340      	movs	r3, #64	; 0x40
 801334a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801334e:	e03c      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013350:	2380      	movs	r3, #128	; 0x80
 8013352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013356:	e038      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a5b      	ldr	r2, [pc, #364]	; (80134cc <UART_SetConfig+0x6a8>)
 801335e:	4293      	cmp	r3, r2
 8013360:	d130      	bne.n	80133c4 <UART_SetConfig+0x5a0>
 8013362:	4b57      	ldr	r3, [pc, #348]	; (80134c0 <UART_SetConfig+0x69c>)
 8013364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013366:	f003 0307 	and.w	r3, r3, #7
 801336a:	2b05      	cmp	r3, #5
 801336c:	d826      	bhi.n	80133bc <UART_SetConfig+0x598>
 801336e:	a201      	add	r2, pc, #4	; (adr r2, 8013374 <UART_SetConfig+0x550>)
 8013370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013374:	0801338d 	.word	0x0801338d
 8013378:	08013395 	.word	0x08013395
 801337c:	0801339d 	.word	0x0801339d
 8013380:	080133a5 	.word	0x080133a5
 8013384:	080133ad 	.word	0x080133ad
 8013388:	080133b5 	.word	0x080133b5
 801338c:	2302      	movs	r3, #2
 801338e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013392:	e01a      	b.n	80133ca <UART_SetConfig+0x5a6>
 8013394:	2304      	movs	r3, #4
 8013396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801339a:	e016      	b.n	80133ca <UART_SetConfig+0x5a6>
 801339c:	2308      	movs	r3, #8
 801339e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133a2:	e012      	b.n	80133ca <UART_SetConfig+0x5a6>
 80133a4:	2310      	movs	r3, #16
 80133a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133aa:	e00e      	b.n	80133ca <UART_SetConfig+0x5a6>
 80133ac:	2320      	movs	r3, #32
 80133ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133b2:	e00a      	b.n	80133ca <UART_SetConfig+0x5a6>
 80133b4:	2340      	movs	r3, #64	; 0x40
 80133b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ba:	e006      	b.n	80133ca <UART_SetConfig+0x5a6>
 80133bc:	2380      	movs	r3, #128	; 0x80
 80133be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133c2:	e002      	b.n	80133ca <UART_SetConfig+0x5a6>
 80133c4:	2380      	movs	r3, #128	; 0x80
 80133c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	4a3f      	ldr	r2, [pc, #252]	; (80134cc <UART_SetConfig+0x6a8>)
 80133d0:	4293      	cmp	r3, r2
 80133d2:	f040 80f8 	bne.w	80135c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80133d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80133da:	2b20      	cmp	r3, #32
 80133dc:	dc46      	bgt.n	801346c <UART_SetConfig+0x648>
 80133de:	2b02      	cmp	r3, #2
 80133e0:	f2c0 8082 	blt.w	80134e8 <UART_SetConfig+0x6c4>
 80133e4:	3b02      	subs	r3, #2
 80133e6:	2b1e      	cmp	r3, #30
 80133e8:	d87e      	bhi.n	80134e8 <UART_SetConfig+0x6c4>
 80133ea:	a201      	add	r2, pc, #4	; (adr r2, 80133f0 <UART_SetConfig+0x5cc>)
 80133ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f0:	08013473 	.word	0x08013473
 80133f4:	080134e9 	.word	0x080134e9
 80133f8:	0801347b 	.word	0x0801347b
 80133fc:	080134e9 	.word	0x080134e9
 8013400:	080134e9 	.word	0x080134e9
 8013404:	080134e9 	.word	0x080134e9
 8013408:	0801348b 	.word	0x0801348b
 801340c:	080134e9 	.word	0x080134e9
 8013410:	080134e9 	.word	0x080134e9
 8013414:	080134e9 	.word	0x080134e9
 8013418:	080134e9 	.word	0x080134e9
 801341c:	080134e9 	.word	0x080134e9
 8013420:	080134e9 	.word	0x080134e9
 8013424:	080134e9 	.word	0x080134e9
 8013428:	0801349b 	.word	0x0801349b
 801342c:	080134e9 	.word	0x080134e9
 8013430:	080134e9 	.word	0x080134e9
 8013434:	080134e9 	.word	0x080134e9
 8013438:	080134e9 	.word	0x080134e9
 801343c:	080134e9 	.word	0x080134e9
 8013440:	080134e9 	.word	0x080134e9
 8013444:	080134e9 	.word	0x080134e9
 8013448:	080134e9 	.word	0x080134e9
 801344c:	080134e9 	.word	0x080134e9
 8013450:	080134e9 	.word	0x080134e9
 8013454:	080134e9 	.word	0x080134e9
 8013458:	080134e9 	.word	0x080134e9
 801345c:	080134e9 	.word	0x080134e9
 8013460:	080134e9 	.word	0x080134e9
 8013464:	080134e9 	.word	0x080134e9
 8013468:	080134db 	.word	0x080134db
 801346c:	2b40      	cmp	r3, #64	; 0x40
 801346e:	d037      	beq.n	80134e0 <UART_SetConfig+0x6bc>
 8013470:	e03a      	b.n	80134e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8013472:	f7fc f995 	bl	800f7a0 <HAL_RCCEx_GetD3PCLK1Freq>
 8013476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013478:	e03c      	b.n	80134f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801347a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801347e:	4618      	mov	r0, r3
 8013480:	f7fc f9a4 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013488:	e034      	b.n	80134f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801348a:	f107 0318 	add.w	r3, r7, #24
 801348e:	4618      	mov	r0, r3
 8013490:	f7fc faf0 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013498:	e02c      	b.n	80134f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801349a:	4b09      	ldr	r3, [pc, #36]	; (80134c0 <UART_SetConfig+0x69c>)
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	f003 0320 	and.w	r3, r3, #32
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d016      	beq.n	80134d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80134a6:	4b06      	ldr	r3, [pc, #24]	; (80134c0 <UART_SetConfig+0x69c>)
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	08db      	lsrs	r3, r3, #3
 80134ac:	f003 0303 	and.w	r3, r3, #3
 80134b0:	4a07      	ldr	r2, [pc, #28]	; (80134d0 <UART_SetConfig+0x6ac>)
 80134b2:	fa22 f303 	lsr.w	r3, r2, r3
 80134b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80134b8:	e01c      	b.n	80134f4 <UART_SetConfig+0x6d0>
 80134ba:	bf00      	nop
 80134bc:	40011400 	.word	0x40011400
 80134c0:	58024400 	.word	0x58024400
 80134c4:	40007800 	.word	0x40007800
 80134c8:	40007c00 	.word	0x40007c00
 80134cc:	58000c00 	.word	0x58000c00
 80134d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80134d4:	4b9d      	ldr	r3, [pc, #628]	; (801374c <UART_SetConfig+0x928>)
 80134d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134d8:	e00c      	b.n	80134f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80134da:	4b9d      	ldr	r3, [pc, #628]	; (8013750 <UART_SetConfig+0x92c>)
 80134dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134de:	e009      	b.n	80134f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80134e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80134e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134e6:	e005      	b.n	80134f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80134e8:	2300      	movs	r3, #0
 80134ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80134ec:	2301      	movs	r3, #1
 80134ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80134f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80134f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	f000 81de 	beq.w	80138b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013500:	4a94      	ldr	r2, [pc, #592]	; (8013754 <UART_SetConfig+0x930>)
 8013502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013506:	461a      	mov	r2, r3
 8013508:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801350a:	fbb3 f3f2 	udiv	r3, r3, r2
 801350e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	685a      	ldr	r2, [r3, #4]
 8013514:	4613      	mov	r3, r2
 8013516:	005b      	lsls	r3, r3, #1
 8013518:	4413      	add	r3, r2
 801351a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801351c:	429a      	cmp	r2, r3
 801351e:	d305      	bcc.n	801352c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013528:	429a      	cmp	r2, r3
 801352a:	d903      	bls.n	8013534 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801352c:	2301      	movs	r3, #1
 801352e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013532:	e1c1      	b.n	80138b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013536:	2200      	movs	r2, #0
 8013538:	60bb      	str	r3, [r7, #8]
 801353a:	60fa      	str	r2, [r7, #12]
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	4a84      	ldr	r2, [pc, #528]	; (8013754 <UART_SetConfig+0x930>)
 8013542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013546:	b29b      	uxth	r3, r3
 8013548:	2200      	movs	r2, #0
 801354a:	603b      	str	r3, [r7, #0]
 801354c:	607a      	str	r2, [r7, #4]
 801354e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013552:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013556:	f7ec ff1b 	bl	8000390 <__aeabi_uldivmod>
 801355a:	4602      	mov	r2, r0
 801355c:	460b      	mov	r3, r1
 801355e:	4610      	mov	r0, r2
 8013560:	4619      	mov	r1, r3
 8013562:	f04f 0200 	mov.w	r2, #0
 8013566:	f04f 0300 	mov.w	r3, #0
 801356a:	020b      	lsls	r3, r1, #8
 801356c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8013570:	0202      	lsls	r2, r0, #8
 8013572:	6979      	ldr	r1, [r7, #20]
 8013574:	6849      	ldr	r1, [r1, #4]
 8013576:	0849      	lsrs	r1, r1, #1
 8013578:	2000      	movs	r0, #0
 801357a:	460c      	mov	r4, r1
 801357c:	4605      	mov	r5, r0
 801357e:	eb12 0804 	adds.w	r8, r2, r4
 8013582:	eb43 0905 	adc.w	r9, r3, r5
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	2200      	movs	r2, #0
 801358c:	469a      	mov	sl, r3
 801358e:	4693      	mov	fp, r2
 8013590:	4652      	mov	r2, sl
 8013592:	465b      	mov	r3, fp
 8013594:	4640      	mov	r0, r8
 8013596:	4649      	mov	r1, r9
 8013598:	f7ec fefa 	bl	8000390 <__aeabi_uldivmod>
 801359c:	4602      	mov	r2, r0
 801359e:	460b      	mov	r3, r1
 80135a0:	4613      	mov	r3, r2
 80135a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80135a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80135aa:	d308      	bcc.n	80135be <UART_SetConfig+0x79a>
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80135b2:	d204      	bcs.n	80135be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135ba:	60da      	str	r2, [r3, #12]
 80135bc:	e17c      	b.n	80138b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80135be:	2301      	movs	r3, #1
 80135c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80135c4:	e178      	b.n	80138b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	69db      	ldr	r3, [r3, #28]
 80135ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80135ce:	f040 80c5 	bne.w	801375c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80135d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80135d6:	2b20      	cmp	r3, #32
 80135d8:	dc48      	bgt.n	801366c <UART_SetConfig+0x848>
 80135da:	2b00      	cmp	r3, #0
 80135dc:	db7b      	blt.n	80136d6 <UART_SetConfig+0x8b2>
 80135de:	2b20      	cmp	r3, #32
 80135e0:	d879      	bhi.n	80136d6 <UART_SetConfig+0x8b2>
 80135e2:	a201      	add	r2, pc, #4	; (adr r2, 80135e8 <UART_SetConfig+0x7c4>)
 80135e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e8:	08013673 	.word	0x08013673
 80135ec:	0801367b 	.word	0x0801367b
 80135f0:	080136d7 	.word	0x080136d7
 80135f4:	080136d7 	.word	0x080136d7
 80135f8:	08013683 	.word	0x08013683
 80135fc:	080136d7 	.word	0x080136d7
 8013600:	080136d7 	.word	0x080136d7
 8013604:	080136d7 	.word	0x080136d7
 8013608:	08013693 	.word	0x08013693
 801360c:	080136d7 	.word	0x080136d7
 8013610:	080136d7 	.word	0x080136d7
 8013614:	080136d7 	.word	0x080136d7
 8013618:	080136d7 	.word	0x080136d7
 801361c:	080136d7 	.word	0x080136d7
 8013620:	080136d7 	.word	0x080136d7
 8013624:	080136d7 	.word	0x080136d7
 8013628:	080136a3 	.word	0x080136a3
 801362c:	080136d7 	.word	0x080136d7
 8013630:	080136d7 	.word	0x080136d7
 8013634:	080136d7 	.word	0x080136d7
 8013638:	080136d7 	.word	0x080136d7
 801363c:	080136d7 	.word	0x080136d7
 8013640:	080136d7 	.word	0x080136d7
 8013644:	080136d7 	.word	0x080136d7
 8013648:	080136d7 	.word	0x080136d7
 801364c:	080136d7 	.word	0x080136d7
 8013650:	080136d7 	.word	0x080136d7
 8013654:	080136d7 	.word	0x080136d7
 8013658:	080136d7 	.word	0x080136d7
 801365c:	080136d7 	.word	0x080136d7
 8013660:	080136d7 	.word	0x080136d7
 8013664:	080136d7 	.word	0x080136d7
 8013668:	080136c9 	.word	0x080136c9
 801366c:	2b40      	cmp	r3, #64	; 0x40
 801366e:	d02e      	beq.n	80136ce <UART_SetConfig+0x8aa>
 8013670:	e031      	b.n	80136d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013672:	f7fa f8df 	bl	800d834 <HAL_RCC_GetPCLK1Freq>
 8013676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013678:	e033      	b.n	80136e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801367a:	f7fa f8f1 	bl	800d860 <HAL_RCC_GetPCLK2Freq>
 801367e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013680:	e02f      	b.n	80136e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013686:	4618      	mov	r0, r3
 8013688:	f7fc f8a0 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013690:	e027      	b.n	80136e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013692:	f107 0318 	add.w	r3, r7, #24
 8013696:	4618      	mov	r0, r3
 8013698:	f7fc f9ec 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801369c:	69fb      	ldr	r3, [r7, #28]
 801369e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136a0:	e01f      	b.n	80136e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80136a2:	4b2d      	ldr	r3, [pc, #180]	; (8013758 <UART_SetConfig+0x934>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	f003 0320 	and.w	r3, r3, #32
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d009      	beq.n	80136c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80136ae:	4b2a      	ldr	r3, [pc, #168]	; (8013758 <UART_SetConfig+0x934>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	08db      	lsrs	r3, r3, #3
 80136b4:	f003 0303 	and.w	r3, r3, #3
 80136b8:	4a24      	ldr	r2, [pc, #144]	; (801374c <UART_SetConfig+0x928>)
 80136ba:	fa22 f303 	lsr.w	r3, r2, r3
 80136be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80136c0:	e00f      	b.n	80136e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80136c2:	4b22      	ldr	r3, [pc, #136]	; (801374c <UART_SetConfig+0x928>)
 80136c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136c6:	e00c      	b.n	80136e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136c8:	4b21      	ldr	r3, [pc, #132]	; (8013750 <UART_SetConfig+0x92c>)
 80136ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136cc:	e009      	b.n	80136e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136d4:	e005      	b.n	80136e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80136d6:	2300      	movs	r3, #0
 80136d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80136da:	2301      	movs	r3, #1
 80136dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80136e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80136e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	f000 80e7 	beq.w	80138b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136ea:	697b      	ldr	r3, [r7, #20]
 80136ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ee:	4a19      	ldr	r2, [pc, #100]	; (8013754 <UART_SetConfig+0x930>)
 80136f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136f4:	461a      	mov	r2, r3
 80136f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80136fc:	005a      	lsls	r2, r3, #1
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	085b      	lsrs	r3, r3, #1
 8013704:	441a      	add	r2, r3
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	fbb2 f3f3 	udiv	r3, r2, r3
 801370e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013712:	2b0f      	cmp	r3, #15
 8013714:	d916      	bls.n	8013744 <UART_SetConfig+0x920>
 8013716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801371c:	d212      	bcs.n	8013744 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801371e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013720:	b29b      	uxth	r3, r3
 8013722:	f023 030f 	bic.w	r3, r3, #15
 8013726:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801372a:	085b      	lsrs	r3, r3, #1
 801372c:	b29b      	uxth	r3, r3
 801372e:	f003 0307 	and.w	r3, r3, #7
 8013732:	b29a      	uxth	r2, r3
 8013734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013736:	4313      	orrs	r3, r2
 8013738:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013740:	60da      	str	r2, [r3, #12]
 8013742:	e0b9      	b.n	80138b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013744:	2301      	movs	r3, #1
 8013746:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801374a:	e0b5      	b.n	80138b8 <UART_SetConfig+0xa94>
 801374c:	03d09000 	.word	0x03d09000
 8013750:	003d0900 	.word	0x003d0900
 8013754:	08017408 	.word	0x08017408
 8013758:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801375c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013760:	2b20      	cmp	r3, #32
 8013762:	dc49      	bgt.n	80137f8 <UART_SetConfig+0x9d4>
 8013764:	2b00      	cmp	r3, #0
 8013766:	db7c      	blt.n	8013862 <UART_SetConfig+0xa3e>
 8013768:	2b20      	cmp	r3, #32
 801376a:	d87a      	bhi.n	8013862 <UART_SetConfig+0xa3e>
 801376c:	a201      	add	r2, pc, #4	; (adr r2, 8013774 <UART_SetConfig+0x950>)
 801376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013772:	bf00      	nop
 8013774:	080137ff 	.word	0x080137ff
 8013778:	08013807 	.word	0x08013807
 801377c:	08013863 	.word	0x08013863
 8013780:	08013863 	.word	0x08013863
 8013784:	0801380f 	.word	0x0801380f
 8013788:	08013863 	.word	0x08013863
 801378c:	08013863 	.word	0x08013863
 8013790:	08013863 	.word	0x08013863
 8013794:	0801381f 	.word	0x0801381f
 8013798:	08013863 	.word	0x08013863
 801379c:	08013863 	.word	0x08013863
 80137a0:	08013863 	.word	0x08013863
 80137a4:	08013863 	.word	0x08013863
 80137a8:	08013863 	.word	0x08013863
 80137ac:	08013863 	.word	0x08013863
 80137b0:	08013863 	.word	0x08013863
 80137b4:	0801382f 	.word	0x0801382f
 80137b8:	08013863 	.word	0x08013863
 80137bc:	08013863 	.word	0x08013863
 80137c0:	08013863 	.word	0x08013863
 80137c4:	08013863 	.word	0x08013863
 80137c8:	08013863 	.word	0x08013863
 80137cc:	08013863 	.word	0x08013863
 80137d0:	08013863 	.word	0x08013863
 80137d4:	08013863 	.word	0x08013863
 80137d8:	08013863 	.word	0x08013863
 80137dc:	08013863 	.word	0x08013863
 80137e0:	08013863 	.word	0x08013863
 80137e4:	08013863 	.word	0x08013863
 80137e8:	08013863 	.word	0x08013863
 80137ec:	08013863 	.word	0x08013863
 80137f0:	08013863 	.word	0x08013863
 80137f4:	08013855 	.word	0x08013855
 80137f8:	2b40      	cmp	r3, #64	; 0x40
 80137fa:	d02e      	beq.n	801385a <UART_SetConfig+0xa36>
 80137fc:	e031      	b.n	8013862 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80137fe:	f7fa f819 	bl	800d834 <HAL_RCC_GetPCLK1Freq>
 8013802:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013804:	e033      	b.n	801386e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013806:	f7fa f82b 	bl	800d860 <HAL_RCC_GetPCLK2Freq>
 801380a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801380c:	e02f      	b.n	801386e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801380e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013812:	4618      	mov	r0, r3
 8013814:	f7fb ffda 	bl	800f7cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801381a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801381c:	e027      	b.n	801386e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801381e:	f107 0318 	add.w	r3, r7, #24
 8013822:	4618      	mov	r0, r3
 8013824:	f7fc f926 	bl	800fa74 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801382c:	e01f      	b.n	801386e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801382e:	4b2d      	ldr	r3, [pc, #180]	; (80138e4 <UART_SetConfig+0xac0>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	f003 0320 	and.w	r3, r3, #32
 8013836:	2b00      	cmp	r3, #0
 8013838:	d009      	beq.n	801384e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801383a:	4b2a      	ldr	r3, [pc, #168]	; (80138e4 <UART_SetConfig+0xac0>)
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	08db      	lsrs	r3, r3, #3
 8013840:	f003 0303 	and.w	r3, r3, #3
 8013844:	4a28      	ldr	r2, [pc, #160]	; (80138e8 <UART_SetConfig+0xac4>)
 8013846:	fa22 f303 	lsr.w	r3, r2, r3
 801384a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801384c:	e00f      	b.n	801386e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801384e:	4b26      	ldr	r3, [pc, #152]	; (80138e8 <UART_SetConfig+0xac4>)
 8013850:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013852:	e00c      	b.n	801386e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013854:	4b25      	ldr	r3, [pc, #148]	; (80138ec <UART_SetConfig+0xac8>)
 8013856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013858:	e009      	b.n	801386e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801385a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801385e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013860:	e005      	b.n	801386e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013862:	2300      	movs	r3, #0
 8013864:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013866:	2301      	movs	r3, #1
 8013868:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801386c:	bf00      	nop
    }

    if (pclk != 0U)
 801386e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013870:	2b00      	cmp	r3, #0
 8013872:	d021      	beq.n	80138b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013878:	4a1d      	ldr	r2, [pc, #116]	; (80138f0 <UART_SetConfig+0xacc>)
 801387a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801387e:	461a      	mov	r2, r3
 8013880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013882:	fbb3 f2f2 	udiv	r2, r3, r2
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	085b      	lsrs	r3, r3, #1
 801388c:	441a      	add	r2, r3
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	fbb2 f3f3 	udiv	r3, r2, r3
 8013896:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801389a:	2b0f      	cmp	r3, #15
 801389c:	d909      	bls.n	80138b2 <UART_SetConfig+0xa8e>
 801389e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80138a4:	d205      	bcs.n	80138b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80138a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a8:	b29a      	uxth	r2, r3
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	60da      	str	r2, [r3, #12]
 80138b0:	e002      	b.n	80138b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80138b2:	2301      	movs	r3, #1
 80138b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80138b8:	697b      	ldr	r3, [r7, #20]
 80138ba:	2201      	movs	r2, #1
 80138bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80138c0:	697b      	ldr	r3, [r7, #20]
 80138c2:	2201      	movs	r2, #1
 80138c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	2200      	movs	r2, #0
 80138cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	2200      	movs	r2, #0
 80138d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80138d4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3748      	adds	r7, #72	; 0x48
 80138dc:	46bd      	mov	sp, r7
 80138de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80138e2:	bf00      	nop
 80138e4:	58024400 	.word	0x58024400
 80138e8:	03d09000 	.word	0x03d09000
 80138ec:	003d0900 	.word	0x003d0900
 80138f0:	08017408 	.word	0x08017408

080138f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80138f4:	b480      	push	{r7}
 80138f6:	b083      	sub	sp, #12
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013900:	f003 0301 	and.w	r3, r3, #1
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00a      	beq.n	801391e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	685b      	ldr	r3, [r3, #4]
 801390e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	430a      	orrs	r2, r1
 801391c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013922:	f003 0302 	and.w	r3, r3, #2
 8013926:	2b00      	cmp	r3, #0
 8013928:	d00a      	beq.n	8013940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	430a      	orrs	r2, r1
 801393e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013944:	f003 0304 	and.w	r3, r3, #4
 8013948:	2b00      	cmp	r3, #0
 801394a:	d00a      	beq.n	8013962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	430a      	orrs	r2, r1
 8013960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013966:	f003 0308 	and.w	r3, r3, #8
 801396a:	2b00      	cmp	r3, #0
 801396c:	d00a      	beq.n	8013984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	430a      	orrs	r2, r1
 8013982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013988:	f003 0310 	and.w	r3, r3, #16
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00a      	beq.n	80139a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	689b      	ldr	r3, [r3, #8]
 8013996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	430a      	orrs	r2, r1
 80139a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139aa:	f003 0320 	and.w	r3, r3, #32
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d00a      	beq.n	80139c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	689b      	ldr	r3, [r3, #8]
 80139b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	430a      	orrs	r2, r1
 80139c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d01a      	beq.n	8013a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	430a      	orrs	r2, r1
 80139e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80139f2:	d10a      	bne.n	8013a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	685b      	ldr	r3, [r3, #4]
 80139fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	430a      	orrs	r2, r1
 8013a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d00a      	beq.n	8013a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	685b      	ldr	r3, [r3, #4]
 8013a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	430a      	orrs	r2, r1
 8013a2a:	605a      	str	r2, [r3, #4]
  }
}
 8013a2c:	bf00      	nop
 8013a2e:	370c      	adds	r7, #12
 8013a30:	46bd      	mov	sp, r7
 8013a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a36:	4770      	bx	lr

08013a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b098      	sub	sp, #96	; 0x60
 8013a3c:	af02      	add	r7, sp, #8
 8013a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2200      	movs	r2, #0
 8013a44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013a48:	f7f3 fb40 	bl	80070cc <HAL_GetTick>
 8013a4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	f003 0308 	and.w	r3, r3, #8
 8013a58:	2b08      	cmp	r3, #8
 8013a5a:	d12f      	bne.n	8013abc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a64:	2200      	movs	r2, #0
 8013a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013a6a:	6878      	ldr	r0, [r7, #4]
 8013a6c:	f000 f88e 	bl	8013b8c <UART_WaitOnFlagUntilTimeout>
 8013a70:	4603      	mov	r3, r0
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d022      	beq.n	8013abc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a7e:	e853 3f00 	ldrex	r3, [r3]
 8013a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	461a      	mov	r2, r3
 8013a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a94:	647b      	str	r3, [r7, #68]	; 0x44
 8013a96:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a9c:	e841 2300 	strex	r3, r2, [r1]
 8013aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d1e6      	bne.n	8013a76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	2220      	movs	r2, #32
 8013aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013ab8:	2303      	movs	r3, #3
 8013aba:	e063      	b.n	8013b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	f003 0304 	and.w	r3, r3, #4
 8013ac6:	2b04      	cmp	r3, #4
 8013ac8:	d149      	bne.n	8013b5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013aca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013ace:	9300      	str	r3, [sp, #0]
 8013ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f000 f857 	bl	8013b8c <UART_WaitOnFlagUntilTimeout>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d03c      	beq.n	8013b5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aec:	e853 3f00 	ldrex	r3, [r3]
 8013af0:	623b      	str	r3, [r7, #32]
   return(result);
 8013af2:	6a3b      	ldr	r3, [r7, #32]
 8013af4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013af8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	461a      	mov	r2, r3
 8013b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b02:	633b      	str	r3, [r7, #48]	; 0x30
 8013b04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b0a:	e841 2300 	strex	r3, r2, [r1]
 8013b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d1e6      	bne.n	8013ae4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	3308      	adds	r3, #8
 8013b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	e853 3f00 	ldrex	r3, [r3]
 8013b24:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f023 0301 	bic.w	r3, r3, #1
 8013b2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	3308      	adds	r3, #8
 8013b34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b36:	61fa      	str	r2, [r7, #28]
 8013b38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b3a:	69b9      	ldr	r1, [r7, #24]
 8013b3c:	69fa      	ldr	r2, [r7, #28]
 8013b3e:	e841 2300 	strex	r3, r2, [r1]
 8013b42:	617b      	str	r3, [r7, #20]
   return(result);
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d1e5      	bne.n	8013b16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	2220      	movs	r2, #32
 8013b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2200      	movs	r2, #0
 8013b56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b5a:	2303      	movs	r3, #3
 8013b5c:	e012      	b.n	8013b84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2220      	movs	r2, #32
 8013b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2220      	movs	r2, #32
 8013b6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	2200      	movs	r2, #0
 8013b72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013b82:	2300      	movs	r3, #0
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3758      	adds	r7, #88	; 0x58
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	60f8      	str	r0, [r7, #12]
 8013b94:	60b9      	str	r1, [r7, #8]
 8013b96:	603b      	str	r3, [r7, #0]
 8013b98:	4613      	mov	r3, r2
 8013b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b9c:	e049      	b.n	8013c32 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b9e:	69bb      	ldr	r3, [r7, #24]
 8013ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ba4:	d045      	beq.n	8013c32 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013ba6:	f7f3 fa91 	bl	80070cc <HAL_GetTick>
 8013baa:	4602      	mov	r2, r0
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	69ba      	ldr	r2, [r7, #24]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d302      	bcc.n	8013bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8013bb6:	69bb      	ldr	r3, [r7, #24]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d101      	bne.n	8013bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013bbc:	2303      	movs	r3, #3
 8013bbe:	e048      	b.n	8013c52 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	681b      	ldr	r3, [r3, #0]
 8013bc6:	f003 0304 	and.w	r3, r3, #4
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d031      	beq.n	8013c32 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	681b      	ldr	r3, [r3, #0]
 8013bd2:	69db      	ldr	r3, [r3, #28]
 8013bd4:	f003 0308 	and.w	r3, r3, #8
 8013bd8:	2b08      	cmp	r3, #8
 8013bda:	d110      	bne.n	8013bfe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	2208      	movs	r2, #8
 8013be2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f000 f921 	bl	8013e2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	2208      	movs	r2, #8
 8013bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	e029      	b.n	8013c52 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	69db      	ldr	r3, [r3, #28]
 8013c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013c0c:	d111      	bne.n	8013c32 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013c18:	68f8      	ldr	r0, [r7, #12]
 8013c1a:	f000 f907 	bl	8013e2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2220      	movs	r2, #32
 8013c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	2200      	movs	r2, #0
 8013c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013c2e:	2303      	movs	r3, #3
 8013c30:	e00f      	b.n	8013c52 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	69da      	ldr	r2, [r3, #28]
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	4013      	ands	r3, r2
 8013c3c:	68ba      	ldr	r2, [r7, #8]
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	bf0c      	ite	eq
 8013c42:	2301      	moveq	r3, #1
 8013c44:	2300      	movne	r3, #0
 8013c46:	b2db      	uxtb	r3, r3
 8013c48:	461a      	mov	r2, r3
 8013c4a:	79fb      	ldrb	r3, [r7, #7]
 8013c4c:	429a      	cmp	r2, r3
 8013c4e:	d0a6      	beq.n	8013b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013c50:	2300      	movs	r3, #0
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3710      	adds	r7, #16
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
	...

08013c5c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b096      	sub	sp, #88	; 0x58
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	60f8      	str	r0, [r7, #12]
 8013c64:	60b9      	str	r1, [r7, #8]
 8013c66:	4613      	mov	r3, r2
 8013c68:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	68ba      	ldr	r2, [r7, #8]
 8013c6e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	88fa      	ldrh	r2, [r7, #6]
 8013c74:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	2200      	movs	r2, #0
 8013c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	2222      	movs	r2, #34	; 0x22
 8013c84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d02d      	beq.n	8013cee <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c98:	4a40      	ldr	r2, [pc, #256]	; (8013d9c <UART_Start_Receive_DMA+0x140>)
 8013c9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ca2:	4a3f      	ldr	r2, [pc, #252]	; (8013da0 <UART_Start_Receive_DMA+0x144>)
 8013ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cac:	4a3d      	ldr	r2, [pc, #244]	; (8013da4 <UART_Start_Receive_DMA+0x148>)
 8013cae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cb6:	2200      	movs	r2, #0
 8013cb8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	3324      	adds	r3, #36	; 0x24
 8013cc6:	4619      	mov	r1, r3
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ccc:	461a      	mov	r2, r3
 8013cce:	88fb      	ldrh	r3, [r7, #6]
 8013cd0:	f7f5 fc24 	bl	800951c <HAL_DMA_Start_IT>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d009      	beq.n	8013cee <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2210      	movs	r2, #16
 8013cde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2220      	movs	r2, #32
 8013ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8013cea:	2301      	movs	r3, #1
 8013cec:	e051      	b.n	8013d92 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	691b      	ldr	r3, [r3, #16]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d018      	beq.n	8013d28 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cfe:	e853 3f00 	ldrex	r3, [r3]
 8013d02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	461a      	mov	r2, r3
 8013d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d14:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d16:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d18:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d1c:	e841 2300 	strex	r3, r2, [r1]
 8013d20:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1e6      	bne.n	8013cf6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	3308      	adds	r3, #8
 8013d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d32:	e853 3f00 	ldrex	r3, [r3]
 8013d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d3a:	f043 0301 	orr.w	r3, r3, #1
 8013d3e:	653b      	str	r3, [r7, #80]	; 0x50
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	3308      	adds	r3, #8
 8013d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013d48:	637a      	str	r2, [r7, #52]	; 0x34
 8013d4a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013d50:	e841 2300 	strex	r3, r2, [r1]
 8013d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d1e5      	bne.n	8013d28 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	3308      	adds	r3, #8
 8013d62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	e853 3f00 	ldrex	r3, [r3]
 8013d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8013d6c:	693b      	ldr	r3, [r7, #16]
 8013d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	3308      	adds	r3, #8
 8013d7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013d7c:	623a      	str	r2, [r7, #32]
 8013d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d80:	69f9      	ldr	r1, [r7, #28]
 8013d82:	6a3a      	ldr	r2, [r7, #32]
 8013d84:	e841 2300 	strex	r3, r2, [r1]
 8013d88:	61bb      	str	r3, [r7, #24]
   return(result);
 8013d8a:	69bb      	ldr	r3, [r7, #24]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d1e5      	bne.n	8013d5c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013d90:	2300      	movs	r3, #0
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3758      	adds	r7, #88	; 0x58
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}
 8013d9a:	bf00      	nop
 8013d9c:	08013fab 	.word	0x08013fab
 8013da0:	080140d3 	.word	0x080140d3
 8013da4:	08014111 	.word	0x08014111

08013da8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013da8:	b480      	push	{r7}
 8013daa:	b08f      	sub	sp, #60	; 0x3c
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013db6:	6a3b      	ldr	r3, [r7, #32]
 8013db8:	e853 3f00 	ldrex	r3, [r3]
 8013dbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8013dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	461a      	mov	r2, r3
 8013dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013dd0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dd6:	e841 2300 	strex	r3, r2, [r1]
 8013dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1e6      	bne.n	8013db0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	3308      	adds	r3, #8
 8013de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	e853 3f00 	ldrex	r3, [r3]
 8013df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013df8:	633b      	str	r3, [r7, #48]	; 0x30
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	3308      	adds	r3, #8
 8013e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e02:	61ba      	str	r2, [r7, #24]
 8013e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e06:	6979      	ldr	r1, [r7, #20]
 8013e08:	69ba      	ldr	r2, [r7, #24]
 8013e0a:	e841 2300 	strex	r3, r2, [r1]
 8013e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8013e10:	693b      	ldr	r3, [r7, #16]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d1e5      	bne.n	8013de2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2220      	movs	r2, #32
 8013e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8013e1e:	bf00      	nop
 8013e20:	373c      	adds	r7, #60	; 0x3c
 8013e22:	46bd      	mov	sp, r7
 8013e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e28:	4770      	bx	lr
	...

08013e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b095      	sub	sp, #84	; 0x54
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e3c:	e853 3f00 	ldrex	r3, [r3]
 8013e40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	461a      	mov	r2, r3
 8013e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e52:	643b      	str	r3, [r7, #64]	; 0x40
 8013e54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013e58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013e5a:	e841 2300 	strex	r3, r2, [r1]
 8013e5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d1e6      	bne.n	8013e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	3308      	adds	r3, #8
 8013e6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e6e:	6a3b      	ldr	r3, [r7, #32]
 8013e70:	e853 3f00 	ldrex	r3, [r3]
 8013e74:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e76:	69fa      	ldr	r2, [r7, #28]
 8013e78:	4b1e      	ldr	r3, [pc, #120]	; (8013ef4 <UART_EndRxTransfer+0xc8>)
 8013e7a:	4013      	ands	r3, r2
 8013e7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	3308      	adds	r3, #8
 8013e84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013e88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e8e:	e841 2300 	strex	r3, r2, [r1]
 8013e92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d1e5      	bne.n	8013e66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e9e:	2b01      	cmp	r3, #1
 8013ea0:	d118      	bne.n	8013ed4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	e853 3f00 	ldrex	r3, [r3]
 8013eae:	60bb      	str	r3, [r7, #8]
   return(result);
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	f023 0310 	bic.w	r3, r3, #16
 8013eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	461a      	mov	r2, r3
 8013ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ec0:	61bb      	str	r3, [r7, #24]
 8013ec2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ec4:	6979      	ldr	r1, [r7, #20]
 8013ec6:	69ba      	ldr	r2, [r7, #24]
 8013ec8:	e841 2300 	strex	r3, r2, [r1]
 8013ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8013ece:	693b      	ldr	r3, [r7, #16]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d1e6      	bne.n	8013ea2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2220      	movs	r2, #32
 8013ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	2200      	movs	r2, #0
 8013ee6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013ee8:	bf00      	nop
 8013eea:	3754      	adds	r7, #84	; 0x54
 8013eec:	46bd      	mov	sp, r7
 8013eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef2:	4770      	bx	lr
 8013ef4:	effffffe 	.word	0xeffffffe

08013ef8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b090      	sub	sp, #64	; 0x40
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f04:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	69db      	ldr	r3, [r3, #28]
 8013f0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013f0e:	d037      	beq.n	8013f80 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8013f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f12:	2200      	movs	r2, #0
 8013f14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	3308      	adds	r3, #8
 8013f1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f22:	e853 3f00 	ldrex	r3, [r3]
 8013f26:	623b      	str	r3, [r7, #32]
   return(result);
 8013f28:	6a3b      	ldr	r3, [r7, #32]
 8013f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013f2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	3308      	adds	r3, #8
 8013f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f38:	633a      	str	r2, [r7, #48]	; 0x30
 8013f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f40:	e841 2300 	strex	r3, r2, [r1]
 8013f44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d1e5      	bne.n	8013f18 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013f4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	e853 3f00 	ldrex	r3, [r3]
 8013f58:	60fb      	str	r3, [r7, #12]
   return(result);
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013f60:	637b      	str	r3, [r7, #52]	; 0x34
 8013f62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	461a      	mov	r2, r3
 8013f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f6a:	61fb      	str	r3, [r7, #28]
 8013f6c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f6e:	69b9      	ldr	r1, [r7, #24]
 8013f70:	69fa      	ldr	r2, [r7, #28]
 8013f72:	e841 2300 	strex	r3, r2, [r1]
 8013f76:	617b      	str	r3, [r7, #20]
   return(result);
 8013f78:	697b      	ldr	r3, [r7, #20]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d1e6      	bne.n	8013f4c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013f7e:	e002      	b.n	8013f86 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8013f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f82:	f7ef ff55 	bl	8003e30 <HAL_UART_TxCpltCallback>
}
 8013f86:	bf00      	nop
 8013f88:	3740      	adds	r7, #64	; 0x40
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bd80      	pop	{r7, pc}

08013f8e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013f8e:	b580      	push	{r7, lr}
 8013f90:	b084      	sub	sp, #16
 8013f92:	af00      	add	r7, sp, #0
 8013f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f9a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013f9c:	68f8      	ldr	r0, [r7, #12]
 8013f9e:	f7fe ff2d 	bl	8012dfc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013fa2:	bf00      	nop
 8013fa4:	3710      	adds	r7, #16
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	bd80      	pop	{r7, pc}

08013faa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013faa:	b580      	push	{r7, lr}
 8013fac:	b09c      	sub	sp, #112	; 0x70
 8013fae:	af00      	add	r7, sp, #0
 8013fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fb6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	69db      	ldr	r3, [r3, #28]
 8013fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013fc0:	d071      	beq.n	80140a6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013fc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fd2:	e853 3f00 	ldrex	r3, [r3]
 8013fd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013fde:	66bb      	str	r3, [r7, #104]	; 0x68
 8013fe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	461a      	mov	r2, r3
 8013fe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fe8:	65bb      	str	r3, [r7, #88]	; 0x58
 8013fea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013ff0:	e841 2300 	strex	r3, r2, [r1]
 8013ff4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d1e6      	bne.n	8013fca <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	3308      	adds	r3, #8
 8014002:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014006:	e853 3f00 	ldrex	r3, [r3]
 801400a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801400c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801400e:	f023 0301 	bic.w	r3, r3, #1
 8014012:	667b      	str	r3, [r7, #100]	; 0x64
 8014014:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	3308      	adds	r3, #8
 801401a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801401c:	647a      	str	r2, [r7, #68]	; 0x44
 801401e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014024:	e841 2300 	strex	r3, r2, [r1]
 8014028:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801402c:	2b00      	cmp	r3, #0
 801402e:	d1e5      	bne.n	8013ffc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014030:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3308      	adds	r3, #8
 8014036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801403a:	e853 3f00 	ldrex	r3, [r3]
 801403e:	623b      	str	r3, [r7, #32]
   return(result);
 8014040:	6a3b      	ldr	r3, [r7, #32]
 8014042:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014046:	663b      	str	r3, [r7, #96]	; 0x60
 8014048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	3308      	adds	r3, #8
 801404e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014050:	633a      	str	r2, [r7, #48]	; 0x30
 8014052:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014058:	e841 2300 	strex	r3, r2, [r1]
 801405c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014060:	2b00      	cmp	r3, #0
 8014062:	d1e5      	bne.n	8014030 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014066:	2220      	movs	r2, #32
 8014068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801406c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801406e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014070:	2b01      	cmp	r3, #1
 8014072:	d118      	bne.n	80140a6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801407a:	693b      	ldr	r3, [r7, #16]
 801407c:	e853 3f00 	ldrex	r3, [r3]
 8014080:	60fb      	str	r3, [r7, #12]
   return(result);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	f023 0310 	bic.w	r3, r3, #16
 8014088:	65fb      	str	r3, [r7, #92]	; 0x5c
 801408a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801408c:	681b      	ldr	r3, [r3, #0]
 801408e:	461a      	mov	r2, r3
 8014090:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014092:	61fb      	str	r3, [r7, #28]
 8014094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014096:	69b9      	ldr	r1, [r7, #24]
 8014098:	69fa      	ldr	r2, [r7, #28]
 801409a:	e841 2300 	strex	r3, r2, [r1]
 801409e:	617b      	str	r3, [r7, #20]
   return(result);
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d1e6      	bne.n	8014074 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80140a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140a8:	2200      	movs	r2, #0
 80140aa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d107      	bne.n	80140c4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80140b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80140b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80140ba:	4619      	mov	r1, r3
 80140bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80140be:	f7ef ff53 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80140c2:	e002      	b.n	80140ca <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80140c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80140c6:	f7ef fecb 	bl	8003e60 <HAL_UART_RxCpltCallback>
}
 80140ca:	bf00      	nop
 80140cc:	3770      	adds	r7, #112	; 0x70
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}

080140d2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80140d2:	b580      	push	{r7, lr}
 80140d4:	b084      	sub	sp, #16
 80140d6:	af00      	add	r7, sp, #0
 80140d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	2201      	movs	r2, #1
 80140e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140ea:	2b01      	cmp	r3, #1
 80140ec:	d109      	bne.n	8014102 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80140f4:	085b      	lsrs	r3, r3, #1
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	4619      	mov	r1, r3
 80140fa:	68f8      	ldr	r0, [r7, #12]
 80140fc:	f7ef ff34 	bl	8003f68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014100:	e002      	b.n	8014108 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8014102:	68f8      	ldr	r0, [r7, #12]
 8014104:	f7fe fe84 	bl	8012e10 <HAL_UART_RxHalfCpltCallback>
}
 8014108:	bf00      	nop
 801410a:	3710      	adds	r7, #16
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b086      	sub	sp, #24
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801411c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801411e:	697b      	ldr	r3, [r7, #20]
 8014120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014124:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801412c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801412e:	697b      	ldr	r3, [r7, #20]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014138:	2b80      	cmp	r3, #128	; 0x80
 801413a:	d109      	bne.n	8014150 <UART_DMAError+0x40>
 801413c:	693b      	ldr	r3, [r7, #16]
 801413e:	2b21      	cmp	r3, #33	; 0x21
 8014140:	d106      	bne.n	8014150 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	2200      	movs	r2, #0
 8014146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801414a:	6978      	ldr	r0, [r7, #20]
 801414c:	f7ff fe2c 	bl	8013da8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	689b      	ldr	r3, [r3, #8]
 8014156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801415a:	2b40      	cmp	r3, #64	; 0x40
 801415c:	d109      	bne.n	8014172 <UART_DMAError+0x62>
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2b22      	cmp	r3, #34	; 0x22
 8014162:	d106      	bne.n	8014172 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	2200      	movs	r2, #0
 8014168:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801416c:	6978      	ldr	r0, [r7, #20]
 801416e:	f7ff fe5d 	bl	8013e2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8014172:	697b      	ldr	r3, [r7, #20]
 8014174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014178:	f043 0210 	orr.w	r2, r3, #16
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8014182:	6978      	ldr	r0, [r7, #20]
 8014184:	f7ef fff8 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014188:	bf00      	nop
 801418a:	3718      	adds	r7, #24
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b084      	sub	sp, #16
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801419c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	2200      	movs	r2, #0
 80141a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	2200      	movs	r2, #0
 80141aa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ef ffe2 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80141b4:	bf00      	nop
 80141b6:	3710      	adds	r7, #16
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}

080141bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80141bc:	b580      	push	{r7, lr}
 80141be:	b088      	sub	sp, #32
 80141c0:	af00      	add	r7, sp, #0
 80141c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	e853 3f00 	ldrex	r3, [r3]
 80141d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80141d8:	61fb      	str	r3, [r7, #28]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	461a      	mov	r2, r3
 80141e0:	69fb      	ldr	r3, [r7, #28]
 80141e2:	61bb      	str	r3, [r7, #24]
 80141e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141e6:	6979      	ldr	r1, [r7, #20]
 80141e8:	69ba      	ldr	r2, [r7, #24]
 80141ea:	e841 2300 	strex	r3, r2, [r1]
 80141ee:	613b      	str	r3, [r7, #16]
   return(result);
 80141f0:	693b      	ldr	r3, [r7, #16]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d1e6      	bne.n	80141c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2220      	movs	r2, #32
 80141fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2200      	movs	r2, #0
 8014202:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014204:	6878      	ldr	r0, [r7, #4]
 8014206:	f7ef fe13 	bl	8003e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801420a:	bf00      	nop
 801420c:	3720      	adds	r7, #32
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}

08014212 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014212:	b480      	push	{r7}
 8014214:	b083      	sub	sp, #12
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801421a:	bf00      	nop
 801421c:	370c      	adds	r7, #12
 801421e:	46bd      	mov	sp, r7
 8014220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014224:	4770      	bx	lr

08014226 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014226:	b480      	push	{r7}
 8014228:	b083      	sub	sp, #12
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801422e:	bf00      	nop
 8014230:	370c      	adds	r7, #12
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr

0801423a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801423a:	b480      	push	{r7}
 801423c:	b083      	sub	sp, #12
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014242:	bf00      	nop
 8014244:	370c      	adds	r7, #12
 8014246:	46bd      	mov	sp, r7
 8014248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801424c:	4770      	bx	lr

0801424e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801424e:	b480      	push	{r7}
 8014250:	b085      	sub	sp, #20
 8014252:	af00      	add	r7, sp, #0
 8014254:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801425c:	2b01      	cmp	r3, #1
 801425e:	d101      	bne.n	8014264 <HAL_UARTEx_DisableFifoMode+0x16>
 8014260:	2302      	movs	r3, #2
 8014262:	e027      	b.n	80142b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	2201      	movs	r2, #1
 8014268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2224      	movs	r2, #36	; 0x24
 8014270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	f022 0201 	bic.w	r2, r2, #1
 801428a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014292:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2200      	movs	r2, #0
 8014298:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	68fa      	ldr	r2, [r7, #12]
 80142a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2220      	movs	r2, #32
 80142a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80142b2:	2300      	movs	r3, #0
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3714      	adds	r7, #20
 80142b8:	46bd      	mov	sp, r7
 80142ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142be:	4770      	bx	lr

080142c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b084      	sub	sp, #16
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
 80142c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	d101      	bne.n	80142d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80142d4:	2302      	movs	r3, #2
 80142d6:	e02d      	b.n	8014334 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2201      	movs	r2, #1
 80142dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	2224      	movs	r2, #36	; 0x24
 80142e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	681a      	ldr	r2, [r3, #0]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	f022 0201 	bic.w	r2, r2, #1
 80142fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	689b      	ldr	r3, [r3, #8]
 8014306:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	683a      	ldr	r2, [r7, #0]
 8014310:	430a      	orrs	r2, r1
 8014312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014314:	6878      	ldr	r0, [r7, #4]
 8014316:	f000 f8a3 	bl	8014460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	68fa      	ldr	r2, [r7, #12]
 8014320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	2220      	movs	r2, #32
 8014326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2200      	movs	r2, #0
 801432e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014332:	2300      	movs	r3, #0
}
 8014334:	4618      	mov	r0, r3
 8014336:	3710      	adds	r7, #16
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}

0801433c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
 8014344:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801434c:	2b01      	cmp	r3, #1
 801434e:	d101      	bne.n	8014354 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014350:	2302      	movs	r3, #2
 8014352:	e02d      	b.n	80143b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2201      	movs	r2, #1
 8014358:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2224      	movs	r2, #36	; 0x24
 8014360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	681a      	ldr	r2, [r3, #0]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	f022 0201 	bic.w	r2, r2, #1
 801437a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	689b      	ldr	r3, [r3, #8]
 8014382:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	683a      	ldr	r2, [r7, #0]
 801438c:	430a      	orrs	r2, r1
 801438e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f000 f865 	bl	8014460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	68fa      	ldr	r2, [r7, #12]
 801439c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2220      	movs	r2, #32
 80143a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	2200      	movs	r2, #0
 80143aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80143ae:	2300      	movs	r3, #0
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b08c      	sub	sp, #48	; 0x30
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	4613      	mov	r3, r2
 80143c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80143cc:	2b20      	cmp	r3, #32
 80143ce:	d142      	bne.n	8014456 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d002      	beq.n	80143dc <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80143d6:	88fb      	ldrh	r3, [r7, #6]
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d101      	bne.n	80143e0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80143dc:	2301      	movs	r3, #1
 80143de:	e03b      	b.n	8014458 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2201      	movs	r2, #1
 80143e4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2200      	movs	r2, #0
 80143ea:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80143ec:	88fb      	ldrh	r3, [r7, #6]
 80143ee:	461a      	mov	r2, r3
 80143f0:	68b9      	ldr	r1, [r7, #8]
 80143f2:	68f8      	ldr	r0, [r7, #12]
 80143f4:	f7ff fc32 	bl	8013c5c <UART_Start_Receive_DMA>
 80143f8:	4603      	mov	r3, r0
 80143fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80143fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014402:	2b00      	cmp	r3, #0
 8014404:	d124      	bne.n	8014450 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801440a:	2b01      	cmp	r3, #1
 801440c:	d11d      	bne.n	801444a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	2210      	movs	r2, #16
 8014414:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801441c:	69bb      	ldr	r3, [r7, #24]
 801441e:	e853 3f00 	ldrex	r3, [r3]
 8014422:	617b      	str	r3, [r7, #20]
   return(result);
 8014424:	697b      	ldr	r3, [r7, #20]
 8014426:	f043 0310 	orr.w	r3, r3, #16
 801442a:	62bb      	str	r3, [r7, #40]	; 0x28
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	461a      	mov	r2, r3
 8014432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014434:	627b      	str	r3, [r7, #36]	; 0x24
 8014436:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014438:	6a39      	ldr	r1, [r7, #32]
 801443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801443c:	e841 2300 	strex	r3, r2, [r1]
 8014440:	61fb      	str	r3, [r7, #28]
   return(result);
 8014442:	69fb      	ldr	r3, [r7, #28]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d1e6      	bne.n	8014416 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8014448:	e002      	b.n	8014450 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801444a:	2301      	movs	r3, #1
 801444c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8014450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014454:	e000      	b.n	8014458 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014456:	2302      	movs	r3, #2
  }
}
 8014458:	4618      	mov	r0, r3
 801445a:	3730      	adds	r7, #48	; 0x30
 801445c:	46bd      	mov	sp, r7
 801445e:	bd80      	pop	{r7, pc}

08014460 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014460:	b480      	push	{r7}
 8014462:	b085      	sub	sp, #20
 8014464:	af00      	add	r7, sp, #0
 8014466:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801446c:	2b00      	cmp	r3, #0
 801446e:	d108      	bne.n	8014482 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	2201      	movs	r2, #1
 8014474:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2201      	movs	r2, #1
 801447c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014480:	e031      	b.n	80144e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014482:	2310      	movs	r3, #16
 8014484:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014486:	2310      	movs	r3, #16
 8014488:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	689b      	ldr	r3, [r3, #8]
 8014490:	0e5b      	lsrs	r3, r3, #25
 8014492:	b2db      	uxtb	r3, r3
 8014494:	f003 0307 	and.w	r3, r3, #7
 8014498:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	689b      	ldr	r3, [r3, #8]
 80144a0:	0f5b      	lsrs	r3, r3, #29
 80144a2:	b2db      	uxtb	r3, r3
 80144a4:	f003 0307 	and.w	r3, r3, #7
 80144a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80144aa:	7bbb      	ldrb	r3, [r7, #14]
 80144ac:	7b3a      	ldrb	r2, [r7, #12]
 80144ae:	4911      	ldr	r1, [pc, #68]	; (80144f4 <UARTEx_SetNbDataToProcess+0x94>)
 80144b0:	5c8a      	ldrb	r2, [r1, r2]
 80144b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80144b6:	7b3a      	ldrb	r2, [r7, #12]
 80144b8:	490f      	ldr	r1, [pc, #60]	; (80144f8 <UARTEx_SetNbDataToProcess+0x98>)
 80144ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80144bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80144c0:	b29a      	uxth	r2, r3
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80144c8:	7bfb      	ldrb	r3, [r7, #15]
 80144ca:	7b7a      	ldrb	r2, [r7, #13]
 80144cc:	4909      	ldr	r1, [pc, #36]	; (80144f4 <UARTEx_SetNbDataToProcess+0x94>)
 80144ce:	5c8a      	ldrb	r2, [r1, r2]
 80144d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80144d4:	7b7a      	ldrb	r2, [r7, #13]
 80144d6:	4908      	ldr	r1, [pc, #32]	; (80144f8 <UARTEx_SetNbDataToProcess+0x98>)
 80144d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80144da:	fb93 f3f2 	sdiv	r3, r3, r2
 80144de:	b29a      	uxth	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80144e6:	bf00      	nop
 80144e8:	3714      	adds	r7, #20
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr
 80144f2:	bf00      	nop
 80144f4:	08017420 	.word	0x08017420
 80144f8:	08017428 	.word	0x08017428

080144fc <_Znaj>:
 80144fc:	f000 b800 	b.w	8014500 <_Znwj>

08014500 <_Znwj>:
 8014500:	2801      	cmp	r0, #1
 8014502:	bf38      	it	cc
 8014504:	2001      	movcc	r0, #1
 8014506:	b510      	push	{r4, lr}
 8014508:	4604      	mov	r4, r0
 801450a:	4620      	mov	r0, r4
 801450c:	f000 f81a 	bl	8014544 <malloc>
 8014510:	b100      	cbz	r0, 8014514 <_Znwj+0x14>
 8014512:	bd10      	pop	{r4, pc}
 8014514:	f000 f806 	bl	8014524 <_ZSt15get_new_handlerv>
 8014518:	b908      	cbnz	r0, 801451e <_Znwj+0x1e>
 801451a:	f000 f80b 	bl	8014534 <abort>
 801451e:	4780      	blx	r0
 8014520:	e7f3      	b.n	801450a <_Znwj+0xa>
	...

08014524 <_ZSt15get_new_handlerv>:
 8014524:	4b02      	ldr	r3, [pc, #8]	; (8014530 <_ZSt15get_new_handlerv+0xc>)
 8014526:	6818      	ldr	r0, [r3, #0]
 8014528:	f3bf 8f5b 	dmb	ish
 801452c:	4770      	bx	lr
 801452e:	bf00      	nop
 8014530:	240045c0 	.word	0x240045c0

08014534 <abort>:
 8014534:	b508      	push	{r3, lr}
 8014536:	2006      	movs	r0, #6
 8014538:	f000 ff64 	bl	8015404 <raise>
 801453c:	2001      	movs	r0, #1
 801453e:	f7f2 fbb3 	bl	8006ca8 <_exit>
	...

08014544 <malloc>:
 8014544:	4b02      	ldr	r3, [pc, #8]	; (8014550 <malloc+0xc>)
 8014546:	4601      	mov	r1, r0
 8014548:	6818      	ldr	r0, [r3, #0]
 801454a:	f000 b823 	b.w	8014594 <_malloc_r>
 801454e:	bf00      	nop
 8014550:	240000a8 	.word	0x240000a8

08014554 <sbrk_aligned>:
 8014554:	b570      	push	{r4, r5, r6, lr}
 8014556:	4e0e      	ldr	r6, [pc, #56]	; (8014590 <sbrk_aligned+0x3c>)
 8014558:	460c      	mov	r4, r1
 801455a:	6831      	ldr	r1, [r6, #0]
 801455c:	4605      	mov	r5, r0
 801455e:	b911      	cbnz	r1, 8014566 <sbrk_aligned+0x12>
 8014560:	f000 ffa4 	bl	80154ac <_sbrk_r>
 8014564:	6030      	str	r0, [r6, #0]
 8014566:	4621      	mov	r1, r4
 8014568:	4628      	mov	r0, r5
 801456a:	f000 ff9f 	bl	80154ac <_sbrk_r>
 801456e:	1c43      	adds	r3, r0, #1
 8014570:	d00a      	beq.n	8014588 <sbrk_aligned+0x34>
 8014572:	1cc4      	adds	r4, r0, #3
 8014574:	f024 0403 	bic.w	r4, r4, #3
 8014578:	42a0      	cmp	r0, r4
 801457a:	d007      	beq.n	801458c <sbrk_aligned+0x38>
 801457c:	1a21      	subs	r1, r4, r0
 801457e:	4628      	mov	r0, r5
 8014580:	f000 ff94 	bl	80154ac <_sbrk_r>
 8014584:	3001      	adds	r0, #1
 8014586:	d101      	bne.n	801458c <sbrk_aligned+0x38>
 8014588:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801458c:	4620      	mov	r0, r4
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	240045c8 	.word	0x240045c8

08014594 <_malloc_r>:
 8014594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014598:	1ccd      	adds	r5, r1, #3
 801459a:	f025 0503 	bic.w	r5, r5, #3
 801459e:	3508      	adds	r5, #8
 80145a0:	2d0c      	cmp	r5, #12
 80145a2:	bf38      	it	cc
 80145a4:	250c      	movcc	r5, #12
 80145a6:	2d00      	cmp	r5, #0
 80145a8:	4607      	mov	r7, r0
 80145aa:	db01      	blt.n	80145b0 <_malloc_r+0x1c>
 80145ac:	42a9      	cmp	r1, r5
 80145ae:	d905      	bls.n	80145bc <_malloc_r+0x28>
 80145b0:	230c      	movs	r3, #12
 80145b2:	603b      	str	r3, [r7, #0]
 80145b4:	2600      	movs	r6, #0
 80145b6:	4630      	mov	r0, r6
 80145b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014690 <_malloc_r+0xfc>
 80145c0:	f000 f868 	bl	8014694 <__malloc_lock>
 80145c4:	f8d8 3000 	ldr.w	r3, [r8]
 80145c8:	461c      	mov	r4, r3
 80145ca:	bb5c      	cbnz	r4, 8014624 <_malloc_r+0x90>
 80145cc:	4629      	mov	r1, r5
 80145ce:	4638      	mov	r0, r7
 80145d0:	f7ff ffc0 	bl	8014554 <sbrk_aligned>
 80145d4:	1c43      	adds	r3, r0, #1
 80145d6:	4604      	mov	r4, r0
 80145d8:	d155      	bne.n	8014686 <_malloc_r+0xf2>
 80145da:	f8d8 4000 	ldr.w	r4, [r8]
 80145de:	4626      	mov	r6, r4
 80145e0:	2e00      	cmp	r6, #0
 80145e2:	d145      	bne.n	8014670 <_malloc_r+0xdc>
 80145e4:	2c00      	cmp	r4, #0
 80145e6:	d048      	beq.n	801467a <_malloc_r+0xe6>
 80145e8:	6823      	ldr	r3, [r4, #0]
 80145ea:	4631      	mov	r1, r6
 80145ec:	4638      	mov	r0, r7
 80145ee:	eb04 0903 	add.w	r9, r4, r3
 80145f2:	f000 ff5b 	bl	80154ac <_sbrk_r>
 80145f6:	4581      	cmp	r9, r0
 80145f8:	d13f      	bne.n	801467a <_malloc_r+0xe6>
 80145fa:	6821      	ldr	r1, [r4, #0]
 80145fc:	1a6d      	subs	r5, r5, r1
 80145fe:	4629      	mov	r1, r5
 8014600:	4638      	mov	r0, r7
 8014602:	f7ff ffa7 	bl	8014554 <sbrk_aligned>
 8014606:	3001      	adds	r0, #1
 8014608:	d037      	beq.n	801467a <_malloc_r+0xe6>
 801460a:	6823      	ldr	r3, [r4, #0]
 801460c:	442b      	add	r3, r5
 801460e:	6023      	str	r3, [r4, #0]
 8014610:	f8d8 3000 	ldr.w	r3, [r8]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d038      	beq.n	801468a <_malloc_r+0xf6>
 8014618:	685a      	ldr	r2, [r3, #4]
 801461a:	42a2      	cmp	r2, r4
 801461c:	d12b      	bne.n	8014676 <_malloc_r+0xe2>
 801461e:	2200      	movs	r2, #0
 8014620:	605a      	str	r2, [r3, #4]
 8014622:	e00f      	b.n	8014644 <_malloc_r+0xb0>
 8014624:	6822      	ldr	r2, [r4, #0]
 8014626:	1b52      	subs	r2, r2, r5
 8014628:	d41f      	bmi.n	801466a <_malloc_r+0xd6>
 801462a:	2a0b      	cmp	r2, #11
 801462c:	d917      	bls.n	801465e <_malloc_r+0xca>
 801462e:	1961      	adds	r1, r4, r5
 8014630:	42a3      	cmp	r3, r4
 8014632:	6025      	str	r5, [r4, #0]
 8014634:	bf18      	it	ne
 8014636:	6059      	strne	r1, [r3, #4]
 8014638:	6863      	ldr	r3, [r4, #4]
 801463a:	bf08      	it	eq
 801463c:	f8c8 1000 	streq.w	r1, [r8]
 8014640:	5162      	str	r2, [r4, r5]
 8014642:	604b      	str	r3, [r1, #4]
 8014644:	4638      	mov	r0, r7
 8014646:	f104 060b 	add.w	r6, r4, #11
 801464a:	f000 f829 	bl	80146a0 <__malloc_unlock>
 801464e:	f026 0607 	bic.w	r6, r6, #7
 8014652:	1d23      	adds	r3, r4, #4
 8014654:	1af2      	subs	r2, r6, r3
 8014656:	d0ae      	beq.n	80145b6 <_malloc_r+0x22>
 8014658:	1b9b      	subs	r3, r3, r6
 801465a:	50a3      	str	r3, [r4, r2]
 801465c:	e7ab      	b.n	80145b6 <_malloc_r+0x22>
 801465e:	42a3      	cmp	r3, r4
 8014660:	6862      	ldr	r2, [r4, #4]
 8014662:	d1dd      	bne.n	8014620 <_malloc_r+0x8c>
 8014664:	f8c8 2000 	str.w	r2, [r8]
 8014668:	e7ec      	b.n	8014644 <_malloc_r+0xb0>
 801466a:	4623      	mov	r3, r4
 801466c:	6864      	ldr	r4, [r4, #4]
 801466e:	e7ac      	b.n	80145ca <_malloc_r+0x36>
 8014670:	4634      	mov	r4, r6
 8014672:	6876      	ldr	r6, [r6, #4]
 8014674:	e7b4      	b.n	80145e0 <_malloc_r+0x4c>
 8014676:	4613      	mov	r3, r2
 8014678:	e7cc      	b.n	8014614 <_malloc_r+0x80>
 801467a:	230c      	movs	r3, #12
 801467c:	603b      	str	r3, [r7, #0]
 801467e:	4638      	mov	r0, r7
 8014680:	f000 f80e 	bl	80146a0 <__malloc_unlock>
 8014684:	e797      	b.n	80145b6 <_malloc_r+0x22>
 8014686:	6025      	str	r5, [r4, #0]
 8014688:	e7dc      	b.n	8014644 <_malloc_r+0xb0>
 801468a:	605b      	str	r3, [r3, #4]
 801468c:	deff      	udf	#255	; 0xff
 801468e:	bf00      	nop
 8014690:	240045c4 	.word	0x240045c4

08014694 <__malloc_lock>:
 8014694:	4801      	ldr	r0, [pc, #4]	; (801469c <__malloc_lock+0x8>)
 8014696:	f000 bf56 	b.w	8015546 <__retarget_lock_acquire_recursive>
 801469a:	bf00      	nop
 801469c:	2400470c 	.word	0x2400470c

080146a0 <__malloc_unlock>:
 80146a0:	4801      	ldr	r0, [pc, #4]	; (80146a8 <__malloc_unlock+0x8>)
 80146a2:	f000 bf51 	b.w	8015548 <__retarget_lock_release_recursive>
 80146a6:	bf00      	nop
 80146a8:	2400470c 	.word	0x2400470c

080146ac <realloc>:
 80146ac:	4b02      	ldr	r3, [pc, #8]	; (80146b8 <realloc+0xc>)
 80146ae:	460a      	mov	r2, r1
 80146b0:	4601      	mov	r1, r0
 80146b2:	6818      	ldr	r0, [r3, #0]
 80146b4:	f000 b802 	b.w	80146bc <_realloc_r>
 80146b8:	240000a8 	.word	0x240000a8

080146bc <_realloc_r>:
 80146bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c0:	4680      	mov	r8, r0
 80146c2:	4614      	mov	r4, r2
 80146c4:	460e      	mov	r6, r1
 80146c6:	b921      	cbnz	r1, 80146d2 <_realloc_r+0x16>
 80146c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146cc:	4611      	mov	r1, r2
 80146ce:	f7ff bf61 	b.w	8014594 <_malloc_r>
 80146d2:	b92a      	cbnz	r2, 80146e0 <_realloc_r+0x24>
 80146d4:	f001 fd3c 	bl	8016150 <_free_r>
 80146d8:	4625      	mov	r5, r4
 80146da:	4628      	mov	r0, r5
 80146dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e0:	f002 f8fe 	bl	80168e0 <_malloc_usable_size_r>
 80146e4:	4284      	cmp	r4, r0
 80146e6:	4607      	mov	r7, r0
 80146e8:	d802      	bhi.n	80146f0 <_realloc_r+0x34>
 80146ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80146ee:	d812      	bhi.n	8014716 <_realloc_r+0x5a>
 80146f0:	4621      	mov	r1, r4
 80146f2:	4640      	mov	r0, r8
 80146f4:	f7ff ff4e 	bl	8014594 <_malloc_r>
 80146f8:	4605      	mov	r5, r0
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d0ed      	beq.n	80146da <_realloc_r+0x1e>
 80146fe:	42bc      	cmp	r4, r7
 8014700:	4622      	mov	r2, r4
 8014702:	4631      	mov	r1, r6
 8014704:	bf28      	it	cs
 8014706:	463a      	movcs	r2, r7
 8014708:	f000 ff1f 	bl	801554a <memcpy>
 801470c:	4631      	mov	r1, r6
 801470e:	4640      	mov	r0, r8
 8014710:	f001 fd1e 	bl	8016150 <_free_r>
 8014714:	e7e1      	b.n	80146da <_realloc_r+0x1e>
 8014716:	4635      	mov	r5, r6
 8014718:	e7df      	b.n	80146da <_realloc_r+0x1e>

0801471a <__cvt>:
 801471a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801471c:	ed2d 8b02 	vpush	{d8}
 8014720:	eeb0 8b40 	vmov.f64	d8, d0
 8014724:	b085      	sub	sp, #20
 8014726:	4617      	mov	r7, r2
 8014728:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801472a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801472c:	ee18 2a90 	vmov	r2, s17
 8014730:	f025 0520 	bic.w	r5, r5, #32
 8014734:	2a00      	cmp	r2, #0
 8014736:	bfb6      	itet	lt
 8014738:	222d      	movlt	r2, #45	; 0x2d
 801473a:	2200      	movge	r2, #0
 801473c:	eeb1 8b40 	vneglt.f64	d8, d0
 8014740:	2d46      	cmp	r5, #70	; 0x46
 8014742:	460c      	mov	r4, r1
 8014744:	701a      	strb	r2, [r3, #0]
 8014746:	d004      	beq.n	8014752 <__cvt+0x38>
 8014748:	2d45      	cmp	r5, #69	; 0x45
 801474a:	d100      	bne.n	801474e <__cvt+0x34>
 801474c:	3401      	adds	r4, #1
 801474e:	2102      	movs	r1, #2
 8014750:	e000      	b.n	8014754 <__cvt+0x3a>
 8014752:	2103      	movs	r1, #3
 8014754:	ab03      	add	r3, sp, #12
 8014756:	9301      	str	r3, [sp, #4]
 8014758:	ab02      	add	r3, sp, #8
 801475a:	9300      	str	r3, [sp, #0]
 801475c:	4622      	mov	r2, r4
 801475e:	4633      	mov	r3, r6
 8014760:	eeb0 0b48 	vmov.f64	d0, d8
 8014764:	f000 ff88 	bl	8015678 <_dtoa_r>
 8014768:	2d47      	cmp	r5, #71	; 0x47
 801476a:	d101      	bne.n	8014770 <__cvt+0x56>
 801476c:	07fb      	lsls	r3, r7, #31
 801476e:	d51a      	bpl.n	80147a6 <__cvt+0x8c>
 8014770:	2d46      	cmp	r5, #70	; 0x46
 8014772:	eb00 0204 	add.w	r2, r0, r4
 8014776:	d10c      	bne.n	8014792 <__cvt+0x78>
 8014778:	7803      	ldrb	r3, [r0, #0]
 801477a:	2b30      	cmp	r3, #48	; 0x30
 801477c:	d107      	bne.n	801478e <__cvt+0x74>
 801477e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014786:	bf1c      	itt	ne
 8014788:	f1c4 0401 	rsbne	r4, r4, #1
 801478c:	6034      	strne	r4, [r6, #0]
 801478e:	6833      	ldr	r3, [r6, #0]
 8014790:	441a      	add	r2, r3
 8014792:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801479a:	bf08      	it	eq
 801479c:	9203      	streq	r2, [sp, #12]
 801479e:	2130      	movs	r1, #48	; 0x30
 80147a0:	9b03      	ldr	r3, [sp, #12]
 80147a2:	4293      	cmp	r3, r2
 80147a4:	d307      	bcc.n	80147b6 <__cvt+0x9c>
 80147a6:	9b03      	ldr	r3, [sp, #12]
 80147a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80147aa:	1a1b      	subs	r3, r3, r0
 80147ac:	6013      	str	r3, [r2, #0]
 80147ae:	b005      	add	sp, #20
 80147b0:	ecbd 8b02 	vpop	{d8}
 80147b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147b6:	1c5c      	adds	r4, r3, #1
 80147b8:	9403      	str	r4, [sp, #12]
 80147ba:	7019      	strb	r1, [r3, #0]
 80147bc:	e7f0      	b.n	80147a0 <__cvt+0x86>

080147be <__exponent>:
 80147be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147c0:	4603      	mov	r3, r0
 80147c2:	2900      	cmp	r1, #0
 80147c4:	bfb8      	it	lt
 80147c6:	4249      	neglt	r1, r1
 80147c8:	f803 2b02 	strb.w	r2, [r3], #2
 80147cc:	bfb4      	ite	lt
 80147ce:	222d      	movlt	r2, #45	; 0x2d
 80147d0:	222b      	movge	r2, #43	; 0x2b
 80147d2:	2909      	cmp	r1, #9
 80147d4:	7042      	strb	r2, [r0, #1]
 80147d6:	dd2a      	ble.n	801482e <__exponent+0x70>
 80147d8:	f10d 0207 	add.w	r2, sp, #7
 80147dc:	4617      	mov	r7, r2
 80147de:	260a      	movs	r6, #10
 80147e0:	4694      	mov	ip, r2
 80147e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80147e6:	fb06 1415 	mls	r4, r6, r5, r1
 80147ea:	3430      	adds	r4, #48	; 0x30
 80147ec:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80147f0:	460c      	mov	r4, r1
 80147f2:	2c63      	cmp	r4, #99	; 0x63
 80147f4:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80147f8:	4629      	mov	r1, r5
 80147fa:	dcf1      	bgt.n	80147e0 <__exponent+0x22>
 80147fc:	3130      	adds	r1, #48	; 0x30
 80147fe:	f1ac 0402 	sub.w	r4, ip, #2
 8014802:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014806:	1c41      	adds	r1, r0, #1
 8014808:	4622      	mov	r2, r4
 801480a:	42ba      	cmp	r2, r7
 801480c:	d30a      	bcc.n	8014824 <__exponent+0x66>
 801480e:	f10d 0209 	add.w	r2, sp, #9
 8014812:	eba2 020c 	sub.w	r2, r2, ip
 8014816:	42bc      	cmp	r4, r7
 8014818:	bf88      	it	hi
 801481a:	2200      	movhi	r2, #0
 801481c:	4413      	add	r3, r2
 801481e:	1a18      	subs	r0, r3, r0
 8014820:	b003      	add	sp, #12
 8014822:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014824:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014828:	f801 5f01 	strb.w	r5, [r1, #1]!
 801482c:	e7ed      	b.n	801480a <__exponent+0x4c>
 801482e:	2330      	movs	r3, #48	; 0x30
 8014830:	3130      	adds	r1, #48	; 0x30
 8014832:	7083      	strb	r3, [r0, #2]
 8014834:	70c1      	strb	r1, [r0, #3]
 8014836:	1d03      	adds	r3, r0, #4
 8014838:	e7f1      	b.n	801481e <__exponent+0x60>
 801483a:	0000      	movs	r0, r0
 801483c:	0000      	movs	r0, r0
	...

08014840 <_printf_float>:
 8014840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014844:	b08b      	sub	sp, #44	; 0x2c
 8014846:	460c      	mov	r4, r1
 8014848:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801484c:	4616      	mov	r6, r2
 801484e:	461f      	mov	r7, r3
 8014850:	4605      	mov	r5, r0
 8014852:	f000 fddf 	bl	8015414 <_localeconv_r>
 8014856:	f8d0 b000 	ldr.w	fp, [r0]
 801485a:	4658      	mov	r0, fp
 801485c:	f7eb fd90 	bl	8000380 <strlen>
 8014860:	2300      	movs	r3, #0
 8014862:	9308      	str	r3, [sp, #32]
 8014864:	f8d8 3000 	ldr.w	r3, [r8]
 8014868:	f894 9018 	ldrb.w	r9, [r4, #24]
 801486c:	6822      	ldr	r2, [r4, #0]
 801486e:	3307      	adds	r3, #7
 8014870:	f023 0307 	bic.w	r3, r3, #7
 8014874:	f103 0108 	add.w	r1, r3, #8
 8014878:	f8c8 1000 	str.w	r1, [r8]
 801487c:	ed93 0b00 	vldr	d0, [r3]
 8014880:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014ae0 <_printf_float+0x2a0>
 8014884:	eeb0 7bc0 	vabs.f64	d7, d0
 8014888:	eeb4 7b46 	vcmp.f64	d7, d6
 801488c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014890:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8014894:	4682      	mov	sl, r0
 8014896:	dd24      	ble.n	80148e2 <_printf_float+0xa2>
 8014898:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148a0:	d502      	bpl.n	80148a8 <_printf_float+0x68>
 80148a2:	232d      	movs	r3, #45	; 0x2d
 80148a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148a8:	498f      	ldr	r1, [pc, #572]	; (8014ae8 <_printf_float+0x2a8>)
 80148aa:	4b90      	ldr	r3, [pc, #576]	; (8014aec <_printf_float+0x2ac>)
 80148ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80148b0:	bf94      	ite	ls
 80148b2:	4688      	movls	r8, r1
 80148b4:	4698      	movhi	r8, r3
 80148b6:	2303      	movs	r3, #3
 80148b8:	6123      	str	r3, [r4, #16]
 80148ba:	f022 0204 	bic.w	r2, r2, #4
 80148be:	2300      	movs	r3, #0
 80148c0:	6022      	str	r2, [r4, #0]
 80148c2:	9304      	str	r3, [sp, #16]
 80148c4:	9700      	str	r7, [sp, #0]
 80148c6:	4633      	mov	r3, r6
 80148c8:	aa09      	add	r2, sp, #36	; 0x24
 80148ca:	4621      	mov	r1, r4
 80148cc:	4628      	mov	r0, r5
 80148ce:	f000 f9d1 	bl	8014c74 <_printf_common>
 80148d2:	3001      	adds	r0, #1
 80148d4:	f040 808a 	bne.w	80149ec <_printf_float+0x1ac>
 80148d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80148dc:	b00b      	add	sp, #44	; 0x2c
 80148de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80148e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148ea:	d709      	bvc.n	8014900 <_printf_float+0xc0>
 80148ec:	ee10 3a90 	vmov	r3, s1
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	bfbc      	itt	lt
 80148f4:	232d      	movlt	r3, #45	; 0x2d
 80148f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80148fa:	497d      	ldr	r1, [pc, #500]	; (8014af0 <_printf_float+0x2b0>)
 80148fc:	4b7d      	ldr	r3, [pc, #500]	; (8014af4 <_printf_float+0x2b4>)
 80148fe:	e7d5      	b.n	80148ac <_printf_float+0x6c>
 8014900:	6863      	ldr	r3, [r4, #4]
 8014902:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014906:	9104      	str	r1, [sp, #16]
 8014908:	1c59      	adds	r1, r3, #1
 801490a:	d13c      	bne.n	8014986 <_printf_float+0x146>
 801490c:	2306      	movs	r3, #6
 801490e:	6063      	str	r3, [r4, #4]
 8014910:	2300      	movs	r3, #0
 8014912:	9303      	str	r3, [sp, #12]
 8014914:	ab08      	add	r3, sp, #32
 8014916:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801491a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801491e:	ab07      	add	r3, sp, #28
 8014920:	6861      	ldr	r1, [r4, #4]
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	6022      	str	r2, [r4, #0]
 8014926:	f10d 031b 	add.w	r3, sp, #27
 801492a:	4628      	mov	r0, r5
 801492c:	f7ff fef5 	bl	801471a <__cvt>
 8014930:	9b04      	ldr	r3, [sp, #16]
 8014932:	9907      	ldr	r1, [sp, #28]
 8014934:	2b47      	cmp	r3, #71	; 0x47
 8014936:	4680      	mov	r8, r0
 8014938:	d108      	bne.n	801494c <_printf_float+0x10c>
 801493a:	1cc8      	adds	r0, r1, #3
 801493c:	db02      	blt.n	8014944 <_printf_float+0x104>
 801493e:	6863      	ldr	r3, [r4, #4]
 8014940:	4299      	cmp	r1, r3
 8014942:	dd41      	ble.n	80149c8 <_printf_float+0x188>
 8014944:	f1a9 0902 	sub.w	r9, r9, #2
 8014948:	fa5f f989 	uxtb.w	r9, r9
 801494c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014950:	d820      	bhi.n	8014994 <_printf_float+0x154>
 8014952:	3901      	subs	r1, #1
 8014954:	464a      	mov	r2, r9
 8014956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801495a:	9107      	str	r1, [sp, #28]
 801495c:	f7ff ff2f 	bl	80147be <__exponent>
 8014960:	9a08      	ldr	r2, [sp, #32]
 8014962:	9004      	str	r0, [sp, #16]
 8014964:	1813      	adds	r3, r2, r0
 8014966:	2a01      	cmp	r2, #1
 8014968:	6123      	str	r3, [r4, #16]
 801496a:	dc02      	bgt.n	8014972 <_printf_float+0x132>
 801496c:	6822      	ldr	r2, [r4, #0]
 801496e:	07d2      	lsls	r2, r2, #31
 8014970:	d501      	bpl.n	8014976 <_printf_float+0x136>
 8014972:	3301      	adds	r3, #1
 8014974:	6123      	str	r3, [r4, #16]
 8014976:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801497a:	2b00      	cmp	r3, #0
 801497c:	d0a2      	beq.n	80148c4 <_printf_float+0x84>
 801497e:	232d      	movs	r3, #45	; 0x2d
 8014980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014984:	e79e      	b.n	80148c4 <_printf_float+0x84>
 8014986:	9904      	ldr	r1, [sp, #16]
 8014988:	2947      	cmp	r1, #71	; 0x47
 801498a:	d1c1      	bne.n	8014910 <_printf_float+0xd0>
 801498c:	2b00      	cmp	r3, #0
 801498e:	d1bf      	bne.n	8014910 <_printf_float+0xd0>
 8014990:	2301      	movs	r3, #1
 8014992:	e7bc      	b.n	801490e <_printf_float+0xce>
 8014994:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014998:	d118      	bne.n	80149cc <_printf_float+0x18c>
 801499a:	2900      	cmp	r1, #0
 801499c:	6863      	ldr	r3, [r4, #4]
 801499e:	dd0b      	ble.n	80149b8 <_printf_float+0x178>
 80149a0:	6121      	str	r1, [r4, #16]
 80149a2:	b913      	cbnz	r3, 80149aa <_printf_float+0x16a>
 80149a4:	6822      	ldr	r2, [r4, #0]
 80149a6:	07d0      	lsls	r0, r2, #31
 80149a8:	d502      	bpl.n	80149b0 <_printf_float+0x170>
 80149aa:	3301      	adds	r3, #1
 80149ac:	440b      	add	r3, r1
 80149ae:	6123      	str	r3, [r4, #16]
 80149b0:	2300      	movs	r3, #0
 80149b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80149b4:	9304      	str	r3, [sp, #16]
 80149b6:	e7de      	b.n	8014976 <_printf_float+0x136>
 80149b8:	b913      	cbnz	r3, 80149c0 <_printf_float+0x180>
 80149ba:	6822      	ldr	r2, [r4, #0]
 80149bc:	07d2      	lsls	r2, r2, #31
 80149be:	d501      	bpl.n	80149c4 <_printf_float+0x184>
 80149c0:	3302      	adds	r3, #2
 80149c2:	e7f4      	b.n	80149ae <_printf_float+0x16e>
 80149c4:	2301      	movs	r3, #1
 80149c6:	e7f2      	b.n	80149ae <_printf_float+0x16e>
 80149c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80149cc:	9b08      	ldr	r3, [sp, #32]
 80149ce:	4299      	cmp	r1, r3
 80149d0:	db05      	blt.n	80149de <_printf_float+0x19e>
 80149d2:	6823      	ldr	r3, [r4, #0]
 80149d4:	6121      	str	r1, [r4, #16]
 80149d6:	07d8      	lsls	r0, r3, #31
 80149d8:	d5ea      	bpl.n	80149b0 <_printf_float+0x170>
 80149da:	1c4b      	adds	r3, r1, #1
 80149dc:	e7e7      	b.n	80149ae <_printf_float+0x16e>
 80149de:	2900      	cmp	r1, #0
 80149e0:	bfd4      	ite	le
 80149e2:	f1c1 0202 	rsble	r2, r1, #2
 80149e6:	2201      	movgt	r2, #1
 80149e8:	4413      	add	r3, r2
 80149ea:	e7e0      	b.n	80149ae <_printf_float+0x16e>
 80149ec:	6823      	ldr	r3, [r4, #0]
 80149ee:	055a      	lsls	r2, r3, #21
 80149f0:	d407      	bmi.n	8014a02 <_printf_float+0x1c2>
 80149f2:	6923      	ldr	r3, [r4, #16]
 80149f4:	4642      	mov	r2, r8
 80149f6:	4631      	mov	r1, r6
 80149f8:	4628      	mov	r0, r5
 80149fa:	47b8      	blx	r7
 80149fc:	3001      	adds	r0, #1
 80149fe:	d12a      	bne.n	8014a56 <_printf_float+0x216>
 8014a00:	e76a      	b.n	80148d8 <_printf_float+0x98>
 8014a02:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014a06:	f240 80e0 	bls.w	8014bca <_printf_float+0x38a>
 8014a0a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014a0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a16:	d133      	bne.n	8014a80 <_printf_float+0x240>
 8014a18:	4a37      	ldr	r2, [pc, #220]	; (8014af8 <_printf_float+0x2b8>)
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	4631      	mov	r1, r6
 8014a1e:	4628      	mov	r0, r5
 8014a20:	47b8      	blx	r7
 8014a22:	3001      	adds	r0, #1
 8014a24:	f43f af58 	beq.w	80148d8 <_printf_float+0x98>
 8014a28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	db02      	blt.n	8014a36 <_printf_float+0x1f6>
 8014a30:	6823      	ldr	r3, [r4, #0]
 8014a32:	07d8      	lsls	r0, r3, #31
 8014a34:	d50f      	bpl.n	8014a56 <_printf_float+0x216>
 8014a36:	4653      	mov	r3, sl
 8014a38:	465a      	mov	r2, fp
 8014a3a:	4631      	mov	r1, r6
 8014a3c:	4628      	mov	r0, r5
 8014a3e:	47b8      	blx	r7
 8014a40:	3001      	adds	r0, #1
 8014a42:	f43f af49 	beq.w	80148d8 <_printf_float+0x98>
 8014a46:	f04f 0800 	mov.w	r8, #0
 8014a4a:	f104 091a 	add.w	r9, r4, #26
 8014a4e:	9b08      	ldr	r3, [sp, #32]
 8014a50:	3b01      	subs	r3, #1
 8014a52:	4543      	cmp	r3, r8
 8014a54:	dc09      	bgt.n	8014a6a <_printf_float+0x22a>
 8014a56:	6823      	ldr	r3, [r4, #0]
 8014a58:	079b      	lsls	r3, r3, #30
 8014a5a:	f100 8106 	bmi.w	8014c6a <_printf_float+0x42a>
 8014a5e:	68e0      	ldr	r0, [r4, #12]
 8014a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a62:	4298      	cmp	r0, r3
 8014a64:	bfb8      	it	lt
 8014a66:	4618      	movlt	r0, r3
 8014a68:	e738      	b.n	80148dc <_printf_float+0x9c>
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	464a      	mov	r2, r9
 8014a6e:	4631      	mov	r1, r6
 8014a70:	4628      	mov	r0, r5
 8014a72:	47b8      	blx	r7
 8014a74:	3001      	adds	r0, #1
 8014a76:	f43f af2f 	beq.w	80148d8 <_printf_float+0x98>
 8014a7a:	f108 0801 	add.w	r8, r8, #1
 8014a7e:	e7e6      	b.n	8014a4e <_printf_float+0x20e>
 8014a80:	9b07      	ldr	r3, [sp, #28]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	dc3a      	bgt.n	8014afc <_printf_float+0x2bc>
 8014a86:	4a1c      	ldr	r2, [pc, #112]	; (8014af8 <_printf_float+0x2b8>)
 8014a88:	2301      	movs	r3, #1
 8014a8a:	4631      	mov	r1, r6
 8014a8c:	4628      	mov	r0, r5
 8014a8e:	47b8      	blx	r7
 8014a90:	3001      	adds	r0, #1
 8014a92:	f43f af21 	beq.w	80148d8 <_printf_float+0x98>
 8014a96:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014a9a:	4313      	orrs	r3, r2
 8014a9c:	d102      	bne.n	8014aa4 <_printf_float+0x264>
 8014a9e:	6823      	ldr	r3, [r4, #0]
 8014aa0:	07d9      	lsls	r1, r3, #31
 8014aa2:	d5d8      	bpl.n	8014a56 <_printf_float+0x216>
 8014aa4:	4653      	mov	r3, sl
 8014aa6:	465a      	mov	r2, fp
 8014aa8:	4631      	mov	r1, r6
 8014aaa:	4628      	mov	r0, r5
 8014aac:	47b8      	blx	r7
 8014aae:	3001      	adds	r0, #1
 8014ab0:	f43f af12 	beq.w	80148d8 <_printf_float+0x98>
 8014ab4:	f04f 0900 	mov.w	r9, #0
 8014ab8:	f104 0a1a 	add.w	sl, r4, #26
 8014abc:	9b07      	ldr	r3, [sp, #28]
 8014abe:	425b      	negs	r3, r3
 8014ac0:	454b      	cmp	r3, r9
 8014ac2:	dc01      	bgt.n	8014ac8 <_printf_float+0x288>
 8014ac4:	9b08      	ldr	r3, [sp, #32]
 8014ac6:	e795      	b.n	80149f4 <_printf_float+0x1b4>
 8014ac8:	2301      	movs	r3, #1
 8014aca:	4652      	mov	r2, sl
 8014acc:	4631      	mov	r1, r6
 8014ace:	4628      	mov	r0, r5
 8014ad0:	47b8      	blx	r7
 8014ad2:	3001      	adds	r0, #1
 8014ad4:	f43f af00 	beq.w	80148d8 <_printf_float+0x98>
 8014ad8:	f109 0901 	add.w	r9, r9, #1
 8014adc:	e7ee      	b.n	8014abc <_printf_float+0x27c>
 8014ade:	bf00      	nop
 8014ae0:	ffffffff 	.word	0xffffffff
 8014ae4:	7fefffff 	.word	0x7fefffff
 8014ae8:	08017430 	.word	0x08017430
 8014aec:	08017434 	.word	0x08017434
 8014af0:	08017438 	.word	0x08017438
 8014af4:	0801743c 	.word	0x0801743c
 8014af8:	08017440 	.word	0x08017440
 8014afc:	9a08      	ldr	r2, [sp, #32]
 8014afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014b00:	429a      	cmp	r2, r3
 8014b02:	bfa8      	it	ge
 8014b04:	461a      	movge	r2, r3
 8014b06:	2a00      	cmp	r2, #0
 8014b08:	4691      	mov	r9, r2
 8014b0a:	dc38      	bgt.n	8014b7e <_printf_float+0x33e>
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	9305      	str	r3, [sp, #20]
 8014b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b14:	f104 021a 	add.w	r2, r4, #26
 8014b18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014b1a:	9905      	ldr	r1, [sp, #20]
 8014b1c:	9304      	str	r3, [sp, #16]
 8014b1e:	eba3 0309 	sub.w	r3, r3, r9
 8014b22:	428b      	cmp	r3, r1
 8014b24:	dc33      	bgt.n	8014b8e <_printf_float+0x34e>
 8014b26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014b2a:	429a      	cmp	r2, r3
 8014b2c:	db3c      	blt.n	8014ba8 <_printf_float+0x368>
 8014b2e:	6823      	ldr	r3, [r4, #0]
 8014b30:	07da      	lsls	r2, r3, #31
 8014b32:	d439      	bmi.n	8014ba8 <_printf_float+0x368>
 8014b34:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014b38:	eba2 0903 	sub.w	r9, r2, r3
 8014b3c:	9b04      	ldr	r3, [sp, #16]
 8014b3e:	1ad2      	subs	r2, r2, r3
 8014b40:	4591      	cmp	r9, r2
 8014b42:	bfa8      	it	ge
 8014b44:	4691      	movge	r9, r2
 8014b46:	f1b9 0f00 	cmp.w	r9, #0
 8014b4a:	dc35      	bgt.n	8014bb8 <_printf_float+0x378>
 8014b4c:	f04f 0800 	mov.w	r8, #0
 8014b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014b54:	f104 0a1a 	add.w	sl, r4, #26
 8014b58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014b5c:	1a9b      	subs	r3, r3, r2
 8014b5e:	eba3 0309 	sub.w	r3, r3, r9
 8014b62:	4543      	cmp	r3, r8
 8014b64:	f77f af77 	ble.w	8014a56 <_printf_float+0x216>
 8014b68:	2301      	movs	r3, #1
 8014b6a:	4652      	mov	r2, sl
 8014b6c:	4631      	mov	r1, r6
 8014b6e:	4628      	mov	r0, r5
 8014b70:	47b8      	blx	r7
 8014b72:	3001      	adds	r0, #1
 8014b74:	f43f aeb0 	beq.w	80148d8 <_printf_float+0x98>
 8014b78:	f108 0801 	add.w	r8, r8, #1
 8014b7c:	e7ec      	b.n	8014b58 <_printf_float+0x318>
 8014b7e:	4613      	mov	r3, r2
 8014b80:	4631      	mov	r1, r6
 8014b82:	4642      	mov	r2, r8
 8014b84:	4628      	mov	r0, r5
 8014b86:	47b8      	blx	r7
 8014b88:	3001      	adds	r0, #1
 8014b8a:	d1bf      	bne.n	8014b0c <_printf_float+0x2cc>
 8014b8c:	e6a4      	b.n	80148d8 <_printf_float+0x98>
 8014b8e:	2301      	movs	r3, #1
 8014b90:	4631      	mov	r1, r6
 8014b92:	4628      	mov	r0, r5
 8014b94:	9204      	str	r2, [sp, #16]
 8014b96:	47b8      	blx	r7
 8014b98:	3001      	adds	r0, #1
 8014b9a:	f43f ae9d 	beq.w	80148d8 <_printf_float+0x98>
 8014b9e:	9b05      	ldr	r3, [sp, #20]
 8014ba0:	9a04      	ldr	r2, [sp, #16]
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	9305      	str	r3, [sp, #20]
 8014ba6:	e7b7      	b.n	8014b18 <_printf_float+0x2d8>
 8014ba8:	4653      	mov	r3, sl
 8014baa:	465a      	mov	r2, fp
 8014bac:	4631      	mov	r1, r6
 8014bae:	4628      	mov	r0, r5
 8014bb0:	47b8      	blx	r7
 8014bb2:	3001      	adds	r0, #1
 8014bb4:	d1be      	bne.n	8014b34 <_printf_float+0x2f4>
 8014bb6:	e68f      	b.n	80148d8 <_printf_float+0x98>
 8014bb8:	9a04      	ldr	r2, [sp, #16]
 8014bba:	464b      	mov	r3, r9
 8014bbc:	4442      	add	r2, r8
 8014bbe:	4631      	mov	r1, r6
 8014bc0:	4628      	mov	r0, r5
 8014bc2:	47b8      	blx	r7
 8014bc4:	3001      	adds	r0, #1
 8014bc6:	d1c1      	bne.n	8014b4c <_printf_float+0x30c>
 8014bc8:	e686      	b.n	80148d8 <_printf_float+0x98>
 8014bca:	9a08      	ldr	r2, [sp, #32]
 8014bcc:	2a01      	cmp	r2, #1
 8014bce:	dc01      	bgt.n	8014bd4 <_printf_float+0x394>
 8014bd0:	07db      	lsls	r3, r3, #31
 8014bd2:	d537      	bpl.n	8014c44 <_printf_float+0x404>
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	4642      	mov	r2, r8
 8014bd8:	4631      	mov	r1, r6
 8014bda:	4628      	mov	r0, r5
 8014bdc:	47b8      	blx	r7
 8014bde:	3001      	adds	r0, #1
 8014be0:	f43f ae7a 	beq.w	80148d8 <_printf_float+0x98>
 8014be4:	4653      	mov	r3, sl
 8014be6:	465a      	mov	r2, fp
 8014be8:	4631      	mov	r1, r6
 8014bea:	4628      	mov	r0, r5
 8014bec:	47b8      	blx	r7
 8014bee:	3001      	adds	r0, #1
 8014bf0:	f43f ae72 	beq.w	80148d8 <_printf_float+0x98>
 8014bf4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014bf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c00:	9b08      	ldr	r3, [sp, #32]
 8014c02:	d01a      	beq.n	8014c3a <_printf_float+0x3fa>
 8014c04:	3b01      	subs	r3, #1
 8014c06:	f108 0201 	add.w	r2, r8, #1
 8014c0a:	4631      	mov	r1, r6
 8014c0c:	4628      	mov	r0, r5
 8014c0e:	47b8      	blx	r7
 8014c10:	3001      	adds	r0, #1
 8014c12:	d10e      	bne.n	8014c32 <_printf_float+0x3f2>
 8014c14:	e660      	b.n	80148d8 <_printf_float+0x98>
 8014c16:	2301      	movs	r3, #1
 8014c18:	464a      	mov	r2, r9
 8014c1a:	4631      	mov	r1, r6
 8014c1c:	4628      	mov	r0, r5
 8014c1e:	47b8      	blx	r7
 8014c20:	3001      	adds	r0, #1
 8014c22:	f43f ae59 	beq.w	80148d8 <_printf_float+0x98>
 8014c26:	f108 0801 	add.w	r8, r8, #1
 8014c2a:	9b08      	ldr	r3, [sp, #32]
 8014c2c:	3b01      	subs	r3, #1
 8014c2e:	4543      	cmp	r3, r8
 8014c30:	dcf1      	bgt.n	8014c16 <_printf_float+0x3d6>
 8014c32:	9b04      	ldr	r3, [sp, #16]
 8014c34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014c38:	e6dd      	b.n	80149f6 <_printf_float+0x1b6>
 8014c3a:	f04f 0800 	mov.w	r8, #0
 8014c3e:	f104 091a 	add.w	r9, r4, #26
 8014c42:	e7f2      	b.n	8014c2a <_printf_float+0x3ea>
 8014c44:	2301      	movs	r3, #1
 8014c46:	4642      	mov	r2, r8
 8014c48:	e7df      	b.n	8014c0a <_printf_float+0x3ca>
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	464a      	mov	r2, r9
 8014c4e:	4631      	mov	r1, r6
 8014c50:	4628      	mov	r0, r5
 8014c52:	47b8      	blx	r7
 8014c54:	3001      	adds	r0, #1
 8014c56:	f43f ae3f 	beq.w	80148d8 <_printf_float+0x98>
 8014c5a:	f108 0801 	add.w	r8, r8, #1
 8014c5e:	68e3      	ldr	r3, [r4, #12]
 8014c60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c62:	1a5b      	subs	r3, r3, r1
 8014c64:	4543      	cmp	r3, r8
 8014c66:	dcf0      	bgt.n	8014c4a <_printf_float+0x40a>
 8014c68:	e6f9      	b.n	8014a5e <_printf_float+0x21e>
 8014c6a:	f04f 0800 	mov.w	r8, #0
 8014c6e:	f104 0919 	add.w	r9, r4, #25
 8014c72:	e7f4      	b.n	8014c5e <_printf_float+0x41e>

08014c74 <_printf_common>:
 8014c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c78:	4616      	mov	r6, r2
 8014c7a:	4699      	mov	r9, r3
 8014c7c:	688a      	ldr	r2, [r1, #8]
 8014c7e:	690b      	ldr	r3, [r1, #16]
 8014c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c84:	4293      	cmp	r3, r2
 8014c86:	bfb8      	it	lt
 8014c88:	4613      	movlt	r3, r2
 8014c8a:	6033      	str	r3, [r6, #0]
 8014c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c90:	4607      	mov	r7, r0
 8014c92:	460c      	mov	r4, r1
 8014c94:	b10a      	cbz	r2, 8014c9a <_printf_common+0x26>
 8014c96:	3301      	adds	r3, #1
 8014c98:	6033      	str	r3, [r6, #0]
 8014c9a:	6823      	ldr	r3, [r4, #0]
 8014c9c:	0699      	lsls	r1, r3, #26
 8014c9e:	bf42      	ittt	mi
 8014ca0:	6833      	ldrmi	r3, [r6, #0]
 8014ca2:	3302      	addmi	r3, #2
 8014ca4:	6033      	strmi	r3, [r6, #0]
 8014ca6:	6825      	ldr	r5, [r4, #0]
 8014ca8:	f015 0506 	ands.w	r5, r5, #6
 8014cac:	d106      	bne.n	8014cbc <_printf_common+0x48>
 8014cae:	f104 0a19 	add.w	sl, r4, #25
 8014cb2:	68e3      	ldr	r3, [r4, #12]
 8014cb4:	6832      	ldr	r2, [r6, #0]
 8014cb6:	1a9b      	subs	r3, r3, r2
 8014cb8:	42ab      	cmp	r3, r5
 8014cba:	dc26      	bgt.n	8014d0a <_printf_common+0x96>
 8014cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014cc0:	1e13      	subs	r3, r2, #0
 8014cc2:	6822      	ldr	r2, [r4, #0]
 8014cc4:	bf18      	it	ne
 8014cc6:	2301      	movne	r3, #1
 8014cc8:	0692      	lsls	r2, r2, #26
 8014cca:	d42b      	bmi.n	8014d24 <_printf_common+0xb0>
 8014ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014cd0:	4649      	mov	r1, r9
 8014cd2:	4638      	mov	r0, r7
 8014cd4:	47c0      	blx	r8
 8014cd6:	3001      	adds	r0, #1
 8014cd8:	d01e      	beq.n	8014d18 <_printf_common+0xa4>
 8014cda:	6823      	ldr	r3, [r4, #0]
 8014cdc:	6922      	ldr	r2, [r4, #16]
 8014cde:	f003 0306 	and.w	r3, r3, #6
 8014ce2:	2b04      	cmp	r3, #4
 8014ce4:	bf02      	ittt	eq
 8014ce6:	68e5      	ldreq	r5, [r4, #12]
 8014ce8:	6833      	ldreq	r3, [r6, #0]
 8014cea:	1aed      	subeq	r5, r5, r3
 8014cec:	68a3      	ldr	r3, [r4, #8]
 8014cee:	bf0c      	ite	eq
 8014cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cf4:	2500      	movne	r5, #0
 8014cf6:	4293      	cmp	r3, r2
 8014cf8:	bfc4      	itt	gt
 8014cfa:	1a9b      	subgt	r3, r3, r2
 8014cfc:	18ed      	addgt	r5, r5, r3
 8014cfe:	2600      	movs	r6, #0
 8014d00:	341a      	adds	r4, #26
 8014d02:	42b5      	cmp	r5, r6
 8014d04:	d11a      	bne.n	8014d3c <_printf_common+0xc8>
 8014d06:	2000      	movs	r0, #0
 8014d08:	e008      	b.n	8014d1c <_printf_common+0xa8>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	4652      	mov	r2, sl
 8014d0e:	4649      	mov	r1, r9
 8014d10:	4638      	mov	r0, r7
 8014d12:	47c0      	blx	r8
 8014d14:	3001      	adds	r0, #1
 8014d16:	d103      	bne.n	8014d20 <_printf_common+0xac>
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d20:	3501      	adds	r5, #1
 8014d22:	e7c6      	b.n	8014cb2 <_printf_common+0x3e>
 8014d24:	18e1      	adds	r1, r4, r3
 8014d26:	1c5a      	adds	r2, r3, #1
 8014d28:	2030      	movs	r0, #48	; 0x30
 8014d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014d2e:	4422      	add	r2, r4
 8014d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014d38:	3302      	adds	r3, #2
 8014d3a:	e7c7      	b.n	8014ccc <_printf_common+0x58>
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	4622      	mov	r2, r4
 8014d40:	4649      	mov	r1, r9
 8014d42:	4638      	mov	r0, r7
 8014d44:	47c0      	blx	r8
 8014d46:	3001      	adds	r0, #1
 8014d48:	d0e6      	beq.n	8014d18 <_printf_common+0xa4>
 8014d4a:	3601      	adds	r6, #1
 8014d4c:	e7d9      	b.n	8014d02 <_printf_common+0x8e>
	...

08014d50 <_printf_i>:
 8014d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d54:	7e0f      	ldrb	r7, [r1, #24]
 8014d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014d58:	2f78      	cmp	r7, #120	; 0x78
 8014d5a:	4691      	mov	r9, r2
 8014d5c:	4680      	mov	r8, r0
 8014d5e:	460c      	mov	r4, r1
 8014d60:	469a      	mov	sl, r3
 8014d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014d66:	d807      	bhi.n	8014d78 <_printf_i+0x28>
 8014d68:	2f62      	cmp	r7, #98	; 0x62
 8014d6a:	d80a      	bhi.n	8014d82 <_printf_i+0x32>
 8014d6c:	2f00      	cmp	r7, #0
 8014d6e:	f000 80d4 	beq.w	8014f1a <_printf_i+0x1ca>
 8014d72:	2f58      	cmp	r7, #88	; 0x58
 8014d74:	f000 80c0 	beq.w	8014ef8 <_printf_i+0x1a8>
 8014d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d80:	e03a      	b.n	8014df8 <_printf_i+0xa8>
 8014d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d86:	2b15      	cmp	r3, #21
 8014d88:	d8f6      	bhi.n	8014d78 <_printf_i+0x28>
 8014d8a:	a101      	add	r1, pc, #4	; (adr r1, 8014d90 <_printf_i+0x40>)
 8014d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d90:	08014de9 	.word	0x08014de9
 8014d94:	08014dfd 	.word	0x08014dfd
 8014d98:	08014d79 	.word	0x08014d79
 8014d9c:	08014d79 	.word	0x08014d79
 8014da0:	08014d79 	.word	0x08014d79
 8014da4:	08014d79 	.word	0x08014d79
 8014da8:	08014dfd 	.word	0x08014dfd
 8014dac:	08014d79 	.word	0x08014d79
 8014db0:	08014d79 	.word	0x08014d79
 8014db4:	08014d79 	.word	0x08014d79
 8014db8:	08014d79 	.word	0x08014d79
 8014dbc:	08014f01 	.word	0x08014f01
 8014dc0:	08014e29 	.word	0x08014e29
 8014dc4:	08014ebb 	.word	0x08014ebb
 8014dc8:	08014d79 	.word	0x08014d79
 8014dcc:	08014d79 	.word	0x08014d79
 8014dd0:	08014f23 	.word	0x08014f23
 8014dd4:	08014d79 	.word	0x08014d79
 8014dd8:	08014e29 	.word	0x08014e29
 8014ddc:	08014d79 	.word	0x08014d79
 8014de0:	08014d79 	.word	0x08014d79
 8014de4:	08014ec3 	.word	0x08014ec3
 8014de8:	682b      	ldr	r3, [r5, #0]
 8014dea:	1d1a      	adds	r2, r3, #4
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	602a      	str	r2, [r5, #0]
 8014df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014df8:	2301      	movs	r3, #1
 8014dfa:	e09f      	b.n	8014f3c <_printf_i+0x1ec>
 8014dfc:	6820      	ldr	r0, [r4, #0]
 8014dfe:	682b      	ldr	r3, [r5, #0]
 8014e00:	0607      	lsls	r7, r0, #24
 8014e02:	f103 0104 	add.w	r1, r3, #4
 8014e06:	6029      	str	r1, [r5, #0]
 8014e08:	d501      	bpl.n	8014e0e <_printf_i+0xbe>
 8014e0a:	681e      	ldr	r6, [r3, #0]
 8014e0c:	e003      	b.n	8014e16 <_printf_i+0xc6>
 8014e0e:	0646      	lsls	r6, r0, #25
 8014e10:	d5fb      	bpl.n	8014e0a <_printf_i+0xba>
 8014e12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014e16:	2e00      	cmp	r6, #0
 8014e18:	da03      	bge.n	8014e22 <_printf_i+0xd2>
 8014e1a:	232d      	movs	r3, #45	; 0x2d
 8014e1c:	4276      	negs	r6, r6
 8014e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014e22:	485a      	ldr	r0, [pc, #360]	; (8014f8c <_printf_i+0x23c>)
 8014e24:	230a      	movs	r3, #10
 8014e26:	e012      	b.n	8014e4e <_printf_i+0xfe>
 8014e28:	682b      	ldr	r3, [r5, #0]
 8014e2a:	6820      	ldr	r0, [r4, #0]
 8014e2c:	1d19      	adds	r1, r3, #4
 8014e2e:	6029      	str	r1, [r5, #0]
 8014e30:	0605      	lsls	r5, r0, #24
 8014e32:	d501      	bpl.n	8014e38 <_printf_i+0xe8>
 8014e34:	681e      	ldr	r6, [r3, #0]
 8014e36:	e002      	b.n	8014e3e <_printf_i+0xee>
 8014e38:	0641      	lsls	r1, r0, #25
 8014e3a:	d5fb      	bpl.n	8014e34 <_printf_i+0xe4>
 8014e3c:	881e      	ldrh	r6, [r3, #0]
 8014e3e:	4853      	ldr	r0, [pc, #332]	; (8014f8c <_printf_i+0x23c>)
 8014e40:	2f6f      	cmp	r7, #111	; 0x6f
 8014e42:	bf0c      	ite	eq
 8014e44:	2308      	moveq	r3, #8
 8014e46:	230a      	movne	r3, #10
 8014e48:	2100      	movs	r1, #0
 8014e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014e4e:	6865      	ldr	r5, [r4, #4]
 8014e50:	60a5      	str	r5, [r4, #8]
 8014e52:	2d00      	cmp	r5, #0
 8014e54:	bfa2      	ittt	ge
 8014e56:	6821      	ldrge	r1, [r4, #0]
 8014e58:	f021 0104 	bicge.w	r1, r1, #4
 8014e5c:	6021      	strge	r1, [r4, #0]
 8014e5e:	b90e      	cbnz	r6, 8014e64 <_printf_i+0x114>
 8014e60:	2d00      	cmp	r5, #0
 8014e62:	d04b      	beq.n	8014efc <_printf_i+0x1ac>
 8014e64:	4615      	mov	r5, r2
 8014e66:	fbb6 f1f3 	udiv	r1, r6, r3
 8014e6a:	fb03 6711 	mls	r7, r3, r1, r6
 8014e6e:	5dc7      	ldrb	r7, [r0, r7]
 8014e70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014e74:	4637      	mov	r7, r6
 8014e76:	42bb      	cmp	r3, r7
 8014e78:	460e      	mov	r6, r1
 8014e7a:	d9f4      	bls.n	8014e66 <_printf_i+0x116>
 8014e7c:	2b08      	cmp	r3, #8
 8014e7e:	d10b      	bne.n	8014e98 <_printf_i+0x148>
 8014e80:	6823      	ldr	r3, [r4, #0]
 8014e82:	07de      	lsls	r6, r3, #31
 8014e84:	d508      	bpl.n	8014e98 <_printf_i+0x148>
 8014e86:	6923      	ldr	r3, [r4, #16]
 8014e88:	6861      	ldr	r1, [r4, #4]
 8014e8a:	4299      	cmp	r1, r3
 8014e8c:	bfde      	ittt	le
 8014e8e:	2330      	movle	r3, #48	; 0x30
 8014e90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e94:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014e98:	1b52      	subs	r2, r2, r5
 8014e9a:	6122      	str	r2, [r4, #16]
 8014e9c:	f8cd a000 	str.w	sl, [sp]
 8014ea0:	464b      	mov	r3, r9
 8014ea2:	aa03      	add	r2, sp, #12
 8014ea4:	4621      	mov	r1, r4
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	f7ff fee4 	bl	8014c74 <_printf_common>
 8014eac:	3001      	adds	r0, #1
 8014eae:	d14a      	bne.n	8014f46 <_printf_i+0x1f6>
 8014eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014eb4:	b004      	add	sp, #16
 8014eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014eba:	6823      	ldr	r3, [r4, #0]
 8014ebc:	f043 0320 	orr.w	r3, r3, #32
 8014ec0:	6023      	str	r3, [r4, #0]
 8014ec2:	4833      	ldr	r0, [pc, #204]	; (8014f90 <_printf_i+0x240>)
 8014ec4:	2778      	movs	r7, #120	; 0x78
 8014ec6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014eca:	6823      	ldr	r3, [r4, #0]
 8014ecc:	6829      	ldr	r1, [r5, #0]
 8014ece:	061f      	lsls	r7, r3, #24
 8014ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8014ed4:	d402      	bmi.n	8014edc <_printf_i+0x18c>
 8014ed6:	065f      	lsls	r7, r3, #25
 8014ed8:	bf48      	it	mi
 8014eda:	b2b6      	uxthmi	r6, r6
 8014edc:	07df      	lsls	r7, r3, #31
 8014ede:	bf48      	it	mi
 8014ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8014ee4:	6029      	str	r1, [r5, #0]
 8014ee6:	bf48      	it	mi
 8014ee8:	6023      	strmi	r3, [r4, #0]
 8014eea:	b91e      	cbnz	r6, 8014ef4 <_printf_i+0x1a4>
 8014eec:	6823      	ldr	r3, [r4, #0]
 8014eee:	f023 0320 	bic.w	r3, r3, #32
 8014ef2:	6023      	str	r3, [r4, #0]
 8014ef4:	2310      	movs	r3, #16
 8014ef6:	e7a7      	b.n	8014e48 <_printf_i+0xf8>
 8014ef8:	4824      	ldr	r0, [pc, #144]	; (8014f8c <_printf_i+0x23c>)
 8014efa:	e7e4      	b.n	8014ec6 <_printf_i+0x176>
 8014efc:	4615      	mov	r5, r2
 8014efe:	e7bd      	b.n	8014e7c <_printf_i+0x12c>
 8014f00:	682b      	ldr	r3, [r5, #0]
 8014f02:	6826      	ldr	r6, [r4, #0]
 8014f04:	6961      	ldr	r1, [r4, #20]
 8014f06:	1d18      	adds	r0, r3, #4
 8014f08:	6028      	str	r0, [r5, #0]
 8014f0a:	0635      	lsls	r5, r6, #24
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	d501      	bpl.n	8014f14 <_printf_i+0x1c4>
 8014f10:	6019      	str	r1, [r3, #0]
 8014f12:	e002      	b.n	8014f1a <_printf_i+0x1ca>
 8014f14:	0670      	lsls	r0, r6, #25
 8014f16:	d5fb      	bpl.n	8014f10 <_printf_i+0x1c0>
 8014f18:	8019      	strh	r1, [r3, #0]
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	6123      	str	r3, [r4, #16]
 8014f1e:	4615      	mov	r5, r2
 8014f20:	e7bc      	b.n	8014e9c <_printf_i+0x14c>
 8014f22:	682b      	ldr	r3, [r5, #0]
 8014f24:	1d1a      	adds	r2, r3, #4
 8014f26:	602a      	str	r2, [r5, #0]
 8014f28:	681d      	ldr	r5, [r3, #0]
 8014f2a:	6862      	ldr	r2, [r4, #4]
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f7eb f9d6 	bl	80002e0 <memchr>
 8014f34:	b108      	cbz	r0, 8014f3a <_printf_i+0x1ea>
 8014f36:	1b40      	subs	r0, r0, r5
 8014f38:	6060      	str	r0, [r4, #4]
 8014f3a:	6863      	ldr	r3, [r4, #4]
 8014f3c:	6123      	str	r3, [r4, #16]
 8014f3e:	2300      	movs	r3, #0
 8014f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f44:	e7aa      	b.n	8014e9c <_printf_i+0x14c>
 8014f46:	6923      	ldr	r3, [r4, #16]
 8014f48:	462a      	mov	r2, r5
 8014f4a:	4649      	mov	r1, r9
 8014f4c:	4640      	mov	r0, r8
 8014f4e:	47d0      	blx	sl
 8014f50:	3001      	adds	r0, #1
 8014f52:	d0ad      	beq.n	8014eb0 <_printf_i+0x160>
 8014f54:	6823      	ldr	r3, [r4, #0]
 8014f56:	079b      	lsls	r3, r3, #30
 8014f58:	d413      	bmi.n	8014f82 <_printf_i+0x232>
 8014f5a:	68e0      	ldr	r0, [r4, #12]
 8014f5c:	9b03      	ldr	r3, [sp, #12]
 8014f5e:	4298      	cmp	r0, r3
 8014f60:	bfb8      	it	lt
 8014f62:	4618      	movlt	r0, r3
 8014f64:	e7a6      	b.n	8014eb4 <_printf_i+0x164>
 8014f66:	2301      	movs	r3, #1
 8014f68:	4632      	mov	r2, r6
 8014f6a:	4649      	mov	r1, r9
 8014f6c:	4640      	mov	r0, r8
 8014f6e:	47d0      	blx	sl
 8014f70:	3001      	adds	r0, #1
 8014f72:	d09d      	beq.n	8014eb0 <_printf_i+0x160>
 8014f74:	3501      	adds	r5, #1
 8014f76:	68e3      	ldr	r3, [r4, #12]
 8014f78:	9903      	ldr	r1, [sp, #12]
 8014f7a:	1a5b      	subs	r3, r3, r1
 8014f7c:	42ab      	cmp	r3, r5
 8014f7e:	dcf2      	bgt.n	8014f66 <_printf_i+0x216>
 8014f80:	e7eb      	b.n	8014f5a <_printf_i+0x20a>
 8014f82:	2500      	movs	r5, #0
 8014f84:	f104 0619 	add.w	r6, r4, #25
 8014f88:	e7f5      	b.n	8014f76 <_printf_i+0x226>
 8014f8a:	bf00      	nop
 8014f8c:	08017442 	.word	0x08017442
 8014f90:	08017453 	.word	0x08017453

08014f94 <std>:
 8014f94:	2300      	movs	r3, #0
 8014f96:	b510      	push	{r4, lr}
 8014f98:	4604      	mov	r4, r0
 8014f9a:	e9c0 3300 	strd	r3, r3, [r0]
 8014f9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fa2:	6083      	str	r3, [r0, #8]
 8014fa4:	8181      	strh	r1, [r0, #12]
 8014fa6:	6643      	str	r3, [r0, #100]	; 0x64
 8014fa8:	81c2      	strh	r2, [r0, #14]
 8014faa:	6183      	str	r3, [r0, #24]
 8014fac:	4619      	mov	r1, r3
 8014fae:	2208      	movs	r2, #8
 8014fb0:	305c      	adds	r0, #92	; 0x5c
 8014fb2:	f000 f9f7 	bl	80153a4 <memset>
 8014fb6:	4b0d      	ldr	r3, [pc, #52]	; (8014fec <std+0x58>)
 8014fb8:	6263      	str	r3, [r4, #36]	; 0x24
 8014fba:	4b0d      	ldr	r3, [pc, #52]	; (8014ff0 <std+0x5c>)
 8014fbc:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fbe:	4b0d      	ldr	r3, [pc, #52]	; (8014ff4 <std+0x60>)
 8014fc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fc2:	4b0d      	ldr	r3, [pc, #52]	; (8014ff8 <std+0x64>)
 8014fc4:	6323      	str	r3, [r4, #48]	; 0x30
 8014fc6:	4b0d      	ldr	r3, [pc, #52]	; (8014ffc <std+0x68>)
 8014fc8:	6224      	str	r4, [r4, #32]
 8014fca:	429c      	cmp	r4, r3
 8014fcc:	d006      	beq.n	8014fdc <std+0x48>
 8014fce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014fd2:	4294      	cmp	r4, r2
 8014fd4:	d002      	beq.n	8014fdc <std+0x48>
 8014fd6:	33d0      	adds	r3, #208	; 0xd0
 8014fd8:	429c      	cmp	r4, r3
 8014fda:	d105      	bne.n	8014fe8 <std+0x54>
 8014fdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fe4:	f000 baae 	b.w	8015544 <__retarget_lock_init_recursive>
 8014fe8:	bd10      	pop	{r4, pc}
 8014fea:	bf00      	nop
 8014fec:	080151f5 	.word	0x080151f5
 8014ff0:	08015217 	.word	0x08015217
 8014ff4:	0801524f 	.word	0x0801524f
 8014ff8:	08015273 	.word	0x08015273
 8014ffc:	240045cc 	.word	0x240045cc

08015000 <stdio_exit_handler>:
 8015000:	4a02      	ldr	r2, [pc, #8]	; (801500c <stdio_exit_handler+0xc>)
 8015002:	4903      	ldr	r1, [pc, #12]	; (8015010 <stdio_exit_handler+0x10>)
 8015004:	4803      	ldr	r0, [pc, #12]	; (8015014 <stdio_exit_handler+0x14>)
 8015006:	f000 b869 	b.w	80150dc <_fwalk_sglue>
 801500a:	bf00      	nop
 801500c:	24000050 	.word	0x24000050
 8015010:	08016c85 	.word	0x08016c85
 8015014:	2400005c 	.word	0x2400005c

08015018 <cleanup_stdio>:
 8015018:	6841      	ldr	r1, [r0, #4]
 801501a:	4b0c      	ldr	r3, [pc, #48]	; (801504c <cleanup_stdio+0x34>)
 801501c:	4299      	cmp	r1, r3
 801501e:	b510      	push	{r4, lr}
 8015020:	4604      	mov	r4, r0
 8015022:	d001      	beq.n	8015028 <cleanup_stdio+0x10>
 8015024:	f001 fe2e 	bl	8016c84 <_fflush_r>
 8015028:	68a1      	ldr	r1, [r4, #8]
 801502a:	4b09      	ldr	r3, [pc, #36]	; (8015050 <cleanup_stdio+0x38>)
 801502c:	4299      	cmp	r1, r3
 801502e:	d002      	beq.n	8015036 <cleanup_stdio+0x1e>
 8015030:	4620      	mov	r0, r4
 8015032:	f001 fe27 	bl	8016c84 <_fflush_r>
 8015036:	68e1      	ldr	r1, [r4, #12]
 8015038:	4b06      	ldr	r3, [pc, #24]	; (8015054 <cleanup_stdio+0x3c>)
 801503a:	4299      	cmp	r1, r3
 801503c:	d004      	beq.n	8015048 <cleanup_stdio+0x30>
 801503e:	4620      	mov	r0, r4
 8015040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015044:	f001 be1e 	b.w	8016c84 <_fflush_r>
 8015048:	bd10      	pop	{r4, pc}
 801504a:	bf00      	nop
 801504c:	240045cc 	.word	0x240045cc
 8015050:	24004634 	.word	0x24004634
 8015054:	2400469c 	.word	0x2400469c

08015058 <global_stdio_init.part.0>:
 8015058:	b510      	push	{r4, lr}
 801505a:	4b0b      	ldr	r3, [pc, #44]	; (8015088 <global_stdio_init.part.0+0x30>)
 801505c:	4c0b      	ldr	r4, [pc, #44]	; (801508c <global_stdio_init.part.0+0x34>)
 801505e:	4a0c      	ldr	r2, [pc, #48]	; (8015090 <global_stdio_init.part.0+0x38>)
 8015060:	601a      	str	r2, [r3, #0]
 8015062:	4620      	mov	r0, r4
 8015064:	2200      	movs	r2, #0
 8015066:	2104      	movs	r1, #4
 8015068:	f7ff ff94 	bl	8014f94 <std>
 801506c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015070:	2201      	movs	r2, #1
 8015072:	2109      	movs	r1, #9
 8015074:	f7ff ff8e 	bl	8014f94 <std>
 8015078:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801507c:	2202      	movs	r2, #2
 801507e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015082:	2112      	movs	r1, #18
 8015084:	f7ff bf86 	b.w	8014f94 <std>
 8015088:	24004704 	.word	0x24004704
 801508c:	240045cc 	.word	0x240045cc
 8015090:	08015001 	.word	0x08015001

08015094 <__sfp_lock_acquire>:
 8015094:	4801      	ldr	r0, [pc, #4]	; (801509c <__sfp_lock_acquire+0x8>)
 8015096:	f000 ba56 	b.w	8015546 <__retarget_lock_acquire_recursive>
 801509a:	bf00      	nop
 801509c:	2400470d 	.word	0x2400470d

080150a0 <__sfp_lock_release>:
 80150a0:	4801      	ldr	r0, [pc, #4]	; (80150a8 <__sfp_lock_release+0x8>)
 80150a2:	f000 ba51 	b.w	8015548 <__retarget_lock_release_recursive>
 80150a6:	bf00      	nop
 80150a8:	2400470d 	.word	0x2400470d

080150ac <__sinit>:
 80150ac:	b510      	push	{r4, lr}
 80150ae:	4604      	mov	r4, r0
 80150b0:	f7ff fff0 	bl	8015094 <__sfp_lock_acquire>
 80150b4:	6a23      	ldr	r3, [r4, #32]
 80150b6:	b11b      	cbz	r3, 80150c0 <__sinit+0x14>
 80150b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80150bc:	f7ff bff0 	b.w	80150a0 <__sfp_lock_release>
 80150c0:	4b04      	ldr	r3, [pc, #16]	; (80150d4 <__sinit+0x28>)
 80150c2:	6223      	str	r3, [r4, #32]
 80150c4:	4b04      	ldr	r3, [pc, #16]	; (80150d8 <__sinit+0x2c>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d1f5      	bne.n	80150b8 <__sinit+0xc>
 80150cc:	f7ff ffc4 	bl	8015058 <global_stdio_init.part.0>
 80150d0:	e7f2      	b.n	80150b8 <__sinit+0xc>
 80150d2:	bf00      	nop
 80150d4:	08015019 	.word	0x08015019
 80150d8:	24004704 	.word	0x24004704

080150dc <_fwalk_sglue>:
 80150dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150e0:	4607      	mov	r7, r0
 80150e2:	4688      	mov	r8, r1
 80150e4:	4614      	mov	r4, r2
 80150e6:	2600      	movs	r6, #0
 80150e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150ec:	f1b9 0901 	subs.w	r9, r9, #1
 80150f0:	d505      	bpl.n	80150fe <_fwalk_sglue+0x22>
 80150f2:	6824      	ldr	r4, [r4, #0]
 80150f4:	2c00      	cmp	r4, #0
 80150f6:	d1f7      	bne.n	80150e8 <_fwalk_sglue+0xc>
 80150f8:	4630      	mov	r0, r6
 80150fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150fe:	89ab      	ldrh	r3, [r5, #12]
 8015100:	2b01      	cmp	r3, #1
 8015102:	d907      	bls.n	8015114 <_fwalk_sglue+0x38>
 8015104:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015108:	3301      	adds	r3, #1
 801510a:	d003      	beq.n	8015114 <_fwalk_sglue+0x38>
 801510c:	4629      	mov	r1, r5
 801510e:	4638      	mov	r0, r7
 8015110:	47c0      	blx	r8
 8015112:	4306      	orrs	r6, r0
 8015114:	3568      	adds	r5, #104	; 0x68
 8015116:	e7e9      	b.n	80150ec <_fwalk_sglue+0x10>

08015118 <iprintf>:
 8015118:	b40f      	push	{r0, r1, r2, r3}
 801511a:	b507      	push	{r0, r1, r2, lr}
 801511c:	4906      	ldr	r1, [pc, #24]	; (8015138 <iprintf+0x20>)
 801511e:	ab04      	add	r3, sp, #16
 8015120:	6808      	ldr	r0, [r1, #0]
 8015122:	f853 2b04 	ldr.w	r2, [r3], #4
 8015126:	6881      	ldr	r1, [r0, #8]
 8015128:	9301      	str	r3, [sp, #4]
 801512a:	f001 fc0b 	bl	8016944 <_vfiprintf_r>
 801512e:	b003      	add	sp, #12
 8015130:	f85d eb04 	ldr.w	lr, [sp], #4
 8015134:	b004      	add	sp, #16
 8015136:	4770      	bx	lr
 8015138:	240000a8 	.word	0x240000a8

0801513c <_puts_r>:
 801513c:	6a03      	ldr	r3, [r0, #32]
 801513e:	b570      	push	{r4, r5, r6, lr}
 8015140:	6884      	ldr	r4, [r0, #8]
 8015142:	4605      	mov	r5, r0
 8015144:	460e      	mov	r6, r1
 8015146:	b90b      	cbnz	r3, 801514c <_puts_r+0x10>
 8015148:	f7ff ffb0 	bl	80150ac <__sinit>
 801514c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801514e:	07db      	lsls	r3, r3, #31
 8015150:	d405      	bmi.n	801515e <_puts_r+0x22>
 8015152:	89a3      	ldrh	r3, [r4, #12]
 8015154:	0598      	lsls	r0, r3, #22
 8015156:	d402      	bmi.n	801515e <_puts_r+0x22>
 8015158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801515a:	f000 f9f4 	bl	8015546 <__retarget_lock_acquire_recursive>
 801515e:	89a3      	ldrh	r3, [r4, #12]
 8015160:	0719      	lsls	r1, r3, #28
 8015162:	d513      	bpl.n	801518c <_puts_r+0x50>
 8015164:	6923      	ldr	r3, [r4, #16]
 8015166:	b18b      	cbz	r3, 801518c <_puts_r+0x50>
 8015168:	3e01      	subs	r6, #1
 801516a:	68a3      	ldr	r3, [r4, #8]
 801516c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015170:	3b01      	subs	r3, #1
 8015172:	60a3      	str	r3, [r4, #8]
 8015174:	b9e9      	cbnz	r1, 80151b2 <_puts_r+0x76>
 8015176:	2b00      	cmp	r3, #0
 8015178:	da2e      	bge.n	80151d8 <_puts_r+0x9c>
 801517a:	4622      	mov	r2, r4
 801517c:	210a      	movs	r1, #10
 801517e:	4628      	mov	r0, r5
 8015180:	f000 f87b 	bl	801527a <__swbuf_r>
 8015184:	3001      	adds	r0, #1
 8015186:	d007      	beq.n	8015198 <_puts_r+0x5c>
 8015188:	250a      	movs	r5, #10
 801518a:	e007      	b.n	801519c <_puts_r+0x60>
 801518c:	4621      	mov	r1, r4
 801518e:	4628      	mov	r0, r5
 8015190:	f000 f8b0 	bl	80152f4 <__swsetup_r>
 8015194:	2800      	cmp	r0, #0
 8015196:	d0e7      	beq.n	8015168 <_puts_r+0x2c>
 8015198:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801519c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801519e:	07da      	lsls	r2, r3, #31
 80151a0:	d405      	bmi.n	80151ae <_puts_r+0x72>
 80151a2:	89a3      	ldrh	r3, [r4, #12]
 80151a4:	059b      	lsls	r3, r3, #22
 80151a6:	d402      	bmi.n	80151ae <_puts_r+0x72>
 80151a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80151aa:	f000 f9cd 	bl	8015548 <__retarget_lock_release_recursive>
 80151ae:	4628      	mov	r0, r5
 80151b0:	bd70      	pop	{r4, r5, r6, pc}
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	da04      	bge.n	80151c0 <_puts_r+0x84>
 80151b6:	69a2      	ldr	r2, [r4, #24]
 80151b8:	429a      	cmp	r2, r3
 80151ba:	dc06      	bgt.n	80151ca <_puts_r+0x8e>
 80151bc:	290a      	cmp	r1, #10
 80151be:	d004      	beq.n	80151ca <_puts_r+0x8e>
 80151c0:	6823      	ldr	r3, [r4, #0]
 80151c2:	1c5a      	adds	r2, r3, #1
 80151c4:	6022      	str	r2, [r4, #0]
 80151c6:	7019      	strb	r1, [r3, #0]
 80151c8:	e7cf      	b.n	801516a <_puts_r+0x2e>
 80151ca:	4622      	mov	r2, r4
 80151cc:	4628      	mov	r0, r5
 80151ce:	f000 f854 	bl	801527a <__swbuf_r>
 80151d2:	3001      	adds	r0, #1
 80151d4:	d1c9      	bne.n	801516a <_puts_r+0x2e>
 80151d6:	e7df      	b.n	8015198 <_puts_r+0x5c>
 80151d8:	6823      	ldr	r3, [r4, #0]
 80151da:	250a      	movs	r5, #10
 80151dc:	1c5a      	adds	r2, r3, #1
 80151de:	6022      	str	r2, [r4, #0]
 80151e0:	701d      	strb	r5, [r3, #0]
 80151e2:	e7db      	b.n	801519c <_puts_r+0x60>

080151e4 <puts>:
 80151e4:	4b02      	ldr	r3, [pc, #8]	; (80151f0 <puts+0xc>)
 80151e6:	4601      	mov	r1, r0
 80151e8:	6818      	ldr	r0, [r3, #0]
 80151ea:	f7ff bfa7 	b.w	801513c <_puts_r>
 80151ee:	bf00      	nop
 80151f0:	240000a8 	.word	0x240000a8

080151f4 <__sread>:
 80151f4:	b510      	push	{r4, lr}
 80151f6:	460c      	mov	r4, r1
 80151f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151fc:	f000 f930 	bl	8015460 <_read_r>
 8015200:	2800      	cmp	r0, #0
 8015202:	bfab      	itete	ge
 8015204:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015206:	89a3      	ldrhlt	r3, [r4, #12]
 8015208:	181b      	addge	r3, r3, r0
 801520a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801520e:	bfac      	ite	ge
 8015210:	6563      	strge	r3, [r4, #84]	; 0x54
 8015212:	81a3      	strhlt	r3, [r4, #12]
 8015214:	bd10      	pop	{r4, pc}

08015216 <__swrite>:
 8015216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801521a:	461f      	mov	r7, r3
 801521c:	898b      	ldrh	r3, [r1, #12]
 801521e:	05db      	lsls	r3, r3, #23
 8015220:	4605      	mov	r5, r0
 8015222:	460c      	mov	r4, r1
 8015224:	4616      	mov	r6, r2
 8015226:	d505      	bpl.n	8015234 <__swrite+0x1e>
 8015228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801522c:	2302      	movs	r3, #2
 801522e:	2200      	movs	r2, #0
 8015230:	f000 f904 	bl	801543c <_lseek_r>
 8015234:	89a3      	ldrh	r3, [r4, #12]
 8015236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801523a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801523e:	81a3      	strh	r3, [r4, #12]
 8015240:	4632      	mov	r2, r6
 8015242:	463b      	mov	r3, r7
 8015244:	4628      	mov	r0, r5
 8015246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801524a:	f000 b93f 	b.w	80154cc <_write_r>

0801524e <__sseek>:
 801524e:	b510      	push	{r4, lr}
 8015250:	460c      	mov	r4, r1
 8015252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015256:	f000 f8f1 	bl	801543c <_lseek_r>
 801525a:	1c43      	adds	r3, r0, #1
 801525c:	89a3      	ldrh	r3, [r4, #12]
 801525e:	bf15      	itete	ne
 8015260:	6560      	strne	r0, [r4, #84]	; 0x54
 8015262:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015266:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801526a:	81a3      	strheq	r3, [r4, #12]
 801526c:	bf18      	it	ne
 801526e:	81a3      	strhne	r3, [r4, #12]
 8015270:	bd10      	pop	{r4, pc}

08015272 <__sclose>:
 8015272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015276:	f000 b8d1 	b.w	801541c <_close_r>

0801527a <__swbuf_r>:
 801527a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801527c:	460e      	mov	r6, r1
 801527e:	4614      	mov	r4, r2
 8015280:	4605      	mov	r5, r0
 8015282:	b118      	cbz	r0, 801528c <__swbuf_r+0x12>
 8015284:	6a03      	ldr	r3, [r0, #32]
 8015286:	b90b      	cbnz	r3, 801528c <__swbuf_r+0x12>
 8015288:	f7ff ff10 	bl	80150ac <__sinit>
 801528c:	69a3      	ldr	r3, [r4, #24]
 801528e:	60a3      	str	r3, [r4, #8]
 8015290:	89a3      	ldrh	r3, [r4, #12]
 8015292:	071a      	lsls	r2, r3, #28
 8015294:	d525      	bpl.n	80152e2 <__swbuf_r+0x68>
 8015296:	6923      	ldr	r3, [r4, #16]
 8015298:	b31b      	cbz	r3, 80152e2 <__swbuf_r+0x68>
 801529a:	6823      	ldr	r3, [r4, #0]
 801529c:	6922      	ldr	r2, [r4, #16]
 801529e:	1a98      	subs	r0, r3, r2
 80152a0:	6963      	ldr	r3, [r4, #20]
 80152a2:	b2f6      	uxtb	r6, r6
 80152a4:	4283      	cmp	r3, r0
 80152a6:	4637      	mov	r7, r6
 80152a8:	dc04      	bgt.n	80152b4 <__swbuf_r+0x3a>
 80152aa:	4621      	mov	r1, r4
 80152ac:	4628      	mov	r0, r5
 80152ae:	f001 fce9 	bl	8016c84 <_fflush_r>
 80152b2:	b9e0      	cbnz	r0, 80152ee <__swbuf_r+0x74>
 80152b4:	68a3      	ldr	r3, [r4, #8]
 80152b6:	3b01      	subs	r3, #1
 80152b8:	60a3      	str	r3, [r4, #8]
 80152ba:	6823      	ldr	r3, [r4, #0]
 80152bc:	1c5a      	adds	r2, r3, #1
 80152be:	6022      	str	r2, [r4, #0]
 80152c0:	701e      	strb	r6, [r3, #0]
 80152c2:	6962      	ldr	r2, [r4, #20]
 80152c4:	1c43      	adds	r3, r0, #1
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d004      	beq.n	80152d4 <__swbuf_r+0x5a>
 80152ca:	89a3      	ldrh	r3, [r4, #12]
 80152cc:	07db      	lsls	r3, r3, #31
 80152ce:	d506      	bpl.n	80152de <__swbuf_r+0x64>
 80152d0:	2e0a      	cmp	r6, #10
 80152d2:	d104      	bne.n	80152de <__swbuf_r+0x64>
 80152d4:	4621      	mov	r1, r4
 80152d6:	4628      	mov	r0, r5
 80152d8:	f001 fcd4 	bl	8016c84 <_fflush_r>
 80152dc:	b938      	cbnz	r0, 80152ee <__swbuf_r+0x74>
 80152de:	4638      	mov	r0, r7
 80152e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152e2:	4621      	mov	r1, r4
 80152e4:	4628      	mov	r0, r5
 80152e6:	f000 f805 	bl	80152f4 <__swsetup_r>
 80152ea:	2800      	cmp	r0, #0
 80152ec:	d0d5      	beq.n	801529a <__swbuf_r+0x20>
 80152ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80152f2:	e7f4      	b.n	80152de <__swbuf_r+0x64>

080152f4 <__swsetup_r>:
 80152f4:	b538      	push	{r3, r4, r5, lr}
 80152f6:	4b2a      	ldr	r3, [pc, #168]	; (80153a0 <__swsetup_r+0xac>)
 80152f8:	4605      	mov	r5, r0
 80152fa:	6818      	ldr	r0, [r3, #0]
 80152fc:	460c      	mov	r4, r1
 80152fe:	b118      	cbz	r0, 8015308 <__swsetup_r+0x14>
 8015300:	6a03      	ldr	r3, [r0, #32]
 8015302:	b90b      	cbnz	r3, 8015308 <__swsetup_r+0x14>
 8015304:	f7ff fed2 	bl	80150ac <__sinit>
 8015308:	89a3      	ldrh	r3, [r4, #12]
 801530a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801530e:	0718      	lsls	r0, r3, #28
 8015310:	d422      	bmi.n	8015358 <__swsetup_r+0x64>
 8015312:	06d9      	lsls	r1, r3, #27
 8015314:	d407      	bmi.n	8015326 <__swsetup_r+0x32>
 8015316:	2309      	movs	r3, #9
 8015318:	602b      	str	r3, [r5, #0]
 801531a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801531e:	81a3      	strh	r3, [r4, #12]
 8015320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015324:	e034      	b.n	8015390 <__swsetup_r+0x9c>
 8015326:	0758      	lsls	r0, r3, #29
 8015328:	d512      	bpl.n	8015350 <__swsetup_r+0x5c>
 801532a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801532c:	b141      	cbz	r1, 8015340 <__swsetup_r+0x4c>
 801532e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015332:	4299      	cmp	r1, r3
 8015334:	d002      	beq.n	801533c <__swsetup_r+0x48>
 8015336:	4628      	mov	r0, r5
 8015338:	f000 ff0a 	bl	8016150 <_free_r>
 801533c:	2300      	movs	r3, #0
 801533e:	6363      	str	r3, [r4, #52]	; 0x34
 8015340:	89a3      	ldrh	r3, [r4, #12]
 8015342:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015346:	81a3      	strh	r3, [r4, #12]
 8015348:	2300      	movs	r3, #0
 801534a:	6063      	str	r3, [r4, #4]
 801534c:	6923      	ldr	r3, [r4, #16]
 801534e:	6023      	str	r3, [r4, #0]
 8015350:	89a3      	ldrh	r3, [r4, #12]
 8015352:	f043 0308 	orr.w	r3, r3, #8
 8015356:	81a3      	strh	r3, [r4, #12]
 8015358:	6923      	ldr	r3, [r4, #16]
 801535a:	b94b      	cbnz	r3, 8015370 <__swsetup_r+0x7c>
 801535c:	89a3      	ldrh	r3, [r4, #12]
 801535e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015366:	d003      	beq.n	8015370 <__swsetup_r+0x7c>
 8015368:	4621      	mov	r1, r4
 801536a:	4628      	mov	r0, r5
 801536c:	f001 fcd8 	bl	8016d20 <__smakebuf_r>
 8015370:	89a0      	ldrh	r0, [r4, #12]
 8015372:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015376:	f010 0301 	ands.w	r3, r0, #1
 801537a:	d00a      	beq.n	8015392 <__swsetup_r+0x9e>
 801537c:	2300      	movs	r3, #0
 801537e:	60a3      	str	r3, [r4, #8]
 8015380:	6963      	ldr	r3, [r4, #20]
 8015382:	425b      	negs	r3, r3
 8015384:	61a3      	str	r3, [r4, #24]
 8015386:	6923      	ldr	r3, [r4, #16]
 8015388:	b943      	cbnz	r3, 801539c <__swsetup_r+0xa8>
 801538a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801538e:	d1c4      	bne.n	801531a <__swsetup_r+0x26>
 8015390:	bd38      	pop	{r3, r4, r5, pc}
 8015392:	0781      	lsls	r1, r0, #30
 8015394:	bf58      	it	pl
 8015396:	6963      	ldrpl	r3, [r4, #20]
 8015398:	60a3      	str	r3, [r4, #8]
 801539a:	e7f4      	b.n	8015386 <__swsetup_r+0x92>
 801539c:	2000      	movs	r0, #0
 801539e:	e7f7      	b.n	8015390 <__swsetup_r+0x9c>
 80153a0:	240000a8 	.word	0x240000a8

080153a4 <memset>:
 80153a4:	4402      	add	r2, r0
 80153a6:	4603      	mov	r3, r0
 80153a8:	4293      	cmp	r3, r2
 80153aa:	d100      	bne.n	80153ae <memset+0xa>
 80153ac:	4770      	bx	lr
 80153ae:	f803 1b01 	strb.w	r1, [r3], #1
 80153b2:	e7f9      	b.n	80153a8 <memset+0x4>

080153b4 <_raise_r>:
 80153b4:	291f      	cmp	r1, #31
 80153b6:	b538      	push	{r3, r4, r5, lr}
 80153b8:	4604      	mov	r4, r0
 80153ba:	460d      	mov	r5, r1
 80153bc:	d904      	bls.n	80153c8 <_raise_r+0x14>
 80153be:	2316      	movs	r3, #22
 80153c0:	6003      	str	r3, [r0, #0]
 80153c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153c6:	bd38      	pop	{r3, r4, r5, pc}
 80153c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80153ca:	b112      	cbz	r2, 80153d2 <_raise_r+0x1e>
 80153cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153d0:	b94b      	cbnz	r3, 80153e6 <_raise_r+0x32>
 80153d2:	4620      	mov	r0, r4
 80153d4:	f000 f868 	bl	80154a8 <_getpid_r>
 80153d8:	462a      	mov	r2, r5
 80153da:	4601      	mov	r1, r0
 80153dc:	4620      	mov	r0, r4
 80153de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153e2:	f000 b84f 	b.w	8015484 <_kill_r>
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	d00a      	beq.n	8015400 <_raise_r+0x4c>
 80153ea:	1c59      	adds	r1, r3, #1
 80153ec:	d103      	bne.n	80153f6 <_raise_r+0x42>
 80153ee:	2316      	movs	r3, #22
 80153f0:	6003      	str	r3, [r0, #0]
 80153f2:	2001      	movs	r0, #1
 80153f4:	e7e7      	b.n	80153c6 <_raise_r+0x12>
 80153f6:	2400      	movs	r4, #0
 80153f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80153fc:	4628      	mov	r0, r5
 80153fe:	4798      	blx	r3
 8015400:	2000      	movs	r0, #0
 8015402:	e7e0      	b.n	80153c6 <_raise_r+0x12>

08015404 <raise>:
 8015404:	4b02      	ldr	r3, [pc, #8]	; (8015410 <raise+0xc>)
 8015406:	4601      	mov	r1, r0
 8015408:	6818      	ldr	r0, [r3, #0]
 801540a:	f7ff bfd3 	b.w	80153b4 <_raise_r>
 801540e:	bf00      	nop
 8015410:	240000a8 	.word	0x240000a8

08015414 <_localeconv_r>:
 8015414:	4800      	ldr	r0, [pc, #0]	; (8015418 <_localeconv_r+0x4>)
 8015416:	4770      	bx	lr
 8015418:	2400019c 	.word	0x2400019c

0801541c <_close_r>:
 801541c:	b538      	push	{r3, r4, r5, lr}
 801541e:	4d06      	ldr	r5, [pc, #24]	; (8015438 <_close_r+0x1c>)
 8015420:	2300      	movs	r3, #0
 8015422:	4604      	mov	r4, r0
 8015424:	4608      	mov	r0, r1
 8015426:	602b      	str	r3, [r5, #0]
 8015428:	f7f1 fc81 	bl	8006d2e <_close>
 801542c:	1c43      	adds	r3, r0, #1
 801542e:	d102      	bne.n	8015436 <_close_r+0x1a>
 8015430:	682b      	ldr	r3, [r5, #0]
 8015432:	b103      	cbz	r3, 8015436 <_close_r+0x1a>
 8015434:	6023      	str	r3, [r4, #0]
 8015436:	bd38      	pop	{r3, r4, r5, pc}
 8015438:	24004708 	.word	0x24004708

0801543c <_lseek_r>:
 801543c:	b538      	push	{r3, r4, r5, lr}
 801543e:	4d07      	ldr	r5, [pc, #28]	; (801545c <_lseek_r+0x20>)
 8015440:	4604      	mov	r4, r0
 8015442:	4608      	mov	r0, r1
 8015444:	4611      	mov	r1, r2
 8015446:	2200      	movs	r2, #0
 8015448:	602a      	str	r2, [r5, #0]
 801544a:	461a      	mov	r2, r3
 801544c:	f7f1 fc96 	bl	8006d7c <_lseek>
 8015450:	1c43      	adds	r3, r0, #1
 8015452:	d102      	bne.n	801545a <_lseek_r+0x1e>
 8015454:	682b      	ldr	r3, [r5, #0]
 8015456:	b103      	cbz	r3, 801545a <_lseek_r+0x1e>
 8015458:	6023      	str	r3, [r4, #0]
 801545a:	bd38      	pop	{r3, r4, r5, pc}
 801545c:	24004708 	.word	0x24004708

08015460 <_read_r>:
 8015460:	b538      	push	{r3, r4, r5, lr}
 8015462:	4d07      	ldr	r5, [pc, #28]	; (8015480 <_read_r+0x20>)
 8015464:	4604      	mov	r4, r0
 8015466:	4608      	mov	r0, r1
 8015468:	4611      	mov	r1, r2
 801546a:	2200      	movs	r2, #0
 801546c:	602a      	str	r2, [r5, #0]
 801546e:	461a      	mov	r2, r3
 8015470:	f7f1 fc24 	bl	8006cbc <_read>
 8015474:	1c43      	adds	r3, r0, #1
 8015476:	d102      	bne.n	801547e <_read_r+0x1e>
 8015478:	682b      	ldr	r3, [r5, #0]
 801547a:	b103      	cbz	r3, 801547e <_read_r+0x1e>
 801547c:	6023      	str	r3, [r4, #0]
 801547e:	bd38      	pop	{r3, r4, r5, pc}
 8015480:	24004708 	.word	0x24004708

08015484 <_kill_r>:
 8015484:	b538      	push	{r3, r4, r5, lr}
 8015486:	4d07      	ldr	r5, [pc, #28]	; (80154a4 <_kill_r+0x20>)
 8015488:	2300      	movs	r3, #0
 801548a:	4604      	mov	r4, r0
 801548c:	4608      	mov	r0, r1
 801548e:	4611      	mov	r1, r2
 8015490:	602b      	str	r3, [r5, #0]
 8015492:	f7f1 fbf9 	bl	8006c88 <_kill>
 8015496:	1c43      	adds	r3, r0, #1
 8015498:	d102      	bne.n	80154a0 <_kill_r+0x1c>
 801549a:	682b      	ldr	r3, [r5, #0]
 801549c:	b103      	cbz	r3, 80154a0 <_kill_r+0x1c>
 801549e:	6023      	str	r3, [r4, #0]
 80154a0:	bd38      	pop	{r3, r4, r5, pc}
 80154a2:	bf00      	nop
 80154a4:	24004708 	.word	0x24004708

080154a8 <_getpid_r>:
 80154a8:	f7f1 bbe6 	b.w	8006c78 <_getpid>

080154ac <_sbrk_r>:
 80154ac:	b538      	push	{r3, r4, r5, lr}
 80154ae:	4d06      	ldr	r5, [pc, #24]	; (80154c8 <_sbrk_r+0x1c>)
 80154b0:	2300      	movs	r3, #0
 80154b2:	4604      	mov	r4, r0
 80154b4:	4608      	mov	r0, r1
 80154b6:	602b      	str	r3, [r5, #0]
 80154b8:	f7f1 fc6e 	bl	8006d98 <_sbrk>
 80154bc:	1c43      	adds	r3, r0, #1
 80154be:	d102      	bne.n	80154c6 <_sbrk_r+0x1a>
 80154c0:	682b      	ldr	r3, [r5, #0]
 80154c2:	b103      	cbz	r3, 80154c6 <_sbrk_r+0x1a>
 80154c4:	6023      	str	r3, [r4, #0]
 80154c6:	bd38      	pop	{r3, r4, r5, pc}
 80154c8:	24004708 	.word	0x24004708

080154cc <_write_r>:
 80154cc:	b538      	push	{r3, r4, r5, lr}
 80154ce:	4d07      	ldr	r5, [pc, #28]	; (80154ec <_write_r+0x20>)
 80154d0:	4604      	mov	r4, r0
 80154d2:	4608      	mov	r0, r1
 80154d4:	4611      	mov	r1, r2
 80154d6:	2200      	movs	r2, #0
 80154d8:	602a      	str	r2, [r5, #0]
 80154da:	461a      	mov	r2, r3
 80154dc:	f7f1 fc0b 	bl	8006cf6 <_write>
 80154e0:	1c43      	adds	r3, r0, #1
 80154e2:	d102      	bne.n	80154ea <_write_r+0x1e>
 80154e4:	682b      	ldr	r3, [r5, #0]
 80154e6:	b103      	cbz	r3, 80154ea <_write_r+0x1e>
 80154e8:	6023      	str	r3, [r4, #0]
 80154ea:	bd38      	pop	{r3, r4, r5, pc}
 80154ec:	24004708 	.word	0x24004708

080154f0 <__errno>:
 80154f0:	4b01      	ldr	r3, [pc, #4]	; (80154f8 <__errno+0x8>)
 80154f2:	6818      	ldr	r0, [r3, #0]
 80154f4:	4770      	bx	lr
 80154f6:	bf00      	nop
 80154f8:	240000a8 	.word	0x240000a8

080154fc <__libc_init_array>:
 80154fc:	b570      	push	{r4, r5, r6, lr}
 80154fe:	4d0d      	ldr	r5, [pc, #52]	; (8015534 <__libc_init_array+0x38>)
 8015500:	4c0d      	ldr	r4, [pc, #52]	; (8015538 <__libc_init_array+0x3c>)
 8015502:	1b64      	subs	r4, r4, r5
 8015504:	10a4      	asrs	r4, r4, #2
 8015506:	2600      	movs	r6, #0
 8015508:	42a6      	cmp	r6, r4
 801550a:	d109      	bne.n	8015520 <__libc_init_array+0x24>
 801550c:	4d0b      	ldr	r5, [pc, #44]	; (801553c <__libc_init_array+0x40>)
 801550e:	4c0c      	ldr	r4, [pc, #48]	; (8015540 <__libc_init_array+0x44>)
 8015510:	f001 fcca 	bl	8016ea8 <_init>
 8015514:	1b64      	subs	r4, r4, r5
 8015516:	10a4      	asrs	r4, r4, #2
 8015518:	2600      	movs	r6, #0
 801551a:	42a6      	cmp	r6, r4
 801551c:	d105      	bne.n	801552a <__libc_init_array+0x2e>
 801551e:	bd70      	pop	{r4, r5, r6, pc}
 8015520:	f855 3b04 	ldr.w	r3, [r5], #4
 8015524:	4798      	blx	r3
 8015526:	3601      	adds	r6, #1
 8015528:	e7ee      	b.n	8015508 <__libc_init_array+0xc>
 801552a:	f855 3b04 	ldr.w	r3, [r5], #4
 801552e:	4798      	blx	r3
 8015530:	3601      	adds	r6, #1
 8015532:	e7f2      	b.n	801551a <__libc_init_array+0x1e>
 8015534:	080177ac 	.word	0x080177ac
 8015538:	080177ac 	.word	0x080177ac
 801553c:	080177ac 	.word	0x080177ac
 8015540:	080177b8 	.word	0x080177b8

08015544 <__retarget_lock_init_recursive>:
 8015544:	4770      	bx	lr

08015546 <__retarget_lock_acquire_recursive>:
 8015546:	4770      	bx	lr

08015548 <__retarget_lock_release_recursive>:
 8015548:	4770      	bx	lr

0801554a <memcpy>:
 801554a:	440a      	add	r2, r1
 801554c:	4291      	cmp	r1, r2
 801554e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015552:	d100      	bne.n	8015556 <memcpy+0xc>
 8015554:	4770      	bx	lr
 8015556:	b510      	push	{r4, lr}
 8015558:	f811 4b01 	ldrb.w	r4, [r1], #1
 801555c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015560:	4291      	cmp	r1, r2
 8015562:	d1f9      	bne.n	8015558 <memcpy+0xe>
 8015564:	bd10      	pop	{r4, pc}

08015566 <quorem>:
 8015566:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801556a:	6903      	ldr	r3, [r0, #16]
 801556c:	690c      	ldr	r4, [r1, #16]
 801556e:	42a3      	cmp	r3, r4
 8015570:	4607      	mov	r7, r0
 8015572:	db7e      	blt.n	8015672 <quorem+0x10c>
 8015574:	3c01      	subs	r4, #1
 8015576:	f101 0814 	add.w	r8, r1, #20
 801557a:	f100 0514 	add.w	r5, r0, #20
 801557e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015582:	9301      	str	r3, [sp, #4]
 8015584:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015588:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801558c:	3301      	adds	r3, #1
 801558e:	429a      	cmp	r2, r3
 8015590:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8015594:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015598:	fbb2 f6f3 	udiv	r6, r2, r3
 801559c:	d331      	bcc.n	8015602 <quorem+0x9c>
 801559e:	f04f 0e00 	mov.w	lr, #0
 80155a2:	4640      	mov	r0, r8
 80155a4:	46ac      	mov	ip, r5
 80155a6:	46f2      	mov	sl, lr
 80155a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80155ac:	b293      	uxth	r3, r2
 80155ae:	fb06 e303 	mla	r3, r6, r3, lr
 80155b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80155b6:	0c1a      	lsrs	r2, r3, #16
 80155b8:	b29b      	uxth	r3, r3
 80155ba:	ebaa 0303 	sub.w	r3, sl, r3
 80155be:	f8dc a000 	ldr.w	sl, [ip]
 80155c2:	fa13 f38a 	uxtah	r3, r3, sl
 80155c6:	fb06 220e 	mla	r2, r6, lr, r2
 80155ca:	9300      	str	r3, [sp, #0]
 80155cc:	9b00      	ldr	r3, [sp, #0]
 80155ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80155d2:	b292      	uxth	r2, r2
 80155d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80155d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80155dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80155e0:	4581      	cmp	r9, r0
 80155e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80155e6:	f84c 3b04 	str.w	r3, [ip], #4
 80155ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80155ee:	d2db      	bcs.n	80155a8 <quorem+0x42>
 80155f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80155f4:	b92b      	cbnz	r3, 8015602 <quorem+0x9c>
 80155f6:	9b01      	ldr	r3, [sp, #4]
 80155f8:	3b04      	subs	r3, #4
 80155fa:	429d      	cmp	r5, r3
 80155fc:	461a      	mov	r2, r3
 80155fe:	d32c      	bcc.n	801565a <quorem+0xf4>
 8015600:	613c      	str	r4, [r7, #16]
 8015602:	4638      	mov	r0, r7
 8015604:	f001 f86c 	bl	80166e0 <__mcmp>
 8015608:	2800      	cmp	r0, #0
 801560a:	db22      	blt.n	8015652 <quorem+0xec>
 801560c:	3601      	adds	r6, #1
 801560e:	4629      	mov	r1, r5
 8015610:	2000      	movs	r0, #0
 8015612:	f858 2b04 	ldr.w	r2, [r8], #4
 8015616:	f8d1 c000 	ldr.w	ip, [r1]
 801561a:	b293      	uxth	r3, r2
 801561c:	1ac3      	subs	r3, r0, r3
 801561e:	0c12      	lsrs	r2, r2, #16
 8015620:	fa13 f38c 	uxtah	r3, r3, ip
 8015624:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801562c:	b29b      	uxth	r3, r3
 801562e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015632:	45c1      	cmp	r9, r8
 8015634:	f841 3b04 	str.w	r3, [r1], #4
 8015638:	ea4f 4022 	mov.w	r0, r2, asr #16
 801563c:	d2e9      	bcs.n	8015612 <quorem+0xac>
 801563e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015646:	b922      	cbnz	r2, 8015652 <quorem+0xec>
 8015648:	3b04      	subs	r3, #4
 801564a:	429d      	cmp	r5, r3
 801564c:	461a      	mov	r2, r3
 801564e:	d30a      	bcc.n	8015666 <quorem+0x100>
 8015650:	613c      	str	r4, [r7, #16]
 8015652:	4630      	mov	r0, r6
 8015654:	b003      	add	sp, #12
 8015656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801565a:	6812      	ldr	r2, [r2, #0]
 801565c:	3b04      	subs	r3, #4
 801565e:	2a00      	cmp	r2, #0
 8015660:	d1ce      	bne.n	8015600 <quorem+0x9a>
 8015662:	3c01      	subs	r4, #1
 8015664:	e7c9      	b.n	80155fa <quorem+0x94>
 8015666:	6812      	ldr	r2, [r2, #0]
 8015668:	3b04      	subs	r3, #4
 801566a:	2a00      	cmp	r2, #0
 801566c:	d1f0      	bne.n	8015650 <quorem+0xea>
 801566e:	3c01      	subs	r4, #1
 8015670:	e7eb      	b.n	801564a <quorem+0xe4>
 8015672:	2000      	movs	r0, #0
 8015674:	e7ee      	b.n	8015654 <quorem+0xee>
	...

08015678 <_dtoa_r>:
 8015678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801567c:	ed2d 8b02 	vpush	{d8}
 8015680:	69c5      	ldr	r5, [r0, #28]
 8015682:	b091      	sub	sp, #68	; 0x44
 8015684:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015688:	ec59 8b10 	vmov	r8, r9, d0
 801568c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801568e:	9106      	str	r1, [sp, #24]
 8015690:	4606      	mov	r6, r0
 8015692:	9208      	str	r2, [sp, #32]
 8015694:	930c      	str	r3, [sp, #48]	; 0x30
 8015696:	b975      	cbnz	r5, 80156b6 <_dtoa_r+0x3e>
 8015698:	2010      	movs	r0, #16
 801569a:	f7fe ff53 	bl	8014544 <malloc>
 801569e:	4602      	mov	r2, r0
 80156a0:	61f0      	str	r0, [r6, #28]
 80156a2:	b920      	cbnz	r0, 80156ae <_dtoa_r+0x36>
 80156a4:	4ba6      	ldr	r3, [pc, #664]	; (8015940 <_dtoa_r+0x2c8>)
 80156a6:	21ef      	movs	r1, #239	; 0xef
 80156a8:	48a6      	ldr	r0, [pc, #664]	; (8015944 <_dtoa_r+0x2cc>)
 80156aa:	f001 fb97 	bl	8016ddc <__assert_func>
 80156ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80156b2:	6005      	str	r5, [r0, #0]
 80156b4:	60c5      	str	r5, [r0, #12]
 80156b6:	69f3      	ldr	r3, [r6, #28]
 80156b8:	6819      	ldr	r1, [r3, #0]
 80156ba:	b151      	cbz	r1, 80156d2 <_dtoa_r+0x5a>
 80156bc:	685a      	ldr	r2, [r3, #4]
 80156be:	604a      	str	r2, [r1, #4]
 80156c0:	2301      	movs	r3, #1
 80156c2:	4093      	lsls	r3, r2
 80156c4:	608b      	str	r3, [r1, #8]
 80156c6:	4630      	mov	r0, r6
 80156c8:	f000 fdce 	bl	8016268 <_Bfree>
 80156cc:	69f3      	ldr	r3, [r6, #28]
 80156ce:	2200      	movs	r2, #0
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	f1b9 0300 	subs.w	r3, r9, #0
 80156d6:	bfbb      	ittet	lt
 80156d8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80156dc:	9303      	strlt	r3, [sp, #12]
 80156de:	2300      	movge	r3, #0
 80156e0:	2201      	movlt	r2, #1
 80156e2:	bfac      	ite	ge
 80156e4:	6023      	strge	r3, [r4, #0]
 80156e6:	6022      	strlt	r2, [r4, #0]
 80156e8:	4b97      	ldr	r3, [pc, #604]	; (8015948 <_dtoa_r+0x2d0>)
 80156ea:	9c03      	ldr	r4, [sp, #12]
 80156ec:	43a3      	bics	r3, r4
 80156ee:	d11c      	bne.n	801572a <_dtoa_r+0xb2>
 80156f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80156f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80156f6:	6013      	str	r3, [r2, #0]
 80156f8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80156fc:	ea53 0308 	orrs.w	r3, r3, r8
 8015700:	f000 84fb 	beq.w	80160fa <_dtoa_r+0xa82>
 8015704:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015706:	b963      	cbnz	r3, 8015722 <_dtoa_r+0xaa>
 8015708:	4b90      	ldr	r3, [pc, #576]	; (801594c <_dtoa_r+0x2d4>)
 801570a:	e020      	b.n	801574e <_dtoa_r+0xd6>
 801570c:	4b90      	ldr	r3, [pc, #576]	; (8015950 <_dtoa_r+0x2d8>)
 801570e:	9301      	str	r3, [sp, #4]
 8015710:	3308      	adds	r3, #8
 8015712:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015714:	6013      	str	r3, [r2, #0]
 8015716:	9801      	ldr	r0, [sp, #4]
 8015718:	b011      	add	sp, #68	; 0x44
 801571a:	ecbd 8b02 	vpop	{d8}
 801571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015722:	4b8a      	ldr	r3, [pc, #552]	; (801594c <_dtoa_r+0x2d4>)
 8015724:	9301      	str	r3, [sp, #4]
 8015726:	3303      	adds	r3, #3
 8015728:	e7f3      	b.n	8015712 <_dtoa_r+0x9a>
 801572a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801572e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015736:	d10c      	bne.n	8015752 <_dtoa_r+0xda>
 8015738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801573a:	2301      	movs	r3, #1
 801573c:	6013      	str	r3, [r2, #0]
 801573e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015740:	2b00      	cmp	r3, #0
 8015742:	f000 84d7 	beq.w	80160f4 <_dtoa_r+0xa7c>
 8015746:	4b83      	ldr	r3, [pc, #524]	; (8015954 <_dtoa_r+0x2dc>)
 8015748:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801574a:	6013      	str	r3, [r2, #0]
 801574c:	3b01      	subs	r3, #1
 801574e:	9301      	str	r3, [sp, #4]
 8015750:	e7e1      	b.n	8015716 <_dtoa_r+0x9e>
 8015752:	aa0e      	add	r2, sp, #56	; 0x38
 8015754:	a90f      	add	r1, sp, #60	; 0x3c
 8015756:	4630      	mov	r0, r6
 8015758:	eeb0 0b48 	vmov.f64	d0, d8
 801575c:	f001 f866 	bl	801682c <__d2b>
 8015760:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8015764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015766:	4605      	mov	r5, r0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d046      	beq.n	80157fa <_dtoa_r+0x182>
 801576c:	eeb0 7b48 	vmov.f64	d7, d8
 8015770:	ee18 1a90 	vmov	r1, s17
 8015774:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015778:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801577c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015780:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015784:	2000      	movs	r0, #0
 8015786:	ee07 1a90 	vmov	s15, r1
 801578a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801578e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015928 <_dtoa_r+0x2b0>
 8015792:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015796:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015930 <_dtoa_r+0x2b8>
 801579a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801579e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015938 <_dtoa_r+0x2c0>
 80157a2:	ee07 3a90 	vmov	s15, r3
 80157a6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80157aa:	eeb0 7b46 	vmov.f64	d7, d6
 80157ae:	eea4 7b05 	vfma.f64	d7, d4, d5
 80157b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80157b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80157ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157be:	ee16 ba90 	vmov	fp, s13
 80157c2:	9009      	str	r0, [sp, #36]	; 0x24
 80157c4:	d508      	bpl.n	80157d8 <_dtoa_r+0x160>
 80157c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80157ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80157ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157d2:	bf18      	it	ne
 80157d4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 80157d8:	f1bb 0f16 	cmp.w	fp, #22
 80157dc:	d82b      	bhi.n	8015836 <_dtoa_r+0x1be>
 80157de:	495e      	ldr	r1, [pc, #376]	; (8015958 <_dtoa_r+0x2e0>)
 80157e0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80157e4:	ed91 7b00 	vldr	d7, [r1]
 80157e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80157ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157f0:	d501      	bpl.n	80157f6 <_dtoa_r+0x17e>
 80157f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80157f6:	2100      	movs	r1, #0
 80157f8:	e01e      	b.n	8015838 <_dtoa_r+0x1c0>
 80157fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157fc:	4413      	add	r3, r2
 80157fe:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8015802:	2920      	cmp	r1, #32
 8015804:	bfc1      	itttt	gt
 8015806:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801580a:	408c      	lslgt	r4, r1
 801580c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8015810:	fa28 f101 	lsrgt.w	r1, r8, r1
 8015814:	bfd6      	itet	le
 8015816:	f1c1 0120 	rsble	r1, r1, #32
 801581a:	4321      	orrgt	r1, r4
 801581c:	fa08 f101 	lslle.w	r1, r8, r1
 8015820:	ee07 1a90 	vmov	s15, r1
 8015824:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015828:	3b01      	subs	r3, #1
 801582a:	ee17 1a90 	vmov	r1, s15
 801582e:	2001      	movs	r0, #1
 8015830:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8015834:	e7a7      	b.n	8015786 <_dtoa_r+0x10e>
 8015836:	2101      	movs	r1, #1
 8015838:	1ad2      	subs	r2, r2, r3
 801583a:	1e53      	subs	r3, r2, #1
 801583c:	9305      	str	r3, [sp, #20]
 801583e:	bf45      	ittet	mi
 8015840:	f1c2 0301 	rsbmi	r3, r2, #1
 8015844:	9304      	strmi	r3, [sp, #16]
 8015846:	2300      	movpl	r3, #0
 8015848:	2300      	movmi	r3, #0
 801584a:	bf4c      	ite	mi
 801584c:	9305      	strmi	r3, [sp, #20]
 801584e:	9304      	strpl	r3, [sp, #16]
 8015850:	f1bb 0f00 	cmp.w	fp, #0
 8015854:	910b      	str	r1, [sp, #44]	; 0x2c
 8015856:	db18      	blt.n	801588a <_dtoa_r+0x212>
 8015858:	9b05      	ldr	r3, [sp, #20]
 801585a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801585e:	445b      	add	r3, fp
 8015860:	9305      	str	r3, [sp, #20]
 8015862:	2300      	movs	r3, #0
 8015864:	9a06      	ldr	r2, [sp, #24]
 8015866:	2a09      	cmp	r2, #9
 8015868:	d848      	bhi.n	80158fc <_dtoa_r+0x284>
 801586a:	2a05      	cmp	r2, #5
 801586c:	bfc4      	itt	gt
 801586e:	3a04      	subgt	r2, #4
 8015870:	9206      	strgt	r2, [sp, #24]
 8015872:	9a06      	ldr	r2, [sp, #24]
 8015874:	f1a2 0202 	sub.w	r2, r2, #2
 8015878:	bfcc      	ite	gt
 801587a:	2400      	movgt	r4, #0
 801587c:	2401      	movle	r4, #1
 801587e:	2a03      	cmp	r2, #3
 8015880:	d847      	bhi.n	8015912 <_dtoa_r+0x29a>
 8015882:	e8df f002 	tbb	[pc, r2]
 8015886:	2d0b      	.short	0x2d0b
 8015888:	392b      	.short	0x392b
 801588a:	9b04      	ldr	r3, [sp, #16]
 801588c:	2200      	movs	r2, #0
 801588e:	eba3 030b 	sub.w	r3, r3, fp
 8015892:	9304      	str	r3, [sp, #16]
 8015894:	920a      	str	r2, [sp, #40]	; 0x28
 8015896:	f1cb 0300 	rsb	r3, fp, #0
 801589a:	e7e3      	b.n	8015864 <_dtoa_r+0x1ec>
 801589c:	2200      	movs	r2, #0
 801589e:	9207      	str	r2, [sp, #28]
 80158a0:	9a08      	ldr	r2, [sp, #32]
 80158a2:	2a00      	cmp	r2, #0
 80158a4:	dc38      	bgt.n	8015918 <_dtoa_r+0x2a0>
 80158a6:	f04f 0a01 	mov.w	sl, #1
 80158aa:	46d1      	mov	r9, sl
 80158ac:	4652      	mov	r2, sl
 80158ae:	f8cd a020 	str.w	sl, [sp, #32]
 80158b2:	69f7      	ldr	r7, [r6, #28]
 80158b4:	2100      	movs	r1, #0
 80158b6:	2004      	movs	r0, #4
 80158b8:	f100 0c14 	add.w	ip, r0, #20
 80158bc:	4594      	cmp	ip, r2
 80158be:	d930      	bls.n	8015922 <_dtoa_r+0x2aa>
 80158c0:	6079      	str	r1, [r7, #4]
 80158c2:	4630      	mov	r0, r6
 80158c4:	930d      	str	r3, [sp, #52]	; 0x34
 80158c6:	f000 fc8f 	bl	80161e8 <_Balloc>
 80158ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80158cc:	9001      	str	r0, [sp, #4]
 80158ce:	4602      	mov	r2, r0
 80158d0:	2800      	cmp	r0, #0
 80158d2:	d145      	bne.n	8015960 <_dtoa_r+0x2e8>
 80158d4:	4b21      	ldr	r3, [pc, #132]	; (801595c <_dtoa_r+0x2e4>)
 80158d6:	f240 11af 	movw	r1, #431	; 0x1af
 80158da:	e6e5      	b.n	80156a8 <_dtoa_r+0x30>
 80158dc:	2201      	movs	r2, #1
 80158de:	e7de      	b.n	801589e <_dtoa_r+0x226>
 80158e0:	2200      	movs	r2, #0
 80158e2:	9207      	str	r2, [sp, #28]
 80158e4:	9a08      	ldr	r2, [sp, #32]
 80158e6:	eb0b 0a02 	add.w	sl, fp, r2
 80158ea:	f10a 0901 	add.w	r9, sl, #1
 80158ee:	464a      	mov	r2, r9
 80158f0:	2a01      	cmp	r2, #1
 80158f2:	bfb8      	it	lt
 80158f4:	2201      	movlt	r2, #1
 80158f6:	e7dc      	b.n	80158b2 <_dtoa_r+0x23a>
 80158f8:	2201      	movs	r2, #1
 80158fa:	e7f2      	b.n	80158e2 <_dtoa_r+0x26a>
 80158fc:	2401      	movs	r4, #1
 80158fe:	2200      	movs	r2, #0
 8015900:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015904:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015908:	2100      	movs	r1, #0
 801590a:	46d1      	mov	r9, sl
 801590c:	2212      	movs	r2, #18
 801590e:	9108      	str	r1, [sp, #32]
 8015910:	e7cf      	b.n	80158b2 <_dtoa_r+0x23a>
 8015912:	2201      	movs	r2, #1
 8015914:	9207      	str	r2, [sp, #28]
 8015916:	e7f5      	b.n	8015904 <_dtoa_r+0x28c>
 8015918:	f8dd a020 	ldr.w	sl, [sp, #32]
 801591c:	46d1      	mov	r9, sl
 801591e:	4652      	mov	r2, sl
 8015920:	e7c7      	b.n	80158b2 <_dtoa_r+0x23a>
 8015922:	3101      	adds	r1, #1
 8015924:	0040      	lsls	r0, r0, #1
 8015926:	e7c7      	b.n	80158b8 <_dtoa_r+0x240>
 8015928:	636f4361 	.word	0x636f4361
 801592c:	3fd287a7 	.word	0x3fd287a7
 8015930:	8b60c8b3 	.word	0x8b60c8b3
 8015934:	3fc68a28 	.word	0x3fc68a28
 8015938:	509f79fb 	.word	0x509f79fb
 801593c:	3fd34413 	.word	0x3fd34413
 8015940:	08017471 	.word	0x08017471
 8015944:	08017488 	.word	0x08017488
 8015948:	7ff00000 	.word	0x7ff00000
 801594c:	0801746d 	.word	0x0801746d
 8015950:	08017464 	.word	0x08017464
 8015954:	08017441 	.word	0x08017441
 8015958:	08017578 	.word	0x08017578
 801595c:	080174e0 	.word	0x080174e0
 8015960:	69f2      	ldr	r2, [r6, #28]
 8015962:	9901      	ldr	r1, [sp, #4]
 8015964:	6011      	str	r1, [r2, #0]
 8015966:	f1b9 0f0e 	cmp.w	r9, #14
 801596a:	d86c      	bhi.n	8015a46 <_dtoa_r+0x3ce>
 801596c:	2c00      	cmp	r4, #0
 801596e:	d06a      	beq.n	8015a46 <_dtoa_r+0x3ce>
 8015970:	f1bb 0f00 	cmp.w	fp, #0
 8015974:	f340 80a0 	ble.w	8015ab8 <_dtoa_r+0x440>
 8015978:	4ac1      	ldr	r2, [pc, #772]	; (8015c80 <_dtoa_r+0x608>)
 801597a:	f00b 010f 	and.w	r1, fp, #15
 801597e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015982:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015986:	ed92 7b00 	vldr	d7, [r2]
 801598a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801598e:	f000 8087 	beq.w	8015aa0 <_dtoa_r+0x428>
 8015992:	49bc      	ldr	r1, [pc, #752]	; (8015c84 <_dtoa_r+0x60c>)
 8015994:	ed91 6b08 	vldr	d6, [r1, #32]
 8015998:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801599c:	ed8d 6b02 	vstr	d6, [sp, #8]
 80159a0:	f002 020f 	and.w	r2, r2, #15
 80159a4:	2103      	movs	r1, #3
 80159a6:	48b7      	ldr	r0, [pc, #732]	; (8015c84 <_dtoa_r+0x60c>)
 80159a8:	2a00      	cmp	r2, #0
 80159aa:	d17b      	bne.n	8015aa4 <_dtoa_r+0x42c>
 80159ac:	ed9d 6b02 	vldr	d6, [sp, #8]
 80159b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80159b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80159b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80159ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80159be:	2a00      	cmp	r2, #0
 80159c0:	f000 80a0 	beq.w	8015b04 <_dtoa_r+0x48c>
 80159c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80159c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80159cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159d0:	f140 8098 	bpl.w	8015b04 <_dtoa_r+0x48c>
 80159d4:	f1b9 0f00 	cmp.w	r9, #0
 80159d8:	f000 8094 	beq.w	8015b04 <_dtoa_r+0x48c>
 80159dc:	f1ba 0f00 	cmp.w	sl, #0
 80159e0:	dd2f      	ble.n	8015a42 <_dtoa_r+0x3ca>
 80159e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80159e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80159ea:	ed8d 7b02 	vstr	d7, [sp, #8]
 80159ee:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80159f2:	3101      	adds	r1, #1
 80159f4:	4654      	mov	r4, sl
 80159f6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80159fa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80159fe:	ee07 1a90 	vmov	s15, r1
 8015a02:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015a06:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015a0a:	ee15 7a90 	vmov	r7, s11
 8015a0e:	ec51 0b15 	vmov	r0, r1, d5
 8015a12:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8015a16:	2c00      	cmp	r4, #0
 8015a18:	d177      	bne.n	8015b0a <_dtoa_r+0x492>
 8015a1a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015a1e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015a22:	ec41 0b17 	vmov	d7, r0, r1
 8015a26:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a2e:	f300 826a 	bgt.w	8015f06 <_dtoa_r+0x88e>
 8015a32:	eeb1 7b47 	vneg.f64	d7, d7
 8015a36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a3e:	f100 8260 	bmi.w	8015f02 <_dtoa_r+0x88a>
 8015a42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015a46:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a48:	2a00      	cmp	r2, #0
 8015a4a:	f2c0 811d 	blt.w	8015c88 <_dtoa_r+0x610>
 8015a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8015a52:	f300 8119 	bgt.w	8015c88 <_dtoa_r+0x610>
 8015a56:	4b8a      	ldr	r3, [pc, #552]	; (8015c80 <_dtoa_r+0x608>)
 8015a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015a5c:	ed93 6b00 	vldr	d6, [r3]
 8015a60:	9b08      	ldr	r3, [sp, #32]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	f280 80b7 	bge.w	8015bd6 <_dtoa_r+0x55e>
 8015a68:	f1b9 0f00 	cmp.w	r9, #0
 8015a6c:	f300 80b3 	bgt.w	8015bd6 <_dtoa_r+0x55e>
 8015a70:	f040 8246 	bne.w	8015f00 <_dtoa_r+0x888>
 8015a74:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015a78:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015a7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a88:	464c      	mov	r4, r9
 8015a8a:	464f      	mov	r7, r9
 8015a8c:	f280 821c 	bge.w	8015ec8 <_dtoa_r+0x850>
 8015a90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015a94:	2331      	movs	r3, #49	; 0x31
 8015a96:	f808 3b01 	strb.w	r3, [r8], #1
 8015a9a:	f10b 0b01 	add.w	fp, fp, #1
 8015a9e:	e218      	b.n	8015ed2 <_dtoa_r+0x85a>
 8015aa0:	2102      	movs	r1, #2
 8015aa2:	e780      	b.n	80159a6 <_dtoa_r+0x32e>
 8015aa4:	07d4      	lsls	r4, r2, #31
 8015aa6:	d504      	bpl.n	8015ab2 <_dtoa_r+0x43a>
 8015aa8:	ed90 6b00 	vldr	d6, [r0]
 8015aac:	3101      	adds	r1, #1
 8015aae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015ab2:	1052      	asrs	r2, r2, #1
 8015ab4:	3008      	adds	r0, #8
 8015ab6:	e777      	b.n	80159a8 <_dtoa_r+0x330>
 8015ab8:	d022      	beq.n	8015b00 <_dtoa_r+0x488>
 8015aba:	f1cb 0200 	rsb	r2, fp, #0
 8015abe:	4970      	ldr	r1, [pc, #448]	; (8015c80 <_dtoa_r+0x608>)
 8015ac0:	f002 000f 	and.w	r0, r2, #15
 8015ac4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015ac8:	ed91 7b00 	vldr	d7, [r1]
 8015acc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015ad4:	486b      	ldr	r0, [pc, #428]	; (8015c84 <_dtoa_r+0x60c>)
 8015ad6:	1112      	asrs	r2, r2, #4
 8015ad8:	2400      	movs	r4, #0
 8015ada:	2102      	movs	r1, #2
 8015adc:	b92a      	cbnz	r2, 8015aea <_dtoa_r+0x472>
 8015ade:	2c00      	cmp	r4, #0
 8015ae0:	f43f af6a 	beq.w	80159b8 <_dtoa_r+0x340>
 8015ae4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015ae8:	e766      	b.n	80159b8 <_dtoa_r+0x340>
 8015aea:	07d7      	lsls	r7, r2, #31
 8015aec:	d505      	bpl.n	8015afa <_dtoa_r+0x482>
 8015aee:	ed90 6b00 	vldr	d6, [r0]
 8015af2:	3101      	adds	r1, #1
 8015af4:	2401      	movs	r4, #1
 8015af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015afa:	1052      	asrs	r2, r2, #1
 8015afc:	3008      	adds	r0, #8
 8015afe:	e7ed      	b.n	8015adc <_dtoa_r+0x464>
 8015b00:	2102      	movs	r1, #2
 8015b02:	e759      	b.n	80159b8 <_dtoa_r+0x340>
 8015b04:	465a      	mov	r2, fp
 8015b06:	464c      	mov	r4, r9
 8015b08:	e775      	b.n	80159f6 <_dtoa_r+0x37e>
 8015b0a:	ec41 0b17 	vmov	d7, r0, r1
 8015b0e:	495c      	ldr	r1, [pc, #368]	; (8015c80 <_dtoa_r+0x608>)
 8015b10:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8015b14:	ed11 4b02 	vldr	d4, [r1, #-8]
 8015b18:	9901      	ldr	r1, [sp, #4]
 8015b1a:	440c      	add	r4, r1
 8015b1c:	9907      	ldr	r1, [sp, #28]
 8015b1e:	b351      	cbz	r1, 8015b76 <_dtoa_r+0x4fe>
 8015b20:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015b24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015b28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015b2c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015b30:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015b34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015b38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015b3c:	ee14 1a90 	vmov	r1, s9
 8015b40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015b44:	3130      	adds	r1, #48	; 0x30
 8015b46:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015b4a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b52:	f808 1b01 	strb.w	r1, [r8], #1
 8015b56:	d439      	bmi.n	8015bcc <_dtoa_r+0x554>
 8015b58:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015b5c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b64:	d472      	bmi.n	8015c4c <_dtoa_r+0x5d4>
 8015b66:	45a0      	cmp	r8, r4
 8015b68:	f43f af6b 	beq.w	8015a42 <_dtoa_r+0x3ca>
 8015b6c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015b70:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015b74:	e7e0      	b.n	8015b38 <_dtoa_r+0x4c0>
 8015b76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015b7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015b7e:	4620      	mov	r0, r4
 8015b80:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015b84:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015b88:	ee14 1a90 	vmov	r1, s9
 8015b8c:	3130      	adds	r1, #48	; 0x30
 8015b8e:	f808 1b01 	strb.w	r1, [r8], #1
 8015b92:	45a0      	cmp	r8, r4
 8015b94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015b98:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015b9c:	d118      	bne.n	8015bd0 <_dtoa_r+0x558>
 8015b9e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015ba2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015ba6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bae:	dc4d      	bgt.n	8015c4c <_dtoa_r+0x5d4>
 8015bb0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015bb4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bbc:	f57f af41 	bpl.w	8015a42 <_dtoa_r+0x3ca>
 8015bc0:	4680      	mov	r8, r0
 8015bc2:	3801      	subs	r0, #1
 8015bc4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015bc8:	2b30      	cmp	r3, #48	; 0x30
 8015bca:	d0f9      	beq.n	8015bc0 <_dtoa_r+0x548>
 8015bcc:	4693      	mov	fp, r2
 8015bce:	e02a      	b.n	8015c26 <_dtoa_r+0x5ae>
 8015bd0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015bd4:	e7d6      	b.n	8015b84 <_dtoa_r+0x50c>
 8015bd6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015bda:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015bde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015be2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015be6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015bea:	ee15 3a10 	vmov	r3, s10
 8015bee:	3330      	adds	r3, #48	; 0x30
 8015bf0:	f808 3b01 	strb.w	r3, [r8], #1
 8015bf4:	9b01      	ldr	r3, [sp, #4]
 8015bf6:	eba8 0303 	sub.w	r3, r8, r3
 8015bfa:	4599      	cmp	r9, r3
 8015bfc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015c00:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015c04:	d133      	bne.n	8015c6e <_dtoa_r+0x5f6>
 8015c06:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015c0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c12:	dc1a      	bgt.n	8015c4a <_dtoa_r+0x5d2>
 8015c14:	eeb4 7b46 	vcmp.f64	d7, d6
 8015c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c1c:	d103      	bne.n	8015c26 <_dtoa_r+0x5ae>
 8015c1e:	ee15 3a10 	vmov	r3, s10
 8015c22:	07d9      	lsls	r1, r3, #31
 8015c24:	d411      	bmi.n	8015c4a <_dtoa_r+0x5d2>
 8015c26:	4629      	mov	r1, r5
 8015c28:	4630      	mov	r0, r6
 8015c2a:	f000 fb1d 	bl	8016268 <_Bfree>
 8015c2e:	2300      	movs	r3, #0
 8015c30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c32:	f888 3000 	strb.w	r3, [r8]
 8015c36:	f10b 0301 	add.w	r3, fp, #1
 8015c3a:	6013      	str	r3, [r2, #0]
 8015c3c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	f43f ad69 	beq.w	8015716 <_dtoa_r+0x9e>
 8015c44:	f8c3 8000 	str.w	r8, [r3]
 8015c48:	e565      	b.n	8015716 <_dtoa_r+0x9e>
 8015c4a:	465a      	mov	r2, fp
 8015c4c:	4643      	mov	r3, r8
 8015c4e:	4698      	mov	r8, r3
 8015c50:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8015c54:	2939      	cmp	r1, #57	; 0x39
 8015c56:	d106      	bne.n	8015c66 <_dtoa_r+0x5ee>
 8015c58:	9901      	ldr	r1, [sp, #4]
 8015c5a:	4299      	cmp	r1, r3
 8015c5c:	d1f7      	bne.n	8015c4e <_dtoa_r+0x5d6>
 8015c5e:	9801      	ldr	r0, [sp, #4]
 8015c60:	2130      	movs	r1, #48	; 0x30
 8015c62:	3201      	adds	r2, #1
 8015c64:	7001      	strb	r1, [r0, #0]
 8015c66:	7819      	ldrb	r1, [r3, #0]
 8015c68:	3101      	adds	r1, #1
 8015c6a:	7019      	strb	r1, [r3, #0]
 8015c6c:	e7ae      	b.n	8015bcc <_dtoa_r+0x554>
 8015c6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015c72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c7a:	d1b2      	bne.n	8015be2 <_dtoa_r+0x56a>
 8015c7c:	e7d3      	b.n	8015c26 <_dtoa_r+0x5ae>
 8015c7e:	bf00      	nop
 8015c80:	08017578 	.word	0x08017578
 8015c84:	08017550 	.word	0x08017550
 8015c88:	9907      	ldr	r1, [sp, #28]
 8015c8a:	2900      	cmp	r1, #0
 8015c8c:	f000 80d0 	beq.w	8015e30 <_dtoa_r+0x7b8>
 8015c90:	9906      	ldr	r1, [sp, #24]
 8015c92:	2901      	cmp	r1, #1
 8015c94:	f300 80b4 	bgt.w	8015e00 <_dtoa_r+0x788>
 8015c98:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c9a:	2900      	cmp	r1, #0
 8015c9c:	f000 80ac 	beq.w	8015df8 <_dtoa_r+0x780>
 8015ca0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015ca4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015ca8:	461c      	mov	r4, r3
 8015caa:	9309      	str	r3, [sp, #36]	; 0x24
 8015cac:	9b04      	ldr	r3, [sp, #16]
 8015cae:	4413      	add	r3, r2
 8015cb0:	9304      	str	r3, [sp, #16]
 8015cb2:	9b05      	ldr	r3, [sp, #20]
 8015cb4:	2101      	movs	r1, #1
 8015cb6:	4413      	add	r3, r2
 8015cb8:	4630      	mov	r0, r6
 8015cba:	9305      	str	r3, [sp, #20]
 8015cbc:	f000 fb8a 	bl	80163d4 <__i2b>
 8015cc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc2:	4607      	mov	r7, r0
 8015cc4:	f1b8 0f00 	cmp.w	r8, #0
 8015cc8:	d00d      	beq.n	8015ce6 <_dtoa_r+0x66e>
 8015cca:	9a05      	ldr	r2, [sp, #20]
 8015ccc:	2a00      	cmp	r2, #0
 8015cce:	dd0a      	ble.n	8015ce6 <_dtoa_r+0x66e>
 8015cd0:	4542      	cmp	r2, r8
 8015cd2:	9904      	ldr	r1, [sp, #16]
 8015cd4:	bfa8      	it	ge
 8015cd6:	4642      	movge	r2, r8
 8015cd8:	1a89      	subs	r1, r1, r2
 8015cda:	9104      	str	r1, [sp, #16]
 8015cdc:	9905      	ldr	r1, [sp, #20]
 8015cde:	eba8 0802 	sub.w	r8, r8, r2
 8015ce2:	1a8a      	subs	r2, r1, r2
 8015ce4:	9205      	str	r2, [sp, #20]
 8015ce6:	b303      	cbz	r3, 8015d2a <_dtoa_r+0x6b2>
 8015ce8:	9a07      	ldr	r2, [sp, #28]
 8015cea:	2a00      	cmp	r2, #0
 8015cec:	f000 80a5 	beq.w	8015e3a <_dtoa_r+0x7c2>
 8015cf0:	2c00      	cmp	r4, #0
 8015cf2:	dd13      	ble.n	8015d1c <_dtoa_r+0x6a4>
 8015cf4:	4639      	mov	r1, r7
 8015cf6:	4622      	mov	r2, r4
 8015cf8:	4630      	mov	r0, r6
 8015cfa:	930d      	str	r3, [sp, #52]	; 0x34
 8015cfc:	f000 fc2a 	bl	8016554 <__pow5mult>
 8015d00:	462a      	mov	r2, r5
 8015d02:	4601      	mov	r1, r0
 8015d04:	4607      	mov	r7, r0
 8015d06:	4630      	mov	r0, r6
 8015d08:	f000 fb7a 	bl	8016400 <__multiply>
 8015d0c:	4629      	mov	r1, r5
 8015d0e:	9009      	str	r0, [sp, #36]	; 0x24
 8015d10:	4630      	mov	r0, r6
 8015d12:	f000 faa9 	bl	8016268 <_Bfree>
 8015d16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d1a:	4615      	mov	r5, r2
 8015d1c:	1b1a      	subs	r2, r3, r4
 8015d1e:	d004      	beq.n	8015d2a <_dtoa_r+0x6b2>
 8015d20:	4629      	mov	r1, r5
 8015d22:	4630      	mov	r0, r6
 8015d24:	f000 fc16 	bl	8016554 <__pow5mult>
 8015d28:	4605      	mov	r5, r0
 8015d2a:	2101      	movs	r1, #1
 8015d2c:	4630      	mov	r0, r6
 8015d2e:	f000 fb51 	bl	80163d4 <__i2b>
 8015d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	4604      	mov	r4, r0
 8015d38:	f340 8081 	ble.w	8015e3e <_dtoa_r+0x7c6>
 8015d3c:	461a      	mov	r2, r3
 8015d3e:	4601      	mov	r1, r0
 8015d40:	4630      	mov	r0, r6
 8015d42:	f000 fc07 	bl	8016554 <__pow5mult>
 8015d46:	9b06      	ldr	r3, [sp, #24]
 8015d48:	2b01      	cmp	r3, #1
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	dd7a      	ble.n	8015e44 <_dtoa_r+0x7cc>
 8015d4e:	2300      	movs	r3, #0
 8015d50:	9309      	str	r3, [sp, #36]	; 0x24
 8015d52:	6922      	ldr	r2, [r4, #16]
 8015d54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015d58:	6910      	ldr	r0, [r2, #16]
 8015d5a:	f000 faed 	bl	8016338 <__hi0bits>
 8015d5e:	f1c0 0020 	rsb	r0, r0, #32
 8015d62:	9b05      	ldr	r3, [sp, #20]
 8015d64:	4418      	add	r0, r3
 8015d66:	f010 001f 	ands.w	r0, r0, #31
 8015d6a:	f000 8093 	beq.w	8015e94 <_dtoa_r+0x81c>
 8015d6e:	f1c0 0220 	rsb	r2, r0, #32
 8015d72:	2a04      	cmp	r2, #4
 8015d74:	f340 8085 	ble.w	8015e82 <_dtoa_r+0x80a>
 8015d78:	9b04      	ldr	r3, [sp, #16]
 8015d7a:	f1c0 001c 	rsb	r0, r0, #28
 8015d7e:	4403      	add	r3, r0
 8015d80:	9304      	str	r3, [sp, #16]
 8015d82:	9b05      	ldr	r3, [sp, #20]
 8015d84:	4480      	add	r8, r0
 8015d86:	4403      	add	r3, r0
 8015d88:	9305      	str	r3, [sp, #20]
 8015d8a:	9b04      	ldr	r3, [sp, #16]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	dd05      	ble.n	8015d9c <_dtoa_r+0x724>
 8015d90:	4629      	mov	r1, r5
 8015d92:	461a      	mov	r2, r3
 8015d94:	4630      	mov	r0, r6
 8015d96:	f000 fc37 	bl	8016608 <__lshift>
 8015d9a:	4605      	mov	r5, r0
 8015d9c:	9b05      	ldr	r3, [sp, #20]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	dd05      	ble.n	8015dae <_dtoa_r+0x736>
 8015da2:	4621      	mov	r1, r4
 8015da4:	461a      	mov	r2, r3
 8015da6:	4630      	mov	r0, r6
 8015da8:	f000 fc2e 	bl	8016608 <__lshift>
 8015dac:	4604      	mov	r4, r0
 8015dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d071      	beq.n	8015e98 <_dtoa_r+0x820>
 8015db4:	4621      	mov	r1, r4
 8015db6:	4628      	mov	r0, r5
 8015db8:	f000 fc92 	bl	80166e0 <__mcmp>
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	da6b      	bge.n	8015e98 <_dtoa_r+0x820>
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	4629      	mov	r1, r5
 8015dc4:	220a      	movs	r2, #10
 8015dc6:	4630      	mov	r0, r6
 8015dc8:	f000 fa70 	bl	80162ac <__multadd>
 8015dcc:	9b07      	ldr	r3, [sp, #28]
 8015dce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015dd2:	4605      	mov	r5, r0
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	f000 8197 	beq.w	8016108 <_dtoa_r+0xa90>
 8015dda:	4639      	mov	r1, r7
 8015ddc:	2300      	movs	r3, #0
 8015dde:	220a      	movs	r2, #10
 8015de0:	4630      	mov	r0, r6
 8015de2:	f000 fa63 	bl	80162ac <__multadd>
 8015de6:	f1ba 0f00 	cmp.w	sl, #0
 8015dea:	4607      	mov	r7, r0
 8015dec:	f300 8093 	bgt.w	8015f16 <_dtoa_r+0x89e>
 8015df0:	9b06      	ldr	r3, [sp, #24]
 8015df2:	2b02      	cmp	r3, #2
 8015df4:	dc57      	bgt.n	8015ea6 <_dtoa_r+0x82e>
 8015df6:	e08e      	b.n	8015f16 <_dtoa_r+0x89e>
 8015df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015dfe:	e751      	b.n	8015ca4 <_dtoa_r+0x62c>
 8015e00:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8015e04:	42a3      	cmp	r3, r4
 8015e06:	bfbf      	itttt	lt
 8015e08:	1ae2      	sublt	r2, r4, r3
 8015e0a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015e0c:	189b      	addlt	r3, r3, r2
 8015e0e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015e10:	bfae      	itee	ge
 8015e12:	1b1c      	subge	r4, r3, r4
 8015e14:	4623      	movlt	r3, r4
 8015e16:	2400      	movlt	r4, #0
 8015e18:	f1b9 0f00 	cmp.w	r9, #0
 8015e1c:	bfb5      	itete	lt
 8015e1e:	9a04      	ldrlt	r2, [sp, #16]
 8015e20:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015e24:	eba2 0809 	sublt.w	r8, r2, r9
 8015e28:	464a      	movge	r2, r9
 8015e2a:	bfb8      	it	lt
 8015e2c:	2200      	movlt	r2, #0
 8015e2e:	e73c      	b.n	8015caa <_dtoa_r+0x632>
 8015e30:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015e34:	9f07      	ldr	r7, [sp, #28]
 8015e36:	461c      	mov	r4, r3
 8015e38:	e744      	b.n	8015cc4 <_dtoa_r+0x64c>
 8015e3a:	461a      	mov	r2, r3
 8015e3c:	e770      	b.n	8015d20 <_dtoa_r+0x6a8>
 8015e3e:	9b06      	ldr	r3, [sp, #24]
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	dc18      	bgt.n	8015e76 <_dtoa_r+0x7fe>
 8015e44:	9b02      	ldr	r3, [sp, #8]
 8015e46:	b9b3      	cbnz	r3, 8015e76 <_dtoa_r+0x7fe>
 8015e48:	9b03      	ldr	r3, [sp, #12]
 8015e4a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015e4e:	b9a2      	cbnz	r2, 8015e7a <_dtoa_r+0x802>
 8015e50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015e54:	0d12      	lsrs	r2, r2, #20
 8015e56:	0512      	lsls	r2, r2, #20
 8015e58:	b18a      	cbz	r2, 8015e7e <_dtoa_r+0x806>
 8015e5a:	9b04      	ldr	r3, [sp, #16]
 8015e5c:	3301      	adds	r3, #1
 8015e5e:	9304      	str	r3, [sp, #16]
 8015e60:	9b05      	ldr	r3, [sp, #20]
 8015e62:	3301      	adds	r3, #1
 8015e64:	9305      	str	r3, [sp, #20]
 8015e66:	2301      	movs	r3, #1
 8015e68:	9309      	str	r3, [sp, #36]	; 0x24
 8015e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	f47f af70 	bne.w	8015d52 <_dtoa_r+0x6da>
 8015e72:	2001      	movs	r0, #1
 8015e74:	e775      	b.n	8015d62 <_dtoa_r+0x6ea>
 8015e76:	2300      	movs	r3, #0
 8015e78:	e7f6      	b.n	8015e68 <_dtoa_r+0x7f0>
 8015e7a:	9b02      	ldr	r3, [sp, #8]
 8015e7c:	e7f4      	b.n	8015e68 <_dtoa_r+0x7f0>
 8015e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8015e80:	e7f3      	b.n	8015e6a <_dtoa_r+0x7f2>
 8015e82:	d082      	beq.n	8015d8a <_dtoa_r+0x712>
 8015e84:	9b04      	ldr	r3, [sp, #16]
 8015e86:	321c      	adds	r2, #28
 8015e88:	4413      	add	r3, r2
 8015e8a:	9304      	str	r3, [sp, #16]
 8015e8c:	9b05      	ldr	r3, [sp, #20]
 8015e8e:	4490      	add	r8, r2
 8015e90:	4413      	add	r3, r2
 8015e92:	e779      	b.n	8015d88 <_dtoa_r+0x710>
 8015e94:	4602      	mov	r2, r0
 8015e96:	e7f5      	b.n	8015e84 <_dtoa_r+0x80c>
 8015e98:	f1b9 0f00 	cmp.w	r9, #0
 8015e9c:	dc36      	bgt.n	8015f0c <_dtoa_r+0x894>
 8015e9e:	9b06      	ldr	r3, [sp, #24]
 8015ea0:	2b02      	cmp	r3, #2
 8015ea2:	dd33      	ble.n	8015f0c <_dtoa_r+0x894>
 8015ea4:	46ca      	mov	sl, r9
 8015ea6:	f1ba 0f00 	cmp.w	sl, #0
 8015eaa:	d10d      	bne.n	8015ec8 <_dtoa_r+0x850>
 8015eac:	4621      	mov	r1, r4
 8015eae:	4653      	mov	r3, sl
 8015eb0:	2205      	movs	r2, #5
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f000 f9fa 	bl	80162ac <__multadd>
 8015eb8:	4601      	mov	r1, r0
 8015eba:	4604      	mov	r4, r0
 8015ebc:	4628      	mov	r0, r5
 8015ebe:	f000 fc0f 	bl	80166e0 <__mcmp>
 8015ec2:	2800      	cmp	r0, #0
 8015ec4:	f73f ade4 	bgt.w	8015a90 <_dtoa_r+0x418>
 8015ec8:	9b08      	ldr	r3, [sp, #32]
 8015eca:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015ece:	ea6f 0b03 	mvn.w	fp, r3
 8015ed2:	f04f 0900 	mov.w	r9, #0
 8015ed6:	4621      	mov	r1, r4
 8015ed8:	4630      	mov	r0, r6
 8015eda:	f000 f9c5 	bl	8016268 <_Bfree>
 8015ede:	2f00      	cmp	r7, #0
 8015ee0:	f43f aea1 	beq.w	8015c26 <_dtoa_r+0x5ae>
 8015ee4:	f1b9 0f00 	cmp.w	r9, #0
 8015ee8:	d005      	beq.n	8015ef6 <_dtoa_r+0x87e>
 8015eea:	45b9      	cmp	r9, r7
 8015eec:	d003      	beq.n	8015ef6 <_dtoa_r+0x87e>
 8015eee:	4649      	mov	r1, r9
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	f000 f9b9 	bl	8016268 <_Bfree>
 8015ef6:	4639      	mov	r1, r7
 8015ef8:	4630      	mov	r0, r6
 8015efa:	f000 f9b5 	bl	8016268 <_Bfree>
 8015efe:	e692      	b.n	8015c26 <_dtoa_r+0x5ae>
 8015f00:	2400      	movs	r4, #0
 8015f02:	4627      	mov	r7, r4
 8015f04:	e7e0      	b.n	8015ec8 <_dtoa_r+0x850>
 8015f06:	4693      	mov	fp, r2
 8015f08:	4627      	mov	r7, r4
 8015f0a:	e5c1      	b.n	8015a90 <_dtoa_r+0x418>
 8015f0c:	9b07      	ldr	r3, [sp, #28]
 8015f0e:	46ca      	mov	sl, r9
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	f000 8100 	beq.w	8016116 <_dtoa_r+0xa9e>
 8015f16:	f1b8 0f00 	cmp.w	r8, #0
 8015f1a:	dd05      	ble.n	8015f28 <_dtoa_r+0x8b0>
 8015f1c:	4639      	mov	r1, r7
 8015f1e:	4642      	mov	r2, r8
 8015f20:	4630      	mov	r0, r6
 8015f22:	f000 fb71 	bl	8016608 <__lshift>
 8015f26:	4607      	mov	r7, r0
 8015f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d05d      	beq.n	8015fea <_dtoa_r+0x972>
 8015f2e:	6879      	ldr	r1, [r7, #4]
 8015f30:	4630      	mov	r0, r6
 8015f32:	f000 f959 	bl	80161e8 <_Balloc>
 8015f36:	4680      	mov	r8, r0
 8015f38:	b928      	cbnz	r0, 8015f46 <_dtoa_r+0x8ce>
 8015f3a:	4b82      	ldr	r3, [pc, #520]	; (8016144 <_dtoa_r+0xacc>)
 8015f3c:	4602      	mov	r2, r0
 8015f3e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015f42:	f7ff bbb1 	b.w	80156a8 <_dtoa_r+0x30>
 8015f46:	693a      	ldr	r2, [r7, #16]
 8015f48:	3202      	adds	r2, #2
 8015f4a:	0092      	lsls	r2, r2, #2
 8015f4c:	f107 010c 	add.w	r1, r7, #12
 8015f50:	300c      	adds	r0, #12
 8015f52:	f7ff fafa 	bl	801554a <memcpy>
 8015f56:	2201      	movs	r2, #1
 8015f58:	4641      	mov	r1, r8
 8015f5a:	4630      	mov	r0, r6
 8015f5c:	f000 fb54 	bl	8016608 <__lshift>
 8015f60:	9b01      	ldr	r3, [sp, #4]
 8015f62:	3301      	adds	r3, #1
 8015f64:	9304      	str	r3, [sp, #16]
 8015f66:	9b01      	ldr	r3, [sp, #4]
 8015f68:	4453      	add	r3, sl
 8015f6a:	9308      	str	r3, [sp, #32]
 8015f6c:	9b02      	ldr	r3, [sp, #8]
 8015f6e:	f003 0301 	and.w	r3, r3, #1
 8015f72:	46b9      	mov	r9, r7
 8015f74:	9307      	str	r3, [sp, #28]
 8015f76:	4607      	mov	r7, r0
 8015f78:	9b04      	ldr	r3, [sp, #16]
 8015f7a:	4621      	mov	r1, r4
 8015f7c:	3b01      	subs	r3, #1
 8015f7e:	4628      	mov	r0, r5
 8015f80:	9302      	str	r3, [sp, #8]
 8015f82:	f7ff faf0 	bl	8015566 <quorem>
 8015f86:	4603      	mov	r3, r0
 8015f88:	3330      	adds	r3, #48	; 0x30
 8015f8a:	9005      	str	r0, [sp, #20]
 8015f8c:	4649      	mov	r1, r9
 8015f8e:	4628      	mov	r0, r5
 8015f90:	9309      	str	r3, [sp, #36]	; 0x24
 8015f92:	f000 fba5 	bl	80166e0 <__mcmp>
 8015f96:	463a      	mov	r2, r7
 8015f98:	4682      	mov	sl, r0
 8015f9a:	4621      	mov	r1, r4
 8015f9c:	4630      	mov	r0, r6
 8015f9e:	f000 fbbb 	bl	8016718 <__mdiff>
 8015fa2:	68c2      	ldr	r2, [r0, #12]
 8015fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fa6:	4680      	mov	r8, r0
 8015fa8:	bb0a      	cbnz	r2, 8015fee <_dtoa_r+0x976>
 8015faa:	4601      	mov	r1, r0
 8015fac:	4628      	mov	r0, r5
 8015fae:	f000 fb97 	bl	80166e0 <__mcmp>
 8015fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fb4:	4602      	mov	r2, r0
 8015fb6:	4641      	mov	r1, r8
 8015fb8:	4630      	mov	r0, r6
 8015fba:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015fbe:	f000 f953 	bl	8016268 <_Bfree>
 8015fc2:	9b06      	ldr	r3, [sp, #24]
 8015fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015fc6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015fca:	ea43 0102 	orr.w	r1, r3, r2
 8015fce:	9b07      	ldr	r3, [sp, #28]
 8015fd0:	4319      	orrs	r1, r3
 8015fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fd4:	d10d      	bne.n	8015ff2 <_dtoa_r+0x97a>
 8015fd6:	2b39      	cmp	r3, #57	; 0x39
 8015fd8:	d029      	beq.n	801602e <_dtoa_r+0x9b6>
 8015fda:	f1ba 0f00 	cmp.w	sl, #0
 8015fde:	dd01      	ble.n	8015fe4 <_dtoa_r+0x96c>
 8015fe0:	9b05      	ldr	r3, [sp, #20]
 8015fe2:	3331      	adds	r3, #49	; 0x31
 8015fe4:	9a02      	ldr	r2, [sp, #8]
 8015fe6:	7013      	strb	r3, [r2, #0]
 8015fe8:	e775      	b.n	8015ed6 <_dtoa_r+0x85e>
 8015fea:	4638      	mov	r0, r7
 8015fec:	e7b8      	b.n	8015f60 <_dtoa_r+0x8e8>
 8015fee:	2201      	movs	r2, #1
 8015ff0:	e7e1      	b.n	8015fb6 <_dtoa_r+0x93e>
 8015ff2:	f1ba 0f00 	cmp.w	sl, #0
 8015ff6:	db06      	blt.n	8016006 <_dtoa_r+0x98e>
 8015ff8:	9906      	ldr	r1, [sp, #24]
 8015ffa:	ea41 0a0a 	orr.w	sl, r1, sl
 8015ffe:	9907      	ldr	r1, [sp, #28]
 8016000:	ea5a 0a01 	orrs.w	sl, sl, r1
 8016004:	d120      	bne.n	8016048 <_dtoa_r+0x9d0>
 8016006:	2a00      	cmp	r2, #0
 8016008:	ddec      	ble.n	8015fe4 <_dtoa_r+0x96c>
 801600a:	4629      	mov	r1, r5
 801600c:	2201      	movs	r2, #1
 801600e:	4630      	mov	r0, r6
 8016010:	9304      	str	r3, [sp, #16]
 8016012:	f000 faf9 	bl	8016608 <__lshift>
 8016016:	4621      	mov	r1, r4
 8016018:	4605      	mov	r5, r0
 801601a:	f000 fb61 	bl	80166e0 <__mcmp>
 801601e:	2800      	cmp	r0, #0
 8016020:	9b04      	ldr	r3, [sp, #16]
 8016022:	dc02      	bgt.n	801602a <_dtoa_r+0x9b2>
 8016024:	d1de      	bne.n	8015fe4 <_dtoa_r+0x96c>
 8016026:	07da      	lsls	r2, r3, #31
 8016028:	d5dc      	bpl.n	8015fe4 <_dtoa_r+0x96c>
 801602a:	2b39      	cmp	r3, #57	; 0x39
 801602c:	d1d8      	bne.n	8015fe0 <_dtoa_r+0x968>
 801602e:	9a02      	ldr	r2, [sp, #8]
 8016030:	2339      	movs	r3, #57	; 0x39
 8016032:	7013      	strb	r3, [r2, #0]
 8016034:	4643      	mov	r3, r8
 8016036:	4698      	mov	r8, r3
 8016038:	3b01      	subs	r3, #1
 801603a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801603e:	2a39      	cmp	r2, #57	; 0x39
 8016040:	d051      	beq.n	80160e6 <_dtoa_r+0xa6e>
 8016042:	3201      	adds	r2, #1
 8016044:	701a      	strb	r2, [r3, #0]
 8016046:	e746      	b.n	8015ed6 <_dtoa_r+0x85e>
 8016048:	2a00      	cmp	r2, #0
 801604a:	dd03      	ble.n	8016054 <_dtoa_r+0x9dc>
 801604c:	2b39      	cmp	r3, #57	; 0x39
 801604e:	d0ee      	beq.n	801602e <_dtoa_r+0x9b6>
 8016050:	3301      	adds	r3, #1
 8016052:	e7c7      	b.n	8015fe4 <_dtoa_r+0x96c>
 8016054:	9a04      	ldr	r2, [sp, #16]
 8016056:	9908      	ldr	r1, [sp, #32]
 8016058:	f802 3c01 	strb.w	r3, [r2, #-1]
 801605c:	428a      	cmp	r2, r1
 801605e:	d02b      	beq.n	80160b8 <_dtoa_r+0xa40>
 8016060:	4629      	mov	r1, r5
 8016062:	2300      	movs	r3, #0
 8016064:	220a      	movs	r2, #10
 8016066:	4630      	mov	r0, r6
 8016068:	f000 f920 	bl	80162ac <__multadd>
 801606c:	45b9      	cmp	r9, r7
 801606e:	4605      	mov	r5, r0
 8016070:	f04f 0300 	mov.w	r3, #0
 8016074:	f04f 020a 	mov.w	r2, #10
 8016078:	4649      	mov	r1, r9
 801607a:	4630      	mov	r0, r6
 801607c:	d107      	bne.n	801608e <_dtoa_r+0xa16>
 801607e:	f000 f915 	bl	80162ac <__multadd>
 8016082:	4681      	mov	r9, r0
 8016084:	4607      	mov	r7, r0
 8016086:	9b04      	ldr	r3, [sp, #16]
 8016088:	3301      	adds	r3, #1
 801608a:	9304      	str	r3, [sp, #16]
 801608c:	e774      	b.n	8015f78 <_dtoa_r+0x900>
 801608e:	f000 f90d 	bl	80162ac <__multadd>
 8016092:	4639      	mov	r1, r7
 8016094:	4681      	mov	r9, r0
 8016096:	2300      	movs	r3, #0
 8016098:	220a      	movs	r2, #10
 801609a:	4630      	mov	r0, r6
 801609c:	f000 f906 	bl	80162ac <__multadd>
 80160a0:	4607      	mov	r7, r0
 80160a2:	e7f0      	b.n	8016086 <_dtoa_r+0xa0e>
 80160a4:	f1ba 0f00 	cmp.w	sl, #0
 80160a8:	9a01      	ldr	r2, [sp, #4]
 80160aa:	bfcc      	ite	gt
 80160ac:	46d0      	movgt	r8, sl
 80160ae:	f04f 0801 	movle.w	r8, #1
 80160b2:	4490      	add	r8, r2
 80160b4:	f04f 0900 	mov.w	r9, #0
 80160b8:	4629      	mov	r1, r5
 80160ba:	2201      	movs	r2, #1
 80160bc:	4630      	mov	r0, r6
 80160be:	9302      	str	r3, [sp, #8]
 80160c0:	f000 faa2 	bl	8016608 <__lshift>
 80160c4:	4621      	mov	r1, r4
 80160c6:	4605      	mov	r5, r0
 80160c8:	f000 fb0a 	bl	80166e0 <__mcmp>
 80160cc:	2800      	cmp	r0, #0
 80160ce:	dcb1      	bgt.n	8016034 <_dtoa_r+0x9bc>
 80160d0:	d102      	bne.n	80160d8 <_dtoa_r+0xa60>
 80160d2:	9b02      	ldr	r3, [sp, #8]
 80160d4:	07db      	lsls	r3, r3, #31
 80160d6:	d4ad      	bmi.n	8016034 <_dtoa_r+0x9bc>
 80160d8:	4643      	mov	r3, r8
 80160da:	4698      	mov	r8, r3
 80160dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80160e0:	2a30      	cmp	r2, #48	; 0x30
 80160e2:	d0fa      	beq.n	80160da <_dtoa_r+0xa62>
 80160e4:	e6f7      	b.n	8015ed6 <_dtoa_r+0x85e>
 80160e6:	9a01      	ldr	r2, [sp, #4]
 80160e8:	429a      	cmp	r2, r3
 80160ea:	d1a4      	bne.n	8016036 <_dtoa_r+0x9be>
 80160ec:	f10b 0b01 	add.w	fp, fp, #1
 80160f0:	2331      	movs	r3, #49	; 0x31
 80160f2:	e778      	b.n	8015fe6 <_dtoa_r+0x96e>
 80160f4:	4b14      	ldr	r3, [pc, #80]	; (8016148 <_dtoa_r+0xad0>)
 80160f6:	f7ff bb2a 	b.w	801574e <_dtoa_r+0xd6>
 80160fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f47f ab05 	bne.w	801570c <_dtoa_r+0x94>
 8016102:	4b12      	ldr	r3, [pc, #72]	; (801614c <_dtoa_r+0xad4>)
 8016104:	f7ff bb23 	b.w	801574e <_dtoa_r+0xd6>
 8016108:	f1ba 0f00 	cmp.w	sl, #0
 801610c:	dc03      	bgt.n	8016116 <_dtoa_r+0xa9e>
 801610e:	9b06      	ldr	r3, [sp, #24]
 8016110:	2b02      	cmp	r3, #2
 8016112:	f73f aec8 	bgt.w	8015ea6 <_dtoa_r+0x82e>
 8016116:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801611a:	4621      	mov	r1, r4
 801611c:	4628      	mov	r0, r5
 801611e:	f7ff fa22 	bl	8015566 <quorem>
 8016122:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8016126:	f808 3b01 	strb.w	r3, [r8], #1
 801612a:	9a01      	ldr	r2, [sp, #4]
 801612c:	eba8 0202 	sub.w	r2, r8, r2
 8016130:	4592      	cmp	sl, r2
 8016132:	ddb7      	ble.n	80160a4 <_dtoa_r+0xa2c>
 8016134:	4629      	mov	r1, r5
 8016136:	2300      	movs	r3, #0
 8016138:	220a      	movs	r2, #10
 801613a:	4630      	mov	r0, r6
 801613c:	f000 f8b6 	bl	80162ac <__multadd>
 8016140:	4605      	mov	r5, r0
 8016142:	e7ea      	b.n	801611a <_dtoa_r+0xaa2>
 8016144:	080174e0 	.word	0x080174e0
 8016148:	08017440 	.word	0x08017440
 801614c:	08017464 	.word	0x08017464

08016150 <_free_r>:
 8016150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016152:	2900      	cmp	r1, #0
 8016154:	d044      	beq.n	80161e0 <_free_r+0x90>
 8016156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801615a:	9001      	str	r0, [sp, #4]
 801615c:	2b00      	cmp	r3, #0
 801615e:	f1a1 0404 	sub.w	r4, r1, #4
 8016162:	bfb8      	it	lt
 8016164:	18e4      	addlt	r4, r4, r3
 8016166:	f7fe fa95 	bl	8014694 <__malloc_lock>
 801616a:	4a1e      	ldr	r2, [pc, #120]	; (80161e4 <_free_r+0x94>)
 801616c:	9801      	ldr	r0, [sp, #4]
 801616e:	6813      	ldr	r3, [r2, #0]
 8016170:	b933      	cbnz	r3, 8016180 <_free_r+0x30>
 8016172:	6063      	str	r3, [r4, #4]
 8016174:	6014      	str	r4, [r2, #0]
 8016176:	b003      	add	sp, #12
 8016178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801617c:	f7fe ba90 	b.w	80146a0 <__malloc_unlock>
 8016180:	42a3      	cmp	r3, r4
 8016182:	d908      	bls.n	8016196 <_free_r+0x46>
 8016184:	6825      	ldr	r5, [r4, #0]
 8016186:	1961      	adds	r1, r4, r5
 8016188:	428b      	cmp	r3, r1
 801618a:	bf01      	itttt	eq
 801618c:	6819      	ldreq	r1, [r3, #0]
 801618e:	685b      	ldreq	r3, [r3, #4]
 8016190:	1949      	addeq	r1, r1, r5
 8016192:	6021      	streq	r1, [r4, #0]
 8016194:	e7ed      	b.n	8016172 <_free_r+0x22>
 8016196:	461a      	mov	r2, r3
 8016198:	685b      	ldr	r3, [r3, #4]
 801619a:	b10b      	cbz	r3, 80161a0 <_free_r+0x50>
 801619c:	42a3      	cmp	r3, r4
 801619e:	d9fa      	bls.n	8016196 <_free_r+0x46>
 80161a0:	6811      	ldr	r1, [r2, #0]
 80161a2:	1855      	adds	r5, r2, r1
 80161a4:	42a5      	cmp	r5, r4
 80161a6:	d10b      	bne.n	80161c0 <_free_r+0x70>
 80161a8:	6824      	ldr	r4, [r4, #0]
 80161aa:	4421      	add	r1, r4
 80161ac:	1854      	adds	r4, r2, r1
 80161ae:	42a3      	cmp	r3, r4
 80161b0:	6011      	str	r1, [r2, #0]
 80161b2:	d1e0      	bne.n	8016176 <_free_r+0x26>
 80161b4:	681c      	ldr	r4, [r3, #0]
 80161b6:	685b      	ldr	r3, [r3, #4]
 80161b8:	6053      	str	r3, [r2, #4]
 80161ba:	440c      	add	r4, r1
 80161bc:	6014      	str	r4, [r2, #0]
 80161be:	e7da      	b.n	8016176 <_free_r+0x26>
 80161c0:	d902      	bls.n	80161c8 <_free_r+0x78>
 80161c2:	230c      	movs	r3, #12
 80161c4:	6003      	str	r3, [r0, #0]
 80161c6:	e7d6      	b.n	8016176 <_free_r+0x26>
 80161c8:	6825      	ldr	r5, [r4, #0]
 80161ca:	1961      	adds	r1, r4, r5
 80161cc:	428b      	cmp	r3, r1
 80161ce:	bf04      	itt	eq
 80161d0:	6819      	ldreq	r1, [r3, #0]
 80161d2:	685b      	ldreq	r3, [r3, #4]
 80161d4:	6063      	str	r3, [r4, #4]
 80161d6:	bf04      	itt	eq
 80161d8:	1949      	addeq	r1, r1, r5
 80161da:	6021      	streq	r1, [r4, #0]
 80161dc:	6054      	str	r4, [r2, #4]
 80161de:	e7ca      	b.n	8016176 <_free_r+0x26>
 80161e0:	b003      	add	sp, #12
 80161e2:	bd30      	pop	{r4, r5, pc}
 80161e4:	240045c4 	.word	0x240045c4

080161e8 <_Balloc>:
 80161e8:	b570      	push	{r4, r5, r6, lr}
 80161ea:	69c6      	ldr	r6, [r0, #28]
 80161ec:	4604      	mov	r4, r0
 80161ee:	460d      	mov	r5, r1
 80161f0:	b976      	cbnz	r6, 8016210 <_Balloc+0x28>
 80161f2:	2010      	movs	r0, #16
 80161f4:	f7fe f9a6 	bl	8014544 <malloc>
 80161f8:	4602      	mov	r2, r0
 80161fa:	61e0      	str	r0, [r4, #28]
 80161fc:	b920      	cbnz	r0, 8016208 <_Balloc+0x20>
 80161fe:	4b18      	ldr	r3, [pc, #96]	; (8016260 <_Balloc+0x78>)
 8016200:	4818      	ldr	r0, [pc, #96]	; (8016264 <_Balloc+0x7c>)
 8016202:	216b      	movs	r1, #107	; 0x6b
 8016204:	f000 fdea 	bl	8016ddc <__assert_func>
 8016208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801620c:	6006      	str	r6, [r0, #0]
 801620e:	60c6      	str	r6, [r0, #12]
 8016210:	69e6      	ldr	r6, [r4, #28]
 8016212:	68f3      	ldr	r3, [r6, #12]
 8016214:	b183      	cbz	r3, 8016238 <_Balloc+0x50>
 8016216:	69e3      	ldr	r3, [r4, #28]
 8016218:	68db      	ldr	r3, [r3, #12]
 801621a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801621e:	b9b8      	cbnz	r0, 8016250 <_Balloc+0x68>
 8016220:	2101      	movs	r1, #1
 8016222:	fa01 f605 	lsl.w	r6, r1, r5
 8016226:	1d72      	adds	r2, r6, #5
 8016228:	0092      	lsls	r2, r2, #2
 801622a:	4620      	mov	r0, r4
 801622c:	f000 fdf4 	bl	8016e18 <_calloc_r>
 8016230:	b160      	cbz	r0, 801624c <_Balloc+0x64>
 8016232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016236:	e00e      	b.n	8016256 <_Balloc+0x6e>
 8016238:	2221      	movs	r2, #33	; 0x21
 801623a:	2104      	movs	r1, #4
 801623c:	4620      	mov	r0, r4
 801623e:	f000 fdeb 	bl	8016e18 <_calloc_r>
 8016242:	69e3      	ldr	r3, [r4, #28]
 8016244:	60f0      	str	r0, [r6, #12]
 8016246:	68db      	ldr	r3, [r3, #12]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d1e4      	bne.n	8016216 <_Balloc+0x2e>
 801624c:	2000      	movs	r0, #0
 801624e:	bd70      	pop	{r4, r5, r6, pc}
 8016250:	6802      	ldr	r2, [r0, #0]
 8016252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016256:	2300      	movs	r3, #0
 8016258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801625c:	e7f7      	b.n	801624e <_Balloc+0x66>
 801625e:	bf00      	nop
 8016260:	08017471 	.word	0x08017471
 8016264:	080174f1 	.word	0x080174f1

08016268 <_Bfree>:
 8016268:	b570      	push	{r4, r5, r6, lr}
 801626a:	69c6      	ldr	r6, [r0, #28]
 801626c:	4605      	mov	r5, r0
 801626e:	460c      	mov	r4, r1
 8016270:	b976      	cbnz	r6, 8016290 <_Bfree+0x28>
 8016272:	2010      	movs	r0, #16
 8016274:	f7fe f966 	bl	8014544 <malloc>
 8016278:	4602      	mov	r2, r0
 801627a:	61e8      	str	r0, [r5, #28]
 801627c:	b920      	cbnz	r0, 8016288 <_Bfree+0x20>
 801627e:	4b09      	ldr	r3, [pc, #36]	; (80162a4 <_Bfree+0x3c>)
 8016280:	4809      	ldr	r0, [pc, #36]	; (80162a8 <_Bfree+0x40>)
 8016282:	218f      	movs	r1, #143	; 0x8f
 8016284:	f000 fdaa 	bl	8016ddc <__assert_func>
 8016288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801628c:	6006      	str	r6, [r0, #0]
 801628e:	60c6      	str	r6, [r0, #12]
 8016290:	b13c      	cbz	r4, 80162a2 <_Bfree+0x3a>
 8016292:	69eb      	ldr	r3, [r5, #28]
 8016294:	6862      	ldr	r2, [r4, #4]
 8016296:	68db      	ldr	r3, [r3, #12]
 8016298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801629c:	6021      	str	r1, [r4, #0]
 801629e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80162a2:	bd70      	pop	{r4, r5, r6, pc}
 80162a4:	08017471 	.word	0x08017471
 80162a8:	080174f1 	.word	0x080174f1

080162ac <__multadd>:
 80162ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162b0:	690d      	ldr	r5, [r1, #16]
 80162b2:	4607      	mov	r7, r0
 80162b4:	460c      	mov	r4, r1
 80162b6:	461e      	mov	r6, r3
 80162b8:	f101 0c14 	add.w	ip, r1, #20
 80162bc:	2000      	movs	r0, #0
 80162be:	f8dc 3000 	ldr.w	r3, [ip]
 80162c2:	b299      	uxth	r1, r3
 80162c4:	fb02 6101 	mla	r1, r2, r1, r6
 80162c8:	0c1e      	lsrs	r6, r3, #16
 80162ca:	0c0b      	lsrs	r3, r1, #16
 80162cc:	fb02 3306 	mla	r3, r2, r6, r3
 80162d0:	b289      	uxth	r1, r1
 80162d2:	3001      	adds	r0, #1
 80162d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80162d8:	4285      	cmp	r5, r0
 80162da:	f84c 1b04 	str.w	r1, [ip], #4
 80162de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80162e2:	dcec      	bgt.n	80162be <__multadd+0x12>
 80162e4:	b30e      	cbz	r6, 801632a <__multadd+0x7e>
 80162e6:	68a3      	ldr	r3, [r4, #8]
 80162e8:	42ab      	cmp	r3, r5
 80162ea:	dc19      	bgt.n	8016320 <__multadd+0x74>
 80162ec:	6861      	ldr	r1, [r4, #4]
 80162ee:	4638      	mov	r0, r7
 80162f0:	3101      	adds	r1, #1
 80162f2:	f7ff ff79 	bl	80161e8 <_Balloc>
 80162f6:	4680      	mov	r8, r0
 80162f8:	b928      	cbnz	r0, 8016306 <__multadd+0x5a>
 80162fa:	4602      	mov	r2, r0
 80162fc:	4b0c      	ldr	r3, [pc, #48]	; (8016330 <__multadd+0x84>)
 80162fe:	480d      	ldr	r0, [pc, #52]	; (8016334 <__multadd+0x88>)
 8016300:	21ba      	movs	r1, #186	; 0xba
 8016302:	f000 fd6b 	bl	8016ddc <__assert_func>
 8016306:	6922      	ldr	r2, [r4, #16]
 8016308:	3202      	adds	r2, #2
 801630a:	f104 010c 	add.w	r1, r4, #12
 801630e:	0092      	lsls	r2, r2, #2
 8016310:	300c      	adds	r0, #12
 8016312:	f7ff f91a 	bl	801554a <memcpy>
 8016316:	4621      	mov	r1, r4
 8016318:	4638      	mov	r0, r7
 801631a:	f7ff ffa5 	bl	8016268 <_Bfree>
 801631e:	4644      	mov	r4, r8
 8016320:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016324:	3501      	adds	r5, #1
 8016326:	615e      	str	r6, [r3, #20]
 8016328:	6125      	str	r5, [r4, #16]
 801632a:	4620      	mov	r0, r4
 801632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016330:	080174e0 	.word	0x080174e0
 8016334:	080174f1 	.word	0x080174f1

08016338 <__hi0bits>:
 8016338:	0c03      	lsrs	r3, r0, #16
 801633a:	041b      	lsls	r3, r3, #16
 801633c:	b9d3      	cbnz	r3, 8016374 <__hi0bits+0x3c>
 801633e:	0400      	lsls	r0, r0, #16
 8016340:	2310      	movs	r3, #16
 8016342:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016346:	bf04      	itt	eq
 8016348:	0200      	lsleq	r0, r0, #8
 801634a:	3308      	addeq	r3, #8
 801634c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016350:	bf04      	itt	eq
 8016352:	0100      	lsleq	r0, r0, #4
 8016354:	3304      	addeq	r3, #4
 8016356:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801635a:	bf04      	itt	eq
 801635c:	0080      	lsleq	r0, r0, #2
 801635e:	3302      	addeq	r3, #2
 8016360:	2800      	cmp	r0, #0
 8016362:	db05      	blt.n	8016370 <__hi0bits+0x38>
 8016364:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016368:	f103 0301 	add.w	r3, r3, #1
 801636c:	bf08      	it	eq
 801636e:	2320      	moveq	r3, #32
 8016370:	4618      	mov	r0, r3
 8016372:	4770      	bx	lr
 8016374:	2300      	movs	r3, #0
 8016376:	e7e4      	b.n	8016342 <__hi0bits+0xa>

08016378 <__lo0bits>:
 8016378:	6803      	ldr	r3, [r0, #0]
 801637a:	f013 0207 	ands.w	r2, r3, #7
 801637e:	d00c      	beq.n	801639a <__lo0bits+0x22>
 8016380:	07d9      	lsls	r1, r3, #31
 8016382:	d422      	bmi.n	80163ca <__lo0bits+0x52>
 8016384:	079a      	lsls	r2, r3, #30
 8016386:	bf49      	itett	mi
 8016388:	085b      	lsrmi	r3, r3, #1
 801638a:	089b      	lsrpl	r3, r3, #2
 801638c:	6003      	strmi	r3, [r0, #0]
 801638e:	2201      	movmi	r2, #1
 8016390:	bf5c      	itt	pl
 8016392:	6003      	strpl	r3, [r0, #0]
 8016394:	2202      	movpl	r2, #2
 8016396:	4610      	mov	r0, r2
 8016398:	4770      	bx	lr
 801639a:	b299      	uxth	r1, r3
 801639c:	b909      	cbnz	r1, 80163a2 <__lo0bits+0x2a>
 801639e:	0c1b      	lsrs	r3, r3, #16
 80163a0:	2210      	movs	r2, #16
 80163a2:	b2d9      	uxtb	r1, r3
 80163a4:	b909      	cbnz	r1, 80163aa <__lo0bits+0x32>
 80163a6:	3208      	adds	r2, #8
 80163a8:	0a1b      	lsrs	r3, r3, #8
 80163aa:	0719      	lsls	r1, r3, #28
 80163ac:	bf04      	itt	eq
 80163ae:	091b      	lsreq	r3, r3, #4
 80163b0:	3204      	addeq	r2, #4
 80163b2:	0799      	lsls	r1, r3, #30
 80163b4:	bf04      	itt	eq
 80163b6:	089b      	lsreq	r3, r3, #2
 80163b8:	3202      	addeq	r2, #2
 80163ba:	07d9      	lsls	r1, r3, #31
 80163bc:	d403      	bmi.n	80163c6 <__lo0bits+0x4e>
 80163be:	085b      	lsrs	r3, r3, #1
 80163c0:	f102 0201 	add.w	r2, r2, #1
 80163c4:	d003      	beq.n	80163ce <__lo0bits+0x56>
 80163c6:	6003      	str	r3, [r0, #0]
 80163c8:	e7e5      	b.n	8016396 <__lo0bits+0x1e>
 80163ca:	2200      	movs	r2, #0
 80163cc:	e7e3      	b.n	8016396 <__lo0bits+0x1e>
 80163ce:	2220      	movs	r2, #32
 80163d0:	e7e1      	b.n	8016396 <__lo0bits+0x1e>
	...

080163d4 <__i2b>:
 80163d4:	b510      	push	{r4, lr}
 80163d6:	460c      	mov	r4, r1
 80163d8:	2101      	movs	r1, #1
 80163da:	f7ff ff05 	bl	80161e8 <_Balloc>
 80163de:	4602      	mov	r2, r0
 80163e0:	b928      	cbnz	r0, 80163ee <__i2b+0x1a>
 80163e2:	4b05      	ldr	r3, [pc, #20]	; (80163f8 <__i2b+0x24>)
 80163e4:	4805      	ldr	r0, [pc, #20]	; (80163fc <__i2b+0x28>)
 80163e6:	f240 1145 	movw	r1, #325	; 0x145
 80163ea:	f000 fcf7 	bl	8016ddc <__assert_func>
 80163ee:	2301      	movs	r3, #1
 80163f0:	6144      	str	r4, [r0, #20]
 80163f2:	6103      	str	r3, [r0, #16]
 80163f4:	bd10      	pop	{r4, pc}
 80163f6:	bf00      	nop
 80163f8:	080174e0 	.word	0x080174e0
 80163fc:	080174f1 	.word	0x080174f1

08016400 <__multiply>:
 8016400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016404:	4691      	mov	r9, r2
 8016406:	690a      	ldr	r2, [r1, #16]
 8016408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801640c:	429a      	cmp	r2, r3
 801640e:	bfb8      	it	lt
 8016410:	460b      	movlt	r3, r1
 8016412:	460c      	mov	r4, r1
 8016414:	bfbc      	itt	lt
 8016416:	464c      	movlt	r4, r9
 8016418:	4699      	movlt	r9, r3
 801641a:	6927      	ldr	r7, [r4, #16]
 801641c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016420:	68a3      	ldr	r3, [r4, #8]
 8016422:	6861      	ldr	r1, [r4, #4]
 8016424:	eb07 060a 	add.w	r6, r7, sl
 8016428:	42b3      	cmp	r3, r6
 801642a:	b085      	sub	sp, #20
 801642c:	bfb8      	it	lt
 801642e:	3101      	addlt	r1, #1
 8016430:	f7ff feda 	bl	80161e8 <_Balloc>
 8016434:	b930      	cbnz	r0, 8016444 <__multiply+0x44>
 8016436:	4602      	mov	r2, r0
 8016438:	4b44      	ldr	r3, [pc, #272]	; (801654c <__multiply+0x14c>)
 801643a:	4845      	ldr	r0, [pc, #276]	; (8016550 <__multiply+0x150>)
 801643c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016440:	f000 fccc 	bl	8016ddc <__assert_func>
 8016444:	f100 0514 	add.w	r5, r0, #20
 8016448:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801644c:	462b      	mov	r3, r5
 801644e:	2200      	movs	r2, #0
 8016450:	4543      	cmp	r3, r8
 8016452:	d321      	bcc.n	8016498 <__multiply+0x98>
 8016454:	f104 0314 	add.w	r3, r4, #20
 8016458:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801645c:	f109 0314 	add.w	r3, r9, #20
 8016460:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8016464:	9202      	str	r2, [sp, #8]
 8016466:	1b3a      	subs	r2, r7, r4
 8016468:	3a15      	subs	r2, #21
 801646a:	f022 0203 	bic.w	r2, r2, #3
 801646e:	3204      	adds	r2, #4
 8016470:	f104 0115 	add.w	r1, r4, #21
 8016474:	428f      	cmp	r7, r1
 8016476:	bf38      	it	cc
 8016478:	2204      	movcc	r2, #4
 801647a:	9201      	str	r2, [sp, #4]
 801647c:	9a02      	ldr	r2, [sp, #8]
 801647e:	9303      	str	r3, [sp, #12]
 8016480:	429a      	cmp	r2, r3
 8016482:	d80c      	bhi.n	801649e <__multiply+0x9e>
 8016484:	2e00      	cmp	r6, #0
 8016486:	dd03      	ble.n	8016490 <__multiply+0x90>
 8016488:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801648c:	2b00      	cmp	r3, #0
 801648e:	d05b      	beq.n	8016548 <__multiply+0x148>
 8016490:	6106      	str	r6, [r0, #16]
 8016492:	b005      	add	sp, #20
 8016494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016498:	f843 2b04 	str.w	r2, [r3], #4
 801649c:	e7d8      	b.n	8016450 <__multiply+0x50>
 801649e:	f8b3 a000 	ldrh.w	sl, [r3]
 80164a2:	f1ba 0f00 	cmp.w	sl, #0
 80164a6:	d024      	beq.n	80164f2 <__multiply+0xf2>
 80164a8:	f104 0e14 	add.w	lr, r4, #20
 80164ac:	46a9      	mov	r9, r5
 80164ae:	f04f 0c00 	mov.w	ip, #0
 80164b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80164b6:	f8d9 1000 	ldr.w	r1, [r9]
 80164ba:	fa1f fb82 	uxth.w	fp, r2
 80164be:	b289      	uxth	r1, r1
 80164c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80164c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80164c8:	f8d9 2000 	ldr.w	r2, [r9]
 80164cc:	4461      	add	r1, ip
 80164ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80164d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80164d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80164da:	b289      	uxth	r1, r1
 80164dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80164e0:	4577      	cmp	r7, lr
 80164e2:	f849 1b04 	str.w	r1, [r9], #4
 80164e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80164ea:	d8e2      	bhi.n	80164b2 <__multiply+0xb2>
 80164ec:	9a01      	ldr	r2, [sp, #4]
 80164ee:	f845 c002 	str.w	ip, [r5, r2]
 80164f2:	9a03      	ldr	r2, [sp, #12]
 80164f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80164f8:	3304      	adds	r3, #4
 80164fa:	f1b9 0f00 	cmp.w	r9, #0
 80164fe:	d021      	beq.n	8016544 <__multiply+0x144>
 8016500:	6829      	ldr	r1, [r5, #0]
 8016502:	f104 0c14 	add.w	ip, r4, #20
 8016506:	46ae      	mov	lr, r5
 8016508:	f04f 0a00 	mov.w	sl, #0
 801650c:	f8bc b000 	ldrh.w	fp, [ip]
 8016510:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8016514:	fb09 220b 	mla	r2, r9, fp, r2
 8016518:	4452      	add	r2, sl
 801651a:	b289      	uxth	r1, r1
 801651c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016520:	f84e 1b04 	str.w	r1, [lr], #4
 8016524:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016528:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801652c:	f8be 1000 	ldrh.w	r1, [lr]
 8016530:	fb09 110a 	mla	r1, r9, sl, r1
 8016534:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016538:	4567      	cmp	r7, ip
 801653a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801653e:	d8e5      	bhi.n	801650c <__multiply+0x10c>
 8016540:	9a01      	ldr	r2, [sp, #4]
 8016542:	50a9      	str	r1, [r5, r2]
 8016544:	3504      	adds	r5, #4
 8016546:	e799      	b.n	801647c <__multiply+0x7c>
 8016548:	3e01      	subs	r6, #1
 801654a:	e79b      	b.n	8016484 <__multiply+0x84>
 801654c:	080174e0 	.word	0x080174e0
 8016550:	080174f1 	.word	0x080174f1

08016554 <__pow5mult>:
 8016554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016558:	4615      	mov	r5, r2
 801655a:	f012 0203 	ands.w	r2, r2, #3
 801655e:	4606      	mov	r6, r0
 8016560:	460f      	mov	r7, r1
 8016562:	d007      	beq.n	8016574 <__pow5mult+0x20>
 8016564:	4c25      	ldr	r4, [pc, #148]	; (80165fc <__pow5mult+0xa8>)
 8016566:	3a01      	subs	r2, #1
 8016568:	2300      	movs	r3, #0
 801656a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801656e:	f7ff fe9d 	bl	80162ac <__multadd>
 8016572:	4607      	mov	r7, r0
 8016574:	10ad      	asrs	r5, r5, #2
 8016576:	d03d      	beq.n	80165f4 <__pow5mult+0xa0>
 8016578:	69f4      	ldr	r4, [r6, #28]
 801657a:	b97c      	cbnz	r4, 801659c <__pow5mult+0x48>
 801657c:	2010      	movs	r0, #16
 801657e:	f7fd ffe1 	bl	8014544 <malloc>
 8016582:	4602      	mov	r2, r0
 8016584:	61f0      	str	r0, [r6, #28]
 8016586:	b928      	cbnz	r0, 8016594 <__pow5mult+0x40>
 8016588:	4b1d      	ldr	r3, [pc, #116]	; (8016600 <__pow5mult+0xac>)
 801658a:	481e      	ldr	r0, [pc, #120]	; (8016604 <__pow5mult+0xb0>)
 801658c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016590:	f000 fc24 	bl	8016ddc <__assert_func>
 8016594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016598:	6004      	str	r4, [r0, #0]
 801659a:	60c4      	str	r4, [r0, #12]
 801659c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80165a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80165a4:	b94c      	cbnz	r4, 80165ba <__pow5mult+0x66>
 80165a6:	f240 2171 	movw	r1, #625	; 0x271
 80165aa:	4630      	mov	r0, r6
 80165ac:	f7ff ff12 	bl	80163d4 <__i2b>
 80165b0:	2300      	movs	r3, #0
 80165b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80165b6:	4604      	mov	r4, r0
 80165b8:	6003      	str	r3, [r0, #0]
 80165ba:	f04f 0900 	mov.w	r9, #0
 80165be:	07eb      	lsls	r3, r5, #31
 80165c0:	d50a      	bpl.n	80165d8 <__pow5mult+0x84>
 80165c2:	4639      	mov	r1, r7
 80165c4:	4622      	mov	r2, r4
 80165c6:	4630      	mov	r0, r6
 80165c8:	f7ff ff1a 	bl	8016400 <__multiply>
 80165cc:	4639      	mov	r1, r7
 80165ce:	4680      	mov	r8, r0
 80165d0:	4630      	mov	r0, r6
 80165d2:	f7ff fe49 	bl	8016268 <_Bfree>
 80165d6:	4647      	mov	r7, r8
 80165d8:	106d      	asrs	r5, r5, #1
 80165da:	d00b      	beq.n	80165f4 <__pow5mult+0xa0>
 80165dc:	6820      	ldr	r0, [r4, #0]
 80165de:	b938      	cbnz	r0, 80165f0 <__pow5mult+0x9c>
 80165e0:	4622      	mov	r2, r4
 80165e2:	4621      	mov	r1, r4
 80165e4:	4630      	mov	r0, r6
 80165e6:	f7ff ff0b 	bl	8016400 <__multiply>
 80165ea:	6020      	str	r0, [r4, #0]
 80165ec:	f8c0 9000 	str.w	r9, [r0]
 80165f0:	4604      	mov	r4, r0
 80165f2:	e7e4      	b.n	80165be <__pow5mult+0x6a>
 80165f4:	4638      	mov	r0, r7
 80165f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80165fa:	bf00      	nop
 80165fc:	08017640 	.word	0x08017640
 8016600:	08017471 	.word	0x08017471
 8016604:	080174f1 	.word	0x080174f1

08016608 <__lshift>:
 8016608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801660c:	460c      	mov	r4, r1
 801660e:	6849      	ldr	r1, [r1, #4]
 8016610:	6923      	ldr	r3, [r4, #16]
 8016612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8016616:	68a3      	ldr	r3, [r4, #8]
 8016618:	4607      	mov	r7, r0
 801661a:	4691      	mov	r9, r2
 801661c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016620:	f108 0601 	add.w	r6, r8, #1
 8016624:	42b3      	cmp	r3, r6
 8016626:	db0b      	blt.n	8016640 <__lshift+0x38>
 8016628:	4638      	mov	r0, r7
 801662a:	f7ff fddd 	bl	80161e8 <_Balloc>
 801662e:	4605      	mov	r5, r0
 8016630:	b948      	cbnz	r0, 8016646 <__lshift+0x3e>
 8016632:	4602      	mov	r2, r0
 8016634:	4b28      	ldr	r3, [pc, #160]	; (80166d8 <__lshift+0xd0>)
 8016636:	4829      	ldr	r0, [pc, #164]	; (80166dc <__lshift+0xd4>)
 8016638:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801663c:	f000 fbce 	bl	8016ddc <__assert_func>
 8016640:	3101      	adds	r1, #1
 8016642:	005b      	lsls	r3, r3, #1
 8016644:	e7ee      	b.n	8016624 <__lshift+0x1c>
 8016646:	2300      	movs	r3, #0
 8016648:	f100 0114 	add.w	r1, r0, #20
 801664c:	f100 0210 	add.w	r2, r0, #16
 8016650:	4618      	mov	r0, r3
 8016652:	4553      	cmp	r3, sl
 8016654:	db33      	blt.n	80166be <__lshift+0xb6>
 8016656:	6920      	ldr	r0, [r4, #16]
 8016658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801665c:	f104 0314 	add.w	r3, r4, #20
 8016660:	f019 091f 	ands.w	r9, r9, #31
 8016664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801666c:	d02b      	beq.n	80166c6 <__lshift+0xbe>
 801666e:	f1c9 0e20 	rsb	lr, r9, #32
 8016672:	468a      	mov	sl, r1
 8016674:	2200      	movs	r2, #0
 8016676:	6818      	ldr	r0, [r3, #0]
 8016678:	fa00 f009 	lsl.w	r0, r0, r9
 801667c:	4310      	orrs	r0, r2
 801667e:	f84a 0b04 	str.w	r0, [sl], #4
 8016682:	f853 2b04 	ldr.w	r2, [r3], #4
 8016686:	459c      	cmp	ip, r3
 8016688:	fa22 f20e 	lsr.w	r2, r2, lr
 801668c:	d8f3      	bhi.n	8016676 <__lshift+0x6e>
 801668e:	ebac 0304 	sub.w	r3, ip, r4
 8016692:	3b15      	subs	r3, #21
 8016694:	f023 0303 	bic.w	r3, r3, #3
 8016698:	3304      	adds	r3, #4
 801669a:	f104 0015 	add.w	r0, r4, #21
 801669e:	4584      	cmp	ip, r0
 80166a0:	bf38      	it	cc
 80166a2:	2304      	movcc	r3, #4
 80166a4:	50ca      	str	r2, [r1, r3]
 80166a6:	b10a      	cbz	r2, 80166ac <__lshift+0xa4>
 80166a8:	f108 0602 	add.w	r6, r8, #2
 80166ac:	3e01      	subs	r6, #1
 80166ae:	4638      	mov	r0, r7
 80166b0:	612e      	str	r6, [r5, #16]
 80166b2:	4621      	mov	r1, r4
 80166b4:	f7ff fdd8 	bl	8016268 <_Bfree>
 80166b8:	4628      	mov	r0, r5
 80166ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166be:	f842 0f04 	str.w	r0, [r2, #4]!
 80166c2:	3301      	adds	r3, #1
 80166c4:	e7c5      	b.n	8016652 <__lshift+0x4a>
 80166c6:	3904      	subs	r1, #4
 80166c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80166cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80166d0:	459c      	cmp	ip, r3
 80166d2:	d8f9      	bhi.n	80166c8 <__lshift+0xc0>
 80166d4:	e7ea      	b.n	80166ac <__lshift+0xa4>
 80166d6:	bf00      	nop
 80166d8:	080174e0 	.word	0x080174e0
 80166dc:	080174f1 	.word	0x080174f1

080166e0 <__mcmp>:
 80166e0:	b530      	push	{r4, r5, lr}
 80166e2:	6902      	ldr	r2, [r0, #16]
 80166e4:	690c      	ldr	r4, [r1, #16]
 80166e6:	1b12      	subs	r2, r2, r4
 80166e8:	d10e      	bne.n	8016708 <__mcmp+0x28>
 80166ea:	f100 0314 	add.w	r3, r0, #20
 80166ee:	3114      	adds	r1, #20
 80166f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80166f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80166f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80166fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016700:	42a5      	cmp	r5, r4
 8016702:	d003      	beq.n	801670c <__mcmp+0x2c>
 8016704:	d305      	bcc.n	8016712 <__mcmp+0x32>
 8016706:	2201      	movs	r2, #1
 8016708:	4610      	mov	r0, r2
 801670a:	bd30      	pop	{r4, r5, pc}
 801670c:	4283      	cmp	r3, r0
 801670e:	d3f3      	bcc.n	80166f8 <__mcmp+0x18>
 8016710:	e7fa      	b.n	8016708 <__mcmp+0x28>
 8016712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016716:	e7f7      	b.n	8016708 <__mcmp+0x28>

08016718 <__mdiff>:
 8016718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671c:	460c      	mov	r4, r1
 801671e:	4606      	mov	r6, r0
 8016720:	4611      	mov	r1, r2
 8016722:	4620      	mov	r0, r4
 8016724:	4690      	mov	r8, r2
 8016726:	f7ff ffdb 	bl	80166e0 <__mcmp>
 801672a:	1e05      	subs	r5, r0, #0
 801672c:	d110      	bne.n	8016750 <__mdiff+0x38>
 801672e:	4629      	mov	r1, r5
 8016730:	4630      	mov	r0, r6
 8016732:	f7ff fd59 	bl	80161e8 <_Balloc>
 8016736:	b930      	cbnz	r0, 8016746 <__mdiff+0x2e>
 8016738:	4b3a      	ldr	r3, [pc, #232]	; (8016824 <__mdiff+0x10c>)
 801673a:	4602      	mov	r2, r0
 801673c:	f240 2137 	movw	r1, #567	; 0x237
 8016740:	4839      	ldr	r0, [pc, #228]	; (8016828 <__mdiff+0x110>)
 8016742:	f000 fb4b 	bl	8016ddc <__assert_func>
 8016746:	2301      	movs	r3, #1
 8016748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801674c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016750:	bfa4      	itt	ge
 8016752:	4643      	movge	r3, r8
 8016754:	46a0      	movge	r8, r4
 8016756:	4630      	mov	r0, r6
 8016758:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801675c:	bfa6      	itte	ge
 801675e:	461c      	movge	r4, r3
 8016760:	2500      	movge	r5, #0
 8016762:	2501      	movlt	r5, #1
 8016764:	f7ff fd40 	bl	80161e8 <_Balloc>
 8016768:	b920      	cbnz	r0, 8016774 <__mdiff+0x5c>
 801676a:	4b2e      	ldr	r3, [pc, #184]	; (8016824 <__mdiff+0x10c>)
 801676c:	4602      	mov	r2, r0
 801676e:	f240 2145 	movw	r1, #581	; 0x245
 8016772:	e7e5      	b.n	8016740 <__mdiff+0x28>
 8016774:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016778:	6926      	ldr	r6, [r4, #16]
 801677a:	60c5      	str	r5, [r0, #12]
 801677c:	f104 0914 	add.w	r9, r4, #20
 8016780:	f108 0514 	add.w	r5, r8, #20
 8016784:	f100 0e14 	add.w	lr, r0, #20
 8016788:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801678c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016790:	f108 0210 	add.w	r2, r8, #16
 8016794:	46f2      	mov	sl, lr
 8016796:	2100      	movs	r1, #0
 8016798:	f859 3b04 	ldr.w	r3, [r9], #4
 801679c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80167a0:	fa11 f88b 	uxtah	r8, r1, fp
 80167a4:	b299      	uxth	r1, r3
 80167a6:	0c1b      	lsrs	r3, r3, #16
 80167a8:	eba8 0801 	sub.w	r8, r8, r1
 80167ac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80167b0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80167b4:	fa1f f888 	uxth.w	r8, r8
 80167b8:	1419      	asrs	r1, r3, #16
 80167ba:	454e      	cmp	r6, r9
 80167bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80167c0:	f84a 3b04 	str.w	r3, [sl], #4
 80167c4:	d8e8      	bhi.n	8016798 <__mdiff+0x80>
 80167c6:	1b33      	subs	r3, r6, r4
 80167c8:	3b15      	subs	r3, #21
 80167ca:	f023 0303 	bic.w	r3, r3, #3
 80167ce:	3304      	adds	r3, #4
 80167d0:	3415      	adds	r4, #21
 80167d2:	42a6      	cmp	r6, r4
 80167d4:	bf38      	it	cc
 80167d6:	2304      	movcc	r3, #4
 80167d8:	441d      	add	r5, r3
 80167da:	4473      	add	r3, lr
 80167dc:	469e      	mov	lr, r3
 80167de:	462e      	mov	r6, r5
 80167e0:	4566      	cmp	r6, ip
 80167e2:	d30e      	bcc.n	8016802 <__mdiff+0xea>
 80167e4:	f10c 0203 	add.w	r2, ip, #3
 80167e8:	1b52      	subs	r2, r2, r5
 80167ea:	f022 0203 	bic.w	r2, r2, #3
 80167ee:	3d03      	subs	r5, #3
 80167f0:	45ac      	cmp	ip, r5
 80167f2:	bf38      	it	cc
 80167f4:	2200      	movcc	r2, #0
 80167f6:	4413      	add	r3, r2
 80167f8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80167fc:	b17a      	cbz	r2, 801681e <__mdiff+0x106>
 80167fe:	6107      	str	r7, [r0, #16]
 8016800:	e7a4      	b.n	801674c <__mdiff+0x34>
 8016802:	f856 8b04 	ldr.w	r8, [r6], #4
 8016806:	fa11 f288 	uxtah	r2, r1, r8
 801680a:	1414      	asrs	r4, r2, #16
 801680c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016810:	b292      	uxth	r2, r2
 8016812:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016816:	f84e 2b04 	str.w	r2, [lr], #4
 801681a:	1421      	asrs	r1, r4, #16
 801681c:	e7e0      	b.n	80167e0 <__mdiff+0xc8>
 801681e:	3f01      	subs	r7, #1
 8016820:	e7ea      	b.n	80167f8 <__mdiff+0xe0>
 8016822:	bf00      	nop
 8016824:	080174e0 	.word	0x080174e0
 8016828:	080174f1 	.word	0x080174f1

0801682c <__d2b>:
 801682c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016830:	460f      	mov	r7, r1
 8016832:	2101      	movs	r1, #1
 8016834:	ec59 8b10 	vmov	r8, r9, d0
 8016838:	4616      	mov	r6, r2
 801683a:	f7ff fcd5 	bl	80161e8 <_Balloc>
 801683e:	4604      	mov	r4, r0
 8016840:	b930      	cbnz	r0, 8016850 <__d2b+0x24>
 8016842:	4602      	mov	r2, r0
 8016844:	4b24      	ldr	r3, [pc, #144]	; (80168d8 <__d2b+0xac>)
 8016846:	4825      	ldr	r0, [pc, #148]	; (80168dc <__d2b+0xb0>)
 8016848:	f240 310f 	movw	r1, #783	; 0x30f
 801684c:	f000 fac6 	bl	8016ddc <__assert_func>
 8016850:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016854:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016858:	bb2d      	cbnz	r5, 80168a6 <__d2b+0x7a>
 801685a:	9301      	str	r3, [sp, #4]
 801685c:	f1b8 0300 	subs.w	r3, r8, #0
 8016860:	d026      	beq.n	80168b0 <__d2b+0x84>
 8016862:	4668      	mov	r0, sp
 8016864:	9300      	str	r3, [sp, #0]
 8016866:	f7ff fd87 	bl	8016378 <__lo0bits>
 801686a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801686e:	b1e8      	cbz	r0, 80168ac <__d2b+0x80>
 8016870:	f1c0 0320 	rsb	r3, r0, #32
 8016874:	fa02 f303 	lsl.w	r3, r2, r3
 8016878:	430b      	orrs	r3, r1
 801687a:	40c2      	lsrs	r2, r0
 801687c:	6163      	str	r3, [r4, #20]
 801687e:	9201      	str	r2, [sp, #4]
 8016880:	9b01      	ldr	r3, [sp, #4]
 8016882:	61a3      	str	r3, [r4, #24]
 8016884:	2b00      	cmp	r3, #0
 8016886:	bf14      	ite	ne
 8016888:	2202      	movne	r2, #2
 801688a:	2201      	moveq	r2, #1
 801688c:	6122      	str	r2, [r4, #16]
 801688e:	b1bd      	cbz	r5, 80168c0 <__d2b+0x94>
 8016890:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016894:	4405      	add	r5, r0
 8016896:	603d      	str	r5, [r7, #0]
 8016898:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801689c:	6030      	str	r0, [r6, #0]
 801689e:	4620      	mov	r0, r4
 80168a0:	b003      	add	sp, #12
 80168a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80168aa:	e7d6      	b.n	801685a <__d2b+0x2e>
 80168ac:	6161      	str	r1, [r4, #20]
 80168ae:	e7e7      	b.n	8016880 <__d2b+0x54>
 80168b0:	a801      	add	r0, sp, #4
 80168b2:	f7ff fd61 	bl	8016378 <__lo0bits>
 80168b6:	9b01      	ldr	r3, [sp, #4]
 80168b8:	6163      	str	r3, [r4, #20]
 80168ba:	3020      	adds	r0, #32
 80168bc:	2201      	movs	r2, #1
 80168be:	e7e5      	b.n	801688c <__d2b+0x60>
 80168c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80168c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80168c8:	6038      	str	r0, [r7, #0]
 80168ca:	6918      	ldr	r0, [r3, #16]
 80168cc:	f7ff fd34 	bl	8016338 <__hi0bits>
 80168d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80168d4:	e7e2      	b.n	801689c <__d2b+0x70>
 80168d6:	bf00      	nop
 80168d8:	080174e0 	.word	0x080174e0
 80168dc:	080174f1 	.word	0x080174f1

080168e0 <_malloc_usable_size_r>:
 80168e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168e4:	1f18      	subs	r0, r3, #4
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	bfbc      	itt	lt
 80168ea:	580b      	ldrlt	r3, [r1, r0]
 80168ec:	18c0      	addlt	r0, r0, r3
 80168ee:	4770      	bx	lr

080168f0 <__sfputc_r>:
 80168f0:	6893      	ldr	r3, [r2, #8]
 80168f2:	3b01      	subs	r3, #1
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	b410      	push	{r4}
 80168f8:	6093      	str	r3, [r2, #8]
 80168fa:	da08      	bge.n	801690e <__sfputc_r+0x1e>
 80168fc:	6994      	ldr	r4, [r2, #24]
 80168fe:	42a3      	cmp	r3, r4
 8016900:	db01      	blt.n	8016906 <__sfputc_r+0x16>
 8016902:	290a      	cmp	r1, #10
 8016904:	d103      	bne.n	801690e <__sfputc_r+0x1e>
 8016906:	f85d 4b04 	ldr.w	r4, [sp], #4
 801690a:	f7fe bcb6 	b.w	801527a <__swbuf_r>
 801690e:	6813      	ldr	r3, [r2, #0]
 8016910:	1c58      	adds	r0, r3, #1
 8016912:	6010      	str	r0, [r2, #0]
 8016914:	7019      	strb	r1, [r3, #0]
 8016916:	4608      	mov	r0, r1
 8016918:	f85d 4b04 	ldr.w	r4, [sp], #4
 801691c:	4770      	bx	lr

0801691e <__sfputs_r>:
 801691e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016920:	4606      	mov	r6, r0
 8016922:	460f      	mov	r7, r1
 8016924:	4614      	mov	r4, r2
 8016926:	18d5      	adds	r5, r2, r3
 8016928:	42ac      	cmp	r4, r5
 801692a:	d101      	bne.n	8016930 <__sfputs_r+0x12>
 801692c:	2000      	movs	r0, #0
 801692e:	e007      	b.n	8016940 <__sfputs_r+0x22>
 8016930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016934:	463a      	mov	r2, r7
 8016936:	4630      	mov	r0, r6
 8016938:	f7ff ffda 	bl	80168f0 <__sfputc_r>
 801693c:	1c43      	adds	r3, r0, #1
 801693e:	d1f3      	bne.n	8016928 <__sfputs_r+0xa>
 8016940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016944 <_vfiprintf_r>:
 8016944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016948:	460d      	mov	r5, r1
 801694a:	b09d      	sub	sp, #116	; 0x74
 801694c:	4614      	mov	r4, r2
 801694e:	4698      	mov	r8, r3
 8016950:	4606      	mov	r6, r0
 8016952:	b118      	cbz	r0, 801695c <_vfiprintf_r+0x18>
 8016954:	6a03      	ldr	r3, [r0, #32]
 8016956:	b90b      	cbnz	r3, 801695c <_vfiprintf_r+0x18>
 8016958:	f7fe fba8 	bl	80150ac <__sinit>
 801695c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801695e:	07d9      	lsls	r1, r3, #31
 8016960:	d405      	bmi.n	801696e <_vfiprintf_r+0x2a>
 8016962:	89ab      	ldrh	r3, [r5, #12]
 8016964:	059a      	lsls	r2, r3, #22
 8016966:	d402      	bmi.n	801696e <_vfiprintf_r+0x2a>
 8016968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801696a:	f7fe fdec 	bl	8015546 <__retarget_lock_acquire_recursive>
 801696e:	89ab      	ldrh	r3, [r5, #12]
 8016970:	071b      	lsls	r3, r3, #28
 8016972:	d501      	bpl.n	8016978 <_vfiprintf_r+0x34>
 8016974:	692b      	ldr	r3, [r5, #16]
 8016976:	b99b      	cbnz	r3, 80169a0 <_vfiprintf_r+0x5c>
 8016978:	4629      	mov	r1, r5
 801697a:	4630      	mov	r0, r6
 801697c:	f7fe fcba 	bl	80152f4 <__swsetup_r>
 8016980:	b170      	cbz	r0, 80169a0 <_vfiprintf_r+0x5c>
 8016982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016984:	07dc      	lsls	r4, r3, #31
 8016986:	d504      	bpl.n	8016992 <_vfiprintf_r+0x4e>
 8016988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801698c:	b01d      	add	sp, #116	; 0x74
 801698e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016992:	89ab      	ldrh	r3, [r5, #12]
 8016994:	0598      	lsls	r0, r3, #22
 8016996:	d4f7      	bmi.n	8016988 <_vfiprintf_r+0x44>
 8016998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801699a:	f7fe fdd5 	bl	8015548 <__retarget_lock_release_recursive>
 801699e:	e7f3      	b.n	8016988 <_vfiprintf_r+0x44>
 80169a0:	2300      	movs	r3, #0
 80169a2:	9309      	str	r3, [sp, #36]	; 0x24
 80169a4:	2320      	movs	r3, #32
 80169a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80169aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80169ae:	2330      	movs	r3, #48	; 0x30
 80169b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016b64 <_vfiprintf_r+0x220>
 80169b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80169b8:	f04f 0901 	mov.w	r9, #1
 80169bc:	4623      	mov	r3, r4
 80169be:	469a      	mov	sl, r3
 80169c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80169c4:	b10a      	cbz	r2, 80169ca <_vfiprintf_r+0x86>
 80169c6:	2a25      	cmp	r2, #37	; 0x25
 80169c8:	d1f9      	bne.n	80169be <_vfiprintf_r+0x7a>
 80169ca:	ebba 0b04 	subs.w	fp, sl, r4
 80169ce:	d00b      	beq.n	80169e8 <_vfiprintf_r+0xa4>
 80169d0:	465b      	mov	r3, fp
 80169d2:	4622      	mov	r2, r4
 80169d4:	4629      	mov	r1, r5
 80169d6:	4630      	mov	r0, r6
 80169d8:	f7ff ffa1 	bl	801691e <__sfputs_r>
 80169dc:	3001      	adds	r0, #1
 80169de:	f000 80a9 	beq.w	8016b34 <_vfiprintf_r+0x1f0>
 80169e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80169e4:	445a      	add	r2, fp
 80169e6:	9209      	str	r2, [sp, #36]	; 0x24
 80169e8:	f89a 3000 	ldrb.w	r3, [sl]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	f000 80a1 	beq.w	8016b34 <_vfiprintf_r+0x1f0>
 80169f2:	2300      	movs	r3, #0
 80169f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80169fc:	f10a 0a01 	add.w	sl, sl, #1
 8016a00:	9304      	str	r3, [sp, #16]
 8016a02:	9307      	str	r3, [sp, #28]
 8016a04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016a08:	931a      	str	r3, [sp, #104]	; 0x68
 8016a0a:	4654      	mov	r4, sl
 8016a0c:	2205      	movs	r2, #5
 8016a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a12:	4854      	ldr	r0, [pc, #336]	; (8016b64 <_vfiprintf_r+0x220>)
 8016a14:	f7e9 fc64 	bl	80002e0 <memchr>
 8016a18:	9a04      	ldr	r2, [sp, #16]
 8016a1a:	b9d8      	cbnz	r0, 8016a54 <_vfiprintf_r+0x110>
 8016a1c:	06d1      	lsls	r1, r2, #27
 8016a1e:	bf44      	itt	mi
 8016a20:	2320      	movmi	r3, #32
 8016a22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a26:	0713      	lsls	r3, r2, #28
 8016a28:	bf44      	itt	mi
 8016a2a:	232b      	movmi	r3, #43	; 0x2b
 8016a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016a30:	f89a 3000 	ldrb.w	r3, [sl]
 8016a34:	2b2a      	cmp	r3, #42	; 0x2a
 8016a36:	d015      	beq.n	8016a64 <_vfiprintf_r+0x120>
 8016a38:	9a07      	ldr	r2, [sp, #28]
 8016a3a:	4654      	mov	r4, sl
 8016a3c:	2000      	movs	r0, #0
 8016a3e:	f04f 0c0a 	mov.w	ip, #10
 8016a42:	4621      	mov	r1, r4
 8016a44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016a48:	3b30      	subs	r3, #48	; 0x30
 8016a4a:	2b09      	cmp	r3, #9
 8016a4c:	d94d      	bls.n	8016aea <_vfiprintf_r+0x1a6>
 8016a4e:	b1b0      	cbz	r0, 8016a7e <_vfiprintf_r+0x13a>
 8016a50:	9207      	str	r2, [sp, #28]
 8016a52:	e014      	b.n	8016a7e <_vfiprintf_r+0x13a>
 8016a54:	eba0 0308 	sub.w	r3, r0, r8
 8016a58:	fa09 f303 	lsl.w	r3, r9, r3
 8016a5c:	4313      	orrs	r3, r2
 8016a5e:	9304      	str	r3, [sp, #16]
 8016a60:	46a2      	mov	sl, r4
 8016a62:	e7d2      	b.n	8016a0a <_vfiprintf_r+0xc6>
 8016a64:	9b03      	ldr	r3, [sp, #12]
 8016a66:	1d19      	adds	r1, r3, #4
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	9103      	str	r1, [sp, #12]
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	bfbb      	ittet	lt
 8016a70:	425b      	neglt	r3, r3
 8016a72:	f042 0202 	orrlt.w	r2, r2, #2
 8016a76:	9307      	strge	r3, [sp, #28]
 8016a78:	9307      	strlt	r3, [sp, #28]
 8016a7a:	bfb8      	it	lt
 8016a7c:	9204      	strlt	r2, [sp, #16]
 8016a7e:	7823      	ldrb	r3, [r4, #0]
 8016a80:	2b2e      	cmp	r3, #46	; 0x2e
 8016a82:	d10c      	bne.n	8016a9e <_vfiprintf_r+0x15a>
 8016a84:	7863      	ldrb	r3, [r4, #1]
 8016a86:	2b2a      	cmp	r3, #42	; 0x2a
 8016a88:	d134      	bne.n	8016af4 <_vfiprintf_r+0x1b0>
 8016a8a:	9b03      	ldr	r3, [sp, #12]
 8016a8c:	1d1a      	adds	r2, r3, #4
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	9203      	str	r2, [sp, #12]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	bfb8      	it	lt
 8016a96:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016a9a:	3402      	adds	r4, #2
 8016a9c:	9305      	str	r3, [sp, #20]
 8016a9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016b74 <_vfiprintf_r+0x230>
 8016aa2:	7821      	ldrb	r1, [r4, #0]
 8016aa4:	2203      	movs	r2, #3
 8016aa6:	4650      	mov	r0, sl
 8016aa8:	f7e9 fc1a 	bl	80002e0 <memchr>
 8016aac:	b138      	cbz	r0, 8016abe <_vfiprintf_r+0x17a>
 8016aae:	9b04      	ldr	r3, [sp, #16]
 8016ab0:	eba0 000a 	sub.w	r0, r0, sl
 8016ab4:	2240      	movs	r2, #64	; 0x40
 8016ab6:	4082      	lsls	r2, r0
 8016ab8:	4313      	orrs	r3, r2
 8016aba:	3401      	adds	r4, #1
 8016abc:	9304      	str	r3, [sp, #16]
 8016abe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ac2:	4829      	ldr	r0, [pc, #164]	; (8016b68 <_vfiprintf_r+0x224>)
 8016ac4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ac8:	2206      	movs	r2, #6
 8016aca:	f7e9 fc09 	bl	80002e0 <memchr>
 8016ace:	2800      	cmp	r0, #0
 8016ad0:	d03f      	beq.n	8016b52 <_vfiprintf_r+0x20e>
 8016ad2:	4b26      	ldr	r3, [pc, #152]	; (8016b6c <_vfiprintf_r+0x228>)
 8016ad4:	bb1b      	cbnz	r3, 8016b1e <_vfiprintf_r+0x1da>
 8016ad6:	9b03      	ldr	r3, [sp, #12]
 8016ad8:	3307      	adds	r3, #7
 8016ada:	f023 0307 	bic.w	r3, r3, #7
 8016ade:	3308      	adds	r3, #8
 8016ae0:	9303      	str	r3, [sp, #12]
 8016ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ae4:	443b      	add	r3, r7
 8016ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ae8:	e768      	b.n	80169bc <_vfiprintf_r+0x78>
 8016aea:	fb0c 3202 	mla	r2, ip, r2, r3
 8016aee:	460c      	mov	r4, r1
 8016af0:	2001      	movs	r0, #1
 8016af2:	e7a6      	b.n	8016a42 <_vfiprintf_r+0xfe>
 8016af4:	2300      	movs	r3, #0
 8016af6:	3401      	adds	r4, #1
 8016af8:	9305      	str	r3, [sp, #20]
 8016afa:	4619      	mov	r1, r3
 8016afc:	f04f 0c0a 	mov.w	ip, #10
 8016b00:	4620      	mov	r0, r4
 8016b02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016b06:	3a30      	subs	r2, #48	; 0x30
 8016b08:	2a09      	cmp	r2, #9
 8016b0a:	d903      	bls.n	8016b14 <_vfiprintf_r+0x1d0>
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d0c6      	beq.n	8016a9e <_vfiprintf_r+0x15a>
 8016b10:	9105      	str	r1, [sp, #20]
 8016b12:	e7c4      	b.n	8016a9e <_vfiprintf_r+0x15a>
 8016b14:	fb0c 2101 	mla	r1, ip, r1, r2
 8016b18:	4604      	mov	r4, r0
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e7f0      	b.n	8016b00 <_vfiprintf_r+0x1bc>
 8016b1e:	ab03      	add	r3, sp, #12
 8016b20:	9300      	str	r3, [sp, #0]
 8016b22:	462a      	mov	r2, r5
 8016b24:	4b12      	ldr	r3, [pc, #72]	; (8016b70 <_vfiprintf_r+0x22c>)
 8016b26:	a904      	add	r1, sp, #16
 8016b28:	4630      	mov	r0, r6
 8016b2a:	f7fd fe89 	bl	8014840 <_printf_float>
 8016b2e:	4607      	mov	r7, r0
 8016b30:	1c78      	adds	r0, r7, #1
 8016b32:	d1d6      	bne.n	8016ae2 <_vfiprintf_r+0x19e>
 8016b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016b36:	07d9      	lsls	r1, r3, #31
 8016b38:	d405      	bmi.n	8016b46 <_vfiprintf_r+0x202>
 8016b3a:	89ab      	ldrh	r3, [r5, #12]
 8016b3c:	059a      	lsls	r2, r3, #22
 8016b3e:	d402      	bmi.n	8016b46 <_vfiprintf_r+0x202>
 8016b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016b42:	f7fe fd01 	bl	8015548 <__retarget_lock_release_recursive>
 8016b46:	89ab      	ldrh	r3, [r5, #12]
 8016b48:	065b      	lsls	r3, r3, #25
 8016b4a:	f53f af1d 	bmi.w	8016988 <_vfiprintf_r+0x44>
 8016b4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016b50:	e71c      	b.n	801698c <_vfiprintf_r+0x48>
 8016b52:	ab03      	add	r3, sp, #12
 8016b54:	9300      	str	r3, [sp, #0]
 8016b56:	462a      	mov	r2, r5
 8016b58:	4b05      	ldr	r3, [pc, #20]	; (8016b70 <_vfiprintf_r+0x22c>)
 8016b5a:	a904      	add	r1, sp, #16
 8016b5c:	4630      	mov	r0, r6
 8016b5e:	f7fe f8f7 	bl	8014d50 <_printf_i>
 8016b62:	e7e4      	b.n	8016b2e <_vfiprintf_r+0x1ea>
 8016b64:	0801764c 	.word	0x0801764c
 8016b68:	08017656 	.word	0x08017656
 8016b6c:	08014841 	.word	0x08014841
 8016b70:	0801691f 	.word	0x0801691f
 8016b74:	08017652 	.word	0x08017652

08016b78 <__sflush_r>:
 8016b78:	898a      	ldrh	r2, [r1, #12]
 8016b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b7e:	4605      	mov	r5, r0
 8016b80:	0710      	lsls	r0, r2, #28
 8016b82:	460c      	mov	r4, r1
 8016b84:	d458      	bmi.n	8016c38 <__sflush_r+0xc0>
 8016b86:	684b      	ldr	r3, [r1, #4]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	dc05      	bgt.n	8016b98 <__sflush_r+0x20>
 8016b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	dc02      	bgt.n	8016b98 <__sflush_r+0x20>
 8016b92:	2000      	movs	r0, #0
 8016b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b9a:	2e00      	cmp	r6, #0
 8016b9c:	d0f9      	beq.n	8016b92 <__sflush_r+0x1a>
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ba4:	682f      	ldr	r7, [r5, #0]
 8016ba6:	6a21      	ldr	r1, [r4, #32]
 8016ba8:	602b      	str	r3, [r5, #0]
 8016baa:	d032      	beq.n	8016c12 <__sflush_r+0x9a>
 8016bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016bae:	89a3      	ldrh	r3, [r4, #12]
 8016bb0:	075a      	lsls	r2, r3, #29
 8016bb2:	d505      	bpl.n	8016bc0 <__sflush_r+0x48>
 8016bb4:	6863      	ldr	r3, [r4, #4]
 8016bb6:	1ac0      	subs	r0, r0, r3
 8016bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bba:	b10b      	cbz	r3, 8016bc0 <__sflush_r+0x48>
 8016bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016bbe:	1ac0      	subs	r0, r0, r3
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	4602      	mov	r2, r0
 8016bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bc6:	6a21      	ldr	r1, [r4, #32]
 8016bc8:	4628      	mov	r0, r5
 8016bca:	47b0      	blx	r6
 8016bcc:	1c43      	adds	r3, r0, #1
 8016bce:	89a3      	ldrh	r3, [r4, #12]
 8016bd0:	d106      	bne.n	8016be0 <__sflush_r+0x68>
 8016bd2:	6829      	ldr	r1, [r5, #0]
 8016bd4:	291d      	cmp	r1, #29
 8016bd6:	d82b      	bhi.n	8016c30 <__sflush_r+0xb8>
 8016bd8:	4a29      	ldr	r2, [pc, #164]	; (8016c80 <__sflush_r+0x108>)
 8016bda:	410a      	asrs	r2, r1
 8016bdc:	07d6      	lsls	r6, r2, #31
 8016bde:	d427      	bmi.n	8016c30 <__sflush_r+0xb8>
 8016be0:	2200      	movs	r2, #0
 8016be2:	6062      	str	r2, [r4, #4]
 8016be4:	04d9      	lsls	r1, r3, #19
 8016be6:	6922      	ldr	r2, [r4, #16]
 8016be8:	6022      	str	r2, [r4, #0]
 8016bea:	d504      	bpl.n	8016bf6 <__sflush_r+0x7e>
 8016bec:	1c42      	adds	r2, r0, #1
 8016bee:	d101      	bne.n	8016bf4 <__sflush_r+0x7c>
 8016bf0:	682b      	ldr	r3, [r5, #0]
 8016bf2:	b903      	cbnz	r3, 8016bf6 <__sflush_r+0x7e>
 8016bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8016bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bf8:	602f      	str	r7, [r5, #0]
 8016bfa:	2900      	cmp	r1, #0
 8016bfc:	d0c9      	beq.n	8016b92 <__sflush_r+0x1a>
 8016bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c02:	4299      	cmp	r1, r3
 8016c04:	d002      	beq.n	8016c0c <__sflush_r+0x94>
 8016c06:	4628      	mov	r0, r5
 8016c08:	f7ff faa2 	bl	8016150 <_free_r>
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8016c10:	e7c0      	b.n	8016b94 <__sflush_r+0x1c>
 8016c12:	2301      	movs	r3, #1
 8016c14:	4628      	mov	r0, r5
 8016c16:	47b0      	blx	r6
 8016c18:	1c41      	adds	r1, r0, #1
 8016c1a:	d1c8      	bne.n	8016bae <__sflush_r+0x36>
 8016c1c:	682b      	ldr	r3, [r5, #0]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d0c5      	beq.n	8016bae <__sflush_r+0x36>
 8016c22:	2b1d      	cmp	r3, #29
 8016c24:	d001      	beq.n	8016c2a <__sflush_r+0xb2>
 8016c26:	2b16      	cmp	r3, #22
 8016c28:	d101      	bne.n	8016c2e <__sflush_r+0xb6>
 8016c2a:	602f      	str	r7, [r5, #0]
 8016c2c:	e7b1      	b.n	8016b92 <__sflush_r+0x1a>
 8016c2e:	89a3      	ldrh	r3, [r4, #12]
 8016c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c34:	81a3      	strh	r3, [r4, #12]
 8016c36:	e7ad      	b.n	8016b94 <__sflush_r+0x1c>
 8016c38:	690f      	ldr	r7, [r1, #16]
 8016c3a:	2f00      	cmp	r7, #0
 8016c3c:	d0a9      	beq.n	8016b92 <__sflush_r+0x1a>
 8016c3e:	0793      	lsls	r3, r2, #30
 8016c40:	680e      	ldr	r6, [r1, #0]
 8016c42:	bf08      	it	eq
 8016c44:	694b      	ldreq	r3, [r1, #20]
 8016c46:	600f      	str	r7, [r1, #0]
 8016c48:	bf18      	it	ne
 8016c4a:	2300      	movne	r3, #0
 8016c4c:	eba6 0807 	sub.w	r8, r6, r7
 8016c50:	608b      	str	r3, [r1, #8]
 8016c52:	f1b8 0f00 	cmp.w	r8, #0
 8016c56:	dd9c      	ble.n	8016b92 <__sflush_r+0x1a>
 8016c58:	6a21      	ldr	r1, [r4, #32]
 8016c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c5c:	4643      	mov	r3, r8
 8016c5e:	463a      	mov	r2, r7
 8016c60:	4628      	mov	r0, r5
 8016c62:	47b0      	blx	r6
 8016c64:	2800      	cmp	r0, #0
 8016c66:	dc06      	bgt.n	8016c76 <__sflush_r+0xfe>
 8016c68:	89a3      	ldrh	r3, [r4, #12]
 8016c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c6e:	81a3      	strh	r3, [r4, #12]
 8016c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c74:	e78e      	b.n	8016b94 <__sflush_r+0x1c>
 8016c76:	4407      	add	r7, r0
 8016c78:	eba8 0800 	sub.w	r8, r8, r0
 8016c7c:	e7e9      	b.n	8016c52 <__sflush_r+0xda>
 8016c7e:	bf00      	nop
 8016c80:	dfbffffe 	.word	0xdfbffffe

08016c84 <_fflush_r>:
 8016c84:	b538      	push	{r3, r4, r5, lr}
 8016c86:	690b      	ldr	r3, [r1, #16]
 8016c88:	4605      	mov	r5, r0
 8016c8a:	460c      	mov	r4, r1
 8016c8c:	b913      	cbnz	r3, 8016c94 <_fflush_r+0x10>
 8016c8e:	2500      	movs	r5, #0
 8016c90:	4628      	mov	r0, r5
 8016c92:	bd38      	pop	{r3, r4, r5, pc}
 8016c94:	b118      	cbz	r0, 8016c9e <_fflush_r+0x1a>
 8016c96:	6a03      	ldr	r3, [r0, #32]
 8016c98:	b90b      	cbnz	r3, 8016c9e <_fflush_r+0x1a>
 8016c9a:	f7fe fa07 	bl	80150ac <__sinit>
 8016c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d0f3      	beq.n	8016c8e <_fflush_r+0xa>
 8016ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016ca8:	07d0      	lsls	r0, r2, #31
 8016caa:	d404      	bmi.n	8016cb6 <_fflush_r+0x32>
 8016cac:	0599      	lsls	r1, r3, #22
 8016cae:	d402      	bmi.n	8016cb6 <_fflush_r+0x32>
 8016cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cb2:	f7fe fc48 	bl	8015546 <__retarget_lock_acquire_recursive>
 8016cb6:	4628      	mov	r0, r5
 8016cb8:	4621      	mov	r1, r4
 8016cba:	f7ff ff5d 	bl	8016b78 <__sflush_r>
 8016cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016cc0:	07da      	lsls	r2, r3, #31
 8016cc2:	4605      	mov	r5, r0
 8016cc4:	d4e4      	bmi.n	8016c90 <_fflush_r+0xc>
 8016cc6:	89a3      	ldrh	r3, [r4, #12]
 8016cc8:	059b      	lsls	r3, r3, #22
 8016cca:	d4e1      	bmi.n	8016c90 <_fflush_r+0xc>
 8016ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cce:	f7fe fc3b 	bl	8015548 <__retarget_lock_release_recursive>
 8016cd2:	e7dd      	b.n	8016c90 <_fflush_r+0xc>

08016cd4 <__swhatbuf_r>:
 8016cd4:	b570      	push	{r4, r5, r6, lr}
 8016cd6:	460c      	mov	r4, r1
 8016cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cdc:	2900      	cmp	r1, #0
 8016cde:	b096      	sub	sp, #88	; 0x58
 8016ce0:	4615      	mov	r5, r2
 8016ce2:	461e      	mov	r6, r3
 8016ce4:	da0d      	bge.n	8016d02 <__swhatbuf_r+0x2e>
 8016ce6:	89a3      	ldrh	r3, [r4, #12]
 8016ce8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016cec:	f04f 0100 	mov.w	r1, #0
 8016cf0:	bf0c      	ite	eq
 8016cf2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016cf6:	2340      	movne	r3, #64	; 0x40
 8016cf8:	2000      	movs	r0, #0
 8016cfa:	6031      	str	r1, [r6, #0]
 8016cfc:	602b      	str	r3, [r5, #0]
 8016cfe:	b016      	add	sp, #88	; 0x58
 8016d00:	bd70      	pop	{r4, r5, r6, pc}
 8016d02:	466a      	mov	r2, sp
 8016d04:	f000 f848 	bl	8016d98 <_fstat_r>
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	dbec      	blt.n	8016ce6 <__swhatbuf_r+0x12>
 8016d0c:	9901      	ldr	r1, [sp, #4]
 8016d0e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016d12:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016d16:	4259      	negs	r1, r3
 8016d18:	4159      	adcs	r1, r3
 8016d1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d1e:	e7eb      	b.n	8016cf8 <__swhatbuf_r+0x24>

08016d20 <__smakebuf_r>:
 8016d20:	898b      	ldrh	r3, [r1, #12]
 8016d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016d24:	079d      	lsls	r5, r3, #30
 8016d26:	4606      	mov	r6, r0
 8016d28:	460c      	mov	r4, r1
 8016d2a:	d507      	bpl.n	8016d3c <__smakebuf_r+0x1c>
 8016d2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016d30:	6023      	str	r3, [r4, #0]
 8016d32:	6123      	str	r3, [r4, #16]
 8016d34:	2301      	movs	r3, #1
 8016d36:	6163      	str	r3, [r4, #20]
 8016d38:	b002      	add	sp, #8
 8016d3a:	bd70      	pop	{r4, r5, r6, pc}
 8016d3c:	ab01      	add	r3, sp, #4
 8016d3e:	466a      	mov	r2, sp
 8016d40:	f7ff ffc8 	bl	8016cd4 <__swhatbuf_r>
 8016d44:	9900      	ldr	r1, [sp, #0]
 8016d46:	4605      	mov	r5, r0
 8016d48:	4630      	mov	r0, r6
 8016d4a:	f7fd fc23 	bl	8014594 <_malloc_r>
 8016d4e:	b948      	cbnz	r0, 8016d64 <__smakebuf_r+0x44>
 8016d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d54:	059a      	lsls	r2, r3, #22
 8016d56:	d4ef      	bmi.n	8016d38 <__smakebuf_r+0x18>
 8016d58:	f023 0303 	bic.w	r3, r3, #3
 8016d5c:	f043 0302 	orr.w	r3, r3, #2
 8016d60:	81a3      	strh	r3, [r4, #12]
 8016d62:	e7e3      	b.n	8016d2c <__smakebuf_r+0xc>
 8016d64:	89a3      	ldrh	r3, [r4, #12]
 8016d66:	6020      	str	r0, [r4, #0]
 8016d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d6c:	81a3      	strh	r3, [r4, #12]
 8016d6e:	9b00      	ldr	r3, [sp, #0]
 8016d70:	6163      	str	r3, [r4, #20]
 8016d72:	9b01      	ldr	r3, [sp, #4]
 8016d74:	6120      	str	r0, [r4, #16]
 8016d76:	b15b      	cbz	r3, 8016d90 <__smakebuf_r+0x70>
 8016d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d7c:	4630      	mov	r0, r6
 8016d7e:	f000 f81d 	bl	8016dbc <_isatty_r>
 8016d82:	b128      	cbz	r0, 8016d90 <__smakebuf_r+0x70>
 8016d84:	89a3      	ldrh	r3, [r4, #12]
 8016d86:	f023 0303 	bic.w	r3, r3, #3
 8016d8a:	f043 0301 	orr.w	r3, r3, #1
 8016d8e:	81a3      	strh	r3, [r4, #12]
 8016d90:	89a3      	ldrh	r3, [r4, #12]
 8016d92:	431d      	orrs	r5, r3
 8016d94:	81a5      	strh	r5, [r4, #12]
 8016d96:	e7cf      	b.n	8016d38 <__smakebuf_r+0x18>

08016d98 <_fstat_r>:
 8016d98:	b538      	push	{r3, r4, r5, lr}
 8016d9a:	4d07      	ldr	r5, [pc, #28]	; (8016db8 <_fstat_r+0x20>)
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	4604      	mov	r4, r0
 8016da0:	4608      	mov	r0, r1
 8016da2:	4611      	mov	r1, r2
 8016da4:	602b      	str	r3, [r5, #0]
 8016da6:	f7ef ffce 	bl	8006d46 <_fstat>
 8016daa:	1c43      	adds	r3, r0, #1
 8016dac:	d102      	bne.n	8016db4 <_fstat_r+0x1c>
 8016dae:	682b      	ldr	r3, [r5, #0]
 8016db0:	b103      	cbz	r3, 8016db4 <_fstat_r+0x1c>
 8016db2:	6023      	str	r3, [r4, #0]
 8016db4:	bd38      	pop	{r3, r4, r5, pc}
 8016db6:	bf00      	nop
 8016db8:	24004708 	.word	0x24004708

08016dbc <_isatty_r>:
 8016dbc:	b538      	push	{r3, r4, r5, lr}
 8016dbe:	4d06      	ldr	r5, [pc, #24]	; (8016dd8 <_isatty_r+0x1c>)
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	4604      	mov	r4, r0
 8016dc4:	4608      	mov	r0, r1
 8016dc6:	602b      	str	r3, [r5, #0]
 8016dc8:	f7ef ffcd 	bl	8006d66 <_isatty>
 8016dcc:	1c43      	adds	r3, r0, #1
 8016dce:	d102      	bne.n	8016dd6 <_isatty_r+0x1a>
 8016dd0:	682b      	ldr	r3, [r5, #0]
 8016dd2:	b103      	cbz	r3, 8016dd6 <_isatty_r+0x1a>
 8016dd4:	6023      	str	r3, [r4, #0]
 8016dd6:	bd38      	pop	{r3, r4, r5, pc}
 8016dd8:	24004708 	.word	0x24004708

08016ddc <__assert_func>:
 8016ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016dde:	4614      	mov	r4, r2
 8016de0:	461a      	mov	r2, r3
 8016de2:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <__assert_func+0x2c>)
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	4605      	mov	r5, r0
 8016de8:	68d8      	ldr	r0, [r3, #12]
 8016dea:	b14c      	cbz	r4, 8016e00 <__assert_func+0x24>
 8016dec:	4b07      	ldr	r3, [pc, #28]	; (8016e0c <__assert_func+0x30>)
 8016dee:	9100      	str	r1, [sp, #0]
 8016df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016df4:	4906      	ldr	r1, [pc, #24]	; (8016e10 <__assert_func+0x34>)
 8016df6:	462b      	mov	r3, r5
 8016df8:	f000 f844 	bl	8016e84 <fiprintf>
 8016dfc:	f7fd fb9a 	bl	8014534 <abort>
 8016e00:	4b04      	ldr	r3, [pc, #16]	; (8016e14 <__assert_func+0x38>)
 8016e02:	461c      	mov	r4, r3
 8016e04:	e7f3      	b.n	8016dee <__assert_func+0x12>
 8016e06:	bf00      	nop
 8016e08:	240000a8 	.word	0x240000a8
 8016e0c:	08017667 	.word	0x08017667
 8016e10:	08017674 	.word	0x08017674
 8016e14:	080176a2 	.word	0x080176a2

08016e18 <_calloc_r>:
 8016e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e1a:	fba1 2402 	umull	r2, r4, r1, r2
 8016e1e:	b94c      	cbnz	r4, 8016e34 <_calloc_r+0x1c>
 8016e20:	4611      	mov	r1, r2
 8016e22:	9201      	str	r2, [sp, #4]
 8016e24:	f7fd fbb6 	bl	8014594 <_malloc_r>
 8016e28:	9a01      	ldr	r2, [sp, #4]
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	b930      	cbnz	r0, 8016e3c <_calloc_r+0x24>
 8016e2e:	4628      	mov	r0, r5
 8016e30:	b003      	add	sp, #12
 8016e32:	bd30      	pop	{r4, r5, pc}
 8016e34:	220c      	movs	r2, #12
 8016e36:	6002      	str	r2, [r0, #0]
 8016e38:	2500      	movs	r5, #0
 8016e3a:	e7f8      	b.n	8016e2e <_calloc_r+0x16>
 8016e3c:	4621      	mov	r1, r4
 8016e3e:	f7fe fab1 	bl	80153a4 <memset>
 8016e42:	e7f4      	b.n	8016e2e <_calloc_r+0x16>

08016e44 <__ascii_mbtowc>:
 8016e44:	b082      	sub	sp, #8
 8016e46:	b901      	cbnz	r1, 8016e4a <__ascii_mbtowc+0x6>
 8016e48:	a901      	add	r1, sp, #4
 8016e4a:	b142      	cbz	r2, 8016e5e <__ascii_mbtowc+0x1a>
 8016e4c:	b14b      	cbz	r3, 8016e62 <__ascii_mbtowc+0x1e>
 8016e4e:	7813      	ldrb	r3, [r2, #0]
 8016e50:	600b      	str	r3, [r1, #0]
 8016e52:	7812      	ldrb	r2, [r2, #0]
 8016e54:	1e10      	subs	r0, r2, #0
 8016e56:	bf18      	it	ne
 8016e58:	2001      	movne	r0, #1
 8016e5a:	b002      	add	sp, #8
 8016e5c:	4770      	bx	lr
 8016e5e:	4610      	mov	r0, r2
 8016e60:	e7fb      	b.n	8016e5a <__ascii_mbtowc+0x16>
 8016e62:	f06f 0001 	mvn.w	r0, #1
 8016e66:	e7f8      	b.n	8016e5a <__ascii_mbtowc+0x16>

08016e68 <__ascii_wctomb>:
 8016e68:	b149      	cbz	r1, 8016e7e <__ascii_wctomb+0x16>
 8016e6a:	2aff      	cmp	r2, #255	; 0xff
 8016e6c:	bf85      	ittet	hi
 8016e6e:	238a      	movhi	r3, #138	; 0x8a
 8016e70:	6003      	strhi	r3, [r0, #0]
 8016e72:	700a      	strbls	r2, [r1, #0]
 8016e74:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016e78:	bf98      	it	ls
 8016e7a:	2001      	movls	r0, #1
 8016e7c:	4770      	bx	lr
 8016e7e:	4608      	mov	r0, r1
 8016e80:	4770      	bx	lr
	...

08016e84 <fiprintf>:
 8016e84:	b40e      	push	{r1, r2, r3}
 8016e86:	b503      	push	{r0, r1, lr}
 8016e88:	4601      	mov	r1, r0
 8016e8a:	ab03      	add	r3, sp, #12
 8016e8c:	4805      	ldr	r0, [pc, #20]	; (8016ea4 <fiprintf+0x20>)
 8016e8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e92:	6800      	ldr	r0, [r0, #0]
 8016e94:	9301      	str	r3, [sp, #4]
 8016e96:	f7ff fd55 	bl	8016944 <_vfiprintf_r>
 8016e9a:	b002      	add	sp, #8
 8016e9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ea0:	b003      	add	sp, #12
 8016ea2:	4770      	bx	lr
 8016ea4:	240000a8 	.word	0x240000a8

08016ea8 <_init>:
 8016ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eaa:	bf00      	nop
 8016eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eae:	bc08      	pop	{r3}
 8016eb0:	469e      	mov	lr, r3
 8016eb2:	4770      	bx	lr

08016eb4 <_fini>:
 8016eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb6:	bf00      	nop
 8016eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016eba:	bc08      	pop	{r3}
 8016ebc:	469e      	mov	lr, r3
 8016ebe:	4770      	bx	lr
