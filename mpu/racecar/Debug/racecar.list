
racecar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08016d28  08016d28  00026d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080174e4  080174e4  000274e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  080174ec  080174ec  000274ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080174f8  080174f8  000274f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000248  24000000  080174fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000044a4  24000248  08017744  00030248  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240046ec  08017744  000346ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030276  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002ea82  00000000  00000000  000302b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000048af  00000000  00000000  0005ed3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001e30  00000000  00000000  000635f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001791  00000000  00000000  00065420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f7f4  00000000  00000000  00066bb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00024bd2  00000000  00000000  000a63a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00185b4d  00000000  00000000  000caf77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009234  00000000  00000000  00250ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  00259cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000248 	.word	0x24000248
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016d10 	.word	0x08016d10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400024c 	.word	0x2400024c
 80002dc:	08016d10 	.word	0x08016d10

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <_ZL6millisv>:

static inline uint32_t micros(void){
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

static inline uint32_t millis(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_ZL6millisv+0x24>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL6millisv+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <_ZL6millisv+0x2c>)
 800069a:	fba1 1303 	umull	r1, r3, r1, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	24000070 	.word	0x24000070
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>:
#include <jy901/JY901_Control.h>
#include <jy901/JY901_Serial.h>
#include <string.h>
#include "utility.h"

CJY901::CJY901(UART_HandleTypeDef* huart) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	_huart=huart;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	67da      	str	r2, [r3, #124]	; 0x7c
  _lastTime = millis();
 80006cc:	f7ff ffde 	bl	800068c <_ZL6millisv>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <_ZN6CJY9019parseDataEPh>:


bool CJY901::parseData(uint8_t* rxBuffer) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]

  // do sum check to confirm data is not corrupted
  uint8_t sum = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
 80006f6:	e009      	b.n	800070c <_ZN6CJY9019parseDataEPh+0x28>
    sum += rxBuffer[cnt];
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	781a      	ldrb	r2, [r3, #0]
 8000700:	7bfb      	ldrb	r3, [r7, #15]
 8000702:	4413      	add	r3, r2
 8000704:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 8000706:	7bbb      	ldrb	r3, [r7, #14]
 8000708:	3301      	adds	r3, #1
 800070a:	73bb      	strb	r3, [r7, #14]
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	2b09      	cmp	r3, #9
 8000710:	d9f2      	bls.n	80006f8 <_ZN6CJY9019parseDataEPh+0x14>
  if (sum != rxBuffer[10])
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	330a      	adds	r3, #10
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	7bfa      	ldrb	r2, [r7, #15]
 800071a:	429a      	cmp	r2, r3
 800071c:	d001      	beq.n	8000722 <_ZN6CJY9019parseDataEPh+0x3e>
    return false;
 800071e:	2300      	movs	r3, #0
 8000720:	e0a6      	b.n	8000870 <_ZN6CJY9019parseDataEPh+0x18c>

  switch (rxBuffer[1]) {  // these cases are based on Manual p26,27,28,29 and 30
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	3b50      	subs	r3, #80	; 0x50
 800072a:	2b0a      	cmp	r3, #10
 800072c:	f200 8099 	bhi.w	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
 8000730:	a201      	add	r2, pc, #4	; (adr r2, 8000738 <_ZN6CJY9019parseDataEPh+0x54>)
 8000732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000736:	bf00      	nop
 8000738:	08000765 	.word	0x08000765
 800073c:	08000779 	.word	0x08000779
 8000740:	0800078d 	.word	0x0800078d
 8000744:	080007a1 	.word	0x080007a1
 8000748:	080007b5 	.word	0x080007b5
 800074c:	080007c9 	.word	0x080007c9
 8000750:	080007dd 	.word	0x080007dd
 8000754:	080007f7 	.word	0x080007f7
 8000758:	08000811 	.word	0x08000811
 800075c:	0800083b 	.word	0x0800083b
 8000760:	0800084f 	.word	0x0800084f
    case 0x50:
      memcpy(&JY901_data.time, &rxBuffer[2], 8);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3302      	adds	r3, #2
 800076e:	2208      	movs	r2, #8
 8000770:	4619      	mov	r1, r3
 8000772:	f014 fe1e 	bl	80153b2 <memcpy>
      break;  // time
 8000776:	e074      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x51:
      memcpy(&JY901_data.acc, &rxBuffer[2], 8);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	3302      	adds	r3, #2
 8000782:	2208      	movs	r2, #8
 8000784:	4619      	mov	r1, r3
 8000786:	f014 fe14 	bl	80153b2 <memcpy>
      break;  // acceleration
 800078a:	e06a      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x52:
      memcpy(&JY901_data.gyro, &rxBuffer[2], 8);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	3302      	adds	r3, #2
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	f014 fe0a 	bl	80153b2 <memcpy>
      break;  // angular velocity
 800079e:	e060      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x53:
      memcpy(&JY901_data.angle, &rxBuffer[2], 8);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	3302      	adds	r3, #2
 80007aa:	2208      	movs	r2, #8
 80007ac:	4619      	mov	r1, r3
 80007ae:	f014 fe00 	bl	80153b2 <memcpy>
      break;  // angle
 80007b2:	e056      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x54:
      memcpy(&JY901_data.mag, &rxBuffer[2], 8);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	3302      	adds	r3, #2
 80007be:	2208      	movs	r2, #8
 80007c0:	4619      	mov	r1, r3
 80007c2:	f014 fdf6 	bl	80153b2 <memcpy>
      break;  // magnetic field and temperature
 80007c6:	e04c      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x55:
      memcpy(&JY901_data.dStatus, &rxBuffer[2], 8);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3302      	adds	r3, #2
 80007d2:	2208      	movs	r2, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	f014 fdec 	bl	80153b2 <memcpy>
      break;  // D port status
 80007da:	e042      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x56:
      memcpy(&JY901_data.pressure, &rxBuffer[2], 4);  // pressure
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3354      	adds	r3, #84	; 0x54
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	3202      	adds	r2, #2
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.altitude, &rxBuffer[6], 4);  // altitude
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3358      	adds	r3, #88	; 0x58
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	3206      	adds	r2, #6
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	601a      	str	r2, [r3, #0]
      break;
 80007f4:	e035      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x57:
      memcpy(&JY901_data.lon, &rxBuffer[2], 4);  // longtitude
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	335c      	adds	r3, #92	; 0x5c
 80007fa:	683a      	ldr	r2, [r7, #0]
 80007fc:	3202      	adds	r2, #2
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.lat, &rxBuffer[6], 4);  // latitude
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3360      	adds	r3, #96	; 0x60
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	3206      	adds	r2, #6
 800080a:	6812      	ldr	r2, [r2, #0]
 800080c:	601a      	str	r2, [r3, #0]
      break;
 800080e:	e028      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x58:
      memcpy(&JY901_data.GPSHeight, &rxBuffer[2], 2);    //
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3364      	adds	r3, #100	; 0x64
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	3202      	adds	r2, #2
 8000818:	8812      	ldrh	r2, [r2, #0]
 800081a:	b292      	uxth	r2, r2
 800081c:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSYaw, &rxBuffer[4], 2);       // GPS data
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3366      	adds	r3, #102	; 0x66
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	3204      	adds	r2, #4
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	b292      	uxth	r2, r2
 800082a:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSVelocity, &rxBuffer[6], 4);  //
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3368      	adds	r3, #104	; 0x68
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	3206      	adds	r2, #6
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	601a      	str	r2, [r3, #0]
      break;
 8000838:	e013      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x59:
      memcpy(&JY901_data.quater, &rxBuffer[2], 8);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	3302      	adds	r3, #2
 8000844:	2208      	movs	r2, #8
 8000846:	4619      	mov	r1, r3
 8000848:	f014 fdb3 	bl	80153b2 <memcpy>
      break;  // quaternion
 800084c:	e009      	b.n	8000862 <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x5A:
      memcpy(&JY901_data.GPS_DOP, &rxBuffer[2], 8);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	3302      	adds	r3, #2
 8000858:	2208      	movs	r2, #8
 800085a:	4619      	mov	r1, r3
 800085c:	f014 fda9 	bl	80153b2 <memcpy>
      break;  // GPS DOP
 8000860:	bf00      	nop
  }
  _lastTime = millis();  // last receive time
 8000862:	f7ff ff13 	bl	800068c <_ZL6millisv>
 8000866:	4602      	mov	r2, r0
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  return true;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3710      	adds	r7, #16
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <_Z41__static_initialization_and_destruction_0ii>:
	  HAL_UART_Transmit(_huart, JY901_GPSBAUDRATE, 5, 10);
  }
  //Serial1.write(JY901_GPSBAUDRATE, 5);
}

CJY901 JY901;
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d108      	bne.n	800089a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088e:	4293      	cmp	r3, r2
 8000890:	d103      	bne.n	800089a <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000892:	2100      	movs	r1, #0
 8000894:	4803      	ldr	r0, [pc, #12]	; (80008a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000896:	f7ff ff11 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000264 	.word	0x24000264

080008a8 <_GLOBAL__sub_I_JY901_SAVECONF>:
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80008b0:	2001      	movs	r0, #1
 80008b2:	f7ff ffe1 	bl	8000878 <_Z41__static_initialization_and_destruction_0ii>
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <_ZN3PIDIfEC1EPfS1_S1_fffh>:

template <typename T>
PID<T>::PID() { }

template <typename T>
PID<T>::PID(T *input, T *output, T *setpoint, T kp, T ki, T kd,uint8_t add_input)
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	61f8      	str	r0, [r7, #28]
 80008c0:	61b9      	str	r1, [r7, #24]
 80008c2:	617a      	str	r2, [r7, #20]
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80008ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80008ce:	ed87 1a01 	vstr	s2, [r7, #4]
{
	output_   = output;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	697a      	ldr	r2, [r7, #20]
 80008d6:	619a      	str	r2, [r3, #24]
	input_    = input;
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	615a      	str	r2, [r3, #20]
	setpoint_ = setpoint;
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	693a      	ldr	r2, [r7, #16]
 80008e2:	61da      	str	r2, [r3, #28]
//	mode_     = PID_MODE_MANUAL;
	
	PID<T>::set_tunings(kp, ki, kd, add_input);
 80008e4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008e8:	4619      	mov	r1, r3
 80008ea:	ed97 1a01 	vldr	s2, [r7, #4]
 80008ee:	edd7 0a02 	vldr	s1, [r7, #8]
 80008f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80008f6:	69f8      	ldr	r0, [r7, #28]
 80008f8:	f000 f8f9 	bl	8000aee <_ZN3PIDIfE11set_tuningsEfffh>
	
	last_time_ = HAL_GetTick();
 80008fc:	f006 fb0e 	bl	8006f1c <HAL_GetTick>
 8000900:	4602      	mov	r2, r0
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	605a      	str	r2, [r3, #4]
}
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4618      	mov	r0, r3
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN3PIDIfE7computeEv>:


template <typename T>
void PID<T>::compute(void)
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
{
//	if(mode_ == PID_MODE_MANUAL)return;
	uint32_t now = HAL_GetTick();
 8000918:	f006 fb00 	bl	8006f1c <HAL_GetTick>
 800091c:	61f8      	str	r0, [r7, #28]
	uint32_t dt = now - last_time_;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	69fa      	ldr	r2, [r7, #28]
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	61bb      	str	r3, [r7, #24]
	
	T input = *input_;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	617b      	str	r3, [r7, #20]
	T error = *setpoint_-input;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69db      	ldr	r3, [r3, #28]
 8000934:	ed93 7a00 	vldr	s14, [r3]
 8000938:	edd7 7a05 	vldr	s15, [r7, #20]
 800093c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000940:	edc7 7a04 	vstr	s15, [r7, #16]
	T dInput = input-last_input_;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800094a:	ed97 7a05 	vldr	s14, [r7, #20]
 800094e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000952:	edc7 7a03 	vstr	s15, [r7, #12]
	//T output;
	

	
	output_sum_ += ki_ * error * dt/1000.0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	edd3 7a08 	vldr	s15, [r3, #32]
 800095c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	ed93 7a03 	vldr	s14, [r3, #12]
 8000966:	edd7 7a04 	vldr	s15, [r7, #16]
 800096a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800097c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000980:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8000a70 <_ZN3PIDIfE7computeEv+0x160>
 8000984:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800098c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	edc3 7a08 	vstr	s15, [r3, #32]
	output_sum_ -= kp_ * dInput*add_input_error_to_proportional_;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	ed93 7a08 	vldr	s14, [r3, #32]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	edd3 6a02 	vldr	s13, [r3, #8]
 80009a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80009a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	ee07 3a90 	vmov	s15, r3
 80009b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	edc3 7a08 	vstr	s15, [r3, #32]
	clip(&output_sum_, out_min_, out_max_);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f103 0220 	add.w	r2, r3, #32
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80009d6:	eef0 0a47 	vmov.f32	s1, s14
 80009da:	eeb0 0a67 	vmov.f32	s0, s15
 80009de:	4610      	mov	r0, r2
 80009e0:	f000 f8b0 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
	
	T output = output_sum_ - kp_ * error - kd_ * dInput * 1000.0 / dt;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	edd3 6a02 	vldr	s13, [r3, #8]
 80009f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80009f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80009f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009fc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	ed93 7a04 	vldr	s14, [r3, #16]
 8000a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a0e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a12:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8000a70 <_ZN3PIDIfE7computeEv+0x160>
 8000a16:	ee27 4b05 	vmul.f64	d4, d7, d5
 8000a1a:	69bb      	ldr	r3, [r7, #24]
 8000a1c:	ee07 3a90 	vmov	s15, r3
 8000a20:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8000a24:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000a2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a30:	edc7 7a02 	vstr	s15, [r7, #8]
	*output_ = output;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	68ba      	ldr	r2, [r7, #8]
 8000a3a:	601a      	str	r2, [r3, #0]
	clip(output_, out_min_, out_max_);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000a4c:	eef0 0a47 	vmov.f32	s1, s14
 8000a50:	eeb0 0a67 	vmov.f32	s0, s15
 8000a54:	4610      	mov	r0, r2
 8000a56:	f000 f875 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
		
	last_input_ = input;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
	last_time_  = now;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	605a      	str	r2, [r3, #4]
}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	00000000 	.word	0x00000000
 8000a74:	408f4000 	.word	0x408f4000

08000a78 <_ZN3PIDIfE17set_output_limitsEff>:
//}


/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
template <typename T>
void PID<T>::set_output_limits(T min, T max)
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a84:	edc7 0a01 	vstr	s1, [r7, #4]
{

	if (min >= max)return;
 8000a88:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	da25      	bge.n	8000ae6 <_ZN3PIDIfE17set_output_limitsEff+0x6e>
	
	out_min_ = min;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	629a      	str	r2, [r3, #40]	; 0x28
	out_max_ = max;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	
	clip(output_,out_min_,out_max_);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ab6:	eef0 0a47 	vmov.f32	s1, s14
 8000aba:	eeb0 0a67 	vmov.f32	s0, s15
 8000abe:	4610      	mov	r0, r2
 8000ac0:	f000 f840 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
	clip(&output_sum_,out_min_,out_max_);
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f103 0220 	add.w	r2, r3, #32
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000ad6:	eef0 0a47 	vmov.f32	s1, s14
 8000ada:	eeb0 0a67 	vmov.f32	s0, s15
 8000ade:	4610      	mov	r0, r2
 8000ae0:	f000 f830 	bl	8000b44 <_Z4clipIfEvPT_S0_S0_>
 8000ae4:	e000      	b.n	8000ae8 <_ZN3PIDIfE17set_output_limitsEff+0x70>
	if (min >= max)return;
 8000ae6:	bf00      	nop
	
}
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_ZN3PIDIfE11set_tuningsEfffh>:
}



template <typename T>
void PID<T>::set_tunings(T kp, T ki, T kd, uint8_t add_input)
 8000aee:	b480      	push	{r7}
 8000af0:	b087      	sub	sp, #28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6178      	str	r0, [r7, #20]
 8000af6:	ed87 0a04 	vstr	s0, [r7, #16]
 8000afa:	edc7 0a03 	vstr	s1, [r7, #12]
 8000afe:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b02:	460b      	mov	r3, r1
 8000b04:	71fb      	strb	r3, [r7, #7]
{
	kp_=kp;
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	609a      	str	r2, [r3, #8]
	ki_=ki;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	60da      	str	r2, [r3, #12]
	kd_=kd;
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	611a      	str	r2, [r3, #16]
	add_input_error_to_proportional_=add_input;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	701a      	strb	r2, [r3, #0]
}
 8000b1e:	bf00      	nop
 8000b20:	371c      	adds	r7, #28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <_ZN3PIDIfE5resetEv>:
void PID<T>::reset(){
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
	last_time_ = HAL_GetTick();
 8000b32:	f006 f9f3 	bl	8006f1c <HAL_GetTick>
 8000b36:	4602      	mov	r2, r0
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	605a      	str	r2, [r3, #4]
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <_Z4clipIfEvPT_S0_S0_>:
//	T GetKd(void);
	
};

template<typename T>
void clip(T* value,T min,T max){
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000b50:	edc7 0a01 	vstr	s1, [r7, #4]
	if(*value>max)*value=max;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	edd3 7a00 	vldr	s15, [r3]
 8000b5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	d503      	bpl.n	8000b70 <_Z4clipIfEvPT_S0_S0_+0x2c>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	601a      	str	r2, [r3, #0]
	else if(*value<min)*value=min;
}
 8000b6e:	e00d      	b.n	8000b8c <_Z4clipIfEvPT_S0_S0_+0x48>
	else if(*value<min)*value=min;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	edd3 7a00 	vldr	s15, [r3]
 8000b76:	ed97 7a02 	vldr	s14, [r7, #8]
 8000b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	dc00      	bgt.n	8000b86 <_Z4clipIfEvPT_S0_S0_+0x42>
}
 8000b84:	e002      	b.n	8000b8c <_Z4clipIfEvPT_S0_S0_+0x48>
	else if(*value<min)*value=min;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	68ba      	ldr	r2, [r7, #8]
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b096      	sub	sp, #88	; 0x58
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	2238      	movs	r2, #56	; 0x38
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f014 fb2f 	bl	801520c <memset>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	623b      	str	r3, [r7, #32]
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8000bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bbc:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 8000bc0:	f107 0408 	add.w	r4, r7, #8
 8000bc4:	461d      	mov	r5, r3
 8000bc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bce:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 8000bd2:	f107 0208 	add.w	r2, r7, #8
 8000bd6:	f107 0120 	add.w	r1, r7, #32
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8000bde:	f00b fb54 	bl	800c28a <HAL_QSPI_AutoPolling>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 8000be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bec:	e000      	b.n	8000bf0 <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3758      	adds	r7, #88	; 0x58
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf8:	08016d28 	.word	0x08016d28
 8000bfc:	24001988 	.word	0x24001988

08000c00 <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8000c00:	b5b0      	push	{r4, r5, r7, lr}
 8000c02:	b094      	sub	sp, #80	; 0x50
 8000c04:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	2238      	movs	r2, #56	; 0x38
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f014 fafc 	bl	801520c <memset>
 8000c14:	2306      	movs	r3, #6
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1c:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c1e:	f107 0318 	add.w	r3, r7, #24
 8000c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c26:	4619      	mov	r1, r3
 8000c28:	4818      	ldr	r0, [pc, #96]	; (8000c8c <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000c2a:	f00b f9a1 	bl	800bf70 <HAL_QSPI_Command>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d002      	beq.n	8000c3a <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c38:	e023      	b.n	8000c82 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c3e:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8000c40:	2305      	movs	r3, #5
 8000c42:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8000c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <QSPI_W25Q64JV_WriteEnable+0x90>)
 8000c54:	463c      	mov	r4, r7
 8000c56:	461d      	mov	r5, r3
 8000c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c60:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c64:	463a      	mov	r2, r7
 8000c66:	f107 0118 	add.w	r1, r7, #24
 8000c6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c6e:	4807      	ldr	r0, [pc, #28]	; (8000c8c <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000c70:	f00b fb0b 	bl	800c28a <HAL_QSPI_AutoPolling>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d002      	beq.n	8000c80 <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c7e:	e000      	b.n	8000c82 <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3750      	adds	r7, #80	; 0x50
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	24001988 	.word	0x24001988
 8000c90:	08016d40 	.word	0x08016d40

08000c94 <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000caa:	463b      	mov	r3, r7
 8000cac:	2238      	movs	r2, #56	; 0x38
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f014 faab 	bl	801520c <memset>
 8000cb6:	2366      	movs	r3, #102	; 0x66
 8000cb8:	603b      	str	r3, [r7, #0]
 8000cba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cbe:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000cc0:	463b      	mov	r3, r7
 8000cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4814      	ldr	r0, [pc, #80]	; (8000d1c <QSPI_W25Q64JV_Reset+0x78>)
 8000cca:	f00b f951 	bl	800bf70 <HAL_QSPI_Command>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cd8:	e01c      	b.n	8000d14 <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cde:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8000ce0:	2399      	movs	r3, #153	; 0x99
 8000ce2:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cea:	4619      	mov	r1, r3
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <QSPI_W25Q64JV_Reset+0x78>)
 8000cee:	f00b f93f 	bl	800bf70 <HAL_QSPI_Command>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d002      	beq.n	8000cfe <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cfc:	e00a      	b.n	8000d14 <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000cfe:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d02:	f7ff ff49 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d10:	e000      	b.n	8000d14 <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3738      	adds	r7, #56	; 0x38
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	24001988 	.word	0x24001988

08000d20 <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b090      	sub	sp, #64	; 0x40
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000d28:	f7ff ff6a 	bl	8000c00 <QSPI_W25Q64JV_WriteEnable>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d36:	e02c      	b.n	8000d92 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 8000d38:	f107 0308 	add.w	r3, r7, #8
 8000d3c:	2238      	movs	r2, #56	; 0x38
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f014 fa63 	bl	801520c <memset>
 8000d46:	2320      	movs	r3, #32
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d68:	4619      	mov	r1, r3
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <QSPI_W25Q64JV_EraseSector+0x7c>)
 8000d6c:	f00b f900 	bl	800bf70 <HAL_QSPI_Command>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d7a:	e00a      	b.n	8000d92 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d80:	f7ff ff0a 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d002      	beq.n	8000d90 <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d8e:	e000      	b.n	8000d92 <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3740      	adds	r7, #64	; 0x40
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	24001988 	.word	0x24001988

08000da0 <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b092      	sub	sp, #72	; 0x48
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000dac:	f241 3088 	movw	r0, #5000	; 0x1388
 8000db0:	f7ff fef2 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d002      	beq.n	8000dc0 <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dbe:	e044      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2238      	movs	r2, #56	; 0x38
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f014 fa1f 	bl	801520c <memset>
 8000dce:	23eb      	movs	r3, #235	; 0xeb
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	23f0      	movs	r3, #240	; 0xf0
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dde:	61fb      	str	r3, [r7, #28]
 8000de0:	2304      	movs	r3, #4
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000df0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000df4:	633b      	str	r3, [r7, #48]	; 0x30
 8000df6:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4812      	ldr	r0, [pc, #72]	; (8000e54 <QSPI_W25Q64JV_Read+0xb4>)
 8000e0c:	f00b f8b0 	bl	800bf70 <HAL_QSPI_Command>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d002      	beq.n	8000e1c <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e1a:	e016      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e20:	68f9      	ldr	r1, [r7, #12]
 8000e22:	480c      	ldr	r0, [pc, #48]	; (8000e54 <QSPI_W25Q64JV_Read+0xb4>)
 8000e24:	f00b f994 	bl	800c150 <HAL_QSPI_Receive>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e32:	e00a      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e34:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e38:	f7ff feae 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e46:	e000      	b.n	8000e4a <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3748      	adds	r7, #72	; 0x48
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	24001988 	.word	0x24001988

08000e58 <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b092      	sub	sp, #72	; 0x48
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e64:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e68:	f7ff fe96 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e76:	e045      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000e78:	f7ff fec2 	bl	8000c00 <QSPI_W25Q64JV_WriteEnable>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d002      	beq.n	8000e88 <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e86:	e03d      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	2238      	movs	r2, #56	; 0x38
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f014 f9bb 	bl	801520c <memset>
 8000e96:	2302      	movs	r3, #2
 8000e98:	613b      	str	r3, [r7, #16]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4811      	ldr	r0, [pc, #68]	; (8000f0c <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000ec6:	f00b f853 	bl	800bf70 <HAL_QSPI_Command>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d002      	beq.n	8000ed6 <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed4:	e016      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eda:	68f9      	ldr	r1, [r7, #12]
 8000edc:	480b      	ldr	r0, [pc, #44]	; (8000f0c <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000ede:	f00b f8a5 	bl	800c02c <HAL_QSPI_Transmit>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eec:	e00a      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000eee:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ef2:	f7ff fe51 	bl	8000b98 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f00:	e000      	b.n	8000f04 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3748      	adds	r7, #72	; 0x48
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	24001988 	.word	0x24001988

08000f10 <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f28:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d801      	bhi.n	8000f36 <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f7ff ff8c 	bl	8000e58 <QSPI_W25Q64JV_PageProgram>
 8000f40:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d117      	bne.n	8000f78 <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d013      	beq.n	8000f78 <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4413      	add	r3, r2
 8000f56:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f6e:	bf28      	it	cs
 8000f70:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000f74:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000f76:	e7de      	b.n	8000f36 <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8000f78:	693b      	ldr	r3, [r7, #16]
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	0b1b      	lsrs	r3, r3, #12
 8000f98:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa2:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8000fa4:	8afb      	ldrh	r3, [r7, #22]
 8000fa6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000faa:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8000fac:	8abb      	ldrh	r3, [r7, #20]
 8000fae:	687a      	ldr	r2, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d801      	bhi.n	8000fb8 <QSPI_W25Q64JV_Write+0x34>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	031b      	lsls	r3, r3, #12
 8000fbc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4835      	ldr	r0, [pc, #212]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 8000fc4:	f7ff feec 	bl	8000da0 <QSPI_W25Q64JV_Read>
 8000fc8:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d157      	bne.n	8001080 <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	e009      	b.n	8000fea <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000fd6:	8afa      	ldrh	r2, [r7, #22]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 8000fde:	5cd3      	ldrb	r3, [r2, r3]
 8000fe0:	2bff      	cmp	r3, #255	; 0xff
 8000fe2:	d107      	bne.n	8000ff4 <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	8abb      	ldrh	r3, [r7, #20]
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d3f1      	bcc.n	8000fd6 <QSPI_W25Q64JV_Write+0x52>
 8000ff2:	e000      	b.n	8000ff6 <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000ff4:	bf00      	nop
        }
        if (i < secremain) {
 8000ff6:	8abb      	ldrh	r3, [r7, #20]
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d21d      	bcs.n	800103a <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	031b      	lsls	r3, r3, #12
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fe8c 	bl	8000d20 <QSPI_W25Q64JV_EraseSector>
 8001008:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d139      	bne.n	8001084 <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8001010:	8afb      	ldrh	r3, [r7, #22]
 8001012:	4a21      	ldr	r2, [pc, #132]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 8001014:	4413      	add	r3, r2
 8001016:	8aba      	ldrh	r2, [r7, #20]
 8001018:	68f9      	ldr	r1, [r7, #12]
 800101a:	4618      	mov	r0, r3
 800101c:	f014 f9c9 	bl	80153b2 <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	031b      	lsls	r3, r3, #12
 8001024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001028:	4619      	mov	r1, r3
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <QSPI_W25Q64JV_Write+0x114>)
 800102c:	f7ff ff70 	bl	8000f10 <QSPI_W25Q64JV_Write_NoCheck>
 8001030:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00a      	beq.n	800104e <QSPI_W25Q64JV_Write+0xca>
 8001038:	e029      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 800103a:	8abb      	ldrh	r3, [r7, #20]
 800103c:	461a      	mov	r2, r3
 800103e:	68b9      	ldr	r1, [r7, #8]
 8001040:	68f8      	ldr	r0, [r7, #12]
 8001042:	f7ff ff65 	bl	8000f10 <QSPI_W25Q64JV_Write_NoCheck>
 8001046:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d11c      	bne.n	8001088 <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 800104e:	8abb      	ldrh	r3, [r7, #20]
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	429a      	cmp	r2, r3
 8001054:	d01a      	beq.n	800108c <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8001056:	69bb      	ldr	r3, [r7, #24]
 8001058:	3301      	adds	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 8001060:	8abb      	ldrh	r3, [r7, #20]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8001068:	8abb      	ldrh	r3, [r7, #20]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4413      	add	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 8001070:	8abb      	ldrh	r3, [r7, #20]
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8001078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800107c:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 800107e:	e795      	b.n	8000fac <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 8001080:	bf00      	nop
 8001082:	e004      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001084:	bf00      	nop
 8001086:	e002      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001088:	bf00      	nop
 800108a:	e000      	b.n	800108e <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 800108c:	bf00      	nop
    }
    return ret;
 800108e:	69fb      	ldr	r3, [r7, #28]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	240002e8 	.word	0x240002e8

0800109c <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b090      	sub	sp, #64	; 0x40
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	2238      	movs	r2, #56	; 0x38
 80010aa:	2100      	movs	r1, #0
 80010ac:	4618      	mov	r0, r3
 80010ae:	f014 f8ad 	bl	801520c <memset>
 80010b2:	2390      	movs	r3, #144	; 0x90
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
 80010c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010ce:	2302      	movs	r3, #2
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80010d2:	f107 0308 	add.w	r3, r7, #8
 80010d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <QSPI_W25Q64JV_DeviceID+0x74>)
 80010de:	f00a ff47 	bl	800bf70 <HAL_QSPI_Command>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ec:	e00c      	b.n	8001108 <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 80010ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4806      	ldr	r0, [pc, #24]	; (8001110 <QSPI_W25Q64JV_DeviceID+0x74>)
 80010f6:	f00b f82b 	bl	800c150 <HAL_QSPI_Receive>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001104:	e000      	b.n	8001108 <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	3740      	adds	r7, #64	; 0x40
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24001988 	.word	0x24001988

08001114 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800111c:	1d39      	adds	r1, r7, #4
 800111e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001122:	2201      	movs	r2, #1
 8001124:	4803      	ldr	r0, [pc, #12]	; (8001134 <__io_putchar+0x20>)
 8001126:	f011 f87d 	bl	8012224 <HAL_UART_Transmit>
  return ch;
 800112a:	687b      	ldr	r3, [r7, #4]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	24001590 	.word	0x24001590

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800113c:	f005 fe68 	bl	8006e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001140:	f000 f828 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001144:	f000 fe7a 	bl	8001e3c <MX_GPIO_Init>
  MX_DMA_Init();
 8001148:	f000 fe30 	bl	8001dac <MX_DMA_Init>
  MX_BDMA_Init();
 800114c:	f000 fe0e 	bl	8001d6c <MX_BDMA_Init>
  MX_UART8_Init();
 8001150:	f000 fada 	bl	8001708 <MX_UART8_Init>
  MX_UART4_Init();
 8001154:	f000 f9f4 	bl	8001540 <MX_UART4_Init>
  MX_QUADSPI_Init();
 8001158:	f000 fb22 	bl	80017a0 <MX_QUADSPI_Init>
  MX_ADC1_Init();
 800115c:	f000 f896 	bl	800128c <MX_ADC1_Init>
  MX_UART5_Init();
 8001160:	f000 fa3a 	bl	80015d8 <MX_UART5_Init>
  MX_UART7_Init();
 8001164:	f000 fa84 	bl	8001670 <MX_UART7_Init>
  MX_LPUART1_UART_Init();
 8001168:	f000 f99c 	bl	80014a4 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 800116c:	f000 fb44 	bl	80017f8 <MX_TIM2_Init>
  MX_TIM16_Init();
 8001170:	f000 fdd4 	bl	8001d1c <MX_TIM16_Init>
  MX_TIM3_Init();
 8001174:	f000 fbd8 	bl	8001928 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001178:	f000 fc58 	bl	8001a2c <MX_TIM5_Init>
  MX_TIM15_Init();
 800117c:	f000 fd2c 	bl	8001bd8 <MX_TIM15_Init>
  MX_IWDG1_Init();
 8001180:	f000 f972 	bl	8001468 <MX_IWDG1_Init>
  MX_TIM6_Init();
 8001184:	f000 fcf0 	bl	8001b68 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001188:	f003 fde0 	bl	8004d4c <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 800118c:	f003 fe0a 	bl	8004da4 <loop>
  {
 8001190:	e7fc      	b.n	800118c <main+0x54>
	...

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09c      	sub	sp, #112	; 0x70
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119e:	224c      	movs	r2, #76	; 0x4c
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f014 f832 	bl	801520c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2220      	movs	r2, #32
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f014 f82c 	bl	801520c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80011b4:	2002      	movs	r0, #2
 80011b6:	f00a fe2d 	bl	800be14 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ba:	2300      	movs	r3, #0
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <SystemClock_Config+0xf0>)
 80011c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <SystemClock_Config+0xf0>)
 80011c4:	f023 0301 	bic.w	r3, r3, #1
 80011c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <SystemClock_Config+0xf0>)
 80011cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	603b      	str	r3, [r7, #0]
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <SystemClock_Config+0xf4>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <SystemClock_Config+0xf4>)
 80011da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b29      	ldr	r3, [pc, #164]	; (8001288 <SystemClock_Config+0xf4>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011ec:	bf00      	nop
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <SystemClock_Config+0xf4>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011fa:	d1f8      	bne.n	80011ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011fc:	2309      	movs	r3, #9
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001200:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001206:	2301      	movs	r3, #1
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120e:	2302      	movs	r3, #2
 8001210:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001212:	2305      	movs	r3, #5
 8001214:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001216:	23a0      	movs	r3, #160	; 0xa0
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800121a:	2302      	movs	r3, #2
 800121c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800121e:	2302      	movs	r3, #2
 8001220:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001222:	2302      	movs	r3, #2
 8001224:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001226:	2308      	movs	r3, #8
 8001228:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800122a:	2300      	movs	r3, #0
 800122c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4618      	mov	r0, r3
 8001238:	f00b fa6a 	bl	800c710 <HAL_RCC_OscConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001242:	f000 fec1 	bl	8001fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001246:	233f      	movs	r3, #63	; 0x3f
 8001248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124a:	2303      	movs	r3, #3
 800124c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001252:	2308      	movs	r3, #8
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV4;
 8001256:	2350      	movs	r3, #80	; 0x50
 8001258:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800125a:	2350      	movs	r3, #80	; 0x50
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800125e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001264:	2350      	movs	r3, #80	; 0x50
 8001266:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f00b fea9 	bl	800cfc4 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001278:	f000 fea6 	bl	8001fc8 <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3770      	adds	r7, #112	; 0x70
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	58000400 	.word	0x58000400
 8001288:	58024800 	.word	0x58024800

0800128c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800129e:	463b      	mov	r3, r7
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	615a      	str	r2, [r3, #20]
 80012ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012b0:	4b63      	ldr	r3, [pc, #396]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012b2:	4a64      	ldr	r2, [pc, #400]	; (8001444 <MX_ADC1_Init+0x1b8>)
 80012b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80012b6:	4b62      	ldr	r3, [pc, #392]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012be:	4b60      	ldr	r3, [pc, #384]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ca:	4b5d      	ldr	r3, [pc, #372]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012cc:	2204      	movs	r2, #4
 80012ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012d6:	4b5a      	ldr	r3, [pc, #360]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012d8:	2201      	movs	r2, #1
 80012da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 80012dc:	4b58      	ldr	r3, [pc, #352]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012de:	2208      	movs	r2, #8
 80012e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012e2:	4b57      	ldr	r3, [pc, #348]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e8:	4b55      	ldr	r3, [pc, #340]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012ee:	4b54      	ldr	r3, [pc, #336]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012fa:	4b51      	ldr	r3, [pc, #324]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001306:	4b4e      	ldr	r3, [pc, #312]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800130e:	484c      	ldr	r0, [pc, #304]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001310:	f006 f848 	bl	80073a4 <HAL_ADC_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800131a:	f000 fe55 	bl	8001fc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	4845      	ldr	r0, [pc, #276]	; (8001440 <MX_ADC1_Init+0x1b4>)
 800132a:	f007 fad5 	bl	80088d8 <HAL_ADCEx_MultiModeConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001334:	f000 fe48 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001338:	4b43      	ldr	r3, [pc, #268]	; (8001448 <MX_ADC1_Init+0x1bc>)
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800133c:	2306      	movs	r3, #6
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 8001340:	2304      	movs	r3, #4
 8001342:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001344:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001348:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800134a:	2304      	movs	r3, #4
 800134c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4839      	ldr	r0, [pc, #228]	; (8001440 <MX_ADC1_Init+0x1b4>)
 800135c:	f006 fcea 	bl	8007d34 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001366:	f000 fe2f 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800136a:	4b38      	ldr	r3, [pc, #224]	; (800144c <MX_ADC1_Init+0x1c0>)
 800136c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800136e:	230c      	movs	r3, #12
 8001370:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001372:	463b      	mov	r3, r7
 8001374:	4619      	mov	r1, r3
 8001376:	4832      	ldr	r0, [pc, #200]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001378:	f006 fcdc 	bl	8007d34 <HAL_ADC_ConfigChannel>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001382:	f000 fe21 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MX_ADC1_Init+0x1c4>)
 8001388:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800138a:	2312      	movs	r3, #18
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	482b      	ldr	r0, [pc, #172]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001394:	f006 fcce 	bl	8007d34 <HAL_ADC_ConfigChannel>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800139e:	f000 fe13 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_ADC1_Init+0x1c8>)
 80013a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013a6:	2318      	movs	r3, #24
 80013a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	4824      	ldr	r0, [pc, #144]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80013b0:	f006 fcc0 	bl	8007d34 <HAL_ADC_ConfigChannel>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80013ba:	f000 fe05 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80013be:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_ADC1_Init+0x1cc>)
 80013c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80013c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481c      	ldr	r0, [pc, #112]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80013ce:	f006 fcb1 	bl	8007d34 <HAL_ADC_ConfigChannel>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80013d8:	f000 fdf6 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013dc:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_ADC1_Init+0x1d0>)
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80013e0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80013e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4815      	ldr	r0, [pc, #84]	; (8001440 <MX_ADC1_Init+0x1b4>)
 80013ec:	f006 fca2 	bl	8007d34 <HAL_ADC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80013f6:	f000 fde7 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_ADC1_Init+0x1d4>)
 80013fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013fe:	f44f 7386 	mov.w	r3, #268	; 0x10c
 8001402:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_ADC1_Init+0x1b4>)
 800140a:	f006 fc93 	bl	8007d34 <HAL_ADC_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001414:	f000 fdd8 	bl	8001fc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_ADC1_Init+0x1d8>)
 800141a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800141c:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001420:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	4619      	mov	r1, r3
 8001426:	4806      	ldr	r0, [pc, #24]	; (8001440 <MX_ADC1_Init+0x1b4>)
 8001428:	f006 fc84 	bl	8007d34 <HAL_ADC_ConfigChannel>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 8001432:	f000 fdc9 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001436:	bf00      	nop
 8001438:	3728      	adds	r7, #40	; 0x28
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	240012e8 	.word	0x240012e8
 8001444:	40022000 	.word	0x40022000
 8001448:	0c900008 	.word	0x0c900008
 800144c:	10c00010 	.word	0x10c00010
 8001450:	14f00020 	.word	0x14f00020
 8001454:	21800100 	.word	0x21800100
 8001458:	25b00200 	.word	0x25b00200
 800145c:	2a000400 	.word	0x2a000400
 8001460:	2e300800 	.word	0x2e300800
 8001464:	4b840000 	.word	0x4b840000

08001468 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <MX_IWDG1_Init+0x34>)
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <MX_IWDG1_Init+0x38>)
 8001470:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_IWDG1_Init+0x34>)
 8001474:	2203      	movs	r2, #3
 8001476:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 1999;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_IWDG1_Init+0x34>)
 800147a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800147e:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 1999;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_IWDG1_Init+0x34>)
 8001482:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001486:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_IWDG1_Init+0x34>)
 800148a:	f00a fc64 	bl	800bd56 <HAL_IWDG_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001494:	f000 fd98 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	240013c4 	.word	0x240013c4
 80014a0:	58004800 	.word	0x58004800

080014a4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014aa:	4a23      	ldr	r2, [pc, #140]	; (8001538 <MX_LPUART1_UART_Init+0x94>)
 80014ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <MX_LPUART1_UART_Init+0x98>)
 80014b2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014c8:	220c      	movs	r2, #12
 80014ca:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80014ea:	4812      	ldr	r0, [pc, #72]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014ec:	f010 fe4a 	bl	8012184 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80014f6:	f000 fd67 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	2100      	movs	r1, #0
 80014fc:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 80014fe:	f012 fe07 	bl	8014110 <HAL_UARTEx_SetTxFifoThreshold>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8001508:	f000 fd5e 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 8001510:	f012 fe3c 	bl	801418c <HAL_UARTEx_SetRxFifoThreshold>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 800151a:	f000 fd55 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_LPUART1_UART_Init+0x90>)
 8001520:	f012 fdbd 	bl	801409e <HAL_UARTEx_DisableFifoMode>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 800152a:	f000 fd4d 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240013d4 	.word	0x240013d4
 8001538:	58000c00 	.word	0x58000c00
 800153c:	00033324 	.word	0x00033324

08001540 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <MX_UART4_Init+0x90>)
 8001546:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <MX_UART4_Init+0x94>)
 8001548:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_UART4_Init+0x90>)
 800154c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001550:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <MX_UART4_Init+0x90>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <MX_UART4_Init+0x90>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800155e:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_UART4_Init+0x90>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <MX_UART4_Init+0x90>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_UART4_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_UART4_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_UART4_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_UART4_Init+0x90>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_UART4_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001588:	4811      	ldr	r0, [pc, #68]	; (80015d0 <MX_UART4_Init+0x90>)
 800158a:	f010 fdfb 	bl	8012184 <HAL_UART_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001594:	f000 fd18 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_UART4_Init+0x90>)
 800159c:	f012 fdb8 	bl	8014110 <HAL_UARTEx_SetTxFifoThreshold>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015a6:	f000 fd0f 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015aa:	2100      	movs	r1, #0
 80015ac:	4808      	ldr	r0, [pc, #32]	; (80015d0 <MX_UART4_Init+0x90>)
 80015ae:	f012 fded 	bl	801418c <HAL_UARTEx_SetRxFifoThreshold>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80015b8:	f000 fd06 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_UART4_Init+0x90>)
 80015be:	f012 fd6e 	bl	801409e <HAL_UARTEx_DisableFifoMode>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015c8:	f000 fcfe 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	24001468 	.word	0x24001468
 80015d4:	40004c00 	.word	0x40004c00

080015d8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80015dc:	4b22      	ldr	r3, [pc, #136]	; (8001668 <MX_UART5_Init+0x90>)
 80015de:	4a23      	ldr	r2, [pc, #140]	; (800166c <MX_UART5_Init+0x94>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <MX_UART5_Init+0x90>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b1f      	ldr	r3, [pc, #124]	; (8001668 <MX_UART5_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <MX_UART5_Init+0x90>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <MX_UART5_Init+0x90>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b1a      	ldr	r3, [pc, #104]	; (8001668 <MX_UART5_Init+0x90>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <MX_UART5_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <MX_UART5_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b16      	ldr	r3, [pc, #88]	; (8001668 <MX_UART5_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001614:	4b14      	ldr	r3, [pc, #80]	; (8001668 <MX_UART5_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161a:	4b13      	ldr	r3, [pc, #76]	; (8001668 <MX_UART5_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <MX_UART5_Init+0x90>)
 8001622:	f010 fdaf 	bl	8012184 <HAL_UART_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800162c:	f000 fccc 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <MX_UART5_Init+0x90>)
 8001634:	f012 fd6c 	bl	8014110 <HAL_UARTEx_SetTxFifoThreshold>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800163e:	f000 fcc3 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001642:	2100      	movs	r1, #0
 8001644:	4808      	ldr	r0, [pc, #32]	; (8001668 <MX_UART5_Init+0x90>)
 8001646:	f012 fda1 	bl	801418c <HAL_UARTEx_SetRxFifoThreshold>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001650:	f000 fcba 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <MX_UART5_Init+0x90>)
 8001656:	f012 fd22 	bl	801409e <HAL_UARTEx_DisableFifoMode>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001660:	f000 fcb2 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	240014fc 	.word	0x240014fc
 800166c:	40005000 	.word	0x40005000

08001670 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <MX_UART7_Init+0x90>)
 8001676:	4a23      	ldr	r2, [pc, #140]	; (8001704 <MX_UART7_Init+0x94>)
 8001678:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MX_UART7_Init+0x90>)
 800167c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001680:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_UART7_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_UART7_Init+0x90>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <MX_UART7_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001694:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_UART7_Init+0x90>)
 8001696:	220c      	movs	r2, #12
 8001698:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <MX_UART7_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_UART7_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a6:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_UART7_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_UART7_Init+0x90>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <MX_UART7_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80016b8:	4811      	ldr	r0, [pc, #68]	; (8001700 <MX_UART7_Init+0x90>)
 80016ba:	f010 fd63 	bl	8012184 <HAL_UART_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80016c4:	f000 fc80 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c8:	2100      	movs	r1, #0
 80016ca:	480d      	ldr	r0, [pc, #52]	; (8001700 <MX_UART7_Init+0x90>)
 80016cc:	f012 fd20 	bl	8014110 <HAL_UARTEx_SetTxFifoThreshold>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80016d6:	f000 fc77 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016da:	2100      	movs	r1, #0
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <MX_UART7_Init+0x90>)
 80016de:	f012 fd55 	bl	801418c <HAL_UARTEx_SetRxFifoThreshold>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80016e8:	f000 fc6e 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <MX_UART7_Init+0x90>)
 80016ee:	f012 fcd6 	bl	801409e <HAL_UARTEx_DisableFifoMode>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016f8:	f000 fc66 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	24001590 	.word	0x24001590
 8001704:	40007800 	.word	0x40007800

08001708 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800170c:	4b22      	ldr	r3, [pc, #136]	; (8001798 <MX_UART8_Init+0x90>)
 800170e:	4a23      	ldr	r2, [pc, #140]	; (800179c <MX_UART8_Init+0x94>)
 8001710:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_UART8_Init+0x90>)
 8001714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001718:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b1f      	ldr	r3, [pc, #124]	; (8001798 <MX_UART8_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <MX_UART8_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_UART8_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_UART8_Init+0x90>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_UART8_Init+0x90>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_UART8_Init+0x90>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_UART8_Init+0x90>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_UART8_Init+0x90>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <MX_UART8_Init+0x90>)
 800174c:	2200      	movs	r2, #0
 800174e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001750:	4811      	ldr	r0, [pc, #68]	; (8001798 <MX_UART8_Init+0x90>)
 8001752:	f010 fd17 	bl	8012184 <HAL_UART_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800175c:	f000 fc34 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	480d      	ldr	r0, [pc, #52]	; (8001798 <MX_UART8_Init+0x90>)
 8001764:	f012 fcd4 	bl	8014110 <HAL_UARTEx_SetTxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800176e:	f000 fc2b 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001772:	2100      	movs	r1, #0
 8001774:	4808      	ldr	r0, [pc, #32]	; (8001798 <MX_UART8_Init+0x90>)
 8001776:	f012 fd09 	bl	801418c <HAL_UARTEx_SetRxFifoThreshold>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8001780:	f000 fc22 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <MX_UART8_Init+0x90>)
 8001786:	f012 fc8a 	bl	801409e <HAL_UARTEx_DisableFifoMode>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8001790:	f000 fc1a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24001624 	.word	0x24001624
 800179c:	40007c00 	.word	0x40007c00

080017a0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <MX_QUADSPI_Init+0x54>)
 80017a8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017ac:	220a      	movs	r2, #10
 80017ae:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017b8:	2210      	movs	r2, #16
 80017ba:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017be:	2216      	movs	r2, #22
 80017c0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_QUADSPI_Init+0x50>)
 80017de:	f00a fb53 	bl	800be88 <HAL_QSPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80017e8:	f000 fbee 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	24001988 	.word	0x24001988
 80017f4:	52005000 	.word	0x52005000

080017f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	; 0x38
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
 800181e:	605a      	str	r2, [r3, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	611a      	str	r2, [r3, #16]
 8001826:	615a      	str	r2, [r3, #20]
 8001828:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <MX_TIM2_Init+0x12c>)
 800182c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001830:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001832:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001834:	2263      	movs	r2, #99	; 0x63
 8001836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <MX_TIM2_Init+0x12c>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800183e:	4b39      	ldr	r3, [pc, #228]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001840:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001844:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b37      	ldr	r3, [pc, #220]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184c:	4b35      	ldr	r3, [pc, #212]	; (8001924 <MX_TIM2_Init+0x12c>)
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001852:	4834      	ldr	r0, [pc, #208]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001854:	f00e fc40 	bl	80100d8 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800185e:	f000 fbb3 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001866:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800186c:	4619      	mov	r1, r3
 800186e:	482d      	ldr	r0, [pc, #180]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001870:	f00f fbf8 	bl	8011064 <HAL_TIM_ConfigClockSource>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800187a:	f000 fba5 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800187e:	4829      	ldr	r0, [pc, #164]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001880:	f00e fcfa 	bl	8010278 <HAL_TIM_PWM_Init>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800188a:	f000 fb9d 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001896:	f107 031c 	add.w	r3, r7, #28
 800189a:	4619      	mov	r1, r3
 800189c:	4821      	ldr	r0, [pc, #132]	; (8001924 <MX_TIM2_Init+0x12c>)
 800189e:	f010 fbc5 	bl	801202c <HAL_TIMEx_MasterConfigSynchronization>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018a8:	f000 fb8e 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	2360      	movs	r3, #96	; 0x60
 80018ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018bc:	463b      	mov	r3, r7
 80018be:	2200      	movs	r2, #0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <MX_TIM2_Init+0x12c>)
 80018c4:	f00f faba 	bl	8010e3c <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80018ce:	f000 fb7b 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018d2:	463b      	mov	r3, r7
 80018d4:	2204      	movs	r2, #4
 80018d6:	4619      	mov	r1, r3
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <MX_TIM2_Init+0x12c>)
 80018da:	f00f faaf 	bl	8010e3c <HAL_TIM_PWM_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80018e4:	f000 fb70 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018e8:	463b      	mov	r3, r7
 80018ea:	2208      	movs	r2, #8
 80018ec:	4619      	mov	r1, r3
 80018ee:	480d      	ldr	r0, [pc, #52]	; (8001924 <MX_TIM2_Init+0x12c>)
 80018f0:	f00f faa4 	bl	8010e3c <HAL_TIM_PWM_ConfigChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80018fa:	f000 fb65 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018fe:	463b      	mov	r3, r7
 8001900:	220c      	movs	r2, #12
 8001902:	4619      	mov	r1, r3
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001906:	f00f fa99 	bl	8010e3c <HAL_TIM_PWM_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8001910:	f000 fb5a 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001914:	4803      	ldr	r0, [pc, #12]	; (8001924 <MX_TIM2_Init+0x12c>)
 8001916:	f004 ff99 	bl	800684c <HAL_TIM_MspPostInit>

}
 800191a:	bf00      	nop
 800191c:	3738      	adds	r7, #56	; 0x38
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240019d4 	.word	0x240019d4

08001928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001948:	463b      	mov	r3, r7
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
 8001954:	611a      	str	r2, [r3, #16]
 8001956:	615a      	str	r2, [r3, #20]
 8001958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195a:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800195c:	4a32      	ldr	r2, [pc, #200]	; (8001a28 <MX_TIM3_Init+0x100>)
 800195e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001960:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001962:	2263      	movs	r2, #99	; 0x63
 8001964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800197a:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001980:	4828      	ldr	r0, [pc, #160]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001982:	f00e fba9 	bl	80100d8 <HAL_TIM_Base_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800198c:	f000 fb1c 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199a:	4619      	mov	r1, r3
 800199c:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_TIM3_Init+0xfc>)
 800199e:	f00f fb61 	bl	8011064 <HAL_TIM_ConfigClockSource>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80019a8:	f000 fb0e 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ac:	481d      	ldr	r0, [pc, #116]	; (8001a24 <MX_TIM3_Init+0xfc>)
 80019ae:	f00e fc63 	bl	8010278 <HAL_TIM_PWM_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019b8:	f000 fb06 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	4816      	ldr	r0, [pc, #88]	; (8001a24 <MX_TIM3_Init+0xfc>)
 80019cc:	f010 fb2e 	bl	801202c <HAL_TIMEx_MasterConfigSynchronization>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80019d6:	f000 faf7 	bl	8001fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019da:	2360      	movs	r3, #96	; 0x60
 80019dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	480c      	ldr	r0, [pc, #48]	; (8001a24 <MX_TIM3_Init+0xfc>)
 80019f2:	f00f fa23 	bl	8010e3c <HAL_TIM_PWM_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019fc:	f000 fae4 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a00:	463b      	mov	r3, r7
 8001a02:	2204      	movs	r2, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001a08:	f00f fa18 	bl	8010e3c <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001a12:	f000 fad9 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM3_Init+0xfc>)
 8001a18:	f004 ff18 	bl	800684c <HAL_TIM_MspPostInit>

}
 8001a1c:	bf00      	nop
 8001a1e:	3738      	adds	r7, #56	; 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	24001a20 	.word	0x24001a20
 8001a28:	40000400 	.word	0x40000400

08001a2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b090      	sub	sp, #64	; 0x40
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a68:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a6a:	4a3e      	ldr	r2, [pc, #248]	; (8001b64 <MX_TIM5_Init+0x138>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001a6e:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a70:	2263      	movs	r2, #99	; 0x63
 8001a72:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a7a:	4b39      	ldr	r3, [pc, #228]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a80:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b37      	ldr	r3, [pc, #220]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a8a:	2280      	movs	r2, #128	; 0x80
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a8e:	4834      	ldr	r0, [pc, #208]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001a90:	f00e fb22 	bl	80100d8 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001a9a:	f000 fa95 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	482d      	ldr	r0, [pc, #180]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001aac:	f00f fada 	bl	8011064 <HAL_TIM_ConfigClockSource>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001ab6:	f000 fa87 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001aba:	4829      	ldr	r0, [pc, #164]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001abc:	f00e fd4c 	bl	8010558 <HAL_TIM_IC_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001ac6:	f000 fa7f 	bl	8001fc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001aca:	2304      	movs	r3, #4
 8001acc:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001ace:	2350      	movs	r3, #80	; 0x50
 8001ad0:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001ade:	f107 031c 	add.w	r3, r7, #28
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	481e      	ldr	r0, [pc, #120]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001ae6:	f00f fbb5 	bl	8011254 <HAL_TIM_SlaveConfigSynchro>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001af0:	f000 fa6a 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001af8:	2301      	movs	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	2200      	movs	r2, #0
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4814      	ldr	r0, [pc, #80]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001b0e:	f00f f8f8 	bl	8010d02 <HAL_TIM_IC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001b18:	f000 fa56 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001b20:	2302      	movs	r3, #2
 8001b22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	2204      	movs	r2, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001b2e:	f00f f8e8 	bl	8010d02 <HAL_TIM_IC_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001b38:	f000 fa46 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b44:	463b      	mov	r3, r7
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_TIM5_Init+0x134>)
 8001b4a:	f010 fa6f 	bl	801202c <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001b54:	f000 fa38 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	3740      	adds	r7, #64	; 0x40
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	24001a6c 	.word	0x24001a6c
 8001b64:	40000c00 	.word	0x40000c00

08001b68 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b7a:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <MX_TIM6_Init+0x6c>)
 8001b7c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b80:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b84:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b8c:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b92:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001b9c:	f00e fa9c 	bl	80100d8 <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ba6:	f000 fa0f 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4806      	ldr	r0, [pc, #24]	; (8001bd0 <MX_TIM6_Init+0x68>)
 8001bb8:	f010 fa38 	bl	801202c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001bc2:	f000 fa01 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	24001ab8 	.word	0x24001ab8
 8001bd4:	40001000 	.word	0x40001000

08001bd8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b090      	sub	sp, #64	; 0x40
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001c14:	4b3f      	ldr	r3, [pc, #252]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c16:	4a40      	ldr	r2, [pc, #256]	; (8001d18 <MX_TIM15_Init+0x140>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c1c:	2263      	movs	r2, #99	; 0x63
 8001c1e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b3c      	ldr	r3, [pc, #240]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b39      	ldr	r3, [pc, #228]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001c34:	4b37      	ldr	r3, [pc, #220]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c3a:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c3c:	2280      	movs	r2, #128	; 0x80
 8001c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001c40:	4834      	ldr	r0, [pc, #208]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c42:	f00e fa49 	bl	80100d8 <HAL_TIM_Base_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001c4c:	f000 f9bc 	bl	8001fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c54:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	482d      	ldr	r0, [pc, #180]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c5e:	f00f fa01 	bl	8011064 <HAL_TIM_ConfigClockSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c68:	f000 f9ae 	bl	8001fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001c6c:	4829      	ldr	r0, [pc, #164]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c6e:	f00e fc73 	bl	8010558 <HAL_TIM_IC_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001c78:	f000 f9a6 	bl	8001fc8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c80:	2350      	movs	r3, #80	; 0x50
 8001c82:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001c90:	f107 031c 	add.w	r3, r7, #28
 8001c94:	4619      	mov	r1, r3
 8001c96:	481f      	ldr	r0, [pc, #124]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001c98:	f00f fadc 	bl	8011254 <HAL_TIM_SlaveConfigSynchro>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001ca2:	f000 f991 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001caa:	2301      	movs	r3, #1
 8001cac:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cb6:	f107 030c 	add.w	r3, r7, #12
 8001cba:	2200      	movs	r2, #0
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4815      	ldr	r0, [pc, #84]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001cc0:	f00f f81f 	bl	8010d02 <HAL_TIM_IC_ConfigChannel>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001cca:	f000 f97d 	bl	8001fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001ce0:	f00f f80f 	bl	8010d02 <HAL_TIM_IC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001cea:	f000 f96d 	bl	8001fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001cf6:	463b      	mov	r3, r7
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	; (8001d14 <MX_TIM15_Init+0x13c>)
 8001cfc:	f010 f996 	bl	801202c <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001d06:	f000 f95f 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3740      	adds	r7, #64	; 0x40
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	24001b04 	.word	0x24001b04
 8001d18:	40014000 	.word	0x40014000

08001d1c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d22:	4a11      	ldr	r2, [pc, #68]	; (8001d68 <MX_TIM16_Init+0x4c>)
 8001d24:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d28:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d2c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_TIM16_Init+0x48>)
 8001d50:	f00e f9c2 	bl	80100d8 <HAL_TIM_Base_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001d5a:	f000 f935 	bl	8001fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	24001b50 	.word	0x24001b50
 8001d68:	40014400 	.word	0x40014400

08001d6c <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <MX_BDMA_Init+0x3c>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <MX_BDMA_Init+0x3c>)
 8001d7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_BDMA_Init+0x3c>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	2081      	movs	r0, #129	; 0x81
 8001d96:	f006 ff58 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001d9a:	2081      	movs	r0, #129	; 0x81
 8001d9c:	f006 ff6f 	bl	8008c7e <HAL_NVIC_EnableIRQ>

}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	58024400 	.word	0x58024400

08001dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <MX_DMA_Init+0x8c>)
 8001db4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <MX_DMA_Init+0x8c>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <MX_DMA_Init+0x8c>)
 8001dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	200b      	movs	r0, #11
 8001dd6:	f006 ff38 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001dda:	200b      	movs	r0, #11
 8001ddc:	f006 ff4f 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	200c      	movs	r0, #12
 8001de6:	f006 ff30 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001dea:	200c      	movs	r0, #12
 8001dec:	f006 ff47 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	200d      	movs	r0, #13
 8001df6:	f006 ff28 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001dfa:	200d      	movs	r0, #13
 8001dfc:	f006 ff3f 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	200e      	movs	r0, #14
 8001e06:	f006 ff20 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e0a:	200e      	movs	r0, #14
 8001e0c:	f006 ff37 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2100      	movs	r1, #0
 8001e14:	200f      	movs	r0, #15
 8001e16:	f006 ff18 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f006 ff2f 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	2010      	movs	r0, #16
 8001e26:	f006 ff10 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e2a:	2010      	movs	r0, #16
 8001e2c:	f006 ff27 	bl	8008c7e <HAL_NVIC_EnableIRQ>

}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	58024400 	.word	0x58024400

08001e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	; 0x30
 8001e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	605a      	str	r2, [r3, #4]
 8001e4c:	609a      	str	r2, [r3, #8]
 8001e4e:	60da      	str	r2, [r3, #12]
 8001e50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e52:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a57      	ldr	r2, [pc, #348]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e5a:	f043 0310 	orr.w	r3, r3, #16
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8e:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a48      	ldr	r2, [pc, #288]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	4a41      	ldr	r2, [pc, #260]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebc:	4b3e      	ldr	r3, [pc, #248]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eca:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ed2:	f043 0302 	orr.w	r3, r3, #2
 8001ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eda:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <MX_GPIO_Init+0x17c>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2168      	movs	r1, #104	; 0x68
 8001f0a:	482c      	ldr	r0, [pc, #176]	; (8001fbc <MX_GPIO_Init+0x180>)
 8001f0c:	f009 fed6 	bl	800bcbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001f10:	2200      	movs	r2, #0
 8001f12:	2120      	movs	r1, #32
 8001f14:	482a      	ldr	r0, [pc, #168]	; (8001fc0 <MX_GPIO_Init+0x184>)
 8001f16:	f009 fed1 	bl	800bcbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4825      	ldr	r0, [pc, #148]	; (8001fc4 <MX_GPIO_Init+0x188>)
 8001f2e:	f009 fcfd 	bl	800b92c <HAL_GPIO_Init>

  /*Configure GPIO pin : PID_MODE_INPUT_Pin */
  GPIO_InitStruct.Pin = PID_MODE_INPUT_Pin;
 8001f32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001f38:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PID_MODE_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <MX_GPIO_Init+0x188>)
 8001f4a:	f009 fcef 	bl	800b92c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8001f4e:	2368      	movs	r3, #104	; 0x68
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	4815      	ldr	r0, [pc, #84]	; (8001fbc <MX_GPIO_Init+0x180>)
 8001f66:	f009 fce1 	bl	800b92c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480f      	ldr	r0, [pc, #60]	; (8001fc0 <MX_GPIO_Init+0x184>)
 8001f82:	f009 fcd3 	bl	800b92c <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 031c 	add.w	r3, r7, #28
 8001f96:	4619      	mov	r1, r3
 8001f98:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <MX_GPIO_Init+0x184>)
 8001f9a:	f009 fcc7 	bl	800b92c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	2017      	movs	r0, #23
 8001fa4:	f006 fe51 	bl	8008c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fa8:	2017      	movs	r0, #23
 8001faa:	f006 fe68 	bl	8008c7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fae:	bf00      	nop
 8001fb0:	3730      	adds	r7, #48	; 0x30
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	58024400 	.word	0x58024400
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	58020400 	.word	0x58020400
 8001fc4:	58021000 	.word	0x58021000

08001fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fcc:	b672      	cpsid	i
}
 8001fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <Error_Handler+0x8>
	...

08001fd4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd8:	f3bf 8f4f 	dsb	sy
}
 8001fdc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <__NVIC_SystemReset+0x24>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fe6:	4904      	ldr	r1, [pc, #16]	; (8001ff8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_SystemReset+0x28>)
 8001fea:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001fec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fee:	f3bf 8f4f 	dsb	sy
}
 8001ff2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <__NVIC_SystemReset+0x20>
 8001ff8:	e000ed00 	.word	0xe000ed00
 8001ffc:	05fa0004 	.word	0x05fa0004

08002000 <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	bfb8      	it	lt
 800200e:	425b      	neglt	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4618      	mov	r0, r3
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <_ZN3ros3MsgC1Ev+0x1c>)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	08017120 	.word	0x08017120

08002060 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
      data()
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffe8 	bl	8002040 <_ZN3ros3MsgC1Ev>
 8002070:	4a06      	ldr	r2, [pc, #24]	; (800208c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3304      	adds	r3, #4
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ffce 	bl	800201c <_ZN3ros4TimeC1Ev>
    {
    }
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	08017108 	.word	0x08017108

08002090 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6859      	ldr	r1, [r3, #4]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0a19      	lsrs	r1, r3, #8
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	4413      	add	r3, r2
 80020ba:	b2ca      	uxtb	r2, r1
 80020bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	0c19      	lsrs	r1, r3, #16
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3302      	adds	r3, #2
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	4413      	add	r3, r2
 80020cc:	b2ca      	uxtb	r2, r1
 80020ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0e19      	lsrs	r1, r3, #24
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3303      	adds	r3, #3
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	b2ca      	uxtb	r2, r1
 80020e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3304      	adds	r3, #4
 80020e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6899      	ldr	r1, [r3, #8]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	b2ca      	uxtb	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a19      	lsrs	r1, r3, #8
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	3301      	adds	r3, #1
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4413      	add	r3, r2
 8002104:	b2ca      	uxtb	r2, r1
 8002106:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	0c19      	lsrs	r1, r3, #16
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3302      	adds	r3, #2
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	b2ca      	uxtb	r2, r1
 8002118:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0e19      	lsrs	r1, r3, #24
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3303      	adds	r3, #3
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	3304      	adds	r3, #4
 8002130:	60fb      	str	r3, [r7, #12]
      return offset;
 8002132:	68fb      	ldr	r3, [r7, #12]
    }
 8002134:	4618      	mov	r0, r3
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4413      	add	r3, r2
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	461a      	mov	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3301      	adds	r3, #1
 8002164:	6839      	ldr	r1, [r7, #0]
 8002166:	440b      	add	r3, r1
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	3302      	adds	r3, #2
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	440b      	add	r3, r1
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3303      	adds	r3, #3
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	440b      	add	r3, r1
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	061b      	lsls	r3, r3, #24
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3304      	adds	r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	4413      	add	r3, r2
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3301      	adds	r3, #1
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	440b      	add	r3, r1
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3302      	adds	r3, #2
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	440b      	add	r3, r1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3303      	adds	r3, #3
 80021e6:	6839      	ldr	r1, [r7, #0]
 80021e8:	440b      	add	r3, r1
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	061b      	lsls	r3, r3, #24
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
     return offset;
 80021fa:	68fb      	ldr	r3, [r7, #12]
    }
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	4b03      	ldr	r3, [pc, #12]	; (8002220 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	08016d58 	.word	0x08016d58

08002224 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	08016d68 	.word	0x08016d68

08002240 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fef8 	bl	8002040 <_ZN3ros3MsgC1Ev>
 8002250:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002260:	609a      	str	r2, [r3, #8]
      message_type(""),
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002266:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800226c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	615a      	str	r2, [r3, #20]
    {
    }
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	080170f0 	.word	0x080170f0
 8002284:	08016d8c 	.word	0x08016d8c

08002288 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	8899      	ldrh	r1, [r3, #4]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	0a1b      	lsrs	r3, r3, #8
 80022aa:	b299      	uxth	r1, r3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	3301      	adds	r3, #1
 80022b0:	683a      	ldr	r2, [r7, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	b2ca      	uxtb	r2, r1
 80022b6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	3302      	adds	r3, #2
 80022bc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7fe f85c 	bl	8000380 <strlen>
 80022c8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	69b9      	ldr	r1, [r7, #24]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fde8 	bl	8004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3304      	adds	r3, #4
 80022dc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	18d0      	adds	r0, r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4619      	mov	r1, r3
 80022ec:	f013 f861 	bl	80153b2 <memcpy>
      offset += length_topic_name;
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	4413      	add	r3, r2
 80022f6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f83f 	bl	8000380 <strlen>
 8002302:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	4413      	add	r3, r2
 800230a:	6979      	ldr	r1, [r7, #20]
 800230c:	4618      	mov	r0, r3
 800230e:	f002 fdcb 	bl	8004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	18d0      	adds	r0, r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	4619      	mov	r1, r3
 8002326:	f013 f844 	bl	80153b2 <memcpy>
      offset += length_message_type;
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	4413      	add	r3, r2
 8002330:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f822 	bl	8000380 <strlen>
 800233c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	4413      	add	r3, r2
 8002344:	6939      	ldr	r1, [r7, #16]
 8002346:	4618      	mov	r0, r3
 8002348:	f002 fdae 	bl	8004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	3304      	adds	r3, #4
 8002350:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	18d0      	adds	r0, r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	4619      	mov	r1, r3
 8002360:	f013 f827 	bl	80153b2 <memcpy>
      offset += length_md5sum;
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4413      	add	r3, r2
 800236a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	695b      	ldr	r3, [r3, #20]
 8002370:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002372:	68f9      	ldr	r1, [r7, #12]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	4413      	add	r3, r2
 800237a:	b2ca      	uxtb	r2, r1
 800237c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	0a19      	lsrs	r1, r3, #8
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	b2ca      	uxtb	r2, r1
 800238c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	0c19      	lsrs	r1, r3, #16
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3302      	adds	r3, #2
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4413      	add	r3, r2
 800239a:	b2ca      	uxtb	r2, r1
 800239c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	0e19      	lsrs	r1, r3, #24
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	3303      	adds	r3, #3
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	b2ca      	uxtb	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3304      	adds	r3, #4
 80023b2:	61fb      	str	r3, [r7, #28]
      return offset;
 80023b4:	69fb      	ldr	r3, [r7, #28]
    }
 80023b6:	4618      	mov	r0, r3
 80023b8:	3720      	adds	r7, #32
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80023be:	b580      	push	{r7, lr}
 80023c0:	b08a      	sub	sp, #40	; 0x28
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	889b      	ldrh	r3, [r3, #4]
 80023de:	b21a      	sxth	r2, r3
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	3301      	adds	r3, #1
 80023e4:	6839      	ldr	r1, [r7, #0]
 80023e6:	440b      	add	r3, r1
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	4313      	orrs	r3, r2
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	3302      	adds	r3, #2
 80023fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	441a      	add	r2, r3
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f002 fd6b 	bl	8004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	3304      	adds	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	627b      	str	r3, [r7, #36]	; 0x24
 800241a:	e00b      	b.n	8002434 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	441a      	add	r2, r3
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	3b01      	subs	r3, #1
 8002426:	6839      	ldr	r1, [r7, #0]
 8002428:	440b      	add	r3, r1
 800242a:	7812      	ldrb	r2, [r2, #0]
 800242c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	3301      	adds	r3, #1
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	4413      	add	r3, r2
 800243a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243c:	429a      	cmp	r2, r3
 800243e:	d3ed      	bcc.n	800241c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	4413      	add	r3, r2
 8002446:	3b01      	subs	r3, #1
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3b01      	subs	r3, #1
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	441a      	add	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	4413      	add	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	441a      	add	r2, r3
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fd38 	bl	8004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	3304      	adds	r3, #4
 800247a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	623b      	str	r3, [r7, #32]
 8002480:	e00b      	b.n	800249a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	441a      	add	r2, r3
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	3b01      	subs	r3, #1
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	440b      	add	r3, r1
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	3301      	adds	r3, #1
 8002498:	623b      	str	r3, [r7, #32]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d3ed      	bcc.n	8002482 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4413      	add	r3, r2
 80024ac:	3b01      	subs	r3, #1
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	441a      	add	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	4413      	add	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	441a      	add	r2, r3
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	4611      	mov	r1, r2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f002 fd05 	bl	8004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	3304      	adds	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	61fb      	str	r3, [r7, #28]
 80024e6:	e00b      	b.n	8002500 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	441a      	add	r2, r3
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	6839      	ldr	r1, [r7, #0]
 80024f4:	440b      	add	r3, r1
 80024f6:	7812      	ldrb	r2, [r2, #0]
 80024f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3301      	adds	r3, #1
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4413      	add	r3, r2
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	429a      	cmp	r2, r3
 800250a:	d3ed      	bcc.n	80024e8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4413      	add	r3, r2
 8002512:	3b01      	subs	r3, #1
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	4413      	add	r3, r2
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3b01      	subs	r3, #1
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	441a      	add	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	6839      	ldr	r1, [r7, #0]
 800253a:	440a      	add	r2, r1
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	3301      	adds	r3, #1
 8002548:	6839      	ldr	r1, [r7, #0]
 800254a:	440b      	add	r3, r1
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	4313      	orrs	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	3302      	adds	r3, #2
 800255a:	6839      	ldr	r1, [r7, #0]
 800255c:	440b      	add	r3, r1
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	4313      	orrs	r3, r2
 8002564:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	3303      	adds	r3, #3
 800256c:	6839      	ldr	r1, [r7, #0]
 800256e:	440b      	add	r3, r1
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	061b      	lsls	r3, r3, #24
 8002574:	4313      	orrs	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	3304      	adds	r3, #4
 8002582:	61bb      	str	r3, [r7, #24]
     return offset;
 8002584:	69bb      	ldr	r3, [r7, #24]
    }
 8002586:	4618      	mov	r0, r3
 8002588:	3728      	adds	r7, #40	; 0x28
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	08016d90 	.word	0x08016d90

080025ac <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	4b03      	ldr	r3, [pc, #12]	; (80025c4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	08016dac 	.word	0x08016dac

080025c8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fd34 	bl	8002040 <_ZN3ros3MsgC1Ev>
 80025d8:	4a06      	ldr	r2, [pc, #24]	; (80025f4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	601a      	str	r2, [r3, #0]
      level(0),
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	711a      	strb	r2, [r3, #4]
      msg("")
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80025e8:	609a      	str	r2, [r3, #8]
    {
    }
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	080170d8 	.word	0x080170d8
 80025f8:	08016d8c 	.word	0x08016d8c

080025fc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	7912      	ldrb	r2, [r2, #4]
 8002614:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3301      	adds	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd fead 	bl	8000380 <strlen>
 8002626:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	4413      	add	r3, r2
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	4618      	mov	r0, r3
 8002632:	f002 fc39 	bl	8004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3304      	adds	r3, #4
 800263a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	18d0      	adds	r0, r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	4619      	mov	r1, r3
 800264a:	f012 feb2 	bl	80153b2 <memcpy>
      offset += length_msg;
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
      return offset;
 8002656:	68fb      	ldr	r3, [r7, #12]
    }
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	4413      	add	r3, r2
 8002674:	781a      	ldrb	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	3301      	adds	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	441a      	add	r2, r3
 8002686:	f107 030c 	add.w	r3, r7, #12
 800268a:	4611      	mov	r1, r2
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fc2a 	bl	8004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	3304      	adds	r3, #4
 8002696:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	617b      	str	r3, [r7, #20]
 800269c:	e00b      	b.n	80026b6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	441a      	add	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	440b      	add	r3, r1
 80026ac:	7812      	ldrb	r2, [r2, #0]
 80026ae:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3301      	adds	r3, #1
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4413      	add	r3, r2
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d3ed      	bcc.n	800269e <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	3b01      	subs	r3, #1
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	2200      	movs	r2, #0
 80026d0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	3b01      	subs	r3, #1
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
     return offset;
 80026e6:	693b      	ldr	r3, [r7, #16]
    }
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	4b03      	ldr	r3, [pc, #12]	; (8002708 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	08016dd0 	.word	0x08016dd0

0800270c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	4b03      	ldr	r3, [pc, #12]	; (8002724 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002716:	4618      	mov	r0, r3
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	08016de4 	.word	0x08016de4

08002728 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fc84 	bl	8002040 <_ZN3ros3MsgC1Ev>
 8002738:	4a11      	ldr	r2, [pc, #68]	; (8002780 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	605a      	str	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4618      	mov	r0, r3
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	080170c0 	.word	0x080170c0

08002784 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002784:	b580      	push	{r7, lr}
 8002786:	b08a      	sub	sp, #40	; 0x28
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6859      	ldr	r1, [r3, #4]
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	4413      	add	r3, r2
 800279c:	b2ca      	uxtb	r2, r1
 800279e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	0a19      	lsrs	r1, r3, #8
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3301      	adds	r3, #1
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	b2ca      	uxtb	r2, r1
 80027b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	0c19      	lsrs	r1, r3, #16
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	3302      	adds	r3, #2
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	b2ca      	uxtb	r2, r1
 80027c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0e19      	lsrs	r1, r3, #24
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3303      	adds	r3, #3
 80027ce:	683a      	ldr	r2, [r7, #0]
 80027d0:	4413      	add	r3, r2
 80027d2:	b2ca      	uxtb	r2, r1
 80027d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	3304      	adds	r3, #4
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027dc:	2300      	movs	r3, #0
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	e02a      	b.n	8002838 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	6a3b      	ldr	r3, [r7, #32]
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80027f0:	6939      	ldr	r1, [r7, #16]
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	4413      	add	r3, r2
 80027f8:	b2ca      	uxtb	r2, r1
 80027fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	0a19      	lsrs	r1, r3, #8
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	3301      	adds	r3, #1
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	b2ca      	uxtb	r2, r1
 800280a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	0c19      	lsrs	r1, r3, #16
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	3302      	adds	r3, #2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	b2ca      	uxtb	r2, r1
 800281a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	0e19      	lsrs	r1, r3, #24
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	3303      	adds	r3, #3
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	4413      	add	r3, r2
 8002828:	b2ca      	uxtb	r2, r1
 800282a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	3304      	adds	r3, #4
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	3301      	adds	r3, #1
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	429a      	cmp	r2, r3
 8002840:	d3cf      	bcc.n	80027e2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6919      	ldr	r1, [r3, #16]
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	0a19      	lsrs	r1, r3, #8
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	3301      	adds	r3, #1
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	4413      	add	r3, r2
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	0c19      	lsrs	r1, r3, #16
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	3302      	adds	r3, #2
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	4413      	add	r3, r2
 8002870:	b2ca      	uxtb	r2, r1
 8002872:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	0e19      	lsrs	r1, r3, #24
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	3303      	adds	r3, #3
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	4413      	add	r3, r2
 8002882:	b2ca      	uxtb	r2, r1
 8002884:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	3304      	adds	r3, #4
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	e02a      	b.n	80028e8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699a      	ldr	r2, [r3, #24]
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80028a0:	68f9      	ldr	r1, [r7, #12]
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	4413      	add	r3, r2
 80028a8:	b2ca      	uxtb	r2, r1
 80028aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	0a19      	lsrs	r1, r3, #8
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	3301      	adds	r3, #1
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	b2ca      	uxtb	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	0c19      	lsrs	r1, r3, #16
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3302      	adds	r3, #2
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	b2ca      	uxtb	r2, r1
 80028ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	0e19      	lsrs	r1, r3, #24
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3303      	adds	r3, #3
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	b2ca      	uxtb	r2, r1
 80028da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	3304      	adds	r3, #4
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61fb      	str	r3, [r7, #28]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d3cf      	bcc.n	8002892 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69d9      	ldr	r1, [r3, #28]
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	b2ca      	uxtb	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	0a19      	lsrs	r1, r3, #8
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	4413      	add	r3, r2
 800290e:	b2ca      	uxtb	r2, r1
 8002910:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	0c19      	lsrs	r1, r3, #16
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	3302      	adds	r3, #2
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	4413      	add	r3, r2
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	0e19      	lsrs	r1, r3, #24
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	3303      	adds	r3, #3
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	4413      	add	r3, r2
 8002932:	b2ca      	uxtb	r2, r1
 8002934:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	3304      	adds	r3, #4
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	e027      	b.n	8002992 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fd16 	bl	8000380 <strlen>
 8002954:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4413      	add	r3, r2
 800295c:	6979      	ldr	r1, [r7, #20]
 800295e:	4618      	mov	r0, r3
 8002960:	f002 faa2 	bl	8004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3304      	adds	r3, #4
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	18d0      	adds	r0, r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4619      	mov	r1, r3
 8002980:	f012 fd17 	bl	80153b2 <memcpy>
      offset += length_stringsi;
 8002984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	4413      	add	r3, r2
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	3301      	adds	r3, #1
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	429a      	cmp	r2, r3
 800299a:	d3d2      	bcc.n	8002942 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800299e:	4618      	mov	r0, r3
 80029a0:	3728      	adds	r7, #40	; 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08e      	sub	sp, #56	; 0x38
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	4413      	add	r3, r2
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	3301      	adds	r3, #1
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	4413      	add	r3, r2
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	021b      	lsls	r3, r3, #8
 80029ca:	6a3a      	ldr	r2, [r7, #32]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029d2:	3302      	adds	r3, #2
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	041b      	lsls	r3, r3, #16
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	4313      	orrs	r3, r2
 80029e0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e4:	3303      	adds	r3, #3
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	4413      	add	r3, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f6:	3304      	adds	r3, #4
 80029f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	6a3a      	ldr	r2, [r7, #32]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d90a      	bls.n	8002a1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68da      	ldr	r2, [r3, #12]
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	f011 fd80 	bl	8014514 <realloc>
 8002a14:	4602      	mov	r2, r0
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a3a      	ldr	r2, [r7, #32]
 8002a1e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a20:	2300      	movs	r3, #0
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
 8002a24:	e035      	b.n	8002a92 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2e:	6839      	ldr	r1, [r7, #0]
 8002a30:	440a      	add	r2, r1
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	440b      	add	r3, r1
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4e:	3302      	adds	r3, #2
 8002a50:	6839      	ldr	r1, [r7, #0]
 8002a52:	440b      	add	r3, r1
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a60:	3303      	adds	r3, #3
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	440b      	add	r3, r1
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a76:	3304      	adds	r3, #4
 8002a78:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	6812      	ldr	r2, [r2, #0]
 8002a8a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	3301      	adds	r3, #1
 8002a90:	633b      	str	r3, [r7, #48]	; 0x30
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d3c4      	bcc.n	8002a26 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	021b      	lsls	r3, r3, #8
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aba:	3302      	adds	r3, #2
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	3303      	adds	r3, #3
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ade:	3304      	adds	r3, #4
 8002ae0:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d90a      	bls.n	8002b02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f011 fd0c 	bl	8014514 <realloc>
 8002afc:	4602      	mov	r2, r0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69fa      	ldr	r2, [r7, #28]
 8002b06:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b08:	2300      	movs	r3, #0
 8002b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b0c:	e035      	b.n	8002b7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b16:	6839      	ldr	r1, [r7, #0]
 8002b18:	440a      	add	r2, r1
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	3301      	adds	r3, #1
 8002b26:	6839      	ldr	r1, [r7, #0]
 8002b28:	440b      	add	r3, r1
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	021b      	lsls	r3, r3, #8
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	3302      	adds	r3, #2
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	440b      	add	r3, r1
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b48:	3303      	adds	r3, #3
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	440b      	add	r3, r1
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5e:	3304      	adds	r3, #4
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	3214      	adds	r2, #20
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	3301      	adds	r3, #1
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d3c4      	bcc.n	8002b0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	4413      	add	r3, r2
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	3301      	adds	r3, #1
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	041b      	lsls	r3, r3, #16
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	4413      	add	r3, r2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	061b      	lsls	r3, r3, #24
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	3304      	adds	r3, #4
 8002bc8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d90a      	bls.n	8002bea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4610      	mov	r0, r2
 8002be0:	f011 fc98 	bl	8014514 <realloc>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf4:	e03e      	b.n	8002c74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 f96f 	bl	8004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	e00b      	b.n	8002c2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	441a      	add	r2, r3
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	440b      	add	r3, r1
 8002c22:	7812      	ldrb	r2, [r2, #0]
 8002c24:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	3301      	adds	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d3ed      	bcc.n	8002c14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	2200      	movs	r2, #0
 8002c46:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	441a      	add	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4413      	add	r3, r2
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	3220      	adds	r2, #32
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c70:	3301      	adds	r3, #1
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d3bb      	bcc.n	8002bf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002c80:	4618      	mov	r0, r3
 8002c82:	3738      	adds	r7, #56	; 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	4b03      	ldr	r3, [pc, #12]	; (8002ca0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	08016ffc 	.word	0x08016ffc

08002ca4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	08016e08 	.word	0x08016e08

08002cc0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68d8      	ldr	r0, [r3, #12]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6891      	ldr	r1, [r2, #8]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	4798      	blx	r3
 8002d0c:	4603      	mov	r3, r0
  };
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
  }
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
	...

08002d30 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d077      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a48      	ldr	r2, [pc, #288]	; (8002e74 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d06f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a45      	ldr	r2, [pc, #276]	; (8002e78 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d067      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a42      	ldr	r2, [pc, #264]	; (8002e7c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d05f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a3f      	ldr	r2, [pc, #252]	; (8002e80 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d057      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a3c      	ldr	r2, [pc, #240]	; (8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a39      	ldr	r2, [pc, #228]	; (8002e88 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d047      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d03f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d037      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a30      	ldr	r2, [pc, #192]	; (8002e94 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d02f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a2d      	ldr	r2, [pc, #180]	; (8002e98 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d027      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d01f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a27      	ldr	r2, [pc, #156]	; (8002ea0 <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d017      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a24      	ldr	r2, [pc, #144]	; (8002ea4 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00f      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	; (8002ea8 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a1e      	ldr	r2, [pc, #120]	; (8002eac <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d10a      	bne.n	8002e4e <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4c:	e009      	b.n	8002e62 <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40020010 	.word	0x40020010
 8002e74:	40020028 	.word	0x40020028
 8002e78:	40020040 	.word	0x40020040
 8002e7c:	40020058 	.word	0x40020058
 8002e80:	40020070 	.word	0x40020070
 8002e84:	40020088 	.word	0x40020088
 8002e88:	400200a0 	.word	0x400200a0
 8002e8c:	400200b8 	.word	0x400200b8
 8002e90:	40020410 	.word	0x40020410
 8002e94:	40020428 	.word	0x40020428
 8002e98:	40020440 	.word	0x40020440
 8002e9c:	40020458 	.word	0x40020458
 8002ea0:	40020470 	.word	0x40020470
 8002ea4:	40020488 	.word	0x40020488
 8002ea8:	400204a0 	.word	0x400204a0
 8002eac:	400204b8 	.word	0x400204b8

08002eb0 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a0a      	ldr	r2, [pc, #40]	; (8002ee4 <_ZN13STM32HardwareC1Ev+0x34>)
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	24001468 	.word	0x24001468

08002ee8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f804 	bl	8002efe <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	4619      	mov	r1, r3
 8002f14:	f00f fa94 	bl	8012440 <HAL_UART_Receive_DMA>
    }
 8002f18:	bf00      	nop
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f20:	b590      	push	{r4, r7, lr}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f2c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff fefb 	bl	8002d30 <_ZN13STM32Hardware10getRdmaIndEv>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	429c      	cmp	r4, r3
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f50:	1c59      	adds	r1, r3, #1
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	791b      	ldrb	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002f70:	68fb      	ldr	r3, [r7, #12]
    }
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd90      	pop	{r4, r7, pc}
	...

08002f7c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d108      	bne.n	8002fa2 <_ZN13STM32Hardware5flushEv+0x26>
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <_ZN13STM32Hardware5flushEv+0x26>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <_ZN13STM32Hardware5flushEv+0x28>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d03f      	beq.n	8003028 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d031      	beq.n	8003022 <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d20a      	bcs.n	8002fe4 <_ZN13STM32Hardware5flushEv+0x68>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <_ZN13STM32Hardware5flushEv+0x76>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ffe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	89fa      	ldrh	r2, [r7, #14]
 8003008:	4619      	mov	r1, r3
 800300a:	f00f f999 	bl	8012340 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003014:	89fb      	ldrh	r3, [r7, #14]
 8003016:	4413      	add	r3, r2
 8003018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8003022:	4b03      	ldr	r3, [pc, #12]	; (8003030 <_ZN13STM32Hardware5flushEv+0xb4>)
 8003024:	2200      	movs	r2, #0
 8003026:	701a      	strb	r2, [r3, #0]
      }
    }
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	24001b9c 	.word	0x24001b9c

08003034 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
      int n = length;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800304a:	bfa8      	it	ge
 800304c:	f44f 7300 	movge.w	r3, #512	; 0x200
 8003050:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8003058:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	4293      	cmp	r3, r2
 8003060:	bf28      	it	cs
 8003062:	4613      	movcs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800306c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4413      	add	r3, r2
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f012 f99a 	bl	80153b2 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	4413      	add	r3, r2
 8003088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	429a      	cmp	r2, r3
 8003098:	d00b      	beq.n	80030b2 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	68ba      	ldr	r2, [r7, #8]
 80030a4:	18d1      	adds	r1, r2, r3
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	f012 f980 	bl	80153b2 <memcpy>
      }

      flush();
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7ff ff62 	bl	8002f7c <_ZN13STM32Hardware5flushEv>
    }
 80030b8:	bf00      	nop
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	f003 ff28 	bl	8006f1c <HAL_GetTick>
 80030cc:	4603      	mov	r3, r0
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe ffac 	bl	8002040 <_ZN3ros3MsgC1Ev>
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	601a      	str	r2, [r3, #0]
      label(""),
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a07      	ldr	r2, [pc, #28]	; (8003110 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 80030f2:	605a      	str	r2, [r3, #4]
      size(0),
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
      stride(0)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]
    {
    }
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	0801707c 	.word	0x0801707c
 8003110:	08016d8c 	.word	0x08016d8c

08003114 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f92a 	bl	8000380 <strlen>
 800312c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	4413      	add	r3, r2
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f001 feb6 	bl	8004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	18d0      	adds	r0, r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	4619      	mov	r1, r3
 8003150:	f012 f92f 	bl	80153b2 <memcpy>
      offset += length_label;
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	4413      	add	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6899      	ldr	r1, [r3, #8]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	4413      	add	r3, r2
 8003166:	b2ca      	uxtb	r2, r1
 8003168:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0a19      	lsrs	r1, r3, #8
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	4413      	add	r3, r2
 8003178:	b2ca      	uxtb	r2, r1
 800317a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	0c19      	lsrs	r1, r3, #16
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3302      	adds	r3, #2
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	4413      	add	r3, r2
 800318a:	b2ca      	uxtb	r2, r1
 800318c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	0e19      	lsrs	r1, r3, #24
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3303      	adds	r3, #3
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	4413      	add	r3, r2
 800319c:	b2ca      	uxtb	r2, r1
 800319e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	3304      	adds	r3, #4
 80031a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68d9      	ldr	r1, [r3, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	b2ca      	uxtb	r2, r1
 80031b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0a19      	lsrs	r1, r3, #8
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4413      	add	r3, r2
 80031c2:	b2ca      	uxtb	r2, r1
 80031c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	0c19      	lsrs	r1, r3, #16
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3302      	adds	r3, #2
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	b2ca      	uxtb	r2, r1
 80031d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	0e19      	lsrs	r1, r3, #24
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	3303      	adds	r3, #3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	4413      	add	r3, r2
 80031e6:	b2ca      	uxtb	r2, r1
 80031e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	3304      	adds	r3, #4
 80031ee:	60fb      	str	r3, [r7, #12]
      return offset;
 80031f0:	68fb      	ldr	r3, [r7, #12]
    }
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b086      	sub	sp, #24
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	441a      	add	r2, r3
 800320e:	f107 030c 	add.w	r3, r7, #12
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fe66 	bl	8004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3304      	adds	r3, #4
 800321e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	617b      	str	r3, [r7, #20]
 8003224:	e00b      	b.n	800323e <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	441a      	add	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	3b01      	subs	r3, #1
 8003230:	6839      	ldr	r1, [r7, #0]
 8003232:	440b      	add	r3, r1
 8003234:	7812      	ldrb	r2, [r2, #0]
 8003236:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	3301      	adds	r3, #1
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	429a      	cmp	r2, r3
 8003248:	d3ed      	bcc.n	8003226 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4413      	add	r3, r2
 8003250:	3b01      	subs	r3, #1
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	3b01      	subs	r3, #1
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	441a      	add	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	605a      	str	r2, [r3, #4]
      offset += length_label;
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4413      	add	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	4413      	add	r3, r2
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	3301      	adds	r3, #1
 8003284:	6839      	ldr	r1, [r7, #0]
 8003286:	440b      	add	r3, r1
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	431a      	orrs	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	3302      	adds	r3, #2
 800329a:	6839      	ldr	r1, [r7, #0]
 800329c:	440b      	add	r3, r1
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	041b      	lsls	r3, r3, #16
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	3303      	adds	r3, #3
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	440b      	add	r3, r1
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	061b      	lsls	r3, r3, #24
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3304      	adds	r3, #4
 80032c2:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	3301      	adds	r3, #1
 80032da:	6839      	ldr	r1, [r7, #0]
 80032dc:	440b      	add	r3, r1
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	021b      	lsls	r3, r3, #8
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	3302      	adds	r3, #2
 80032f0:	6839      	ldr	r1, [r7, #0]
 80032f2:	440b      	add	r3, r1
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	041b      	lsls	r3, r3, #16
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3303      	adds	r3, #3
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	440b      	add	r3, r1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	3304      	adds	r3, #4
 8003318:	613b      	str	r3, [r7, #16]
     return offset;
 800331a:	693b      	ldr	r3, [r7, #16]
    }
 800331c:	4618      	mov	r0, r3
 800331e:	3718      	adds	r7, #24
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	4b03      	ldr	r3, [pc, #12]	; (800333c <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 800332e:	4618      	mov	r0, r3
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	08016e2c 	.word	0x08016e2c

08003340 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	08016e4c 	.word	0x08016e4c

0800335c <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fe6a 	bl	8002040 <_ZN3ros3MsgC1Ev>
 800336c:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3308      	adds	r3, #8
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff feab 	bl	80030d8 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
    {
    }
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	08017064 	.word	0x08017064

0800339c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	b2ca      	uxtb	r2, r1
 80033b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	0a19      	lsrs	r1, r3, #8
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3301      	adds	r3, #1
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	4413      	add	r3, r2
 80033c6:	b2ca      	uxtb	r2, r1
 80033c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	0c19      	lsrs	r1, r3, #16
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	3302      	adds	r3, #2
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	b2ca      	uxtb	r2, r1
 80033da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	0e19      	lsrs	r1, r3, #24
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	3303      	adds	r3, #3
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	b2ca      	uxtb	r2, r1
 80033ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3304      	adds	r3, #4
 80033f2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	e017      	b.n	800342a <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	18d0      	adds	r0, r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	4413      	add	r3, r2
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	440a      	add	r2, r1
 8003418:	4611      	mov	r1, r2
 800341a:	4798      	blx	r3
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	3301      	adds	r3, #1
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	429a      	cmp	r2, r3
 8003432:	d3e2      	bcc.n	80033fa <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69d9      	ldr	r1, [r3, #28]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	b2ca      	uxtb	r2, r1
 8003440:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	0a19      	lsrs	r1, r3, #8
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	3301      	adds	r3, #1
 800344c:	683a      	ldr	r2, [r7, #0]
 800344e:	4413      	add	r3, r2
 8003450:	b2ca      	uxtb	r2, r1
 8003452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	0c19      	lsrs	r1, r3, #16
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3302      	adds	r3, #2
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	4413      	add	r3, r2
 8003462:	b2ca      	uxtb	r2, r1
 8003464:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	0e19      	lsrs	r1, r3, #24
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3303      	adds	r3, #3
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	4413      	add	r3, r2
 8003474:	b2ca      	uxtb	r2, r1
 8003476:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	3304      	adds	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
      return offset;
 800347e:	68fb      	ldr	r3, [r7, #12]
    }
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	4413      	add	r3, r2
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3302      	adds	r3, #2
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	041b      	lsls	r3, r3, #16
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	3303      	adds	r3, #3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	4413      	add	r3, r2
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3304      	adds	r3, #4
 80034da:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90a      	bls.n	80034fc <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f011 f80f 	bl	8014514 <realloc>
 80034f6:	4602      	mov	r2, r0
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	e01a      	b.n	800353e <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f103 0008 	add.w	r0, r3, #8
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4413      	add	r3, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f7ff fe70 	bl	80031fa <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	4413      	add	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	18d0      	adds	r0, r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3308      	adds	r3, #8
 8003530:	2210      	movs	r2, #16
 8003532:	4619      	mov	r1, r3
 8003534:	f011 ff3d 	bl	80153b2 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	3301      	adds	r3, #1
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	429a      	cmp	r2, r3
 8003546:	d3df      	bcc.n	8003508 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4413      	add	r3, r2
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69da      	ldr	r2, [r3, #28]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	3301      	adds	r3, #1
 800355e:	6839      	ldr	r1, [r7, #0]
 8003560:	440b      	add	r3, r1
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3302      	adds	r3, #2
 8003574:	6839      	ldr	r1, [r7, #0]
 8003576:	440b      	add	r3, r1
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	041b      	lsls	r3, r3, #16
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69da      	ldr	r2, [r3, #28]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3303      	adds	r3, #3
 800358a:	6839      	ldr	r1, [r7, #0]
 800358c:	440b      	add	r3, r1
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	3304      	adds	r3, #4
 800359c:	617b      	str	r3, [r7, #20]
     return offset;
 800359e:	697b      	ldr	r3, [r7, #20]
    }
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	4b03      	ldr	r3, [pc, #12]	; (80035c0 <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	08016e70 	.word	0x08016e70

080035c4 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	08016e8c 	.word	0x08016e8c

080035e0 <_ZN8std_msgs15UInt8MultiArrayC1Ev>:
      uint32_t data_length;
      typedef uint8_t _data_type;
      _data_type st_data;
      _data_type * data;

    UInt8MultiArray():
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe fd28 	bl	8002040 <_ZN3ros3MsgC1Ev>
 80035f0:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <_ZN8std_msgs15UInt8MultiArrayC1Ev+0x40>)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	601a      	str	r2, [r3, #0]
      layout(),
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff feae 	bl	800335c <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	625a      	str	r2, [r3, #36]	; 0x24
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	0801704c 	.word	0x0801704c

08003624 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
      offset += this->layout.serialize(outbuffer + offset);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	1d18      	adds	r0, r3, #4
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	4619      	mov	r1, r3
 800363e:	f7ff fead 	bl	800339c <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 8003642:	4602      	mov	r2, r0
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	4413      	add	r3, r2
 8003654:	b2ca      	uxtb	r2, r1
 8003656:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	0a19      	lsrs	r1, r3, #8
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	4413      	add	r3, r2
 8003666:	b2ca      	uxtb	r2, r1
 8003668:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	0c19      	lsrs	r1, r3, #16
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	3302      	adds	r3, #2
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	4413      	add	r3, r2
 8003678:	b2ca      	uxtb	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	0e19      	lsrs	r1, r3, #24
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3303      	adds	r3, #3
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	4413      	add	r3, r2
 800368a:	b2ca      	uxtb	r2, r1
 800368c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	3304      	adds	r3, #4
 8003692:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 8003694:	2300      	movs	r3, #0
 8003696:	60bb      	str	r3, [r7, #8]
 8003698:	e00e      	b.n	80036b8 <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x94>
      *(outbuffer + offset + 0) = (this->data[i] >> (8 * 0)) & 0xFF;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	441a      	add	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	440b      	add	r3, r1
 80036a8:	7812      	ldrb	r2, [r2, #0]
 80036aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3301      	adds	r3, #1
 80036b0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < data_length; i++){
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	3301      	adds	r3, #1
 80036b6:	60bb      	str	r3, [r7, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d3eb      	bcc.n	800369a <_ZNK8std_msgs15UInt8MultiArray9serializeEPh+0x76>
      }
      return offset;
 80036c2:	68fb      	ldr	r3, [r7, #12]
    }
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80036d6:	2300      	movs	r3, #0
 80036d8:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	1d18      	adds	r0, r3, #4
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7ff fecf 	bl	8003488 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 80036ea:	4602      	mov	r2, r0
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	4413      	add	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	4413      	add	r3, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	3301      	adds	r3, #1
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	3302      	adds	r3, #2
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	4413      	add	r3, r2
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4313      	orrs	r3, r2
 800371e:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	3303      	adds	r3, #3
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	4413      	add	r3, r2
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	3304      	adds	r3, #4
 8003736:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	429a      	cmp	r2, r3
 8003740:	d908      	bls.n	8003754 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x88>
        this->data = (uint8_t*)realloc(this->data, data_lengthT * sizeof(uint8_t));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	4618      	mov	r0, r3
 800374a:	f010 fee3 	bl	8014514 <realloc>
 800374e:	4602      	mov	r2, r0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	e014      	b.n	800378a <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0xbe>
      this->st_data =  ((uint8_t) (*(inbuffer + offset)));
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4413      	add	r3, r2
 8003766:	781a      	ldrb	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(uint8_t));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	4413      	add	r3, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	3228      	adds	r2, #40	; 0x28
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	701a      	strb	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	3301      	adds	r3, #1
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	429a      	cmp	r2, r3
 8003792:	d3e5      	bcc.n	8003760 <_ZN8std_msgs15UInt8MultiArray11deserializeEPh+0x94>
      }
     return offset;
 8003794:	697b      	ldr	r3, [r7, #20]
    }
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8MultiArray"; };
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <_ZN8std_msgs15UInt8MultiArray7getTypeEv+0x18>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	08016eb0 	.word	0x08016eb0

080037bc <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "82373f1612381bb6ee473b5cd6f5d89c"; };
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <_ZN8std_msgs15UInt8MultiArray6getMD5Ev+0x18>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	08016ecc 	.word	0x08016ecc

080037d8 <_ZL8DWT_Initv>:
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80037dc:	4b08      	ldr	r3, [pc, #32]	; (8003800 <_ZL8DWT_Initv+0x28>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	4a07      	ldr	r2, [pc, #28]	; (8003800 <_ZL8DWT_Initv+0x28>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80037e8:	4b06      	ldr	r3, [pc, #24]	; (8003804 <_ZL8DWT_Initv+0x2c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a05      	ldr	r2, [pc, #20]	; (8003804 <_ZL8DWT_Initv+0x2c>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	6013      	str	r3, [r2, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000edf0 	.word	0xe000edf0
 8003804:	e0001000 	.word	0xe0001000

08003808 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	080170ac 	.word	0x080170ac

08003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ffe8 	bl	8003808 <_ZN3ros15NodeHandleBase_C1Ev>
 8003838:	4a48      	ldr	r2, [pc, #288]	; (800395c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev+0x134>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3304      	adds	r3, #4
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fb34 	bl	8002eb0 <_ZN13STM32HardwareC1Ev>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800386e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f011 fcc9 	bl	801520c <memset>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003880:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003888:	2100      	movs	r1, #0
 800388a:	4618      	mov	r0, r3
 800388c:	f011 fcbe 	bl	801520c <memset>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003896:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800389a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f011 fcb3 	bl	801520c <memset>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038ac:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 80038b0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f011 fca8 	bl	801520c <memset>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038c2:	461a      	mov	r2, r3
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038d0:	461a      	mov	r2, r3
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038de:	461a      	mov	r2, r3
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038ec:	461a      	mov	r2, r3
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80038fa:	461a      	mov	r2, r3
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003914:	461a      	mov	r2, r3
 8003916:	2300      	movs	r3, #0
 8003918:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003930:	461a      	mov	r2, r3
 8003932:	2300      	movs	r3, #0
 8003934:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	f242 736c 	movw	r3, #10092	; 0x276c
 800394a:	4413      	add	r3, r2
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe feeb 	bl	8002728 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	08017038 	.word	0x08017038

08003960 <_Z13read_ble_dataPh>:

PID<float> *pid_ptr;


//read esc data from ble
HAL_StatusTypeDef read_ble_data(uint8_t* data){
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003968:	4b4a      	ldr	r3, [pc, #296]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	73fb      	strb	r3, [r7, #15]
 800396e:	e01e      	b.n	80039ae <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2bfe      	cmp	r3, #254	; 0xfe
 800397a:	d115      	bne.n	80039a8 <_Z13read_ble_dataPh+0x48>
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	3301      	adds	r3, #1
 8003980:	425a      	negs	r2, r3
 8003982:	f003 031f 	and.w	r3, r3, #31
 8003986:	f002 021f 	and.w	r2, r2, #31
 800398a:	bf58      	it	pl
 800398c:	4253      	negpl	r3, r2
 800398e:	461a      	mov	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4413      	add	r3, r2
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d106      	bne.n	80039a8 <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 80039a4:	701a      	strb	r2, [r3, #0]
			break;
 80039a6:	e009      	b.n	80039bc <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	3301      	adds	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	f103 021f 	add.w	r2, r3, #31
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	dad9      	bge.n	8003970 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 80039bc:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	3302      	adds	r3, #2
 80039c2:	425a      	negs	r2, r3
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	f002 021f 	and.w	r2, r2, #31
 80039cc:	bf58      	it	pl
 80039ce:	4253      	negpl	r3, r2
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4413      	add	r3, r2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <_Z13read_ble_dataPh+0x80>
 80039dc:	2301      	movs	r3, #1
 80039de:	e129      	b.n	8003c34 <_Z13read_ble_dataPh+0x2d4>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 80039e0:	4b2c      	ldr	r3, [pc, #176]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	3303      	adds	r3, #3
 80039e6:	425a      	negs	r2, r3
 80039e8:	f003 031f 	and.w	r3, r3, #31
 80039ec:	f002 021f 	and.w	r2, r2, #31
 80039f0:	bf58      	it	pl
 80039f2:	4253      	negpl	r3, r2
 80039f4:	461a      	mov	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d001      	beq.n	8003a04 <_Z13read_ble_dataPh+0xa4>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e117      	b.n	8003c34 <_Z13read_ble_dataPh+0x2d4>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003a04:	4b23      	ldr	r3, [pc, #140]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	425a      	negs	r2, r3
 8003a0c:	f003 031f 	and.w	r3, r3, #31
 8003a10:	f002 021f 	and.w	r2, r2, #31
 8003a14:	bf58      	it	pl
 8003a16:	4253      	negpl	r3, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b30      	cmp	r3, #48	; 0x30
 8003a22:	d001      	beq.n	8003a28 <_Z13read_ble_dataPh+0xc8>
 8003a24:	2301      	movs	r3, #1
 8003a26:	e105      	b.n	8003c34 <_Z13read_ble_dataPh+0x2d4>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	3305      	adds	r3, #5
 8003a2e:	425a      	negs	r2, r3
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	f002 021f 	and.w	r2, r2, #31
 8003a38:	bf58      	it	pl
 8003a3a:	4253      	negpl	r3, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b5c      	cmp	r3, #92	; 0x5c
 8003a46:	d001      	beq.n	8003a4c <_Z13read_ble_dataPh+0xec>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0f3      	b.n	8003c34 <_Z13read_ble_dataPh+0x2d4>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	3306      	adds	r3, #6
 8003a52:	425a      	negs	r2, r3
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	f002 021f 	and.w	r2, r2, #31
 8003a5c:	bf58      	it	pl
 8003a5e:	4253      	negpl	r3, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b17      	cmp	r3, #23
 8003a6a:	d001      	beq.n	8003a70 <_Z13read_ble_dataPh+0x110>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0e1      	b.n	8003c34 <_Z13read_ble_dataPh+0x2d4>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 8003a70:	4b08      	ldr	r3, [pc, #32]	; (8003a94 <_Z13read_ble_dataPh+0x134>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	3307      	adds	r3, #7
 8003a76:	425a      	negs	r2, r3
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	f002 021f 	and.w	r2, r2, #31
 8003a80:	bf58      	it	pl
 8003a82:	4253      	negpl	r3, r2
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b06      	cmp	r3, #6
 8003a8e:	d003      	beq.n	8003a98 <_Z13read_ble_dataPh+0x138>
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0cf      	b.n	8003c34 <_Z13read_ble_dataPh+0x2d4>
 8003a94:	24004548 	.word	0x24004548

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003a98:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	3309      	adds	r3, #9
 8003a9e:	425a      	negs	r2, r3
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	f002 021f 	and.w	r2, r2, #31
 8003aa8:	bf58      	it	pl
 8003aaa:	4253      	negpl	r3, r2
 8003aac:	461a      	mov	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b21a      	sxth	r2, r3
 8003ab6:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003ab8:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003aba:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	330b      	adds	r3, #11
 8003ac0:	425a      	negs	r2, r3
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	f002 021f 	and.w	r2, r2, #31
 8003aca:	bf58      	it	pl
 8003acc:	4253      	negpl	r3, r2
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d008      	beq.n	8003aec <_Z13read_ble_dataPh+0x18c>
 8003ada:	4b5a      	ldr	r3, [pc, #360]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	425b      	negs	r3, r3
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	b21a      	sxth	r2, r3
 8003ae8:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003aea:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003aec:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	330e      	adds	r3, #14
 8003af2:	425a      	negs	r2, r3
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	f002 021f 	and.w	r2, r2, #31
 8003afc:	bf58      	it	pl
 8003afe:	4253      	negpl	r3, r2
 8003b00:	461a      	mov	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	021b      	lsls	r3, r3, #8
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	330d      	adds	r3, #13
 8003b12:	425a      	negs	r2, r3
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	f002 021f 	and.w	r2, r2, #31
 8003b1c:	bf58      	it	pl
 8003b1e:	4253      	negpl	r3, r2
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	ea41 0203 	orr.w	r2, r1, r3
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b43      	ldr	r3, [pc, #268]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003b38:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 8003b3a:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	330f      	adds	r3, #15
 8003b40:	425a      	negs	r2, r3
 8003b42:	f003 031f 	and.w	r3, r3, #31
 8003b46:	f002 021f 	and.w	r2, r2, #31
 8003b4a:	bf58      	it	pl
 8003b4c:	4253      	negpl	r3, r2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4413      	add	r3, r2
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b5e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003b62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b66:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003b68:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 8003b6c:	4b34      	ldr	r3, [pc, #208]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	3310      	adds	r3, #16
 8003b72:	425a      	negs	r2, r3
 8003b74:	f003 031f 	and.w	r3, r3, #31
 8003b78:	f002 021f 	and.w	r2, r2, #31
 8003b7c:	bf58      	it	pl
 8003b7e:	4253      	negpl	r3, r2
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	3311      	adds	r3, #17
 8003b96:	425a      	negs	r2, r3
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	f002 021f 	and.w	r2, r2, #31
 8003ba0:	bf58      	it	pl
 8003ba2:	4253      	negpl	r3, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003bb6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003bba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003bbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003bc4:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	3312      	adds	r3, #18
 8003bce:	425a      	negs	r2, r3
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	f002 021f 	and.w	r2, r2, #31
 8003bd8:	bf58      	it	pl
 8003bda:	4253      	negpl	r3, r2
 8003bdc:	461a      	mov	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4b15      	ldr	r3, [pc, #84]	; (8003c40 <_Z13read_ble_dataPh+0x2e0>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	3313      	adds	r3, #19
 8003bf0:	4259      	negs	r1, r3
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	f001 011f 	and.w	r1, r1, #31
 8003bfa:	bf58      	it	pl
 8003bfc:	424b      	negpl	r3, r1
 8003bfe:	4619      	mov	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	440b      	add	r3, r1
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003c0e:	821a      	strh	r2, [r3, #16]

	current_esc_speed = esc_sensor.rpm/parameters.esc_rpm_to_speed_ratio;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <_Z13read_ble_dataPh+0x2e4>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	ee07 3a90 	vmov	s15, r3
 8003c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <_Z13read_ble_dataPh+0x2e8>)
 8003c1e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c26:	4b09      	ldr	r3, [pc, #36]	; (8003c4c <_Z13read_ble_dataPh+0x2ec>)
 8003c28:	edc3 7a00 	vstr	s15, [r3]
	esc_receive_indicator = 0;
 8003c2c:	4b08      	ldr	r3, [pc, #32]	; (8003c50 <_Z13read_ble_dataPh+0x2f0>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	24004548 	.word	0x24004548
 8003c44:	24004378 	.word	0x24004378
 8003c48:	24000004 	.word	0x24000004
 8003c4c:	24004420 	.word	0x24004420
 8003c50:	240043ad 	.word	0x240043ad

08003c54 <_Z15read_speed_dataPh>:

//read speed data from f103
//the first data are "acsr", then the fifth is the integer part of speed1, and the sixth is the decimal part of speed1..
HAL_StatusTypeDef read_speed_data(uint8_t* data){
 8003c54:	b5b0      	push	{r4, r5, r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e01d      	b.n	8003c9e <_Z15read_speed_dataPh+0x4a>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b41      	cmp	r3, #65	; 0x41
 8003c6c:	d114      	bne.n	8003c98 <_Z15read_speed_dataPh+0x44>
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	3301      	adds	r3, #1
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b43      	cmp	r3, #67	; 0x43
 8003c7a:	d10d      	bne.n	8003c98 <_Z15read_speed_dataPh+0x44>
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	3302      	adds	r3, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b53      	cmp	r3, #83	; 0x53
 8003c88:	d106      	bne.n	8003c98 <_Z15read_speed_dataPh+0x44>
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	3303      	adds	r3, #3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4413      	add	r3, r2
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	2b52      	cmp	r3, #82	; 0x52
 8003c96:	d006      	beq.n	8003ca6 <_Z15read_speed_dataPh+0x52>
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	73fb      	strb	r3, [r7, #15]
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	2b1f      	cmp	r3, #31
 8003ca2:	d9de      	bls.n	8003c62 <_Z15read_speed_dataPh+0xe>
 8003ca4:	e000      	b.n	8003ca8 <_Z15read_speed_dataPh+0x54>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003ca6:	bf00      	nop
	}
	if(i==2*SPEED_PIN_COUNT)return HAL_ERROR;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	2b20      	cmp	r3, #32
 8003cac:	d101      	bne.n	8003cb2 <_Z15read_speed_dataPh+0x5e>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e02b      	b.n	8003d0a <_Z15read_speed_dataPh+0xb6>

	if(i==0){
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10f      	bne.n	8003cd8 <_Z15read_speed_dataPh+0x84>
		memcpy(speed,&data[4],2*SPEED_PIN_COUNT);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4a15      	ldr	r2, [pc, #84]	; (8003d14 <_Z15read_speed_dataPh+0xc0>)
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	461d      	mov	r5, r3
 8003cc2:	6828      	ldr	r0, [r5, #0]
 8003cc4:	6869      	ldr	r1, [r5, #4]
 8003cc6:	68aa      	ldr	r2, [r5, #8]
 8003cc8:	68eb      	ldr	r3, [r5, #12]
 8003cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ccc:	6928      	ldr	r0, [r5, #16]
 8003cce:	6969      	ldr	r1, [r5, #20]
 8003cd0:	69aa      	ldr	r2, [r5, #24]
 8003cd2:	69eb      	ldr	r3, [r5, #28]
 8003cd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cd6:	e014      	b.n	8003d02 <_Z15read_speed_dataPh+0xae>
	}else{
		memcpy(speed,&data[i+4],2*SPEED_PIN_COUNT-i);
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	3304      	adds	r3, #4
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	18d1      	adds	r1, r2, r3
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	f1c3 0320 	rsb	r3, r3, #32
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	480a      	ldr	r0, [pc, #40]	; (8003d14 <_Z15read_speed_dataPh+0xc0>)
 8003cea:	f011 fb62 	bl	80153b2 <memcpy>
		memcpy(&speed[2*SPEED_PIN_COUNT-i],data,i);
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
 8003cf0:	f1c3 0320 	rsb	r3, r3, #32
 8003cf4:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <_Z15read_speed_dataPh+0xc0>)
 8003cf6:	4413      	add	r3, r2
 8003cf8:	7bfa      	ldrb	r2, [r7, #15]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f011 fb58 	bl	80153b2 <memcpy>
	}
	f103_receive_indicator = 0;
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <_Z15read_speed_dataPh+0xc4>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bdb0      	pop	{r4, r5, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	240043d4 	.word	0x240043d4
 8003d18:	240043ae 	.word	0x240043ae

08003d1c <HAL_UART_TxCpltCallback>:

//ros structure required
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <HAL_UART_TxCpltCallback+0x28>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d106      	bne.n	8003d3a <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003d2c:	4806      	ldr	r0, [pc, #24]	; (8003d48 <HAL_UART_TxCpltCallback+0x2c>)
 8003d2e:	f001 f900 	bl	8004f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff f921 	bl	8002f7c <_ZN13STM32Hardware5flushEv>
	}
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	24001468 	.word	0x24001468
 8003d48:	24001ba0 	.word	0x24001ba0

08003d4c <HAL_UART_RxCpltCallback>:

//uart data receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart4.Instance){
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b34      	ldr	r3, [pc, #208]	; (8003e2c <HAL_UART_RxCpltCallback+0xe0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d107      	bne.n	8003d70 <HAL_UART_RxCpltCallback+0x24>
		nh.getHardware()->reset_rbuf();
 8003d60:	4833      	ldr	r0, [pc, #204]	; (8003e30 <HAL_UART_RxCpltCallback+0xe4>)
 8003d62:	f001 f8e6 	bl	8004f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f8c8 	bl	8002efe <_ZN13STM32Hardware10reset_rbufEv>

			jy901_data_length = i;
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
		}
	}
}
 8003d6e:	e059      	b.n	8003e24 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_esc.Instance){
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_UART_RxCpltCallback+0xe8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d103      	bne.n	8003d84 <HAL_UART_RxCpltCallback+0x38>
		read_ble_data(esc_receive);
 8003d7c:	482e      	ldr	r0, [pc, #184]	; (8003e38 <HAL_UART_RxCpltCallback+0xec>)
 8003d7e:	f7ff fdef 	bl	8003960 <_Z13read_ble_dataPh>
}
 8003d82:	e04f      	b.n	8003e24 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_f103.Instance){
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b2c      	ldr	r3, [pc, #176]	; (8003e3c <HAL_UART_RxCpltCallback+0xf0>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d103      	bne.n	8003d98 <HAL_UART_RxCpltCallback+0x4c>
		read_speed_data(speed_receive);
 8003d90:	482b      	ldr	r0, [pc, #172]	; (8003e40 <HAL_UART_RxCpltCallback+0xf4>)
 8003d92:	f7ff ff5f 	bl	8003c54 <_Z15read_speed_dataPh>
}
 8003d96:	e045      	b.n	8003e24 <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_imu.Instance){
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_UART_RxCpltCallback+0xf8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d13f      	bne.n	8003e24 <HAL_UART_RxCpltCallback+0xd8>
		if(jy901_data[0]==0x55 && jy901_data_length==11){
 8003da4:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <HAL_UART_RxCpltCallback+0xfc>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b55      	cmp	r3, #85	; 0x55
 8003daa:	d110      	bne.n	8003dce <HAL_UART_RxCpltCallback+0x82>
 8003dac:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b0b      	cmp	r3, #11
 8003db2:	d10c      	bne.n	8003dce <HAL_UART_RxCpltCallback+0x82>
			jy901.parseData(jy901_data);
 8003db4:	4924      	ldr	r1, [pc, #144]	; (8003e48 <HAL_UART_RxCpltCallback+0xfc>)
 8003db6:	4826      	ldr	r0, [pc, #152]	; (8003e50 <HAL_UART_RxCpltCallback+0x104>)
 8003db8:	f7fc fc94 	bl	80006e4 <_ZN6CJY9019parseDataEPh>
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8003dbc:	4b23      	ldr	r3, [pc, #140]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4920      	ldr	r1, [pc, #128]	; (8003e48 <HAL_UART_RxCpltCallback+0xfc>)
 8003dc6:	481f      	ldr	r0, [pc, #124]	; (8003e44 <HAL_UART_RxCpltCallback+0xf8>)
 8003dc8:	f00e fb3a 	bl	8012440 <HAL_UART_Receive_DMA>
}
 8003dcc:	e02a      	b.n	8003e24 <HAL_UART_RxCpltCallback+0xd8>
		}else if(jy901_data_length!=11){
 8003dce:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b0b      	cmp	r3, #11
 8003dd4:	d00b      	beq.n	8003dee <HAL_UART_RxCpltCallback+0xa2>
			jy901_data_length = 11;
 8003dd6:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003dd8:	220b      	movs	r2, #11
 8003dda:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	4918      	ldr	r1, [pc, #96]	; (8003e48 <HAL_UART_RxCpltCallback+0xfc>)
 8003de6:	4817      	ldr	r0, [pc, #92]	; (8003e44 <HAL_UART_RxCpltCallback+0xf8>)
 8003de8:	f00e fb2a 	bl	8012440 <HAL_UART_Receive_DMA>
}
 8003dec:	e01a      	b.n	8003e24 <HAL_UART_RxCpltCallback+0xd8>
			uint8_t i = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	73fb      	strb	r3, [r7, #15]
			for(;i<11;++i){
 8003df2:	e007      	b.n	8003e04 <HAL_UART_RxCpltCallback+0xb8>
				if(jy901_data[i]==0x55)break;
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <HAL_UART_RxCpltCallback+0xfc>)
 8003df8:	5cd3      	ldrb	r3, [r2, r3]
 8003dfa:	2b55      	cmp	r3, #85	; 0x55
 8003dfc:	d006      	beq.n	8003e0c <HAL_UART_RxCpltCallback+0xc0>
			for(;i<11;++i){
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	3301      	adds	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b0a      	cmp	r3, #10
 8003e08:	d9f4      	bls.n	8003df4 <HAL_UART_RxCpltCallback+0xa8>
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_RxCpltCallback+0xc2>
				if(jy901_data[i]==0x55)break;
 8003e0c:	bf00      	nop
			jy901_data_length = i;
 8003e0e:	4a0f      	ldr	r2, [pc, #60]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8003e14:	4b0d      	ldr	r3, [pc, #52]	; (8003e4c <HAL_UART_RxCpltCallback+0x100>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	490a      	ldr	r1, [pc, #40]	; (8003e48 <HAL_UART_RxCpltCallback+0xfc>)
 8003e1e:	4809      	ldr	r0, [pc, #36]	; (8003e44 <HAL_UART_RxCpltCallback+0xf8>)
 8003e20:	f00e fb0e 	bl	8012440 <HAL_UART_Receive_DMA>
}
 8003e24:	bf00      	nop
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	24001468 	.word	0x24001468
 8003e30:	24001ba0 	.word	0x24001ba0
 8003e34:	240013d4 	.word	0x240013d4
 8003e38:	2400438c 	.word	0x2400438c
 8003e3c:	240014fc 	.word	0x240014fc
 8003e40:	240043b0 	.word	0x240043b0
 8003e44:	24001624 	.word	0x24001624
 8003e48:	240044b4 	.word	0x240044b4
 8003e4c:	24000000 	.word	0x24000000
 8003e50:	240044c0 	.word	0x240044c0

08003e54 <HAL_UARTEx_RxEventCallback>:

//uart receive callback for cp2102
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a64      	ldr	r2, [pc, #400]	; (8003ff8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	f040 80c1 	bne.w	8003fee <HAL_UARTEx_RxEventCallback+0x19a>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 8003e6c:	4b63      	ldr	r3, [pc, #396]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	2b78      	cmp	r3, #120	; 0x78
 8003e72:	d116      	bne.n	8003ea2 <HAL_UARTEx_RxEventCallback+0x4e>
 8003e74:	4b61      	ldr	r3, [pc, #388]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003e76:	785b      	ldrb	r3, [r3, #1]
 8003e78:	2b69      	cmp	r3, #105	; 0x69
 8003e7a:	d112      	bne.n	8003ea2 <HAL_UARTEx_RxEventCallback+0x4e>
 8003e7c:	4b5f      	ldr	r3, [pc, #380]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003e7e:	789b      	ldrb	r3, [r3, #2]
 8003e80:	2b6c      	cmp	r3, #108	; 0x6c
 8003e82:	d10e      	bne.n	8003ea2 <HAL_UARTEx_RxEventCallback+0x4e>
 8003e84:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003e86:	78db      	ldrb	r3, [r3, #3]
 8003e88:	2b69      	cmp	r3, #105	; 0x69
 8003e8a:	d10a      	bne.n	8003ea2 <HAL_UARTEx_RxEventCallback+0x4e>
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003e8e:	791b      	ldrb	r3, [r3, #4]
 8003e90:	2b6e      	cmp	r3, #110	; 0x6e
 8003e92:	d106      	bne.n	8003ea2 <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 8003e94:	230a      	movs	r3, #10
 8003e96:	226c      	movs	r2, #108	; 0x6c
 8003e98:	4959      	ldr	r1, [pc, #356]	; (8004000 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8003e9a:	485a      	ldr	r0, [pc, #360]	; (8004004 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003e9c:	f00e f9c2 	bl	8012224 <HAL_UART_Transmit>
 8003ea0:	e03f      	b.n	8003f22 <HAL_UARTEx_RxEventCallback+0xce>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 8003ea2:	4b56      	ldr	r3, [pc, #344]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b61      	cmp	r3, #97	; 0x61
 8003ea8:	d138      	bne.n	8003f1c <HAL_UARTEx_RxEventCallback+0xc8>
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003eac:	785b      	ldrb	r3, [r3, #1]
 8003eae:	2b63      	cmp	r3, #99	; 0x63
 8003eb0:	d134      	bne.n	8003f1c <HAL_UARTEx_RxEventCallback+0xc8>
 8003eb2:	4b52      	ldr	r3, [pc, #328]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003eb4:	789b      	ldrb	r3, [r3, #2]
 8003eb6:	2b73      	cmp	r3, #115	; 0x73
 8003eb8:	d130      	bne.n	8003f1c <HAL_UARTEx_RxEventCallback+0xc8>
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003ebc:	78db      	ldrb	r3, [r3, #3]
 8003ebe:	2b72      	cmp	r3, #114	; 0x72
 8003ec0:	d12c      	bne.n	8003f1c <HAL_UARTEx_RxEventCallback+0xc8>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 8003ec2:	2368      	movs	r3, #104	; 0x68
 8003ec4:	60fb      	str	r3, [r7, #12]
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 8003ec6:	4a4d      	ldr	r2, [pc, #308]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b62      	cmp	r3, #98	; 0x62
 8003ed0:	d111      	bne.n	8003ef6 <HAL_UARTEx_RxEventCallback+0xa2>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a49      	ldr	r2, [pc, #292]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003ed8:	5cd3      	ldrb	r3, [r2, r3]
 8003eda:	2b34      	cmp	r3, #52	; 0x34
 8003edc:	d10b      	bne.n	8003ef6 <HAL_UARTEx_RxEventCallback+0xa2>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	4a46      	ldr	r2, [pc, #280]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003ee4:	5cd3      	ldrb	r3, [r2, r3]
 8003ee6:	2b30      	cmp	r3, #48	; 0x30
 8003ee8:	d105      	bne.n	8003ef6 <HAL_UARTEx_RxEventCallback+0xa2>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	3303      	adds	r3, #3
 8003eee:	4a43      	ldr	r2, [pc, #268]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
 8003ef2:	2b31      	cmp	r3, #49	; 0x31
 8003ef4:	d003      	beq.n	8003efe <HAL_UARTEx_RxEventCallback+0xaa>
				printf("Receive Wrong Data\n");
 8003ef6:	4844      	ldr	r0, [pc, #272]	; (8004008 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8003ef8:	f011 f8a8 	bl	801504c <puts>
				printf("Write the Configuration Complete!\n");
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
				NVIC_SystemReset();
			}

		}else{
 8003efc:	e011      	b.n	8003f22 <HAL_UARTEx_RxEventCallback+0xce>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 8003efe:	226c      	movs	r2, #108	; 0x6c
 8003f00:	493e      	ldr	r1, [pc, #248]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003f02:	483f      	ldr	r0, [pc, #252]	; (8004000 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8003f04:	f011 fa55 	bl	80153b2 <memcpy>
				printf("Write the Configuration Complete!\n");
 8003f08:	4840      	ldr	r0, [pc, #256]	; (800400c <HAL_UARTEx_RxEventCallback+0x1b8>)
 8003f0a:	f011 f89f 	bl	801504c <puts>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 8003f0e:	226c      	movs	r2, #108	; 0x6c
 8003f10:	2100      	movs	r1, #0
 8003f12:	483b      	ldr	r0, [pc, #236]	; (8004000 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8003f14:	f7fd f836 	bl	8000f84 <QSPI_W25Q64JV_Write>
				NVIC_SystemReset();
 8003f18:	f7fe f85c 	bl	8001fd4 <__NVIC_SystemReset>
			printf("Receive Wrong Data\n");
 8003f1c:	483a      	ldr	r0, [pc, #232]	; (8004008 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8003f1e:	f011 f895 	bl	801504c <puts>
			//HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8003f22:	2264      	movs	r2, #100	; 0x64
 8003f24:	4935      	ldr	r1, [pc, #212]	; (8003ffc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8003f26:	4837      	ldr	r0, [pc, #220]	; (8004004 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8003f28:	f010 f96e 	bl	8014208 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8003f2c:	4b38      	ldr	r3, [pc, #224]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a38      	ldr	r2, [pc, #224]	; (8004014 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d04a      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f36:	4b36      	ldr	r3, [pc, #216]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a37      	ldr	r2, [pc, #220]	; (8004018 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d045      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f40:	4b33      	ldr	r3, [pc, #204]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a35      	ldr	r2, [pc, #212]	; (800401c <HAL_UARTEx_RxEventCallback+0x1c8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d040      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f4a:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a34      	ldr	r2, [pc, #208]	; (8004020 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d03b      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f54:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a32      	ldr	r2, [pc, #200]	; (8004024 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d036      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f5e:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a31      	ldr	r2, [pc, #196]	; (8004028 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d031      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a2f      	ldr	r2, [pc, #188]	; (800402c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d02c      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f72:	4b27      	ldr	r3, [pc, #156]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2e      	ldr	r2, [pc, #184]	; (8004030 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d027      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f7c:	4b24      	ldr	r3, [pc, #144]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2c      	ldr	r2, [pc, #176]	; (8004034 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d022      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f86:	4b22      	ldr	r3, [pc, #136]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a2b      	ldr	r2, [pc, #172]	; (8004038 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d01d      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f90:	4b1f      	ldr	r3, [pc, #124]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a29      	ldr	r2, [pc, #164]	; (800403c <HAL_UARTEx_RxEventCallback+0x1e8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d018      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003f9a:	4b1d      	ldr	r3, [pc, #116]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a28      	ldr	r2, [pc, #160]	; (8004040 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003fa4:	4b1a      	ldr	r3, [pc, #104]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a26      	ldr	r2, [pc, #152]	; (8004044 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d00e      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003fae:	4b18      	ldr	r3, [pc, #96]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a25      	ldr	r2, [pc, #148]	; (8004048 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d009      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003fb8:	4b15      	ldr	r3, [pc, #84]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a23      	ldr	r2, [pc, #140]	; (800404c <HAL_UARTEx_RxEventCallback+0x1f8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d004      	beq.n	8003fcc <HAL_UARTEx_RxEventCallback+0x178>
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d108      	bne.n	8003fde <HAL_UARTEx_RxEventCallback+0x18a>
 8003fcc:	4b10      	ldr	r3, [pc, #64]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0208 	bic.w	r2, r2, #8
 8003fda:	601a      	str	r2, [r3, #0]
	}
}
 8003fdc:	e007      	b.n	8003fee <HAL_UARTEx_RxEventCallback+0x19a>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0204 	bic.w	r2, r2, #4
 8003fec:	601a      	str	r2, [r3, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40007800 	.word	0x40007800
 8003ffc:	24004424 	.word	0x24004424
 8004000:	24000004 	.word	0x24000004
 8004004:	24001590 	.word	0x24001590
 8004008:	08016ef0 	.word	0x08016ef0
 800400c:	08016f04 	.word	0x08016f04
 8004010:	24001898 	.word	0x24001898
 8004014:	40020010 	.word	0x40020010
 8004018:	40020028 	.word	0x40020028
 800401c:	40020040 	.word	0x40020040
 8004020:	40020058 	.word	0x40020058
 8004024:	40020070 	.word	0x40020070
 8004028:	40020088 	.word	0x40020088
 800402c:	400200a0 	.word	0x400200a0
 8004030:	400200b8 	.word	0x400200b8
 8004034:	40020410 	.word	0x40020410
 8004038:	40020428 	.word	0x40020428
 800403c:	40020440 	.word	0x40020440
 8004040:	40020458 	.word	0x40020458
 8004044:	40020470 	.word	0x40020470
 8004048:	40020488 	.word	0x40020488
 800404c:	400204a0 	.word	0x400204a0
 8004050:	400204b8 	.word	0x400204b8

08004054 <HAL_UART_ErrorCallback>:

//error handle of uart
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==huart_esc.Instance) {
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	4b48      	ldr	r3, [pc, #288]	; (8004184 <HAL_UART_ErrorCallback+0x130>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d105      	bne.n	8004074 <HAL_UART_ErrorCallback+0x20>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8004068:	2220      	movs	r2, #32
 800406a:	4947      	ldr	r1, [pc, #284]	; (8004188 <HAL_UART_ErrorCallback+0x134>)
 800406c:	4845      	ldr	r0, [pc, #276]	; (8004184 <HAL_UART_ErrorCallback+0x130>)
 800406e:	f00e f9e7 	bl	8012440 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
	}else if(UartHandle->Instance==UART7){
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
	}
}
 8004072:	e082      	b.n	800417a <HAL_UART_ErrorCallback+0x126>
    }else if(UartHandle->Instance==huart_f103.Instance) {
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	4b44      	ldr	r3, [pc, #272]	; (800418c <HAL_UART_ErrorCallback+0x138>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d105      	bne.n	800408c <HAL_UART_ErrorCallback+0x38>
    	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+1);
 8004080:	2221      	movs	r2, #33	; 0x21
 8004082:	4943      	ldr	r1, [pc, #268]	; (8004190 <HAL_UART_ErrorCallback+0x13c>)
 8004084:	4841      	ldr	r0, [pc, #260]	; (800418c <HAL_UART_ErrorCallback+0x138>)
 8004086:	f00e f9db 	bl	8012440 <HAL_UART_Receive_DMA>
}
 800408a:	e076      	b.n	800417a <HAL_UART_ErrorCallback+0x126>
    else if(UartHandle->Instance==huart_imu.Instance) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b40      	ldr	r3, [pc, #256]	; (8004194 <HAL_UART_ErrorCallback+0x140>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d105      	bne.n	80040a4 <HAL_UART_ErrorCallback+0x50>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
 8004098:	220b      	movs	r2, #11
 800409a:	493f      	ldr	r1, [pc, #252]	; (8004198 <HAL_UART_ErrorCallback+0x144>)
 800409c:	483d      	ldr	r0, [pc, #244]	; (8004194 <HAL_UART_ErrorCallback+0x140>)
 800409e:	f00e f9cf 	bl	8012440 <HAL_UART_Receive_DMA>
}
 80040a2:	e06a      	b.n	800417a <HAL_UART_ErrorCallback+0x126>
	}else if(UartHandle->Instance==UART7){
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a3c      	ldr	r2, [pc, #240]	; (800419c <HAL_UART_ErrorCallback+0x148>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d165      	bne.n	800417a <HAL_UART_ErrorCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 80040ae:	2264      	movs	r2, #100	; 0x64
 80040b0:	493b      	ldr	r1, [pc, #236]	; (80041a0 <HAL_UART_ErrorCallback+0x14c>)
 80040b2:	483c      	ldr	r0, [pc, #240]	; (80041a4 <HAL_UART_ErrorCallback+0x150>)
 80040b4:	f010 f8a8 	bl	8014208 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80040b8:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a3b      	ldr	r2, [pc, #236]	; (80041ac <HAL_UART_ErrorCallback+0x158>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d04a      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040c2:	4b39      	ldr	r3, [pc, #228]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a3a      	ldr	r2, [pc, #232]	; (80041b0 <HAL_UART_ErrorCallback+0x15c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d045      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040cc:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a38      	ldr	r2, [pc, #224]	; (80041b4 <HAL_UART_ErrorCallback+0x160>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d040      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040d6:	4b34      	ldr	r3, [pc, #208]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a37      	ldr	r2, [pc, #220]	; (80041b8 <HAL_UART_ErrorCallback+0x164>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d03b      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040e0:	4b31      	ldr	r3, [pc, #196]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a35      	ldr	r2, [pc, #212]	; (80041bc <HAL_UART_ErrorCallback+0x168>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d036      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040ea:	4b2f      	ldr	r3, [pc, #188]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a34      	ldr	r2, [pc, #208]	; (80041c0 <HAL_UART_ErrorCallback+0x16c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d031      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040f4:	4b2c      	ldr	r3, [pc, #176]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a32      	ldr	r2, [pc, #200]	; (80041c4 <HAL_UART_ErrorCallback+0x170>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02c      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 80040fe:	4b2a      	ldr	r3, [pc, #168]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a31      	ldr	r2, [pc, #196]	; (80041c8 <HAL_UART_ErrorCallback+0x174>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d027      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 8004108:	4b27      	ldr	r3, [pc, #156]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2f      	ldr	r2, [pc, #188]	; (80041cc <HAL_UART_ErrorCallback+0x178>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d022      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 8004112:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2e      	ldr	r2, [pc, #184]	; (80041d0 <HAL_UART_ErrorCallback+0x17c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d01d      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 800411c:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2c      	ldr	r2, [pc, #176]	; (80041d4 <HAL_UART_ErrorCallback+0x180>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d018      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a2b      	ldr	r2, [pc, #172]	; (80041d8 <HAL_UART_ErrorCallback+0x184>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 8004130:	4b1d      	ldr	r3, [pc, #116]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a29      	ldr	r2, [pc, #164]	; (80041dc <HAL_UART_ErrorCallback+0x188>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00e      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 800413a:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a28      	ldr	r2, [pc, #160]	; (80041e0 <HAL_UART_ErrorCallback+0x18c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 8004144:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a26      	ldr	r2, [pc, #152]	; (80041e4 <HAL_UART_ErrorCallback+0x190>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <HAL_UART_ErrorCallback+0x104>
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a25      	ldr	r2, [pc, #148]	; (80041e8 <HAL_UART_ErrorCallback+0x194>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <HAL_UART_ErrorCallback+0x116>
 8004158:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0208 	bic.w	r2, r2, #8
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	e007      	b.n	800417a <HAL_UART_ErrorCallback+0x126>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 800416a:	4b0f      	ldr	r3, [pc, #60]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_UART_ErrorCallback+0x154>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0204 	bic.w	r2, r2, #4
 8004178:	601a      	str	r2, [r3, #0]
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	240013d4 	.word	0x240013d4
 8004188:	2400438c 	.word	0x2400438c
 800418c:	240014fc 	.word	0x240014fc
 8004190:	240043b0 	.word	0x240043b0
 8004194:	24001624 	.word	0x24001624
 8004198:	240044b4 	.word	0x240044b4
 800419c:	40007800 	.word	0x40007800
 80041a0:	24004424 	.word	0x24004424
 80041a4:	24001590 	.word	0x24001590
 80041a8:	24001898 	.word	0x24001898
 80041ac:	40020010 	.word	0x40020010
 80041b0:	40020028 	.word	0x40020028
 80041b4:	40020040 	.word	0x40020040
 80041b8:	40020058 	.word	0x40020058
 80041bc:	40020070 	.word	0x40020070
 80041c0:	40020088 	.word	0x40020088
 80041c4:	400200a0 	.word	0x400200a0
 80041c8:	400200b8 	.word	0x400200b8
 80041cc:	40020410 	.word	0x40020410
 80041d0:	40020428 	.word	0x40020428
 80041d4:	40020440 	.word	0x40020440
 80041d8:	40020458 	.word	0x40020458
 80041dc:	40020470 	.word	0x40020470
 80041e0:	40020488 	.word	0x40020488
 80041e4:	400204a0 	.word	0x400204a0
 80041e8:	400204b8 	.word	0x400204b8

080041ec <HAL_TIM_IC_CaptureCallback>:

//pwm input capture callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]

	if(input_mode == INPUT_MODE_SOFTWARE)return;
 80041f4:	4b4a      	ldr	r3, [pc, #296]	; (8004320 <HAL_TIM_IC_CaptureCallback+0x134>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 808d 	beq.w	8004318 <HAL_TIM_IC_CaptureCallback+0x12c>

	uint32_t ic_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a48      	ldr	r2, [pc, #288]	; (8004324 <HAL_TIM_IC_CaptureCallback+0x138>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d131      	bne.n	800426c <HAL_TIM_IC_CaptureCallback+0x80>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	7f1b      	ldrb	r3, [r3, #28]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d12d      	bne.n	800426c <HAL_TIM_IC_CaptureCallback+0x80>
		ic_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004210:	2100      	movs	r1, #0
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f00d f860 	bl	80112d8 <HAL_TIM_ReadCapturedValue>
 8004218:	61f8      	str	r0, [r7, #28]
		uint32_t servo_ic = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800421a:	2104      	movs	r1, #4
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f00d f85b 	bl	80112d8 <HAL_TIM_ReadCapturedValue>
 8004222:	61b8      	str	r0, [r7, #24]
		int32_t diff = servo_ic - pre_servo_ic;
 8004224:	4b40      	ldr	r3, [pc, #256]	; (8004328 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	617b      	str	r3, [r7, #20]
		if(abs(diff) > 2){
 800422e:	6978      	ldr	r0, [r7, #20]
 8004230:	f7fd fee6 	bl	8002000 <_ZSt3absl>
 8004234:	4603      	mov	r3, r0
 8004236:	2b02      	cmp	r3, #2
 8004238:	bfcc      	ite	gt
 800423a:	2301      	movgt	r3, #1
 800423c:	2300      	movle	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d006      	beq.n	8004252 <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,servo_ic);
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <HAL_TIM_IC_CaptureCallback+0x140>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	635a      	str	r2, [r3, #52]	; 0x34
			pre_servo_ic = servo_ic;
 800424c:	4a36      	ldr	r2, [pc, #216]	; (8004328 <HAL_TIM_IC_CaptureCallback+0x13c>)
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 800425a:	2100      	movs	r1, #0
 800425c:	4834      	ldr	r0, [pc, #208]	; (8004330 <HAL_TIM_IC_CaptureCallback+0x144>)
 800425e:	f00c fae1 	bl	8010824 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004262:	2104      	movs	r1, #4
 8004264:	4832      	ldr	r0, [pc, #200]	; (8004330 <HAL_TIM_IC_CaptureCallback+0x144>)
 8004266:	f00c f9d9 	bl	801061c <HAL_TIM_IC_Start>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 800426a:	e035      	b.n	80042d8 <HAL_TIM_IC_CaptureCallback+0xec>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a30      	ldr	r2, [pc, #192]	; (8004334 <HAL_TIM_IC_CaptureCallback+0x148>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d130      	bne.n	80042d8 <HAL_TIM_IC_CaptureCallback+0xec>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	7f1b      	ldrb	r3, [r3, #28]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d12c      	bne.n	80042d8 <HAL_TIM_IC_CaptureCallback+0xec>

		ic_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800427e:	2100      	movs	r1, #0
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f00d f829 	bl	80112d8 <HAL_TIM_ReadCapturedValue>
 8004286:	61f8      	str	r0, [r7, #28]
		uint32_t esc_ic = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8004288:	2104      	movs	r1, #4
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f00d f824 	bl	80112d8 <HAL_TIM_ReadCapturedValue>
 8004290:	6138      	str	r0, [r7, #16]
		int32_t diff = esc_ic - pre_esc_ic;
 8004292:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	60fb      	str	r3, [r7, #12]
		if(abs(diff) >2){
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7fd feaf 	bl	8002000 <_ZSt3absl>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	bfcc      	ite	gt
 80042a8:	2301      	movgt	r3, #1
 80042aa:	2300      	movle	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <HAL_TIM_IC_CaptureCallback+0xd4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,esc_ic);
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <HAL_TIM_IC_CaptureCallback+0x140>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
			pre_esc_ic = esc_ic;
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2200      	movs	r2, #0
 80042c6:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 80042c8:	2100      	movs	r1, #0
 80042ca:	481c      	ldr	r0, [pc, #112]	; (800433c <HAL_TIM_IC_CaptureCallback+0x150>)
 80042cc:	f00c faaa 	bl	8010824 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 80042d0:	2104      	movs	r1, #4
 80042d2:	481a      	ldr	r0, [pc, #104]	; (800433c <HAL_TIM_IC_CaptureCallback+0x150>)
 80042d4:	f00c f9a2 	bl	801061c <HAL_TIM_IC_Start>

	}
	int32_t diff = ic_freq-esc_servo_arr;
 80042d8:	4b19      	ldr	r3, [pc, #100]	; (8004340 <HAL_TIM_IC_CaptureCallback+0x154>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	69fa      	ldr	r2, [r7, #28]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	60bb      	str	r3, [r7, #8]
	if(esc_servo_arr<1000 || abs(diff)>50){
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <HAL_TIM_IC_CaptureCallback+0x154>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042ea:	d305      	bcc.n	80042f8 <HAL_TIM_IC_CaptureCallback+0x10c>
 80042ec:	68b8      	ldr	r0, [r7, #8]
 80042ee:	f7fd fe87 	bl	8002000 <_ZSt3absl>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b32      	cmp	r3, #50	; 0x32
 80042f6:	dd01      	ble.n	80042fc <HAL_TIM_IC_CaptureCallback+0x110>
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_TIM_IC_CaptureCallback+0x112>
 80042fc:	2300      	movs	r3, #0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00b      	beq.n	800431a <HAL_TIM_IC_CaptureCallback+0x12e>
		esc_servo_arr=ic_freq;
 8004302:	4a0f      	ldr	r2, [pc, #60]	; (8004340 <HAL_TIM_IC_CaptureCallback+0x154>)
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,ic_freq);
 8004308:	4b08      	ldr	r3, [pc, #32]	; (800432c <HAL_TIM_IC_CaptureCallback+0x140>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004310:	4a06      	ldr	r2, [pc, #24]	; (800432c <HAL_TIM_IC_CaptureCallback+0x140>)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	60d3      	str	r3, [r2, #12]
 8004316:	e000      	b.n	800431a <HAL_TIM_IC_CaptureCallback+0x12e>
	if(input_mode == INPUT_MODE_SOFTWARE)return;
 8004318:	bf00      	nop
	}


}
 800431a:	3720      	adds	r7, #32
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	24004488 	.word	0x24004488
 8004324:	40000c00 	.word	0x40000c00
 8004328:	240044ac 	.word	0x240044ac
 800432c:	24001a20 	.word	0x24001a20
 8004330:	24001a6c 	.word	0x24001a6c
 8004334:	40014000 	.word	0x40014000
 8004338:	240044b0 	.word	0x240044b0
 800433c:	24001b04 	.word	0x24001b04
 8004340:	24004490 	.word	0x24004490

08004344 <HAL_TIM_PeriodElapsedCallback>:

//timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004344:	b5b0      	push	{r4, r5, r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

	//ros publish
	if(htim->Instance==TIM16){
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a41      	ldr	r2, [pc, #260]	; (8004458 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d15b      	bne.n	800440e <HAL_TIM_PeriodElapsedCallback+0xca>
		memcpy(&sensor_msg.data[0],speed,2*wheel_speed_size);
 8004356:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435a:	4a41      	ldr	r2, [pc, #260]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800435c:	461c      	mov	r4, r3
 800435e:	4615      	mov	r5, r2
 8004360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004362:	6020      	str	r0, [r4, #0]
 8004364:	6061      	str	r1, [r4, #4]
 8004366:	60a2      	str	r2, [r4, #8]
 8004368:	60e3      	str	r3, [r4, #12]
 800436a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800436c:	6120      	str	r0, [r4, #16]
 800436e:	6161      	str	r1, [r4, #20]
 8004370:	61a2      	str	r2, [r4, #24]
 8004372:	61e3      	str	r3, [r4, #28]
		uint8_t index =2*wheel_speed_size;
 8004374:	2320      	movs	r3, #32
 8004376:	73fb      	strb	r3, [r7, #15]
		memcpy(&sensor_msg.data[index],force_raw,4*force_size);
 8004378:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 800437a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437c:	7bfb      	ldrb	r3, [r7, #15]
 800437e:	4413      	add	r3, r2
 8004380:	2220      	movs	r2, #32
 8004382:	4938      	ldr	r1, [pc, #224]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004384:	4618      	mov	r0, r3
 8004386:	f011 f814 	bl	80153b2 <memcpy>
		index+=4*force_size;
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	3320      	adds	r3, #32
 800438e:	73fb      	strb	r3, [r7, #15]
		memcpy(&sensor_msg.data[index],&esc_sensor, sizeof(esc_sensor));
 8004390:	4b32      	ldr	r3, [pc, #200]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	4413      	add	r3, r2
 8004398:	2214      	movs	r2, #20
 800439a:	4933      	ldr	r1, [pc, #204]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800439c:	4618      	mov	r0, r3
 800439e:	f011 f808 	bl	80153b2 <memcpy>
		index+=sizeof(esc_sensor);
 80043a2:	7bfb      	ldrb	r3, [r7, #15]
 80043a4:	3314      	adds	r3, #20
 80043a6:	73fb      	strb	r3, [r7, #15]
		memcpy(&sensor_msg.data[index],&jy901.JY901_data.acc,sizeof(jy901.JY901_data.acc));
 80043a8:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	4413      	add	r3, r2
 80043b0:	2208      	movs	r2, #8
 80043b2:	492e      	ldr	r1, [pc, #184]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80043b4:	4618      	mov	r0, r3
 80043b6:	f010 fffc 	bl	80153b2 <memcpy>
		index+=sizeof(jy901.JY901_data.acc);
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	3308      	adds	r3, #8
 80043be:	73fb      	strb	r3, [r7, #15]
		memcpy(&sensor_msg.data[index],&jy901.JY901_data.gyro,sizeof(jy901.JY901_data.gyro));
 80043c0:	4b26      	ldr	r3, [pc, #152]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	4413      	add	r3, r2
 80043c8:	2208      	movs	r2, #8
 80043ca:	4929      	ldr	r1, [pc, #164]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80043cc:	4618      	mov	r0, r3
 80043ce:	f010 fff0 	bl	80153b2 <memcpy>
		index+=sizeof(jy901.JY901_data.gyro);
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	3308      	adds	r3, #8
 80043d6:	73fb      	strb	r3, [r7, #15]
		memcpy(&sensor_msg.data[index],&jy901.JY901_data.angle,sizeof(jy901.JY901_data.angle));
 80043d8:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80043da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
 80043de:	4413      	add	r3, r2
 80043e0:	2208      	movs	r2, #8
 80043e2:	4924      	ldr	r1, [pc, #144]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80043e4:	4618      	mov	r0, r3
 80043e6:	f010 ffe4 	bl	80153b2 <memcpy>
		index+=sizeof(jy901.JY901_data.angle);
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	3308      	adds	r3, #8
 80043ee:	73fb      	strb	r3, [r7, #15]

		sensor_msg.data[index] = error_code;
 80043f0:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80043f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
 80043f6:	4413      	add	r3, r2
 80043f8:	4a1f      	ldr	r2, [pc, #124]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80043fa:	7812      	ldrb	r2, [r2, #0]
 80043fc:	701a      	strb	r2, [r3, #0]
		ros_pub.publish(&sensor_msg);
 80043fe:	4917      	ldr	r1, [pc, #92]	; (800445c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004400:	481e      	ldr	r0, [pc, #120]	; (800447c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8004402:	f7fe fc74 	bl	8002cee <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 8004406:	481e      	ldr	r0, [pc, #120]	; (8004480 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8004408:	f000 fd9f 	bl	8004f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>
 800440c:	e020      	b.n	8004450 <HAL_TIM_PeriodElapsedCallback+0x10c>
	}else if(htim->Instance==TIM6)//pid computation
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1c      	ldr	r2, [pc, #112]	; (8004484 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_PeriodElapsedCallback+0x10c>
	{
		if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL || (error_code & 0x01))return;
 8004418:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d016      	beq.n	800444e <HAL_TIM_PeriodElapsedCallback+0x10a>
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d012      	beq.n	800444e <HAL_TIM_PeriodElapsedCallback+0x10a>
 8004428:	4b13      	ldr	r3, [pc, #76]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10c      	bne.n	800444e <HAL_TIM_PeriodElapsedCallback+0x10a>
		pid_ptr->compute();
 8004434:	4b16      	ldr	r3, [pc, #88]	; (8004490 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f7fc fa69 	bl	8000910 <_ZN3PIDIfE7computeEv>
		set_esc_duty_cycle(pid_esc_duty_cycle_output);
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	eeb0 0a67 	vmov.f32	s0, s15
 8004448:	f000 f826 	bl	8004498 <set_esc_duty_cycle>
 800444c:	e000      	b.n	8004450 <HAL_TIM_PeriodElapsedCallback+0x10c>
		if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL || (error_code & 0x01))return;
 800444e:	bf00      	nop
	}
}
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bdb0      	pop	{r4, r5, r7, pc}
 8004456:	bf00      	nop
 8004458:	40014400 	.word	0x40014400
 800445c:	24004334 	.word	0x24004334
 8004460:	240043d4 	.word	0x240043d4
 8004464:	240043f4 	.word	0x240043f4
 8004468:	24004378 	.word	0x24004378
 800446c:	240044ec 	.word	0x240044ec
 8004470:	240044f4 	.word	0x240044f4
 8004474:	240044fc 	.word	0x240044fc
 8004478:	240043ac 	.word	0x240043ac
 800447c:	24004364 	.word	0x24004364
 8004480:	24001ba0 	.word	0x24001ba0
 8004484:	40001000 	.word	0x40001000
 8004488:	24004488 	.word	0x24004488
 800448c:	24004414 	.word	0x24004414
 8004490:	24004544 	.word	0x24004544
 8004494:	2400441c 	.word	0x2400441c

08004498 <set_esc_duty_cycle>:
}


//set the duty cycle of the esc,
//input: fake_duty_cycle, a virtual duty cycle range from -1.0~1.0, where minus represents reverse
void set_esc_duty_cycle(float fake_duty_cycle){
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	ed87 0a01 	vstr	s0, [r7, #4]
	float esc_duty_cycle = parameters.esc_offset + fake_duty_cycle * (parameters.esc_max-parameters.esc_min) / 2.0;
 80044a2:	4b24      	ldr	r3, [pc, #144]	; (8004534 <set_esc_duty_cycle+0x9c>)
 80044a4:	edd3 7a07 	vldr	s15, [r3, #28]
 80044a8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80044ac:	4b21      	ldr	r3, [pc, #132]	; (8004534 <set_esc_duty_cycle+0x9c>)
 80044ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80044b2:	4b20      	ldr	r3, [pc, #128]	; (8004534 <set_esc_duty_cycle+0x9c>)
 80044b4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80044b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80044c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80044c8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80044cc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80044d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044d4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80044d8:	edc7 7a03 	vstr	s15, [r7, #12]
	//convert duty cycle to pwm ccr
	int32_t esc_ccr = esc_duty_cycle * esc_servo_arr;
 80044dc:	4b16      	ldr	r3, [pc, #88]	; (8004538 <set_esc_duty_cycle+0xa0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	ee07 3a90 	vmov	s15, r3
 80044e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044f4:	ee17 3a90 	vmov	r3, s15
 80044f8:	60bb      	str	r3, [r7, #8]
	if(abs(esc_ccr - pre_esc_ccr)>=parameters.esc_set_precision){
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <set_esc_duty_cycle+0xa4>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f7fd fd7c 	bl	8002000 <_ZSt3absl>
 8004508:	4603      	mov	r3, r0
 800450a:	4a0a      	ldr	r2, [pc, #40]	; (8004534 <set_esc_duty_cycle+0x9c>)
 800450c:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8004510:	4293      	cmp	r3, r2
 8004512:	bfac      	ite	ge
 8004514:	2301      	movge	r3, #1
 8004516:	2300      	movlt	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <set_esc_duty_cycle+0x94>
		pre_esc_ccr = esc_ccr;
 800451e:	4a07      	ldr	r2, [pc, #28]	; (800453c <set_esc_duty_cycle+0xa4>)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_ccr);
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <set_esc_duty_cycle+0xa8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68ba      	ldr	r2, [r7, #8]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38
	}
}
 800452c:	bf00      	nop
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	24000004 	.word	0x24000004
 8004538:	24004490 	.word	0x24004490
 800453c:	24004498 	.word	0x24004498
 8004540:	24001a20 	.word	0x24001a20

08004544 <set_servo_duty_cycle>:

//set the duty cycle of the esc,
//input: steering_angle, unit is degree
void set_servo_duty_cycle(float steering_angle){
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	ed87 0a01 	vstr	s0, [r7, #4]
	float servo_duty_cycle = parameters.steering_to_dutycycle_ratio*steering_angle + parameters.steering_offset;
 800454e:	4b1d      	ldr	r3, [pc, #116]	; (80045c4 <set_servo_duty_cycle+0x80>)
 8004550:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004554:	edd7 7a01 	vldr	s15, [r7, #4]
 8004558:	ee27 7a27 	vmul.f32	s14, s14, s15
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <set_servo_duty_cycle+0x80>)
 800455e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004566:	edc7 7a03 	vstr	s15, [r7, #12]

	//convert duty cycle to pwm ccr
	int32_t servo_ccr = servo_duty_cycle*esc_servo_arr;
 800456a:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <set_servo_duty_cycle+0x84>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	ee07 3a90 	vmov	s15, r3
 8004572:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004576:	edd7 7a03 	vldr	s15, [r7, #12]
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004582:	ee17 3a90 	vmov	r3, s15
 8004586:	60bb      	str	r3, [r7, #8]
	if(abs(servo_ccr - pre_servo_ccr)>=parameters.servo_set_precision){
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <set_servo_duty_cycle+0x88>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	4618      	mov	r0, r3
 8004592:	f7fd fd35 	bl	8002000 <_ZSt3absl>
 8004596:	4603      	mov	r3, r0
 8004598:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <set_servo_duty_cycle+0x80>)
 800459a:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 800459e:	4293      	cmp	r3, r2
 80045a0:	bfac      	ite	ge
 80045a2:	2301      	movge	r3, #1
 80045a4:	2300      	movlt	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d006      	beq.n	80045ba <set_servo_duty_cycle+0x76>
		pre_servo_ccr = servo_ccr;
 80045ac:	4a07      	ldr	r2, [pc, #28]	; (80045cc <set_servo_duty_cycle+0x88>)
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,servo_ccr);
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <set_servo_duty_cycle+0x8c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80045ba:	bf00      	nop
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	24000004 	.word	0x24000004
 80045c8:	24004490 	.word	0x24004490
 80045cc:	24004494 	.word	0x24004494
 80045d0:	24001a20 	.word	0x24001a20

080045d4 <set_brake>:

//set the brake,
//input: brake pwm, value from 0-255
void set_brake(uint8_t* data){
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
	uint32_t c = data[0]*brake_arr/255;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b33      	ldr	r3, [pc, #204]	; (80046b0 <set_brake+0xdc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	4a32      	ldr	r2, [pc, #200]	; (80046b4 <set_brake+0xe0>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	09db      	lsrs	r3, r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 80045f4:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <set_brake+0xe4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d006      	beq.n	800460c <set_brake+0x38>
		pre_brake[0]=c;
 80045fe:	4a2e      	ldr	r2, [pc, #184]	; (80046b8 <set_brake+0xe4>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 8004604:	4b2d      	ldr	r3, [pc, #180]	; (80046bc <set_brake+0xe8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = data[1]*brake_arr/255;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3301      	adds	r3, #1
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	461a      	mov	r2, r3
 8004614:	4b26      	ldr	r3, [pc, #152]	; (80046b0 <set_brake+0xdc>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	fb02 f303 	mul.w	r3, r2, r3
 800461c:	4a25      	ldr	r2, [pc, #148]	; (80046b4 <set_brake+0xe0>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	09db      	lsrs	r3, r3, #7
 8004624:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 8004626:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <set_brake+0xe4>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	429a      	cmp	r2, r3
 800462e:	d006      	beq.n	800463e <set_brake+0x6a>
		pre_brake[1]=c;
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <set_brake+0xe4>)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <set_brake+0xe8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = data[2]*brake_arr/255;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	3302      	adds	r3, #2
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	4b1a      	ldr	r3, [pc, #104]	; (80046b0 <set_brake+0xdc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	4a19      	ldr	r2, [pc, #100]	; (80046b4 <set_brake+0xe0>)
 8004650:	fba2 2303 	umull	r2, r3, r2, r3
 8004654:	09db      	lsrs	r3, r3, #7
 8004656:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 8004658:	4b17      	ldr	r3, [pc, #92]	; (80046b8 <set_brake+0xe4>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	429a      	cmp	r2, r3
 8004660:	d006      	beq.n	8004670 <set_brake+0x9c>
		pre_brake[2]=c;
 8004662:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <set_brake+0xe4>)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 8004668:	4b14      	ldr	r3, [pc, #80]	; (80046bc <set_brake+0xe8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = data[3]*brake_arr/255;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	3303      	adds	r3, #3
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <set_brake+0xdc>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	4a0c      	ldr	r2, [pc, #48]	; (80046b4 <set_brake+0xe0>)
 8004682:	fba2 2303 	umull	r2, r3, r2, r3
 8004686:	09db      	lsrs	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 800468a:	4b0b      	ldr	r3, [pc, #44]	; (80046b8 <set_brake+0xe4>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	429a      	cmp	r2, r3
 8004692:	d006      	beq.n	80046a2 <set_brake+0xce>
		pre_brake[3]=c;
 8004694:	4a08      	ldr	r2, [pc, #32]	; (80046b8 <set_brake+0xe4>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 800469a:	4b08      	ldr	r3, [pc, #32]	; (80046bc <set_brake+0xe8>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2400448c 	.word	0x2400448c
 80046b4:	80808081 	.word	0x80808081
 80046b8:	2400449c 	.word	0x2400449c
 80046bc:	240019d4 	.word	0x240019d4

080046c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_9) {
 80046ca:	88fb      	ldrh	r3, [r7, #6]
 80046cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d0:	d11b      	bne.n	800470a <HAL_GPIO_EXTI_Callback+0x4a>
	  auto state = HAL_GPIO_ReadPin(PID_MODE_INPUT_GPIO_Port, PID_MODE_INPUT_Pin);
 80046d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80046d6:	480f      	ldr	r0, [pc, #60]	; (8004714 <HAL_GPIO_EXTI_Callback+0x54>)
 80046d8:	f007 fad8 	bl	800bc8c <HAL_GPIO_ReadPin>
 80046dc:	4603      	mov	r3, r0
 80046de:	73fb      	strb	r3, [r7, #15]
	  if(state==GPIO_PIN_SET){
 80046e0:	7bfb      	ldrb	r3, [r7, #15]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d108      	bne.n	80046f8 <HAL_GPIO_EXTI_Callback+0x38>
		  pid_mode = PID_MODE_AUTOMATIC;
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <HAL_GPIO_EXTI_Callback+0x58>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
		  pid_ptr->reset();
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <HAL_GPIO_EXTI_Callback+0x5c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc fa1a 	bl	8000b2a <_ZN3PIDIfE5resetEv>
 80046f6:	e002      	b.n	80046fe <HAL_GPIO_EXTI_Callback+0x3e>
	  }else{
		  pid_mode = PID_MODE_MANUAL;
 80046f8:	4b07      	ldr	r3, [pc, #28]	; (8004718 <HAL_GPIO_EXTI_Callback+0x58>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	461a      	mov	r2, r3
 8004702:	2120      	movs	r1, #32
 8004704:	4806      	ldr	r0, [pc, #24]	; (8004720 <HAL_GPIO_EXTI_Callback+0x60>)
 8004706:	f007 fad9 	bl	800bcbc <HAL_GPIO_WritePin>
  }
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	58021000 	.word	0x58021000
 8004718:	24004414 	.word	0x24004414
 800471c:	24004544 	.word	0x24004544
 8004720:	58020c00 	.word	0x58020c00

08004724 <_Z9adc_setupv>:

void adc_setup(){
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
 8004728:	2208      	movs	r2, #8
 800472a:	4903      	ldr	r1, [pc, #12]	; (8004738 <_Z9adc_setupv+0x14>)
 800472c:	4803      	ldr	r0, [pc, #12]	; (800473c <_Z9adc_setupv+0x18>)
 800472e:	f002 ffdb 	bl	80076e8 <HAL_ADC_Start_DMA>
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	240043f4 	.word	0x240043f4
 800473c:	240012e8 	.word	0x240012e8

08004740 <_Z10uart_setupv>:

void uart_setup(){
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8004744:	2220      	movs	r2, #32
 8004746:	493b      	ldr	r1, [pc, #236]	; (8004834 <_Z10uart_setupv+0xf4>)
 8004748:	483b      	ldr	r0, [pc, #236]	; (8004838 <_Z10uart_setupv+0xf8>)
 800474a:	f00d fe79 	bl	8012440 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+4);
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	493a      	ldr	r1, [pc, #232]	; (800483c <_Z10uart_setupv+0xfc>)
 8004752:	483b      	ldr	r0, [pc, #236]	; (8004840 <_Z10uart_setupv+0x100>)
 8004754:	f00d fe74 	bl	8012440 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8004758:	220b      	movs	r2, #11
 800475a:	493a      	ldr	r1, [pc, #232]	; (8004844 <_Z10uart_setupv+0x104>)
 800475c:	483a      	ldr	r0, [pc, #232]	; (8004848 <_Z10uart_setupv+0x108>)
 800475e:	f00d fe6f 	bl	8012440 <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 8004762:	2264      	movs	r2, #100	; 0x64
 8004764:	4939      	ldr	r1, [pc, #228]	; (800484c <_Z10uart_setupv+0x10c>)
 8004766:	483a      	ldr	r0, [pc, #232]	; (8004850 <_Z10uart_setupv+0x110>)
 8004768:	f00f fd4e 	bl	8014208 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 800476c:	4b39      	ldr	r3, [pc, #228]	; (8004854 <_Z10uart_setupv+0x114>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a39      	ldr	r2, [pc, #228]	; (8004858 <_Z10uart_setupv+0x118>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d04a      	beq.n	800480c <_Z10uart_setupv+0xcc>
 8004776:	4b37      	ldr	r3, [pc, #220]	; (8004854 <_Z10uart_setupv+0x114>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a38      	ldr	r2, [pc, #224]	; (800485c <_Z10uart_setupv+0x11c>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d045      	beq.n	800480c <_Z10uart_setupv+0xcc>
 8004780:	4b34      	ldr	r3, [pc, #208]	; (8004854 <_Z10uart_setupv+0x114>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a36      	ldr	r2, [pc, #216]	; (8004860 <_Z10uart_setupv+0x120>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d040      	beq.n	800480c <_Z10uart_setupv+0xcc>
 800478a:	4b32      	ldr	r3, [pc, #200]	; (8004854 <_Z10uart_setupv+0x114>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a35      	ldr	r2, [pc, #212]	; (8004864 <_Z10uart_setupv+0x124>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d03b      	beq.n	800480c <_Z10uart_setupv+0xcc>
 8004794:	4b2f      	ldr	r3, [pc, #188]	; (8004854 <_Z10uart_setupv+0x114>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a33      	ldr	r2, [pc, #204]	; (8004868 <_Z10uart_setupv+0x128>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d036      	beq.n	800480c <_Z10uart_setupv+0xcc>
 800479e:	4b2d      	ldr	r3, [pc, #180]	; (8004854 <_Z10uart_setupv+0x114>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a32      	ldr	r2, [pc, #200]	; (800486c <_Z10uart_setupv+0x12c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d031      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047a8:	4b2a      	ldr	r3, [pc, #168]	; (8004854 <_Z10uart_setupv+0x114>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a30      	ldr	r2, [pc, #192]	; (8004870 <_Z10uart_setupv+0x130>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d02c      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047b2:	4b28      	ldr	r3, [pc, #160]	; (8004854 <_Z10uart_setupv+0x114>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2f      	ldr	r2, [pc, #188]	; (8004874 <_Z10uart_setupv+0x134>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d027      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047bc:	4b25      	ldr	r3, [pc, #148]	; (8004854 <_Z10uart_setupv+0x114>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <_Z10uart_setupv+0x138>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d022      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047c6:	4b23      	ldr	r3, [pc, #140]	; (8004854 <_Z10uart_setupv+0x114>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2c      	ldr	r2, [pc, #176]	; (800487c <_Z10uart_setupv+0x13c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d01d      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047d0:	4b20      	ldr	r3, [pc, #128]	; (8004854 <_Z10uart_setupv+0x114>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <_Z10uart_setupv+0x140>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d018      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <_Z10uart_setupv+0x114>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a29      	ldr	r2, [pc, #164]	; (8004884 <_Z10uart_setupv+0x144>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d013      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <_Z10uart_setupv+0x114>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a27      	ldr	r2, [pc, #156]	; (8004888 <_Z10uart_setupv+0x148>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d00e      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047ee:	4b19      	ldr	r3, [pc, #100]	; (8004854 <_Z10uart_setupv+0x114>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a26      	ldr	r2, [pc, #152]	; (800488c <_Z10uart_setupv+0x14c>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d009      	beq.n	800480c <_Z10uart_setupv+0xcc>
 80047f8:	4b16      	ldr	r3, [pc, #88]	; (8004854 <_Z10uart_setupv+0x114>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a24      	ldr	r2, [pc, #144]	; (8004890 <_Z10uart_setupv+0x150>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d004      	beq.n	800480c <_Z10uart_setupv+0xcc>
 8004802:	4b14      	ldr	r3, [pc, #80]	; (8004854 <_Z10uart_setupv+0x114>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a23      	ldr	r2, [pc, #140]	; (8004894 <_Z10uart_setupv+0x154>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d108      	bne.n	800481e <_Z10uart_setupv+0xde>
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <_Z10uart_setupv+0x114>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4b10      	ldr	r3, [pc, #64]	; (8004854 <_Z10uart_setupv+0x114>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0208 	bic.w	r2, r2, #8
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	e008      	b.n	8004830 <_Z10uart_setupv+0xf0>
 800481e:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <_Z10uart_setupv+0x114>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <_Z10uart_setupv+0x114>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0204 	bic.w	r2, r2, #4
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	bf00      	nop
 8004832:	bd80      	pop	{r7, pc}
 8004834:	2400438c 	.word	0x2400438c
 8004838:	240013d4 	.word	0x240013d4
 800483c:	240043b0 	.word	0x240043b0
 8004840:	240014fc 	.word	0x240014fc
 8004844:	240044b4 	.word	0x240044b4
 8004848:	24001624 	.word	0x24001624
 800484c:	24004424 	.word	0x24004424
 8004850:	24001590 	.word	0x24001590
 8004854:	24001898 	.word	0x24001898
 8004858:	40020010 	.word	0x40020010
 800485c:	40020028 	.word	0x40020028
 8004860:	40020040 	.word	0x40020040
 8004864:	40020058 	.word	0x40020058
 8004868:	40020070 	.word	0x40020070
 800486c:	40020088 	.word	0x40020088
 8004870:	400200a0 	.word	0x400200a0
 8004874:	400200b8 	.word	0x400200b8
 8004878:	40020410 	.word	0x40020410
 800487c:	40020428 	.word	0x40020428
 8004880:	40020440 	.word	0x40020440
 8004884:	40020458 	.word	0x40020458
 8004888:	40020470 	.word	0x40020470
 800488c:	40020488 	.word	0x40020488
 8004890:	400204a0 	.word	0x400204a0
 8004894:	400204b8 	.word	0x400204b8

08004898 <_Z11timer_setupv>:

void timer_setup(){
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0

	//set tim16 ARR value based on topic publish frequency and start tim16, 10000 = 100M/(9999+1), where 9999 is the prescale of timer16
	__HAL_TIM_SET_PRESCALER(&htim16,9999);
 800489c:	4b67      	ldr	r3, [pc, #412]	; (8004a3c <_Z11timer_setupv+0x1a4>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim16,10000/parameters.publish_frequency-1);
 80048a6:	4b66      	ldr	r3, [pc, #408]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 80048a8:	7d5b      	ldrb	r3, [r3, #21]
 80048aa:	461a      	mov	r2, r3
 80048ac:	f242 7310 	movw	r3, #10000	; 0x2710
 80048b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <_Z11timer_setupv+0x1a4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80048bc:	4b60      	ldr	r3, [pc, #384]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 80048be:	7d5b      	ldrb	r3, [r3, #21]
 80048c0:	461a      	mov	r2, r3
 80048c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80048c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80048ca:	3b01      	subs	r3, #1
 80048cc:	461a      	mov	r2, r3
 80048ce:	4b5b      	ldr	r3, [pc, #364]	; (8004a3c <_Z11timer_setupv+0x1a4>)
 80048d0:	60da      	str	r2, [r3, #12]

	//set tim6 ARR value based on PID calculation frequency and start tim7
	//__HAL_TIM_SET_PRESCALER(&htim6,9999);
	__HAL_TIM_SET_AUTORELOAD(&htim6,10000/parameters.pid_frequency-1);
 80048d2:	4b5b      	ldr	r3, [pc, #364]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 80048d4:	7d1b      	ldrb	r3, [r3, #20]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80048dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80048e0:	1e5a      	subs	r2, r3, #1
 80048e2:	4b58      	ldr	r3, [pc, #352]	; (8004a44 <_Z11timer_setupv+0x1ac>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80048e8:	4b55      	ldr	r3, [pc, #340]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 80048ea:	7d1b      	ldrb	r3, [r3, #20]
 80048ec:	461a      	mov	r2, r3
 80048ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80048f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80048f6:	3b01      	subs	r3, #1
 80048f8:	461a      	mov	r2, r3
 80048fa:	4b52      	ldr	r3, [pc, #328]	; (8004a44 <_Z11timer_setupv+0x1ac>)
 80048fc:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 80048fe:	4851      	ldr	r0, [pc, #324]	; (8004a44 <_Z11timer_setupv+0x1ac>)
 8004900:	f00b fc42 	bl	8010188 <HAL_TIM_Base_Start_IT>

	//start esc and steering servo pwm output
	esc_servo_arr = 1000000/parameters.steering_esc_pwm_frequency-1;
 8004904:	4b4e      	ldr	r3, [pc, #312]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 8004906:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800490a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a48 <_Z11timer_setupv+0x1b0>
 800490e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <_Z11timer_setupv+0x1b4>)
 8004924:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3,esc_servo_arr);
 8004926:	4b4a      	ldr	r3, [pc, #296]	; (8004a50 <_Z11timer_setupv+0x1b8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a48      	ldr	r2, [pc, #288]	; (8004a4c <_Z11timer_setupv+0x1b4>)
 800492c:	6812      	ldr	r2, [r2, #0]
 800492e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004930:	4b46      	ldr	r3, [pc, #280]	; (8004a4c <_Z11timer_setupv+0x1b4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a46      	ldr	r2, [pc, #280]	; (8004a50 <_Z11timer_setupv+0x1b8>)
 8004936:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 800493a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800493e:	4b44      	ldr	r3, [pc, #272]	; (8004a50 <_Z11timer_setupv+0x1b8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004946:	ee17 2a90 	vmov	r2, s15
 800494a:	635a      	str	r2, [r3, #52]	; 0x34
	pre_servo_ccr = parameters.steering_offset;
 800494c:	4b3c      	ldr	r3, [pc, #240]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 800494e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004956:	ee17 2a90 	vmov	r2, s15
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <_Z11timer_setupv+0x1bc>)
 800495c:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 800495e:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 8004960:	edd3 7a07 	vldr	s15, [r3, #28]
 8004964:	4b3a      	ldr	r3, [pc, #232]	; (8004a50 <_Z11timer_setupv+0x1b8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496c:	ee17 2a90 	vmov	r2, s15
 8004970:	639a      	str	r2, [r3, #56]	; 0x38
	pre_esc_ccr = parameters.esc_offset;
 8004972:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 8004974:	edd3 7a07 	vldr	s15, [r3, #28]
 8004978:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800497c:	ee17 2a90 	vmov	r2, s15
 8004980:	4b35      	ldr	r3, [pc, #212]	; (8004a58 <_Z11timer_setupv+0x1c0>)
 8004982:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004984:	2100      	movs	r1, #0
 8004986:	4832      	ldr	r0, [pc, #200]	; (8004a50 <_Z11timer_setupv+0x1b8>)
 8004988:	f00b fcd8 	bl	801033c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800498c:	2104      	movs	r1, #4
 800498e:	4830      	ldr	r0, [pc, #192]	; (8004a50 <_Z11timer_setupv+0x1b8>)
 8004990:	f00b fcd4 	bl	801033c <HAL_TIM_PWM_Start>

	//set brake pwm, prescaler 99, timer frequency is 100MHz
	__HAL_TIM_SET_PRESCALER(&htim2,99);
 8004994:	4b31      	ldr	r3, [pc, #196]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2263      	movs	r2, #99	; 0x63
 800499a:	629a      	str	r2, [r3, #40]	; 0x28
	//set tim2 ARR value based on brake frequency and start tim6, 1000000 = 100M/(99+1)
	brake_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <_Z11timer_setupv+0x1a8>)
 800499e:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 80049a2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004a48 <_Z11timer_setupv+0x1b0>
 80049a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b6:	ee17 2a90 	vmov	r2, s15
 80049ba:	4b29      	ldr	r3, [pc, #164]	; (8004a60 <_Z11timer_setupv+0x1c8>)
 80049bc:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,brake_arr);
 80049be:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a27      	ldr	r2, [pc, #156]	; (8004a60 <_Z11timer_setupv+0x1c8>)
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80049c8:	4b25      	ldr	r3, [pc, #148]	; (8004a60 <_Z11timer_setupv+0x1c8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049ce:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80049d0:	2100      	movs	r1, #0
 80049d2:	4822      	ldr	r0, [pc, #136]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049d4:	f00b fcb2 	bl	801033c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80049d8:	2104      	movs	r1, #4
 80049da:	4820      	ldr	r0, [pc, #128]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049dc:	f00b fcae 	bl	801033c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80049e0:	2108      	movs	r1, #8
 80049e2:	481e      	ldr	r0, [pc, #120]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049e4:	f00b fcaa 	bl	801033c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80049e8:	210c      	movs	r1, #12
 80049ea:	481c      	ldr	r0, [pc, #112]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049ec:	f00b fca6 	bl	801033c <HAL_TIM_PWM_Start>
	//initial value zeros
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 80049f0:	4b1a      	ldr	r3, [pc, #104]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2200      	movs	r2, #0
 80049f6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 80049f8:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8004a00:	4b16      	ldr	r3, [pc, #88]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2200      	movs	r2, #0
 8004a06:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 8004a08:	4b14      	ldr	r3, [pc, #80]	; (8004a5c <_Z11timer_setupv+0x1c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40

	//pwm input capture for servo and esc
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004a10:	2100      	movs	r1, #0
 8004a12:	4814      	ldr	r0, [pc, #80]	; (8004a64 <_Z11timer_setupv+0x1cc>)
 8004a14:	f00b ff06 	bl	8010824 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004a18:	2104      	movs	r1, #4
 8004a1a:	4812      	ldr	r0, [pc, #72]	; (8004a64 <_Z11timer_setupv+0x1cc>)
 8004a1c:	f00b fdfe 	bl	801061c <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004a20:	2100      	movs	r1, #0
 8004a22:	4811      	ldr	r0, [pc, #68]	; (8004a68 <_Z11timer_setupv+0x1d0>)
 8004a24:	f00b fefe 	bl	8010824 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004a28:	2104      	movs	r1, #4
 8004a2a:	480f      	ldr	r0, [pc, #60]	; (8004a68 <_Z11timer_setupv+0x1d0>)
 8004a2c:	f00b fdf6 	bl	801061c <HAL_TIM_IC_Start>

	//start ros publish
	//this timer should the last one to start.
	HAL_TIM_Base_Start_IT(&htim16);
 8004a30:	4802      	ldr	r0, [pc, #8]	; (8004a3c <_Z11timer_setupv+0x1a4>)
 8004a32:	f00b fba9 	bl	8010188 <HAL_TIM_Base_Start_IT>

}
 8004a36:	bf00      	nop
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	24001b50 	.word	0x24001b50
 8004a40:	24000004 	.word	0x24000004
 8004a44:	24001ab8 	.word	0x24001ab8
 8004a48:	49742400 	.word	0x49742400
 8004a4c:	24004490 	.word	0x24004490
 8004a50:	24001a20 	.word	0x24001a20
 8004a54:	24004494 	.word	0x24004494
 8004a58:	24004498 	.word	0x24004498
 8004a5c:	240019d4 	.word	0x240019d4
 8004a60:	2400448c 	.word	0x2400448c
 8004a64:	24001a6c 	.word	0x24001a6c
 8004a68:	24001b04 	.word	0x24001b04
 8004a6c:	00000000 	.word	0x00000000

08004a70 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE>:

//ros brake subscriber callback
void command_callback(const std_msgs::UInt8MultiArray& msg){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
	//data[0] : input mode
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, (GPIO_PinState)msg.data[0]);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2120      	movs	r1, #32
 8004a82:	4849      	ldr	r0, [pc, #292]	; (8004ba8 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x138>)
 8004a84:	f007 f91a 	bl	800bcbc <HAL_GPIO_WritePin>

	//data[1] : pid mode
	if(msg.data[1] != (uint8_t)pid_mode){
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	4b46      	ldr	r3, [pc, #280]	; (8004bac <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x13c>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d013      	beq.n	8004ac0 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x50>
		pid_mode = (PIDMode_TypeDef)msg.data[1];
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	4b42      	ldr	r3, [pc, #264]	; (8004bac <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x13c>)
 8004aa2:	701a      	strb	r2, [r3, #0]
		pid_ptr->reset();
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x140>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fc f83e 	bl	8000b2a <_ZN3PIDIfE5resetEv>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)msg.data[1]);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2120      	movs	r1, #32
 8004aba:	483e      	ldr	r0, [pc, #248]	; (8004bb4 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x144>)
 8004abc:	f007 f8fe 	bl	800bcbc <HAL_GPIO_WritePin>
	}

	//data[2]~data[5]:brake, brake is represent by a uint8 0-255 correponding dutycycle 0-1
	set_brake(&msg.data[2]);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	3302      	adds	r3, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff fd84 	bl	80045d4 <set_brake>

	//other commands are ignored if input mode is mannual
	if(msg.data[0]){
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d15a      	bne.n	8004b8c <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x11c>
	}

	//data[6]: speed integer part if PID_MODE_AUTOMATIC, the high byte of int16 if PID_MODE_MANNUAL
	//data[7]: speed decimal part if PID_MODE_AUTOMATIC, the low byte of int16 if PID_MODE_MANNUAL
	//duty cycle shall convert to 0-1 by divided by 1000
	if(pid_mode == PID_MODE_AUTOMATIC){
 8004ad6:	4b35      	ldr	r3, [pc, #212]	; (8004bac <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x13c>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d11b      	bne.n	8004b16 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0xa6>
		pid_speed_set = msg.data[6] + msg.data[7]/100.0;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae2:	3306      	adds	r3, #6
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af2:	3307      	adds	r3, #7
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004afe:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8004b98 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x128>
 8004b02:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004b06:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b0e:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x148>)
 8004b10:	edc3 7a00 	vstr	s15, [r3]
 8004b14:	e01b      	b.n	8004b4e <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0xde>
	}else{
		auto dc = (int16_t) (msg.data[6]<<8) | msg.data[7];
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	3306      	adds	r3, #6
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21b      	sxth	r3, r3
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b28:	3307      	adds	r3, #7
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60fb      	str	r3, [r7, #12]
		set_esc_duty_cycle(dc/1000.0);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b3a:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8004ba0 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x130>
 8004b3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b42:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b46:	eeb0 0a67 	vmov.f32	s0, s15
 8004b4a:	f7ff fca5 	bl	8004498 <set_esc_duty_cycle>
	}

	//data[8]: steering angle integer part
	//data[9]: steering angle decimal part
	float steering = msg.data[8] + msg.data[9]/100.0;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	3308      	adds	r3, #8
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	3309      	adds	r3, #9
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004b6e:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 8004b98 <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x128>
 8004b72:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8004b76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004b7e:	edc7 7a02 	vstr	s15, [r7, #8]
	set_servo_duty_cycle(steering);
 8004b82:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b86:	f7ff fcdd 	bl	8004544 <set_servo_duty_cycle>
 8004b8a:	e000      	b.n	8004b8e <_Z16command_callbackRKN8std_msgs15UInt8MultiArrayE+0x11e>
		return;
 8004b8c:	bf00      	nop

}
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	f3af 8000 	nop.w
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	40590000 	.word	0x40590000
 8004ba0:	00000000 	.word	0x00000000
 8004ba4:	408f4000 	.word	0x408f4000
 8004ba8:	58020400 	.word	0x58020400
 8004bac:	24004414 	.word	0x24004414
 8004bb0:	24004544 	.word	0x24004544
 8004bb4:	58020c00 	.word	0x58020c00
 8004bb8:	24004418 	.word	0x24004418

08004bbc <_Z9ros_setupv>:

ros::Subscriber<std_msgs::UInt8MultiArray> command_sub("Commands/stm32_cmd", &command_callback );

void ros_setup(){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0

	nh.initNode();
 8004bc0:	480e      	ldr	r0, [pc, #56]	; (8004bfc <_Z9ros_setupv+0x40>)
 8004bc2:	f000 fc67 	bl	8005494 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>
	nh.subscribe(command_sub);
 8004bc6:	490e      	ldr	r1, [pc, #56]	; (8004c00 <_Z9ros_setupv+0x44>)
 8004bc8:	480c      	ldr	r0, [pc, #48]	; (8004bfc <_Z9ros_setupv+0x40>)
 8004bca:	f000 fc8c 	bl	80054e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>

	sensor_msg.data_length = 2*wheel_speed_size + 4*force_size + sizeof(esc_sensor) + sizeof(jy901.JY901_data.acc) + sizeof(jy901.JY901_data.gyro)+sizeof(jy901.JY901_data.angle)+1;
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <_Z9ros_setupv+0x48>)
 8004bd0:	226d      	movs	r2, #109	; 0x6d
 8004bd2:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_msg.data = new std_msgs::UInt8MultiArray::_data_type[sensor_msg.data_length];
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <_Z9ros_setupv+0x48>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f00f fbca 	bl	8014372 <_Znaj>
 8004bde:	4603      	mov	r3, r0
 8004be0:	461a      	mov	r2, r3
 8004be2:	4b08      	ldr	r3, [pc, #32]	; (8004c04 <_Z9ros_setupv+0x48>)
 8004be4:	62da      	str	r2, [r3, #44]	; 0x2c

	//ros_pub = new ros::Publisher("stm32_sensor", &sensor_msg);
	nh.advertise(ros_pub);
 8004be6:	4908      	ldr	r1, [pc, #32]	; (8004c08 <_Z9ros_setupv+0x4c>)
 8004be8:	4804      	ldr	r0, [pc, #16]	; (8004bfc <_Z9ros_setupv+0x40>)
 8004bea:	f000 fca9 	bl	8005540 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>
	HAL_Delay(1000);
 8004bee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bf2:	f002 f99f 	bl	8006f34 <HAL_Delay>
}
 8004bf6:	bf00      	nop
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	24001ba0 	.word	0x24001ba0
 8004c00:	2400454c 	.word	0x2400454c
 8004c04:	24004334 	.word	0x24004334
 8004c08:	24004364 	.word	0x24004364

08004c0c <_Z15read_parametersv>:
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
}

//w25q64
void read_parameters(){
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 8004c12:	f7fc f83f 	bl	8000c94 <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 8004c16:	f7fc f845 	bl	8000ca4 <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004c1a:	1d3b      	adds	r3, r7, #4
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc fa3d 	bl	800109c <QSPI_W25Q64JV_DeviceID>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <_Z15read_parametersv+0x2c>
	    printf("Initializing ROM\n");
 8004c32:	4820      	ldr	r0, [pc, #128]	; (8004cb4 <_Z15read_parametersv+0xa8>)
 8004c34:	f010 fa0a 	bl	801504c <puts>
	}
	printf("Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 8004c38:	793b      	ldrb	r3, [r7, #4]
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	797b      	ldrb	r3, [r7, #5]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	481d      	ldr	r0, [pc, #116]	; (8004cb8 <_Z15read_parametersv+0xac>)
 8004c42:	f010 f99d 	bl	8014f80 <iprintf>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 8004c46:	463b      	mov	r3, r7
 8004c48:	2204      	movs	r2, #4
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fc f8a7 	bl	8000da0 <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 8004c52:	783b      	ldrb	r3, [r7, #0]
 8004c54:	2b61      	cmp	r3, #97	; 0x61
 8004c56:	d108      	bne.n	8004c6a <_Z15read_parametersv+0x5e>
 8004c58:	787b      	ldrb	r3, [r7, #1]
 8004c5a:	2b63      	cmp	r3, #99	; 0x63
 8004c5c:	d105      	bne.n	8004c6a <_Z15read_parametersv+0x5e>
 8004c5e:	78bb      	ldrb	r3, [r7, #2]
 8004c60:	2b73      	cmp	r3, #115	; 0x73
 8004c62:	d102      	bne.n	8004c6a <_Z15read_parametersv+0x5e>
 8004c64:	78fb      	ldrb	r3, [r7, #3]
 8004c66:	2b72      	cmp	r3, #114	; 0x72
 8004c68:	d003      	beq.n	8004c72 <_Z15read_parametersv+0x66>
		printf("Reading parameters fails, use default parameters\n");
 8004c6a:	4814      	ldr	r0, [pc, #80]	; (8004cbc <_Z15read_parametersv+0xb0>)
 8004c6c:	f010 f9ee 	bl	801504c <puts>
		return;
 8004c70:	e01c      	b.n	8004cac <_Z15read_parametersv+0xa0>
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 8004c72:	226c      	movs	r2, #108	; 0x6c
 8004c74:	2100      	movs	r1, #0
 8004c76:	4812      	ldr	r0, [pc, #72]	; (8004cc0 <_Z15read_parametersv+0xb4>)
 8004c78:	f7fc f892 	bl	8000da0 <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004c7c:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <_Z15read_parametersv+0xb4>)
 8004c7e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004c82:	2b62      	cmp	r3, #98	; 0x62
 8004c84:	d10e      	bne.n	8004ca4 <_Z15read_parametersv+0x98>
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <_Z15read_parametersv+0xb4>)
 8004c88:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8004c8c:	2b34      	cmp	r3, #52	; 0x34
 8004c8e:	d109      	bne.n	8004ca4 <_Z15read_parametersv+0x98>
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <_Z15read_parametersv+0xb4>)
 8004c92:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8004c96:	2b30      	cmp	r3, #48	; 0x30
 8004c98:	d104      	bne.n	8004ca4 <_Z15read_parametersv+0x98>
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <_Z15read_parametersv+0xb4>)
 8004c9c:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8004ca0:	2b31      	cmp	r3, #49	; 0x31
 8004ca2:	d003      	beq.n	8004cac <_Z15read_parametersv+0xa0>
		printf("Reading parameters fails, use default parameters\n");
 8004ca4:	4805      	ldr	r0, [pc, #20]	; (8004cbc <_Z15read_parametersv+0xb0>)
 8004ca6:	f010 f9d1 	bl	801504c <puts>
		return;
 8004caa:	bf00      	nop
	}
}
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08016f28 	.word	0x08016f28
 8004cb8:	08016f3c 	.word	0x08016f3c
 8004cbc:	08016f68 	.word	0x08016f68
 8004cc0:	24000004 	.word	0x24000004

08004cc4 <_Z9reset_pidv>:

void reset_pid(){
 8004cc4:	b590      	push	{r4, r7, lr}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af02      	add	r7, sp, #8
	//reset pid class
	if(pid_ptr)delete pid_ptr;
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <_Z9reset_pidv+0x74>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d007      	beq.n	8004ce2 <_Z9reset_pidv+0x1e>
 8004cd2:	4b19      	ldr	r3, [pc, #100]	; (8004d38 <_Z9reset_pidv+0x74>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <_Z9reset_pidv+0x1e>
 8004cda:	2130      	movs	r1, #48	; 0x30
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f00f fb35 	bl	801434c <_ZdlPvj>
	pid_ptr = new PID<float>(&current_esc_speed,&pid_esc_duty_cycle_output,&pid_speed_set,parameters.kp,parameters.ki,parameters.kd);
 8004ce2:	2030      	movs	r0, #48	; 0x30
 8004ce4:	f00f fb34 	bl	8014350 <_Znwj>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461c      	mov	r4, r3
 8004cec:	4b13      	ldr	r3, [pc, #76]	; (8004d3c <_Z9reset_pidv+0x78>)
 8004cee:	edd3 7a02 	vldr	s15, [r3, #8]
 8004cf2:	4b12      	ldr	r3, [pc, #72]	; (8004d3c <_Z9reset_pidv+0x78>)
 8004cf4:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cf8:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <_Z9reset_pidv+0x78>)
 8004cfa:	edd3 6a04 	vldr	s13, [r3, #16]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	eeb0 1a66 	vmov.f32	s2, s13
 8004d06:	eef0 0a47 	vmov.f32	s1, s14
 8004d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <_Z9reset_pidv+0x7c>)
 8004d10:	4a0c      	ldr	r2, [pc, #48]	; (8004d44 <_Z9reset_pidv+0x80>)
 8004d12:	490d      	ldr	r1, [pc, #52]	; (8004d48 <_Z9reset_pidv+0x84>)
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7fb fdcf 	bl	80008b8 <_ZN3PIDIfEC1EPfS1_S1_fffh>
 8004d1a:	4b07      	ldr	r3, [pc, #28]	; (8004d38 <_Z9reset_pidv+0x74>)
 8004d1c:	601c      	str	r4, [r3, #0]
	pid_ptr->set_output_limits(-1,+1);
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <_Z9reset_pidv+0x74>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004d26:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7fb fea4 	bl	8000a78 <_ZN3PIDIfE17set_output_limitsEff>
}
 8004d30:	bf00      	nop
 8004d32:	3704      	adds	r7, #4
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd90      	pop	{r4, r7, pc}
 8004d38:	24004544 	.word	0x24004544
 8004d3c:	24000004 	.word	0x24000004
 8004d40:	24004418 	.word	0x24004418
 8004d44:	2400441c 	.word	0x2400441c
 8004d48:	24004420 	.word	0x24004420

08004d4c <setup>:


void setup(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
	DWT_Init();
 8004d50:	f7fe fd42 	bl	80037d8 <_ZL8DWT_Initv>
	read_parameters();
 8004d54:	f7ff ff5a 	bl	8004c0c <_Z15read_parametersv>
	reset_pid();
 8004d58:	f7ff ffb4 	bl	8004cc4 <_Z9reset_pidv>
	uart_setup();
 8004d5c:	f7ff fcf0 	bl	8004740 <_Z10uart_setupv>
	adc_setup();
 8004d60:	f7ff fce0 	bl	8004724 <_Z9adc_setupv>
	ros_setup();
 8004d64:	f7ff ff2a 	bl	8004bbc <_Z9ros_setupv>
	timer_setup();
 8004d68:	f7ff fd96 	bl	8004898 <_Z11timer_setupv>
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2120      	movs	r1, #32
 8004d70:	4808      	ldr	r0, [pc, #32]	; (8004d94 <setup+0x48>)
 8004d72:	f006 ffa3 	bl	800bcbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8004d76:	2201      	movs	r2, #1
 8004d78:	2108      	movs	r1, #8
 8004d7a:	4807      	ldr	r0, [pc, #28]	; (8004d98 <setup+0x4c>)
 8004d7c:	f006 ff9e 	bl	800bcbc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)pid_mode);
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <setup+0x50>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	2120      	movs	r1, #32
 8004d88:	4805      	ldr	r0, [pc, #20]	; (8004da0 <setup+0x54>)
 8004d8a:	f006 ff97 	bl	800bcbc <HAL_GPIO_WritePin>
}
 8004d8e:	bf00      	nop
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	58020400 	.word	0x58020400
 8004d98:	58021000 	.word	0x58021000
 8004d9c:	24004414 	.word	0x24004414
 8004da0:	58020c00 	.word	0x58020c00

08004da4 <loop>:

uint8_t loop_index = 0;

void loop(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
	auto state = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin);
 8004daa:	2180      	movs	r1, #128	; 0x80
 8004dac:	4836      	ldr	r0, [pc, #216]	; (8004e88 <loop+0xe4>)
 8004dae:	f006 ff6d 	bl	800bc8c <HAL_GPIO_ReadPin>
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]

	if(state==GPIO_PIN_SET){
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d103      	bne.n	8004dc4 <loop+0x20>
		input_mode = INPUT_MODE_CONTROLLER;
 8004dbc:	4b33      	ldr	r3, [pc, #204]	; (8004e8c <loop+0xe8>)
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e005      	b.n	8004dd0 <loop+0x2c>
	}else if(state==GPIO_PIN_RESET){
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d102      	bne.n	8004dd0 <loop+0x2c>
		input_mode = INPUT_MODE_SOFTWARE;
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <loop+0xe8>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, state);
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	2108      	movs	r1, #8
 8004dd6:	482e      	ldr	r0, [pc, #184]	; (8004e90 <loop+0xec>)
 8004dd8:	f006 ff70 	bl	800bcbc <HAL_GPIO_WritePin>

	loop_index++;
 8004ddc:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <loop+0xf0>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <loop+0xf0>)
 8004de6:	701a      	strb	r2, [r3, #0]

	if(esc_receive_indicator <=5 )esc_receive_indicator++;
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <loop+0xf4>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	d805      	bhi.n	8004dfc <loop+0x58>
 8004df0:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <loop+0xf4>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	3301      	adds	r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <loop+0xf4>)
 8004dfa:	701a      	strb	r2, [r3, #0]
	if(f103_receive_indicator<=5)f103_receive_indicator++;
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <loop+0xf8>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d805      	bhi.n	8004e10 <loop+0x6c>
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <loop+0xf8>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	4b23      	ldr	r3, [pc, #140]	; (8004e9c <loop+0xf8>)
 8004e0e:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8004e10:	2064      	movs	r0, #100	; 0x64
 8004e12:	f002 f88f 	bl	8006f34 <HAL_Delay>
	if(loop_index==5){
 8004e16:	4b1f      	ldr	r3, [pc, #124]	; (8004e94 <loop+0xf0>)
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	2b05      	cmp	r3, #5
 8004e1c:	d12c      	bne.n	8004e78 <loop+0xd4>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8004e1e:	2140      	movs	r1, #64	; 0x40
 8004e20:	481b      	ldr	r0, [pc, #108]	; (8004e90 <loop+0xec>)
 8004e22:	f006 ff64 	bl	800bcee <HAL_GPIO_TogglePin>
		loop_index=0;
 8004e26:	4b1b      	ldr	r3, [pc, #108]	; (8004e94 <loop+0xf0>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]

		if(esc_receive_indicator>5)error_code = error_code | 0b00000001;
 8004e2c:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <loop+0xf4>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b05      	cmp	r3, #5
 8004e32:	d907      	bls.n	8004e44 <loop+0xa0>
 8004e34:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <loop+0xfc>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <loop+0xfc>)
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e006      	b.n	8004e52 <loop+0xae>
		else error_code = error_code & 0b11111110;
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <loop+0xfc>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	4b14      	ldr	r3, [pc, #80]	; (8004ea0 <loop+0xfc>)
 8004e50:	701a      	strb	r2, [r3, #0]

		if(f103_receive_indicator>5)error_code = error_code | 0b00000010;
 8004e52:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <loop+0xf8>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b05      	cmp	r3, #5
 8004e58:	d907      	bls.n	8004e6a <loop+0xc6>
 8004e5a:	4b11      	ldr	r3, [pc, #68]	; (8004ea0 <loop+0xfc>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f043 0302 	orr.w	r3, r3, #2
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <loop+0xfc>)
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e006      	b.n	8004e78 <loop+0xd4>
		else error_code = error_code & 0b11111101;
 8004e6a:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <loop+0xfc>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	f023 0302 	bic.w	r3, r3, #2
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <loop+0xfc>)
 8004e76:	701a      	strb	r2, [r3, #0]


	}
	HAL_IWDG_Refresh(&hiwdg1);
 8004e78:	480a      	ldr	r0, [pc, #40]	; (8004ea4 <loop+0x100>)
 8004e7a:	f006 ffbb 	bl	800bdf4 <HAL_IWDG_Refresh>
}
 8004e7e:	bf00      	nop
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	58020400 	.word	0x58020400
 8004e8c:	24004488 	.word	0x24004488
 8004e90:	58020c00 	.word	0x58020c00
 8004e94:	24004590 	.word	0x24004590
 8004e98:	240043ad 	.word	0x240043ad
 8004e9c:	240043ae 	.word	0x240043ae
 8004ea0:	240043ac 	.word	0x240043ac
 8004ea4:	240013c4 	.word	0x240013c4

08004ea8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
 8004eb6:	e00c      	b.n	8004ed2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	fa22 f103 	lsr.w	r1, r2, r3
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	b2ca      	uxtb	r2, r1
 8004eca:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d9ef      	bls.n	8004eb8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	e010      	b.n	8004f1e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6839      	ldr	r1, [r7, #0]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	440a      	add	r2, r1
 8004f06:	7812      	ldrb	r2, [r2, #0]
 8004f08:	4611      	mov	r1, r2
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	00d2      	lsls	r2, r2, #3
 8004f0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d9eb      	bls.n	8004efc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr

08004f32 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3304      	adds	r3, #4
  }
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b084      	sub	sp, #16
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe f8b2 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 8004f5c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f64:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d905      	bls.n	8004f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f86:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004f94:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d906      	bls.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d014      	beq.n	8004fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe f880 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	bf8c      	ite	hi
 8004fd0:	2301      	movhi	r3, #1
 8004fd2:	2300      	movls	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8004fda:	f06f 0301 	mvn.w	r3, #1
 8004fde:	e221      	b.n	8005424 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd ff9b 	bl	8002f20 <_ZN13STM32Hardware4readEv>
 8004fea:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f2c0 81fa 	blt.w	80053e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004ffa:	f8d3 2754 	ldr.w	r2, [r3, #1876]	; 0x754
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	4413      	add	r3, r2
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005008:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005012:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005016:	2b07      	cmp	r3, #7
 8005018:	d12b      	bne.n	8005072 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005020:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800502c:	f8c1 2750 	str.w	r2, [r1, #1872]	; 0x750
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	b2d1      	uxtb	r1, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	4413      	add	r3, r2
 8005038:	460a      	mov	r2, r1
 800503a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005044:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005048:	3b01      	subs	r3, #1
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005050:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800505a:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1a4      	bne.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005068:	461a      	mov	r2, r3
 800506a:	2308      	movs	r3, #8
 800506c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005070:	e79c      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005078:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800507c:	2b00      	cmp	r3, #0
 800507e:	d130      	bne.n	80050e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2bff      	cmp	r3, #255	; 0xff
 8005084:	d112      	bne.n	80050ac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x162>
        {
          mode_++;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800508c:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005090:	3301      	adds	r3, #1
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005098:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3314      	adds	r3, #20
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80050a6:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 80050aa:	e77f      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fe f805 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 80050b6:	4602      	mov	r2, r0
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c0:	4293      	cmp	r3, r2
 80050c2:	bf8c      	ite	hi
 80050c4:	2301      	movhi	r3, #1
 80050c6:	2300      	movls	r3, #0
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f43f af6e 	beq.w	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
          return SPIN_TIMEOUT;
 80050dc:	f06f 0301 	mvn.w	r3, #1
 80050e0:	e1a0      	b.n	8005424 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050e8:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d121      	bne.n	8005134 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2bfe      	cmp	r3, #254	; 0xfe
 80050f4:	d10b      	bne.n	800510e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1c4>
        {
          mode_++;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80050fc:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005100:	3301      	adds	r3, #1
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005108:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 800510c:	e74e      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005114:	461a      	mov	r2, r3
 8005116:	2300      	movs	r3, #0
 8005118:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          if (configured_ == false)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005122:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005126:	2b00      	cmp	r3, #0
 8005128:	f47f af40 	bne.w	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa37 	bl	80055a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
 8005132:	e73b      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800513a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800513e:	2b02      	cmp	r3, #2
 8005140:	d120      	bne.n	8005184 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005148:	461a      	mov	r2, r3
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        index_ = 0;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005156:	461a      	mov	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
        mode_++;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005164:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005168:	3301      	adds	r3, #1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005170:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte for calculating size checksum */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800517a:	461a      	mov	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 8005182:	e713      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800518a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800518e:	2b03      	cmp	r3, #3
 8005190:	d118      	bne.n	80051c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005198:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	021b      	lsls	r3, r3, #8
 80051a0:	4413      	add	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80051a8:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        mode_++;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051b2:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051b6:	3301      	adds	r3, #1
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80051be:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80051c2:	e6f3      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051ca:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d11f      	bne.n	8005212 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051d8:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80051dc:	425a      	negs	r2, r3
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	bf58      	it	pl
 80051e4:	4253      	negpl	r3, r2
 80051e6:	2bff      	cmp	r3, #255	; 0xff
 80051e8:	d10b      	bne.n	8005202 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2b8>
          mode_++;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051f0:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051f4:	3301      	adds	r3, #1
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80051fc:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005200:	e6d4      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005208:	461a      	mov	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005210:	e6cc      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005218:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800521c:	2b05      	cmp	r3, #5
 800521e:	d119      	bne.n	8005254 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_++;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005234:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005238:	3301      	adds	r3, #1
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005240:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte included in checksum */
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800524a:	461a      	mov	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 8005252:	e6ab      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800525a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800525e:	2b06      	cmp	r3, #6
 8005260:	d123      	bne.n	80052aa <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005268:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	021b      	lsls	r3, r3, #8
 8005270:	4413      	add	r3, r2
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005278:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_ = MODE_MESSAGE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005282:	461a      	mov	r2, r3
 8005284:	2307      	movs	r3, #7
 8005286:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if (bytes_ == 0)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005290:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005294:	2b00      	cmp	r3, #0
 8005296:	f47f ae89 	bne.w	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052a0:	461a      	mov	r2, r3
 80052a2:	2308      	movs	r3, #8
 80052a4:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80052a8:	e680      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052b0:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	f47f ae79 	bne.w	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052c0:	461a      	mov	r2, r3
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if ((checksum_ % 256) == 255)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052ce:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 80052d2:	425a      	negs	r2, r3
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	bf58      	it	pl
 80052da:	4253      	negpl	r3, r2
 80052dc:	2bff      	cmp	r3, #255	; 0xff
 80052de:	f47f ae65 	bne.w	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052e8:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d116      	bne.n	800531e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f955 	bl	80055a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f970 	bl	80055dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
            last_sync_receive_time = c_time;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005310:	461a      	mov	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
            return SPIN_ERR;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800531c:	e082      	b.n	8005424 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005324:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005328:	2b0a      	cmp	r3, #10
 800532a:	d107      	bne.n	800533c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005332:	4619      	mov	r1, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fa3b 	bl	80057b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>
 800533a:	e637      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005342:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005346:	2b06      	cmp	r3, #6
 8005348:	d111      	bne.n	800536e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	f242 736c 	movw	r3, #10092	; 0x276c
 8005350:	4413      	add	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005358:	4611      	mov	r1, r2
 800535a:	4618      	mov	r0, r3
 800535c:	f7fd fb23 	bl	80029a6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 800536c:	e61e      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005374:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005378:	2b0b      	cmp	r3, #11
 800537a:	d106      	bne.n	800538a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x440>
          {
            configured_ = false;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005382:	2200      	movs	r2, #0
 8005384:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8005388:	e610      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005390:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005394:	3b64      	subs	r3, #100	; 0x64
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f43f ae02 	beq.w	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ae:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80053b2:	3b64      	subs	r3, #100	; 0x64
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	6858      	ldr	r0, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053c6:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80053ca:	3b64      	subs	r3, #100	; 0x64
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80053e2:	4611      	mov	r1, r2
 80053e4:	4798      	blx	r3
    while (true)
 80053e6:	e5e1      	b.n	8004fac <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 80053e8:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053f0:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d014      	beq.n	8005422 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053fe:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800540a:	4293      	cmp	r3, r2
 800540c:	d909      	bls.n	8005422 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f8c6 	bl	80055a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800541a:	461a      	mov	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
    }

    return SPIN_OK;
 8005422:	2300      	movs	r3, #0
  }
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	4a04      	ldr	r2, [pc, #16]	; (8005448 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	08017094 	.word	0x08017094

0800544c <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4618      	mov	r0, r3
 800545e:	f7ff ffe5 	bl	800542c <_ZN3ros11Subscriber_C1Ev>
 8005462:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	330c      	adds	r3, #12
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe f8b7 	bl	80035e0 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
    cb_(cb),
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	641a      	str	r2, [r3, #64]	; 0x40
  {
    topic_ = topic_name;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
  };
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	08017020 	.word	0x08017020

08005494 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fd fd21 	bl	8002ee8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054ac:	461a      	mov	r2, r3
 80054ae:	2300      	movs	r3, #0
 80054b0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
    bytes_ = 0;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054ba:	461a      	mov	r2, r3
 80054bc:	2300      	movs	r3, #0
 80054be:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
    index_ = 0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
    topic_ = 0;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054d6:	461a      	mov	r2, r3
 80054d8:	2300      	movs	r3, #0
 80054da:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
  };
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e01a      	b.n	800552c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10e      	bne.n	8005526 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	605a      	str	r2, [r3, #4]
        return true;
 8005522:	2301      	movs	r3, #1
 8005524:	e006      	b.n	8005534 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b63      	cmp	r3, #99	; 0x63
 8005530:	dde1      	ble.n	80054f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8005532:	2300      	movs	r3, #0
  }
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	e01d      	b.n	800558c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d111      	bne.n	8005586 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	60da      	str	r2, [r3, #12]
        return true;
 8005582:	2301      	movs	r3, #1
 8005584:	e006      	b.n	8005594 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b63      	cmp	r3, #99	; 0x63
 8005590:	ddde      	ble.n	8005550 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8005592:	2300      	movs	r3, #0
  }
 8005594:	4618      	mov	r0, r3
 8005596:	3714      	adds	r7, #20
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b086      	sub	sp, #24
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	4618      	mov	r0, r3
 80055ae:	f7fc fd57 	bl	8002060 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f107 020c 	add.w	r2, r7, #12
 80055bc:	210a      	movs	r1, #10
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
    rt_time = hardware_.time();
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3304      	adds	r3, #4
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd fd7a 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 80055cc:	4602      	mov	r2, r0
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80055d4:	bf00      	nop
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80055dc:	b590      	push	{r4, r7, lr}
 80055de:	b08b      	sub	sp, #44	; 0x2c
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80055e4:	f107 030c 	add.w	r3, r7, #12
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fc fe29 	bl	8002240 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80055ee:	2300      	movs	r3, #0
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	e062      	b.n	80056ba <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d056      	beq.n	80056b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	b29b      	uxth	r3, r3
 8005618:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	6859      	ldr	r1, [r3, #4]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3308      	adds	r3, #8
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4608      	mov	r0, r1
 8005654:	4798      	blx	r3
 8005656:	4603      	mov	r3, r0
 8005658:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	6859      	ldr	r1, [r3, #4]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	4413      	add	r3, r2
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4608      	mov	r0, r1
 8005682:	4798      	blx	r3
 8005684:	4603      	mov	r3, r0
 8005686:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800568c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681c      	ldr	r4, [r3, #0]
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fd fb37 	bl	8002d16 <_ZN3ros9Publisher15getEndpointTypeEv>
 80056a8:	4601      	mov	r1, r0
 80056aa:	f107 030c 	add.w	r3, r7, #12
 80056ae:	461a      	mov	r2, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	3301      	adds	r3, #1
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056bc:	2b63      	cmp	r3, #99	; 0x63
 80056be:	dd99      	ble.n	80055f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	e067      	b.n	8005796 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d05b      	beq.n	8005790 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	4413      	add	r3, r2
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	6859      	ldr	r1, [r3, #4]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4608      	mov	r0, r1
 8005722:	4798      	blx	r3
 8005724:	4603      	mov	r3, r0
 8005726:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	4413      	add	r3, r2
 8005734:	6859      	ldr	r1, [r3, #4]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4608      	mov	r0, r1
 800574c:	4798      	blx	r3
 800574e:	4603      	mov	r3, r0
 8005750:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005756:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681c      	ldr	r4, [r3, #0]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	6859      	ldr	r1, [r3, #4]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3304      	adds	r3, #4
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4608      	mov	r0, r1
 8005782:	4798      	blx	r3
 8005784:	4601      	mov	r1, r0
 8005786:	f107 030c 	add.w	r3, r7, #12
 800578a:	461a      	mov	r2, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005792:	3301      	adds	r3, #1
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	2b63      	cmp	r3, #99	; 0x63
 800579a:	dd94      	ble.n	80056c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
  }
 80057a8:	bf00      	nop
 80057aa:	372c      	adds	r7, #44	; 0x2c
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}

080057b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fc fc4e 	bl	8002060 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fd fc79 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 80057ce:	4602      	mov	r2, r0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80057da:	f107 0308 	add.w	r3, r7, #8
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f7fc fcad 	bl	8002140 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	4916      	ldr	r1, [pc, #88]	; (8005844 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 80057ec:	fba1 1303 	umull	r1, r3, r1, r3
 80057f0:	099b      	lsrs	r3, r3, #6
 80057f2:	4413      	add	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80057f6:	6939      	ldr	r1, [r7, #16]
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	4b12      	ldr	r3, [pc, #72]	; (8005844 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 80057fc:	fba3 0302 	umull	r0, r3, r3, r2
 8005800:	099b      	lsrs	r3, r3, #6
 8005802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005806:	fb00 f303 	mul.w	r3, r0, r3
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	4a0e      	ldr	r2, [pc, #56]	; (8005848 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x98>)
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	440b      	add	r3, r1
 8005814:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005816:	f107 0308 	add.w	r3, r7, #8
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8c0 	bl	80059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4618      	mov	r0, r3
 800582a:	f7fd fc49 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 800582e:	4602      	mov	r2, r0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005836:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  }
 800583a:	bf00      	nop
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	10624dd3 	.word	0x10624dd3
 8005848:	000f4240 	.word	0x000f4240

0800584c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b63      	cmp	r3, #99	; 0x63
 800585c:	dd0b      	ble.n	8005876 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005864:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005868:	f083 0301 	eor.w	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005872:	2300      	movs	r3, #0
 8005874:	e090      	b.n	8005998 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	68f9      	ldr	r1, [r7, #12]
 800587e:	f241 4324 	movw	r3, #5156	; 0x1424
 8005882:	440b      	add	r3, r1
 8005884:	3307      	adds	r3, #7
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	4790      	blx	r2
 800588c:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005894:	22ff      	movs	r2, #255	; 0xff
 8005896:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a0:	22fe      	movs	r2, #254	; 0xfe
 80058a2:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b0:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	0a1b      	lsrs	r3, r3, #8
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058c4:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ce:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d8:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 80058dc:	4413      	add	r3, r2
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ea:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	b21b      	sxth	r3, r3
 8005900:	121b      	asrs	r3, r3, #8
 8005902:	b21b      	sxth	r3, r3
 8005904:	b2da      	uxtb	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800590c:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005914:	2305      	movs	r3, #5
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e00d      	b.n	8005936 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	441a      	add	r2, r3
 8005920:	f241 4324 	movw	r3, #5156	; 0x1424
 8005924:	4413      	add	r3, r2
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	4413      	add	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	3301      	adds	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	3306      	adds	r3, #6
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	429a      	cmp	r2, r3
 800593e:	ddec      	ble.n	800591a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3307      	adds	r3, #7
 8005944:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	425a      	negs	r2, r3
 800594a:	b2db      	uxtb	r3, r3
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	bf58      	it	pl
 8005950:	4253      	negpl	r3, r2
 8005952:	b2da      	uxtb	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	1c59      	adds	r1, r3, #1
 8005958:	6179      	str	r1, [r7, #20]
 800595a:	43d2      	mvns	r2, r2
 800595c:	b2d1      	uxtb	r1, r2
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	441a      	add	r2, r3
 8005962:	f241 4324 	movw	r3, #5156	; 0x1424
 8005966:	4413      	add	r3, r2
 8005968:	460a      	mov	r2, r1
 800596a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	dc0b      	bgt.n	800598c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1d18      	adds	r0, r3, #4
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	f241 4324 	movw	r3, #5156	; 0x1424
 800597e:	4413      	add	r3, r2
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	4619      	mov	r1, r3
 8005984:	f7fd fb56 	bl	8003034 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	e005      	b.n	8005998 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f848 	bl	8005a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8005994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	08016f9c 	.word	0x08016f9c

080059a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fd fb84 	bl	80030c0 <_ZN13STM32Hardware4timeEv>
 80059b8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4915      	ldr	r1, [pc, #84]	; (8005a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 80059c2:	fba1 1303 	umull	r1, r3, r1, r3
 80059c6:	099b      	lsrs	r3, r3, #6
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	1e5a      	subs	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6859      	ldr	r1, [r3, #4]
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4b0f      	ldr	r3, [pc, #60]	; (8005a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 80059da:	fba3 0302 	umull	r0, r3, r3, r2
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059e4:	fb00 f303 	mul.w	r3, r0, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 80059ec:	fb02 f303 	mul.w	r3, r2, r3
 80059f0:	1aca      	subs	r2, r1, r3
 80059f2:	4b0b      	ldr	r3, [pc, #44]	; (8005a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 80059f4:	4413      	add	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005a08:	4619      	mov	r1, r3
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	f001 f9aa 	bl	8006d64 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	10624dd3 	.word	0x10624dd3
 8005a1c:	000f4240 	.word	0x000f4240
 8005a20:	3b9aca00 	.word	0x3b9aca00

08005a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	2103      	movs	r1, #3
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f804 	bl	8005a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>
  }
 8005a38:	bf00      	nop
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005a4e:	f107 0314 	add.w	r3, r7, #20
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fc fdb8 	bl	80025c8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005a58:	7afb      	ldrb	r3, [r7, #11]
 8005a5a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f107 0214 	add.w	r2, r7, #20
 8005a6a:	2107      	movs	r1, #7
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	4798      	blx	r3
  }
 8005a70:	bf00      	nop
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <_Z41__static_initialization_and_destruction_0ii>:
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d11a      	bne.n	8005abe <_Z41__static_initialization_and_destruction_0ii+0x46>
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d115      	bne.n	8005abe <_Z41__static_initialization_and_destruction_0ii+0x46>
ros::NodeHandle nh;
 8005a92:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8005a94:	f7fd fec8 	bl	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>
std_msgs::UInt8MultiArray sensor_msg;
 8005a98:	480c      	ldr	r0, [pc, #48]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005a9a:	f7fd fda1 	bl	80035e0 <_ZN8std_msgs15UInt8MultiArrayC1Ev>
ros::Publisher ros_pub("stm32_sensor", &sensor_msg);
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8005aa2:	490b      	ldr	r1, [pc, #44]	; (8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8005aa4:	480b      	ldr	r0, [pc, #44]	; (8005ad4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8005aa6:	f7fd f90b 	bl	8002cc0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
CJY901 jy901(&huart8);
 8005aaa:	490b      	ldr	r1, [pc, #44]	; (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8005aac:	480b      	ldr	r0, [pc, #44]	; (8005adc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8005aae:	f7fa fe05 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
ros::Subscriber<std_msgs::UInt8MultiArray> command_sub("Commands/stm32_cmd", &command_callback );
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	4a0a      	ldr	r2, [pc, #40]	; (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8005ab6:	490b      	ldr	r1, [pc, #44]	; (8005ae4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8005ab8:	480b      	ldr	r0, [pc, #44]	; (8005ae8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8005aba:	f7ff fcc7 	bl	800544c <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvEC1EPKcPFvRKS2_Ei>
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	24001ba0 	.word	0x24001ba0
 8005acc:	24004334 	.word	0x24004334
 8005ad0:	08016fd8 	.word	0x08016fd8
 8005ad4:	24004364 	.word	0x24004364
 8005ad8:	24001624 	.word	0x24001624
 8005adc:	240044c0 	.word	0x240044c0
 8005ae0:	08004a71 	.word	0x08004a71
 8005ae4:	08016fe8 	.word	0x08016fe8
 8005ae8:	2400454c 	.word	0x2400454c

08005aec <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	330c      	adds	r3, #12
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fd fde5 	bl	80036cc <_ZN8std_msgs15UInt8MultiArray11deserializeEPh>
    this->cb_(msg);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	320c      	adds	r2, #12
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4798      	blx	r3
  }
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8005b16:	b480      	push	{r7}
 8005b18:	b083      	sub	sp, #12
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b082      	sub	sp, #8
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd fe30 	bl	80037a0 <_ZN8std_msgs15UInt8MultiArray7getTypeEv>
 8005b40:	4603      	mov	r3, r0
  }
 8005b42:	4618      	mov	r0, r3
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_ZN3ros10SubscriberIN8std_msgs15UInt8MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005b4a:	b580      	push	{r7, lr}
 8005b4c:	b082      	sub	sp, #8
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	330c      	adds	r3, #12
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fd fe30 	bl	80037bc <_ZN8std_msgs15UInt8MultiArray6getMD5Ev>
 8005b5c:	4603      	mov	r3, r0
  }
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3708      	adds	r7, #8
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
    return configured_;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b74:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
  };
 8005b78:	4618      	mov	r0, r3
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <_GLOBAL__sub_I_nh>:
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b8c:	2001      	movs	r0, #1
 8005b8e:	f7ff ff73 	bl	8005a78 <_Z41__static_initialization_and_destruction_0ii>
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <HAL_MspInit+0x30>)
 8005b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ba0:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <HAL_MspInit+0x30>)
 8005ba2:	f043 0302 	orr.w	r3, r3, #2
 8005ba6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <HAL_MspInit+0x30>)
 8005bac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	607b      	str	r3, [r7, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	58024400 	.word	0x58024400

08005bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b0bc      	sub	sp, #240	; 0xf0
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005be0:	f107 0318 	add.w	r3, r7, #24
 8005be4:	22c0      	movs	r2, #192	; 0xc0
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00f fb0f 	bl	801520c <memset>
  if(hadc->Instance==ADC1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a67      	ldr	r2, [pc, #412]	; (8005d90 <HAL_ADC_MspInit+0x1c8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	f040 80c6 	bne.w	8005d86 <HAL_ADC_MspInit+0x1be>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8005bfa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 8005c06:	230a      	movs	r3, #10
 8005c08:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 128;
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8005c12:	2302      	movs	r3, #2
 8005c14:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 8;
 8005c16:	2308      	movs	r3, #8
 8005c18:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 8005c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c1e:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8005c28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c30:	f107 0318 	add.w	r3, r7, #24
 8005c34:	4618      	mov	r0, r3
 8005c36:	f007 fd51 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 8005c40:	f7fc f9c2 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005c44:	4b53      	ldr	r3, [pc, #332]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c4a:	4a52      	ldr	r2, [pc, #328]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005c54:	4b4f      	ldr	r3, [pc, #316]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c62:	4b4c      	ldr	r3, [pc, #304]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c68:	4a4a      	ldr	r2, [pc, #296]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c6a:	f043 0304 	orr.w	r3, r3, #4
 8005c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c72:	4b48      	ldr	r3, [pc, #288]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c80:	4b44      	ldr	r3, [pc, #272]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c86:	4a43      	ldr	r2, [pc, #268]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c88:	f043 0301 	orr.w	r3, r3, #1
 8005c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c90:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c9e:	4b3d      	ldr	r3, [pc, #244]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ca4:	4a3b      	ldr	r2, [pc, #236]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005cae:	4b39      	ldr	r3, [pc, #228]	; (8005d94 <HAL_ADC_MspInit+0x1cc>)
 8005cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8005cbc:	2333      	movs	r3, #51	; 0x33
 8005cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cc2:	2303      	movs	r3, #3
 8005cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	4830      	ldr	r0, [pc, #192]	; (8005d98 <HAL_ADC_MspInit+0x1d0>)
 8005cd6:	f005 fe29 	bl	800b92c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8005cda:	2350      	movs	r3, #80	; 0x50
 8005cdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	482a      	ldr	r0, [pc, #168]	; (8005d9c <HAL_ADC_MspInit+0x1d4>)
 8005cf4:	f005 fe1a 	bl	800b92c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d0a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d0e:	4619      	mov	r1, r3
 8005d10:	4823      	ldr	r0, [pc, #140]	; (8005da0 <HAL_ADC_MspInit+0x1d8>)
 8005d12:	f005 fe0b 	bl	800b92c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d18:	4a23      	ldr	r2, [pc, #140]	; (8005da8 <HAL_ADC_MspInit+0x1e0>)
 8005d1a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005d1c:	4b21      	ldr	r3, [pc, #132]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d1e:	2209      	movs	r2, #9
 8005d20:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d22:	4b20      	ldr	r3, [pc, #128]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d28:	4b1e      	ldr	r3, [pc, #120]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005d2e:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d36:	4b1b      	ldr	r3, [pc, #108]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d3e:	4b19      	ldr	r3, [pc, #100]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005d44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005d46:	4b17      	ldr	r3, [pc, #92]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005d4e:	4b15      	ldr	r3, [pc, #84]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d50:	2200      	movs	r2, #0
 8005d52:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d56:	2200      	movs	r2, #0
 8005d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005d5a:	4812      	ldr	r0, [pc, #72]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d5c:	f002 ffaa 	bl	8008cb4 <HAL_DMA_Init>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 8005d66:	f7fc f92f 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a0d      	ldr	r2, [pc, #52]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d6e:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d70:	4a0c      	ldr	r2, [pc, #48]	; (8005da4 <HAL_ADC_MspInit+0x1dc>)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005d76:	2200      	movs	r2, #0
 8005d78:	2100      	movs	r1, #0
 8005d7a:	2012      	movs	r0, #18
 8005d7c:	f002 ff65 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005d80:	2012      	movs	r0, #18
 8005d82:	f002 ff7c 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005d86:	bf00      	nop
 8005d88:	37f0      	adds	r7, #240	; 0xf0
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40022000 	.word	0x40022000
 8005d94:	58024400 	.word	0x58024400
 8005d98:	58020800 	.word	0x58020800
 8005d9c:	58020000 	.word	0x58020000
 8005da0:	58020400 	.word	0x58020400
 8005da4:	2400134c 	.word	0x2400134c
 8005da8:	40020028 	.word	0x40020028

08005dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b0c4      	sub	sp, #272	; 0x110
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005db6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005dba:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	609a      	str	r2, [r3, #8]
 8005dc8:	60da      	str	r2, [r3, #12]
 8005dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005dd0:	22c0      	movs	r2, #192	; 0xc0
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f00f fa19 	bl	801520c <memset>
  if(huart->Instance==LPUART1)
 8005dda:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005dde:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4aa7      	ldr	r2, [pc, #668]	; (8006084 <HAL_UART_MspInit+0x2d8>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	f040 8084 	bne.w	8005ef6 <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005dee:	f04f 0204 	mov.w	r2, #4
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005e04:	4618      	mov	r0, r3
 8005e06:	f007 fc69 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 8005e10:	f7fc f8da 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005e14:	4b9c      	ldr	r3, [pc, #624]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e1a:	4a9b      	ldr	r2, [pc, #620]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005e1c:	f043 0308 	orr.w	r3, r3, #8
 8005e20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005e24:	4b98      	ldr	r3, [pc, #608]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e32:	4b95      	ldr	r3, [pc, #596]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e38:	4a93      	ldr	r2, [pc, #588]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005e3a:	f043 0301 	orr.w	r3, r3, #1
 8005e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e42:	4b91      	ldr	r3, [pc, #580]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005e50:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005e54:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e58:	2302      	movs	r3, #2
 8005e5a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005e74:	4619      	mov	r1, r3
 8005e76:	4885      	ldr	r0, [pc, #532]	; (800608c <HAL_UART_MspInit+0x2e0>)
 8005e78:	f005 fd58 	bl	800b92c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8005e7c:	4b84      	ldr	r3, [pc, #528]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005e7e:	4a85      	ldr	r2, [pc, #532]	; (8006094 <HAL_UART_MspInit+0x2e8>)
 8005e80:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 8005e82:	4b83      	ldr	r3, [pc, #524]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005e84:	2209      	movs	r2, #9
 8005e86:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e88:	4b81      	ldr	r3, [pc, #516]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e8e:	4b80      	ldr	r3, [pc, #512]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005e90:	2200      	movs	r2, #0
 8005e92:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e94:	4b7e      	ldr	r3, [pc, #504]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e9a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e9c:	4b7c      	ldr	r3, [pc, #496]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ea2:	4b7b      	ldr	r3, [pc, #492]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8005ea8:	4b79      	ldr	r3, [pc, #484]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eae:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005eb0:	4b77      	ldr	r3, [pc, #476]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8005eb6:	4876      	ldr	r0, [pc, #472]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005eb8:	f002 fefc 	bl	8008cb4 <HAL_DMA_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 8005ec2:	f7fc f881 	bl	8001fc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8005ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a6f      	ldr	r2, [pc, #444]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005ed2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005ed6:	4a6e      	ldr	r2, [pc, #440]	; (8006090 <HAL_UART_MspInit+0x2e4>)
 8005ed8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005edc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	208e      	movs	r0, #142	; 0x8e
 8005eea:	f002 feae 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8005eee:	208e      	movs	r0, #142	; 0x8e
 8005ef0:	f002 fec5 	bl	8008c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8005ef4:	e2d4      	b.n	80064a0 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART4)
 8005ef6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005efa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a65      	ldr	r2, [pc, #404]	; (8006098 <HAL_UART_MspInit+0x2ec>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	f040 80d3 	bne.w	80060b0 <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005f0a:	f04f 0202 	mov.w	r2, #2
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005f16:	2300      	movs	r3, #0
 8005f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f20:	4618      	mov	r0, r3
 8005f22:	f007 fbdb 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <HAL_UART_MspInit+0x184>
      Error_Handler();
 8005f2c:	f7fc f84c 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005f30:	4b55      	ldr	r3, [pc, #340]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f36:	4a54      	ldr	r2, [pc, #336]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005f38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005f40:	4b51      	ldr	r3, [pc, #324]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005f42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005f4e:	4b4e      	ldr	r3, [pc, #312]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f54:	4a4c      	ldr	r2, [pc, #304]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005f56:	f043 0308 	orr.w	r3, r3, #8
 8005f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005f5e:	4b4a      	ldr	r3, [pc, #296]	; (8006088 <HAL_UART_MspInit+0x2dc>)
 8005f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f72:	2302      	movs	r3, #2
 8005f74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005f84:	2308      	movs	r3, #8
 8005f86:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f8a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4842      	ldr	r0, [pc, #264]	; (800609c <HAL_UART_MspInit+0x2f0>)
 8005f92:	f005 fccb 	bl	800b92c <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8005f96:	4b42      	ldr	r3, [pc, #264]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005f98:	4a42      	ldr	r2, [pc, #264]	; (80060a4 <HAL_UART_MspInit+0x2f8>)
 8005f9a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8005f9c:	4b40      	ldr	r3, [pc, #256]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005f9e:	223f      	movs	r2, #63	; 0x3f
 8005fa0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005fa2:	4b3f      	ldr	r3, [pc, #252]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005fa8:	4b3d      	ldr	r3, [pc, #244]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005fae:	4b3c      	ldr	r3, [pc, #240]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005fb4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fb6:	4b3a      	ldr	r3, [pc, #232]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fbc:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005fc8:	4b35      	ldr	r3, [pc, #212]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005fce:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fd0:	4b33      	ldr	r3, [pc, #204]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005fd6:	4832      	ldr	r0, [pc, #200]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005fd8:	f002 fe6c 	bl	8008cb4 <HAL_DMA_Init>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 8005fe2:	f7fb fff1 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005fe6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2b      	ldr	r2, [pc, #172]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005ff6:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <HAL_UART_MspInit+0x2f4>)
 8005ff8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005ffc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006004:	4b28      	ldr	r3, [pc, #160]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006006:	4a29      	ldr	r2, [pc, #164]	; (80060ac <HAL_UART_MspInit+0x300>)
 8006008:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800600a:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 800600c:	2240      	movs	r2, #64	; 0x40
 800600e:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006010:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006012:	2240      	movs	r2, #64	; 0x40
 8006014:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006016:	4b24      	ldr	r3, [pc, #144]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006018:	2200      	movs	r2, #0
 800601a:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800601c:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 800601e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006022:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006026:	2200      	movs	r2, #0
 8006028:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800602a:	4b1f      	ldr	r3, [pc, #124]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 800602c:	2200      	movs	r2, #0
 800602e:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8006030:	4b1d      	ldr	r3, [pc, #116]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006032:	2200      	movs	r2, #0
 8006034:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8006036:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006038:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800603c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006040:	2200      	movs	r2, #0
 8006042:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006044:	4818      	ldr	r0, [pc, #96]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006046:	f002 fe35 	bl	8008cb4 <HAL_DMA_Init>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_UART_MspInit+0x2a8>
      Error_Handler();
 8006050:	f7fb ffba 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8006054:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006058:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c
 8006062:	4a11      	ldr	r2, [pc, #68]	; (80060a8 <HAL_UART_MspInit+0x2fc>)
 8006064:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006068:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006070:	2200      	movs	r2, #0
 8006072:	2100      	movs	r1, #0
 8006074:	2034      	movs	r0, #52	; 0x34
 8006076:	f002 fde8 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800607a:	2034      	movs	r0, #52	; 0x34
 800607c:	f002 fdff 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 8006080:	e20e      	b.n	80064a0 <HAL_UART_MspInit+0x6f4>
 8006082:	bf00      	nop
 8006084:	58000c00 	.word	0x58000c00
 8006088:	58024400 	.word	0x58024400
 800608c:	58020000 	.word	0x58020000
 8006090:	240016b8 	.word	0x240016b8
 8006094:	58025408 	.word	0x58025408
 8006098:	40004c00 	.word	0x40004c00
 800609c:	58020c00 	.word	0x58020c00
 80060a0:	24001730 	.word	0x24001730
 80060a4:	40020058 	.word	0x40020058
 80060a8:	240017a8 	.word	0x240017a8
 80060ac:	40020070 	.word	0x40020070
  else if(huart->Instance==UART5)
 80060b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80060b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a9f      	ldr	r2, [pc, #636]	; (800633c <HAL_UART_MspInit+0x590>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	f040 8087 	bne.w	80061d2 <HAL_UART_MspInit+0x426>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80060c4:	f04f 0202 	mov.w	r2, #2
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80060d0:	2300      	movs	r3, #0
 80060d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80060da:	4618      	mov	r0, r3
 80060dc:	f007 fafe 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_UART_MspInit+0x33e>
      Error_Handler();
 80060e6:	f7fb ff6f 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80060ea:	4b95      	ldr	r3, [pc, #596]	; (8006340 <HAL_UART_MspInit+0x594>)
 80060ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80060f0:	4a93      	ldr	r2, [pc, #588]	; (8006340 <HAL_UART_MspInit+0x594>)
 80060f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80060fa:	4b91      	ldr	r3, [pc, #580]	; (8006340 <HAL_UART_MspInit+0x594>)
 80060fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006100:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006108:	4b8d      	ldr	r3, [pc, #564]	; (8006340 <HAL_UART_MspInit+0x594>)
 800610a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800610e:	4a8c      	ldr	r2, [pc, #560]	; (8006340 <HAL_UART_MspInit+0x594>)
 8006110:	f043 0302 	orr.w	r3, r3, #2
 8006114:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006118:	4b89      	ldr	r3, [pc, #548]	; (8006340 <HAL_UART_MspInit+0x594>)
 800611a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	623b      	str	r3, [r7, #32]
 8006124:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800612a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800612e:	2302      	movs	r3, #2
 8006130:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006134:	2300      	movs	r3, #0
 8006136:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800613a:	2300      	movs	r3, #0
 800613c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8006140:	230e      	movs	r3, #14
 8006142:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006146:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800614a:	4619      	mov	r1, r3
 800614c:	487d      	ldr	r0, [pc, #500]	; (8006344 <HAL_UART_MspInit+0x598>)
 800614e:	f005 fbed 	bl	800b92c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream5;
 8006152:	4b7d      	ldr	r3, [pc, #500]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006154:	4a7d      	ldr	r2, [pc, #500]	; (800634c <HAL_UART_MspInit+0x5a0>)
 8006156:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8006158:	4b7b      	ldr	r3, [pc, #492]	; (8006348 <HAL_UART_MspInit+0x59c>)
 800615a:	2241      	movs	r2, #65	; 0x41
 800615c:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800615e:	4b7a      	ldr	r3, [pc, #488]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006160:	2200      	movs	r2, #0
 8006162:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006164:	4b78      	ldr	r3, [pc, #480]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006166:	2200      	movs	r2, #0
 8006168:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800616a:	4b77      	ldr	r3, [pc, #476]	; (8006348 <HAL_UART_MspInit+0x59c>)
 800616c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006170:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006172:	4b75      	ldr	r3, [pc, #468]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006174:	2200      	movs	r2, #0
 8006176:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006178:	4b73      	ldr	r3, [pc, #460]	; (8006348 <HAL_UART_MspInit+0x59c>)
 800617a:	2200      	movs	r2, #0
 800617c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800617e:	4b72      	ldr	r3, [pc, #456]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006180:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006184:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006186:	4b70      	ldr	r3, [pc, #448]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006188:	2200      	movs	r2, #0
 800618a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800618c:	4b6e      	ldr	r3, [pc, #440]	; (8006348 <HAL_UART_MspInit+0x59c>)
 800618e:	2200      	movs	r2, #0
 8006190:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8006192:	486d      	ldr	r0, [pc, #436]	; (8006348 <HAL_UART_MspInit+0x59c>)
 8006194:	f002 fd8e 	bl	8008cb4 <HAL_DMA_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d001      	beq.n	80061a2 <HAL_UART_MspInit+0x3f6>
      Error_Handler();
 800619e:	f7fb ff13 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80061a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a66      	ldr	r2, [pc, #408]	; (8006348 <HAL_UART_MspInit+0x59c>)
 80061ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80061b2:	4a65      	ldr	r2, [pc, #404]	; (8006348 <HAL_UART_MspInit+0x59c>)
 80061b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80061c0:	2200      	movs	r2, #0
 80061c2:	2100      	movs	r1, #0
 80061c4:	2035      	movs	r0, #53	; 0x35
 80061c6:	f002 fd40 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80061ca:	2035      	movs	r0, #53	; 0x35
 80061cc:	f002 fd57 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 80061d0:	e166      	b.n	80064a0 <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART7)
 80061d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80061d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a5c      	ldr	r2, [pc, #368]	; (8006350 <HAL_UART_MspInit+0x5a4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	f040 80bf 	bne.w	8006364 <HAL_UART_MspInit+0x5b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80061e6:	f04f 0202 	mov.w	r2, #2
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80061fc:	4618      	mov	r0, r3
 80061fe:	f007 fa6d 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 8006202:	4603      	mov	r3, r0
 8006204:	2b00      	cmp	r3, #0
 8006206:	d001      	beq.n	800620c <HAL_UART_MspInit+0x460>
      Error_Handler();
 8006208:	f7fb fede 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800620c:	4b4c      	ldr	r3, [pc, #304]	; (8006340 <HAL_UART_MspInit+0x594>)
 800620e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006212:	4a4b      	ldr	r2, [pc, #300]	; (8006340 <HAL_UART_MspInit+0x594>)
 8006214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006218:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800621c:	4b48      	ldr	r3, [pc, #288]	; (8006340 <HAL_UART_MspInit+0x594>)
 800621e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006222:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006226:	61fb      	str	r3, [r7, #28]
 8006228:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800622a:	4b45      	ldr	r3, [pc, #276]	; (8006340 <HAL_UART_MspInit+0x594>)
 800622c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006230:	4a43      	ldr	r2, [pc, #268]	; (8006340 <HAL_UART_MspInit+0x594>)
 8006232:	f043 0310 	orr.w	r3, r3, #16
 8006236:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800623a:	4b41      	ldr	r3, [pc, #260]	; (8006340 <HAL_UART_MspInit+0x594>)
 800623c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	61bb      	str	r3, [r7, #24]
 8006246:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006248:	4b3d      	ldr	r3, [pc, #244]	; (8006340 <HAL_UART_MspInit+0x594>)
 800624a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800624e:	4a3c      	ldr	r2, [pc, #240]	; (8006340 <HAL_UART_MspInit+0x594>)
 8006250:	f043 0301 	orr.w	r3, r3, #1
 8006254:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006258:	4b39      	ldr	r3, [pc, #228]	; (8006340 <HAL_UART_MspInit+0x594>)
 800625a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006266:	f44f 7380 	mov.w	r3, #256	; 0x100
 800626a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800626e:	2302      	movs	r3, #2
 8006270:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8006280:	2307      	movs	r3, #7
 8006282:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006286:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800628a:	4619      	mov	r1, r3
 800628c:	4831      	ldr	r0, [pc, #196]	; (8006354 <HAL_UART_MspInit+0x5a8>)
 800628e:	f005 fb4d 	bl	800b92c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006296:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629a:	2302      	movs	r3, #2
 800629c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a0:	2300      	movs	r3, #0
 80062a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062a6:	2300      	movs	r3, #0
 80062a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 80062ac:	230b      	movs	r3, #11
 80062ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80062b6:	4619      	mov	r1, r3
 80062b8:	4827      	ldr	r0, [pc, #156]	; (8006358 <HAL_UART_MspInit+0x5ac>)
 80062ba:	f005 fb37 	bl	800b92c <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 80062be:	4b27      	ldr	r3, [pc, #156]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062c0:	4a27      	ldr	r2, [pc, #156]	; (8006360 <HAL_UART_MspInit+0x5b4>)
 80062c2:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062c6:	224f      	movs	r2, #79	; 0x4f
 80062c8:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062d0:	4b22      	ldr	r3, [pc, #136]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062dc:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062de:	4b1f      	ldr	r3, [pc, #124]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062e4:	4b1d      	ldr	r3, [pc, #116]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 80062ea:	4b1c      	ldr	r3, [pc, #112]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062f0:	4b1a      	ldr	r3, [pc, #104]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80062f6:	4b19      	ldr	r3, [pc, #100]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 80062fc:	4817      	ldr	r0, [pc, #92]	; (800635c <HAL_UART_MspInit+0x5b0>)
 80062fe:	f002 fcd9 	bl	8008cb4 <HAL_DMA_Init>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d001      	beq.n	800630c <HAL_UART_MspInit+0x560>
      Error_Handler();
 8006308:	f7fb fe5e 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 800630c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006310:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a11      	ldr	r2, [pc, #68]	; (800635c <HAL_UART_MspInit+0x5b0>)
 8006318:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800631c:	4a0f      	ldr	r2, [pc, #60]	; (800635c <HAL_UART_MspInit+0x5b0>)
 800631e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006322:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800632a:	2200      	movs	r2, #0
 800632c:	2100      	movs	r1, #0
 800632e:	2052      	movs	r0, #82	; 0x52
 8006330:	f002 fc8b 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8006334:	2052      	movs	r0, #82	; 0x52
 8006336:	f002 fca2 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 800633a:	e0b1      	b.n	80064a0 <HAL_UART_MspInit+0x6f4>
 800633c:	40005000 	.word	0x40005000
 8006340:	58024400 	.word	0x58024400
 8006344:	58020400 	.word	0x58020400
 8006348:	24001820 	.word	0x24001820
 800634c:	40020088 	.word	0x40020088
 8006350:	40007800 	.word	0x40007800
 8006354:	58021000 	.word	0x58021000
 8006358:	58020000 	.word	0x58020000
 800635c:	24001898 	.word	0x24001898
 8006360:	40020040 	.word	0x40020040
  else if(huart->Instance==UART8)
 8006364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a4e      	ldr	r2, [pc, #312]	; (80064ac <HAL_UART_MspInit+0x700>)
 8006372:	4293      	cmp	r3, r2
 8006374:	f040 8094 	bne.w	80064a0 <HAL_UART_MspInit+0x6f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006378:	f04f 0202 	mov.w	r2, #2
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006384:	2300      	movs	r3, #0
 8006386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800638a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800638e:	4618      	mov	r0, r3
 8006390:	f007 f9a4 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 800639a:	f7fb fe15 	bl	8001fc8 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800639e:	4b44      	ldr	r3, [pc, #272]	; (80064b0 <HAL_UART_MspInit+0x704>)
 80063a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063a4:	4a42      	ldr	r2, [pc, #264]	; (80064b0 <HAL_UART_MspInit+0x704>)
 80063a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063aa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063ae:	4b40      	ldr	r3, [pc, #256]	; (80064b0 <HAL_UART_MspInit+0x704>)
 80063b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063b4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80063b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063bc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063c6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80063ca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <HAL_UART_MspInit+0x704>)
 80063ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063d2:	4a37      	ldr	r2, [pc, #220]	; (80064b0 <HAL_UART_MspInit+0x704>)
 80063d4:	f043 0310 	orr.w	r3, r3, #16
 80063d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063dc:	4b34      	ldr	r3, [pc, #208]	; (80064b0 <HAL_UART_MspInit+0x704>)
 80063de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063e2:	f003 0210 	and.w	r2, r3, #16
 80063e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80063f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063f8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063fa:	2303      	movs	r3, #3
 80063fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006400:	2302      	movs	r3, #2
 8006402:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006406:	2300      	movs	r3, #0
 8006408:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006412:	2308      	movs	r3, #8
 8006414:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006418:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800641c:	4619      	mov	r1, r3
 800641e:	4825      	ldr	r0, [pc, #148]	; (80064b4 <HAL_UART_MspInit+0x708>)
 8006420:	f005 fa84 	bl	800b92c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 8006424:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006426:	4a25      	ldr	r2, [pc, #148]	; (80064bc <HAL_UART_MspInit+0x710>)
 8006428:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 800642a:	4b23      	ldr	r3, [pc, #140]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 800642c:	2251      	movs	r2, #81	; 0x51
 800642e:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006430:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006432:	2200      	movs	r2, #0
 8006434:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006436:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006438:	2200      	movs	r2, #0
 800643a:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 800643e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006442:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006444:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006446:	2200      	movs	r2, #0
 8006448:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800644a:	4b1b      	ldr	r3, [pc, #108]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 800644c:	2200      	movs	r2, #0
 800644e:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006452:	2200      	movs	r2, #0
 8006454:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006456:	4b18      	ldr	r3, [pc, #96]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006458:	2200      	movs	r2, #0
 800645a:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800645c:	4b16      	ldr	r3, [pc, #88]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 800645e:	2200      	movs	r2, #0
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006462:	4815      	ldr	r0, [pc, #84]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006464:	f002 fc26 	bl	8008cb4 <HAL_DMA_Init>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_UART_MspInit+0x6c6>
      Error_Handler();
 800646e:	f7fb fdab 	bl	8001fc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8006472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a0e      	ldr	r2, [pc, #56]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 800647e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006482:	4a0d      	ldr	r2, [pc, #52]	; (80064b8 <HAL_UART_MspInit+0x70c>)
 8006484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006488:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8006490:	2200      	movs	r2, #0
 8006492:	2100      	movs	r1, #0
 8006494:	2053      	movs	r0, #83	; 0x53
 8006496:	f002 fbd8 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800649a:	2053      	movs	r0, #83	; 0x53
 800649c:	f002 fbef 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 80064a0:	bf00      	nop
 80064a2:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	40007c00 	.word	0x40007c00
 80064b0:	58024400 	.word	0x58024400
 80064b4:	58021000 	.word	0x58021000
 80064b8:	24001910 	.word	0x24001910
 80064bc:	40020010 	.word	0x40020010

080064c0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b0bc      	sub	sp, #240	; 0xf0
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80064d8:	f107 0318 	add.w	r3, r7, #24
 80064dc:	22c0      	movs	r2, #192	; 0xc0
 80064de:	2100      	movs	r1, #0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f00e fe93 	bl	801520c <memset>
  if(hqspi->Instance==QUADSPI)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a55      	ldr	r2, [pc, #340]	; (8006640 <HAL_QSPI_MspInit+0x180>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	f040 80a3 	bne.w	8006638 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80064f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064f6:	f04f 0300 	mov.w	r3, #0
 80064fa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 80064fe:	2300      	movs	r3, #0
 8006500:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006502:	f107 0318 	add.w	r3, r7, #24
 8006506:	4618      	mov	r0, r3
 8006508:	f007 f8e8 	bl	800d6dc <HAL_RCCEx_PeriphCLKConfig>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8006512:	f7fb fd59 	bl	8001fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8006516:	4b4b      	ldr	r3, [pc, #300]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006518:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800651c:	4a49      	ldr	r2, [pc, #292]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 800651e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006522:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8006526:	4b47      	ldr	r3, [pc, #284]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006528:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800652c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006530:	617b      	str	r3, [r7, #20]
 8006532:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006534:	4b43      	ldr	r3, [pc, #268]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800653a:	4a42      	ldr	r2, [pc, #264]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 800653c:	f043 0310 	orr.w	r3, r3, #16
 8006540:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006544:	4b3f      	ldr	r3, [pc, #252]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006552:	4b3c      	ldr	r3, [pc, #240]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006558:	4a3a      	ldr	r2, [pc, #232]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 800655a:	f043 0302 	orr.w	r3, r3, #2
 800655e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006562:	4b38      	ldr	r3, [pc, #224]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	60fb      	str	r3, [r7, #12]
 800656e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006570:	4b34      	ldr	r3, [pc, #208]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006576:	4a33      	ldr	r2, [pc, #204]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006578:	f043 0308 	orr.w	r3, r3, #8
 800657c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006580:	4b30      	ldr	r3, [pc, #192]	; (8006644 <HAL_QSPI_MspInit+0x184>)
 8006582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800658e:	2304      	movs	r3, #4
 8006590:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006594:	2302      	movs	r3, #2
 8006596:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800659a:	2300      	movs	r3, #0
 800659c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80065a6:	2309      	movs	r3, #9
 80065a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80065b0:	4619      	mov	r1, r3
 80065b2:	4825      	ldr	r0, [pc, #148]	; (8006648 <HAL_QSPI_MspInit+0x188>)
 80065b4:	f005 f9ba 	bl	800b92c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80065b8:	2304      	movs	r3, #4
 80065ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065be:	2302      	movs	r3, #2
 80065c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ca:	2300      	movs	r3, #0
 80065cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80065d0:	2309      	movs	r3, #9
 80065d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80065da:	4619      	mov	r1, r3
 80065dc:	481b      	ldr	r0, [pc, #108]	; (800664c <HAL_QSPI_MspInit+0x18c>)
 80065de:	f005 f9a5 	bl	800b92c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80065e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80065e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ea:	2302      	movs	r3, #2
 80065ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065f6:	2300      	movs	r3, #0
 80065f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80065fc:	2309      	movs	r3, #9
 80065fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006602:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006606:	4619      	mov	r1, r3
 8006608:	4811      	ldr	r0, [pc, #68]	; (8006650 <HAL_QSPI_MspInit+0x190>)
 800660a:	f005 f98f 	bl	800b92c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006614:	2302      	movs	r3, #2
 8006616:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800661a:	2300      	movs	r3, #0
 800661c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006620:	2300      	movs	r3, #0
 8006622:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006626:	230a      	movs	r3, #10
 8006628:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800662c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006630:	4619      	mov	r1, r3
 8006632:	4806      	ldr	r0, [pc, #24]	; (800664c <HAL_QSPI_MspInit+0x18c>)
 8006634:	f005 f97a 	bl	800b92c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006638:	bf00      	nop
 800663a:	37f0      	adds	r7, #240	; 0xf0
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	52005000 	.word	0x52005000
 8006644:	58024400 	.word	0x58024400
 8006648:	58021000 	.word	0x58021000
 800664c:	58020400 	.word	0x58020400
 8006650:	58020c00 	.word	0x58020c00

08006654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b090      	sub	sp, #64	; 0x40
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800665c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006674:	d10f      	bne.n	8006696 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006676:	4b6d      	ldr	r3, [pc, #436]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 8006678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800667c:	4a6b      	ldr	r2, [pc, #428]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006686:	4b69      	ldr	r3, [pc, #420]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 8006688:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800668c:	f003 0301 	and.w	r3, r3, #1
 8006690:	62bb      	str	r3, [r7, #40]	; 0x28
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006694:	e0c5      	b.n	8006822 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a65      	ldr	r2, [pc, #404]	; (8006830 <HAL_TIM_Base_MspInit+0x1dc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d10f      	bne.n	80066c0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80066a0:	4b62      	ldr	r3, [pc, #392]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066a6:	4a61      	ldr	r2, [pc, #388]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066b0:	4b5e      	ldr	r3, [pc, #376]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
 80066bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066be:	e0b0      	b.n	8006822 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM5)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a5b      	ldr	r2, [pc, #364]	; (8006834 <HAL_TIM_Base_MspInit+0x1e0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d136      	bne.n	8006738 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80066ca:	4b58      	ldr	r3, [pc, #352]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066d0:	4a56      	ldr	r2, [pc, #344]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066d2:	f043 0308 	orr.w	r3, r3, #8
 80066d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066da:	4b54      	ldr	r3, [pc, #336]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066e0:	f003 0308 	and.w	r3, r3, #8
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e8:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ee:	4a4f      	ldr	r2, [pc, #316]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066f0:	f043 0301 	orr.w	r3, r3, #1
 80066f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066f8:	4b4c      	ldr	r3, [pc, #304]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80066fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	61fb      	str	r3, [r7, #28]
 8006704:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006706:	2301      	movs	r3, #1
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670a:	2302      	movs	r3, #2
 800670c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800670e:	2300      	movs	r3, #0
 8006710:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006712:	2300      	movs	r3, #0
 8006714:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006716:	2302      	movs	r3, #2
 8006718:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800671a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800671e:	4619      	mov	r1, r3
 8006720:	4845      	ldr	r0, [pc, #276]	; (8006838 <HAL_TIM_Base_MspInit+0x1e4>)
 8006722:	f005 f903 	bl	800b92c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006726:	2200      	movs	r2, #0
 8006728:	2100      	movs	r1, #0
 800672a:	2032      	movs	r0, #50	; 0x32
 800672c:	f002 fa8d 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006730:	2032      	movs	r0, #50	; 0x32
 8006732:	f002 faa4 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 8006736:	e074      	b.n	8006822 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM6)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a3f      	ldr	r2, [pc, #252]	; (800683c <HAL_TIM_Base_MspInit+0x1e8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d117      	bne.n	8006772 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006742:	4b3a      	ldr	r3, [pc, #232]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 8006744:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006748:	4a38      	ldr	r2, [pc, #224]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 800674a:	f043 0310 	orr.w	r3, r3, #16
 800674e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006752:	4b36      	ldr	r3, [pc, #216]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 8006754:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006758:	f003 0310 	and.w	r3, r3, #16
 800675c:	61bb      	str	r3, [r7, #24]
 800675e:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006760:	2200      	movs	r2, #0
 8006762:	2100      	movs	r1, #0
 8006764:	2036      	movs	r0, #54	; 0x36
 8006766:	f002 fa70 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800676a:	2036      	movs	r0, #54	; 0x36
 800676c:	f002 fa87 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 8006770:	e057      	b.n	8006822 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM15)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a32      	ldr	r2, [pc, #200]	; (8006840 <HAL_TIM_Base_MspInit+0x1ec>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d136      	bne.n	80067ea <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800677c:	4b2b      	ldr	r3, [pc, #172]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 800677e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006782:	4a2a      	ldr	r2, [pc, #168]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 8006784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006788:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 800678e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800679a:	4b24      	ldr	r3, [pc, #144]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 800679c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80067a2:	f043 0310 	orr.w	r3, r3, #16
 80067a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80067aa:	4b20      	ldr	r3, [pc, #128]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80067ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80067b8:	2320      	movs	r3, #32
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067bc:	2302      	movs	r3, #2
 80067be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067c4:	2300      	movs	r3, #0
 80067c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80067c8:	2304      	movs	r3, #4
 80067ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067d0:	4619      	mov	r1, r3
 80067d2:	481c      	ldr	r0, [pc, #112]	; (8006844 <HAL_TIM_Base_MspInit+0x1f0>)
 80067d4:	f005 f8aa 	bl	800b92c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	2074      	movs	r0, #116	; 0x74
 80067de:	f002 fa34 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80067e2:	2074      	movs	r0, #116	; 0x74
 80067e4:	f002 fa4b 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 80067e8:	e01b      	b.n	8006822 <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM16)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a16      	ldr	r2, [pc, #88]	; (8006848 <HAL_TIM_Base_MspInit+0x1f4>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d116      	bne.n	8006822 <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80067f4:	4b0d      	ldr	r3, [pc, #52]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80067f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067fa:	4a0c      	ldr	r2, [pc, #48]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <HAL_TIM_Base_MspInit+0x1d8>)
 8006806:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	2075      	movs	r0, #117	; 0x75
 8006818:	f002 fa17 	bl	8008c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800681c:	2075      	movs	r0, #117	; 0x75
 800681e:	f002 fa2e 	bl	8008c7e <HAL_NVIC_EnableIRQ>
}
 8006822:	bf00      	nop
 8006824:	3740      	adds	r7, #64	; 0x40
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	58024400 	.word	0x58024400
 8006830:	40000400 	.word	0x40000400
 8006834:	40000c00 	.word	0x40000c00
 8006838:	58020000 	.word	0x58020000
 800683c:	40001000 	.word	0x40001000
 8006840:	40014000 	.word	0x40014000
 8006844:	58021000 	.word	0x58021000
 8006848:	40014400 	.word	0x40014400

0800684c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08a      	sub	sp, #40	; 0x28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006854:	f107 0314 	add.w	r3, r7, #20
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	60da      	str	r2, [r3, #12]
 8006862:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800686c:	d120      	bne.n	80068b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800686e:	4b24      	ldr	r3, [pc, #144]	; (8006900 <HAL_TIM_MspPostInit+0xb4>)
 8006870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006874:	4a22      	ldr	r2, [pc, #136]	; (8006900 <HAL_TIM_MspPostInit+0xb4>)
 8006876:	f043 0301 	orr.w	r3, r3, #1
 800687a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800687e:	4b20      	ldr	r3, [pc, #128]	; (8006900 <HAL_TIM_MspPostInit+0xb4>)
 8006880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800688c:	f248 030e 	movw	r3, #32782	; 0x800e
 8006890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006892:	2302      	movs	r3, #2
 8006894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689a:	2300      	movs	r3, #0
 800689c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800689e:	2301      	movs	r3, #1
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a2:	f107 0314 	add.w	r3, r7, #20
 80068a6:	4619      	mov	r1, r3
 80068a8:	4816      	ldr	r0, [pc, #88]	; (8006904 <HAL_TIM_MspPostInit+0xb8>)
 80068aa:	f005 f83f 	bl	800b92c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80068ae:	e023      	b.n	80068f8 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a14      	ldr	r2, [pc, #80]	; (8006908 <HAL_TIM_MspPostInit+0xbc>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d11e      	bne.n	80068f8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068ba:	4b11      	ldr	r3, [pc, #68]	; (8006900 <HAL_TIM_MspPostInit+0xb4>)
 80068bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <HAL_TIM_MspPostInit+0xb4>)
 80068c2:	f043 0304 	orr.w	r3, r3, #4
 80068c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068ca:	4b0d      	ldr	r3, [pc, #52]	; (8006900 <HAL_TIM_MspPostInit+0xb4>)
 80068cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068d8:	23c0      	movs	r3, #192	; 0xc0
 80068da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068dc:	2302      	movs	r3, #2
 80068de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e0:	2300      	movs	r3, #0
 80068e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068e4:	2300      	movs	r3, #0
 80068e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068e8:	2302      	movs	r3, #2
 80068ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068ec:	f107 0314 	add.w	r3, r7, #20
 80068f0:	4619      	mov	r1, r3
 80068f2:	4806      	ldr	r0, [pc, #24]	; (800690c <HAL_TIM_MspPostInit+0xc0>)
 80068f4:	f005 f81a 	bl	800b92c <HAL_GPIO_Init>
}
 80068f8:	bf00      	nop
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	58024400 	.word	0x58024400
 8006904:	58020000 	.word	0x58020000
 8006908:	40000400 	.word	0x40000400
 800690c:	58020800 	.word	0x58020800

08006910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006910:	b480      	push	{r7}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006914:	e7fe      	b.n	8006914 <NMI_Handler+0x4>

08006916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006916:	b480      	push	{r7}
 8006918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800691a:	e7fe      	b.n	800691a <HardFault_Handler+0x4>

0800691c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006920:	e7fe      	b.n	8006920 <MemManage_Handler+0x4>

08006922 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006922:	b480      	push	{r7}
 8006924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006926:	e7fe      	b.n	8006926 <BusFault_Handler+0x4>

08006928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800692c:	e7fe      	b.n	800692c <UsageFault_Handler+0x4>

0800692e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800692e:	b480      	push	{r7}
 8006930:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006932:	bf00      	nop
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006940:	bf00      	nop
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800694a:	b480      	push	{r7}
 800694c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800694e:	bf00      	nop
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800695c:	f000 faca 	bl	8006ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006960:	bf00      	nop
 8006962:	bd80      	pop	{r7, pc}

08006964 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8006968:	4802      	ldr	r0, [pc, #8]	; (8006974 <DMA1_Stream0_IRQHandler+0x10>)
 800696a:	f003 fccd 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	24001910 	.word	0x24001910

08006978 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800697c:	4802      	ldr	r0, [pc, #8]	; (8006988 <DMA1_Stream1_IRQHandler+0x10>)
 800697e:	f003 fcc3 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2400134c 	.word	0x2400134c

0800698c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006990:	4802      	ldr	r0, [pc, #8]	; (800699c <DMA1_Stream2_IRQHandler+0x10>)
 8006992:	f003 fcb9 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006996:	bf00      	nop
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop
 800699c:	24001898 	.word	0x24001898

080069a0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80069a4:	4802      	ldr	r0, [pc, #8]	; (80069b0 <DMA1_Stream3_IRQHandler+0x10>)
 80069a6:	f003 fcaf 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	24001730 	.word	0x24001730

080069b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80069b8:	4802      	ldr	r0, [pc, #8]	; (80069c4 <DMA1_Stream4_IRQHandler+0x10>)
 80069ba:	f003 fca5 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	240017a8 	.word	0x240017a8

080069c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80069cc:	4802      	ldr	r0, [pc, #8]	; (80069d8 <DMA1_Stream5_IRQHandler+0x10>)
 80069ce:	f003 fc9b 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80069d2:	bf00      	nop
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	24001820 	.word	0x24001820

080069dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80069e0:	4802      	ldr	r0, [pc, #8]	; (80069ec <ADC_IRQHandler+0x10>)
 80069e2:	f000 ff45 	bl	8007870 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80069e6:	bf00      	nop
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	240012e8 	.word	0x240012e8

080069f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PID_MODE_INPUT_Pin);
 80069f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80069f8:	f005 f993 	bl	800bd22 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80069fc:	bf00      	nop
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006a04:	4802      	ldr	r0, [pc, #8]	; (8006a10 <TIM5_IRQHandler+0x10>)
 8006a06:	f00a f85d 	bl	8010ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006a0a:	bf00      	nop
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	24001a6c 	.word	0x24001a6c

08006a14 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006a18:	4802      	ldr	r0, [pc, #8]	; (8006a24 <UART4_IRQHandler+0x10>)
 8006a1a:	f00b fd5d 	bl	80124d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006a1e:	bf00      	nop
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	24001468 	.word	0x24001468

08006a28 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006a2c:	4802      	ldr	r0, [pc, #8]	; (8006a38 <UART5_IRQHandler+0x10>)
 8006a2e:	f00b fd53 	bl	80124d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006a32:	bf00      	nop
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	240014fc 	.word	0x240014fc

08006a3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006a40:	4802      	ldr	r0, [pc, #8]	; (8006a4c <TIM6_DAC_IRQHandler+0x10>)
 8006a42:	f00a f83f 	bl	8010ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006a46:	bf00      	nop
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	24001ab8 	.word	0x24001ab8

08006a50 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006a54:	4802      	ldr	r0, [pc, #8]	; (8006a60 <UART7_IRQHandler+0x10>)
 8006a56:	f00b fd3f 	bl	80124d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8006a5a:	bf00      	nop
 8006a5c:	bd80      	pop	{r7, pc}
 8006a5e:	bf00      	nop
 8006a60:	24001590 	.word	0x24001590

08006a64 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006a68:	4802      	ldr	r0, [pc, #8]	; (8006a74 <UART8_IRQHandler+0x10>)
 8006a6a:	f00b fd35 	bl	80124d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006a6e:	bf00      	nop
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	24001624 	.word	0x24001624

08006a78 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006a7c:	4802      	ldr	r0, [pc, #8]	; (8006a88 <TIM15_IRQHandler+0x10>)
 8006a7e:	f00a f821 	bl	8010ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006a82:	bf00      	nop
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	24001b04 	.word	0x24001b04

08006a8c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006a90:	4802      	ldr	r0, [pc, #8]	; (8006a9c <TIM16_IRQHandler+0x10>)
 8006a92:	f00a f817 	bl	8010ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006a96:	bf00      	nop
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	24001b50 	.word	0x24001b50

08006aa0 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006aa4:	4802      	ldr	r0, [pc, #8]	; (8006ab0 <BDMA_Channel0_IRQHandler+0x10>)
 8006aa6:	f003 fc2f 	bl	800a308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006aaa:	bf00      	nop
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	240016b8 	.word	0x240016b8

08006ab4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006ab8:	4802      	ldr	r0, [pc, #8]	; (8006ac4 <LPUART1_IRQHandler+0x10>)
 8006aba:	f00b fd0d 	bl	80124d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006abe:	bf00      	nop
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	240013d4 	.word	0x240013d4

08006ac8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return 1;
 8006acc:	2301      	movs	r3, #1
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <_kill>:

int _kill(int pid, int sig)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006ae2:	f00e fc39 	bl	8015358 <__errno>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2216      	movs	r2, #22
 8006aea:	601a      	str	r2, [r3, #0]
  return -1;
 8006aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <_exit>:

void _exit (int status)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006b00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ffe7 	bl	8006ad8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006b0a:	e7fe      	b.n	8006b0a <_exit+0x12>

08006b0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b18:	2300      	movs	r3, #0
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e00a      	b.n	8006b34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006b1e:	f3af 8000 	nop.w
 8006b22:	4601      	mov	r1, r0
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	60ba      	str	r2, [r7, #8]
 8006b2a:	b2ca      	uxtb	r2, r1
 8006b2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	3301      	adds	r3, #1
 8006b32:	617b      	str	r3, [r7, #20]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	dbf0      	blt.n	8006b1e <_read+0x12>
  }

  return len;
 8006b3c:	687b      	ldr	r3, [r7, #4]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b086      	sub	sp, #24
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	60f8      	str	r0, [r7, #12]
 8006b4e:	60b9      	str	r1, [r7, #8]
 8006b50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
 8006b56:	e009      	b.n	8006b6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	1c5a      	adds	r2, r3, #1
 8006b5c:	60ba      	str	r2, [r7, #8]
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7fa fad7 	bl	8001114 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	617b      	str	r3, [r7, #20]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	dbf1      	blt.n	8006b58 <_write+0x12>
  }
  return len;
 8006b74:	687b      	ldr	r3, [r7, #4]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <_close>:

int _close(int file)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006b96:	b480      	push	{r7}
 8006b98:	b083      	sub	sp, #12
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ba6:	605a      	str	r2, [r3, #4]
  return 0;
 8006ba8:	2300      	movs	r3, #0
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <_isatty>:

int _isatty(int file)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006bbe:	2301      	movs	r3, #1
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
	...

08006be8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006bf0:	4a14      	ldr	r2, [pc, #80]	; (8006c44 <_sbrk+0x5c>)
 8006bf2:	4b15      	ldr	r3, [pc, #84]	; (8006c48 <_sbrk+0x60>)
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006bfc:	4b13      	ldr	r3, [pc, #76]	; (8006c4c <_sbrk+0x64>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c04:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <_sbrk+0x64>)
 8006c06:	4a12      	ldr	r2, [pc, #72]	; (8006c50 <_sbrk+0x68>)
 8006c08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c0a:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <_sbrk+0x64>)
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4413      	add	r3, r2
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d207      	bcs.n	8006c28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c18:	f00e fb9e 	bl	8015358 <__errno>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	220c      	movs	r2, #12
 8006c20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c26:	e009      	b.n	8006c3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c28:	4b08      	ldr	r3, [pc, #32]	; (8006c4c <_sbrk+0x64>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c2e:	4b07      	ldr	r3, [pc, #28]	; (8006c4c <_sbrk+0x64>)
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	4a05      	ldr	r2, [pc, #20]	; (8006c4c <_sbrk+0x64>)
 8006c38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	24080000 	.word	0x24080000
 8006c48:	00000400 	.word	0x00000400
 8006c4c:	24004594 	.word	0x24004594
 8006c50:	240046f0 	.word	0x240046f0

08006c54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006c54:	b480      	push	{r7}
 8006c56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006c58:	4b37      	ldr	r3, [pc, #220]	; (8006d38 <SystemInit+0xe4>)
 8006c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5e:	4a36      	ldr	r2, [pc, #216]	; (8006d38 <SystemInit+0xe4>)
 8006c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006c68:	4b34      	ldr	r3, [pc, #208]	; (8006d3c <SystemInit+0xe8>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 030f 	and.w	r3, r3, #15
 8006c70:	2b06      	cmp	r3, #6
 8006c72:	d807      	bhi.n	8006c84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006c74:	4b31      	ldr	r3, [pc, #196]	; (8006d3c <SystemInit+0xe8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f023 030f 	bic.w	r3, r3, #15
 8006c7c:	4a2f      	ldr	r2, [pc, #188]	; (8006d3c <SystemInit+0xe8>)
 8006c7e:	f043 0307 	orr.w	r3, r3, #7
 8006c82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006c84:	4b2e      	ldr	r3, [pc, #184]	; (8006d40 <SystemInit+0xec>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a2d      	ldr	r2, [pc, #180]	; (8006d40 <SystemInit+0xec>)
 8006c8a:	f043 0301 	orr.w	r3, r3, #1
 8006c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006c90:	4b2b      	ldr	r3, [pc, #172]	; (8006d40 <SystemInit+0xec>)
 8006c92:	2200      	movs	r2, #0
 8006c94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006c96:	4b2a      	ldr	r3, [pc, #168]	; (8006d40 <SystemInit+0xec>)
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	4929      	ldr	r1, [pc, #164]	; (8006d40 <SystemInit+0xec>)
 8006c9c:	4b29      	ldr	r3, [pc, #164]	; (8006d44 <SystemInit+0xf0>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006ca2:	4b26      	ldr	r3, [pc, #152]	; (8006d3c <SystemInit+0xe8>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006cae:	4b23      	ldr	r3, [pc, #140]	; (8006d3c <SystemInit+0xe8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 030f 	bic.w	r3, r3, #15
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <SystemInit+0xe8>)
 8006cb8:	f043 0307 	orr.w	r3, r3, #7
 8006cbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8006cbe:	4b20      	ldr	r3, [pc, #128]	; (8006d40 <SystemInit+0xec>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8006cc4:	4b1e      	ldr	r3, [pc, #120]	; (8006d40 <SystemInit+0xec>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8006cca:	4b1d      	ldr	r3, [pc, #116]	; (8006d40 <SystemInit+0xec>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8006cd0:	4b1b      	ldr	r3, [pc, #108]	; (8006d40 <SystemInit+0xec>)
 8006cd2:	4a1d      	ldr	r2, [pc, #116]	; (8006d48 <SystemInit+0xf4>)
 8006cd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006cd6:	4b1a      	ldr	r3, [pc, #104]	; (8006d40 <SystemInit+0xec>)
 8006cd8:	4a1c      	ldr	r2, [pc, #112]	; (8006d4c <SystemInit+0xf8>)
 8006cda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8006cdc:	4b18      	ldr	r3, [pc, #96]	; (8006d40 <SystemInit+0xec>)
 8006cde:	4a1c      	ldr	r2, [pc, #112]	; (8006d50 <SystemInit+0xfc>)
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006ce2:	4b17      	ldr	r3, [pc, #92]	; (8006d40 <SystemInit+0xec>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006ce8:	4b15      	ldr	r3, [pc, #84]	; (8006d40 <SystemInit+0xec>)
 8006cea:	4a19      	ldr	r2, [pc, #100]	; (8006d50 <SystemInit+0xfc>)
 8006cec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006cee:	4b14      	ldr	r3, [pc, #80]	; (8006d40 <SystemInit+0xec>)
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006cf4:	4b12      	ldr	r3, [pc, #72]	; (8006d40 <SystemInit+0xec>)
 8006cf6:	4a16      	ldr	r2, [pc, #88]	; (8006d50 <SystemInit+0xfc>)
 8006cf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006cfa:	4b11      	ldr	r3, [pc, #68]	; (8006d40 <SystemInit+0xec>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006d00:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <SystemInit+0xec>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a0e      	ldr	r2, [pc, #56]	; (8006d40 <SystemInit+0xec>)
 8006d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	; (8006d40 <SystemInit+0xec>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <SystemInit+0x100>)
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b10      	ldr	r3, [pc, #64]	; (8006d58 <SystemInit+0x104>)
 8006d18:	4013      	ands	r3, r2
 8006d1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d1e:	d202      	bcs.n	8006d26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <SystemInit+0x108>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006d26:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <SystemInit+0x10c>)
 8006d28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8006d2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006d2e:	bf00      	nop
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr
 8006d38:	e000ed00 	.word	0xe000ed00
 8006d3c:	52002000 	.word	0x52002000
 8006d40:	58024400 	.word	0x58024400
 8006d44:	eaf6ed7f 	.word	0xeaf6ed7f
 8006d48:	02020200 	.word	0x02020200
 8006d4c:	01ff0000 	.word	0x01ff0000
 8006d50:	01010280 	.word	0x01010280
 8006d54:	5c001000 	.word	0x5c001000
 8006d58:	ffff0000 	.word	0xffff0000
 8006d5c:	51008108 	.word	0x51008108
 8006d60:	52004000 	.word	0x52004000

08006d64 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	0a5a      	lsrs	r2, r3, #9
 8006d74:	490f      	ldr	r1, [pc, #60]	; (8006db4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006d76:	fba1 1202 	umull	r1, r2, r1, r2
 8006d7a:	09d2      	lsrs	r2, r2, #7
 8006d7c:	490e      	ldr	r1, [pc, #56]	; (8006db8 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8006d7e:	fb01 f202 	mul.w	r2, r1, r2
 8006d82:	1a9b      	subs	r3, r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	0a5b      	lsrs	r3, r3, #9
 8006d8c:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8006d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d92:	09db      	lsrs	r3, r3, #7
 8006d94:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	441a      	add	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	601a      	str	r2, [r3, #0]
}
 8006da8:	bf00      	nop
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr
 8006db4:	00044b83 	.word	0x00044b83
 8006db8:	3b9aca00 	.word	0x3b9aca00

08006dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006df4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006dc0:	f7ff ff48 	bl	8006c54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006dc4:	480c      	ldr	r0, [pc, #48]	; (8006df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006dc6:	490d      	ldr	r1, [pc, #52]	; (8006dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006dc8:	4a0d      	ldr	r2, [pc, #52]	; (8006e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006dcc:	e002      	b.n	8006dd4 <LoopCopyDataInit>

08006dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dd2:	3304      	adds	r3, #4

08006dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006dd8:	d3f9      	bcc.n	8006dce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dda:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006ddc:	4c0a      	ldr	r4, [pc, #40]	; (8006e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006de0:	e001      	b.n	8006de6 <LoopFillZerobss>

08006de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006de4:	3204      	adds	r2, #4

08006de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006de8:	d3fb      	bcc.n	8006de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006dea:	f00e fabb 	bl	8015364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006dee:	f7fa f9a3 	bl	8001138 <main>
  bx  lr
 8006df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006df4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006df8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006dfc:	24000248 	.word	0x24000248
  ldr r2, =_sidata
 8006e00:	080174fc 	.word	0x080174fc
  ldr r2, =_sbss
 8006e04:	24000248 	.word	0x24000248
  ldr r4, =_ebss
 8006e08:	240046ec 	.word	0x240046ec

08006e0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e0c:	e7fe      	b.n	8006e0c <ADC3_IRQHandler>
	...

08006e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e16:	2003      	movs	r0, #3
 8006e18:	f001 ff0c 	bl	8008c34 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e1c:	f006 fa88 	bl	800d330 <HAL_RCC_GetSysClockFreq>
 8006e20:	4602      	mov	r2, r0
 8006e22:	4b15      	ldr	r3, [pc, #84]	; (8006e78 <HAL_Init+0x68>)
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	4913      	ldr	r1, [pc, #76]	; (8006e7c <HAL_Init+0x6c>)
 8006e2e:	5ccb      	ldrb	r3, [r1, r3]
 8006e30:	f003 031f 	and.w	r3, r3, #31
 8006e34:	fa22 f303 	lsr.w	r3, r2, r3
 8006e38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	; (8006e78 <HAL_Init+0x68>)
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	4a0e      	ldr	r2, [pc, #56]	; (8006e7c <HAL_Init+0x6c>)
 8006e44:	5cd3      	ldrb	r3, [r2, r3]
 8006e46:	f003 031f 	and.w	r3, r3, #31
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e50:	4a0b      	ldr	r2, [pc, #44]	; (8006e80 <HAL_Init+0x70>)
 8006e52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006e54:	4a0b      	ldr	r2, [pc, #44]	; (8006e84 <HAL_Init+0x74>)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006e5a:	200f      	movs	r0, #15
 8006e5c:	f000 f814 	bl	8006e88 <HAL_InitTick>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e002      	b.n	8006e70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006e6a:	f7fe fe93 	bl	8005b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3708      	adds	r7, #8
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	58024400 	.word	0x58024400
 8006e7c:	08017130 	.word	0x08017130
 8006e80:	24000074 	.word	0x24000074
 8006e84:	24000070 	.word	0x24000070

08006e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8006e90:	4b15      	ldr	r3, [pc, #84]	; (8006ee8 <HAL_InitTick+0x60>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e021      	b.n	8006ee0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_InitTick+0x64>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	4b11      	ldr	r3, [pc, #68]	; (8006ee8 <HAL_InitTick+0x60>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fef1 	bl	8008c9a <HAL_SYSTICK_Config>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d001      	beq.n	8006ec2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e00e      	b.n	8006ee0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2b0f      	cmp	r3, #15
 8006ec6:	d80a      	bhi.n	8006ede <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ec8:	2200      	movs	r2, #0
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ed0:	f001 febb 	bl	8008c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ed4:	4a06      	ldr	r2, [pc, #24]	; (8006ef0 <HAL_InitTick+0x68>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
 8006edc:	e000      	b.n	8006ee0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	2400007c 	.word	0x2400007c
 8006eec:	24000070 	.word	0x24000070
 8006ef0:	24000078 	.word	0x24000078

08006ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006ef8:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <HAL_IncTick+0x20>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <HAL_IncTick+0x24>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4413      	add	r3, r2
 8006f04:	4a04      	ldr	r2, [pc, #16]	; (8006f18 <HAL_IncTick+0x24>)
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	2400007c 	.word	0x2400007c
 8006f18:	24004598 	.word	0x24004598

08006f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f20:	4b03      	ldr	r3, [pc, #12]	; (8006f30 <HAL_GetTick+0x14>)
 8006f22:	681b      	ldr	r3, [r3, #0]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop
 8006f30:	24004598 	.word	0x24004598

08006f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f3c:	f7ff ffee 	bl	8006f1c <HAL_GetTick>
 8006f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f4c:	d005      	beq.n	8006f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_Delay+0x44>)
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	4413      	add	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006f5a:	bf00      	nop
 8006f5c:	f7ff ffde 	bl	8006f1c <HAL_GetTick>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d8f7      	bhi.n	8006f5c <HAL_Delay+0x28>
  {
  }
}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	2400007c 	.word	0x2400007c

08006f7c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006f80:	4b03      	ldr	r3, [pc, #12]	; (8006f90 <HAL_GetREVID+0x14>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	0c1b      	lsrs	r3, r3, #16
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	5c001000 	.word	0x5c001000

08006f94 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	609a      	str	r2, [r3, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b083      	sub	sp, #12
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	bf00      	nop
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3360      	adds	r3, #96	; 0x60
 800700e:	461a      	mov	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	430b      	orrs	r3, r1
 800702a:	431a      	orrs	r2, r3
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007030:	bf00      	nop
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	6879      	ldr	r1, [r7, #4]
 8007058:	fa01 f303 	lsl.w	r3, r1, r3
 800705c:	431a      	orrs	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	611a      	str	r2, [r3, #16]
}
 8007062:	bf00      	nop
 8007064:	3714      	adds	r7, #20
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800706e:	b480      	push	{r7}
 8007070:	b087      	sub	sp, #28
 8007072:	af00      	add	r7, sp, #0
 8007074:	60f8      	str	r0, [r7, #12]
 8007076:	60b9      	str	r1, [r7, #8]
 8007078:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3360      	adds	r3, #96	; 0x60
 800707e:	461a      	mov	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	431a      	orrs	r2, r3
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	601a      	str	r2, [r3, #0]
  }
}
 8007098:	bf00      	nop
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d101      	bne.n	80070bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3330      	adds	r3, #48	; 0x30
 80070da:	461a      	mov	r2, r3
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	f003 030c 	and.w	r3, r3, #12
 80070e6:	4413      	add	r3, r2
 80070e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	211f      	movs	r1, #31
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	43db      	mvns	r3, r3
 80070fc:	401a      	ands	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	0e9b      	lsrs	r3, r3, #26
 8007102:	f003 011f 	and.w	r1, r3, #31
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f003 031f 	and.w	r3, r3, #31
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	431a      	orrs	r2, r3
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8007122:	b480      	push	{r7}
 8007124:	b083      	sub	sp, #12
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f023 0203 	bic.w	r2, r3, #3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60da      	str	r2, [r3, #12]
}
 800713c:	bf00      	nop
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007154:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007158:	2b00      	cmp	r3, #0
 800715a:	d101      	bne.n	8007160 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800715c:	2301      	movs	r3, #1
 800715e:	e000      	b.n	8007162 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800716e:	b480      	push	{r7}
 8007170:	b087      	sub	sp, #28
 8007172:	af00      	add	r7, sp, #0
 8007174:	60f8      	str	r0, [r7, #12]
 8007176:	60b9      	str	r1, [r7, #8]
 8007178:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3314      	adds	r3, #20
 800717e:	461a      	mov	r2, r3
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	0e5b      	lsrs	r3, r3, #25
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	f003 0304 	and.w	r3, r3, #4
 800718a:	4413      	add	r3, r2
 800718c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	0d1b      	lsrs	r3, r3, #20
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	2107      	movs	r1, #7
 800719c:	fa01 f303 	lsl.w	r3, r1, r3
 80071a0:	43db      	mvns	r3, r3
 80071a2:	401a      	ands	r2, r3
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	0d1b      	lsrs	r3, r3, #20
 80071a8:	f003 031f 	and.w	r3, r3, #31
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	fa01 f303 	lsl.w	r3, r1, r3
 80071b2:	431a      	orrs	r2, r3
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071dc:	43db      	mvns	r3, r3
 80071de:	401a      	ands	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f003 0318 	and.w	r3, r3, #24
 80071e6:	4908      	ldr	r1, [pc, #32]	; (8007208 <LL_ADC_SetChannelSingleDiff+0x44>)
 80071e8:	40d9      	lsrs	r1, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	400b      	ands	r3, r1
 80071ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071f2:	431a      	orrs	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	000fffff 	.word	0x000fffff

0800720c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f003 031f 	and.w	r3, r3, #31
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007238:	4618      	mov	r0, r3
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	4b04      	ldr	r3, [pc, #16]	; (8007264 <LL_ADC_DisableDeepPowerDown+0x20>)
 8007252:	4013      	ands	r3, r2
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6093      	str	r3, [r2, #8]
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	5fffffc0 	.word	0x5fffffc0

08007268 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800727c:	d101      	bne.n	8007282 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800729e:	4013      	ands	r3, r2
 80072a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	6fffffc0 	.word	0x6fffffc0

080072b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072cc:	d101      	bne.n	80072d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	4b05      	ldr	r3, [pc, #20]	; (8007304 <LL_ADC_Enable+0x24>)
 80072ee:	4013      	ands	r3, r2
 80072f0:	f043 0201 	orr.w	r2, r3, #1
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	7fffffc0 	.word	0x7fffffc0

08007308 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <LL_ADC_IsEnabled+0x18>
 800731c:	2301      	movs	r3, #1
 800731e:	e000      	b.n	8007322 <LL_ADC_IsEnabled+0x1a>
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	4b05      	ldr	r3, [pc, #20]	; (8007354 <LL_ADC_REG_StartConversion+0x24>)
 800733e:	4013      	ands	r3, r2
 8007340:	f043 0204 	orr.w	r2, r3, #4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	7fffffc0 	.word	0x7fffffc0

08007358 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b04      	cmp	r3, #4
 800736a:	d101      	bne.n	8007370 <LL_ADC_REG_IsConversionOngoing+0x18>
 800736c:	2301      	movs	r3, #1
 800736e:	e000      	b.n	8007372 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b08      	cmp	r3, #8
 8007390:	d101      	bne.n	8007396 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007396:	2300      	movs	r3, #0
}
 8007398:	4618      	mov	r0, r3
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80073a4:	b590      	push	{r4, r7, lr}
 80073a6:	b089      	sub	sp, #36	; 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80073ac:	2300      	movs	r3, #0
 80073ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e18f      	b.n	80076de <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d109      	bne.n	80073e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7fe fbfb 	bl	8005bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff ff3f 	bl	8007268 <LL_ADC_IsDeepPowerDownEnabled>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d004      	beq.n	80073fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff ff25 	bl	8007244 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f7ff ff5a 	bl	80072b8 <LL_ADC_IsInternalRegulatorEnabled>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d114      	bne.n	8007434 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f7ff ff3e 	bl	8007290 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007414:	4b87      	ldr	r3, [pc, #540]	; (8007634 <HAL_ADC_Init+0x290>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	099b      	lsrs	r3, r3, #6
 800741a:	4a87      	ldr	r2, [pc, #540]	; (8007638 <HAL_ADC_Init+0x294>)
 800741c:	fba2 2303 	umull	r2, r3, r2, r3
 8007420:	099b      	lsrs	r3, r3, #6
 8007422:	3301      	adds	r3, #1
 8007424:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007426:	e002      	b.n	800742e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	3b01      	subs	r3, #1
 800742c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d1f9      	bne.n	8007428 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ff3d 	bl	80072b8 <LL_ADC_IsInternalRegulatorEnabled>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10d      	bne.n	8007460 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007448:	f043 0210 	orr.w	r2, r3, #16
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007454:	f043 0201 	orr.w	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff ff77 	bl	8007358 <LL_ADC_REG_IsConversionOngoing>
 800746a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007470:	f003 0310 	and.w	r3, r3, #16
 8007474:	2b00      	cmp	r3, #0
 8007476:	f040 8129 	bne.w	80076cc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f040 8125 	bne.w	80076cc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800748a:	f043 0202 	orr.w	r2, r3, #2
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff ff36 	bl	8007308 <LL_ADC_IsEnabled>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d136      	bne.n	8007510 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a65      	ldr	r2, [pc, #404]	; (800763c <HAL_ADC_Init+0x298>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d004      	beq.n	80074b6 <HAL_ADC_Init+0x112>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a63      	ldr	r2, [pc, #396]	; (8007640 <HAL_ADC_Init+0x29c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d10e      	bne.n	80074d4 <HAL_ADC_Init+0x130>
 80074b6:	4861      	ldr	r0, [pc, #388]	; (800763c <HAL_ADC_Init+0x298>)
 80074b8:	f7ff ff26 	bl	8007308 <LL_ADC_IsEnabled>
 80074bc:	4604      	mov	r4, r0
 80074be:	4860      	ldr	r0, [pc, #384]	; (8007640 <HAL_ADC_Init+0x29c>)
 80074c0:	f7ff ff22 	bl	8007308 <LL_ADC_IsEnabled>
 80074c4:	4603      	mov	r3, r0
 80074c6:	4323      	orrs	r3, r4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bf0c      	ite	eq
 80074cc:	2301      	moveq	r3, #1
 80074ce:	2300      	movne	r3, #0
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	e008      	b.n	80074e6 <HAL_ADC_Init+0x142>
 80074d4:	485b      	ldr	r0, [pc, #364]	; (8007644 <HAL_ADC_Init+0x2a0>)
 80074d6:	f7ff ff17 	bl	8007308 <LL_ADC_IsEnabled>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	bf0c      	ite	eq
 80074e0:	2301      	moveq	r3, #1
 80074e2:	2300      	movne	r3, #0
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d012      	beq.n	8007510 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a53      	ldr	r2, [pc, #332]	; (800763c <HAL_ADC_Init+0x298>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d004      	beq.n	80074fe <HAL_ADC_Init+0x15a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a51      	ldr	r2, [pc, #324]	; (8007640 <HAL_ADC_Init+0x29c>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d101      	bne.n	8007502 <HAL_ADC_Init+0x15e>
 80074fe:	4a52      	ldr	r2, [pc, #328]	; (8007648 <HAL_ADC_Init+0x2a4>)
 8007500:	e000      	b.n	8007504 <HAL_ADC_Init+0x160>
 8007502:	4a52      	ldr	r2, [pc, #328]	; (800764c <HAL_ADC_Init+0x2a8>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7ff fd42 	bl	8006f94 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8007510:	f7ff fd34 	bl	8006f7c <HAL_GetREVID>
 8007514:	4603      	mov	r3, r0
 8007516:	f241 0203 	movw	r2, #4099	; 0x1003
 800751a:	4293      	cmp	r3, r2
 800751c:	d914      	bls.n	8007548 <HAL_ADC_Init+0x1a4>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2b10      	cmp	r3, #16
 8007524:	d110      	bne.n	8007548 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	7d5b      	ldrb	r3, [r3, #21]
 800752a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007530:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007536:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	7f1b      	ldrb	r3, [r3, #28]
 800753c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800753e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007540:	f043 030c 	orr.w	r3, r3, #12
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e00d      	b.n	8007564 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7d5b      	ldrb	r3, [r3, #21]
 800754c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007552:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007558:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	7f1b      	ldrb	r3, [r3, #28]
 800755e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007560:	4313      	orrs	r3, r2
 8007562:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7f1b      	ldrb	r3, [r3, #28]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d106      	bne.n	800757a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	3b01      	subs	r3, #1
 8007572:	045b      	lsls	r3, r3, #17
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	4313      	orrs	r3, r2
 8007578:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007586:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	4313      	orrs	r3, r2
 8007594:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	4b2c      	ldr	r3, [pc, #176]	; (8007650 <HAL_ADC_Init+0x2ac>)
 800759e:	4013      	ands	r3, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	430b      	orrs	r3, r1
 80075a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7ff fed2 	bl	8007358 <LL_ADC_REG_IsConversionOngoing>
 80075b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fedf 	bl	800737e <LL_ADC_INJ_IsConversionOngoing>
 80075c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d15f      	bne.n	8007688 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d15c      	bne.n	8007688 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	7d1b      	ldrb	r3, [r3, #20]
 80075d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80075d8:	4313      	orrs	r3, r2
 80075da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68da      	ldr	r2, [r3, #12]
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <HAL_ADC_Init+0x2b0>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	69b9      	ldr	r1, [r7, #24]
 80075ec:	430b      	orrs	r3, r1
 80075ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d130      	bne.n	800765c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691a      	ldr	r2, [r3, #16]
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <HAL_ADC_Init+0x2b4>)
 8007608:	4013      	ands	r3, r2
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800760e:	3a01      	subs	r2, #1
 8007610:	0411      	lsls	r1, r2, #16
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007616:	4311      	orrs	r1, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800761c:	4311      	orrs	r1, r2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007622:	430a      	orrs	r2, r1
 8007624:	431a      	orrs	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f042 0201 	orr.w	r2, r2, #1
 800762e:	611a      	str	r2, [r3, #16]
 8007630:	e01c      	b.n	800766c <HAL_ADC_Init+0x2c8>
 8007632:	bf00      	nop
 8007634:	24000070 	.word	0x24000070
 8007638:	053e2d63 	.word	0x053e2d63
 800763c:	40022000 	.word	0x40022000
 8007640:	40022100 	.word	0x40022100
 8007644:	58026000 	.word	0x58026000
 8007648:	40022300 	.word	0x40022300
 800764c:	58026300 	.word	0x58026300
 8007650:	fff0c003 	.word	0xfff0c003
 8007654:	ffffbffc 	.word	0xffffbffc
 8007658:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	430a      	orrs	r2, r1
 8007680:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 ffc4 	bl	8008610 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d10c      	bne.n	80076aa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	f023 010f 	bic.w	r1, r3, #15
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	1e5a      	subs	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	430a      	orrs	r2, r1
 80076a6:	631a      	str	r2, [r3, #48]	; 0x30
 80076a8:	e007      	b.n	80076ba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 020f 	bic.w	r2, r2, #15
 80076b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076be:	f023 0303 	bic.w	r3, r3, #3
 80076c2:	f043 0201 	orr.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	655a      	str	r2, [r3, #84]	; 0x54
 80076ca:	e007      	b.n	80076dc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	f043 0210 	orr.w	r2, r3, #16
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80076dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3724      	adds	r7, #36	; 0x24
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd90      	pop	{r4, r7, pc}
 80076e6:	bf00      	nop

080076e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a55      	ldr	r2, [pc, #340]	; (8007850 <HAL_ADC_Start_DMA+0x168>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d004      	beq.n	8007708 <HAL_ADC_Start_DMA+0x20>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a54      	ldr	r2, [pc, #336]	; (8007854 <HAL_ADC_Start_DMA+0x16c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d101      	bne.n	800770c <HAL_ADC_Start_DMA+0x24>
 8007708:	4b53      	ldr	r3, [pc, #332]	; (8007858 <HAL_ADC_Start_DMA+0x170>)
 800770a:	e000      	b.n	800770e <HAL_ADC_Start_DMA+0x26>
 800770c:	4b53      	ldr	r3, [pc, #332]	; (800785c <HAL_ADC_Start_DMA+0x174>)
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fd7c 	bl	800720c <LL_ADC_GetMultimode>
 8007714:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4618      	mov	r0, r3
 800771c:	f7ff fe1c 	bl	8007358 <LL_ADC_REG_IsConversionOngoing>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	f040 808c 	bne.w	8007840 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800772e:	2b01      	cmp	r3, #1
 8007730:	d101      	bne.n	8007736 <HAL_ADC_Start_DMA+0x4e>
 8007732:	2302      	movs	r3, #2
 8007734:	e087      	b.n	8007846 <HAL_ADC_Start_DMA+0x15e>
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b05      	cmp	r3, #5
 8007748:	d002      	beq.n	8007750 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	2b09      	cmp	r3, #9
 800774e:	d170      	bne.n	8007832 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fe3f 	bl	80083d4 <ADC_Enable>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d163      	bne.n	8007828 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007764:	4b3e      	ldr	r3, [pc, #248]	; (8007860 <HAL_ADC_Start_DMA+0x178>)
 8007766:	4013      	ands	r3, r2
 8007768:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a37      	ldr	r2, [pc, #220]	; (8007854 <HAL_ADC_Start_DMA+0x16c>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d002      	beq.n	8007780 <HAL_ADC_Start_DMA+0x98>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	e000      	b.n	8007782 <HAL_ADC_Start_DMA+0x9a>
 8007780:	4b33      	ldr	r3, [pc, #204]	; (8007850 <HAL_ADC_Start_DMA+0x168>)
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	6812      	ldr	r2, [r2, #0]
 8007786:	4293      	cmp	r3, r2
 8007788:	d002      	beq.n	8007790 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d105      	bne.n	800779c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007794:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d006      	beq.n	80077b6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ac:	f023 0206 	bic.w	r2, r3, #6
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	659a      	str	r2, [r3, #88]	; 0x58
 80077b4:	e002      	b.n	80077bc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c0:	4a28      	ldr	r2, [pc, #160]	; (8007864 <HAL_ADC_Start_DMA+0x17c>)
 80077c2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077c8:	4a27      	ldr	r2, [pc, #156]	; (8007868 <HAL_ADC_Start_DMA+0x180>)
 80077ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d0:	4a26      	ldr	r2, [pc, #152]	; (800786c <HAL_ADC_Start_DMA+0x184>)
 80077d2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	221c      	movs	r2, #28
 80077da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0210 	orr.w	r2, r2, #16
 80077f2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7ff fc8f 	bl	8007122 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3340      	adds	r3, #64	; 0x40
 800780e:	4619      	mov	r1, r3
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f001 fdaa 	bl	800936c <HAL_DMA_Start_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff fd85 	bl	8007330 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007826:	e00d      	b.n	8007844 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8007830:	e008      	b.n	8007844 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800783e:	e001      	b.n	8007844 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007840:	2302      	movs	r3, #2
 8007842:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007844:	7dfb      	ldrb	r3, [r7, #23]
}
 8007846:	4618      	mov	r0, r3
 8007848:	3718      	adds	r7, #24
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	40022000 	.word	0x40022000
 8007854:	40022100 	.word	0x40022100
 8007858:	40022300 	.word	0x40022300
 800785c:	58026300 	.word	0x58026300
 8007860:	fffff0fe 	.word	0xfffff0fe
 8007864:	080084e9 	.word	0x080084e9
 8007868:	080085c1 	.word	0x080085c1
 800786c:	080085dd 	.word	0x080085dd

08007870 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	; 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007878:	2300      	movs	r3, #0
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a87      	ldr	r2, [pc, #540]	; (8007ab0 <HAL_ADC_IRQHandler+0x240>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_ADC_IRQHandler+0x30>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a86      	ldr	r2, [pc, #536]	; (8007ab4 <HAL_ADC_IRQHandler+0x244>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d101      	bne.n	80078a4 <HAL_ADC_IRQHandler+0x34>
 80078a0:	4b85      	ldr	r3, [pc, #532]	; (8007ab8 <HAL_ADC_IRQHandler+0x248>)
 80078a2:	e000      	b.n	80078a6 <HAL_ADC_IRQHandler+0x36>
 80078a4:	4b85      	ldr	r3, [pc, #532]	; (8007abc <HAL_ADC_IRQHandler+0x24c>)
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fcb0 	bl	800720c <LL_ADC_GetMultimode>
 80078ac:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d017      	beq.n	80078e8 <HAL_ADC_IRQHandler+0x78>
 80078b8:	69bb      	ldr	r3, [r7, #24]
 80078ba:	f003 0302 	and.w	r3, r3, #2
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d012      	beq.n	80078e8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078c6:	f003 0310 	and.w	r3, r3, #16
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d105      	bne.n	80078da <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fff2 	bl	80088c4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2202      	movs	r2, #2
 80078e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	f003 0304 	and.w	r3, r3, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <HAL_ADC_IRQHandler+0x8c>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 8083 	beq.w	8007a0e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	f003 0308 	and.w	r3, r3, #8
 800790e:	2b00      	cmp	r3, #0
 8007910:	d07d      	beq.n	8007a0e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff fbb8 	bl	80070a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d062      	beq.n	8007a00 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a5d      	ldr	r2, [pc, #372]	; (8007ab4 <HAL_ADC_IRQHandler+0x244>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d002      	beq.n	800794a <HAL_ADC_IRQHandler+0xda>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	e000      	b.n	800794c <HAL_ADC_IRQHandler+0xdc>
 800794a:	4b59      	ldr	r3, [pc, #356]	; (8007ab0 <HAL_ADC_IRQHandler+0x240>)
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	4293      	cmp	r3, r2
 8007952:	d008      	beq.n	8007966 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b05      	cmp	r3, #5
 800795e:	d002      	beq.n	8007966 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	2b09      	cmp	r3, #9
 8007964:	d104      	bne.n	8007970 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	623b      	str	r3, [r7, #32]
 800796e:	e00c      	b.n	800798a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a4f      	ldr	r2, [pc, #316]	; (8007ab4 <HAL_ADC_IRQHandler+0x244>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d002      	beq.n	8007980 <HAL_ADC_IRQHandler+0x110>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	e000      	b.n	8007982 <HAL_ADC_IRQHandler+0x112>
 8007980:	4b4b      	ldr	r3, [pc, #300]	; (8007ab0 <HAL_ADC_IRQHandler+0x240>)
 8007982:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d135      	bne.n	8007a00 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	2b08      	cmp	r3, #8
 80079a0:	d12e      	bne.n	8007a00 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff fcd6 	bl	8007358 <LL_ADC_REG_IsConversionOngoing>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d11a      	bne.n	80079e8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 020c 	bic.w	r2, r2, #12
 80079c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d112      	bne.n	8007a00 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079de:	f043 0201 	orr.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	655a      	str	r2, [r3, #84]	; 0x54
 80079e6:	e00b      	b.n	8007a00 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079ec:	f043 0210 	orr.w	r2, r3, #16
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079f8:	f043 0201 	orr.w	r2, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 f96f 	bl	8007ce4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	220c      	movs	r2, #12
 8007a0c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	f003 0320 	and.w	r3, r3, #32
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <HAL_ADC_IRQHandler+0x1b2>
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	f003 0320 	and.w	r3, r3, #32
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f000 80a0 	beq.w	8007b6e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 809a 	beq.w	8007b6e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a3e:	f003 0310 	and.w	r3, r3, #16
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d105      	bne.n	8007a52 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fb76 	bl	8007148 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007a5c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7ff fb1e 	bl	80070a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007a68:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a11      	ldr	r2, [pc, #68]	; (8007ab4 <HAL_ADC_IRQHandler+0x244>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d002      	beq.n	8007a7a <HAL_ADC_IRQHandler+0x20a>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	e000      	b.n	8007a7c <HAL_ADC_IRQHandler+0x20c>
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <HAL_ADC_IRQHandler+0x240>)
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6812      	ldr	r2, [r2, #0]
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d008      	beq.n	8007a96 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d005      	beq.n	8007a96 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b06      	cmp	r3, #6
 8007a8e:	d002      	beq.n	8007a96 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b07      	cmp	r3, #7
 8007a94:	d104      	bne.n	8007aa0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	623b      	str	r3, [r7, #32]
 8007a9e:	e014      	b.n	8007aca <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a03      	ldr	r2, [pc, #12]	; (8007ab4 <HAL_ADC_IRQHandler+0x244>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d00a      	beq.n	8007ac0 <HAL_ADC_IRQHandler+0x250>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	e008      	b.n	8007ac2 <HAL_ADC_IRQHandler+0x252>
 8007ab0:	40022000 	.word	0x40022000
 8007ab4:	40022100 	.word	0x40022100
 8007ab8:	40022300 	.word	0x40022300
 8007abc:	58026300 	.word	0x58026300
 8007ac0:	4b84      	ldr	r3, [pc, #528]	; (8007cd4 <HAL_ADC_IRQHandler+0x464>)
 8007ac2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d047      	beq.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d007      	beq.n	8007aea <HAL_ADC_IRQHandler+0x27a>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d03f      	beq.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007ae0:	6a3b      	ldr	r3, [r7, #32]
 8007ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d13a      	bne.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af4:	2b40      	cmp	r3, #64	; 0x40
 8007af6:	d133      	bne.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d12e      	bne.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f7ff fc39 	bl	800737e <LL_ADC_INJ_IsConversionOngoing>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d11a      	bne.n	8007b48 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007b20:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d112      	bne.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	f043 0201 	orr.w	r2, r3, #1
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	655a      	str	r2, [r3, #84]	; 0x54
 8007b46:	e00b      	b.n	8007b60 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	f043 0210 	orr.w	r2, r3, #16
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b58:	f043 0201 	orr.w	r2, r3, #1
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fe87 	bl	8008874 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2260      	movs	r2, #96	; 0x60
 8007b6c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d011      	beq.n	8007b9c <HAL_ADC_IRQHandler+0x32c>
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00c      	beq.n	8007b9c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f8bc 	bl	8007d0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2280      	movs	r2, #128	; 0x80
 8007b9a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007b9c:	69fb      	ldr	r3, [r7, #28]
 8007b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d012      	beq.n	8007bcc <HAL_ADC_IRQHandler+0x35c>
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00d      	beq.n	8007bcc <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bb4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fe6d 	bl	800889c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007bca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d012      	beq.n	8007bfc <HAL_ADC_IRQHandler+0x38c>
 8007bd6:	69bb      	ldr	r3, [r7, #24]
 8007bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00d      	beq.n	8007bfc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fe5f 	bl	80088b0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bfa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f003 0310 	and.w	r3, r3, #16
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d043      	beq.n	8007c8e <HAL_ADC_IRQHandler+0x41e>
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d03e      	beq.n	8007c8e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d102      	bne.n	8007c1e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1c:	e021      	b.n	8007c62 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d015      	beq.n	8007c50 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <HAL_ADC_IRQHandler+0x464>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d004      	beq.n	8007c38 <HAL_ADC_IRQHandler+0x3c8>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a29      	ldr	r2, [pc, #164]	; (8007cd8 <HAL_ADC_IRQHandler+0x468>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d101      	bne.n	8007c3c <HAL_ADC_IRQHandler+0x3cc>
 8007c38:	4b28      	ldr	r3, [pc, #160]	; (8007cdc <HAL_ADC_IRQHandler+0x46c>)
 8007c3a:	e000      	b.n	8007c3e <HAL_ADC_IRQHandler+0x3ce>
 8007c3c:	4b28      	ldr	r3, [pc, #160]	; (8007ce0 <HAL_ADC_IRQHandler+0x470>)
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff faf2 	bl	8007228 <LL_ADC_GetMultiDMATransfer>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00b      	beq.n	8007c62 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c4e:	e008      	b.n	8007c62 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	f003 0303 	and.w	r3, r3, #3
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d001      	beq.n	8007c62 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d10e      	bne.n	8007c86 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c78:	f043 0202 	orr.w	r2, r3, #2
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f84d 	bl	8007d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2210      	movs	r2, #16
 8007c8c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d018      	beq.n	8007cca <HAL_ADC_IRQHandler+0x45a>
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cb2:	f043 0208 	orr.w	r2, r3, #8
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cc2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fddf 	bl	8008888 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8007cca:	bf00      	nop
 8007ccc:	3728      	adds	r7, #40	; 0x28
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	40022000 	.word	0x40022000
 8007cd8:	40022100 	.word	0x40022100
 8007cdc:	40022300 	.word	0x40022300
 8007ce0:	58026300 	.word	0x58026300

08007ce4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr

08007d0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007d14:	bf00      	nop
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007d28:	bf00      	nop
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007d34:	b590      	push	{r4, r7, lr}
 8007d36:	b0a1      	sub	sp, #132	; 0x84
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007d44:	2300      	movs	r3, #0
 8007d46:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4a9d      	ldr	r2, [pc, #628]	; (8007fc4 <HAL_ADC_ConfigChannel+0x290>)
 8007d4e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d101      	bne.n	8007d5e <HAL_ADC_ConfigChannel+0x2a>
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e321      	b.n	80083a2 <HAL_ADC_ConfigChannel+0x66e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff faf4 	bl	8007358 <LL_ADC_REG_IsConversionOngoing>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f040 8306 	bne.w	8008384 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d108      	bne.n	8007d96 <HAL_ADC_ConfigChannel+0x62>
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	0e9b      	lsrs	r3, r3, #26
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	2201      	movs	r2, #1
 8007d90:	fa02 f303 	lsl.w	r3, r2, r3
 8007d94:	e016      	b.n	8007dc4 <HAL_ADC_ConfigChannel+0x90>
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d9e:	fa93 f3a3 	rbit	r3, r3
 8007da2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007da4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007da6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007da8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d101      	bne.n	8007db2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8007dae:	2320      	movs	r3, #32
 8007db0:	e003      	b.n	8007dba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8007db2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	f003 031f 	and.w	r3, r3, #31
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	6812      	ldr	r2, [r2, #0]
 8007dc8:	69d1      	ldr	r1, [r2, #28]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6812      	ldr	r2, [r2, #0]
 8007dce:	430b      	orrs	r3, r1
 8007dd0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6818      	ldr	r0, [r3, #0]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	6859      	ldr	r1, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	461a      	mov	r2, r3
 8007de0:	f7ff f973 	bl	80070ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7ff fab5 	bl	8007358 <LL_ADC_REG_IsConversionOngoing>
 8007dee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7ff fac2 	bl	800737e <LL_ADC_INJ_IsConversionOngoing>
 8007dfa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f040 80b3 	bne.w	8007f6a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	f040 80af 	bne.w	8007f6a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6818      	ldr	r0, [r3, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	6819      	ldr	r1, [r3, #0]
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	f7ff f9a8 	bl	800716e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8007e1e:	4b6a      	ldr	r3, [pc, #424]	; (8007fc8 <HAL_ADC_ConfigChannel+0x294>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e2a:	d10b      	bne.n	8007e44 <HAL_ADC_ConfigChannel+0x110>
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	695a      	ldr	r2, [r3, #20]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	005b      	lsls	r3, r3, #1
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	e01d      	b.n	8007e80 <HAL_ADC_ConfigChannel+0x14c>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <HAL_ADC_ConfigChannel+0x136>
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	695a      	ldr	r2, [r3, #20]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	089b      	lsrs	r3, r3, #2
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	005b      	lsls	r3, r3, #1
 8007e64:	fa02 f303 	lsl.w	r3, r2, r3
 8007e68:	e00a      	b.n	8007e80 <HAL_ADC_ConfigChannel+0x14c>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	695a      	ldr	r2, [r3, #20]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	089b      	lsrs	r3, r3, #2
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	005b      	lsls	r3, r3, #1
 8007e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e80:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	2b04      	cmp	r3, #4
 8007e88:	d027      	beq.n	8007eda <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6818      	ldr	r0, [r3, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	6919      	ldr	r1, [r3, #16]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e98:	f7ff f8b0 	bl	8006ffc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	6919      	ldr	r1, [r3, #16]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	7e5b      	ldrb	r3, [r3, #25]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d102      	bne.n	8007eb2 <HAL_ADC_ConfigChannel+0x17e>
 8007eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007eb0:	e000      	b.n	8007eb4 <HAL_ADC_ConfigChannel+0x180>
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	f7ff f8da 	bl	800706e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6818      	ldr	r0, [r3, #0]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	6919      	ldr	r1, [r3, #16]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	7e1b      	ldrb	r3, [r3, #24]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d102      	bne.n	8007ed0 <HAL_ADC_ConfigChannel+0x19c>
 8007eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ece:	e000      	b.n	8007ed2 <HAL_ADC_ConfigChannel+0x19e>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f7ff f8b2 	bl	800703c <LL_ADC_SetDataRightShift>
 8007ed8:	e047      	b.n	8007f6a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	069b      	lsls	r3, r3, #26
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d107      	bne.n	8007efe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007efc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	069b      	lsls	r3, r3, #26
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d107      	bne.n	8007f22 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007f20:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	069b      	lsls	r3, r3, #26
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d107      	bne.n	8007f46 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007f44:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	069b      	lsls	r3, r3, #26
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d107      	bne.n	8007f6a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007f68:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff f9ca 	bl	8007308 <LL_ADC_IsEnabled>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 820d 	bne.w	8008396 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	6819      	ldr	r1, [r3, #0]
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f7ff f91b 	bl	80071c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <HAL_ADC_ConfigChannel+0x290>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	f040 8133 	bne.w	8008200 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d110      	bne.n	8007fcc <HAL_ADC_ConfigChannel+0x298>
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	0e9b      	lsrs	r3, r3, #26
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	f003 031f 	and.w	r3, r3, #31
 8007fb6:	2b09      	cmp	r3, #9
 8007fb8:	bf94      	ite	ls
 8007fba:	2301      	movls	r3, #1
 8007fbc:	2300      	movhi	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	e01e      	b.n	8008000 <HAL_ADC_ConfigChannel+0x2cc>
 8007fc2:	bf00      	nop
 8007fc4:	47ff0000 	.word	0x47ff0000
 8007fc8:	5c001000 	.word	0x5c001000
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fd4:	fa93 f3a3 	rbit	r3, r3
 8007fd8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8007fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	e003      	b.n	8007ff0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8007fe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fea:	fab3 f383 	clz	r3, r3
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	f003 031f 	and.w	r3, r3, #31
 8007ff6:	2b09      	cmp	r3, #9
 8007ff8:	bf94      	ite	ls
 8007ffa:	2301      	movls	r3, #1
 8007ffc:	2300      	movhi	r3, #0
 8007ffe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008000:	2b00      	cmp	r3, #0
 8008002:	d079      	beq.n	80080f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800800c:	2b00      	cmp	r3, #0
 800800e:	d107      	bne.n	8008020 <HAL_ADC_ConfigChannel+0x2ec>
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	0e9b      	lsrs	r3, r3, #26
 8008016:	3301      	adds	r3, #1
 8008018:	069b      	lsls	r3, r3, #26
 800801a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800801e:	e015      	b.n	800804c <HAL_ADC_ConfigChannel+0x318>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008028:	fa93 f3a3 	rbit	r3, r3
 800802c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800802e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008030:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008034:	2b00      	cmp	r3, #0
 8008036:	d101      	bne.n	800803c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8008038:	2320      	movs	r3, #32
 800803a:	e003      	b.n	8008044 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800803c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800803e:	fab3 f383 	clz	r3, r3
 8008042:	b2db      	uxtb	r3, r3
 8008044:	3301      	adds	r3, #1
 8008046:	069b      	lsls	r3, r3, #26
 8008048:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008054:	2b00      	cmp	r3, #0
 8008056:	d109      	bne.n	800806c <HAL_ADC_ConfigChannel+0x338>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	0e9b      	lsrs	r3, r3, #26
 800805e:	3301      	adds	r3, #1
 8008060:	f003 031f 	and.w	r3, r3, #31
 8008064:	2101      	movs	r1, #1
 8008066:	fa01 f303 	lsl.w	r3, r1, r3
 800806a:	e017      	b.n	800809c <HAL_ADC_ConfigChannel+0x368>
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008074:	fa93 f3a3 	rbit	r3, r3
 8008078:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800807a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800807e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008080:	2b00      	cmp	r3, #0
 8008082:	d101      	bne.n	8008088 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8008084:	2320      	movs	r3, #32
 8008086:	e003      	b.n	8008090 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8008088:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800808a:	fab3 f383 	clz	r3, r3
 800808e:	b2db      	uxtb	r3, r3
 8008090:	3301      	adds	r3, #1
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2101      	movs	r1, #1
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	ea42 0103 	orr.w	r1, r2, r3
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10a      	bne.n	80080c2 <HAL_ADC_ConfigChannel+0x38e>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	0e9b      	lsrs	r3, r3, #26
 80080b2:	3301      	adds	r3, #1
 80080b4:	f003 021f 	and.w	r2, r3, #31
 80080b8:	4613      	mov	r3, r2
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	4413      	add	r3, r2
 80080be:	051b      	lsls	r3, r3, #20
 80080c0:	e018      	b.n	80080f4 <HAL_ADC_ConfigChannel+0x3c0>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ca:	fa93 f3a3 	rbit	r3, r3
 80080ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d101      	bne.n	80080de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80080da:	2320      	movs	r3, #32
 80080dc:	e003      	b.n	80080e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	fab3 f383 	clz	r3, r3
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	3301      	adds	r3, #1
 80080e8:	f003 021f 	and.w	r2, r3, #31
 80080ec:	4613      	mov	r3, r2
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	4413      	add	r3, r2
 80080f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80080f4:	430b      	orrs	r3, r1
 80080f6:	e07e      	b.n	80081f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008100:	2b00      	cmp	r3, #0
 8008102:	d107      	bne.n	8008114 <HAL_ADC_ConfigChannel+0x3e0>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	0e9b      	lsrs	r3, r3, #26
 800810a:	3301      	adds	r3, #1
 800810c:	069b      	lsls	r3, r3, #26
 800810e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008112:	e015      	b.n	8008140 <HAL_ADC_ConfigChannel+0x40c>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	fa93 f3a3 	rbit	r3, r3
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008124:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008128:	2b00      	cmp	r3, #0
 800812a:	d101      	bne.n	8008130 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800812c:	2320      	movs	r3, #32
 800812e:	e003      	b.n	8008138 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8008130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008132:	fab3 f383 	clz	r3, r3
 8008136:	b2db      	uxtb	r3, r3
 8008138:	3301      	adds	r3, #1
 800813a:	069b      	lsls	r3, r3, #26
 800813c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008148:	2b00      	cmp	r3, #0
 800814a:	d109      	bne.n	8008160 <HAL_ADC_ConfigChannel+0x42c>
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	0e9b      	lsrs	r3, r3, #26
 8008152:	3301      	adds	r3, #1
 8008154:	f003 031f 	and.w	r3, r3, #31
 8008158:	2101      	movs	r1, #1
 800815a:	fa01 f303 	lsl.w	r3, r1, r3
 800815e:	e017      	b.n	8008190 <HAL_ADC_ConfigChannel+0x45c>
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	fa93 f3a3 	rbit	r3, r3
 800816c:	61bb      	str	r3, [r7, #24]
  return result;
 800816e:	69bb      	ldr	r3, [r7, #24]
 8008170:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8008178:	2320      	movs	r3, #32
 800817a:	e003      	b.n	8008184 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	fab3 f383 	clz	r3, r3
 8008182:	b2db      	uxtb	r3, r3
 8008184:	3301      	adds	r3, #1
 8008186:	f003 031f 	and.w	r3, r3, #31
 800818a:	2101      	movs	r1, #1
 800818c:	fa01 f303 	lsl.w	r3, r1, r3
 8008190:	ea42 0103 	orr.w	r1, r2, r3
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10d      	bne.n	80081bc <HAL_ADC_ConfigChannel+0x488>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	0e9b      	lsrs	r3, r3, #26
 80081a6:	3301      	adds	r3, #1
 80081a8:	f003 021f 	and.w	r2, r3, #31
 80081ac:	4613      	mov	r3, r2
 80081ae:	005b      	lsls	r3, r3, #1
 80081b0:	4413      	add	r3, r2
 80081b2:	3b1e      	subs	r3, #30
 80081b4:	051b      	lsls	r3, r3, #20
 80081b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80081ba:	e01b      	b.n	80081f4 <HAL_ADC_ConfigChannel+0x4c0>
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	fa93 f3a3 	rbit	r3, r3
 80081c8:	60fb      	str	r3, [r7, #12]
  return result;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80081d4:	2320      	movs	r3, #32
 80081d6:	e003      	b.n	80081e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	fab3 f383 	clz	r3, r3
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	3301      	adds	r3, #1
 80081e2:	f003 021f 	and.w	r2, r3, #31
 80081e6:	4613      	mov	r3, r2
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	4413      	add	r3, r2
 80081ec:	3b1e      	subs	r3, #30
 80081ee:	051b      	lsls	r3, r3, #20
 80081f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081f4:	430b      	orrs	r3, r1
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	6892      	ldr	r2, [r2, #8]
 80081fa:	4619      	mov	r1, r3
 80081fc:	f7fe ffb7 	bl	800716e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f280 80c6 	bge.w	8008396 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a67      	ldr	r2, [pc, #412]	; (80083ac <HAL_ADC_ConfigChannel+0x678>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d004      	beq.n	800821e <HAL_ADC_ConfigChannel+0x4ea>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a65      	ldr	r2, [pc, #404]	; (80083b0 <HAL_ADC_ConfigChannel+0x67c>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d101      	bne.n	8008222 <HAL_ADC_ConfigChannel+0x4ee>
 800821e:	4b65      	ldr	r3, [pc, #404]	; (80083b4 <HAL_ADC_ConfigChannel+0x680>)
 8008220:	e000      	b.n	8008224 <HAL_ADC_ConfigChannel+0x4f0>
 8008222:	4b65      	ldr	r3, [pc, #404]	; (80083b8 <HAL_ADC_ConfigChannel+0x684>)
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fedb 	bl	8006fe0 <LL_ADC_GetCommonPathInternalCh>
 800822a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a5e      	ldr	r2, [pc, #376]	; (80083ac <HAL_ADC_ConfigChannel+0x678>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d004      	beq.n	8008240 <HAL_ADC_ConfigChannel+0x50c>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a5d      	ldr	r2, [pc, #372]	; (80083b0 <HAL_ADC_ConfigChannel+0x67c>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d10e      	bne.n	800825e <HAL_ADC_ConfigChannel+0x52a>
 8008240:	485a      	ldr	r0, [pc, #360]	; (80083ac <HAL_ADC_ConfigChannel+0x678>)
 8008242:	f7ff f861 	bl	8007308 <LL_ADC_IsEnabled>
 8008246:	4604      	mov	r4, r0
 8008248:	4859      	ldr	r0, [pc, #356]	; (80083b0 <HAL_ADC_ConfigChannel+0x67c>)
 800824a:	f7ff f85d 	bl	8007308 <LL_ADC_IsEnabled>
 800824e:	4603      	mov	r3, r0
 8008250:	4323      	orrs	r3, r4
 8008252:	2b00      	cmp	r3, #0
 8008254:	bf0c      	ite	eq
 8008256:	2301      	moveq	r3, #1
 8008258:	2300      	movne	r3, #0
 800825a:	b2db      	uxtb	r3, r3
 800825c:	e008      	b.n	8008270 <HAL_ADC_ConfigChannel+0x53c>
 800825e:	4857      	ldr	r0, [pc, #348]	; (80083bc <HAL_ADC_ConfigChannel+0x688>)
 8008260:	f7ff f852 	bl	8007308 <LL_ADC_IsEnabled>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	bf0c      	ite	eq
 800826a:	2301      	moveq	r3, #1
 800826c:	2300      	movne	r3, #0
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b00      	cmp	r3, #0
 8008272:	d07d      	beq.n	8008370 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a51      	ldr	r2, [pc, #324]	; (80083c0 <HAL_ADC_ConfigChannel+0x68c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d130      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x5ac>
 800827e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008280:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d12b      	bne.n	80082e0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a4b      	ldr	r2, [pc, #300]	; (80083bc <HAL_ADC_ConfigChannel+0x688>)
 800828e:	4293      	cmp	r3, r2
 8008290:	f040 8081 	bne.w	8008396 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a44      	ldr	r2, [pc, #272]	; (80083ac <HAL_ADC_ConfigChannel+0x678>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <HAL_ADC_ConfigChannel+0x574>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a43      	ldr	r2, [pc, #268]	; (80083b0 <HAL_ADC_ConfigChannel+0x67c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d101      	bne.n	80082ac <HAL_ADC_ConfigChannel+0x578>
 80082a8:	4a42      	ldr	r2, [pc, #264]	; (80083b4 <HAL_ADC_ConfigChannel+0x680>)
 80082aa:	e000      	b.n	80082ae <HAL_ADC_ConfigChannel+0x57a>
 80082ac:	4a42      	ldr	r2, [pc, #264]	; (80083b8 <HAL_ADC_ConfigChannel+0x684>)
 80082ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f7fe fe7f 	bl	8006fba <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80082bc:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <HAL_ADC_ConfigChannel+0x690>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	099b      	lsrs	r3, r3, #6
 80082c2:	4a41      	ldr	r2, [pc, #260]	; (80083c8 <HAL_ADC_ConfigChannel+0x694>)
 80082c4:	fba2 2303 	umull	r2, r3, r2, r3
 80082c8:	099b      	lsrs	r3, r3, #6
 80082ca:	3301      	adds	r3, #1
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80082d0:	e002      	b.n	80082d8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d1f9      	bne.n	80082d2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80082de:	e05a      	b.n	8008396 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a39      	ldr	r2, [pc, #228]	; (80083cc <HAL_ADC_ConfigChannel+0x698>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d11e      	bne.n	8008328 <HAL_ADC_ConfigChannel+0x5f4>
 80082ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d119      	bne.n	8008328 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a30      	ldr	r2, [pc, #192]	; (80083bc <HAL_ADC_ConfigChannel+0x688>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d14b      	bne.n	8008396 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a2a      	ldr	r2, [pc, #168]	; (80083ac <HAL_ADC_ConfigChannel+0x678>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d004      	beq.n	8008312 <HAL_ADC_ConfigChannel+0x5de>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a28      	ldr	r2, [pc, #160]	; (80083b0 <HAL_ADC_ConfigChannel+0x67c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d101      	bne.n	8008316 <HAL_ADC_ConfigChannel+0x5e2>
 8008312:	4a28      	ldr	r2, [pc, #160]	; (80083b4 <HAL_ADC_ConfigChannel+0x680>)
 8008314:	e000      	b.n	8008318 <HAL_ADC_ConfigChannel+0x5e4>
 8008316:	4a28      	ldr	r2, [pc, #160]	; (80083b8 <HAL_ADC_ConfigChannel+0x684>)
 8008318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800831e:	4619      	mov	r1, r3
 8008320:	4610      	mov	r0, r2
 8008322:	f7fe fe4a 	bl	8006fba <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008326:	e036      	b.n	8008396 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a28      	ldr	r2, [pc, #160]	; (80083d0 <HAL_ADC_ConfigChannel+0x69c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d131      	bne.n	8008396 <HAL_ADC_ConfigChannel+0x662>
 8008332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d12c      	bne.n	8008396 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a1e      	ldr	r2, [pc, #120]	; (80083bc <HAL_ADC_ConfigChannel+0x688>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d127      	bne.n	8008396 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a18      	ldr	r2, [pc, #96]	; (80083ac <HAL_ADC_ConfigChannel+0x678>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_ADC_ConfigChannel+0x626>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a16      	ldr	r2, [pc, #88]	; (80083b0 <HAL_ADC_ConfigChannel+0x67c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d101      	bne.n	800835e <HAL_ADC_ConfigChannel+0x62a>
 800835a:	4a16      	ldr	r2, [pc, #88]	; (80083b4 <HAL_ADC_ConfigChannel+0x680>)
 800835c:	e000      	b.n	8008360 <HAL_ADC_ConfigChannel+0x62c>
 800835e:	4a16      	ldr	r2, [pc, #88]	; (80083b8 <HAL_ADC_ConfigChannel+0x684>)
 8008360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008366:	4619      	mov	r1, r3
 8008368:	4610      	mov	r0, r2
 800836a:	f7fe fe26 	bl	8006fba <LL_ADC_SetCommonPathInternalCh>
 800836e:	e012      	b.n	8008396 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	f043 0220 	orr.w	r2, r3, #32
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8008382:	e008      	b.n	8008396 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008388:	f043 0220 	orr.w	r2, r3, #32
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800839e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3784      	adds	r7, #132	; 0x84
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	40022000 	.word	0x40022000
 80083b0:	40022100 	.word	0x40022100
 80083b4:	40022300 	.word	0x40022300
 80083b8:	58026300 	.word	0x58026300
 80083bc:	58026000 	.word	0x58026000
 80083c0:	cb840000 	.word	0xcb840000
 80083c4:	24000070 	.word	0x24000070
 80083c8:	053e2d63 	.word	0x053e2d63
 80083cc:	c7520000 	.word	0xc7520000
 80083d0:	cfb80000 	.word	0xcfb80000

080083d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe ff91 	bl	8007308 <LL_ADC_IsEnabled>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d16e      	bne.n	80084ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	4b38      	ldr	r3, [pc, #224]	; (80084d4 <ADC_Enable+0x100>)
 80083f4:	4013      	ands	r3, r2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00d      	beq.n	8008416 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083fe:	f043 0210 	orr.w	r2, r3, #16
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	f043 0201 	orr.w	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	e05a      	b.n	80084cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4618      	mov	r0, r3
 800841c:	f7fe ff60 	bl	80072e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8008420:	f7fe fd7c 	bl	8006f1c <HAL_GetTick>
 8008424:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a2b      	ldr	r2, [pc, #172]	; (80084d8 <ADC_Enable+0x104>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d004      	beq.n	800843a <ADC_Enable+0x66>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a29      	ldr	r2, [pc, #164]	; (80084dc <ADC_Enable+0x108>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d101      	bne.n	800843e <ADC_Enable+0x6a>
 800843a:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <ADC_Enable+0x10c>)
 800843c:	e000      	b.n	8008440 <ADC_Enable+0x6c>
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <ADC_Enable+0x110>)
 8008440:	4618      	mov	r0, r3
 8008442:	f7fe fee3 	bl	800720c <LL_ADC_GetMultimode>
 8008446:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a23      	ldr	r2, [pc, #140]	; (80084dc <ADC_Enable+0x108>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d002      	beq.n	8008458 <ADC_Enable+0x84>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	e000      	b.n	800845a <ADC_Enable+0x86>
 8008458:	4b1f      	ldr	r3, [pc, #124]	; (80084d8 <ADC_Enable+0x104>)
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	6812      	ldr	r2, [r2, #0]
 800845e:	4293      	cmp	r3, r2
 8008460:	d02c      	beq.n	80084bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d130      	bne.n	80084ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008468:	e028      	b.n	80084bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f7fe ff4a 	bl	8007308 <LL_ADC_IsEnabled>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ff2e 	bl	80072e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008484:	f7fe fd4a 	bl	8006f1c <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b02      	cmp	r3, #2
 8008490:	d914      	bls.n	80084bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b01      	cmp	r3, #1
 800849e:	d00d      	beq.n	80084bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a4:	f043 0210 	orr.w	r2, r3, #16
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084b0:	f043 0201 	orr.w	r2, r3, #1
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e007      	b.n	80084cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d1cf      	bne.n	800846a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	8000003f 	.word	0x8000003f
 80084d8:	40022000 	.word	0x40022000
 80084dc:	40022100 	.word	0x40022100
 80084e0:	40022300 	.word	0x40022300
 80084e4:	58026300 	.word	0x58026300

080084e8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d14b      	bne.n	800859a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008506:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0308 	and.w	r3, r3, #8
 8008518:	2b00      	cmp	r3, #0
 800851a:	d021      	beq.n	8008560 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe fdbf 	bl	80070a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d032      	beq.n	8008592 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68db      	ldr	r3, [r3, #12]
 8008532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d12b      	bne.n	8008592 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11f      	bne.n	8008592 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008556:	f043 0201 	orr.w	r2, r3, #1
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	655a      	str	r2, [r3, #84]	; 0x54
 800855e:	e018      	b.n	8008592 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	f003 0303 	and.w	r3, r3, #3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d111      	bne.n	8008592 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008582:	2b00      	cmp	r3, #0
 8008584:	d105      	bne.n	8008592 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800858a:	f043 0201 	orr.w	r2, r3, #1
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f7ff fba6 	bl	8007ce4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008598:	e00e      	b.n	80085b8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800859e:	f003 0310 	and.w	r3, r3, #16
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d003      	beq.n	80085ae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f7ff fbba 	bl	8007d20 <HAL_ADC_ErrorCallback>
}
 80085ac:	e004      	b.n	80085b8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
}
 80085b8:	bf00      	nop
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f7ff fb92 	bl	8007cf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80085d4:	bf00      	nop
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085fa:	f043 0204 	orr.w	r2, r3, #4
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fb8c 	bl	8007d20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008608:	bf00      	nop
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a7a      	ldr	r2, [pc, #488]	; (8008808 <ADC_ConfigureBoostMode+0x1f8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <ADC_ConfigureBoostMode+0x1c>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a79      	ldr	r2, [pc, #484]	; (800880c <ADC_ConfigureBoostMode+0x1fc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d109      	bne.n	8008640 <ADC_ConfigureBoostMode+0x30>
 800862c:	4b78      	ldr	r3, [pc, #480]	; (8008810 <ADC_ConfigureBoostMode+0x200>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008634:	2b00      	cmp	r3, #0
 8008636:	bf14      	ite	ne
 8008638:	2301      	movne	r3, #1
 800863a:	2300      	moveq	r3, #0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	e008      	b.n	8008652 <ADC_ConfigureBoostMode+0x42>
 8008640:	4b74      	ldr	r3, [pc, #464]	; (8008814 <ADC_ConfigureBoostMode+0x204>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008648:	2b00      	cmp	r3, #0
 800864a:	bf14      	ite	ne
 800864c:	2301      	movne	r3, #1
 800864e:	2300      	moveq	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01c      	beq.n	8008690 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008656:	f004 ffe5 	bl	800d624 <HAL_RCC_GetHCLKFreq>
 800865a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008664:	d010      	beq.n	8008688 <ADC_ConfigureBoostMode+0x78>
 8008666:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800866a:	d873      	bhi.n	8008754 <ADC_ConfigureBoostMode+0x144>
 800866c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008670:	d002      	beq.n	8008678 <ADC_ConfigureBoostMode+0x68>
 8008672:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008676:	d16d      	bne.n	8008754 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	0c1b      	lsrs	r3, r3, #16
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	60fb      	str	r3, [r7, #12]
        break;
 8008686:	e068      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	089b      	lsrs	r3, r3, #2
 800868c:	60fb      	str	r3, [r7, #12]
        break;
 800868e:	e064      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008690:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008694:	f04f 0100 	mov.w	r1, #0
 8008698:	f006 fa2a 	bl	800eaf0 <HAL_RCCEx_GetPeriphCLKFreq>
 800869c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80086a6:	d051      	beq.n	800874c <ADC_ConfigureBoostMode+0x13c>
 80086a8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80086ac:	d854      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086ae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80086b2:	d047      	beq.n	8008744 <ADC_ConfigureBoostMode+0x134>
 80086b4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80086b8:	d84e      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086ba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80086be:	d03d      	beq.n	800873c <ADC_ConfigureBoostMode+0x12c>
 80086c0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80086c4:	d848      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086ca:	d033      	beq.n	8008734 <ADC_ConfigureBoostMode+0x124>
 80086cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086d0:	d842      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086d2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80086d6:	d029      	beq.n	800872c <ADC_ConfigureBoostMode+0x11c>
 80086d8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80086dc:	d83c      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086de:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80086e2:	d01a      	beq.n	800871a <ADC_ConfigureBoostMode+0x10a>
 80086e4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80086e8:	d836      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086ea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80086ee:	d014      	beq.n	800871a <ADC_ConfigureBoostMode+0x10a>
 80086f0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80086f4:	d830      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 80086f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086fa:	d00e      	beq.n	800871a <ADC_ConfigureBoostMode+0x10a>
 80086fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008700:	d82a      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 8008702:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008706:	d008      	beq.n	800871a <ADC_ConfigureBoostMode+0x10a>
 8008708:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800870c:	d824      	bhi.n	8008758 <ADC_ConfigureBoostMode+0x148>
 800870e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008712:	d002      	beq.n	800871a <ADC_ConfigureBoostMode+0x10a>
 8008714:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008718:	d11e      	bne.n	8008758 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	0c9b      	lsrs	r3, r3, #18
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	fbb2 f3f3 	udiv	r3, r2, r3
 8008728:	60fb      	str	r3, [r7, #12]
        break;
 800872a:	e016      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	091b      	lsrs	r3, r3, #4
 8008730:	60fb      	str	r3, [r7, #12]
        break;
 8008732:	e012      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	095b      	lsrs	r3, r3, #5
 8008738:	60fb      	str	r3, [r7, #12]
        break;
 800873a:	e00e      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	099b      	lsrs	r3, r3, #6
 8008740:	60fb      	str	r3, [r7, #12]
        break;
 8008742:	e00a      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	09db      	lsrs	r3, r3, #7
 8008748:	60fb      	str	r3, [r7, #12]
        break;
 800874a:	e006      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	0a1b      	lsrs	r3, r3, #8
 8008750:	60fb      	str	r3, [r7, #12]
        break;
 8008752:	e002      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
        break;
 8008754:	bf00      	nop
 8008756:	e000      	b.n	800875a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008758:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800875a:	f7fe fc0f 	bl	8006f7c <HAL_GetREVID>
 800875e:	4603      	mov	r3, r0
 8008760:	f241 0203 	movw	r2, #4099	; 0x1003
 8008764:	4293      	cmp	r3, r2
 8008766:	d815      	bhi.n	8008794 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4a2b      	ldr	r2, [pc, #172]	; (8008818 <ADC_ConfigureBoostMode+0x208>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d908      	bls.n	8008782 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	689a      	ldr	r2, [r3, #8]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800877e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008780:	e03e      	b.n	8008800 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008790:	609a      	str	r2, [r3, #8]
}
 8008792:	e035      	b.n	8008800 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	4a1f      	ldr	r2, [pc, #124]	; (800881c <ADC_ConfigureBoostMode+0x20c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d808      	bhi.n	80087b4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80087b0:	609a      	str	r2, [r3, #8]
}
 80087b2:	e025      	b.n	8008800 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a1a      	ldr	r2, [pc, #104]	; (8008820 <ADC_ConfigureBoostMode+0x210>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d80a      	bhi.n	80087d2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087ce:	609a      	str	r2, [r3, #8]
}
 80087d0:	e016      	b.n	8008800 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	4a13      	ldr	r2, [pc, #76]	; (8008824 <ADC_ConfigureBoostMode+0x214>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d80a      	bhi.n	80087f0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ec:	609a      	str	r2, [r3, #8]
}
 80087ee:	e007      	b.n	8008800 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80087fe:	609a      	str	r2, [r3, #8]
}
 8008800:	bf00      	nop
 8008802:	3710      	adds	r7, #16
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	40022000 	.word	0x40022000
 800880c:	40022100 	.word	0x40022100
 8008810:	40022300 	.word	0x40022300
 8008814:	58026300 	.word	0x58026300
 8008818:	01312d00 	.word	0x01312d00
 800881c:	005f5e10 	.word	0x005f5e10
 8008820:	00bebc20 	.word	0x00bebc20
 8008824:	017d7840 	.word	0x017d7840

08008828 <LL_ADC_IsEnabled>:
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <LL_ADC_IsEnabled+0x18>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <LL_ADC_IsEnabled+0x1a>
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	370c      	adds	r7, #12
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <LL_ADC_REG_IsConversionOngoing>:
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f003 0304 	and.w	r3, r3, #4
 800885e:	2b04      	cmp	r3, #4
 8008860:	d101      	bne.n	8008866 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008862:	2301      	movs	r3, #1
 8008864:	e000      	b.n	8008868 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80088cc:	bf00      	nop
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80088d8:	b590      	push	{r4, r7, lr}
 80088da:	b09f      	sub	sp, #124	; 0x7c
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d101      	bne.n	80088f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80088f2:	2302      	movs	r3, #2
 80088f4:	e0be      	b.n	8008a74 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80088fe:	2300      	movs	r3, #0
 8008900:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008902:	2300      	movs	r3, #0
 8008904:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a5c      	ldr	r2, [pc, #368]	; (8008a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d102      	bne.n	8008916 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008910:	4b5b      	ldr	r3, [pc, #364]	; (8008a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008912:	60bb      	str	r3, [r7, #8]
 8008914:	e001      	b.n	800891a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008916:	2300      	movs	r3, #0
 8008918:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10b      	bne.n	8008938 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008924:	f043 0220 	orr.w	r2, r3, #32
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e09d      	b.n	8008a74 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ff87 	bl	800884e <LL_ADC_REG_IsConversionOngoing>
 8008940:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff ff81 	bl	800884e <LL_ADC_REG_IsConversionOngoing>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d17f      	bne.n	8008a52 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008954:	2b00      	cmp	r3, #0
 8008956:	d17c      	bne.n	8008a52 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a47      	ldr	r2, [pc, #284]	; (8008a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a46      	ldr	r2, [pc, #280]	; (8008a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d101      	bne.n	8008970 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800896c:	4b45      	ldr	r3, [pc, #276]	; (8008a84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800896e:	e000      	b.n	8008972 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008970:	4b45      	ldr	r3, [pc, #276]	; (8008a88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008972:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d039      	beq.n	80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	431a      	orrs	r2, r3
 800898a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800898c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a3a      	ldr	r2, [pc, #232]	; (8008a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d004      	beq.n	80089a2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a38      	ldr	r2, [pc, #224]	; (8008a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d10e      	bne.n	80089c0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80089a2:	4836      	ldr	r0, [pc, #216]	; (8008a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80089a4:	f7ff ff40 	bl	8008828 <LL_ADC_IsEnabled>
 80089a8:	4604      	mov	r4, r0
 80089aa:	4835      	ldr	r0, [pc, #212]	; (8008a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80089ac:	f7ff ff3c 	bl	8008828 <LL_ADC_IsEnabled>
 80089b0:	4603      	mov	r3, r0
 80089b2:	4323      	orrs	r3, r4
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	bf0c      	ite	eq
 80089b8:	2301      	moveq	r3, #1
 80089ba:	2300      	movne	r3, #0
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	e008      	b.n	80089d2 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80089c0:	4832      	ldr	r0, [pc, #200]	; (8008a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80089c2:	f7ff ff31 	bl	8008828 <LL_ADC_IsEnabled>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	bf0c      	ite	eq
 80089cc:	2301      	moveq	r3, #1
 80089ce:	2300      	movne	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d047      	beq.n	8008a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80089d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d8:	689a      	ldr	r2, [r3, #8]
 80089da:	4b2d      	ldr	r3, [pc, #180]	; (8008a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80089dc:	4013      	ands	r3, r2
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	6811      	ldr	r1, [r2, #0]
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	6892      	ldr	r2, [r2, #8]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	431a      	orrs	r2, r3
 80089ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ec:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089ee:	e03a      	b.n	8008a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80089f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80089f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a1e      	ldr	r2, [pc, #120]	; (8008a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d004      	beq.n	8008a10 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a1d      	ldr	r2, [pc, #116]	; (8008a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d10e      	bne.n	8008a2e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008a10:	481a      	ldr	r0, [pc, #104]	; (8008a7c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008a12:	f7ff ff09 	bl	8008828 <LL_ADC_IsEnabled>
 8008a16:	4604      	mov	r4, r0
 8008a18:	4819      	ldr	r0, [pc, #100]	; (8008a80 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008a1a:	f7ff ff05 	bl	8008828 <LL_ADC_IsEnabled>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	4323      	orrs	r3, r4
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	bf0c      	ite	eq
 8008a26:	2301      	moveq	r3, #1
 8008a28:	2300      	movne	r3, #0
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	e008      	b.n	8008a40 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008a2e:	4817      	ldr	r0, [pc, #92]	; (8008a8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008a30:	f7ff fefa 	bl	8008828 <LL_ADC_IsEnabled>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bf0c      	ite	eq
 8008a3a:	2301      	moveq	r3, #1
 8008a3c:	2300      	movne	r3, #0
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d010      	beq.n	8008a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008a4e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008a50:	e009      	b.n	8008a66 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a56:	f043 0220 	orr.w	r2, r3, #32
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008a64:	e000      	b.n	8008a68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008a66:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008a70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	377c      	adds	r7, #124	; 0x7c
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd90      	pop	{r4, r7, pc}
 8008a7c:	40022000 	.word	0x40022000
 8008a80:	40022100 	.word	0x40022100
 8008a84:	40022300 	.word	0x40022300
 8008a88:	58026300 	.word	0x58026300
 8008a8c:	58026000 	.word	0x58026000
 8008a90:	fffff0e0 	.word	0xfffff0e0

08008a94 <__NVIC_SetPriorityGrouping>:
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008abc:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ac2:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	60d3      	str	r3, [r2, #12]
}
 8008ac8:	bf00      	nop
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	e000ed00 	.word	0xe000ed00
 8008ad8:	05fa0000 	.word	0x05fa0000

08008adc <__NVIC_GetPriorityGrouping>:
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <__NVIC_GetPriorityGrouping+0x18>)
 8008ae2:	68db      	ldr	r3, [r3, #12]
 8008ae4:	0a1b      	lsrs	r3, r3, #8
 8008ae6:	f003 0307 	and.w	r3, r3, #7
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	e000ed00 	.word	0xe000ed00

08008af8 <__NVIC_EnableIRQ>:
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	4603      	mov	r3, r0
 8008b00:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008b02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	db0b      	blt.n	8008b22 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	f003 021f 	and.w	r2, r3, #31
 8008b10:	4907      	ldr	r1, [pc, #28]	; (8008b30 <__NVIC_EnableIRQ+0x38>)
 8008b12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	2001      	movs	r0, #1
 8008b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8008b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	e000e100 	.word	0xe000e100

08008b34 <__NVIC_SetPriority>:
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	6039      	str	r1, [r7, #0]
 8008b3e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008b40:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	db0a      	blt.n	8008b5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	b2da      	uxtb	r2, r3
 8008b4c:	490c      	ldr	r1, [pc, #48]	; (8008b80 <__NVIC_SetPriority+0x4c>)
 8008b4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008b52:	0112      	lsls	r2, r2, #4
 8008b54:	b2d2      	uxtb	r2, r2
 8008b56:	440b      	add	r3, r1
 8008b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008b5c:	e00a      	b.n	8008b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	4908      	ldr	r1, [pc, #32]	; (8008b84 <__NVIC_SetPriority+0x50>)
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	f003 030f 	and.w	r3, r3, #15
 8008b6a:	3b04      	subs	r3, #4
 8008b6c:	0112      	lsls	r2, r2, #4
 8008b6e:	b2d2      	uxtb	r2, r2
 8008b70:	440b      	add	r3, r1
 8008b72:	761a      	strb	r2, [r3, #24]
}
 8008b74:	bf00      	nop
 8008b76:	370c      	adds	r7, #12
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	e000e100 	.word	0xe000e100
 8008b84:	e000ed00 	.word	0xe000ed00

08008b88 <NVIC_EncodePriority>:
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b089      	sub	sp, #36	; 0x24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b9c:	69fb      	ldr	r3, [r7, #28]
 8008b9e:	f1c3 0307 	rsb	r3, r3, #7
 8008ba2:	2b04      	cmp	r3, #4
 8008ba4:	bf28      	it	cs
 8008ba6:	2304      	movcs	r3, #4
 8008ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	3304      	adds	r3, #4
 8008bae:	2b06      	cmp	r3, #6
 8008bb0:	d902      	bls.n	8008bb8 <NVIC_EncodePriority+0x30>
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	3b03      	subs	r3, #3
 8008bb6:	e000      	b.n	8008bba <NVIC_EncodePriority+0x32>
 8008bb8:	2300      	movs	r3, #0
 8008bba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43da      	mvns	r2, r3
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	401a      	ands	r2, r3
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bda:	43d9      	mvns	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008be0:	4313      	orrs	r3, r2
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3724      	adds	r7, #36	; 0x24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
	...

08008bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c00:	d301      	bcc.n	8008c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c02:	2301      	movs	r3, #1
 8008c04:	e00f      	b.n	8008c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c06:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <SysTick_Config+0x40>)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c0e:	210f      	movs	r1, #15
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c14:	f7ff ff8e 	bl	8008b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <SysTick_Config+0x40>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <SysTick_Config+0x40>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	e000e010 	.word	0xe000e010

08008c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f7ff ff29 	bl	8008a94 <__NVIC_SetPriorityGrouping>
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b086      	sub	sp, #24
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	4603      	mov	r3, r0
 8008c52:	60b9      	str	r1, [r7, #8]
 8008c54:	607a      	str	r2, [r7, #4]
 8008c56:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008c58:	f7ff ff40 	bl	8008adc <__NVIC_GetPriorityGrouping>
 8008c5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	6978      	ldr	r0, [r7, #20]
 8008c64:	f7ff ff90 	bl	8008b88 <NVIC_EncodePriority>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff ff5f 	bl	8008b34 <__NVIC_SetPriority>
}
 8008c76:	bf00      	nop
 8008c78:	3718      	adds	r7, #24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	4603      	mov	r3, r0
 8008c86:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f7ff ff33 	bl	8008af8 <__NVIC_EnableIRQ>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff ffa4 	bl	8008bf0 <SysTick_Config>
 8008ca8:	4603      	mov	r3, r0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b086      	sub	sp, #24
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008cbc:	f7fe f92e 	bl	8006f1c <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d101      	bne.n	8008ccc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e316      	b.n	80092fa <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a66      	ldr	r2, [pc, #408]	; (8008e6c <HAL_DMA_Init+0x1b8>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d04a      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a65      	ldr	r2, [pc, #404]	; (8008e70 <HAL_DMA_Init+0x1bc>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d045      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a63      	ldr	r2, [pc, #396]	; (8008e74 <HAL_DMA_Init+0x1c0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d040      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4a62      	ldr	r2, [pc, #392]	; (8008e78 <HAL_DMA_Init+0x1c4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d03b      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a60      	ldr	r2, [pc, #384]	; (8008e7c <HAL_DMA_Init+0x1c8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d036      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a5f      	ldr	r2, [pc, #380]	; (8008e80 <HAL_DMA_Init+0x1cc>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d031      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a5d      	ldr	r2, [pc, #372]	; (8008e84 <HAL_DMA_Init+0x1d0>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d02c      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a5c      	ldr	r2, [pc, #368]	; (8008e88 <HAL_DMA_Init+0x1d4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d027      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a5a      	ldr	r2, [pc, #360]	; (8008e8c <HAL_DMA_Init+0x1d8>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d022      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a59      	ldr	r2, [pc, #356]	; (8008e90 <HAL_DMA_Init+0x1dc>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d01d      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a57      	ldr	r2, [pc, #348]	; (8008e94 <HAL_DMA_Init+0x1e0>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d018      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a56      	ldr	r2, [pc, #344]	; (8008e98 <HAL_DMA_Init+0x1e4>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d013      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a54      	ldr	r2, [pc, #336]	; (8008e9c <HAL_DMA_Init+0x1e8>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00e      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a53      	ldr	r2, [pc, #332]	; (8008ea0 <HAL_DMA_Init+0x1ec>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d009      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a51      	ldr	r2, [pc, #324]	; (8008ea4 <HAL_DMA_Init+0x1f0>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d004      	beq.n	8008d6c <HAL_DMA_Init+0xb8>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a50      	ldr	r2, [pc, #320]	; (8008ea8 <HAL_DMA_Init+0x1f4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d101      	bne.n	8008d70 <HAL_DMA_Init+0xbc>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e000      	b.n	8008d72 <HAL_DMA_Init+0xbe>
 8008d70:	2300      	movs	r3, #0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 813b 	beq.w	8008fee <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2202      	movs	r2, #2
 8008d7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a37      	ldr	r2, [pc, #220]	; (8008e6c <HAL_DMA_Init+0x1b8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d04a      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a36      	ldr	r2, [pc, #216]	; (8008e70 <HAL_DMA_Init+0x1bc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d045      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a34      	ldr	r2, [pc, #208]	; (8008e74 <HAL_DMA_Init+0x1c0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d040      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a33      	ldr	r2, [pc, #204]	; (8008e78 <HAL_DMA_Init+0x1c4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d03b      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a31      	ldr	r2, [pc, #196]	; (8008e7c <HAL_DMA_Init+0x1c8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d036      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a30      	ldr	r2, [pc, #192]	; (8008e80 <HAL_DMA_Init+0x1cc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d031      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a2e      	ldr	r2, [pc, #184]	; (8008e84 <HAL_DMA_Init+0x1d0>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d02c      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a2d      	ldr	r2, [pc, #180]	; (8008e88 <HAL_DMA_Init+0x1d4>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d027      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a2b      	ldr	r2, [pc, #172]	; (8008e8c <HAL_DMA_Init+0x1d8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d022      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a2a      	ldr	r2, [pc, #168]	; (8008e90 <HAL_DMA_Init+0x1dc>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d01d      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a28      	ldr	r2, [pc, #160]	; (8008e94 <HAL_DMA_Init+0x1e0>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d018      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4a27      	ldr	r2, [pc, #156]	; (8008e98 <HAL_DMA_Init+0x1e4>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d013      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a25      	ldr	r2, [pc, #148]	; (8008e9c <HAL_DMA_Init+0x1e8>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d00e      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a24      	ldr	r2, [pc, #144]	; (8008ea0 <HAL_DMA_Init+0x1ec>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d009      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a22      	ldr	r2, [pc, #136]	; (8008ea4 <HAL_DMA_Init+0x1f0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d004      	beq.n	8008e28 <HAL_DMA_Init+0x174>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a21      	ldr	r2, [pc, #132]	; (8008ea8 <HAL_DMA_Init+0x1f4>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d108      	bne.n	8008e3a <HAL_DMA_Init+0x186>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0201 	bic.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e007      	b.n	8008e4a <HAL_DMA_Init+0x196>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0201 	bic.w	r2, r2, #1
 8008e48:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e4a:	e02f      	b.n	8008eac <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e4c:	f7fe f866 	bl	8006f1c <HAL_GetTick>
 8008e50:	4602      	mov	r2, r0
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	1ad3      	subs	r3, r2, r3
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	d928      	bls.n	8008eac <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2220      	movs	r2, #32
 8008e5e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2203      	movs	r2, #3
 8008e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e246      	b.n	80092fa <HAL_DMA_Init+0x646>
 8008e6c:	40020010 	.word	0x40020010
 8008e70:	40020028 	.word	0x40020028
 8008e74:	40020040 	.word	0x40020040
 8008e78:	40020058 	.word	0x40020058
 8008e7c:	40020070 	.word	0x40020070
 8008e80:	40020088 	.word	0x40020088
 8008e84:	400200a0 	.word	0x400200a0
 8008e88:	400200b8 	.word	0x400200b8
 8008e8c:	40020410 	.word	0x40020410
 8008e90:	40020428 	.word	0x40020428
 8008e94:	40020440 	.word	0x40020440
 8008e98:	40020458 	.word	0x40020458
 8008e9c:	40020470 	.word	0x40020470
 8008ea0:	40020488 	.word	0x40020488
 8008ea4:	400204a0 	.word	0x400204a0
 8008ea8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1c8      	bne.n	8008e4c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	4b83      	ldr	r3, [pc, #524]	; (80090d4 <HAL_DMA_Init+0x420>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008ed2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008eea:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a1b      	ldr	r3, [r3, #32]
 8008ef0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	d107      	bne.n	8008f10 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008f10:	4b71      	ldr	r3, [pc, #452]	; (80090d8 <HAL_DMA_Init+0x424>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b71      	ldr	r3, [pc, #452]	; (80090dc <HAL_DMA_Init+0x428>)
 8008f16:	4013      	ands	r3, r2
 8008f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f1c:	d328      	bcc.n	8008f70 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b28      	cmp	r3, #40	; 0x28
 8008f24:	d903      	bls.n	8008f2e <HAL_DMA_Init+0x27a>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f2c:	d917      	bls.n	8008f5e <HAL_DMA_Init+0x2aa>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2b3e      	cmp	r3, #62	; 0x3e
 8008f34:	d903      	bls.n	8008f3e <HAL_DMA_Init+0x28a>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	2b42      	cmp	r3, #66	; 0x42
 8008f3c:	d90f      	bls.n	8008f5e <HAL_DMA_Init+0x2aa>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	2b46      	cmp	r3, #70	; 0x46
 8008f44:	d903      	bls.n	8008f4e <HAL_DMA_Init+0x29a>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b48      	cmp	r3, #72	; 0x48
 8008f4c:	d907      	bls.n	8008f5e <HAL_DMA_Init+0x2aa>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	2b4e      	cmp	r3, #78	; 0x4e
 8008f54:	d905      	bls.n	8008f62 <HAL_DMA_Init+0x2ae>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	2b52      	cmp	r3, #82	; 0x52
 8008f5c:	d801      	bhi.n	8008f62 <HAL_DMA_Init+0x2ae>
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e000      	b.n	8008f64 <HAL_DMA_Init+0x2b0>
 8008f62:	2300      	movs	r3, #0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f6e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	697a      	ldr	r2, [r7, #20]
 8008f76:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f023 0307 	bic.w	r3, r3, #7
 8008f86:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f96:	2b04      	cmp	r3, #4
 8008f98:	d117      	bne.n	8008fca <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00e      	beq.n	8008fca <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f002 fb33 	bl	800b618 <DMA_CheckFifoParam>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2240      	movs	r2, #64	; 0x40
 8008fbc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	e197      	b.n	80092fa <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f002 fa6e 	bl	800b4b4 <DMA_CalcBaseAndBitshift>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fe0:	f003 031f 	and.w	r3, r3, #31
 8008fe4:	223f      	movs	r2, #63	; 0x3f
 8008fe6:	409a      	lsls	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	609a      	str	r2, [r3, #8]
 8008fec:	e0cd      	b.n	800918a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a3b      	ldr	r2, [pc, #236]	; (80090e0 <HAL_DMA_Init+0x42c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d022      	beq.n	800903e <HAL_DMA_Init+0x38a>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a39      	ldr	r2, [pc, #228]	; (80090e4 <HAL_DMA_Init+0x430>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01d      	beq.n	800903e <HAL_DMA_Init+0x38a>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a38      	ldr	r2, [pc, #224]	; (80090e8 <HAL_DMA_Init+0x434>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d018      	beq.n	800903e <HAL_DMA_Init+0x38a>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a36      	ldr	r2, [pc, #216]	; (80090ec <HAL_DMA_Init+0x438>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <HAL_DMA_Init+0x38a>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a35      	ldr	r2, [pc, #212]	; (80090f0 <HAL_DMA_Init+0x43c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00e      	beq.n	800903e <HAL_DMA_Init+0x38a>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a33      	ldr	r2, [pc, #204]	; (80090f4 <HAL_DMA_Init+0x440>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d009      	beq.n	800903e <HAL_DMA_Init+0x38a>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a32      	ldr	r2, [pc, #200]	; (80090f8 <HAL_DMA_Init+0x444>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d004      	beq.n	800903e <HAL_DMA_Init+0x38a>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a30      	ldr	r2, [pc, #192]	; (80090fc <HAL_DMA_Init+0x448>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d101      	bne.n	8009042 <HAL_DMA_Init+0x38e>
 800903e:	2301      	movs	r3, #1
 8009040:	e000      	b.n	8009044 <HAL_DMA_Init+0x390>
 8009042:	2300      	movs	r3, #0
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 8097 	beq.w	8009178 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a24      	ldr	r2, [pc, #144]	; (80090e0 <HAL_DMA_Init+0x42c>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d021      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a22      	ldr	r2, [pc, #136]	; (80090e4 <HAL_DMA_Init+0x430>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01c      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a21      	ldr	r2, [pc, #132]	; (80090e8 <HAL_DMA_Init+0x434>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d017      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1f      	ldr	r2, [pc, #124]	; (80090ec <HAL_DMA_Init+0x438>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d012      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1e      	ldr	r2, [pc, #120]	; (80090f0 <HAL_DMA_Init+0x43c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00d      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1c      	ldr	r2, [pc, #112]	; (80090f4 <HAL_DMA_Init+0x440>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d008      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a1b      	ldr	r2, [pc, #108]	; (80090f8 <HAL_DMA_Init+0x444>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d003      	beq.n	8009098 <HAL_DMA_Init+0x3e4>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a19      	ldr	r2, [pc, #100]	; (80090fc <HAL_DMA_Init+0x448>)
 8009096:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4b13      	ldr	r3, [pc, #76]	; (8009100 <HAL_DMA_Init+0x44c>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	2b40      	cmp	r3, #64	; 0x40
 80090be:	d021      	beq.n	8009104 <HAL_DMA_Init+0x450>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	2b80      	cmp	r3, #128	; 0x80
 80090c6:	d102      	bne.n	80090ce <HAL_DMA_Init+0x41a>
 80090c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80090cc:	e01b      	b.n	8009106 <HAL_DMA_Init+0x452>
 80090ce:	2300      	movs	r3, #0
 80090d0:	e019      	b.n	8009106 <HAL_DMA_Init+0x452>
 80090d2:	bf00      	nop
 80090d4:	fe10803f 	.word	0xfe10803f
 80090d8:	5c001000 	.word	0x5c001000
 80090dc:	ffff0000 	.word	0xffff0000
 80090e0:	58025408 	.word	0x58025408
 80090e4:	5802541c 	.word	0x5802541c
 80090e8:	58025430 	.word	0x58025430
 80090ec:	58025444 	.word	0x58025444
 80090f0:	58025458 	.word	0x58025458
 80090f4:	5802546c 	.word	0x5802546c
 80090f8:	58025480 	.word	0x58025480
 80090fc:	58025494 	.word	0x58025494
 8009100:	fffe000f 	.word	0xfffe000f
 8009104:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	68d2      	ldr	r2, [r2, #12]
 800910a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800910c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800911c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009124:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800912c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009134:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	4313      	orrs	r3, r2
 800913a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	4b6e      	ldr	r3, [pc, #440]	; (8009304 <HAL_DMA_Init+0x650>)
 800914c:	4413      	add	r3, r2
 800914e:	4a6e      	ldr	r2, [pc, #440]	; (8009308 <HAL_DMA_Init+0x654>)
 8009150:	fba2 2303 	umull	r2, r3, r2, r3
 8009154:	091b      	lsrs	r3, r3, #4
 8009156:	009a      	lsls	r2, r3, #2
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f002 f9a9 	bl	800b4b4 <DMA_CalcBaseAndBitshift>
 8009162:	4603      	mov	r3, r0
 8009164:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800916a:	f003 031f 	and.w	r3, r3, #31
 800916e:	2201      	movs	r2, #1
 8009170:	409a      	lsls	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	605a      	str	r2, [r3, #4]
 8009176:	e008      	b.n	800918a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2240      	movs	r2, #64	; 0x40
 800917c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2203      	movs	r2, #3
 8009182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e0b7      	b.n	80092fa <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a5f      	ldr	r2, [pc, #380]	; (800930c <HAL_DMA_Init+0x658>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d072      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a5d      	ldr	r2, [pc, #372]	; (8009310 <HAL_DMA_Init+0x65c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d06d      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a5c      	ldr	r2, [pc, #368]	; (8009314 <HAL_DMA_Init+0x660>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d068      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a5a      	ldr	r2, [pc, #360]	; (8009318 <HAL_DMA_Init+0x664>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d063      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a59      	ldr	r2, [pc, #356]	; (800931c <HAL_DMA_Init+0x668>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d05e      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a57      	ldr	r2, [pc, #348]	; (8009320 <HAL_DMA_Init+0x66c>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d059      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a56      	ldr	r2, [pc, #344]	; (8009324 <HAL_DMA_Init+0x670>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d054      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a54      	ldr	r2, [pc, #336]	; (8009328 <HAL_DMA_Init+0x674>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d04f      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a53      	ldr	r2, [pc, #332]	; (800932c <HAL_DMA_Init+0x678>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d04a      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a51      	ldr	r2, [pc, #324]	; (8009330 <HAL_DMA_Init+0x67c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d045      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a50      	ldr	r2, [pc, #320]	; (8009334 <HAL_DMA_Init+0x680>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d040      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a4e      	ldr	r2, [pc, #312]	; (8009338 <HAL_DMA_Init+0x684>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d03b      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a4d      	ldr	r2, [pc, #308]	; (800933c <HAL_DMA_Init+0x688>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d036      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a4b      	ldr	r2, [pc, #300]	; (8009340 <HAL_DMA_Init+0x68c>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d031      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a4a      	ldr	r2, [pc, #296]	; (8009344 <HAL_DMA_Init+0x690>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d02c      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a48      	ldr	r2, [pc, #288]	; (8009348 <HAL_DMA_Init+0x694>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d027      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a47      	ldr	r2, [pc, #284]	; (800934c <HAL_DMA_Init+0x698>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d022      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a45      	ldr	r2, [pc, #276]	; (8009350 <HAL_DMA_Init+0x69c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d01d      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a44      	ldr	r2, [pc, #272]	; (8009354 <HAL_DMA_Init+0x6a0>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d018      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a42      	ldr	r2, [pc, #264]	; (8009358 <HAL_DMA_Init+0x6a4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a41      	ldr	r2, [pc, #260]	; (800935c <HAL_DMA_Init+0x6a8>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d00e      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a3f      	ldr	r2, [pc, #252]	; (8009360 <HAL_DMA_Init+0x6ac>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d009      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3e      	ldr	r2, [pc, #248]	; (8009364 <HAL_DMA_Init+0x6b0>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d004      	beq.n	800927a <HAL_DMA_Init+0x5c6>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a3c      	ldr	r2, [pc, #240]	; (8009368 <HAL_DMA_Init+0x6b4>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d101      	bne.n	800927e <HAL_DMA_Init+0x5ca>
 800927a:	2301      	movs	r3, #1
 800927c:	e000      	b.n	8009280 <HAL_DMA_Init+0x5cc>
 800927e:	2300      	movs	r3, #0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d032      	beq.n	80092ea <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f002 fa43 	bl	800b710 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	2b80      	cmp	r3, #128	; 0x80
 8009290:	d102      	bne.n	8009298 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092a0:	b2d2      	uxtb	r2, r2
 80092a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80092ac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d010      	beq.n	80092d8 <HAL_DMA_Init+0x624>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d80c      	bhi.n	80092d8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f002 fac0 	bl	800b844 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092c8:	2200      	movs	r2, #0
 80092ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80092d4:	605a      	str	r2, [r3, #4]
 80092d6:	e008      	b.n	80092ea <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2200      	movs	r2, #0
 80092ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3718      	adds	r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	a7fdabf8 	.word	0xa7fdabf8
 8009308:	cccccccd 	.word	0xcccccccd
 800930c:	40020010 	.word	0x40020010
 8009310:	40020028 	.word	0x40020028
 8009314:	40020040 	.word	0x40020040
 8009318:	40020058 	.word	0x40020058
 800931c:	40020070 	.word	0x40020070
 8009320:	40020088 	.word	0x40020088
 8009324:	400200a0 	.word	0x400200a0
 8009328:	400200b8 	.word	0x400200b8
 800932c:	40020410 	.word	0x40020410
 8009330:	40020428 	.word	0x40020428
 8009334:	40020440 	.word	0x40020440
 8009338:	40020458 	.word	0x40020458
 800933c:	40020470 	.word	0x40020470
 8009340:	40020488 	.word	0x40020488
 8009344:	400204a0 	.word	0x400204a0
 8009348:	400204b8 	.word	0x400204b8
 800934c:	58025408 	.word	0x58025408
 8009350:	5802541c 	.word	0x5802541c
 8009354:	58025430 	.word	0x58025430
 8009358:	58025444 	.word	0x58025444
 800935c:	58025458 	.word	0x58025458
 8009360:	5802546c 	.word	0x5802546c
 8009364:	58025480 	.word	0x58025480
 8009368:	58025494 	.word	0x58025494

0800936c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
 8009378:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e226      	b.n	80097d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_DMA_Start_IT+0x2a>
 8009392:	2302      	movs	r3, #2
 8009394:	e21f      	b.n	80097d6 <HAL_DMA_Start_IT+0x46a>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	f040 820a 	bne.w	80097c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a68      	ldr	r2, [pc, #416]	; (8009560 <HAL_DMA_Start_IT+0x1f4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d04a      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a66      	ldr	r2, [pc, #408]	; (8009564 <HAL_DMA_Start_IT+0x1f8>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d045      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a65      	ldr	r2, [pc, #404]	; (8009568 <HAL_DMA_Start_IT+0x1fc>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d040      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a63      	ldr	r2, [pc, #396]	; (800956c <HAL_DMA_Start_IT+0x200>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d03b      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a62      	ldr	r2, [pc, #392]	; (8009570 <HAL_DMA_Start_IT+0x204>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d036      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a60      	ldr	r2, [pc, #384]	; (8009574 <HAL_DMA_Start_IT+0x208>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d031      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a5f      	ldr	r2, [pc, #380]	; (8009578 <HAL_DMA_Start_IT+0x20c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d02c      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a5d      	ldr	r2, [pc, #372]	; (800957c <HAL_DMA_Start_IT+0x210>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d027      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a5c      	ldr	r2, [pc, #368]	; (8009580 <HAL_DMA_Start_IT+0x214>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d022      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a5a      	ldr	r2, [pc, #360]	; (8009584 <HAL_DMA_Start_IT+0x218>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d01d      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a59      	ldr	r2, [pc, #356]	; (8009588 <HAL_DMA_Start_IT+0x21c>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d018      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a57      	ldr	r2, [pc, #348]	; (800958c <HAL_DMA_Start_IT+0x220>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d013      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a56      	ldr	r2, [pc, #344]	; (8009590 <HAL_DMA_Start_IT+0x224>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d00e      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a54      	ldr	r2, [pc, #336]	; (8009594 <HAL_DMA_Start_IT+0x228>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d009      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a53      	ldr	r2, [pc, #332]	; (8009598 <HAL_DMA_Start_IT+0x22c>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d004      	beq.n	800945a <HAL_DMA_Start_IT+0xee>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a51      	ldr	r2, [pc, #324]	; (800959c <HAL_DMA_Start_IT+0x230>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d108      	bne.n	800946c <HAL_DMA_Start_IT+0x100>
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 0201 	bic.w	r2, r2, #1
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	e007      	b.n	800947c <HAL_DMA_Start_IT+0x110>
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f022 0201 	bic.w	r2, r2, #1
 800947a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	68b9      	ldr	r1, [r7, #8]
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f001 fe6a 	bl	800b15c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a34      	ldr	r2, [pc, #208]	; (8009560 <HAL_DMA_Start_IT+0x1f4>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d04a      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a33      	ldr	r2, [pc, #204]	; (8009564 <HAL_DMA_Start_IT+0x1f8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d045      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a31      	ldr	r2, [pc, #196]	; (8009568 <HAL_DMA_Start_IT+0x1fc>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d040      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a30      	ldr	r2, [pc, #192]	; (800956c <HAL_DMA_Start_IT+0x200>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d03b      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a2e      	ldr	r2, [pc, #184]	; (8009570 <HAL_DMA_Start_IT+0x204>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d036      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2d      	ldr	r2, [pc, #180]	; (8009574 <HAL_DMA_Start_IT+0x208>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d031      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a2b      	ldr	r2, [pc, #172]	; (8009578 <HAL_DMA_Start_IT+0x20c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d02c      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a2a      	ldr	r2, [pc, #168]	; (800957c <HAL_DMA_Start_IT+0x210>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d027      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	4a28      	ldr	r2, [pc, #160]	; (8009580 <HAL_DMA_Start_IT+0x214>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d022      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a27      	ldr	r2, [pc, #156]	; (8009584 <HAL_DMA_Start_IT+0x218>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d01d      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a25      	ldr	r2, [pc, #148]	; (8009588 <HAL_DMA_Start_IT+0x21c>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d018      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a24      	ldr	r2, [pc, #144]	; (800958c <HAL_DMA_Start_IT+0x220>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d013      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a22      	ldr	r2, [pc, #136]	; (8009590 <HAL_DMA_Start_IT+0x224>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d00e      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a21      	ldr	r2, [pc, #132]	; (8009594 <HAL_DMA_Start_IT+0x228>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d009      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a1f      	ldr	r2, [pc, #124]	; (8009598 <HAL_DMA_Start_IT+0x22c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d004      	beq.n	8009528 <HAL_DMA_Start_IT+0x1bc>
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a1e      	ldr	r2, [pc, #120]	; (800959c <HAL_DMA_Start_IT+0x230>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d101      	bne.n	800952c <HAL_DMA_Start_IT+0x1c0>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <HAL_DMA_Start_IT+0x1c2>
 800952c:	2300      	movs	r3, #0
 800952e:	2b00      	cmp	r3, #0
 8009530:	d036      	beq.n	80095a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f023 021e 	bic.w	r2, r3, #30
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f042 0216 	orr.w	r2, r2, #22
 8009544:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954a:	2b00      	cmp	r3, #0
 800954c:	d03e      	beq.n	80095cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0208 	orr.w	r2, r2, #8
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e035      	b.n	80095cc <HAL_DMA_Start_IT+0x260>
 8009560:	40020010 	.word	0x40020010
 8009564:	40020028 	.word	0x40020028
 8009568:	40020040 	.word	0x40020040
 800956c:	40020058 	.word	0x40020058
 8009570:	40020070 	.word	0x40020070
 8009574:	40020088 	.word	0x40020088
 8009578:	400200a0 	.word	0x400200a0
 800957c:	400200b8 	.word	0x400200b8
 8009580:	40020410 	.word	0x40020410
 8009584:	40020428 	.word	0x40020428
 8009588:	40020440 	.word	0x40020440
 800958c:	40020458 	.word	0x40020458
 8009590:	40020470 	.word	0x40020470
 8009594:	40020488 	.word	0x40020488
 8009598:	400204a0 	.word	0x400204a0
 800959c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f023 020e 	bic.w	r2, r3, #14
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f042 020a 	orr.w	r2, r2, #10
 80095b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0204 	orr.w	r2, r2, #4
 80095ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a83      	ldr	r2, [pc, #524]	; (80097e0 <HAL_DMA_Start_IT+0x474>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d072      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a82      	ldr	r2, [pc, #520]	; (80097e4 <HAL_DMA_Start_IT+0x478>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d06d      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a80      	ldr	r2, [pc, #512]	; (80097e8 <HAL_DMA_Start_IT+0x47c>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d068      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a7f      	ldr	r2, [pc, #508]	; (80097ec <HAL_DMA_Start_IT+0x480>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d063      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a7d      	ldr	r2, [pc, #500]	; (80097f0 <HAL_DMA_Start_IT+0x484>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d05e      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a7c      	ldr	r2, [pc, #496]	; (80097f4 <HAL_DMA_Start_IT+0x488>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d059      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a7a      	ldr	r2, [pc, #488]	; (80097f8 <HAL_DMA_Start_IT+0x48c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d054      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a79      	ldr	r2, [pc, #484]	; (80097fc <HAL_DMA_Start_IT+0x490>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d04f      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a77      	ldr	r2, [pc, #476]	; (8009800 <HAL_DMA_Start_IT+0x494>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d04a      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a76      	ldr	r2, [pc, #472]	; (8009804 <HAL_DMA_Start_IT+0x498>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d045      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a74      	ldr	r2, [pc, #464]	; (8009808 <HAL_DMA_Start_IT+0x49c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d040      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a73      	ldr	r2, [pc, #460]	; (800980c <HAL_DMA_Start_IT+0x4a0>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d03b      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a71      	ldr	r2, [pc, #452]	; (8009810 <HAL_DMA_Start_IT+0x4a4>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d036      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a70      	ldr	r2, [pc, #448]	; (8009814 <HAL_DMA_Start_IT+0x4a8>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d031      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a6e      	ldr	r2, [pc, #440]	; (8009818 <HAL_DMA_Start_IT+0x4ac>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d02c      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	4a6d      	ldr	r2, [pc, #436]	; (800981c <HAL_DMA_Start_IT+0x4b0>)
 8009668:	4293      	cmp	r3, r2
 800966a:	d027      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4a6b      	ldr	r2, [pc, #428]	; (8009820 <HAL_DMA_Start_IT+0x4b4>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d022      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a6a      	ldr	r2, [pc, #424]	; (8009824 <HAL_DMA_Start_IT+0x4b8>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d01d      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a68      	ldr	r2, [pc, #416]	; (8009828 <HAL_DMA_Start_IT+0x4bc>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d018      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a67      	ldr	r2, [pc, #412]	; (800982c <HAL_DMA_Start_IT+0x4c0>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d013      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a65      	ldr	r2, [pc, #404]	; (8009830 <HAL_DMA_Start_IT+0x4c4>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d00e      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a64      	ldr	r2, [pc, #400]	; (8009834 <HAL_DMA_Start_IT+0x4c8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d009      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a62      	ldr	r2, [pc, #392]	; (8009838 <HAL_DMA_Start_IT+0x4cc>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d004      	beq.n	80096bc <HAL_DMA_Start_IT+0x350>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a61      	ldr	r2, [pc, #388]	; (800983c <HAL_DMA_Start_IT+0x4d0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d101      	bne.n	80096c0 <HAL_DMA_Start_IT+0x354>
 80096bc:	2301      	movs	r3, #1
 80096be:	e000      	b.n	80096c2 <HAL_DMA_Start_IT+0x356>
 80096c0:	2300      	movs	r3, #0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01a      	beq.n	80096fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d007      	beq.n	80096fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a37      	ldr	r2, [pc, #220]	; (80097e0 <HAL_DMA_Start_IT+0x474>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d04a      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a36      	ldr	r2, [pc, #216]	; (80097e4 <HAL_DMA_Start_IT+0x478>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d045      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a34      	ldr	r2, [pc, #208]	; (80097e8 <HAL_DMA_Start_IT+0x47c>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d040      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a33      	ldr	r2, [pc, #204]	; (80097ec <HAL_DMA_Start_IT+0x480>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d03b      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a31      	ldr	r2, [pc, #196]	; (80097f0 <HAL_DMA_Start_IT+0x484>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d036      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a30      	ldr	r2, [pc, #192]	; (80097f4 <HAL_DMA_Start_IT+0x488>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d031      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a2e      	ldr	r2, [pc, #184]	; (80097f8 <HAL_DMA_Start_IT+0x48c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d02c      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a2d      	ldr	r2, [pc, #180]	; (80097fc <HAL_DMA_Start_IT+0x490>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d027      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a2b      	ldr	r2, [pc, #172]	; (8009800 <HAL_DMA_Start_IT+0x494>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d022      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a2a      	ldr	r2, [pc, #168]	; (8009804 <HAL_DMA_Start_IT+0x498>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d01d      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a28      	ldr	r2, [pc, #160]	; (8009808 <HAL_DMA_Start_IT+0x49c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d018      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	4a27      	ldr	r2, [pc, #156]	; (800980c <HAL_DMA_Start_IT+0x4a0>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d013      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a25      	ldr	r2, [pc, #148]	; (8009810 <HAL_DMA_Start_IT+0x4a4>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d00e      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a24      	ldr	r2, [pc, #144]	; (8009814 <HAL_DMA_Start_IT+0x4a8>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d009      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a22      	ldr	r2, [pc, #136]	; (8009818 <HAL_DMA_Start_IT+0x4ac>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d004      	beq.n	800979c <HAL_DMA_Start_IT+0x430>
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a21      	ldr	r2, [pc, #132]	; (800981c <HAL_DMA_Start_IT+0x4b0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d108      	bne.n	80097ae <HAL_DMA_Start_IT+0x442>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0201 	orr.w	r2, r2, #1
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	e012      	b.n	80097d4 <HAL_DMA_Start_IT+0x468>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f042 0201 	orr.w	r2, r2, #1
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	e009      	b.n	80097d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	40020010 	.word	0x40020010
 80097e4:	40020028 	.word	0x40020028
 80097e8:	40020040 	.word	0x40020040
 80097ec:	40020058 	.word	0x40020058
 80097f0:	40020070 	.word	0x40020070
 80097f4:	40020088 	.word	0x40020088
 80097f8:	400200a0 	.word	0x400200a0
 80097fc:	400200b8 	.word	0x400200b8
 8009800:	40020410 	.word	0x40020410
 8009804:	40020428 	.word	0x40020428
 8009808:	40020440 	.word	0x40020440
 800980c:	40020458 	.word	0x40020458
 8009810:	40020470 	.word	0x40020470
 8009814:	40020488 	.word	0x40020488
 8009818:	400204a0 	.word	0x400204a0
 800981c:	400204b8 	.word	0x400204b8
 8009820:	58025408 	.word	0x58025408
 8009824:	5802541c 	.word	0x5802541c
 8009828:	58025430 	.word	0x58025430
 800982c:	58025444 	.word	0x58025444
 8009830:	58025458 	.word	0x58025458
 8009834:	5802546c 	.word	0x5802546c
 8009838:	58025480 	.word	0x58025480
 800983c:	58025494 	.word	0x58025494

08009840 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b086      	sub	sp, #24
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009848:	f7fd fb68 	bl	8006f1c <HAL_GetTick>
 800984c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e2dc      	b.n	8009e12 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800985e:	b2db      	uxtb	r3, r3
 8009860:	2b02      	cmp	r3, #2
 8009862:	d008      	beq.n	8009876 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2280      	movs	r2, #128	; 0x80
 8009868:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e2cd      	b.n	8009e12 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a76      	ldr	r2, [pc, #472]	; (8009a54 <HAL_DMA_Abort+0x214>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d04a      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a74      	ldr	r2, [pc, #464]	; (8009a58 <HAL_DMA_Abort+0x218>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d045      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a73      	ldr	r2, [pc, #460]	; (8009a5c <HAL_DMA_Abort+0x21c>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d040      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a71      	ldr	r2, [pc, #452]	; (8009a60 <HAL_DMA_Abort+0x220>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d03b      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a70      	ldr	r2, [pc, #448]	; (8009a64 <HAL_DMA_Abort+0x224>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d036      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a6e      	ldr	r2, [pc, #440]	; (8009a68 <HAL_DMA_Abort+0x228>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d031      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a6d      	ldr	r2, [pc, #436]	; (8009a6c <HAL_DMA_Abort+0x22c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d02c      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a6b      	ldr	r2, [pc, #428]	; (8009a70 <HAL_DMA_Abort+0x230>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d027      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a6a      	ldr	r2, [pc, #424]	; (8009a74 <HAL_DMA_Abort+0x234>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d022      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a68      	ldr	r2, [pc, #416]	; (8009a78 <HAL_DMA_Abort+0x238>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d01d      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a67      	ldr	r2, [pc, #412]	; (8009a7c <HAL_DMA_Abort+0x23c>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d018      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a65      	ldr	r2, [pc, #404]	; (8009a80 <HAL_DMA_Abort+0x240>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d013      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a64      	ldr	r2, [pc, #400]	; (8009a84 <HAL_DMA_Abort+0x244>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00e      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a62      	ldr	r2, [pc, #392]	; (8009a88 <HAL_DMA_Abort+0x248>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d009      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a61      	ldr	r2, [pc, #388]	; (8009a8c <HAL_DMA_Abort+0x24c>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d004      	beq.n	8009916 <HAL_DMA_Abort+0xd6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a5f      	ldr	r2, [pc, #380]	; (8009a90 <HAL_DMA_Abort+0x250>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d101      	bne.n	800991a <HAL_DMA_Abort+0xda>
 8009916:	2301      	movs	r3, #1
 8009918:	e000      	b.n	800991c <HAL_DMA_Abort+0xdc>
 800991a:	2300      	movs	r3, #0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d013      	beq.n	8009948 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 021e 	bic.w	r2, r2, #30
 800992e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	695a      	ldr	r2, [r3, #20]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800993e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	617b      	str	r3, [r7, #20]
 8009946:	e00a      	b.n	800995e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 020e 	bic.w	r2, r2, #14
 8009956:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a3c      	ldr	r2, [pc, #240]	; (8009a54 <HAL_DMA_Abort+0x214>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d072      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a3a      	ldr	r2, [pc, #232]	; (8009a58 <HAL_DMA_Abort+0x218>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d06d      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4a39      	ldr	r2, [pc, #228]	; (8009a5c <HAL_DMA_Abort+0x21c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d068      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a37      	ldr	r2, [pc, #220]	; (8009a60 <HAL_DMA_Abort+0x220>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d063      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a36      	ldr	r2, [pc, #216]	; (8009a64 <HAL_DMA_Abort+0x224>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d05e      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a34      	ldr	r2, [pc, #208]	; (8009a68 <HAL_DMA_Abort+0x228>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d059      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a33      	ldr	r2, [pc, #204]	; (8009a6c <HAL_DMA_Abort+0x22c>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d054      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a31      	ldr	r2, [pc, #196]	; (8009a70 <HAL_DMA_Abort+0x230>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d04f      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a30      	ldr	r2, [pc, #192]	; (8009a74 <HAL_DMA_Abort+0x234>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d04a      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a2e      	ldr	r2, [pc, #184]	; (8009a78 <HAL_DMA_Abort+0x238>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d045      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	4a2d      	ldr	r2, [pc, #180]	; (8009a7c <HAL_DMA_Abort+0x23c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d040      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a2b      	ldr	r2, [pc, #172]	; (8009a80 <HAL_DMA_Abort+0x240>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d03b      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a2a      	ldr	r2, [pc, #168]	; (8009a84 <HAL_DMA_Abort+0x244>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d036      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a28      	ldr	r2, [pc, #160]	; (8009a88 <HAL_DMA_Abort+0x248>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d031      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a27      	ldr	r2, [pc, #156]	; (8009a8c <HAL_DMA_Abort+0x24c>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d02c      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a25      	ldr	r2, [pc, #148]	; (8009a90 <HAL_DMA_Abort+0x250>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d027      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a24      	ldr	r2, [pc, #144]	; (8009a94 <HAL_DMA_Abort+0x254>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d022      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a22      	ldr	r2, [pc, #136]	; (8009a98 <HAL_DMA_Abort+0x258>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d01d      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a21      	ldr	r2, [pc, #132]	; (8009a9c <HAL_DMA_Abort+0x25c>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d018      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <HAL_DMA_Abort+0x260>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d013      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1e      	ldr	r2, [pc, #120]	; (8009aa4 <HAL_DMA_Abort+0x264>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d00e      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a1c      	ldr	r2, [pc, #112]	; (8009aa8 <HAL_DMA_Abort+0x268>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d009      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a1b      	ldr	r2, [pc, #108]	; (8009aac <HAL_DMA_Abort+0x26c>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d004      	beq.n	8009a4e <HAL_DMA_Abort+0x20e>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a19      	ldr	r2, [pc, #100]	; (8009ab0 <HAL_DMA_Abort+0x270>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d132      	bne.n	8009ab4 <HAL_DMA_Abort+0x274>
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e031      	b.n	8009ab6 <HAL_DMA_Abort+0x276>
 8009a52:	bf00      	nop
 8009a54:	40020010 	.word	0x40020010
 8009a58:	40020028 	.word	0x40020028
 8009a5c:	40020040 	.word	0x40020040
 8009a60:	40020058 	.word	0x40020058
 8009a64:	40020070 	.word	0x40020070
 8009a68:	40020088 	.word	0x40020088
 8009a6c:	400200a0 	.word	0x400200a0
 8009a70:	400200b8 	.word	0x400200b8
 8009a74:	40020410 	.word	0x40020410
 8009a78:	40020428 	.word	0x40020428
 8009a7c:	40020440 	.word	0x40020440
 8009a80:	40020458 	.word	0x40020458
 8009a84:	40020470 	.word	0x40020470
 8009a88:	40020488 	.word	0x40020488
 8009a8c:	400204a0 	.word	0x400204a0
 8009a90:	400204b8 	.word	0x400204b8
 8009a94:	58025408 	.word	0x58025408
 8009a98:	5802541c 	.word	0x5802541c
 8009a9c:	58025430 	.word	0x58025430
 8009aa0:	58025444 	.word	0x58025444
 8009aa4:	58025458 	.word	0x58025458
 8009aa8:	5802546c 	.word	0x5802546c
 8009aac:	58025480 	.word	0x58025480
 8009ab0:	58025494 	.word	0x58025494
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d007      	beq.n	8009aca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ac8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a6d      	ldr	r2, [pc, #436]	; (8009c84 <HAL_DMA_Abort+0x444>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d04a      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a6b      	ldr	r2, [pc, #428]	; (8009c88 <HAL_DMA_Abort+0x448>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d045      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a6a      	ldr	r2, [pc, #424]	; (8009c8c <HAL_DMA_Abort+0x44c>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d040      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a68      	ldr	r2, [pc, #416]	; (8009c90 <HAL_DMA_Abort+0x450>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d03b      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	4a67      	ldr	r2, [pc, #412]	; (8009c94 <HAL_DMA_Abort+0x454>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d036      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a65      	ldr	r2, [pc, #404]	; (8009c98 <HAL_DMA_Abort+0x458>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d031      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a64      	ldr	r2, [pc, #400]	; (8009c9c <HAL_DMA_Abort+0x45c>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d02c      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a62      	ldr	r2, [pc, #392]	; (8009ca0 <HAL_DMA_Abort+0x460>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d027      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a61      	ldr	r2, [pc, #388]	; (8009ca4 <HAL_DMA_Abort+0x464>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d022      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a5f      	ldr	r2, [pc, #380]	; (8009ca8 <HAL_DMA_Abort+0x468>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01d      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a5e      	ldr	r2, [pc, #376]	; (8009cac <HAL_DMA_Abort+0x46c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d018      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4a5c      	ldr	r2, [pc, #368]	; (8009cb0 <HAL_DMA_Abort+0x470>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d013      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a5b      	ldr	r2, [pc, #364]	; (8009cb4 <HAL_DMA_Abort+0x474>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d00e      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a59      	ldr	r2, [pc, #356]	; (8009cb8 <HAL_DMA_Abort+0x478>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d009      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a58      	ldr	r2, [pc, #352]	; (8009cbc <HAL_DMA_Abort+0x47c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d004      	beq.n	8009b6a <HAL_DMA_Abort+0x32a>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a56      	ldr	r2, [pc, #344]	; (8009cc0 <HAL_DMA_Abort+0x480>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d108      	bne.n	8009b7c <HAL_DMA_Abort+0x33c>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f022 0201 	bic.w	r2, r2, #1
 8009b78:	601a      	str	r2, [r3, #0]
 8009b7a:	e007      	b.n	8009b8c <HAL_DMA_Abort+0x34c>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0201 	bic.w	r2, r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009b8c:	e013      	b.n	8009bb6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b8e:	f7fd f9c5 	bl	8006f1c <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b05      	cmp	r3, #5
 8009b9a:	d90c      	bls.n	8009bb6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2220      	movs	r2, #32
 8009ba0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e12d      	b.n	8009e12 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1e5      	bne.n	8009b8e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2f      	ldr	r2, [pc, #188]	; (8009c84 <HAL_DMA_Abort+0x444>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d04a      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a2d      	ldr	r2, [pc, #180]	; (8009c88 <HAL_DMA_Abort+0x448>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d045      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a2c      	ldr	r2, [pc, #176]	; (8009c8c <HAL_DMA_Abort+0x44c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d040      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a2a      	ldr	r2, [pc, #168]	; (8009c90 <HAL_DMA_Abort+0x450>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d03b      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a29      	ldr	r2, [pc, #164]	; (8009c94 <HAL_DMA_Abort+0x454>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d036      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a27      	ldr	r2, [pc, #156]	; (8009c98 <HAL_DMA_Abort+0x458>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d031      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a26      	ldr	r2, [pc, #152]	; (8009c9c <HAL_DMA_Abort+0x45c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d02c      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a24      	ldr	r2, [pc, #144]	; (8009ca0 <HAL_DMA_Abort+0x460>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d027      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a23      	ldr	r2, [pc, #140]	; (8009ca4 <HAL_DMA_Abort+0x464>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d022      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a21      	ldr	r2, [pc, #132]	; (8009ca8 <HAL_DMA_Abort+0x468>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d01d      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a20      	ldr	r2, [pc, #128]	; (8009cac <HAL_DMA_Abort+0x46c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d018      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <HAL_DMA_Abort+0x470>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d013      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a1d      	ldr	r2, [pc, #116]	; (8009cb4 <HAL_DMA_Abort+0x474>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d00e      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a1b      	ldr	r2, [pc, #108]	; (8009cb8 <HAL_DMA_Abort+0x478>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d009      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a1a      	ldr	r2, [pc, #104]	; (8009cbc <HAL_DMA_Abort+0x47c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d004      	beq.n	8009c62 <HAL_DMA_Abort+0x422>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a18      	ldr	r2, [pc, #96]	; (8009cc0 <HAL_DMA_Abort+0x480>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d101      	bne.n	8009c66 <HAL_DMA_Abort+0x426>
 8009c62:	2301      	movs	r3, #1
 8009c64:	e000      	b.n	8009c68 <HAL_DMA_Abort+0x428>
 8009c66:	2300      	movs	r3, #0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d02b      	beq.n	8009cc4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c70:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c76:	f003 031f 	and.w	r3, r3, #31
 8009c7a:	223f      	movs	r2, #63	; 0x3f
 8009c7c:	409a      	lsls	r2, r3
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	609a      	str	r2, [r3, #8]
 8009c82:	e02a      	b.n	8009cda <HAL_DMA_Abort+0x49a>
 8009c84:	40020010 	.word	0x40020010
 8009c88:	40020028 	.word	0x40020028
 8009c8c:	40020040 	.word	0x40020040
 8009c90:	40020058 	.word	0x40020058
 8009c94:	40020070 	.word	0x40020070
 8009c98:	40020088 	.word	0x40020088
 8009c9c:	400200a0 	.word	0x400200a0
 8009ca0:	400200b8 	.word	0x400200b8
 8009ca4:	40020410 	.word	0x40020410
 8009ca8:	40020428 	.word	0x40020428
 8009cac:	40020440 	.word	0x40020440
 8009cb0:	40020458 	.word	0x40020458
 8009cb4:	40020470 	.word	0x40020470
 8009cb8:	40020488 	.word	0x40020488
 8009cbc:	400204a0 	.word	0x400204a0
 8009cc0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cce:	f003 031f 	and.w	r3, r3, #31
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	409a      	lsls	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a4f      	ldr	r2, [pc, #316]	; (8009e1c <HAL_DMA_Abort+0x5dc>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d072      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a4d      	ldr	r2, [pc, #308]	; (8009e20 <HAL_DMA_Abort+0x5e0>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d06d      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a4c      	ldr	r2, [pc, #304]	; (8009e24 <HAL_DMA_Abort+0x5e4>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d068      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a4a      	ldr	r2, [pc, #296]	; (8009e28 <HAL_DMA_Abort+0x5e8>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d063      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a49      	ldr	r2, [pc, #292]	; (8009e2c <HAL_DMA_Abort+0x5ec>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d05e      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a47      	ldr	r2, [pc, #284]	; (8009e30 <HAL_DMA_Abort+0x5f0>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d059      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a46      	ldr	r2, [pc, #280]	; (8009e34 <HAL_DMA_Abort+0x5f4>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d054      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a44      	ldr	r2, [pc, #272]	; (8009e38 <HAL_DMA_Abort+0x5f8>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d04f      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a43      	ldr	r2, [pc, #268]	; (8009e3c <HAL_DMA_Abort+0x5fc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d04a      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a41      	ldr	r2, [pc, #260]	; (8009e40 <HAL_DMA_Abort+0x600>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d045      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a40      	ldr	r2, [pc, #256]	; (8009e44 <HAL_DMA_Abort+0x604>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d040      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a3e      	ldr	r2, [pc, #248]	; (8009e48 <HAL_DMA_Abort+0x608>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d03b      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a3d      	ldr	r2, [pc, #244]	; (8009e4c <HAL_DMA_Abort+0x60c>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d036      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a3b      	ldr	r2, [pc, #236]	; (8009e50 <HAL_DMA_Abort+0x610>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d031      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a3a      	ldr	r2, [pc, #232]	; (8009e54 <HAL_DMA_Abort+0x614>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d02c      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a38      	ldr	r2, [pc, #224]	; (8009e58 <HAL_DMA_Abort+0x618>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d027      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a37      	ldr	r2, [pc, #220]	; (8009e5c <HAL_DMA_Abort+0x61c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d022      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a35      	ldr	r2, [pc, #212]	; (8009e60 <HAL_DMA_Abort+0x620>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d01d      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a34      	ldr	r2, [pc, #208]	; (8009e64 <HAL_DMA_Abort+0x624>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d018      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a32      	ldr	r2, [pc, #200]	; (8009e68 <HAL_DMA_Abort+0x628>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d013      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a31      	ldr	r2, [pc, #196]	; (8009e6c <HAL_DMA_Abort+0x62c>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d00e      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a2f      	ldr	r2, [pc, #188]	; (8009e70 <HAL_DMA_Abort+0x630>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d009      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a2e      	ldr	r2, [pc, #184]	; (8009e74 <HAL_DMA_Abort+0x634>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d004      	beq.n	8009dca <HAL_DMA_Abort+0x58a>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a2c      	ldr	r2, [pc, #176]	; (8009e78 <HAL_DMA_Abort+0x638>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d101      	bne.n	8009dce <HAL_DMA_Abort+0x58e>
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e000      	b.n	8009dd0 <HAL_DMA_Abort+0x590>
 8009dce:	2300      	movs	r3, #0
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d015      	beq.n	8009e00 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009ddc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00c      	beq.n	8009e00 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009df4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009dfe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	40020010 	.word	0x40020010
 8009e20:	40020028 	.word	0x40020028
 8009e24:	40020040 	.word	0x40020040
 8009e28:	40020058 	.word	0x40020058
 8009e2c:	40020070 	.word	0x40020070
 8009e30:	40020088 	.word	0x40020088
 8009e34:	400200a0 	.word	0x400200a0
 8009e38:	400200b8 	.word	0x400200b8
 8009e3c:	40020410 	.word	0x40020410
 8009e40:	40020428 	.word	0x40020428
 8009e44:	40020440 	.word	0x40020440
 8009e48:	40020458 	.word	0x40020458
 8009e4c:	40020470 	.word	0x40020470
 8009e50:	40020488 	.word	0x40020488
 8009e54:	400204a0 	.word	0x400204a0
 8009e58:	400204b8 	.word	0x400204b8
 8009e5c:	58025408 	.word	0x58025408
 8009e60:	5802541c 	.word	0x5802541c
 8009e64:	58025430 	.word	0x58025430
 8009e68:	58025444 	.word	0x58025444
 8009e6c:	58025458 	.word	0x58025458
 8009e70:	5802546c 	.word	0x5802546c
 8009e74:	58025480 	.word	0x58025480
 8009e78:	58025494 	.word	0x58025494

08009e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d101      	bne.n	8009e8e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e237      	b.n	800a2fe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d004      	beq.n	8009ea4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2280      	movs	r2, #128	; 0x80
 8009e9e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e22c      	b.n	800a2fe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a5c      	ldr	r2, [pc, #368]	; (800a01c <HAL_DMA_Abort_IT+0x1a0>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d04a      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a5b      	ldr	r2, [pc, #364]	; (800a020 <HAL_DMA_Abort_IT+0x1a4>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d045      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a59      	ldr	r2, [pc, #356]	; (800a024 <HAL_DMA_Abort_IT+0x1a8>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d040      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a58      	ldr	r2, [pc, #352]	; (800a028 <HAL_DMA_Abort_IT+0x1ac>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d03b      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a56      	ldr	r2, [pc, #344]	; (800a02c <HAL_DMA_Abort_IT+0x1b0>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d036      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a55      	ldr	r2, [pc, #340]	; (800a030 <HAL_DMA_Abort_IT+0x1b4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d031      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a53      	ldr	r2, [pc, #332]	; (800a034 <HAL_DMA_Abort_IT+0x1b8>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d02c      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a52      	ldr	r2, [pc, #328]	; (800a038 <HAL_DMA_Abort_IT+0x1bc>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d027      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a50      	ldr	r2, [pc, #320]	; (800a03c <HAL_DMA_Abort_IT+0x1c0>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d022      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a4f      	ldr	r2, [pc, #316]	; (800a040 <HAL_DMA_Abort_IT+0x1c4>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d01d      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a4d      	ldr	r2, [pc, #308]	; (800a044 <HAL_DMA_Abort_IT+0x1c8>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d018      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a4c      	ldr	r2, [pc, #304]	; (800a048 <HAL_DMA_Abort_IT+0x1cc>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d013      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a4a      	ldr	r2, [pc, #296]	; (800a04c <HAL_DMA_Abort_IT+0x1d0>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d00e      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a49      	ldr	r2, [pc, #292]	; (800a050 <HAL_DMA_Abort_IT+0x1d4>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d009      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a47      	ldr	r2, [pc, #284]	; (800a054 <HAL_DMA_Abort_IT+0x1d8>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d004      	beq.n	8009f44 <HAL_DMA_Abort_IT+0xc8>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a46      	ldr	r2, [pc, #280]	; (800a058 <HAL_DMA_Abort_IT+0x1dc>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d101      	bne.n	8009f48 <HAL_DMA_Abort_IT+0xcc>
 8009f44:	2301      	movs	r3, #1
 8009f46:	e000      	b.n	8009f4a <HAL_DMA_Abort_IT+0xce>
 8009f48:	2300      	movs	r3, #0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8086 	beq.w	800a05c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2204      	movs	r2, #4
 8009f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a2f      	ldr	r2, [pc, #188]	; (800a01c <HAL_DMA_Abort_IT+0x1a0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d04a      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a2e      	ldr	r2, [pc, #184]	; (800a020 <HAL_DMA_Abort_IT+0x1a4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d045      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a2c      	ldr	r2, [pc, #176]	; (800a024 <HAL_DMA_Abort_IT+0x1a8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d040      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a2b      	ldr	r2, [pc, #172]	; (800a028 <HAL_DMA_Abort_IT+0x1ac>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d03b      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a29      	ldr	r2, [pc, #164]	; (800a02c <HAL_DMA_Abort_IT+0x1b0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d036      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a28      	ldr	r2, [pc, #160]	; (800a030 <HAL_DMA_Abort_IT+0x1b4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d031      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a26      	ldr	r2, [pc, #152]	; (800a034 <HAL_DMA_Abort_IT+0x1b8>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d02c      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a25      	ldr	r2, [pc, #148]	; (800a038 <HAL_DMA_Abort_IT+0x1bc>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d027      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a23      	ldr	r2, [pc, #140]	; (800a03c <HAL_DMA_Abort_IT+0x1c0>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d022      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a22      	ldr	r2, [pc, #136]	; (800a040 <HAL_DMA_Abort_IT+0x1c4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d01d      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a20      	ldr	r2, [pc, #128]	; (800a044 <HAL_DMA_Abort_IT+0x1c8>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d018      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <HAL_DMA_Abort_IT+0x1cc>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d013      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a1d      	ldr	r2, [pc, #116]	; (800a04c <HAL_DMA_Abort_IT+0x1d0>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00e      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a1c      	ldr	r2, [pc, #112]	; (800a050 <HAL_DMA_Abort_IT+0x1d4>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d009      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1a      	ldr	r2, [pc, #104]	; (800a054 <HAL_DMA_Abort_IT+0x1d8>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d004      	beq.n	8009ff8 <HAL_DMA_Abort_IT+0x17c>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a19      	ldr	r2, [pc, #100]	; (800a058 <HAL_DMA_Abort_IT+0x1dc>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d108      	bne.n	800a00a <HAL_DMA_Abort_IT+0x18e>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f022 0201 	bic.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]
 800a008:	e178      	b.n	800a2fc <HAL_DMA_Abort_IT+0x480>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f022 0201 	bic.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]
 800a01a:	e16f      	b.n	800a2fc <HAL_DMA_Abort_IT+0x480>
 800a01c:	40020010 	.word	0x40020010
 800a020:	40020028 	.word	0x40020028
 800a024:	40020040 	.word	0x40020040
 800a028:	40020058 	.word	0x40020058
 800a02c:	40020070 	.word	0x40020070
 800a030:	40020088 	.word	0x40020088
 800a034:	400200a0 	.word	0x400200a0
 800a038:	400200b8 	.word	0x400200b8
 800a03c:	40020410 	.word	0x40020410
 800a040:	40020428 	.word	0x40020428
 800a044:	40020440 	.word	0x40020440
 800a048:	40020458 	.word	0x40020458
 800a04c:	40020470 	.word	0x40020470
 800a050:	40020488 	.word	0x40020488
 800a054:	400204a0 	.word	0x400204a0
 800a058:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f022 020e 	bic.w	r2, r2, #14
 800a06a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a6c      	ldr	r2, [pc, #432]	; (800a224 <HAL_DMA_Abort_IT+0x3a8>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d04a      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a6b      	ldr	r2, [pc, #428]	; (800a228 <HAL_DMA_Abort_IT+0x3ac>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d045      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a69      	ldr	r2, [pc, #420]	; (800a22c <HAL_DMA_Abort_IT+0x3b0>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d040      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a68      	ldr	r2, [pc, #416]	; (800a230 <HAL_DMA_Abort_IT+0x3b4>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d03b      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a66      	ldr	r2, [pc, #408]	; (800a234 <HAL_DMA_Abort_IT+0x3b8>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d036      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a65      	ldr	r2, [pc, #404]	; (800a238 <HAL_DMA_Abort_IT+0x3bc>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d031      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a63      	ldr	r2, [pc, #396]	; (800a23c <HAL_DMA_Abort_IT+0x3c0>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d02c      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a62      	ldr	r2, [pc, #392]	; (800a240 <HAL_DMA_Abort_IT+0x3c4>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d027      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a60      	ldr	r2, [pc, #384]	; (800a244 <HAL_DMA_Abort_IT+0x3c8>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d022      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a5f      	ldr	r2, [pc, #380]	; (800a248 <HAL_DMA_Abort_IT+0x3cc>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d01d      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a5d      	ldr	r2, [pc, #372]	; (800a24c <HAL_DMA_Abort_IT+0x3d0>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d018      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a5c      	ldr	r2, [pc, #368]	; (800a250 <HAL_DMA_Abort_IT+0x3d4>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d013      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a5a      	ldr	r2, [pc, #360]	; (800a254 <HAL_DMA_Abort_IT+0x3d8>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d00e      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a59      	ldr	r2, [pc, #356]	; (800a258 <HAL_DMA_Abort_IT+0x3dc>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d009      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a57      	ldr	r2, [pc, #348]	; (800a25c <HAL_DMA_Abort_IT+0x3e0>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d004      	beq.n	800a10c <HAL_DMA_Abort_IT+0x290>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a56      	ldr	r2, [pc, #344]	; (800a260 <HAL_DMA_Abort_IT+0x3e4>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d108      	bne.n	800a11e <HAL_DMA_Abort_IT+0x2a2>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 0201 	bic.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	e007      	b.n	800a12e <HAL_DMA_Abort_IT+0x2b2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f022 0201 	bic.w	r2, r2, #1
 800a12c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a3c      	ldr	r2, [pc, #240]	; (800a224 <HAL_DMA_Abort_IT+0x3a8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d072      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a3a      	ldr	r2, [pc, #232]	; (800a228 <HAL_DMA_Abort_IT+0x3ac>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d06d      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a39      	ldr	r2, [pc, #228]	; (800a22c <HAL_DMA_Abort_IT+0x3b0>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d068      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a37      	ldr	r2, [pc, #220]	; (800a230 <HAL_DMA_Abort_IT+0x3b4>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d063      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4a36      	ldr	r2, [pc, #216]	; (800a234 <HAL_DMA_Abort_IT+0x3b8>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d05e      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a34      	ldr	r2, [pc, #208]	; (800a238 <HAL_DMA_Abort_IT+0x3bc>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d059      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a33      	ldr	r2, [pc, #204]	; (800a23c <HAL_DMA_Abort_IT+0x3c0>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d054      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a31      	ldr	r2, [pc, #196]	; (800a240 <HAL_DMA_Abort_IT+0x3c4>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d04f      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a30      	ldr	r2, [pc, #192]	; (800a244 <HAL_DMA_Abort_IT+0x3c8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d04a      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a2e      	ldr	r2, [pc, #184]	; (800a248 <HAL_DMA_Abort_IT+0x3cc>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d045      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a2d      	ldr	r2, [pc, #180]	; (800a24c <HAL_DMA_Abort_IT+0x3d0>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d040      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2b      	ldr	r2, [pc, #172]	; (800a250 <HAL_DMA_Abort_IT+0x3d4>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d03b      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a2a      	ldr	r2, [pc, #168]	; (800a254 <HAL_DMA_Abort_IT+0x3d8>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d036      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a28      	ldr	r2, [pc, #160]	; (800a258 <HAL_DMA_Abort_IT+0x3dc>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d031      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a27      	ldr	r2, [pc, #156]	; (800a25c <HAL_DMA_Abort_IT+0x3e0>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d02c      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a25      	ldr	r2, [pc, #148]	; (800a260 <HAL_DMA_Abort_IT+0x3e4>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d027      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a24      	ldr	r2, [pc, #144]	; (800a264 <HAL_DMA_Abort_IT+0x3e8>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d022      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a22      	ldr	r2, [pc, #136]	; (800a268 <HAL_DMA_Abort_IT+0x3ec>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01d      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a21      	ldr	r2, [pc, #132]	; (800a26c <HAL_DMA_Abort_IT+0x3f0>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d018      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a1f      	ldr	r2, [pc, #124]	; (800a270 <HAL_DMA_Abort_IT+0x3f4>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d013      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a1e      	ldr	r2, [pc, #120]	; (800a274 <HAL_DMA_Abort_IT+0x3f8>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d00e      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <HAL_DMA_Abort_IT+0x3fc>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d009      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a1b      	ldr	r2, [pc, #108]	; (800a27c <HAL_DMA_Abort_IT+0x400>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d004      	beq.n	800a21e <HAL_DMA_Abort_IT+0x3a2>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a19      	ldr	r2, [pc, #100]	; (800a280 <HAL_DMA_Abort_IT+0x404>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d132      	bne.n	800a284 <HAL_DMA_Abort_IT+0x408>
 800a21e:	2301      	movs	r3, #1
 800a220:	e031      	b.n	800a286 <HAL_DMA_Abort_IT+0x40a>
 800a222:	bf00      	nop
 800a224:	40020010 	.word	0x40020010
 800a228:	40020028 	.word	0x40020028
 800a22c:	40020040 	.word	0x40020040
 800a230:	40020058 	.word	0x40020058
 800a234:	40020070 	.word	0x40020070
 800a238:	40020088 	.word	0x40020088
 800a23c:	400200a0 	.word	0x400200a0
 800a240:	400200b8 	.word	0x400200b8
 800a244:	40020410 	.word	0x40020410
 800a248:	40020428 	.word	0x40020428
 800a24c:	40020440 	.word	0x40020440
 800a250:	40020458 	.word	0x40020458
 800a254:	40020470 	.word	0x40020470
 800a258:	40020488 	.word	0x40020488
 800a25c:	400204a0 	.word	0x400204a0
 800a260:	400204b8 	.word	0x400204b8
 800a264:	58025408 	.word	0x58025408
 800a268:	5802541c 	.word	0x5802541c
 800a26c:	58025430 	.word	0x58025430
 800a270:	58025444 	.word	0x58025444
 800a274:	58025458 	.word	0x58025458
 800a278:	5802546c 	.word	0x5802546c
 800a27c:	58025480 	.word	0x58025480
 800a280:	58025494 	.word	0x58025494
 800a284:	2300      	movs	r3, #0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d028      	beq.n	800a2dc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a298:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a4:	f003 031f 	and.w	r3, r3, #31
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	409a      	lsls	r2, r3
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a2b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00c      	beq.n	800a2dc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a2d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a2da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop

0800a308 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b08a      	sub	sp, #40	; 0x28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a310:	2300      	movs	r3, #0
 800a312:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a314:	4b67      	ldr	r3, [pc, #412]	; (800a4b4 <HAL_DMA_IRQHandler+0x1ac>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a67      	ldr	r2, [pc, #412]	; (800a4b8 <HAL_DMA_IRQHandler+0x1b0>)
 800a31a:	fba2 2303 	umull	r2, r3, r2, r3
 800a31e:	0a9b      	lsrs	r3, r3, #10
 800a320:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a326:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a32c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a32e:	6a3b      	ldr	r3, [r7, #32]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a5f      	ldr	r2, [pc, #380]	; (800a4bc <HAL_DMA_IRQHandler+0x1b4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d04a      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a5d      	ldr	r2, [pc, #372]	; (800a4c0 <HAL_DMA_IRQHandler+0x1b8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d045      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a5c      	ldr	r2, [pc, #368]	; (800a4c4 <HAL_DMA_IRQHandler+0x1bc>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d040      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a5a      	ldr	r2, [pc, #360]	; (800a4c8 <HAL_DMA_IRQHandler+0x1c0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d03b      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a59      	ldr	r2, [pc, #356]	; (800a4cc <HAL_DMA_IRQHandler+0x1c4>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d036      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a57      	ldr	r2, [pc, #348]	; (800a4d0 <HAL_DMA_IRQHandler+0x1c8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d031      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a56      	ldr	r2, [pc, #344]	; (800a4d4 <HAL_DMA_IRQHandler+0x1cc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d02c      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a54      	ldr	r2, [pc, #336]	; (800a4d8 <HAL_DMA_IRQHandler+0x1d0>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d027      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a53      	ldr	r2, [pc, #332]	; (800a4dc <HAL_DMA_IRQHandler+0x1d4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d022      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a51      	ldr	r2, [pc, #324]	; (800a4e0 <HAL_DMA_IRQHandler+0x1d8>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d01d      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a50      	ldr	r2, [pc, #320]	; (800a4e4 <HAL_DMA_IRQHandler+0x1dc>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d018      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a4e      	ldr	r2, [pc, #312]	; (800a4e8 <HAL_DMA_IRQHandler+0x1e0>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d013      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a4d      	ldr	r2, [pc, #308]	; (800a4ec <HAL_DMA_IRQHandler+0x1e4>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d00e      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a4b      	ldr	r2, [pc, #300]	; (800a4f0 <HAL_DMA_IRQHandler+0x1e8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d009      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a4a      	ldr	r2, [pc, #296]	; (800a4f4 <HAL_DMA_IRQHandler+0x1ec>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d004      	beq.n	800a3da <HAL_DMA_IRQHandler+0xd2>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a48      	ldr	r2, [pc, #288]	; (800a4f8 <HAL_DMA_IRQHandler+0x1f0>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d101      	bne.n	800a3de <HAL_DMA_IRQHandler+0xd6>
 800a3da:	2301      	movs	r3, #1
 800a3dc:	e000      	b.n	800a3e0 <HAL_DMA_IRQHandler+0xd8>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	f000 842b 	beq.w	800ac3c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ea:	f003 031f 	and.w	r3, r3, #31
 800a3ee:	2208      	movs	r2, #8
 800a3f0:	409a      	lsls	r2, r3
 800a3f2:	69bb      	ldr	r3, [r7, #24]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	f000 80a2 	beq.w	800a540 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a2e      	ldr	r2, [pc, #184]	; (800a4bc <HAL_DMA_IRQHandler+0x1b4>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d04a      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a2d      	ldr	r2, [pc, #180]	; (800a4c0 <HAL_DMA_IRQHandler+0x1b8>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d045      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a2b      	ldr	r2, [pc, #172]	; (800a4c4 <HAL_DMA_IRQHandler+0x1bc>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d040      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a2a      	ldr	r2, [pc, #168]	; (800a4c8 <HAL_DMA_IRQHandler+0x1c0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d03b      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a28      	ldr	r2, [pc, #160]	; (800a4cc <HAL_DMA_IRQHandler+0x1c4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d036      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a27      	ldr	r2, [pc, #156]	; (800a4d0 <HAL_DMA_IRQHandler+0x1c8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d031      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a25      	ldr	r2, [pc, #148]	; (800a4d4 <HAL_DMA_IRQHandler+0x1cc>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d02c      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a24      	ldr	r2, [pc, #144]	; (800a4d8 <HAL_DMA_IRQHandler+0x1d0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d027      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a22      	ldr	r2, [pc, #136]	; (800a4dc <HAL_DMA_IRQHandler+0x1d4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d022      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a21      	ldr	r2, [pc, #132]	; (800a4e0 <HAL_DMA_IRQHandler+0x1d8>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d01d      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a1f      	ldr	r2, [pc, #124]	; (800a4e4 <HAL_DMA_IRQHandler+0x1dc>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d018      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a1e      	ldr	r2, [pc, #120]	; (800a4e8 <HAL_DMA_IRQHandler+0x1e0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a1c      	ldr	r2, [pc, #112]	; (800a4ec <HAL_DMA_IRQHandler+0x1e4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d00e      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a1b      	ldr	r2, [pc, #108]	; (800a4f0 <HAL_DMA_IRQHandler+0x1e8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d009      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a19      	ldr	r2, [pc, #100]	; (800a4f4 <HAL_DMA_IRQHandler+0x1ec>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d004      	beq.n	800a49c <HAL_DMA_IRQHandler+0x194>
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a18      	ldr	r2, [pc, #96]	; (800a4f8 <HAL_DMA_IRQHandler+0x1f0>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d12f      	bne.n	800a4fc <HAL_DMA_IRQHandler+0x1f4>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0304 	and.w	r3, r3, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	bf14      	ite	ne
 800a4aa:	2301      	movne	r3, #1
 800a4ac:	2300      	moveq	r3, #0
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	e02e      	b.n	800a510 <HAL_DMA_IRQHandler+0x208>
 800a4b2:	bf00      	nop
 800a4b4:	24000070 	.word	0x24000070
 800a4b8:	1b4e81b5 	.word	0x1b4e81b5
 800a4bc:	40020010 	.word	0x40020010
 800a4c0:	40020028 	.word	0x40020028
 800a4c4:	40020040 	.word	0x40020040
 800a4c8:	40020058 	.word	0x40020058
 800a4cc:	40020070 	.word	0x40020070
 800a4d0:	40020088 	.word	0x40020088
 800a4d4:	400200a0 	.word	0x400200a0
 800a4d8:	400200b8 	.word	0x400200b8
 800a4dc:	40020410 	.word	0x40020410
 800a4e0:	40020428 	.word	0x40020428
 800a4e4:	40020440 	.word	0x40020440
 800a4e8:	40020458 	.word	0x40020458
 800a4ec:	40020470 	.word	0x40020470
 800a4f0:	40020488 	.word	0x40020488
 800a4f4:	400204a0 	.word	0x400204a0
 800a4f8:	400204b8 	.word	0x400204b8
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	bf14      	ite	ne
 800a50a:	2301      	movne	r3, #1
 800a50c:	2300      	moveq	r3, #0
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b00      	cmp	r3, #0
 800a512:	d015      	beq.n	800a540 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f022 0204 	bic.w	r2, r2, #4
 800a522:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a528:	f003 031f 	and.w	r3, r3, #31
 800a52c:	2208      	movs	r2, #8
 800a52e:	409a      	lsls	r2, r3
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a538:	f043 0201 	orr.w	r2, r3, #1
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a544:	f003 031f 	and.w	r3, r3, #31
 800a548:	69ba      	ldr	r2, [r7, #24]
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	f003 0301 	and.w	r3, r3, #1
 800a552:	2b00      	cmp	r3, #0
 800a554:	d06e      	beq.n	800a634 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a69      	ldr	r2, [pc, #420]	; (800a700 <HAL_DMA_IRQHandler+0x3f8>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d04a      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a67      	ldr	r2, [pc, #412]	; (800a704 <HAL_DMA_IRQHandler+0x3fc>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d045      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a66      	ldr	r2, [pc, #408]	; (800a708 <HAL_DMA_IRQHandler+0x400>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d040      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a64      	ldr	r2, [pc, #400]	; (800a70c <HAL_DMA_IRQHandler+0x404>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d03b      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a63      	ldr	r2, [pc, #396]	; (800a710 <HAL_DMA_IRQHandler+0x408>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d036      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	4a61      	ldr	r2, [pc, #388]	; (800a714 <HAL_DMA_IRQHandler+0x40c>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d031      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a60      	ldr	r2, [pc, #384]	; (800a718 <HAL_DMA_IRQHandler+0x410>)
 800a598:	4293      	cmp	r3, r2
 800a59a:	d02c      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a5e      	ldr	r2, [pc, #376]	; (800a71c <HAL_DMA_IRQHandler+0x414>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d027      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a5d      	ldr	r2, [pc, #372]	; (800a720 <HAL_DMA_IRQHandler+0x418>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d022      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a5b      	ldr	r2, [pc, #364]	; (800a724 <HAL_DMA_IRQHandler+0x41c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d01d      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a5a      	ldr	r2, [pc, #360]	; (800a728 <HAL_DMA_IRQHandler+0x420>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d018      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a58      	ldr	r2, [pc, #352]	; (800a72c <HAL_DMA_IRQHandler+0x424>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d013      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a57      	ldr	r2, [pc, #348]	; (800a730 <HAL_DMA_IRQHandler+0x428>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d00e      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a55      	ldr	r2, [pc, #340]	; (800a734 <HAL_DMA_IRQHandler+0x42c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d009      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a54      	ldr	r2, [pc, #336]	; (800a738 <HAL_DMA_IRQHandler+0x430>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d004      	beq.n	800a5f6 <HAL_DMA_IRQHandler+0x2ee>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a52      	ldr	r2, [pc, #328]	; (800a73c <HAL_DMA_IRQHandler+0x434>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d10a      	bne.n	800a60c <HAL_DMA_IRQHandler+0x304>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf14      	ite	ne
 800a604:	2301      	movne	r3, #1
 800a606:	2300      	moveq	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	e003      	b.n	800a614 <HAL_DMA_IRQHandler+0x30c>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2300      	movs	r3, #0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d00d      	beq.n	800a634 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a61c:	f003 031f 	and.w	r3, r3, #31
 800a620:	2201      	movs	r2, #1
 800a622:	409a      	lsls	r2, r3
 800a624:	6a3b      	ldr	r3, [r7, #32]
 800a626:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a62c:	f043 0202 	orr.w	r2, r3, #2
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a638:	f003 031f 	and.w	r3, r3, #31
 800a63c:	2204      	movs	r2, #4
 800a63e:	409a      	lsls	r2, r3
 800a640:	69bb      	ldr	r3, [r7, #24]
 800a642:	4013      	ands	r3, r2
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 808f 	beq.w	800a768 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a2c      	ldr	r2, [pc, #176]	; (800a700 <HAL_DMA_IRQHandler+0x3f8>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d04a      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a2a      	ldr	r2, [pc, #168]	; (800a704 <HAL_DMA_IRQHandler+0x3fc>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d045      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a29      	ldr	r2, [pc, #164]	; (800a708 <HAL_DMA_IRQHandler+0x400>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d040      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a27      	ldr	r2, [pc, #156]	; (800a70c <HAL_DMA_IRQHandler+0x404>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d03b      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a26      	ldr	r2, [pc, #152]	; (800a710 <HAL_DMA_IRQHandler+0x408>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d036      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a24      	ldr	r2, [pc, #144]	; (800a714 <HAL_DMA_IRQHandler+0x40c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d031      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a23      	ldr	r2, [pc, #140]	; (800a718 <HAL_DMA_IRQHandler+0x410>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d02c      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a21      	ldr	r2, [pc, #132]	; (800a71c <HAL_DMA_IRQHandler+0x414>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d027      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a20      	ldr	r2, [pc, #128]	; (800a720 <HAL_DMA_IRQHandler+0x418>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d022      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a1e      	ldr	r2, [pc, #120]	; (800a724 <HAL_DMA_IRQHandler+0x41c>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d01d      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a1d      	ldr	r2, [pc, #116]	; (800a728 <HAL_DMA_IRQHandler+0x420>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d018      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	4a1b      	ldr	r2, [pc, #108]	; (800a72c <HAL_DMA_IRQHandler+0x424>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d013      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4a1a      	ldr	r2, [pc, #104]	; (800a730 <HAL_DMA_IRQHandler+0x428>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d00e      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a18      	ldr	r2, [pc, #96]	; (800a734 <HAL_DMA_IRQHandler+0x42c>)
 800a6d2:	4293      	cmp	r3, r2
 800a6d4:	d009      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a17      	ldr	r2, [pc, #92]	; (800a738 <HAL_DMA_IRQHandler+0x430>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d004      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x3e2>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a15      	ldr	r2, [pc, #84]	; (800a73c <HAL_DMA_IRQHandler+0x434>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d12a      	bne.n	800a740 <HAL_DMA_IRQHandler+0x438>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bf14      	ite	ne
 800a6f8:	2301      	movne	r3, #1
 800a6fa:	2300      	moveq	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	e023      	b.n	800a748 <HAL_DMA_IRQHandler+0x440>
 800a700:	40020010 	.word	0x40020010
 800a704:	40020028 	.word	0x40020028
 800a708:	40020040 	.word	0x40020040
 800a70c:	40020058 	.word	0x40020058
 800a710:	40020070 	.word	0x40020070
 800a714:	40020088 	.word	0x40020088
 800a718:	400200a0 	.word	0x400200a0
 800a71c:	400200b8 	.word	0x400200b8
 800a720:	40020410 	.word	0x40020410
 800a724:	40020428 	.word	0x40020428
 800a728:	40020440 	.word	0x40020440
 800a72c:	40020458 	.word	0x40020458
 800a730:	40020470 	.word	0x40020470
 800a734:	40020488 	.word	0x40020488
 800a738:	400204a0 	.word	0x400204a0
 800a73c:	400204b8 	.word	0x400204b8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2300      	movs	r3, #0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00d      	beq.n	800a768 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a750:	f003 031f 	and.w	r3, r3, #31
 800a754:	2204      	movs	r2, #4
 800a756:	409a      	lsls	r2, r3
 800a758:	6a3b      	ldr	r3, [r7, #32]
 800a75a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a760:	f043 0204 	orr.w	r2, r3, #4
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a76c:	f003 031f 	and.w	r3, r3, #31
 800a770:	2210      	movs	r2, #16
 800a772:	409a      	lsls	r2, r3
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	4013      	ands	r3, r2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	f000 80a6 	beq.w	800a8ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a85      	ldr	r2, [pc, #532]	; (800a998 <HAL_DMA_IRQHandler+0x690>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d04a      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a83      	ldr	r2, [pc, #524]	; (800a99c <HAL_DMA_IRQHandler+0x694>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d045      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a82      	ldr	r2, [pc, #520]	; (800a9a0 <HAL_DMA_IRQHandler+0x698>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d040      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a80      	ldr	r2, [pc, #512]	; (800a9a4 <HAL_DMA_IRQHandler+0x69c>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d03b      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a7f      	ldr	r2, [pc, #508]	; (800a9a8 <HAL_DMA_IRQHandler+0x6a0>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d036      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a7d      	ldr	r2, [pc, #500]	; (800a9ac <HAL_DMA_IRQHandler+0x6a4>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d031      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a7c      	ldr	r2, [pc, #496]	; (800a9b0 <HAL_DMA_IRQHandler+0x6a8>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d02c      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a7a      	ldr	r2, [pc, #488]	; (800a9b4 <HAL_DMA_IRQHandler+0x6ac>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d027      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a79      	ldr	r2, [pc, #484]	; (800a9b8 <HAL_DMA_IRQHandler+0x6b0>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d022      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a77      	ldr	r2, [pc, #476]	; (800a9bc <HAL_DMA_IRQHandler+0x6b4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d01d      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a76      	ldr	r2, [pc, #472]	; (800a9c0 <HAL_DMA_IRQHandler+0x6b8>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d018      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a74      	ldr	r2, [pc, #464]	; (800a9c4 <HAL_DMA_IRQHandler+0x6bc>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d013      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a73      	ldr	r2, [pc, #460]	; (800a9c8 <HAL_DMA_IRQHandler+0x6c0>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00e      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a71      	ldr	r2, [pc, #452]	; (800a9cc <HAL_DMA_IRQHandler+0x6c4>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d009      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a70      	ldr	r2, [pc, #448]	; (800a9d0 <HAL_DMA_IRQHandler+0x6c8>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d004      	beq.n	800a81e <HAL_DMA_IRQHandler+0x516>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a6e      	ldr	r2, [pc, #440]	; (800a9d4 <HAL_DMA_IRQHandler+0x6cc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d10a      	bne.n	800a834 <HAL_DMA_IRQHandler+0x52c>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0308 	and.w	r3, r3, #8
 800a828:	2b00      	cmp	r3, #0
 800a82a:	bf14      	ite	ne
 800a82c:	2301      	movne	r3, #1
 800a82e:	2300      	moveq	r3, #0
 800a830:	b2db      	uxtb	r3, r3
 800a832:	e009      	b.n	800a848 <HAL_DMA_IRQHandler+0x540>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	bf14      	ite	ne
 800a842:	2301      	movne	r3, #1
 800a844:	2300      	moveq	r3, #0
 800a846:	b2db      	uxtb	r3, r3
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d03e      	beq.n	800a8ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a850:	f003 031f 	and.w	r3, r3, #31
 800a854:	2210      	movs	r2, #16
 800a856:	409a      	lsls	r2, r3
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d018      	beq.n	800a89c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d108      	bne.n	800a88a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d024      	beq.n	800a8ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	4798      	blx	r3
 800a888:	e01f      	b.n	800a8ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d01b      	beq.n	800a8ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	4798      	blx	r3
 800a89a:	e016      	b.n	800a8ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d107      	bne.n	800a8ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0208 	bic.w	r2, r2, #8
 800a8b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d003      	beq.n	800a8ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8ce:	f003 031f 	and.w	r3, r3, #31
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	409a      	lsls	r2, r3
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	4013      	ands	r3, r2
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 8110 	beq.w	800ab00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a2c      	ldr	r2, [pc, #176]	; (800a998 <HAL_DMA_IRQHandler+0x690>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d04a      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a2b      	ldr	r2, [pc, #172]	; (800a99c <HAL_DMA_IRQHandler+0x694>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d045      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a29      	ldr	r2, [pc, #164]	; (800a9a0 <HAL_DMA_IRQHandler+0x698>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d040      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a28      	ldr	r2, [pc, #160]	; (800a9a4 <HAL_DMA_IRQHandler+0x69c>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d03b      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a26      	ldr	r2, [pc, #152]	; (800a9a8 <HAL_DMA_IRQHandler+0x6a0>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d036      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a25      	ldr	r2, [pc, #148]	; (800a9ac <HAL_DMA_IRQHandler+0x6a4>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d031      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a23      	ldr	r2, [pc, #140]	; (800a9b0 <HAL_DMA_IRQHandler+0x6a8>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d02c      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a22      	ldr	r2, [pc, #136]	; (800a9b4 <HAL_DMA_IRQHandler+0x6ac>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d027      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a20      	ldr	r2, [pc, #128]	; (800a9b8 <HAL_DMA_IRQHandler+0x6b0>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d022      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a1f      	ldr	r2, [pc, #124]	; (800a9bc <HAL_DMA_IRQHandler+0x6b4>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d01d      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a1d      	ldr	r2, [pc, #116]	; (800a9c0 <HAL_DMA_IRQHandler+0x6b8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d018      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a1c      	ldr	r2, [pc, #112]	; (800a9c4 <HAL_DMA_IRQHandler+0x6bc>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d013      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a1a      	ldr	r2, [pc, #104]	; (800a9c8 <HAL_DMA_IRQHandler+0x6c0>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d00e      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a19      	ldr	r2, [pc, #100]	; (800a9cc <HAL_DMA_IRQHandler+0x6c4>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d009      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a17      	ldr	r2, [pc, #92]	; (800a9d0 <HAL_DMA_IRQHandler+0x6c8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d004      	beq.n	800a980 <HAL_DMA_IRQHandler+0x678>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a16      	ldr	r2, [pc, #88]	; (800a9d4 <HAL_DMA_IRQHandler+0x6cc>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d12b      	bne.n	800a9d8 <HAL_DMA_IRQHandler+0x6d0>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f003 0310 	and.w	r3, r3, #16
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	bf14      	ite	ne
 800a98e:	2301      	movne	r3, #1
 800a990:	2300      	moveq	r3, #0
 800a992:	b2db      	uxtb	r3, r3
 800a994:	e02a      	b.n	800a9ec <HAL_DMA_IRQHandler+0x6e4>
 800a996:	bf00      	nop
 800a998:	40020010 	.word	0x40020010
 800a99c:	40020028 	.word	0x40020028
 800a9a0:	40020040 	.word	0x40020040
 800a9a4:	40020058 	.word	0x40020058
 800a9a8:	40020070 	.word	0x40020070
 800a9ac:	40020088 	.word	0x40020088
 800a9b0:	400200a0 	.word	0x400200a0
 800a9b4:	400200b8 	.word	0x400200b8
 800a9b8:	40020410 	.word	0x40020410
 800a9bc:	40020428 	.word	0x40020428
 800a9c0:	40020440 	.word	0x40020440
 800a9c4:	40020458 	.word	0x40020458
 800a9c8:	40020470 	.word	0x40020470
 800a9cc:	40020488 	.word	0x40020488
 800a9d0:	400204a0 	.word	0x400204a0
 800a9d4:	400204b8 	.word	0x400204b8
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0302 	and.w	r3, r3, #2
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	bf14      	ite	ne
 800a9e6:	2301      	movne	r3, #1
 800a9e8:	2300      	moveq	r3, #0
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	f000 8087 	beq.w	800ab00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f6:	f003 031f 	and.w	r3, r3, #31
 800a9fa:	2220      	movs	r2, #32
 800a9fc:	409a      	lsls	r2, r3
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b04      	cmp	r3, #4
 800aa0c:	d139      	bne.n	800aa82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681a      	ldr	r2, [r3, #0]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f022 0216 	bic.w	r2, r2, #22
 800aa1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	695a      	ldr	r2, [r3, #20]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d103      	bne.n	800aa3e <HAL_DMA_IRQHandler+0x736>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d007      	beq.n	800aa4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f022 0208 	bic.w	r2, r2, #8
 800aa4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa52:	f003 031f 	and.w	r3, r3, #31
 800aa56:	223f      	movs	r2, #63	; 0x3f
 800aa58:	409a      	lsls	r2, r3
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 834a 	beq.w	800b10c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	4798      	blx	r3
          }
          return;
 800aa80:	e344      	b.n	800b10c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d018      	beq.n	800aac2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d108      	bne.n	800aab0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d02c      	beq.n	800ab00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
 800aaae:	e027      	b.n	800ab00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d023      	beq.n	800ab00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
 800aac0:	e01e      	b.n	800ab00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10f      	bne.n	800aaf0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f022 0210 	bic.w	r2, r2, #16
 800aade:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d003      	beq.n	800ab00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 8306 	beq.w	800b116 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab0e:	f003 0301 	and.w	r3, r3, #1
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	f000 8088 	beq.w	800ac28 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2204      	movs	r2, #4
 800ab1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a7a      	ldr	r2, [pc, #488]	; (800ad10 <HAL_DMA_IRQHandler+0xa08>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d04a      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a79      	ldr	r2, [pc, #484]	; (800ad14 <HAL_DMA_IRQHandler+0xa0c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d045      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a77      	ldr	r2, [pc, #476]	; (800ad18 <HAL_DMA_IRQHandler+0xa10>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d040      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a76      	ldr	r2, [pc, #472]	; (800ad1c <HAL_DMA_IRQHandler+0xa14>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d03b      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a74      	ldr	r2, [pc, #464]	; (800ad20 <HAL_DMA_IRQHandler+0xa18>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d036      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a73      	ldr	r2, [pc, #460]	; (800ad24 <HAL_DMA_IRQHandler+0xa1c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d031      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a71      	ldr	r2, [pc, #452]	; (800ad28 <HAL_DMA_IRQHandler+0xa20>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d02c      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a70      	ldr	r2, [pc, #448]	; (800ad2c <HAL_DMA_IRQHandler+0xa24>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d027      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a6e      	ldr	r2, [pc, #440]	; (800ad30 <HAL_DMA_IRQHandler+0xa28>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d022      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a6d      	ldr	r2, [pc, #436]	; (800ad34 <HAL_DMA_IRQHandler+0xa2c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d01d      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a6b      	ldr	r2, [pc, #428]	; (800ad38 <HAL_DMA_IRQHandler+0xa30>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d018      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a6a      	ldr	r2, [pc, #424]	; (800ad3c <HAL_DMA_IRQHandler+0xa34>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d013      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a68      	ldr	r2, [pc, #416]	; (800ad40 <HAL_DMA_IRQHandler+0xa38>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d00e      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a67      	ldr	r2, [pc, #412]	; (800ad44 <HAL_DMA_IRQHandler+0xa3c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d009      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a65      	ldr	r2, [pc, #404]	; (800ad48 <HAL_DMA_IRQHandler+0xa40>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d004      	beq.n	800abc0 <HAL_DMA_IRQHandler+0x8b8>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a64      	ldr	r2, [pc, #400]	; (800ad4c <HAL_DMA_IRQHandler+0xa44>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d108      	bne.n	800abd2 <HAL_DMA_IRQHandler+0x8ca>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0201 	bic.w	r2, r2, #1
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	e007      	b.n	800abe2 <HAL_DMA_IRQHandler+0x8da>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0201 	bic.w	r2, r2, #1
 800abe0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3301      	adds	r3, #1
 800abe6:	60fb      	str	r3, [r7, #12]
 800abe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abea:	429a      	cmp	r2, r3
 800abec:	d307      	bcc.n	800abfe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d1f2      	bne.n	800abe2 <HAL_DMA_IRQHandler+0x8da>
 800abfc:	e000      	b.n	800ac00 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800abfe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d004      	beq.n	800ac18 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2203      	movs	r2, #3
 800ac12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800ac16:	e003      	b.n	800ac20 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8272 	beq.w	800b116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	4798      	blx	r3
 800ac3a:	e26c      	b.n	800b116 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a43      	ldr	r2, [pc, #268]	; (800ad50 <HAL_DMA_IRQHandler+0xa48>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d022      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a42      	ldr	r2, [pc, #264]	; (800ad54 <HAL_DMA_IRQHandler+0xa4c>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d01d      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a40      	ldr	r2, [pc, #256]	; (800ad58 <HAL_DMA_IRQHandler+0xa50>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d018      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a3f      	ldr	r2, [pc, #252]	; (800ad5c <HAL_DMA_IRQHandler+0xa54>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d013      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a3d      	ldr	r2, [pc, #244]	; (800ad60 <HAL_DMA_IRQHandler+0xa58>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00e      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a3c      	ldr	r2, [pc, #240]	; (800ad64 <HAL_DMA_IRQHandler+0xa5c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d009      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a3a      	ldr	r2, [pc, #232]	; (800ad68 <HAL_DMA_IRQHandler+0xa60>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d004      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x984>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a39      	ldr	r2, [pc, #228]	; (800ad6c <HAL_DMA_IRQHandler+0xa64>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d101      	bne.n	800ac90 <HAL_DMA_IRQHandler+0x988>
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e000      	b.n	800ac92 <HAL_DMA_IRQHandler+0x98a>
 800ac90:	2300      	movs	r3, #0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 823f 	beq.w	800b116 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aca4:	f003 031f 	and.w	r3, r3, #31
 800aca8:	2204      	movs	r2, #4
 800acaa:	409a      	lsls	r2, r3
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	4013      	ands	r3, r2
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 80cd 	beq.w	800ae50 <HAL_DMA_IRQHandler+0xb48>
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	f003 0304 	and.w	r3, r3, #4
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 80c7 	beq.w	800ae50 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acc6:	f003 031f 	and.w	r3, r3, #31
 800acca:	2204      	movs	r2, #4
 800accc:	409a      	lsls	r2, r3
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d049      	beq.n	800ad70 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d109      	bne.n	800acfa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 8210 	beq.w	800b110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acf8:	e20a      	b.n	800b110 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f000 8206 	beq.w	800b110 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ad0c:	e200      	b.n	800b110 <HAL_DMA_IRQHandler+0xe08>
 800ad0e:	bf00      	nop
 800ad10:	40020010 	.word	0x40020010
 800ad14:	40020028 	.word	0x40020028
 800ad18:	40020040 	.word	0x40020040
 800ad1c:	40020058 	.word	0x40020058
 800ad20:	40020070 	.word	0x40020070
 800ad24:	40020088 	.word	0x40020088
 800ad28:	400200a0 	.word	0x400200a0
 800ad2c:	400200b8 	.word	0x400200b8
 800ad30:	40020410 	.word	0x40020410
 800ad34:	40020428 	.word	0x40020428
 800ad38:	40020440 	.word	0x40020440
 800ad3c:	40020458 	.word	0x40020458
 800ad40:	40020470 	.word	0x40020470
 800ad44:	40020488 	.word	0x40020488
 800ad48:	400204a0 	.word	0x400204a0
 800ad4c:	400204b8 	.word	0x400204b8
 800ad50:	58025408 	.word	0x58025408
 800ad54:	5802541c 	.word	0x5802541c
 800ad58:	58025430 	.word	0x58025430
 800ad5c:	58025444 	.word	0x58025444
 800ad60:	58025458 	.word	0x58025458
 800ad64:	5802546c 	.word	0x5802546c
 800ad68:	58025480 	.word	0x58025480
 800ad6c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	f003 0320 	and.w	r3, r3, #32
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d160      	bne.n	800ae3c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a7f      	ldr	r2, [pc, #508]	; (800af7c <HAL_DMA_IRQHandler+0xc74>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d04a      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a7d      	ldr	r2, [pc, #500]	; (800af80 <HAL_DMA_IRQHandler+0xc78>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d045      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a7c      	ldr	r2, [pc, #496]	; (800af84 <HAL_DMA_IRQHandler+0xc7c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d040      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a7a      	ldr	r2, [pc, #488]	; (800af88 <HAL_DMA_IRQHandler+0xc80>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d03b      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a79      	ldr	r2, [pc, #484]	; (800af8c <HAL_DMA_IRQHandler+0xc84>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d036      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a77      	ldr	r2, [pc, #476]	; (800af90 <HAL_DMA_IRQHandler+0xc88>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d031      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a76      	ldr	r2, [pc, #472]	; (800af94 <HAL_DMA_IRQHandler+0xc8c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d02c      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a74      	ldr	r2, [pc, #464]	; (800af98 <HAL_DMA_IRQHandler+0xc90>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d027      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a73      	ldr	r2, [pc, #460]	; (800af9c <HAL_DMA_IRQHandler+0xc94>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d022      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a71      	ldr	r2, [pc, #452]	; (800afa0 <HAL_DMA_IRQHandler+0xc98>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d01d      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a70      	ldr	r2, [pc, #448]	; (800afa4 <HAL_DMA_IRQHandler+0xc9c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d018      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a6e      	ldr	r2, [pc, #440]	; (800afa8 <HAL_DMA_IRQHandler+0xca0>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d013      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a6d      	ldr	r2, [pc, #436]	; (800afac <HAL_DMA_IRQHandler+0xca4>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d00e      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	4a6b      	ldr	r2, [pc, #428]	; (800afb0 <HAL_DMA_IRQHandler+0xca8>)
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d009      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a6a      	ldr	r2, [pc, #424]	; (800afb4 <HAL_DMA_IRQHandler+0xcac>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d004      	beq.n	800ae1a <HAL_DMA_IRQHandler+0xb12>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a68      	ldr	r2, [pc, #416]	; (800afb8 <HAL_DMA_IRQHandler+0xcb0>)
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d108      	bne.n	800ae2c <HAL_DMA_IRQHandler+0xb24>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0208 	bic.w	r2, r2, #8
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	e007      	b.n	800ae3c <HAL_DMA_IRQHandler+0xb34>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f022 0204 	bic.w	r2, r2, #4
 800ae3a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 8165 	beq.w	800b110 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae4e:	e15f      	b.n	800b110 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae54:	f003 031f 	and.w	r3, r3, #31
 800ae58:	2202      	movs	r2, #2
 800ae5a:	409a      	lsls	r2, r3
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80c5 	beq.w	800aff0 <HAL_DMA_IRQHandler+0xce8>
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	f003 0302 	and.w	r3, r3, #2
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80bf 	beq.w	800aff0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	409a      	lsls	r2, r3
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d018      	beq.n	800aebe <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d109      	bne.n	800aeaa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f000 813a 	beq.w	800b114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aea8:	e134      	b.n	800b114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	f000 8130 	beq.w	800b114 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800aebc:	e12a      	b.n	800b114 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f040 8089 	bne.w	800afdc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	4a2b      	ldr	r2, [pc, #172]	; (800af7c <HAL_DMA_IRQHandler+0xc74>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d04a      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a29      	ldr	r2, [pc, #164]	; (800af80 <HAL_DMA_IRQHandler+0xc78>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d045      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a28      	ldr	r2, [pc, #160]	; (800af84 <HAL_DMA_IRQHandler+0xc7c>)
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d040      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	4a26      	ldr	r2, [pc, #152]	; (800af88 <HAL_DMA_IRQHandler+0xc80>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d03b      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a25      	ldr	r2, [pc, #148]	; (800af8c <HAL_DMA_IRQHandler+0xc84>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d036      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a23      	ldr	r2, [pc, #140]	; (800af90 <HAL_DMA_IRQHandler+0xc88>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d031      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	4a22      	ldr	r2, [pc, #136]	; (800af94 <HAL_DMA_IRQHandler+0xc8c>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d02c      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a20      	ldr	r2, [pc, #128]	; (800af98 <HAL_DMA_IRQHandler+0xc90>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d027      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a1f      	ldr	r2, [pc, #124]	; (800af9c <HAL_DMA_IRQHandler+0xc94>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d022      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4a1d      	ldr	r2, [pc, #116]	; (800afa0 <HAL_DMA_IRQHandler+0xc98>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d01d      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a1c      	ldr	r2, [pc, #112]	; (800afa4 <HAL_DMA_IRQHandler+0xc9c>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d018      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a1a      	ldr	r2, [pc, #104]	; (800afa8 <HAL_DMA_IRQHandler+0xca0>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d013      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	4a19      	ldr	r2, [pc, #100]	; (800afac <HAL_DMA_IRQHandler+0xca4>)
 800af48:	4293      	cmp	r3, r2
 800af4a:	d00e      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a17      	ldr	r2, [pc, #92]	; (800afb0 <HAL_DMA_IRQHandler+0xca8>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d009      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a16      	ldr	r2, [pc, #88]	; (800afb4 <HAL_DMA_IRQHandler+0xcac>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d004      	beq.n	800af6a <HAL_DMA_IRQHandler+0xc62>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4a14      	ldr	r2, [pc, #80]	; (800afb8 <HAL_DMA_IRQHandler+0xcb0>)
 800af66:	4293      	cmp	r3, r2
 800af68:	d128      	bne.n	800afbc <HAL_DMA_IRQHandler+0xcb4>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f022 0214 	bic.w	r2, r2, #20
 800af78:	601a      	str	r2, [r3, #0]
 800af7a:	e027      	b.n	800afcc <HAL_DMA_IRQHandler+0xcc4>
 800af7c:	40020010 	.word	0x40020010
 800af80:	40020028 	.word	0x40020028
 800af84:	40020040 	.word	0x40020040
 800af88:	40020058 	.word	0x40020058
 800af8c:	40020070 	.word	0x40020070
 800af90:	40020088 	.word	0x40020088
 800af94:	400200a0 	.word	0x400200a0
 800af98:	400200b8 	.word	0x400200b8
 800af9c:	40020410 	.word	0x40020410
 800afa0:	40020428 	.word	0x40020428
 800afa4:	40020440 	.word	0x40020440
 800afa8:	40020458 	.word	0x40020458
 800afac:	40020470 	.word	0x40020470
 800afb0:	40020488 	.word	0x40020488
 800afb4:	400204a0 	.word	0x400204a0
 800afb8:	400204b8 	.word	0x400204b8
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f022 020a 	bic.w	r2, r2, #10
 800afca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2201      	movs	r2, #1
 800afd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 8097 	beq.w	800b114 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800afee:	e091      	b.n	800b114 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aff4:	f003 031f 	and.w	r3, r3, #31
 800aff8:	2208      	movs	r2, #8
 800affa:	409a      	lsls	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	4013      	ands	r3, r2
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 8088 	beq.w	800b116 <HAL_DMA_IRQHandler+0xe0e>
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	f003 0308 	and.w	r3, r3, #8
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 8082 	beq.w	800b116 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a41      	ldr	r2, [pc, #260]	; (800b11c <HAL_DMA_IRQHandler+0xe14>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d04a      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a3f      	ldr	r2, [pc, #252]	; (800b120 <HAL_DMA_IRQHandler+0xe18>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d045      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a3e      	ldr	r2, [pc, #248]	; (800b124 <HAL_DMA_IRQHandler+0xe1c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d040      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a3c      	ldr	r2, [pc, #240]	; (800b128 <HAL_DMA_IRQHandler+0xe20>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d03b      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4a3b      	ldr	r2, [pc, #236]	; (800b12c <HAL_DMA_IRQHandler+0xe24>)
 800b040:	4293      	cmp	r3, r2
 800b042:	d036      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a39      	ldr	r2, [pc, #228]	; (800b130 <HAL_DMA_IRQHandler+0xe28>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d031      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a38      	ldr	r2, [pc, #224]	; (800b134 <HAL_DMA_IRQHandler+0xe2c>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d02c      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a36      	ldr	r2, [pc, #216]	; (800b138 <HAL_DMA_IRQHandler+0xe30>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d027      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a35      	ldr	r2, [pc, #212]	; (800b13c <HAL_DMA_IRQHandler+0xe34>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d022      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a33      	ldr	r2, [pc, #204]	; (800b140 <HAL_DMA_IRQHandler+0xe38>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d01d      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4a32      	ldr	r2, [pc, #200]	; (800b144 <HAL_DMA_IRQHandler+0xe3c>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d018      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	4a30      	ldr	r2, [pc, #192]	; (800b148 <HAL_DMA_IRQHandler+0xe40>)
 800b086:	4293      	cmp	r3, r2
 800b088:	d013      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	4a2f      	ldr	r2, [pc, #188]	; (800b14c <HAL_DMA_IRQHandler+0xe44>)
 800b090:	4293      	cmp	r3, r2
 800b092:	d00e      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a2d      	ldr	r2, [pc, #180]	; (800b150 <HAL_DMA_IRQHandler+0xe48>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d009      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a2c      	ldr	r2, [pc, #176]	; (800b154 <HAL_DMA_IRQHandler+0xe4c>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d004      	beq.n	800b0b2 <HAL_DMA_IRQHandler+0xdaa>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a2a      	ldr	r2, [pc, #168]	; (800b158 <HAL_DMA_IRQHandler+0xe50>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d108      	bne.n	800b0c4 <HAL_DMA_IRQHandler+0xdbc>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f022 021c 	bic.w	r2, r2, #28
 800b0c0:	601a      	str	r2, [r3, #0]
 800b0c2:	e007      	b.n	800b0d4 <HAL_DMA_IRQHandler+0xdcc>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f022 020e 	bic.w	r2, r2, #14
 800b0d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0d8:	f003 031f 	and.w	r3, r3, #31
 800b0dc:	2201      	movs	r2, #1
 800b0de:	409a      	lsls	r2, r3
 800b0e0:	69fb      	ldr	r3, [r7, #28]
 800b0e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d009      	beq.n	800b116 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	4798      	blx	r3
 800b10a:	e004      	b.n	800b116 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b10c:	bf00      	nop
 800b10e:	e002      	b.n	800b116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b110:	bf00      	nop
 800b112:	e000      	b.n	800b116 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b114:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b116:	3728      	adds	r7, #40	; 0x28
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	40020010 	.word	0x40020010
 800b120:	40020028 	.word	0x40020028
 800b124:	40020040 	.word	0x40020040
 800b128:	40020058 	.word	0x40020058
 800b12c:	40020070 	.word	0x40020070
 800b130:	40020088 	.word	0x40020088
 800b134:	400200a0 	.word	0x400200a0
 800b138:	400200b8 	.word	0x400200b8
 800b13c:	40020410 	.word	0x40020410
 800b140:	40020428 	.word	0x40020428
 800b144:	40020440 	.word	0x40020440
 800b148:	40020458 	.word	0x40020458
 800b14c:	40020470 	.word	0x40020470
 800b150:	40020488 	.word	0x40020488
 800b154:	400204a0 	.word	0x400204a0
 800b158:	400204b8 	.word	0x400204b8

0800b15c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b087      	sub	sp, #28
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b16e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b174:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a7f      	ldr	r2, [pc, #508]	; (800b378 <DMA_SetConfig+0x21c>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d072      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a7d      	ldr	r2, [pc, #500]	; (800b37c <DMA_SetConfig+0x220>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d06d      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a7c      	ldr	r2, [pc, #496]	; (800b380 <DMA_SetConfig+0x224>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d068      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a7a      	ldr	r2, [pc, #488]	; (800b384 <DMA_SetConfig+0x228>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d063      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a79      	ldr	r2, [pc, #484]	; (800b388 <DMA_SetConfig+0x22c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d05e      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a77      	ldr	r2, [pc, #476]	; (800b38c <DMA_SetConfig+0x230>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d059      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a76      	ldr	r2, [pc, #472]	; (800b390 <DMA_SetConfig+0x234>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d054      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a74      	ldr	r2, [pc, #464]	; (800b394 <DMA_SetConfig+0x238>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d04f      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a73      	ldr	r2, [pc, #460]	; (800b398 <DMA_SetConfig+0x23c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d04a      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a71      	ldr	r2, [pc, #452]	; (800b39c <DMA_SetConfig+0x240>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d045      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a70      	ldr	r2, [pc, #448]	; (800b3a0 <DMA_SetConfig+0x244>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d040      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a6e      	ldr	r2, [pc, #440]	; (800b3a4 <DMA_SetConfig+0x248>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d03b      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a6d      	ldr	r2, [pc, #436]	; (800b3a8 <DMA_SetConfig+0x24c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d036      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a6b      	ldr	r2, [pc, #428]	; (800b3ac <DMA_SetConfig+0x250>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d031      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a6a      	ldr	r2, [pc, #424]	; (800b3b0 <DMA_SetConfig+0x254>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d02c      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a68      	ldr	r2, [pc, #416]	; (800b3b4 <DMA_SetConfig+0x258>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d027      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a67      	ldr	r2, [pc, #412]	; (800b3b8 <DMA_SetConfig+0x25c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d022      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a65      	ldr	r2, [pc, #404]	; (800b3bc <DMA_SetConfig+0x260>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d01d      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a64      	ldr	r2, [pc, #400]	; (800b3c0 <DMA_SetConfig+0x264>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d018      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a62      	ldr	r2, [pc, #392]	; (800b3c4 <DMA_SetConfig+0x268>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d013      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a61      	ldr	r2, [pc, #388]	; (800b3c8 <DMA_SetConfig+0x26c>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d00e      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a5f      	ldr	r2, [pc, #380]	; (800b3cc <DMA_SetConfig+0x270>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d009      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a5e      	ldr	r2, [pc, #376]	; (800b3d0 <DMA_SetConfig+0x274>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d004      	beq.n	800b266 <DMA_SetConfig+0x10a>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a5c      	ldr	r2, [pc, #368]	; (800b3d4 <DMA_SetConfig+0x278>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d101      	bne.n	800b26a <DMA_SetConfig+0x10e>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <DMA_SetConfig+0x110>
 800b26a:	2300      	movs	r3, #0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00d      	beq.n	800b28c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b278:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d004      	beq.n	800b28c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b28a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a39      	ldr	r2, [pc, #228]	; (800b378 <DMA_SetConfig+0x21c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d04a      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a38      	ldr	r2, [pc, #224]	; (800b37c <DMA_SetConfig+0x220>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d045      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a36      	ldr	r2, [pc, #216]	; (800b380 <DMA_SetConfig+0x224>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d040      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a35      	ldr	r2, [pc, #212]	; (800b384 <DMA_SetConfig+0x228>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d03b      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a33      	ldr	r2, [pc, #204]	; (800b388 <DMA_SetConfig+0x22c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d036      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a32      	ldr	r2, [pc, #200]	; (800b38c <DMA_SetConfig+0x230>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d031      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a30      	ldr	r2, [pc, #192]	; (800b390 <DMA_SetConfig+0x234>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d02c      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a2f      	ldr	r2, [pc, #188]	; (800b394 <DMA_SetConfig+0x238>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d027      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a2d      	ldr	r2, [pc, #180]	; (800b398 <DMA_SetConfig+0x23c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d022      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a2c      	ldr	r2, [pc, #176]	; (800b39c <DMA_SetConfig+0x240>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d01d      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a2a      	ldr	r2, [pc, #168]	; (800b3a0 <DMA_SetConfig+0x244>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d018      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a29      	ldr	r2, [pc, #164]	; (800b3a4 <DMA_SetConfig+0x248>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d013      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a27      	ldr	r2, [pc, #156]	; (800b3a8 <DMA_SetConfig+0x24c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00e      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a26      	ldr	r2, [pc, #152]	; (800b3ac <DMA_SetConfig+0x250>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d009      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a24      	ldr	r2, [pc, #144]	; (800b3b0 <DMA_SetConfig+0x254>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d004      	beq.n	800b32c <DMA_SetConfig+0x1d0>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a23      	ldr	r2, [pc, #140]	; (800b3b4 <DMA_SetConfig+0x258>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d101      	bne.n	800b330 <DMA_SetConfig+0x1d4>
 800b32c:	2301      	movs	r3, #1
 800b32e:	e000      	b.n	800b332 <DMA_SetConfig+0x1d6>
 800b330:	2300      	movs	r3, #0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d059      	beq.n	800b3ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b33a:	f003 031f 	and.w	r3, r3, #31
 800b33e:	223f      	movs	r2, #63	; 0x3f
 800b340:	409a      	lsls	r2, r3
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	681a      	ldr	r2, [r3, #0]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b354:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	683a      	ldr	r2, [r7, #0]
 800b35c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	689b      	ldr	r3, [r3, #8]
 800b362:	2b40      	cmp	r3, #64	; 0x40
 800b364:	d138      	bne.n	800b3d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b376:	e086      	b.n	800b486 <DMA_SetConfig+0x32a>
 800b378:	40020010 	.word	0x40020010
 800b37c:	40020028 	.word	0x40020028
 800b380:	40020040 	.word	0x40020040
 800b384:	40020058 	.word	0x40020058
 800b388:	40020070 	.word	0x40020070
 800b38c:	40020088 	.word	0x40020088
 800b390:	400200a0 	.word	0x400200a0
 800b394:	400200b8 	.word	0x400200b8
 800b398:	40020410 	.word	0x40020410
 800b39c:	40020428 	.word	0x40020428
 800b3a0:	40020440 	.word	0x40020440
 800b3a4:	40020458 	.word	0x40020458
 800b3a8:	40020470 	.word	0x40020470
 800b3ac:	40020488 	.word	0x40020488
 800b3b0:	400204a0 	.word	0x400204a0
 800b3b4:	400204b8 	.word	0x400204b8
 800b3b8:	58025408 	.word	0x58025408
 800b3bc:	5802541c 	.word	0x5802541c
 800b3c0:	58025430 	.word	0x58025430
 800b3c4:	58025444 	.word	0x58025444
 800b3c8:	58025458 	.word	0x58025458
 800b3cc:	5802546c 	.word	0x5802546c
 800b3d0:	58025480 	.word	0x58025480
 800b3d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	68ba      	ldr	r2, [r7, #8]
 800b3de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	60da      	str	r2, [r3, #12]
}
 800b3e8:	e04d      	b.n	800b486 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a29      	ldr	r2, [pc, #164]	; (800b494 <DMA_SetConfig+0x338>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d022      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a27      	ldr	r2, [pc, #156]	; (800b498 <DMA_SetConfig+0x33c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d01d      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a26      	ldr	r2, [pc, #152]	; (800b49c <DMA_SetConfig+0x340>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d018      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a24      	ldr	r2, [pc, #144]	; (800b4a0 <DMA_SetConfig+0x344>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d013      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a23      	ldr	r2, [pc, #140]	; (800b4a4 <DMA_SetConfig+0x348>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00e      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a21      	ldr	r2, [pc, #132]	; (800b4a8 <DMA_SetConfig+0x34c>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d009      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a20      	ldr	r2, [pc, #128]	; (800b4ac <DMA_SetConfig+0x350>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d004      	beq.n	800b43a <DMA_SetConfig+0x2de>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a1e      	ldr	r2, [pc, #120]	; (800b4b0 <DMA_SetConfig+0x354>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d101      	bne.n	800b43e <DMA_SetConfig+0x2e2>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e000      	b.n	800b440 <DMA_SetConfig+0x2e4>
 800b43e:	2300      	movs	r3, #0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d020      	beq.n	800b486 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b448:	f003 031f 	and.w	r3, r3, #31
 800b44c:	2201      	movs	r2, #1
 800b44e:	409a      	lsls	r2, r3
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	2b40      	cmp	r3, #64	; 0x40
 800b462:	d108      	bne.n	800b476 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	60da      	str	r2, [r3, #12]
}
 800b474:	e007      	b.n	800b486 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	60da      	str	r2, [r3, #12]
}
 800b486:	bf00      	nop
 800b488:	371c      	adds	r7, #28
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	58025408 	.word	0x58025408
 800b498:	5802541c 	.word	0x5802541c
 800b49c:	58025430 	.word	0x58025430
 800b4a0:	58025444 	.word	0x58025444
 800b4a4:	58025458 	.word	0x58025458
 800b4a8:	5802546c 	.word	0x5802546c
 800b4ac:	58025480 	.word	0x58025480
 800b4b0:	58025494 	.word	0x58025494

0800b4b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a42      	ldr	r2, [pc, #264]	; (800b5cc <DMA_CalcBaseAndBitshift+0x118>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d04a      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a41      	ldr	r2, [pc, #260]	; (800b5d0 <DMA_CalcBaseAndBitshift+0x11c>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d045      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a3f      	ldr	r2, [pc, #252]	; (800b5d4 <DMA_CalcBaseAndBitshift+0x120>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d040      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a3e      	ldr	r2, [pc, #248]	; (800b5d8 <DMA_CalcBaseAndBitshift+0x124>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d03b      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a3c      	ldr	r2, [pc, #240]	; (800b5dc <DMA_CalcBaseAndBitshift+0x128>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d036      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a3b      	ldr	r2, [pc, #236]	; (800b5e0 <DMA_CalcBaseAndBitshift+0x12c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d031      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a39      	ldr	r2, [pc, #228]	; (800b5e4 <DMA_CalcBaseAndBitshift+0x130>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d02c      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a38      	ldr	r2, [pc, #224]	; (800b5e8 <DMA_CalcBaseAndBitshift+0x134>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d027      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a36      	ldr	r2, [pc, #216]	; (800b5ec <DMA_CalcBaseAndBitshift+0x138>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d022      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a35      	ldr	r2, [pc, #212]	; (800b5f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d01d      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a33      	ldr	r2, [pc, #204]	; (800b5f4 <DMA_CalcBaseAndBitshift+0x140>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d018      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a32      	ldr	r2, [pc, #200]	; (800b5f8 <DMA_CalcBaseAndBitshift+0x144>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d013      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a30      	ldr	r2, [pc, #192]	; (800b5fc <DMA_CalcBaseAndBitshift+0x148>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d00e      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a2f      	ldr	r2, [pc, #188]	; (800b600 <DMA_CalcBaseAndBitshift+0x14c>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d009      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a2d      	ldr	r2, [pc, #180]	; (800b604 <DMA_CalcBaseAndBitshift+0x150>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d004      	beq.n	800b55c <DMA_CalcBaseAndBitshift+0xa8>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a2c      	ldr	r2, [pc, #176]	; (800b608 <DMA_CalcBaseAndBitshift+0x154>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d101      	bne.n	800b560 <DMA_CalcBaseAndBitshift+0xac>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e000      	b.n	800b562 <DMA_CalcBaseAndBitshift+0xae>
 800b560:	2300      	movs	r3, #0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d024      	beq.n	800b5b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	b2db      	uxtb	r3, r3
 800b56c:	3b10      	subs	r3, #16
 800b56e:	4a27      	ldr	r2, [pc, #156]	; (800b60c <DMA_CalcBaseAndBitshift+0x158>)
 800b570:	fba2 2303 	umull	r2, r3, r2, r3
 800b574:	091b      	lsrs	r3, r3, #4
 800b576:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f003 0307 	and.w	r3, r3, #7
 800b57e:	4a24      	ldr	r2, [pc, #144]	; (800b610 <DMA_CalcBaseAndBitshift+0x15c>)
 800b580:	5cd3      	ldrb	r3, [r2, r3]
 800b582:	461a      	mov	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	d908      	bls.n	800b5a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	4b1f      	ldr	r3, [pc, #124]	; (800b614 <DMA_CalcBaseAndBitshift+0x160>)
 800b596:	4013      	ands	r3, r2
 800b598:	1d1a      	adds	r2, r3, #4
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	659a      	str	r2, [r3, #88]	; 0x58
 800b59e:	e00d      	b.n	800b5bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b1b      	ldr	r3, [pc, #108]	; (800b614 <DMA_CalcBaseAndBitshift+0x160>)
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ae:	e005      	b.n	800b5bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3714      	adds	r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	40020010 	.word	0x40020010
 800b5d0:	40020028 	.word	0x40020028
 800b5d4:	40020040 	.word	0x40020040
 800b5d8:	40020058 	.word	0x40020058
 800b5dc:	40020070 	.word	0x40020070
 800b5e0:	40020088 	.word	0x40020088
 800b5e4:	400200a0 	.word	0x400200a0
 800b5e8:	400200b8 	.word	0x400200b8
 800b5ec:	40020410 	.word	0x40020410
 800b5f0:	40020428 	.word	0x40020428
 800b5f4:	40020440 	.word	0x40020440
 800b5f8:	40020458 	.word	0x40020458
 800b5fc:	40020470 	.word	0x40020470
 800b600:	40020488 	.word	0x40020488
 800b604:	400204a0 	.word	0x400204a0
 800b608:	400204b8 	.word	0x400204b8
 800b60c:	aaaaaaab 	.word	0xaaaaaaab
 800b610:	08017140 	.word	0x08017140
 800b614:	fffffc00 	.word	0xfffffc00

0800b618 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d120      	bne.n	800b66e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b630:	2b03      	cmp	r3, #3
 800b632:	d858      	bhi.n	800b6e6 <DMA_CheckFifoParam+0xce>
 800b634:	a201      	add	r2, pc, #4	; (adr r2, 800b63c <DMA_CheckFifoParam+0x24>)
 800b636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b63a:	bf00      	nop
 800b63c:	0800b64d 	.word	0x0800b64d
 800b640:	0800b65f 	.word	0x0800b65f
 800b644:	0800b64d 	.word	0x0800b64d
 800b648:	0800b6e7 	.word	0x0800b6e7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b650:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b654:	2b00      	cmp	r3, #0
 800b656:	d048      	beq.n	800b6ea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b65c:	e045      	b.n	800b6ea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b662:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b666:	d142      	bne.n	800b6ee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b66c:	e03f      	b.n	800b6ee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b676:	d123      	bne.n	800b6c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67c:	2b03      	cmp	r3, #3
 800b67e:	d838      	bhi.n	800b6f2 <DMA_CheckFifoParam+0xda>
 800b680:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <DMA_CheckFifoParam+0x70>)
 800b682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b686:	bf00      	nop
 800b688:	0800b699 	.word	0x0800b699
 800b68c:	0800b69f 	.word	0x0800b69f
 800b690:	0800b699 	.word	0x0800b699
 800b694:	0800b6b1 	.word	0x0800b6b1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	73fb      	strb	r3, [r7, #15]
        break;
 800b69c:	e030      	b.n	800b700 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d025      	beq.n	800b6f6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6ae:	e022      	b.n	800b6f6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b6b8:	d11f      	bne.n	800b6fa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b6be:	e01c      	b.n	800b6fa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d902      	bls.n	800b6ce <DMA_CheckFifoParam+0xb6>
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d003      	beq.n	800b6d4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b6cc:	e018      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	73fb      	strb	r3, [r7, #15]
        break;
 800b6d2:	e015      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00e      	beq.n	800b6fe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e4:	e00b      	b.n	800b6fe <DMA_CheckFifoParam+0xe6>
        break;
 800b6e6:	bf00      	nop
 800b6e8:	e00a      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        break;
 800b6ea:	bf00      	nop
 800b6ec:	e008      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        break;
 800b6ee:	bf00      	nop
 800b6f0:	e006      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        break;
 800b6f2:	bf00      	nop
 800b6f4:	e004      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        break;
 800b6f6:	bf00      	nop
 800b6f8:	e002      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
        break;
 800b6fa:	bf00      	nop
 800b6fc:	e000      	b.n	800b700 <DMA_CheckFifoParam+0xe8>
    break;
 800b6fe:	bf00      	nop
    }
  }

  return status;
 800b700:	7bfb      	ldrb	r3, [r7, #15]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3714      	adds	r7, #20
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr
 800b70e:	bf00      	nop

0800b710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a38      	ldr	r2, [pc, #224]	; (800b804 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d022      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a36      	ldr	r2, [pc, #216]	; (800b808 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d01d      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a35      	ldr	r2, [pc, #212]	; (800b80c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d018      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a33      	ldr	r2, [pc, #204]	; (800b810 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d013      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a32      	ldr	r2, [pc, #200]	; (800b814 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d00e      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a30      	ldr	r2, [pc, #192]	; (800b818 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d009      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a2f      	ldr	r2, [pc, #188]	; (800b81c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d004      	beq.n	800b76e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a2d      	ldr	r2, [pc, #180]	; (800b820 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d101      	bne.n	800b772 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b76e:	2301      	movs	r3, #1
 800b770:	e000      	b.n	800b774 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b772:	2300      	movs	r3, #0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d01a      	beq.n	800b7ae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	3b08      	subs	r3, #8
 800b780:	4a28      	ldr	r2, [pc, #160]	; (800b824 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b782:	fba2 2303 	umull	r2, r3, r2, r3
 800b786:	091b      	lsrs	r3, r3, #4
 800b788:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	4b26      	ldr	r3, [pc, #152]	; (800b828 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b78e:	4413      	add	r3, r2
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	461a      	mov	r2, r3
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	4a24      	ldr	r2, [pc, #144]	; (800b82c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b79c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f003 031f 	and.w	r3, r3, #31
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	409a      	lsls	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b7ac:	e024      	b.n	800b7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	3b10      	subs	r3, #16
 800b7b6:	4a1e      	ldr	r2, [pc, #120]	; (800b830 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b7b8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7bc:	091b      	lsrs	r3, r3, #4
 800b7be:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	4a1c      	ldr	r2, [pc, #112]	; (800b834 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d806      	bhi.n	800b7d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4a1b      	ldr	r2, [pc, #108]	; (800b838 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d902      	bls.n	800b7d6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	3308      	adds	r3, #8
 800b7d4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b7d6:	68fa      	ldr	r2, [r7, #12]
 800b7d8:	4b18      	ldr	r3, [pc, #96]	; (800b83c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b7da:	4413      	add	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	461a      	mov	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a16      	ldr	r2, [pc, #88]	; (800b840 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b7e8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f003 031f 	and.w	r3, r3, #31
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	409a      	lsls	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b7f8:	bf00      	nop
 800b7fa:	3714      	adds	r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	58025408 	.word	0x58025408
 800b808:	5802541c 	.word	0x5802541c
 800b80c:	58025430 	.word	0x58025430
 800b810:	58025444 	.word	0x58025444
 800b814:	58025458 	.word	0x58025458
 800b818:	5802546c 	.word	0x5802546c
 800b81c:	58025480 	.word	0x58025480
 800b820:	58025494 	.word	0x58025494
 800b824:	cccccccd 	.word	0xcccccccd
 800b828:	16009600 	.word	0x16009600
 800b82c:	58025880 	.word	0x58025880
 800b830:	aaaaaaab 	.word	0xaaaaaaab
 800b834:	400204b8 	.word	0x400204b8
 800b838:	4002040f 	.word	0x4002040f
 800b83c:	10008200 	.word	0x10008200
 800b840:	40020880 	.word	0x40020880

0800b844 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	b2db      	uxtb	r3, r3
 800b852:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d04a      	beq.n	800b8f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b08      	cmp	r3, #8
 800b85e:	d847      	bhi.n	800b8f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a25      	ldr	r2, [pc, #148]	; (800b8fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d022      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a24      	ldr	r2, [pc, #144]	; (800b900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d01d      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a22      	ldr	r2, [pc, #136]	; (800b904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d018      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a21      	ldr	r2, [pc, #132]	; (800b908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d013      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a1f      	ldr	r2, [pc, #124]	; (800b90c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d00e      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a1e      	ldr	r2, [pc, #120]	; (800b910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d009      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a1c      	ldr	r2, [pc, #112]	; (800b914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d004      	beq.n	800b8b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a1b      	ldr	r2, [pc, #108]	; (800b918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d101      	bne.n	800b8b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e000      	b.n	800b8b6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d00a      	beq.n	800b8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	4b17      	ldr	r3, [pc, #92]	; (800b91c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	4a15      	ldr	r2, [pc, #84]	; (800b920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b8cc:	671a      	str	r2, [r3, #112]	; 0x70
 800b8ce:	e009      	b.n	800b8e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b8d0:	68fa      	ldr	r2, [r7, #12]
 800b8d2:	4b14      	ldr	r3, [pc, #80]	; (800b924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	461a      	mov	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	4a11      	ldr	r2, [pc, #68]	; (800b928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b8e2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	409a      	lsls	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b8f0:	bf00      	nop
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	58025408 	.word	0x58025408
 800b900:	5802541c 	.word	0x5802541c
 800b904:	58025430 	.word	0x58025430
 800b908:	58025444 	.word	0x58025444
 800b90c:	58025458 	.word	0x58025458
 800b910:	5802546c 	.word	0x5802546c
 800b914:	58025480 	.word	0x58025480
 800b918:	58025494 	.word	0x58025494
 800b91c:	1600963f 	.word	0x1600963f
 800b920:	58025940 	.word	0x58025940
 800b924:	1000823f 	.word	0x1000823f
 800b928:	40020940 	.word	0x40020940

0800b92c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	; 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800b936:	2300      	movs	r3, #0
 800b938:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800b93a:	4b89      	ldr	r3, [pc, #548]	; (800bb60 <HAL_GPIO_Init+0x234>)
 800b93c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b93e:	e194      	b.n	800bc6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	2101      	movs	r1, #1
 800b946:	69fb      	ldr	r3, [r7, #28]
 800b948:	fa01 f303 	lsl.w	r3, r1, r3
 800b94c:	4013      	ands	r3, r2
 800b94e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f000 8186 	beq.w	800bc64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f003 0303 	and.w	r3, r3, #3
 800b960:	2b01      	cmp	r3, #1
 800b962:	d005      	beq.n	800b970 <HAL_GPIO_Init+0x44>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f003 0303 	and.w	r3, r3, #3
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d130      	bne.n	800b9d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	005b      	lsls	r3, r3, #1
 800b97a:	2203      	movs	r2, #3
 800b97c:	fa02 f303 	lsl.w	r3, r2, r3
 800b980:	43db      	mvns	r3, r3
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	4013      	ands	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	fa02 f303 	lsl.w	r3, r2, r3
 800b994:	69ba      	ldr	r2, [r7, #24]
 800b996:	4313      	orrs	r3, r2
 800b998:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	69ba      	ldr	r2, [r7, #24]
 800b99e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ae:	43db      	mvns	r3, r3
 800b9b0:	69ba      	ldr	r2, [r7, #24]
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	091b      	lsrs	r3, r3, #4
 800b9bc:	f003 0201 	and.w	r2, r3, #1
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	69ba      	ldr	r2, [r7, #24]
 800b9d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	f003 0303 	and.w	r3, r3, #3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d017      	beq.n	800ba0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	005b      	lsls	r3, r3, #1
 800b9e8:	2203      	movs	r2, #3
 800b9ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ee:	43db      	mvns	r3, r3
 800b9f0:	69ba      	ldr	r2, [r7, #24]
 800b9f2:	4013      	ands	r3, r2
 800b9f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	689a      	ldr	r2, [r3, #8]
 800b9fa:	69fb      	ldr	r3, [r7, #28]
 800b9fc:	005b      	lsls	r3, r3, #1
 800b9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800ba02:	69ba      	ldr	r2, [r7, #24]
 800ba04:	4313      	orrs	r3, r2
 800ba06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d123      	bne.n	800ba62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ba1a:	69fb      	ldr	r3, [r7, #28]
 800ba1c:	08da      	lsrs	r2, r3, #3
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	3208      	adds	r2, #8
 800ba22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	f003 0307 	and.w	r3, r3, #7
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	220f      	movs	r2, #15
 800ba32:	fa02 f303 	lsl.w	r3, r2, r3
 800ba36:	43db      	mvns	r3, r3
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	4013      	ands	r3, r2
 800ba3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	691a      	ldr	r2, [r3, #16]
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	f003 0307 	and.w	r3, r3, #7
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ba4e:	69ba      	ldr	r2, [r7, #24]
 800ba50:	4313      	orrs	r3, r2
 800ba52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	08da      	lsrs	r2, r3, #3
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3208      	adds	r2, #8
 800ba5c:	69b9      	ldr	r1, [r7, #24]
 800ba5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ba68:	69fb      	ldr	r3, [r7, #28]
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba72:	43db      	mvns	r3, r3
 800ba74:	69ba      	ldr	r2, [r7, #24]
 800ba76:	4013      	ands	r3, r2
 800ba78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f003 0203 	and.w	r2, r3, #3
 800ba82:	69fb      	ldr	r3, [r7, #28]
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8a:	69ba      	ldr	r2, [r7, #24]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	69ba      	ldr	r2, [r7, #24]
 800ba94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80e0 	beq.w	800bc64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800baa4:	4b2f      	ldr	r3, [pc, #188]	; (800bb64 <HAL_GPIO_Init+0x238>)
 800baa6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baaa:	4a2e      	ldr	r2, [pc, #184]	; (800bb64 <HAL_GPIO_Init+0x238>)
 800baac:	f043 0302 	orr.w	r3, r3, #2
 800bab0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bab4:	4b2b      	ldr	r3, [pc, #172]	; (800bb64 <HAL_GPIO_Init+0x238>)
 800bab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800baba:	f003 0302 	and.w	r3, r3, #2
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bac2:	4a29      	ldr	r2, [pc, #164]	; (800bb68 <HAL_GPIO_Init+0x23c>)
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	089b      	lsrs	r3, r3, #2
 800bac8:	3302      	adds	r3, #2
 800baca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bad0:	69fb      	ldr	r3, [r7, #28]
 800bad2:	f003 0303 	and.w	r3, r3, #3
 800bad6:	009b      	lsls	r3, r3, #2
 800bad8:	220f      	movs	r2, #15
 800bada:	fa02 f303 	lsl.w	r3, r2, r3
 800bade:	43db      	mvns	r3, r3
 800bae0:	69ba      	ldr	r2, [r7, #24]
 800bae2:	4013      	ands	r3, r2
 800bae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a20      	ldr	r2, [pc, #128]	; (800bb6c <HAL_GPIO_Init+0x240>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d052      	beq.n	800bb94 <HAL_GPIO_Init+0x268>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a1f      	ldr	r2, [pc, #124]	; (800bb70 <HAL_GPIO_Init+0x244>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d031      	beq.n	800bb5a <HAL_GPIO_Init+0x22e>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a1e      	ldr	r2, [pc, #120]	; (800bb74 <HAL_GPIO_Init+0x248>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d02b      	beq.n	800bb56 <HAL_GPIO_Init+0x22a>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a1d      	ldr	r2, [pc, #116]	; (800bb78 <HAL_GPIO_Init+0x24c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d025      	beq.n	800bb52 <HAL_GPIO_Init+0x226>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a1c      	ldr	r2, [pc, #112]	; (800bb7c <HAL_GPIO_Init+0x250>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d01f      	beq.n	800bb4e <HAL_GPIO_Init+0x222>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a1b      	ldr	r2, [pc, #108]	; (800bb80 <HAL_GPIO_Init+0x254>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d019      	beq.n	800bb4a <HAL_GPIO_Init+0x21e>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a1a      	ldr	r2, [pc, #104]	; (800bb84 <HAL_GPIO_Init+0x258>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d013      	beq.n	800bb46 <HAL_GPIO_Init+0x21a>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a19      	ldr	r2, [pc, #100]	; (800bb88 <HAL_GPIO_Init+0x25c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d00d      	beq.n	800bb42 <HAL_GPIO_Init+0x216>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a18      	ldr	r2, [pc, #96]	; (800bb8c <HAL_GPIO_Init+0x260>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d007      	beq.n	800bb3e <HAL_GPIO_Init+0x212>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a17      	ldr	r2, [pc, #92]	; (800bb90 <HAL_GPIO_Init+0x264>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d101      	bne.n	800bb3a <HAL_GPIO_Init+0x20e>
 800bb36:	2309      	movs	r3, #9
 800bb38:	e02d      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb3a:	230a      	movs	r3, #10
 800bb3c:	e02b      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb3e:	2308      	movs	r3, #8
 800bb40:	e029      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb42:	2307      	movs	r3, #7
 800bb44:	e027      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb46:	2306      	movs	r3, #6
 800bb48:	e025      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb4a:	2305      	movs	r3, #5
 800bb4c:	e023      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb4e:	2304      	movs	r3, #4
 800bb50:	e021      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb52:	2303      	movs	r3, #3
 800bb54:	e01f      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb56:	2302      	movs	r3, #2
 800bb58:	e01d      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e01b      	b.n	800bb96 <HAL_GPIO_Init+0x26a>
 800bb5e:	bf00      	nop
 800bb60:	58000080 	.word	0x58000080
 800bb64:	58024400 	.word	0x58024400
 800bb68:	58000400 	.word	0x58000400
 800bb6c:	58020000 	.word	0x58020000
 800bb70:	58020400 	.word	0x58020400
 800bb74:	58020800 	.word	0x58020800
 800bb78:	58020c00 	.word	0x58020c00
 800bb7c:	58021000 	.word	0x58021000
 800bb80:	58021400 	.word	0x58021400
 800bb84:	58021800 	.word	0x58021800
 800bb88:	58021c00 	.word	0x58021c00
 800bb8c:	58022000 	.word	0x58022000
 800bb90:	58022400 	.word	0x58022400
 800bb94:	2300      	movs	r3, #0
 800bb96:	69fa      	ldr	r2, [r7, #28]
 800bb98:	f002 0203 	and.w	r2, r2, #3
 800bb9c:	0092      	lsls	r2, r2, #2
 800bb9e:	4093      	lsls	r3, r2
 800bba0:	69ba      	ldr	r2, [r7, #24]
 800bba2:	4313      	orrs	r3, r2
 800bba4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bba6:	4938      	ldr	r1, [pc, #224]	; (800bc88 <HAL_GPIO_Init+0x35c>)
 800bba8:	69fb      	ldr	r3, [r7, #28]
 800bbaa:	089b      	lsrs	r3, r3, #2
 800bbac:	3302      	adds	r3, #2
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bbb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	43db      	mvns	r3, r3
 800bbc0:	69ba      	ldr	r2, [r7, #24]
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	685b      	ldr	r3, [r3, #4]
 800bbca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800bbd2:	69ba      	ldr	r2, [r7, #24]
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800bbda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bbde:	69bb      	ldr	r3, [r7, #24]
 800bbe0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800bbe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	43db      	mvns	r3, r3
 800bbee:	69ba      	ldr	r2, [r7, #24]
 800bbf0:	4013      	ands	r3, r2
 800bbf2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d003      	beq.n	800bc08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800bc00:	69ba      	ldr	r2, [r7, #24]
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800bc08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	43db      	mvns	r3, r3
 800bc1a:	69ba      	ldr	r2, [r7, #24]
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d003      	beq.n	800bc34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800bc2c:	69ba      	ldr	r2, [r7, #24]
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	4313      	orrs	r3, r2
 800bc32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	69ba      	ldr	r2, [r7, #24]
 800bc38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	43db      	mvns	r3, r3
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	4013      	ands	r3, r2
 800bc48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	3301      	adds	r3, #1
 800bc68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	fa22 f303 	lsr.w	r3, r2, r3
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f47f ae63 	bne.w	800b940 <HAL_GPIO_Init+0x14>
  }
}
 800bc7a:	bf00      	nop
 800bc7c:	bf00      	nop
 800bc7e:	3724      	adds	r7, #36	; 0x24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	58000400 	.word	0x58000400

0800bc8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	460b      	mov	r3, r1
 800bc96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	691a      	ldr	r2, [r3, #16]
 800bc9c:	887b      	ldrh	r3, [r7, #2]
 800bc9e:	4013      	ands	r3, r2
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800bca4:	2301      	movs	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
 800bca8:	e001      	b.n	800bcae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bcae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr

0800bcbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	807b      	strh	r3, [r7, #2]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800bccc:	787b      	ldrb	r3, [r7, #1]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bcd2:	887a      	ldrh	r2, [r7, #2]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800bcd8:	e003      	b.n	800bce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800bcda:	887b      	ldrh	r3, [r7, #2]
 800bcdc:	041a      	lsls	r2, r3, #16
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	619a      	str	r2, [r3, #24]
}
 800bce2:	bf00      	nop
 800bce4:	370c      	adds	r7, #12
 800bce6:	46bd      	mov	sp, r7
 800bce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcec:	4770      	bx	lr

0800bcee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800bcee:	b480      	push	{r7}
 800bcf0:	b085      	sub	sp, #20
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	6078      	str	r0, [r7, #4]
 800bcf6:	460b      	mov	r3, r1
 800bcf8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	695b      	ldr	r3, [r3, #20]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800bd00:	887a      	ldrh	r2, [r7, #2]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	4013      	ands	r3, r2
 800bd06:	041a      	lsls	r2, r3, #16
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	43d9      	mvns	r1, r3
 800bd0c:	887b      	ldrh	r3, [r7, #2]
 800bd0e:	400b      	ands	r3, r1
 800bd10:	431a      	orrs	r2, r3
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	619a      	str	r2, [r3, #24]
}
 800bd16:	bf00      	nop
 800bd18:	3714      	adds	r7, #20
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	4603      	mov	r3, r0
 800bd2a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800bd2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800bd30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800bd34:	88fb      	ldrh	r3, [r7, #6]
 800bd36:	4013      	ands	r3, r2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d008      	beq.n	800bd4e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bd3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bd40:	88fb      	ldrh	r3, [r7, #6]
 800bd42:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7f8 fcb9 	bl	80046c0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800bd4e:	bf00      	nop
 800bd50:	3708      	adds	r7, #8
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d101      	bne.n	800bd68 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e041      	b.n	800bdec <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800bd70:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f245 5255 	movw	r2, #21845	; 0x5555
 800bd7a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	6852      	ldr	r2, [r2, #4]
 800bd84:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	6892      	ldr	r2, [r2, #8]
 800bd8e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800bd90:	f7fb f8c4 	bl	8006f1c <HAL_GetTick>
 800bd94:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800bd96:	e00f      	b.n	800bdb8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800bd98:	f7fb f8c0 	bl	8006f1c <HAL_GetTick>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	2b31      	cmp	r3, #49	; 0x31
 800bda4:	d908      	bls.n	800bdb8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68db      	ldr	r3, [r3, #12]
 800bdac:	f003 0307 	and.w	r3, r3, #7
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e019      	b.n	800bdec <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f003 0307 	and.w	r3, r3, #7
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e8      	bne.n	800bd98 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d005      	beq.n	800bde0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	68d2      	ldr	r2, [r2, #12]
 800bddc:	611a      	str	r2, [r3, #16]
 800bdde:	e004      	b.n	800bdea <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bde8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bdea:	2300      	movs	r3, #0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800be04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	370c      	adds	r7, #12
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800be1c:	4b19      	ldr	r3, [pc, #100]	; (800be84 <HAL_PWREx_ConfigSupply+0x70>)
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	f003 0304 	and.w	r3, r3, #4
 800be24:	2b04      	cmp	r3, #4
 800be26:	d00a      	beq.n	800be3e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800be28:	4b16      	ldr	r3, [pc, #88]	; (800be84 <HAL_PWREx_ConfigSupply+0x70>)
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	f003 0307 	and.w	r3, r3, #7
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	429a      	cmp	r2, r3
 800be34:	d001      	beq.n	800be3a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e01f      	b.n	800be7a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800be3a:	2300      	movs	r3, #0
 800be3c:	e01d      	b.n	800be7a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800be3e:	4b11      	ldr	r3, [pc, #68]	; (800be84 <HAL_PWREx_ConfigSupply+0x70>)
 800be40:	68db      	ldr	r3, [r3, #12]
 800be42:	f023 0207 	bic.w	r2, r3, #7
 800be46:	490f      	ldr	r1, [pc, #60]	; (800be84 <HAL_PWREx_ConfigSupply+0x70>)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800be4e:	f7fb f865 	bl	8006f1c <HAL_GetTick>
 800be52:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800be54:	e009      	b.n	800be6a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800be56:	f7fb f861 	bl	8006f1c <HAL_GetTick>
 800be5a:	4602      	mov	r2, r0
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be64:	d901      	bls.n	800be6a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e007      	b.n	800be7a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800be6a:	4b06      	ldr	r3, [pc, #24]	; (800be84 <HAL_PWREx_ConfigSupply+0x70>)
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be76:	d1ee      	bne.n	800be56 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	58024800 	.word	0x58024800

0800be88 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b086      	sub	sp, #24
 800be8c:	af02      	add	r7, sp, #8
 800be8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800be90:	f7fb f844 	bl	8006f1c <HAL_GetTick>
 800be94:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d101      	bne.n	800bea0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	e05f      	b.n	800bf60 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d107      	bne.n	800bebc <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	f7fa fb07 	bl	80064c0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800beb2:	f241 3188 	movw	r1, #5000	; 0x1388
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fa5e 	bl	800c378 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	3b01      	subs	r3, #1
 800becc:	021a      	lsls	r2, r3, #8
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	430a      	orrs	r2, r1
 800bed4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2200      	movs	r2, #0
 800bee0:	2120      	movs	r1, #32
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f000 fa56 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800bee8:	4603      	mov	r3, r0
 800beea:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800beec:	7afb      	ldrb	r3, [r7, #11]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d135      	bne.n	800bf5e <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	4b1b      	ldr	r3, [pc, #108]	; (800bf68 <HAL_QSPI_Init+0xe0>)
 800befa:	4013      	ands	r3, r2
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	6852      	ldr	r2, [r2, #4]
 800bf00:	0611      	lsls	r1, r2, #24
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	68d2      	ldr	r2, [r2, #12]
 800bf06:	4311      	orrs	r1, r2
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	69d2      	ldr	r2, [r2, #28]
 800bf0c:	4311      	orrs	r1, r2
 800bf0e:	687a      	ldr	r2, [r7, #4]
 800bf10:	6a12      	ldr	r2, [r2, #32]
 800bf12:	4311      	orrs	r1, r2
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	6812      	ldr	r2, [r2, #0]
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	4b12      	ldr	r3, [pc, #72]	; (800bf6c <HAL_QSPI_Init+0xe4>)
 800bf24:	4013      	ands	r3, r2
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	6912      	ldr	r2, [r2, #16]
 800bf2a:	0411      	lsls	r1, r2, #16
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	6952      	ldr	r2, [r2, #20]
 800bf30:	4311      	orrs	r1, r2
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	6992      	ldr	r2, [r2, #24]
 800bf36:	4311      	orrs	r1, r2
 800bf38:	687a      	ldr	r2, [r7, #4]
 800bf3a:	6812      	ldr	r2, [r2, #0]
 800bf3c:	430b      	orrs	r3, r1
 800bf3e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	f042 0201 	orr.w	r2, r2, #1
 800bf4e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2200      	movs	r2, #0
 800bf54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800bf5e:	7afb      	ldrb	r3, [r7, #11]
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3710      	adds	r7, #16
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	00ffff2f 	.word	0x00ffff2f
 800bf6c:	ffe0f8fe 	.word	0xffe0f8fe

0800bf70 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b088      	sub	sp, #32
 800bf74:	af02      	add	r7, sp, #8
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800bf7c:	f7fa ffce 	bl	8006f1c <HAL_GetTick>
 800bf80:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bf88:	b2db      	uxtb	r3, r3
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d101      	bne.n	800bf92 <HAL_QSPI_Command+0x22>
 800bf8e:	2302      	movs	r3, #2
 800bf90:	e048      	b.n	800c024 <HAL_QSPI_Command+0xb4>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bfa0:	b2db      	uxtb	r3, r3
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d137      	bne.n	800c016 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2202      	movs	r2, #2
 800bfb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	9300      	str	r3, [sp, #0]
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	2120      	movs	r1, #32
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 f9e8 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800bfc8:	7dfb      	ldrb	r3, [r7, #23]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d125      	bne.n	800c01a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800bfce:	2200      	movs	r2, #0
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 fa15 	bl	800c402 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d115      	bne.n	800c00c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	9300      	str	r3, [sp, #0]
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	2102      	movs	r1, #2
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 f9d2 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800bff0:	4603      	mov	r3, r0
 800bff2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800bff4:	7dfb      	ldrb	r3, [r7, #23]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10f      	bne.n	800c01a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2202      	movs	r2, #2
 800c000:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2201      	movs	r2, #1
 800c006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c00a:	e006      	b.n	800c01a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c014:	e001      	b.n	800c01a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c016:	2302      	movs	r3, #2
 800c018:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2200      	movs	r2, #0
 800c01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c022:	7dfb      	ldrb	r3, [r7, #23]
}
 800c024:	4618      	mov	r0, r3
 800c026:	3718      	adds	r7, #24
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b08a      	sub	sp, #40	; 0x28
 800c030:	af02      	add	r7, sp, #8
 800c032:	60f8      	str	r0, [r7, #12]
 800c034:	60b9      	str	r1, [r7, #8]
 800c036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c03c:	f7fa ff6e 	bl	8006f1c <HAL_GetTick>
 800c040:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	3320      	adds	r3, #32
 800c048:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c050:	b2db      	uxtb	r3, r3
 800c052:	2b01      	cmp	r3, #1
 800c054:	d101      	bne.n	800c05a <HAL_QSPI_Transmit+0x2e>
 800c056:	2302      	movs	r3, #2
 800c058:	e076      	b.n	800c148 <HAL_QSPI_Transmit+0x11c>
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d165      	bne.n	800c13a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	2200      	movs	r2, #0
 800c072:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d056      	beq.n	800c128 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	2212      	movs	r2, #18
 800c07e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	1c5a      	adds	r2, r3, #1
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	691b      	ldr	r3, [r3, #16]
 800c094:	1c5a      	adds	r2, r3, #1
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	68ba      	ldr	r2, [r7, #8]
 800c09e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	695a      	ldr	r2, [r3, #20]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c0ae:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c0b0:	e01b      	b.n	800c0ea <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	9300      	str	r3, [sp, #0]
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	2104      	movs	r1, #4
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f000 f969 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c0c6:	7ffb      	ldrb	r3, [r7, #31]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d113      	bne.n	800c0f4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0d0:	781a      	ldrb	r2, [r3, #0]
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e4:	1e5a      	subs	r2, r3, #1
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d1df      	bne.n	800c0b2 <HAL_QSPI_Transmit+0x86>
 800c0f2:	e000      	b.n	800c0f6 <HAL_QSPI_Transmit+0xca>
          break;
 800c0f4:	bf00      	nop
      }

      if (status == HAL_OK)
 800c0f6:	7ffb      	ldrb	r3, [r7, #31]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d110      	bne.n	800c11e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	2201      	movs	r2, #1
 800c104:	2102      	movs	r1, #2
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f000 f944 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800c10c:	4603      	mov	r3, r0
 800c10e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c110:	7ffb      	ldrb	r3, [r7, #31]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d103      	bne.n	800c11e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2202      	movs	r2, #2
 800c11c:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c126:	e00a      	b.n	800c13e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c12c:	f043 0208 	orr.w	r2, r3, #8
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	77fb      	strb	r3, [r7, #31]
 800c138:	e001      	b.n	800c13e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c13a:	2302      	movs	r3, #2
 800c13c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2200      	movs	r2, #0
 800c142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c146:	7ffb      	ldrb	r3, [r7, #31]
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b08a      	sub	sp, #40	; 0x28
 800c154:	af02      	add	r7, sp, #8
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c160:	f7fa fedc 	bl	8006f1c <HAL_GetTick>
 800c164:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3320      	adds	r3, #32
 800c174:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d101      	bne.n	800c186 <HAL_QSPI_Receive+0x36>
 800c182:	2302      	movs	r3, #2
 800c184:	e07d      	b.n	800c282 <HAL_QSPI_Receive+0x132>
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2201      	movs	r2, #1
 800c18a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c194:	b2db      	uxtb	r3, r3
 800c196:	2b01      	cmp	r3, #1
 800c198:	d16c      	bne.n	800c274 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2200      	movs	r2, #0
 800c19e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d05d      	beq.n	800c262 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2222      	movs	r2, #34	; 0x22
 800c1aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	691b      	ldr	r3, [r3, #16]
 800c1b4:	1c5a      	adds	r2, r3, #1
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	1c5a      	adds	r2, r3, #1
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	695b      	ldr	r3, [r3, #20]
 800c1d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c1de:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c1e8:	e01c      	b.n	800c224 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	9300      	str	r3, [sp, #0]
 800c1ee:	69bb      	ldr	r3, [r7, #24]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	2106      	movs	r1, #6
 800c1f4:	68f8      	ldr	r0, [r7, #12]
 800c1f6:	f000 f8cd 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c1fe:	7ffb      	ldrb	r3, [r7, #31]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d114      	bne.n	800c22e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	7812      	ldrb	r2, [r2, #0]
 800c20c:	b2d2      	uxtb	r2, r2
 800c20e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c21e:	1e5a      	subs	r2, r3, #1
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1de      	bne.n	800c1ea <HAL_QSPI_Receive+0x9a>
 800c22c:	e000      	b.n	800c230 <HAL_QSPI_Receive+0xe0>
          break;
 800c22e:	bf00      	nop
      }

      if (status == HAL_OK)
 800c230:	7ffb      	ldrb	r3, [r7, #31]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d110      	bne.n	800c258 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	9300      	str	r3, [sp, #0]
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	2201      	movs	r2, #1
 800c23e:	2102      	movs	r1, #2
 800c240:	68f8      	ldr	r0, [r7, #12]
 800c242:	f000 f8a7 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800c246:	4603      	mov	r3, r0
 800c248:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c24a:	7ffb      	ldrb	r3, [r7, #31]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2202      	movs	r2, #2
 800c256:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2201      	movs	r2, #1
 800c25c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c260:	e00a      	b.n	800c278 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c266:	f043 0208 	orr.w	r2, r3, #8
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	77fb      	strb	r3, [r7, #31]
 800c272:	e001      	b.n	800c278 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c274:	2302      	movs	r3, #2
 800c276:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c280:	7ffb      	ldrb	r3, [r7, #31]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b088      	sub	sp, #32
 800c28e:	af02      	add	r7, sp, #8
 800c290:	60f8      	str	r0, [r7, #12]
 800c292:	60b9      	str	r1, [r7, #8]
 800c294:	607a      	str	r2, [r7, #4]
 800c296:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c298:	f7fa fe40 	bl	8006f1c <HAL_GetTick>
 800c29c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d101      	bne.n	800c2ae <HAL_QSPI_AutoPolling+0x24>
 800c2aa:	2302      	movs	r3, #2
 800c2ac:	e060      	b.n	800c370 <HAL_QSPI_AutoPolling+0xe6>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d14f      	bne.n	800c362 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	2242      	movs	r2, #66	; 0x42
 800c2cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	9300      	str	r3, [sp, #0]
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2120      	movs	r1, #32
 800c2da:	68f8      	ldr	r0, [r7, #12]
 800c2dc:	f000 f85a 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c2e4:	7dfb      	ldrb	r3, [r7, #23]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d13d      	bne.n	800c366 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	6812      	ldr	r2, [r2, #0]
 800c2f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	6852      	ldr	r2, [r2, #4]
 800c2fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	6892      	ldr	r2, [r2, #8]
 800c306:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	431a      	orrs	r2, r3
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c320:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	68da      	ldr	r2, [r3, #12]
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c32a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f000 f866 	bl	800c402 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2201      	movs	r2, #1
 800c33e:	2108      	movs	r1, #8
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 f827 	bl	800c394 <QSPI_WaitFlagStateUntilTimeout>
 800c346:	4603      	mov	r3, r0
 800c348:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10a      	bne.n	800c366 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2208      	movs	r2, #8
 800c356:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c360:	e001      	b.n	800c366 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c362:	2302      	movs	r3, #2
 800c364:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c36e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c3a4:	e01a      	b.n	800c3dc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ac:	d016      	beq.n	800c3dc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3ae:	f7fa fdb5 	bl	8006f1c <HAL_GetTick>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	1ad3      	subs	r3, r2, r3
 800c3b8:	69ba      	ldr	r2, [r7, #24]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d302      	bcc.n	800c3c4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c3be:	69bb      	ldr	r3, [r7, #24]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10b      	bne.n	800c3dc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2204      	movs	r2, #4
 800c3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d0:	f043 0201 	orr.w	r2, r3, #1
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e00e      	b.n	800c3fa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	689a      	ldr	r2, [r3, #8]
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	4013      	ands	r3, r2
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	bf14      	ite	ne
 800c3ea:	2301      	movne	r3, #1
 800c3ec:	2300      	moveq	r3, #0
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	79fb      	ldrb	r3, [r7, #7]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d1d6      	bne.n	800c3a6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}

0800c402 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c402:	b480      	push	{r7}
 800c404:	b085      	sub	sp, #20
 800c406:	af00      	add	r7, sp, #0
 800c408:	60f8      	str	r0, [r7, #12]
 800c40a:	60b9      	str	r1, [r7, #8]
 800c40c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c412:	2b00      	cmp	r3, #0
 800c414:	d009      	beq.n	800c42a <QSPI_Config+0x28>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c41c:	d005      	beq.n	800c42a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c41e:	68bb      	ldr	r3, [r7, #8]
 800c420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	3a01      	subs	r2, #1
 800c428:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	699b      	ldr	r3, [r3, #24]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f000 80b9 	beq.w	800c5a6 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d05f      	beq.n	800c4fc <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	6892      	ldr	r2, [r2, #8]
 800c444:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	69db      	ldr	r3, [r3, #28]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d031      	beq.n	800c4b2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c456:	431a      	orrs	r2, r3
 800c458:	68bb      	ldr	r3, [r7, #8]
 800c45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45c:	431a      	orrs	r2, r3
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c462:	431a      	orrs	r2, r3
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	049b      	lsls	r3, r3, #18
 800c46a:	431a      	orrs	r2, r3
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	431a      	orrs	r2, r3
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	431a      	orrs	r2, r3
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	68db      	ldr	r3, [r3, #12]
 800c47c:	431a      	orrs	r2, r3
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	69db      	ldr	r3, [r3, #28]
 800c482:	431a      	orrs	r2, r3
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	431a      	orrs	r2, r3
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	ea42 0103 	orr.w	r1, r2, r3
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	430a      	orrs	r2, r1
 800c49a:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c4a2:	f000 812e 	beq.w	800c702 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	6852      	ldr	r2, [r2, #4]
 800c4ae:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c4b0:	e127      	b.n	800c702 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ba:	431a      	orrs	r2, r3
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4c0:	431a      	orrs	r2, r3
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4c6:	431a      	orrs	r2, r3
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	049b      	lsls	r3, r3, #18
 800c4ce:	431a      	orrs	r2, r3
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	431a      	orrs	r2, r3
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	431a      	orrs	r2, r3
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	69db      	ldr	r3, [r3, #28]
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	431a      	orrs	r2, r3
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	ea42 0103 	orr.w	r1, r2, r3
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	430a      	orrs	r2, r1
 800c4f8:	615a      	str	r2, [r3, #20]
}
 800c4fa:	e102      	b.n	800c702 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d02e      	beq.n	800c562 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c50c:	431a      	orrs	r2, r3
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c512:	431a      	orrs	r2, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c518:	431a      	orrs	r2, r3
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	695b      	ldr	r3, [r3, #20]
 800c51e:	049b      	lsls	r3, r3, #18
 800c520:	431a      	orrs	r2, r3
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	431a      	orrs	r2, r3
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	431a      	orrs	r2, r3
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	69db      	ldr	r3, [r3, #28]
 800c532:	431a      	orrs	r2, r3
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	699b      	ldr	r3, [r3, #24]
 800c538:	431a      	orrs	r2, r3
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	ea42 0103 	orr.w	r1, r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	430a      	orrs	r2, r1
 800c54a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c552:	f000 80d6 	beq.w	800c702 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	68ba      	ldr	r2, [r7, #8]
 800c55c:	6852      	ldr	r2, [r2, #4]
 800c55e:	619a      	str	r2, [r3, #24]
}
 800c560:	e0cf      	b.n	800c702 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56a:	431a      	orrs	r2, r3
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c570:	431a      	orrs	r2, r3
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c576:	431a      	orrs	r2, r3
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	695b      	ldr	r3, [r3, #20]
 800c57c:	049b      	lsls	r3, r3, #18
 800c57e:	431a      	orrs	r2, r3
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	6a1b      	ldr	r3, [r3, #32]
 800c584:	431a      	orrs	r2, r3
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	69db      	ldr	r3, [r3, #28]
 800c58a:	431a      	orrs	r2, r3
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	699b      	ldr	r3, [r3, #24]
 800c590:	431a      	orrs	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	ea42 0103 	orr.w	r1, r2, r3
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	430a      	orrs	r2, r1
 800c5a2:	615a      	str	r2, [r3, #20]
}
 800c5a4:	e0ad      	b.n	800c702 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d058      	beq.n	800c660 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	6892      	ldr	r2, [r2, #8]
 800c5b6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d02d      	beq.n	800c61c <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c8:	431a      	orrs	r2, r3
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ce:	431a      	orrs	r2, r3
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5d4:	431a      	orrs	r2, r3
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	695b      	ldr	r3, [r3, #20]
 800c5da:	049b      	lsls	r3, r3, #18
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	691b      	ldr	r3, [r3, #16]
 800c5e2:	431a      	orrs	r2, r3
 800c5e4:	68bb      	ldr	r3, [r7, #8]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	431a      	orrs	r2, r3
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	68db      	ldr	r3, [r3, #12]
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	68bb      	ldr	r3, [r7, #8]
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	431a      	orrs	r2, r3
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	699b      	ldr	r3, [r3, #24]
 800c5fa:	ea42 0103 	orr.w	r1, r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	430a      	orrs	r2, r1
 800c606:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c60e:	d078      	beq.n	800c702 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	6852      	ldr	r2, [r2, #4]
 800c618:	619a      	str	r2, [r3, #24]
}
 800c61a:	e072      	b.n	800c702 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c620:	68bb      	ldr	r3, [r7, #8]
 800c622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c624:	431a      	orrs	r2, r3
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c62a:	431a      	orrs	r2, r3
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c630:	431a      	orrs	r2, r3
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	695b      	ldr	r3, [r3, #20]
 800c636:	049b      	lsls	r3, r3, #18
 800c638:	431a      	orrs	r2, r3
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	431a      	orrs	r2, r3
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	431a      	orrs	r2, r3
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	431a      	orrs	r2, r3
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	699b      	ldr	r3, [r3, #24]
 800c650:	ea42 0103 	orr.w	r1, r2, r3
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	430a      	orrs	r2, r1
 800c65c:	615a      	str	r2, [r3, #20]
}
 800c65e:	e050      	b.n	800c702 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	69db      	ldr	r3, [r3, #28]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d02a      	beq.n	800c6be <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c670:	431a      	orrs	r2, r3
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c676:	431a      	orrs	r2, r3
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67c:	431a      	orrs	r2, r3
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	695b      	ldr	r3, [r3, #20]
 800c682:	049b      	lsls	r3, r3, #18
 800c684:	431a      	orrs	r2, r3
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	6a1b      	ldr	r3, [r3, #32]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	431a      	orrs	r2, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	69db      	ldr	r3, [r3, #28]
 800c696:	431a      	orrs	r2, r3
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	699b      	ldr	r3, [r3, #24]
 800c69c:	ea42 0103 	orr.w	r1, r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	687a      	ldr	r2, [r7, #4]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c6b0:	d027      	beq.n	800c702 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68ba      	ldr	r2, [r7, #8]
 800c6b8:	6852      	ldr	r2, [r2, #4]
 800c6ba:	619a      	str	r2, [r3, #24]
}
 800c6bc:	e021      	b.n	800c702 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d01d      	beq.n	800c702 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ce:	431a      	orrs	r2, r3
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6d4:	431a      	orrs	r2, r3
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6da:	431a      	orrs	r2, r3
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	049b      	lsls	r3, r3, #18
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	6a1b      	ldr	r3, [r3, #32]
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	431a      	orrs	r2, r3
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	ea42 0103 	orr.w	r1, r2, r3
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	430a      	orrs	r2, r1
 800c700:	615a      	str	r2, [r3, #20]
}
 800c702:	bf00      	nop
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
	...

0800c710 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b08c      	sub	sp, #48	; 0x30
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	f000 bc48 	b.w	800cfb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 8088 	beq.w	800c842 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c732:	4b99      	ldr	r3, [pc, #612]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c734:	691b      	ldr	r3, [r3, #16]
 800c736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c73a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c73c:	4b96      	ldr	r3, [pc, #600]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	2b10      	cmp	r3, #16
 800c746:	d007      	beq.n	800c758 <HAL_RCC_OscConfig+0x48>
 800c748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74a:	2b18      	cmp	r3, #24
 800c74c:	d111      	bne.n	800c772 <HAL_RCC_OscConfig+0x62>
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	f003 0303 	and.w	r3, r3, #3
 800c754:	2b02      	cmp	r3, #2
 800c756:	d10c      	bne.n	800c772 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c758:	4b8f      	ldr	r3, [pc, #572]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d06d      	beq.n	800c840 <HAL_RCC_OscConfig+0x130>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d169      	bne.n	800c840 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	f000 bc21 	b.w	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c77a:	d106      	bne.n	800c78a <HAL_RCC_OscConfig+0x7a>
 800c77c:	4b86      	ldr	r3, [pc, #536]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a85      	ldr	r2, [pc, #532]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c786:	6013      	str	r3, [r2, #0]
 800c788:	e02e      	b.n	800c7e8 <HAL_RCC_OscConfig+0xd8>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10c      	bne.n	800c7ac <HAL_RCC_OscConfig+0x9c>
 800c792:	4b81      	ldr	r3, [pc, #516]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4a80      	ldr	r2, [pc, #512]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c79c:	6013      	str	r3, [r2, #0]
 800c79e:	4b7e      	ldr	r3, [pc, #504]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a7d      	ldr	r2, [pc, #500]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7a8:	6013      	str	r3, [r2, #0]
 800c7aa:	e01d      	b.n	800c7e8 <HAL_RCC_OscConfig+0xd8>
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7b4:	d10c      	bne.n	800c7d0 <HAL_RCC_OscConfig+0xc0>
 800c7b6:	4b78      	ldr	r3, [pc, #480]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a77      	ldr	r2, [pc, #476]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7c0:	6013      	str	r3, [r2, #0]
 800c7c2:	4b75      	ldr	r3, [pc, #468]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a74      	ldr	r2, [pc, #464]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7cc:	6013      	str	r3, [r2, #0]
 800c7ce:	e00b      	b.n	800c7e8 <HAL_RCC_OscConfig+0xd8>
 800c7d0:	4b71      	ldr	r3, [pc, #452]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a70      	ldr	r2, [pc, #448]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7da:	6013      	str	r3, [r2, #0]
 800c7dc:	4b6e      	ldr	r3, [pc, #440]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	4a6d      	ldr	r2, [pc, #436]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c7e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d013      	beq.n	800c818 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7f0:	f7fa fb94 	bl	8006f1c <HAL_GetTick>
 800c7f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c7f6:	e008      	b.n	800c80a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c7f8:	f7fa fb90 	bl	8006f1c <HAL_GetTick>
 800c7fc:	4602      	mov	r2, r0
 800c7fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c800:	1ad3      	subs	r3, r2, r3
 800c802:	2b64      	cmp	r3, #100	; 0x64
 800c804:	d901      	bls.n	800c80a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c806:	2303      	movs	r3, #3
 800c808:	e3d4      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c80a:	4b63      	ldr	r3, [pc, #396]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c812:	2b00      	cmp	r3, #0
 800c814:	d0f0      	beq.n	800c7f8 <HAL_RCC_OscConfig+0xe8>
 800c816:	e014      	b.n	800c842 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c818:	f7fa fb80 	bl	8006f1c <HAL_GetTick>
 800c81c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c81e:	e008      	b.n	800c832 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c820:	f7fa fb7c 	bl	8006f1c <HAL_GetTick>
 800c824:	4602      	mov	r2, r0
 800c826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	2b64      	cmp	r3, #100	; 0x64
 800c82c:	d901      	bls.n	800c832 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e3c0      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c832:	4b59      	ldr	r3, [pc, #356]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d1f0      	bne.n	800c820 <HAL_RCC_OscConfig+0x110>
 800c83e:	e000      	b.n	800c842 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f000 80ca 	beq.w	800c9e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c850:	4b51      	ldr	r3, [pc, #324]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c852:	691b      	ldr	r3, [r3, #16]
 800c854:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c858:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c85a:	4b4f      	ldr	r3, [pc, #316]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c85c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d007      	beq.n	800c876 <HAL_RCC_OscConfig+0x166>
 800c866:	6a3b      	ldr	r3, [r7, #32]
 800c868:	2b18      	cmp	r3, #24
 800c86a:	d156      	bne.n	800c91a <HAL_RCC_OscConfig+0x20a>
 800c86c:	69fb      	ldr	r3, [r7, #28]
 800c86e:	f003 0303 	and.w	r3, r3, #3
 800c872:	2b00      	cmp	r3, #0
 800c874:	d151      	bne.n	800c91a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c876:	4b48      	ldr	r3, [pc, #288]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 0304 	and.w	r3, r3, #4
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d005      	beq.n	800c88e <HAL_RCC_OscConfig+0x17e>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e392      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c88e:	4b42      	ldr	r3, [pc, #264]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f023 0219 	bic.w	r2, r3, #25
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	493f      	ldr	r1, [pc, #252]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c89c:	4313      	orrs	r3, r2
 800c89e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8a0:	f7fa fb3c 	bl	8006f1c <HAL_GetTick>
 800c8a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c8a6:	e008      	b.n	800c8ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c8a8:	f7fa fb38 	bl	8006f1c <HAL_GetTick>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b0:	1ad3      	subs	r3, r2, r3
 800c8b2:	2b02      	cmp	r3, #2
 800c8b4:	d901      	bls.n	800c8ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e37c      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c8ba:	4b37      	ldr	r3, [pc, #220]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 0304 	and.w	r3, r3, #4
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d0f0      	beq.n	800c8a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8c6:	f7fa fb59 	bl	8006f7c <HAL_GetREVID>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	f241 0203 	movw	r2, #4099	; 0x1003
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d817      	bhi.n	800c904 <HAL_RCC_OscConfig+0x1f4>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	691b      	ldr	r3, [r3, #16]
 800c8d8:	2b40      	cmp	r3, #64	; 0x40
 800c8da:	d108      	bne.n	800c8ee <HAL_RCC_OscConfig+0x1de>
 800c8dc:	4b2e      	ldr	r3, [pc, #184]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c8e4:	4a2c      	ldr	r2, [pc, #176]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c8e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c8ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c8ec:	e07a      	b.n	800c9e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c8f0:	685b      	ldr	r3, [r3, #4]
 800c8f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	691b      	ldr	r3, [r3, #16]
 800c8fa:	031b      	lsls	r3, r3, #12
 800c8fc:	4926      	ldr	r1, [pc, #152]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c902:	e06f      	b.n	800c9e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c904:	4b24      	ldr	r3, [pc, #144]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	691b      	ldr	r3, [r3, #16]
 800c910:	061b      	lsls	r3, r3, #24
 800c912:	4921      	ldr	r1, [pc, #132]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c914:	4313      	orrs	r3, r2
 800c916:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c918:	e064      	b.n	800c9e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	68db      	ldr	r3, [r3, #12]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d047      	beq.n	800c9b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c922:	4b1d      	ldr	r3, [pc, #116]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	f023 0219 	bic.w	r2, r3, #25
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	491a      	ldr	r1, [pc, #104]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c930:	4313      	orrs	r3, r2
 800c932:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c934:	f7fa faf2 	bl	8006f1c <HAL_GetTick>
 800c938:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c93a:	e008      	b.n	800c94e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c93c:	f7fa faee 	bl	8006f1c <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d901      	bls.n	800c94e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e332      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c94e:	4b12      	ldr	r3, [pc, #72]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f003 0304 	and.w	r3, r3, #4
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0f0      	beq.n	800c93c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c95a:	f7fa fb0f 	bl	8006f7c <HAL_GetREVID>
 800c95e:	4603      	mov	r3, r0
 800c960:	f241 0203 	movw	r2, #4099	; 0x1003
 800c964:	4293      	cmp	r3, r2
 800c966:	d819      	bhi.n	800c99c <HAL_RCC_OscConfig+0x28c>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	2b40      	cmp	r3, #64	; 0x40
 800c96e:	d108      	bne.n	800c982 <HAL_RCC_OscConfig+0x272>
 800c970:	4b09      	ldr	r3, [pc, #36]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c978:	4a07      	ldr	r2, [pc, #28]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c97a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c97e:	6053      	str	r3, [r2, #4]
 800c980:	e030      	b.n	800c9e4 <HAL_RCC_OscConfig+0x2d4>
 800c982:	4b05      	ldr	r3, [pc, #20]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	691b      	ldr	r3, [r3, #16]
 800c98e:	031b      	lsls	r3, r3, #12
 800c990:	4901      	ldr	r1, [pc, #4]	; (800c998 <HAL_RCC_OscConfig+0x288>)
 800c992:	4313      	orrs	r3, r2
 800c994:	604b      	str	r3, [r1, #4]
 800c996:	e025      	b.n	800c9e4 <HAL_RCC_OscConfig+0x2d4>
 800c998:	58024400 	.word	0x58024400
 800c99c:	4b9a      	ldr	r3, [pc, #616]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	061b      	lsls	r3, r3, #24
 800c9aa:	4997      	ldr	r1, [pc, #604]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	604b      	str	r3, [r1, #4]
 800c9b0:	e018      	b.n	800c9e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c9b2:	4b95      	ldr	r3, [pc, #596]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a94      	ldr	r2, [pc, #592]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c9b8:	f023 0301 	bic.w	r3, r3, #1
 800c9bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c9be:	f7fa faad 	bl	8006f1c <HAL_GetTick>
 800c9c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c9c4:	e008      	b.n	800c9d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c9c6:	f7fa faa9 	bl	8006f1c <HAL_GetTick>
 800c9ca:	4602      	mov	r2, r0
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	1ad3      	subs	r3, r2, r3
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d901      	bls.n	800c9d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e2ed      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c9d8:	4b8b      	ldr	r3, [pc, #556]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d1f0      	bne.n	800c9c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f003 0310 	and.w	r3, r3, #16
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 80a9 	beq.w	800cb44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c9f2:	4b85      	ldr	r3, [pc, #532]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c9fc:	4b82      	ldr	r3, [pc, #520]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800c9fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b08      	cmp	r3, #8
 800ca06:	d007      	beq.n	800ca18 <HAL_RCC_OscConfig+0x308>
 800ca08:	69bb      	ldr	r3, [r7, #24]
 800ca0a:	2b18      	cmp	r3, #24
 800ca0c:	d13a      	bne.n	800ca84 <HAL_RCC_OscConfig+0x374>
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f003 0303 	and.w	r3, r3, #3
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d135      	bne.n	800ca84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca18:	4b7b      	ldr	r3, [pc, #492]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <HAL_RCC_OscConfig+0x320>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	69db      	ldr	r3, [r3, #28]
 800ca28:	2b80      	cmp	r3, #128	; 0x80
 800ca2a:	d001      	beq.n	800ca30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e2c1      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca30:	f7fa faa4 	bl	8006f7c <HAL_GetREVID>
 800ca34:	4603      	mov	r3, r0
 800ca36:	f241 0203 	movw	r2, #4099	; 0x1003
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d817      	bhi.n	800ca6e <HAL_RCC_OscConfig+0x35e>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a1b      	ldr	r3, [r3, #32]
 800ca42:	2b20      	cmp	r3, #32
 800ca44:	d108      	bne.n	800ca58 <HAL_RCC_OscConfig+0x348>
 800ca46:	4b70      	ldr	r3, [pc, #448]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ca4e:	4a6e      	ldr	r2, [pc, #440]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ca54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca56:	e075      	b.n	800cb44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca58:	4b6b      	ldr	r3, [pc, #428]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	069b      	lsls	r3, r3, #26
 800ca66:	4968      	ldr	r1, [pc, #416]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca6c:	e06a      	b.n	800cb44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ca6e:	4b66      	ldr	r3, [pc, #408]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6a1b      	ldr	r3, [r3, #32]
 800ca7a:	061b      	lsls	r3, r3, #24
 800ca7c:	4962      	ldr	r1, [pc, #392]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ca82:	e05f      	b.n	800cb44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	69db      	ldr	r3, [r3, #28]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d042      	beq.n	800cb12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ca8c:	4b5e      	ldr	r3, [pc, #376]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a5d      	ldr	r2, [pc, #372]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800ca92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca98:	f7fa fa40 	bl	8006f1c <HAL_GetTick>
 800ca9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800caa0:	f7fa fa3c 	bl	8006f1c <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e280      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cab2:	4b55      	ldr	r3, [pc, #340]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0f0      	beq.n	800caa0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cabe:	f7fa fa5d 	bl	8006f7c <HAL_GetREVID>
 800cac2:	4603      	mov	r3, r0
 800cac4:	f241 0203 	movw	r2, #4099	; 0x1003
 800cac8:	4293      	cmp	r3, r2
 800caca:	d817      	bhi.n	800cafc <HAL_RCC_OscConfig+0x3ec>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	2b20      	cmp	r3, #32
 800cad2:	d108      	bne.n	800cae6 <HAL_RCC_OscConfig+0x3d6>
 800cad4:	4b4c      	ldr	r3, [pc, #304]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cadc:	4a4a      	ldr	r2, [pc, #296]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cade:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cae2:	6053      	str	r3, [r2, #4]
 800cae4:	e02e      	b.n	800cb44 <HAL_RCC_OscConfig+0x434>
 800cae6:	4b48      	ldr	r3, [pc, #288]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	069b      	lsls	r3, r3, #26
 800caf4:	4944      	ldr	r1, [pc, #272]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	604b      	str	r3, [r1, #4]
 800cafa:	e023      	b.n	800cb44 <HAL_RCC_OscConfig+0x434>
 800cafc:	4b42      	ldr	r3, [pc, #264]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6a1b      	ldr	r3, [r3, #32]
 800cb08:	061b      	lsls	r3, r3, #24
 800cb0a:	493f      	ldr	r1, [pc, #252]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	60cb      	str	r3, [r1, #12]
 800cb10:	e018      	b.n	800cb44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cb12:	4b3d      	ldr	r3, [pc, #244]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a3c      	ldr	r2, [pc, #240]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb1e:	f7fa f9fd 	bl	8006f1c <HAL_GetTick>
 800cb22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb24:	e008      	b.n	800cb38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cb26:	f7fa f9f9 	bl	8006f1c <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d901      	bls.n	800cb38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cb34:	2303      	movs	r3, #3
 800cb36:	e23d      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cb38:	4b33      	ldr	r3, [pc, #204]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1f0      	bne.n	800cb26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f003 0308 	and.w	r3, r3, #8
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d036      	beq.n	800cbbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	695b      	ldr	r3, [r3, #20]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d019      	beq.n	800cb8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cb58:	4b2b      	ldr	r3, [pc, #172]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb5c:	4a2a      	ldr	r2, [pc, #168]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb5e:	f043 0301 	orr.w	r3, r3, #1
 800cb62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb64:	f7fa f9da 	bl	8006f1c <HAL_GetTick>
 800cb68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb6a:	e008      	b.n	800cb7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb6c:	f7fa f9d6 	bl	8006f1c <HAL_GetTick>
 800cb70:	4602      	mov	r2, r0
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	2b02      	cmp	r3, #2
 800cb78:	d901      	bls.n	800cb7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	e21a      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cb7e:	4b22      	ldr	r3, [pc, #136]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb82:	f003 0302 	and.w	r3, r3, #2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0f0      	beq.n	800cb6c <HAL_RCC_OscConfig+0x45c>
 800cb8a:	e018      	b.n	800cbbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb8c:	4b1e      	ldr	r3, [pc, #120]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb90:	4a1d      	ldr	r2, [pc, #116]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cb92:	f023 0301 	bic.w	r3, r3, #1
 800cb96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cb98:	f7fa f9c0 	bl	8006f1c <HAL_GetTick>
 800cb9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cb9e:	e008      	b.n	800cbb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cba0:	f7fa f9bc 	bl	8006f1c <HAL_GetTick>
 800cba4:	4602      	mov	r2, r0
 800cba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cba8:	1ad3      	subs	r3, r2, r3
 800cbaa:	2b02      	cmp	r3, #2
 800cbac:	d901      	bls.n	800cbb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800cbae:	2303      	movs	r3, #3
 800cbb0:	e200      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800cbb2:	4b15      	ldr	r3, [pc, #84]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cbb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbb6:	f003 0302 	and.w	r3, r3, #2
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d1f0      	bne.n	800cba0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 0320 	and.w	r3, r3, #32
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d039      	beq.n	800cc3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d01c      	beq.n	800cc0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800cbd2:	4b0d      	ldr	r3, [pc, #52]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a0c      	ldr	r2, [pc, #48]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cbd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cbdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cbde:	f7fa f99d 	bl	8006f1c <HAL_GetTick>
 800cbe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbe4:	e008      	b.n	800cbf8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cbe6:	f7fa f999 	bl	8006f1c <HAL_GetTick>
 800cbea:	4602      	mov	r2, r0
 800cbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d901      	bls.n	800cbf8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e1dd      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800cbf8:	4b03      	ldr	r3, [pc, #12]	; (800cc08 <HAL_RCC_OscConfig+0x4f8>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d0f0      	beq.n	800cbe6 <HAL_RCC_OscConfig+0x4d6>
 800cc04:	e01b      	b.n	800cc3e <HAL_RCC_OscConfig+0x52e>
 800cc06:	bf00      	nop
 800cc08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800cc0c:	4b9b      	ldr	r3, [pc, #620]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a9a      	ldr	r2, [pc, #616]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cc12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800cc18:	f7fa f980 	bl	8006f1c <HAL_GetTick>
 800cc1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc1e:	e008      	b.n	800cc32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800cc20:	f7fa f97c 	bl	8006f1c <HAL_GetTick>
 800cc24:	4602      	mov	r2, r0
 800cc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d901      	bls.n	800cc32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800cc2e:	2303      	movs	r3, #3
 800cc30:	e1c0      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800cc32:	4b92      	ldr	r3, [pc, #584]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1f0      	bne.n	800cc20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f003 0304 	and.w	r3, r3, #4
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	f000 8081 	beq.w	800cd4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800cc4c:	4b8c      	ldr	r3, [pc, #560]	; (800ce80 <HAL_RCC_OscConfig+0x770>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a8b      	ldr	r2, [pc, #556]	; (800ce80 <HAL_RCC_OscConfig+0x770>)
 800cc52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cc58:	f7fa f960 	bl	8006f1c <HAL_GetTick>
 800cc5c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc5e:	e008      	b.n	800cc72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc60:	f7fa f95c 	bl	8006f1c <HAL_GetTick>
 800cc64:	4602      	mov	r2, r0
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	2b64      	cmp	r3, #100	; 0x64
 800cc6c:	d901      	bls.n	800cc72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e1a0      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cc72:	4b83      	ldr	r3, [pc, #524]	; (800ce80 <HAL_RCC_OscConfig+0x770>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d0f0      	beq.n	800cc60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d106      	bne.n	800cc94 <HAL_RCC_OscConfig+0x584>
 800cc86:	4b7d      	ldr	r3, [pc, #500]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8a:	4a7c      	ldr	r2, [pc, #496]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cc8c:	f043 0301 	orr.w	r3, r3, #1
 800cc90:	6713      	str	r3, [r2, #112]	; 0x70
 800cc92:	e02d      	b.n	800ccf0 <HAL_RCC_OscConfig+0x5e0>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d10c      	bne.n	800ccb6 <HAL_RCC_OscConfig+0x5a6>
 800cc9c:	4b77      	ldr	r3, [pc, #476]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cc9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cca0:	4a76      	ldr	r2, [pc, #472]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cca2:	f023 0301 	bic.w	r3, r3, #1
 800cca6:	6713      	str	r3, [r2, #112]	; 0x70
 800cca8:	4b74      	ldr	r3, [pc, #464]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccac:	4a73      	ldr	r2, [pc, #460]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccae:	f023 0304 	bic.w	r3, r3, #4
 800ccb2:	6713      	str	r3, [r2, #112]	; 0x70
 800ccb4:	e01c      	b.n	800ccf0 <HAL_RCC_OscConfig+0x5e0>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	689b      	ldr	r3, [r3, #8]
 800ccba:	2b05      	cmp	r3, #5
 800ccbc:	d10c      	bne.n	800ccd8 <HAL_RCC_OscConfig+0x5c8>
 800ccbe:	4b6f      	ldr	r3, [pc, #444]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc2:	4a6e      	ldr	r2, [pc, #440]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccc4:	f043 0304 	orr.w	r3, r3, #4
 800ccc8:	6713      	str	r3, [r2, #112]	; 0x70
 800ccca:	4b6c      	ldr	r3, [pc, #432]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccce:	4a6b      	ldr	r2, [pc, #428]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccd0:	f043 0301 	orr.w	r3, r3, #1
 800ccd4:	6713      	str	r3, [r2, #112]	; 0x70
 800ccd6:	e00b      	b.n	800ccf0 <HAL_RCC_OscConfig+0x5e0>
 800ccd8:	4b68      	ldr	r3, [pc, #416]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccdc:	4a67      	ldr	r2, [pc, #412]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccde:	f023 0301 	bic.w	r3, r3, #1
 800cce2:	6713      	str	r3, [r2, #112]	; 0x70
 800cce4:	4b65      	ldr	r3, [pc, #404]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce8:	4a64      	ldr	r2, [pc, #400]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ccea:	f023 0304 	bic.w	r3, r3, #4
 800ccee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	689b      	ldr	r3, [r3, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d015      	beq.n	800cd24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ccf8:	f7fa f910 	bl	8006f1c <HAL_GetTick>
 800ccfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ccfe:	e00a      	b.n	800cd16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd00:	f7fa f90c 	bl	8006f1c <HAL_GetTick>
 800cd04:	4602      	mov	r2, r0
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	1ad3      	subs	r3, r2, r3
 800cd0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d901      	bls.n	800cd16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800cd12:	2303      	movs	r3, #3
 800cd14:	e14e      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cd16:	4b59      	ldr	r3, [pc, #356]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cd18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd1a:	f003 0302 	and.w	r3, r3, #2
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d0ee      	beq.n	800cd00 <HAL_RCC_OscConfig+0x5f0>
 800cd22:	e014      	b.n	800cd4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd24:	f7fa f8fa 	bl	8006f1c <HAL_GetTick>
 800cd28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd2a:	e00a      	b.n	800cd42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cd2c:	f7fa f8f6 	bl	8006f1c <HAL_GetTick>
 800cd30:	4602      	mov	r2, r0
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	1ad3      	subs	r3, r2, r3
 800cd36:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d901      	bls.n	800cd42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e138      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800cd42:	4b4e      	ldr	r3, [pc, #312]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cd44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1ee      	bne.n	800cd2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	f000 812d 	beq.w	800cfb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800cd58:	4b48      	ldr	r3, [pc, #288]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cd5a:	691b      	ldr	r3, [r3, #16]
 800cd5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd60:	2b18      	cmp	r3, #24
 800cd62:	f000 80bd 	beq.w	800cee0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd6a:	2b02      	cmp	r3, #2
 800cd6c:	f040 809e 	bne.w	800ceac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd70:	4b42      	ldr	r3, [pc, #264]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a41      	ldr	r2, [pc, #260]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cd76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cd7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd7c:	f7fa f8ce 	bl	8006f1c <HAL_GetTick>
 800cd80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd82:	e008      	b.n	800cd96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd84:	f7fa f8ca 	bl	8006f1c <HAL_GetTick>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd8c:	1ad3      	subs	r3, r2, r3
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d901      	bls.n	800cd96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800cd92:	2303      	movs	r3, #3
 800cd94:	e10e      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cd96:	4b39      	ldr	r3, [pc, #228]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1f0      	bne.n	800cd84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cda2:	4b36      	ldr	r3, [pc, #216]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cda4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cda6:	4b37      	ldr	r3, [pc, #220]	; (800ce84 <HAL_RCC_OscConfig+0x774>)
 800cda8:	4013      	ands	r3, r2
 800cdaa:	687a      	ldr	r2, [r7, #4]
 800cdac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cdb2:	0112      	lsls	r2, r2, #4
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	4931      	ldr	r1, [pc, #196]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	628b      	str	r3, [r1, #40]	; 0x28
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdca:	3b01      	subs	r3, #1
 800cdcc:	025b      	lsls	r3, r3, #9
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	431a      	orrs	r2, r3
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	041b      	lsls	r3, r3, #16
 800cdda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdde:	431a      	orrs	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde4:	3b01      	subs	r3, #1
 800cde6:	061b      	lsls	r3, r3, #24
 800cde8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cdec:	4923      	ldr	r1, [pc, #140]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800cdf2:	4b22      	ldr	r3, [pc, #136]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf6:	4a21      	ldr	r2, [pc, #132]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800cdf8:	f023 0301 	bic.w	r3, r3, #1
 800cdfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cdfe:	4b1f      	ldr	r3, [pc, #124]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ce02:	4b21      	ldr	r3, [pc, #132]	; (800ce88 <HAL_RCC_OscConfig+0x778>)
 800ce04:	4013      	ands	r3, r2
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ce0a:	00d2      	lsls	r2, r2, #3
 800ce0c:	491b      	ldr	r1, [pc, #108]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ce12:	4b1a      	ldr	r3, [pc, #104]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce16:	f023 020c 	bic.w	r2, r3, #12
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	4917      	ldr	r1, [pc, #92]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce20:	4313      	orrs	r3, r2
 800ce22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ce24:	4b15      	ldr	r3, [pc, #84]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce28:	f023 0202 	bic.w	r2, r3, #2
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce30:	4912      	ldr	r1, [pc, #72]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce32:	4313      	orrs	r3, r2
 800ce34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ce36:	4b11      	ldr	r3, [pc, #68]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce3a:	4a10      	ldr	r2, [pc, #64]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce42:	4b0e      	ldr	r3, [pc, #56]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce46:	4a0d      	ldr	r2, [pc, #52]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce52:	4a0a      	ldr	r2, [pc, #40]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ce5a:	4b08      	ldr	r3, [pc, #32]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce5e:	4a07      	ldr	r2, [pc, #28]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce60:	f043 0301 	orr.w	r3, r3, #1
 800ce64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce66:	4b05      	ldr	r3, [pc, #20]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a04      	ldr	r2, [pc, #16]	; (800ce7c <HAL_RCC_OscConfig+0x76c>)
 800ce6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ce70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce72:	f7fa f853 	bl	8006f1c <HAL_GetTick>
 800ce76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce78:	e011      	b.n	800ce9e <HAL_RCC_OscConfig+0x78e>
 800ce7a:	bf00      	nop
 800ce7c:	58024400 	.word	0x58024400
 800ce80:	58024800 	.word	0x58024800
 800ce84:	fffffc0c 	.word	0xfffffc0c
 800ce88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ce8c:	f7fa f846 	bl	8006f1c <HAL_GetTick>
 800ce90:	4602      	mov	r2, r0
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	1ad3      	subs	r3, r2, r3
 800ce96:	2b02      	cmp	r3, #2
 800ce98:	d901      	bls.n	800ce9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ce9a:	2303      	movs	r3, #3
 800ce9c:	e08a      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ce9e:	4b47      	ldr	r3, [pc, #284]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d0f0      	beq.n	800ce8c <HAL_RCC_OscConfig+0x77c>
 800ceaa:	e082      	b.n	800cfb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ceac:	4b43      	ldr	r3, [pc, #268]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	4a42      	ldr	r2, [pc, #264]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800ceb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ceb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ceb8:	f7fa f830 	bl	8006f1c <HAL_GetTick>
 800cebc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800cebe:	e008      	b.n	800ced2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cec0:	f7fa f82c 	bl	8006f1c <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d901      	bls.n	800ced2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800cece:	2303      	movs	r3, #3
 800ced0:	e070      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ced2:	4b3a      	ldr	r3, [pc, #232]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1f0      	bne.n	800cec0 <HAL_RCC_OscConfig+0x7b0>
 800cede:	e068      	b.n	800cfb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800cee0:	4b36      	ldr	r3, [pc, #216]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800cee6:	4b35      	ldr	r3, [pc, #212]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d031      	beq.n	800cf58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	f003 0203 	and.w	r2, r3, #3
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d12a      	bne.n	800cf58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	091b      	lsrs	r3, r3, #4
 800cf06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cf0e:	429a      	cmp	r2, r3
 800cf10:	d122      	bne.n	800cf58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d11a      	bne.n	800cf58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	0a5b      	lsrs	r3, r3, #9
 800cf26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d111      	bne.n	800cf58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	0c1b      	lsrs	r3, r3, #16
 800cf38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d108      	bne.n	800cf58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	0e1b      	lsrs	r3, r3, #24
 800cf4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d001      	beq.n	800cf5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e02b      	b.n	800cfb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800cf5c:	4b17      	ldr	r3, [pc, #92]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cf5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf60:	08db      	lsrs	r3, r3, #3
 800cf62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cf6c:	693a      	ldr	r2, [r7, #16]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d01f      	beq.n	800cfb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800cf72:	4b12      	ldr	r3, [pc, #72]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cf74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf76:	4a11      	ldr	r2, [pc, #68]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cf78:	f023 0301 	bic.w	r3, r3, #1
 800cf7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cf7e:	f7f9 ffcd 	bl	8006f1c <HAL_GetTick>
 800cf82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800cf84:	bf00      	nop
 800cf86:	f7f9 ffc9 	bl	8006f1c <HAL_GetTick>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d0f9      	beq.n	800cf86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800cf92:	4b0a      	ldr	r3, [pc, #40]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cf94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf96:	4b0a      	ldr	r3, [pc, #40]	; (800cfc0 <HAL_RCC_OscConfig+0x8b0>)
 800cf98:	4013      	ands	r3, r2
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cf9e:	00d2      	lsls	r2, r2, #3
 800cfa0:	4906      	ldr	r1, [pc, #24]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800cfa6:	4b05      	ldr	r3, [pc, #20]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfaa:	4a04      	ldr	r2, [pc, #16]	; (800cfbc <HAL_RCC_OscConfig+0x8ac>)
 800cfac:	f043 0301 	orr.w	r3, r3, #1
 800cfb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800cfb2:	2300      	movs	r3, #0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3730      	adds	r7, #48	; 0x30
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	58024400 	.word	0x58024400
 800cfc0:	ffff0007 	.word	0xffff0007

0800cfc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d101      	bne.n	800cfd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	e19c      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cfd8:	4b8a      	ldr	r3, [pc, #552]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f003 030f 	and.w	r3, r3, #15
 800cfe0:	683a      	ldr	r2, [r7, #0]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d910      	bls.n	800d008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfe6:	4b87      	ldr	r3, [pc, #540]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f023 020f 	bic.w	r2, r3, #15
 800cfee:	4985      	ldr	r1, [pc, #532]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cff6:	4b83      	ldr	r3, [pc, #524]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 030f 	and.w	r3, r3, #15
 800cffe:	683a      	ldr	r2, [r7, #0]
 800d000:	429a      	cmp	r2, r3
 800d002:	d001      	beq.n	800d008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d004:	2301      	movs	r3, #1
 800d006:	e184      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0304 	and.w	r3, r3, #4
 800d010:	2b00      	cmp	r3, #0
 800d012:	d010      	beq.n	800d036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	691a      	ldr	r2, [r3, #16]
 800d018:	4b7b      	ldr	r3, [pc, #492]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d01a:	699b      	ldr	r3, [r3, #24]
 800d01c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d020:	429a      	cmp	r2, r3
 800d022:	d908      	bls.n	800d036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d024:	4b78      	ldr	r3, [pc, #480]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d026:	699b      	ldr	r3, [r3, #24]
 800d028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	4975      	ldr	r1, [pc, #468]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d032:	4313      	orrs	r3, r2
 800d034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f003 0308 	and.w	r3, r3, #8
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d010      	beq.n	800d064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	695a      	ldr	r2, [r3, #20]
 800d046:	4b70      	ldr	r3, [pc, #448]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d04e:	429a      	cmp	r2, r3
 800d050:	d908      	bls.n	800d064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d052:	4b6d      	ldr	r3, [pc, #436]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d054:	69db      	ldr	r3, [r3, #28]
 800d056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	695b      	ldr	r3, [r3, #20]
 800d05e:	496a      	ldr	r1, [pc, #424]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d060:	4313      	orrs	r3, r2
 800d062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f003 0310 	and.w	r3, r3, #16
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d010      	beq.n	800d092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	699a      	ldr	r2, [r3, #24]
 800d074:	4b64      	ldr	r3, [pc, #400]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d076:	69db      	ldr	r3, [r3, #28]
 800d078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d908      	bls.n	800d092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d080:	4b61      	ldr	r3, [pc, #388]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d082:	69db      	ldr	r3, [r3, #28]
 800d084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	699b      	ldr	r3, [r3, #24]
 800d08c:	495e      	ldr	r1, [pc, #376]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d08e:	4313      	orrs	r3, r2
 800d090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f003 0320 	and.w	r3, r3, #32
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d010      	beq.n	800d0c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	69da      	ldr	r2, [r3, #28]
 800d0a2:	4b59      	ldr	r3, [pc, #356]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0a4:	6a1b      	ldr	r3, [r3, #32]
 800d0a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d908      	bls.n	800d0c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d0ae:	4b56      	ldr	r3, [pc, #344]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0b0:	6a1b      	ldr	r3, [r3, #32]
 800d0b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	69db      	ldr	r3, [r3, #28]
 800d0ba:	4953      	ldr	r1, [pc, #332]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 0302 	and.w	r3, r3, #2
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d010      	beq.n	800d0ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68da      	ldr	r2, [r3, #12]
 800d0d0:	4b4d      	ldr	r3, [pc, #308]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	f003 030f 	and.w	r3, r3, #15
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d908      	bls.n	800d0ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d0dc:	4b4a      	ldr	r3, [pc, #296]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0de:	699b      	ldr	r3, [r3, #24]
 800d0e0:	f023 020f 	bic.w	r2, r3, #15
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	4947      	ldr	r1, [pc, #284]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0ea:	4313      	orrs	r3, r2
 800d0ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f003 0301 	and.w	r3, r3, #1
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d055      	beq.n	800d1a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d0fa:	4b43      	ldr	r3, [pc, #268]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d0fc:	699b      	ldr	r3, [r3, #24]
 800d0fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	4940      	ldr	r1, [pc, #256]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d108:	4313      	orrs	r3, r2
 800d10a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	2b02      	cmp	r3, #2
 800d112:	d107      	bne.n	800d124 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d114:	4b3c      	ldr	r3, [pc, #240]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d121      	bne.n	800d164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d120:	2301      	movs	r3, #1
 800d122:	e0f6      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	2b03      	cmp	r3, #3
 800d12a:	d107      	bne.n	800d13c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d12c:	4b36      	ldr	r3, [pc, #216]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d134:	2b00      	cmp	r3, #0
 800d136:	d115      	bne.n	800d164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d138:	2301      	movs	r3, #1
 800d13a:	e0ea      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d107      	bne.n	800d154 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d144:	4b30      	ldr	r3, [pc, #192]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d109      	bne.n	800d164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	e0de      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d154:	4b2c      	ldr	r3, [pc, #176]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 0304 	and.w	r3, r3, #4
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d101      	bne.n	800d164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	e0d6      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d164:	4b28      	ldr	r3, [pc, #160]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	f023 0207 	bic.w	r2, r3, #7
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	4925      	ldr	r1, [pc, #148]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d172:	4313      	orrs	r3, r2
 800d174:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d176:	f7f9 fed1 	bl	8006f1c <HAL_GetTick>
 800d17a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d17c:	e00a      	b.n	800d194 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d17e:	f7f9 fecd 	bl	8006f1c <HAL_GetTick>
 800d182:	4602      	mov	r2, r0
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	f241 3288 	movw	r2, #5000	; 0x1388
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d901      	bls.n	800d194 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d190:	2303      	movs	r3, #3
 800d192:	e0be      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d194:	4b1c      	ldr	r3, [pc, #112]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	00db      	lsls	r3, r3, #3
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d1eb      	bne.n	800d17e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 0302 	and.w	r3, r3, #2
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d010      	beq.n	800d1d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	68da      	ldr	r2, [r3, #12]
 800d1b6:	4b14      	ldr	r3, [pc, #80]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d1b8:	699b      	ldr	r3, [r3, #24]
 800d1ba:	f003 030f 	and.w	r3, r3, #15
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d208      	bcs.n	800d1d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d1c2:	4b11      	ldr	r3, [pc, #68]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d1c4:	699b      	ldr	r3, [r3, #24]
 800d1c6:	f023 020f 	bic.w	r2, r3, #15
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	490e      	ldr	r1, [pc, #56]	; (800d208 <HAL_RCC_ClockConfig+0x244>)
 800d1d0:	4313      	orrs	r3, r2
 800d1d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d1d4:	4b0b      	ldr	r3, [pc, #44]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f003 030f 	and.w	r3, r3, #15
 800d1dc:	683a      	ldr	r2, [r7, #0]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d214      	bcs.n	800d20c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d1e2:	4b08      	ldr	r3, [pc, #32]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f023 020f 	bic.w	r2, r3, #15
 800d1ea:	4906      	ldr	r1, [pc, #24]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d1f2:	4b04      	ldr	r3, [pc, #16]	; (800d204 <HAL_RCC_ClockConfig+0x240>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 030f 	and.w	r3, r3, #15
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d005      	beq.n	800d20c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e086      	b.n	800d312 <HAL_RCC_ClockConfig+0x34e>
 800d204:	52002000 	.word	0x52002000
 800d208:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 0304 	and.w	r3, r3, #4
 800d214:	2b00      	cmp	r3, #0
 800d216:	d010      	beq.n	800d23a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	691a      	ldr	r2, [r3, #16]
 800d21c:	4b3f      	ldr	r3, [pc, #252]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d21e:	699b      	ldr	r3, [r3, #24]
 800d220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d224:	429a      	cmp	r2, r3
 800d226:	d208      	bcs.n	800d23a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d228:	4b3c      	ldr	r3, [pc, #240]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	4939      	ldr	r1, [pc, #228]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d236:	4313      	orrs	r3, r2
 800d238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f003 0308 	and.w	r3, r3, #8
 800d242:	2b00      	cmp	r3, #0
 800d244:	d010      	beq.n	800d268 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	695a      	ldr	r2, [r3, #20]
 800d24a:	4b34      	ldr	r3, [pc, #208]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d24c:	69db      	ldr	r3, [r3, #28]
 800d24e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d252:	429a      	cmp	r2, r3
 800d254:	d208      	bcs.n	800d268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d256:	4b31      	ldr	r3, [pc, #196]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	695b      	ldr	r3, [r3, #20]
 800d262:	492e      	ldr	r1, [pc, #184]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d264:	4313      	orrs	r3, r2
 800d266:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b00      	cmp	r3, #0
 800d272:	d010      	beq.n	800d296 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	699a      	ldr	r2, [r3, #24]
 800d278:	4b28      	ldr	r3, [pc, #160]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d280:	429a      	cmp	r2, r3
 800d282:	d208      	bcs.n	800d296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d284:	4b25      	ldr	r3, [pc, #148]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d286:	69db      	ldr	r3, [r3, #28]
 800d288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	699b      	ldr	r3, [r3, #24]
 800d290:	4922      	ldr	r1, [pc, #136]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d292:	4313      	orrs	r3, r2
 800d294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f003 0320 	and.w	r3, r3, #32
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d010      	beq.n	800d2c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	69da      	ldr	r2, [r3, #28]
 800d2a6:	4b1d      	ldr	r3, [pc, #116]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d2a8:	6a1b      	ldr	r3, [r3, #32]
 800d2aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	d208      	bcs.n	800d2c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d2b2:	4b1a      	ldr	r3, [pc, #104]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d2b4:	6a1b      	ldr	r3, [r3, #32]
 800d2b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	69db      	ldr	r3, [r3, #28]
 800d2be:	4917      	ldr	r1, [pc, #92]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d2c4:	f000 f834 	bl	800d330 <HAL_RCC_GetSysClockFreq>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	4b14      	ldr	r3, [pc, #80]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	0a1b      	lsrs	r3, r3, #8
 800d2d0:	f003 030f 	and.w	r3, r3, #15
 800d2d4:	4912      	ldr	r1, [pc, #72]	; (800d320 <HAL_RCC_ClockConfig+0x35c>)
 800d2d6:	5ccb      	ldrb	r3, [r1, r3]
 800d2d8:	f003 031f 	and.w	r3, r3, #31
 800d2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d2e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d2e2:	4b0e      	ldr	r3, [pc, #56]	; (800d31c <HAL_RCC_ClockConfig+0x358>)
 800d2e4:	699b      	ldr	r3, [r3, #24]
 800d2e6:	f003 030f 	and.w	r3, r3, #15
 800d2ea:	4a0d      	ldr	r2, [pc, #52]	; (800d320 <HAL_RCC_ClockConfig+0x35c>)
 800d2ec:	5cd3      	ldrb	r3, [r2, r3]
 800d2ee:	f003 031f 	and.w	r3, r3, #31
 800d2f2:	693a      	ldr	r2, [r7, #16]
 800d2f4:	fa22 f303 	lsr.w	r3, r2, r3
 800d2f8:	4a0a      	ldr	r2, [pc, #40]	; (800d324 <HAL_RCC_ClockConfig+0x360>)
 800d2fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d2fc:	4a0a      	ldr	r2, [pc, #40]	; (800d328 <HAL_RCC_ClockConfig+0x364>)
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d302:	4b0a      	ldr	r3, [pc, #40]	; (800d32c <HAL_RCC_ClockConfig+0x368>)
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	4618      	mov	r0, r3
 800d308:	f7f9 fdbe 	bl	8006e88 <HAL_InitTick>
 800d30c:	4603      	mov	r3, r0
 800d30e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d310:	7bfb      	ldrb	r3, [r7, #15]
}
 800d312:	4618      	mov	r0, r3
 800d314:	3718      	adds	r7, #24
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
 800d31a:	bf00      	nop
 800d31c:	58024400 	.word	0x58024400
 800d320:	08017130 	.word	0x08017130
 800d324:	24000074 	.word	0x24000074
 800d328:	24000070 	.word	0x24000070
 800d32c:	24000078 	.word	0x24000078

0800d330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d330:	b480      	push	{r7}
 800d332:	b089      	sub	sp, #36	; 0x24
 800d334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d336:	4bb3      	ldr	r3, [pc, #716]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d33e:	2b18      	cmp	r3, #24
 800d340:	f200 8155 	bhi.w	800d5ee <HAL_RCC_GetSysClockFreq+0x2be>
 800d344:	a201      	add	r2, pc, #4	; (adr r2, 800d34c <HAL_RCC_GetSysClockFreq+0x1c>)
 800d346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34a:	bf00      	nop
 800d34c:	0800d3b1 	.word	0x0800d3b1
 800d350:	0800d5ef 	.word	0x0800d5ef
 800d354:	0800d5ef 	.word	0x0800d5ef
 800d358:	0800d5ef 	.word	0x0800d5ef
 800d35c:	0800d5ef 	.word	0x0800d5ef
 800d360:	0800d5ef 	.word	0x0800d5ef
 800d364:	0800d5ef 	.word	0x0800d5ef
 800d368:	0800d5ef 	.word	0x0800d5ef
 800d36c:	0800d3d7 	.word	0x0800d3d7
 800d370:	0800d5ef 	.word	0x0800d5ef
 800d374:	0800d5ef 	.word	0x0800d5ef
 800d378:	0800d5ef 	.word	0x0800d5ef
 800d37c:	0800d5ef 	.word	0x0800d5ef
 800d380:	0800d5ef 	.word	0x0800d5ef
 800d384:	0800d5ef 	.word	0x0800d5ef
 800d388:	0800d5ef 	.word	0x0800d5ef
 800d38c:	0800d3dd 	.word	0x0800d3dd
 800d390:	0800d5ef 	.word	0x0800d5ef
 800d394:	0800d5ef 	.word	0x0800d5ef
 800d398:	0800d5ef 	.word	0x0800d5ef
 800d39c:	0800d5ef 	.word	0x0800d5ef
 800d3a0:	0800d5ef 	.word	0x0800d5ef
 800d3a4:	0800d5ef 	.word	0x0800d5ef
 800d3a8:	0800d5ef 	.word	0x0800d5ef
 800d3ac:	0800d3e3 	.word	0x0800d3e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3b0:	4b94      	ldr	r3, [pc, #592]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f003 0320 	and.w	r3, r3, #32
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d009      	beq.n	800d3d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3bc:	4b91      	ldr	r3, [pc, #580]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	08db      	lsrs	r3, r3, #3
 800d3c2:	f003 0303 	and.w	r3, r3, #3
 800d3c6:	4a90      	ldr	r2, [pc, #576]	; (800d608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d3c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d3cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d3ce:	e111      	b.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d3d0:	4b8d      	ldr	r3, [pc, #564]	; (800d608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d3d2:	61bb      	str	r3, [r7, #24]
      break;
 800d3d4:	e10e      	b.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d3d6:	4b8d      	ldr	r3, [pc, #564]	; (800d60c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d3d8:	61bb      	str	r3, [r7, #24]
      break;
 800d3da:	e10b      	b.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d3dc:	4b8c      	ldr	r3, [pc, #560]	; (800d610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d3de:	61bb      	str	r3, [r7, #24]
      break;
 800d3e0:	e108      	b.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3e2:	4b88      	ldr	r3, [pc, #544]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d3ec:	4b85      	ldr	r3, [pc, #532]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3f0:	091b      	lsrs	r3, r3, #4
 800d3f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d3f8:	4b82      	ldr	r3, [pc, #520]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d402:	4b80      	ldr	r3, [pc, #512]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d406:	08db      	lsrs	r3, r3, #3
 800d408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	fb02 f303 	mul.w	r3, r2, r3
 800d412:	ee07 3a90 	vmov	s15, r3
 800d416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2b00      	cmp	r3, #0
 800d422:	f000 80e1 	beq.w	800d5e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	f000 8083 	beq.w	800d534 <HAL_RCC_GetSysClockFreq+0x204>
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	2b02      	cmp	r3, #2
 800d432:	f200 80a1 	bhi.w	800d578 <HAL_RCC_GetSysClockFreq+0x248>
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d003      	beq.n	800d444 <HAL_RCC_GetSysClockFreq+0x114>
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d056      	beq.n	800d4f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800d442:	e099      	b.n	800d578 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d444:	4b6f      	ldr	r3, [pc, #444]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f003 0320 	and.w	r3, r3, #32
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d02d      	beq.n	800d4ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d450:	4b6c      	ldr	r3, [pc, #432]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	08db      	lsrs	r3, r3, #3
 800d456:	f003 0303 	and.w	r3, r3, #3
 800d45a:	4a6b      	ldr	r2, [pc, #428]	; (800d608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d45c:	fa22 f303 	lsr.w	r3, r2, r3
 800d460:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	ee07 3a90 	vmov	s15, r3
 800d468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47a:	4b62      	ldr	r3, [pc, #392]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d48e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d49e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d4aa:	e087      	b.n	800d5bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d618 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d4ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4be:	4b51      	ldr	r3, [pc, #324]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d4c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c6:	ee07 3a90 	vmov	s15, r3
 800d4ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800d4d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d4d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d4ee:	e065      	b.n	800d5bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	ee07 3a90 	vmov	s15, r3
 800d4f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d61c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d502:	4b40      	ldr	r3, [pc, #256]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d512:	ed97 6a02 	vldr	s12, [r7, #8]
 800d516:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d52e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d532:	e043      	b.n	800d5bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d53e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d620 <HAL_RCC_GetSysClockFreq+0x2f0>
 800d542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d546:	4b2f      	ldr	r3, [pc, #188]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d54e:	ee07 3a90 	vmov	s15, r3
 800d552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d556:	ed97 6a02 	vldr	s12, [r7, #8]
 800d55a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d576:	e021      	b.n	800d5bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	ee07 3a90 	vmov	s15, r3
 800d57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d582:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d61c <HAL_RCC_GetSysClockFreq+0x2ec>
 800d586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d58a:	4b1e      	ldr	r3, [pc, #120]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d592:	ee07 3a90 	vmov	s15, r3
 800d596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d59a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d59e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d5ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d5bc:	4b11      	ldr	r3, [pc, #68]	; (800d604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c0:	0a5b      	lsrs	r3, r3, #9
 800d5c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	ee07 3a90 	vmov	s15, r3
 800d5d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d5d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5e0:	ee17 3a90 	vmov	r3, s15
 800d5e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d5e6:	e005      	b.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	61bb      	str	r3, [r7, #24]
      break;
 800d5ec:	e002      	b.n	800d5f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d5ee:	4b07      	ldr	r3, [pc, #28]	; (800d60c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d5f0:	61bb      	str	r3, [r7, #24]
      break;
 800d5f2:	bf00      	nop
  }

  return sysclockfreq;
 800d5f4:	69bb      	ldr	r3, [r7, #24]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3724      	adds	r7, #36	; 0x24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d600:	4770      	bx	lr
 800d602:	bf00      	nop
 800d604:	58024400 	.word	0x58024400
 800d608:	03d09000 	.word	0x03d09000
 800d60c:	003d0900 	.word	0x003d0900
 800d610:	017d7840 	.word	0x017d7840
 800d614:	46000000 	.word	0x46000000
 800d618:	4c742400 	.word	0x4c742400
 800d61c:	4a742400 	.word	0x4a742400
 800d620:	4bbebc20 	.word	0x4bbebc20

0800d624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d62a:	f7ff fe81 	bl	800d330 <HAL_RCC_GetSysClockFreq>
 800d62e:	4602      	mov	r2, r0
 800d630:	4b10      	ldr	r3, [pc, #64]	; (800d674 <HAL_RCC_GetHCLKFreq+0x50>)
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	0a1b      	lsrs	r3, r3, #8
 800d636:	f003 030f 	and.w	r3, r3, #15
 800d63a:	490f      	ldr	r1, [pc, #60]	; (800d678 <HAL_RCC_GetHCLKFreq+0x54>)
 800d63c:	5ccb      	ldrb	r3, [r1, r3]
 800d63e:	f003 031f 	and.w	r3, r3, #31
 800d642:	fa22 f303 	lsr.w	r3, r2, r3
 800d646:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d648:	4b0a      	ldr	r3, [pc, #40]	; (800d674 <HAL_RCC_GetHCLKFreq+0x50>)
 800d64a:	699b      	ldr	r3, [r3, #24]
 800d64c:	f003 030f 	and.w	r3, r3, #15
 800d650:	4a09      	ldr	r2, [pc, #36]	; (800d678 <HAL_RCC_GetHCLKFreq+0x54>)
 800d652:	5cd3      	ldrb	r3, [r2, r3]
 800d654:	f003 031f 	and.w	r3, r3, #31
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	fa22 f303 	lsr.w	r3, r2, r3
 800d65e:	4a07      	ldr	r2, [pc, #28]	; (800d67c <HAL_RCC_GetHCLKFreq+0x58>)
 800d660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d662:	4a07      	ldr	r2, [pc, #28]	; (800d680 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d668:	4b04      	ldr	r3, [pc, #16]	; (800d67c <HAL_RCC_GetHCLKFreq+0x58>)
 800d66a:	681b      	ldr	r3, [r3, #0]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	58024400 	.word	0x58024400
 800d678:	08017130 	.word	0x08017130
 800d67c:	24000074 	.word	0x24000074
 800d680:	24000070 	.word	0x24000070

0800d684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800d688:	f7ff ffcc 	bl	800d624 <HAL_RCC_GetHCLKFreq>
 800d68c:	4602      	mov	r2, r0
 800d68e:	4b06      	ldr	r3, [pc, #24]	; (800d6a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d690:	69db      	ldr	r3, [r3, #28]
 800d692:	091b      	lsrs	r3, r3, #4
 800d694:	f003 0307 	and.w	r3, r3, #7
 800d698:	4904      	ldr	r1, [pc, #16]	; (800d6ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800d69a:	5ccb      	ldrb	r3, [r1, r3]
 800d69c:	f003 031f 	and.w	r3, r3, #31
 800d6a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	58024400 	.word	0x58024400
 800d6ac:	08017130 	.word	0x08017130

0800d6b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800d6b4:	f7ff ffb6 	bl	800d624 <HAL_RCC_GetHCLKFreq>
 800d6b8:	4602      	mov	r2, r0
 800d6ba:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d6bc:	69db      	ldr	r3, [r3, #28]
 800d6be:	0a1b      	lsrs	r3, r3, #8
 800d6c0:	f003 0307 	and.w	r3, r3, #7
 800d6c4:	4904      	ldr	r1, [pc, #16]	; (800d6d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800d6c6:	5ccb      	ldrb	r3, [r1, r3]
 800d6c8:	f003 031f 	and.w	r3, r3, #31
 800d6cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800d6d0:	4618      	mov	r0, r3
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	58024400 	.word	0x58024400
 800d6d8:	08017130 	.word	0x08017130

0800d6dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d6dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6e0:	b0ca      	sub	sp, #296	; 0x128
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d700:	2500      	movs	r5, #0
 800d702:	ea54 0305 	orrs.w	r3, r4, r5
 800d706:	d049      	beq.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d70c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d70e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d712:	d02f      	beq.n	800d774 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d718:	d828      	bhi.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d71a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d71e:	d01a      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d720:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d724:	d822      	bhi.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d726:	2b00      	cmp	r3, #0
 800d728:	d003      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d72a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d72e:	d007      	beq.n	800d740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d730:	e01c      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d732:	4bb8      	ldr	r3, [pc, #736]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d736:	4ab7      	ldr	r2, [pc, #732]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d73c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d73e:	e01a      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d744:	3308      	adds	r3, #8
 800d746:	2102      	movs	r1, #2
 800d748:	4618      	mov	r0, r3
 800d74a:	f002 fb61 	bl	800fe10 <RCCEx_PLL2_Config>
 800d74e:	4603      	mov	r3, r0
 800d750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d754:	e00f      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d75a:	3328      	adds	r3, #40	; 0x28
 800d75c:	2102      	movs	r1, #2
 800d75e:	4618      	mov	r0, r3
 800d760:	f002 fc08 	bl	800ff74 <RCCEx_PLL3_Config>
 800d764:	4603      	mov	r3, r0
 800d766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d76a:	e004      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d772:	e000      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10a      	bne.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d77e:	4ba5      	ldr	r3, [pc, #660]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d782:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d78a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d78c:	4aa1      	ldr	r2, [pc, #644]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d78e:	430b      	orrs	r3, r1
 800d790:	6513      	str	r3, [r2, #80]	; 0x50
 800d792:	e003      	b.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d7a8:	f04f 0900 	mov.w	r9, #0
 800d7ac:	ea58 0309 	orrs.w	r3, r8, r9
 800d7b0:	d047      	beq.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7b8:	2b04      	cmp	r3, #4
 800d7ba:	d82a      	bhi.n	800d812 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d7bc:	a201      	add	r2, pc, #4	; (adr r2, 800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c2:	bf00      	nop
 800d7c4:	0800d7d9 	.word	0x0800d7d9
 800d7c8:	0800d7e7 	.word	0x0800d7e7
 800d7cc:	0800d7fd 	.word	0x0800d7fd
 800d7d0:	0800d81b 	.word	0x0800d81b
 800d7d4:	0800d81b 	.word	0x0800d81b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7d8:	4b8e      	ldr	r3, [pc, #568]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7dc:	4a8d      	ldr	r2, [pc, #564]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d7de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d7e4:	e01a      	b.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d7e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d7ea:	3308      	adds	r3, #8
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f002 fb0e 	bl	800fe10 <RCCEx_PLL2_Config>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d7fa:	e00f      	b.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d800:	3328      	adds	r3, #40	; 0x28
 800d802:	2100      	movs	r1, #0
 800d804:	4618      	mov	r0, r3
 800d806:	f002 fbb5 	bl	800ff74 <RCCEx_PLL3_Config>
 800d80a:	4603      	mov	r3, r0
 800d80c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d810:	e004      	b.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d812:	2301      	movs	r3, #1
 800d814:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d818:	e000      	b.n	800d81c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d81a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d81c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d820:	2b00      	cmp	r3, #0
 800d822:	d10a      	bne.n	800d83a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d824:	4b7b      	ldr	r3, [pc, #492]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d828:	f023 0107 	bic.w	r1, r3, #7
 800d82c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d832:	4a78      	ldr	r2, [pc, #480]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d834:	430b      	orrs	r3, r1
 800d836:	6513      	str	r3, [r2, #80]	; 0x50
 800d838:	e003      	b.n	800d842 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d83a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d83e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d84e:	f04f 0b00 	mov.w	fp, #0
 800d852:	ea5a 030b 	orrs.w	r3, sl, fp
 800d856:	d04c      	beq.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d85c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d85e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d862:	d030      	beq.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d868:	d829      	bhi.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d86a:	2bc0      	cmp	r3, #192	; 0xc0
 800d86c:	d02d      	beq.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d86e:	2bc0      	cmp	r3, #192	; 0xc0
 800d870:	d825      	bhi.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d872:	2b80      	cmp	r3, #128	; 0x80
 800d874:	d018      	beq.n	800d8a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d876:	2b80      	cmp	r3, #128	; 0x80
 800d878:	d821      	bhi.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d002      	beq.n	800d884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d87e:	2b40      	cmp	r3, #64	; 0x40
 800d880:	d007      	beq.n	800d892 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d882:	e01c      	b.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d884:	4b63      	ldr	r3, [pc, #396]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	4a62      	ldr	r2, [pc, #392]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d88a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d88e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d890:	e01c      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d896:	3308      	adds	r3, #8
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f002 fab8 	bl	800fe10 <RCCEx_PLL2_Config>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d8a6:	e011      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8ac:	3328      	adds	r3, #40	; 0x28
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f002 fb5f 	bl	800ff74 <RCCEx_PLL3_Config>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d8bc:	e006      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d8c4:	e002      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d8c6:	bf00      	nop
 800d8c8:	e000      	b.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d8ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10a      	bne.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d8d4:	4b4f      	ldr	r3, [pc, #316]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800d8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8e2:	4a4c      	ldr	r2, [pc, #304]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d8e4:	430b      	orrs	r3, r1
 800d8e6:	6513      	str	r3, [r2, #80]	; 0x50
 800d8e8:	e003      	b.n	800d8f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d8ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d8f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d8fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d902:	2300      	movs	r3, #0
 800d904:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800d908:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800d90c:	460b      	mov	r3, r1
 800d90e:	4313      	orrs	r3, r2
 800d910:	d053      	beq.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d916:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d91a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d91e:	d035      	beq.n	800d98c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d920:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d924:	d82e      	bhi.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d926:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d92a:	d031      	beq.n	800d990 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d92c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d930:	d828      	bhi.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d932:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d936:	d01a      	beq.n	800d96e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d93c:	d822      	bhi.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d003      	beq.n	800d94a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d942:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d946:	d007      	beq.n	800d958 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d948:	e01c      	b.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d94a:	4b32      	ldr	r3, [pc, #200]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d94e:	4a31      	ldr	r2, [pc, #196]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d954:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d956:	e01c      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d95c:	3308      	adds	r3, #8
 800d95e:	2100      	movs	r1, #0
 800d960:	4618      	mov	r0, r3
 800d962:	f002 fa55 	bl	800fe10 <RCCEx_PLL2_Config>
 800d966:	4603      	mov	r3, r0
 800d968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d96c:	e011      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d972:	3328      	adds	r3, #40	; 0x28
 800d974:	2100      	movs	r1, #0
 800d976:	4618      	mov	r0, r3
 800d978:	f002 fafc 	bl	800ff74 <RCCEx_PLL3_Config>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d982:	e006      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800d98a:	e002      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d98c:	bf00      	nop
 800d98e:	e000      	b.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d990:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d992:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d996:	2b00      	cmp	r3, #0
 800d998:	d10b      	bne.n	800d9b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d99a:	4b1e      	ldr	r3, [pc, #120]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d99e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800d9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d9aa:	4a1a      	ldr	r2, [pc, #104]	; (800da14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d9ac:	430b      	orrs	r3, r1
 800d9ae:	6593      	str	r3, [r2, #88]	; 0x58
 800d9b0:	e003      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800d9b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d9ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d9c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d9d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4313      	orrs	r3, r2
 800d9d8:	d056      	beq.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d9da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d9de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d9e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9e6:	d038      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d9e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9ec:	d831      	bhi.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d9ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d9f2:	d034      	beq.n	800da5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d9f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d9f8:	d82b      	bhi.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d9fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d9fe:	d01d      	beq.n	800da3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800da00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800da04:	d825      	bhi.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da06:	2b00      	cmp	r3, #0
 800da08:	d006      	beq.n	800da18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800da0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800da0e:	d00a      	beq.n	800da26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800da10:	e01f      	b.n	800da52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800da12:	bf00      	nop
 800da14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da18:	4ba2      	ldr	r3, [pc, #648]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da1c:	4aa1      	ldr	r2, [pc, #644]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da24:	e01c      	b.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da2a:	3308      	adds	r3, #8
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f002 f9ee 	bl	800fe10 <RCCEx_PLL2_Config>
 800da34:	4603      	mov	r3, r0
 800da36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800da3a:	e011      	b.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800da3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da40:	3328      	adds	r3, #40	; 0x28
 800da42:	2100      	movs	r1, #0
 800da44:	4618      	mov	r0, r3
 800da46:	f002 fa95 	bl	800ff74 <RCCEx_PLL3_Config>
 800da4a:	4603      	mov	r3, r0
 800da4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800da50:	e006      	b.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800da52:	2301      	movs	r3, #1
 800da54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800da58:	e002      	b.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800da5a:	bf00      	nop
 800da5c:	e000      	b.n	800da60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800da5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10b      	bne.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800da68:	4b8e      	ldr	r3, [pc, #568]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da6c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800da70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800da78:	4a8a      	ldr	r2, [pc, #552]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800da7a:	430b      	orrs	r3, r1
 800da7c:	6593      	str	r3, [r2, #88]	; 0x58
 800da7e:	e003      	b.n	800da88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800da84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800da88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800da94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800da98:	2300      	movs	r3, #0
 800da9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800da9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800daa2:	460b      	mov	r3, r1
 800daa4:	4313      	orrs	r3, r2
 800daa6:	d03a      	beq.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800daa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800daac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800daae:	2b30      	cmp	r3, #48	; 0x30
 800dab0:	d01f      	beq.n	800daf2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800dab2:	2b30      	cmp	r3, #48	; 0x30
 800dab4:	d819      	bhi.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dab6:	2b20      	cmp	r3, #32
 800dab8:	d00c      	beq.n	800dad4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800daba:	2b20      	cmp	r3, #32
 800dabc:	d815      	bhi.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d019      	beq.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800dac2:	2b10      	cmp	r3, #16
 800dac4:	d111      	bne.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dac6:	4b77      	ldr	r3, [pc, #476]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daca:	4a76      	ldr	r2, [pc, #472]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dacc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dad0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dad2:	e011      	b.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dad8:	3308      	adds	r3, #8
 800dada:	2102      	movs	r1, #2
 800dadc:	4618      	mov	r0, r3
 800dade:	f002 f997 	bl	800fe10 <RCCEx_PLL2_Config>
 800dae2:	4603      	mov	r3, r0
 800dae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800dae8:	e006      	b.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800daf0:	e002      	b.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800daf2:	bf00      	nop
 800daf4:	e000      	b.n	800daf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800daf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800daf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d10a      	bne.n	800db16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800db00:	4b68      	ldr	r3, [pc, #416]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db04:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800db08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db0e:	4a65      	ldr	r2, [pc, #404]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db10:	430b      	orrs	r3, r1
 800db12:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db14:	e003      	b.n	800db1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800db1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800db1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db26:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800db2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800db2e:	2300      	movs	r3, #0
 800db30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800db34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800db38:	460b      	mov	r3, r1
 800db3a:	4313      	orrs	r3, r2
 800db3c:	d051      	beq.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800db3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db48:	d035      	beq.n	800dbb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800db4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800db4e:	d82e      	bhi.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800db50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db54:	d031      	beq.n	800dbba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800db56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800db5a:	d828      	bhi.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800db5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db60:	d01a      	beq.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800db62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db66:	d822      	bhi.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d003      	beq.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800db6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db70:	d007      	beq.n	800db82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800db72:	e01c      	b.n	800dbae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800db74:	4b4b      	ldr	r3, [pc, #300]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	4a4a      	ldr	r2, [pc, #296]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800db7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800db7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800db80:	e01c      	b.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800db82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db86:	3308      	adds	r3, #8
 800db88:	2100      	movs	r1, #0
 800db8a:	4618      	mov	r0, r3
 800db8c:	f002 f940 	bl	800fe10 <RCCEx_PLL2_Config>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800db96:	e011      	b.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800db98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db9c:	3328      	adds	r3, #40	; 0x28
 800db9e:	2100      	movs	r1, #0
 800dba0:	4618      	mov	r0, r3
 800dba2:	f002 f9e7 	bl	800ff74 <RCCEx_PLL3_Config>
 800dba6:	4603      	mov	r3, r0
 800dba8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800dbac:	e006      	b.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbb4:	e002      	b.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dbb6:	bf00      	nop
 800dbb8:	e000      	b.n	800dbbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800dbba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d10a      	bne.n	800dbda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800dbc4:	4b37      	ldr	r3, [pc, #220]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dbc8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800dbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dbd2:	4a34      	ldr	r2, [pc, #208]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dbd4:	430b      	orrs	r3, r1
 800dbd6:	6513      	str	r3, [r2, #80]	; 0x50
 800dbd8:	e003      	b.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dbde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800dbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800dbee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800dbf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	d056      	beq.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800dc02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc0c:	d033      	beq.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800dc0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dc12:	d82c      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc18:	d02f      	beq.n	800dc7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800dc1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800dc1e:	d826      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc24:	d02b      	beq.n	800dc7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800dc26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800dc2a:	d820      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc30:	d012      	beq.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800dc32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc36:	d81a      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d022      	beq.n	800dc82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800dc3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc40:	d115      	bne.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc46:	3308      	adds	r3, #8
 800dc48:	2101      	movs	r1, #1
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f002 f8e0 	bl	800fe10 <RCCEx_PLL2_Config>
 800dc50:	4603      	mov	r3, r0
 800dc52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dc56:	e015      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc5c:	3328      	adds	r3, #40	; 0x28
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4618      	mov	r0, r3
 800dc62:	f002 f987 	bl	800ff74 <RCCEx_PLL3_Config>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800dc6c:	e00a      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dc74:	e006      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dc76:	bf00      	nop
 800dc78:	e004      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dc7a:	bf00      	nop
 800dc7c:	e002      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dc7e:	bf00      	nop
 800dc80:	e000      	b.n	800dc84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800dc82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d10d      	bne.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800dc8c:	4b05      	ldr	r3, [pc, #20]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800dc94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc9a:	4a02      	ldr	r2, [pc, #8]	; (800dca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dc9c:	430b      	orrs	r3, r1
 800dc9e:	6513      	str	r3, [r2, #80]	; 0x50
 800dca0:	e006      	b.n	800dcb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800dca2:	bf00      	nop
 800dca4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800dcb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800dcbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dcc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800dcca:	460b      	mov	r3, r1
 800dccc:	4313      	orrs	r3, r2
 800dcce:	d055      	beq.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800dcd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dcd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dcdc:	d033      	beq.n	800dd46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800dcde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dce2:	d82c      	bhi.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dce8:	d02f      	beq.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800dcea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcee:	d826      	bhi.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dcf0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dcf4:	d02b      	beq.n	800dd4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800dcf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dcfa:	d820      	bhi.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dcfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd00:	d012      	beq.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800dd02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd06:	d81a      	bhi.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d022      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800dd0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd10:	d115      	bne.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dd12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd16:	3308      	adds	r3, #8
 800dd18:	2101      	movs	r1, #1
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f002 f878 	bl	800fe10 <RCCEx_PLL2_Config>
 800dd20:	4603      	mov	r3, r0
 800dd22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd26:	e015      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd2c:	3328      	adds	r3, #40	; 0x28
 800dd2e:	2101      	movs	r1, #1
 800dd30:	4618      	mov	r0, r3
 800dd32:	f002 f91f 	bl	800ff74 <RCCEx_PLL3_Config>
 800dd36:	4603      	mov	r3, r0
 800dd38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800dd3c:	e00a      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd44:	e006      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd46:	bf00      	nop
 800dd48:	e004      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd4a:	bf00      	nop
 800dd4c:	e002      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd4e:	bf00      	nop
 800dd50:	e000      	b.n	800dd54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800dd52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d10b      	bne.n	800dd74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800dd5c:	4ba3      	ldr	r3, [pc, #652]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd60:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800dd64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dd6c:	4a9f      	ldr	r2, [pc, #636]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dd6e:	430b      	orrs	r3, r1
 800dd70:	6593      	str	r3, [r2, #88]	; 0x58
 800dd72:	e003      	b.n	800dd7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dd7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd84:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800dd88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800dd92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dd96:	460b      	mov	r3, r1
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	d037      	beq.n	800de0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800dd9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dda0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dda6:	d00e      	beq.n	800ddc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800dda8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ddac:	d816      	bhi.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d018      	beq.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800ddb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ddb6:	d111      	bne.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddb8:	4b8c      	ldr	r3, [pc, #560]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbc:	4a8b      	ldr	r2, [pc, #556]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ddc4:	e00f      	b.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ddc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddca:	3308      	adds	r3, #8
 800ddcc:	2101      	movs	r1, #1
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f002 f81e 	bl	800fe10 <RCCEx_PLL2_Config>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ddda:	e004      	b.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dddc:	2301      	movs	r3, #1
 800ddde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dde2:	e000      	b.n	800dde6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800dde4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dde6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d10a      	bne.n	800de04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ddee:	4b7f      	ldr	r3, [pc, #508]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddf2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ddf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddfc:	4a7b      	ldr	r2, [pc, #492]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800ddfe:	430b      	orrs	r3, r1
 800de00:	6513      	str	r3, [r2, #80]	; 0x50
 800de02:	e003      	b.n	800de0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800de0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800de18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800de1c:	2300      	movs	r3, #0
 800de1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800de22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800de26:	460b      	mov	r3, r1
 800de28:	4313      	orrs	r3, r2
 800de2a:	d039      	beq.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800de2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de32:	2b03      	cmp	r3, #3
 800de34:	d81c      	bhi.n	800de70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800de36:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800de38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3c:	0800de79 	.word	0x0800de79
 800de40:	0800de4d 	.word	0x0800de4d
 800de44:	0800de5b 	.word	0x0800de5b
 800de48:	0800de79 	.word	0x0800de79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800de4c:	4b67      	ldr	r3, [pc, #412]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de50:	4a66      	ldr	r2, [pc, #408]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800de56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800de58:	e00f      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800de5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de5e:	3308      	adds	r3, #8
 800de60:	2102      	movs	r1, #2
 800de62:	4618      	mov	r0, r3
 800de64:	f001 ffd4 	bl	800fe10 <RCCEx_PLL2_Config>
 800de68:	4603      	mov	r3, r0
 800de6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800de6e:	e004      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800de70:	2301      	movs	r3, #1
 800de72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800de76:	e000      	b.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800de78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d10a      	bne.n	800de98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800de82:	4b5a      	ldr	r3, [pc, #360]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de86:	f023 0103 	bic.w	r1, r3, #3
 800de8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de90:	4a56      	ldr	r2, [pc, #344]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800de92:	430b      	orrs	r3, r1
 800de94:	64d3      	str	r3, [r2, #76]	; 0x4c
 800de96:	e003      	b.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800deac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800deb0:	2300      	movs	r3, #0
 800deb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800deb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800deba:	460b      	mov	r3, r1
 800debc:	4313      	orrs	r3, r2
 800debe:	f000 809f 	beq.w	800e000 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dec2:	4b4b      	ldr	r3, [pc, #300]	; (800dff0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	4a4a      	ldr	r2, [pc, #296]	; (800dff0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800dec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800decc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dece:	f7f9 f825 	bl	8006f1c <HAL_GetTick>
 800ded2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ded6:	e00b      	b.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ded8:	f7f9 f820 	bl	8006f1c <HAL_GetTick>
 800dedc:	4602      	mov	r2, r0
 800dede:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800dee2:	1ad3      	subs	r3, r2, r3
 800dee4:	2b64      	cmp	r3, #100	; 0x64
 800dee6:	d903      	bls.n	800def0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800dee8:	2303      	movs	r3, #3
 800deea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800deee:	e005      	b.n	800defc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800def0:	4b3f      	ldr	r3, [pc, #252]	; (800dff0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800def8:	2b00      	cmp	r3, #0
 800defa:	d0ed      	beq.n	800ded8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800defc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df00:	2b00      	cmp	r3, #0
 800df02:	d179      	bne.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800df04:	4b39      	ldr	r3, [pc, #228]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800df08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df10:	4053      	eors	r3, r2
 800df12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df16:	2b00      	cmp	r3, #0
 800df18:	d015      	beq.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800df1a:	4b34      	ldr	r3, [pc, #208]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800df26:	4b31      	ldr	r3, [pc, #196]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df2a:	4a30      	ldr	r2, [pc, #192]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800df30:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800df32:	4b2e      	ldr	r3, [pc, #184]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df36:	4a2d      	ldr	r2, [pc, #180]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800df3c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800df3e:	4a2b      	ldr	r2, [pc, #172]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800df44:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800df46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df52:	d118      	bne.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800df54:	f7f8 ffe2 	bl	8006f1c <HAL_GetTick>
 800df58:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df5c:	e00d      	b.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800df5e:	f7f8 ffdd 	bl	8006f1c <HAL_GetTick>
 800df62:	4602      	mov	r2, r0
 800df64:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800df68:	1ad2      	subs	r2, r2, r3
 800df6a:	f241 3388 	movw	r3, #5000	; 0x1388
 800df6e:	429a      	cmp	r2, r3
 800df70:	d903      	bls.n	800df7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800df72:	2303      	movs	r3, #3
 800df74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800df78:	e005      	b.n	800df86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800df7a:	4b1c      	ldr	r3, [pc, #112]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800df7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df7e:	f003 0302 	and.w	r3, r3, #2
 800df82:	2b00      	cmp	r3, #0
 800df84:	d0eb      	beq.n	800df5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800df86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d129      	bne.n	800dfe2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800df8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800df96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df9e:	d10e      	bne.n	800dfbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800dfa0:	4b12      	ldr	r3, [pc, #72]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfa2:	691b      	ldr	r3, [r3, #16]
 800dfa4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800dfa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dfb0:	091a      	lsrs	r2, r3, #4
 800dfb2:	4b10      	ldr	r3, [pc, #64]	; (800dff4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	4a0d      	ldr	r2, [pc, #52]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfb8:	430b      	orrs	r3, r1
 800dfba:	6113      	str	r3, [r2, #16]
 800dfbc:	e005      	b.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800dfbe:	4b0b      	ldr	r3, [pc, #44]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfc0:	691b      	ldr	r3, [r3, #16]
 800dfc2:	4a0a      	ldr	r2, [pc, #40]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dfc8:	6113      	str	r3, [r2, #16]
 800dfca:	4b08      	ldr	r3, [pc, #32]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfcc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800dfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800dfd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dfda:	4a04      	ldr	r2, [pc, #16]	; (800dfec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800dfdc:	430b      	orrs	r3, r1
 800dfde:	6713      	str	r3, [r2, #112]	; 0x70
 800dfe0:	e00e      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800dfe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800dfea:	e009      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800dfec:	58024400 	.word	0x58024400
 800dff0:	58024800 	.word	0x58024800
 800dff4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e008:	f002 0301 	and.w	r3, r2, #1
 800e00c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e010:	2300      	movs	r3, #0
 800e012:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e016:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e01a:	460b      	mov	r3, r1
 800e01c:	4313      	orrs	r3, r2
 800e01e:	f000 8089 	beq.w	800e134 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e022:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e026:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e028:	2b28      	cmp	r3, #40	; 0x28
 800e02a:	d86b      	bhi.n	800e104 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e02c:	a201      	add	r2, pc, #4	; (adr r2, 800e034 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e032:	bf00      	nop
 800e034:	0800e10d 	.word	0x0800e10d
 800e038:	0800e105 	.word	0x0800e105
 800e03c:	0800e105 	.word	0x0800e105
 800e040:	0800e105 	.word	0x0800e105
 800e044:	0800e105 	.word	0x0800e105
 800e048:	0800e105 	.word	0x0800e105
 800e04c:	0800e105 	.word	0x0800e105
 800e050:	0800e105 	.word	0x0800e105
 800e054:	0800e0d9 	.word	0x0800e0d9
 800e058:	0800e105 	.word	0x0800e105
 800e05c:	0800e105 	.word	0x0800e105
 800e060:	0800e105 	.word	0x0800e105
 800e064:	0800e105 	.word	0x0800e105
 800e068:	0800e105 	.word	0x0800e105
 800e06c:	0800e105 	.word	0x0800e105
 800e070:	0800e105 	.word	0x0800e105
 800e074:	0800e0ef 	.word	0x0800e0ef
 800e078:	0800e105 	.word	0x0800e105
 800e07c:	0800e105 	.word	0x0800e105
 800e080:	0800e105 	.word	0x0800e105
 800e084:	0800e105 	.word	0x0800e105
 800e088:	0800e105 	.word	0x0800e105
 800e08c:	0800e105 	.word	0x0800e105
 800e090:	0800e105 	.word	0x0800e105
 800e094:	0800e10d 	.word	0x0800e10d
 800e098:	0800e105 	.word	0x0800e105
 800e09c:	0800e105 	.word	0x0800e105
 800e0a0:	0800e105 	.word	0x0800e105
 800e0a4:	0800e105 	.word	0x0800e105
 800e0a8:	0800e105 	.word	0x0800e105
 800e0ac:	0800e105 	.word	0x0800e105
 800e0b0:	0800e105 	.word	0x0800e105
 800e0b4:	0800e10d 	.word	0x0800e10d
 800e0b8:	0800e105 	.word	0x0800e105
 800e0bc:	0800e105 	.word	0x0800e105
 800e0c0:	0800e105 	.word	0x0800e105
 800e0c4:	0800e105 	.word	0x0800e105
 800e0c8:	0800e105 	.word	0x0800e105
 800e0cc:	0800e105 	.word	0x0800e105
 800e0d0:	0800e105 	.word	0x0800e105
 800e0d4:	0800e10d 	.word	0x0800e10d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0dc:	3308      	adds	r3, #8
 800e0de:	2101      	movs	r1, #1
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f001 fe95 	bl	800fe10 <RCCEx_PLL2_Config>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e0ec:	e00f      	b.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0f2:	3328      	adds	r3, #40	; 0x28
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f001 ff3c 	bl	800ff74 <RCCEx_PLL3_Config>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e102:	e004      	b.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e104:	2301      	movs	r3, #1
 800e106:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e10a:	e000      	b.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e10c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e10e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e112:	2b00      	cmp	r3, #0
 800e114:	d10a      	bne.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e116:	4bbf      	ldr	r3, [pc, #764]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e11a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e11e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e124:	4abb      	ldr	r2, [pc, #748]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e126:	430b      	orrs	r3, r1
 800e128:	6553      	str	r3, [r2, #84]	; 0x54
 800e12a:	e003      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e12c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e130:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	f002 0302 	and.w	r3, r2, #2
 800e140:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e144:	2300      	movs	r3, #0
 800e146:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e14a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e14e:	460b      	mov	r3, r1
 800e150:	4313      	orrs	r3, r2
 800e152:	d041      	beq.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e15a:	2b05      	cmp	r3, #5
 800e15c:	d824      	bhi.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e15e:	a201      	add	r2, pc, #4	; (adr r2, 800e164 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e164:	0800e1b1 	.word	0x0800e1b1
 800e168:	0800e17d 	.word	0x0800e17d
 800e16c:	0800e193 	.word	0x0800e193
 800e170:	0800e1b1 	.word	0x0800e1b1
 800e174:	0800e1b1 	.word	0x0800e1b1
 800e178:	0800e1b1 	.word	0x0800e1b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e17c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e180:	3308      	adds	r3, #8
 800e182:	2101      	movs	r1, #1
 800e184:	4618      	mov	r0, r3
 800e186:	f001 fe43 	bl	800fe10 <RCCEx_PLL2_Config>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e190:	e00f      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e196:	3328      	adds	r3, #40	; 0x28
 800e198:	2101      	movs	r1, #1
 800e19a:	4618      	mov	r0, r3
 800e19c:	f001 feea 	bl	800ff74 <RCCEx_PLL3_Config>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e1a6:	e004      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1ae:	e000      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e1b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10a      	bne.n	800e1d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e1ba:	4b96      	ldr	r3, [pc, #600]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1be:	f023 0107 	bic.w	r1, r3, #7
 800e1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1c8:	4a92      	ldr	r2, [pc, #584]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e1ca:	430b      	orrs	r3, r1
 800e1cc:	6553      	str	r3, [r2, #84]	; 0x54
 800e1ce:	e003      	b.n	800e1d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	f002 0304 	and.w	r3, r2, #4
 800e1e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e1ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	d044      	beq.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e200:	2b05      	cmp	r3, #5
 800e202:	d825      	bhi.n	800e250 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e204:	a201      	add	r2, pc, #4	; (adr r2, 800e20c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e20a:	bf00      	nop
 800e20c:	0800e259 	.word	0x0800e259
 800e210:	0800e225 	.word	0x0800e225
 800e214:	0800e23b 	.word	0x0800e23b
 800e218:	0800e259 	.word	0x0800e259
 800e21c:	0800e259 	.word	0x0800e259
 800e220:	0800e259 	.word	0x0800e259
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e224:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e228:	3308      	adds	r3, #8
 800e22a:	2101      	movs	r1, #1
 800e22c:	4618      	mov	r0, r3
 800e22e:	f001 fdef 	bl	800fe10 <RCCEx_PLL2_Config>
 800e232:	4603      	mov	r3, r0
 800e234:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e238:	e00f      	b.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e23e:	3328      	adds	r3, #40	; 0x28
 800e240:	2101      	movs	r1, #1
 800e242:	4618      	mov	r0, r3
 800e244:	f001 fe96 	bl	800ff74 <RCCEx_PLL3_Config>
 800e248:	4603      	mov	r3, r0
 800e24a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e24e:	e004      	b.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e250:	2301      	movs	r3, #1
 800e252:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e256:	e000      	b.n	800e25a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e25a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10b      	bne.n	800e27a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e262:	4b6c      	ldr	r3, [pc, #432]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e266:	f023 0107 	bic.w	r1, r3, #7
 800e26a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e26e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e272:	4a68      	ldr	r2, [pc, #416]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e274:	430b      	orrs	r3, r1
 800e276:	6593      	str	r3, [r2, #88]	; 0x58
 800e278:	e003      	b.n	800e282 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e27a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e27e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28a:	f002 0320 	and.w	r3, r2, #32
 800e28e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e292:	2300      	movs	r3, #0
 800e294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e29c:	460b      	mov	r3, r1
 800e29e:	4313      	orrs	r3, r2
 800e2a0:	d055      	beq.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e2a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2ae:	d033      	beq.n	800e318 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e2b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e2b4:	d82c      	bhi.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e2b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2ba:	d02f      	beq.n	800e31c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e2bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2c0:	d826      	bhi.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e2c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e2c6:	d02b      	beq.n	800e320 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e2c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e2cc:	d820      	bhi.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e2ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2d2:	d012      	beq.n	800e2fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e2d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2d8:	d81a      	bhi.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d022      	beq.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e2de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2e2:	d115      	bne.n	800e310 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e2e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2e8:	3308      	adds	r3, #8
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f001 fd8f 	bl	800fe10 <RCCEx_PLL2_Config>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e2f8:	e015      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e2fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2fe:	3328      	adds	r3, #40	; 0x28
 800e300:	2102      	movs	r1, #2
 800e302:	4618      	mov	r0, r3
 800e304:	f001 fe36 	bl	800ff74 <RCCEx_PLL3_Config>
 800e308:	4603      	mov	r3, r0
 800e30a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e30e:	e00a      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e310:	2301      	movs	r3, #1
 800e312:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e316:	e006      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e318:	bf00      	nop
 800e31a:	e004      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e31c:	bf00      	nop
 800e31e:	e002      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e320:	bf00      	nop
 800e322:	e000      	b.n	800e326 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e324:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e326:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d10b      	bne.n	800e346 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e32e:	4b39      	ldr	r3, [pc, #228]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e332:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e33e:	4a35      	ldr	r2, [pc, #212]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e340:	430b      	orrs	r3, r1
 800e342:	6553      	str	r3, [r2, #84]	; 0x54
 800e344:	e003      	b.n	800e34e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e34a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e35a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e35e:	2300      	movs	r3, #0
 800e360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e364:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e368:	460b      	mov	r3, r1
 800e36a:	4313      	orrs	r3, r2
 800e36c:	d058      	beq.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e36e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e376:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e37a:	d033      	beq.n	800e3e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e37c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e380:	d82c      	bhi.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e386:	d02f      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e38c:	d826      	bhi.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e38e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e392:	d02b      	beq.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e394:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e398:	d820      	bhi.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e39a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e39e:	d012      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e3a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e3a4:	d81a      	bhi.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d022      	beq.n	800e3f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e3aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3ae:	d115      	bne.n	800e3dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f001 fd29 	bl	800fe10 <RCCEx_PLL2_Config>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e3c4:	e015      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e3c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3ca:	3328      	adds	r3, #40	; 0x28
 800e3cc:	2102      	movs	r1, #2
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f001 fdd0 	bl	800ff74 <RCCEx_PLL3_Config>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e3da:	e00a      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e3dc:	2301      	movs	r3, #1
 800e3de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e3e2:	e006      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e3e4:	bf00      	nop
 800e3e6:	e004      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e3e8:	bf00      	nop
 800e3ea:	e002      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e3ec:	bf00      	nop
 800e3ee:	e000      	b.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e3f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e3f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d10e      	bne.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e3fa:	4b06      	ldr	r3, [pc, #24]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e3fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e402:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e40a:	4a02      	ldr	r2, [pc, #8]	; (800e414 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e40c:	430b      	orrs	r3, r1
 800e40e:	6593      	str	r3, [r2, #88]	; 0x58
 800e410:	e006      	b.n	800e420 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e412:	bf00      	nop
 800e414:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e418:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e41c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e428:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e42c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e430:	2300      	movs	r3, #0
 800e432:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e436:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e43a:	460b      	mov	r3, r1
 800e43c:	4313      	orrs	r3, r2
 800e43e:	d055      	beq.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e448:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e44c:	d033      	beq.n	800e4b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e44e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e452:	d82c      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e458:	d02f      	beq.n	800e4ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e45a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e45e:	d826      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e460:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e464:	d02b      	beq.n	800e4be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e466:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e46a:	d820      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e46c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e470:	d012      	beq.n	800e498 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e472:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e476:	d81a      	bhi.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d022      	beq.n	800e4c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e47c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e480:	d115      	bne.n	800e4ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e482:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e486:	3308      	adds	r3, #8
 800e488:	2100      	movs	r1, #0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f001 fcc0 	bl	800fe10 <RCCEx_PLL2_Config>
 800e490:	4603      	mov	r3, r0
 800e492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e496:	e015      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e498:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e49c:	3328      	adds	r3, #40	; 0x28
 800e49e:	2102      	movs	r1, #2
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f001 fd67 	bl	800ff74 <RCCEx_PLL3_Config>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e4ac:	e00a      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e4ae:	2301      	movs	r3, #1
 800e4b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e4b4:	e006      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4b6:	bf00      	nop
 800e4b8:	e004      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4ba:	bf00      	nop
 800e4bc:	e002      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4be:	bf00      	nop
 800e4c0:	e000      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e4c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e4c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d10b      	bne.n	800e4e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e4cc:	4ba1      	ldr	r3, [pc, #644]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4d0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e4dc:	4a9d      	ldr	r2, [pc, #628]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e4de:	430b      	orrs	r3, r1
 800e4e0:	6593      	str	r3, [r2, #88]	; 0x58
 800e4e2:	e003      	b.n	800e4ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e4e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f4:	f002 0308 	and.w	r3, r2, #8
 800e4f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e502:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e506:	460b      	mov	r3, r1
 800e508:	4313      	orrs	r3, r2
 800e50a:	d01e      	beq.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e518:	d10c      	bne.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e51a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e51e:	3328      	adds	r3, #40	; 0x28
 800e520:	2102      	movs	r1, #2
 800e522:	4618      	mov	r0, r3
 800e524:	f001 fd26 	bl	800ff74 <RCCEx_PLL3_Config>
 800e528:	4603      	mov	r3, r0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d002      	beq.n	800e534 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e52e:	2301      	movs	r3, #1
 800e530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e534:	4b87      	ldr	r3, [pc, #540]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e538:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e540:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e544:	4a83      	ldr	r2, [pc, #524]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e546:	430b      	orrs	r3, r1
 800e548:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e552:	f002 0310 	and.w	r3, r2, #16
 800e556:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e55a:	2300      	movs	r3, #0
 800e55c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e560:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e564:	460b      	mov	r3, r1
 800e566:	4313      	orrs	r3, r2
 800e568:	d01e      	beq.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e56e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e576:	d10c      	bne.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e57c:	3328      	adds	r3, #40	; 0x28
 800e57e:	2102      	movs	r1, #2
 800e580:	4618      	mov	r0, r3
 800e582:	f001 fcf7 	bl	800ff74 <RCCEx_PLL3_Config>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800e58c:	2301      	movs	r3, #1
 800e58e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e592:	4b70      	ldr	r3, [pc, #448]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e596:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e59e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e5a2:	4a6c      	ldr	r2, [pc, #432]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e5a4:	430b      	orrs	r3, r1
 800e5a6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e5a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800e5b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e5be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800e5c2:	460b      	mov	r3, r1
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	d03e      	beq.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800e5c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e5d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5d4:	d022      	beq.n	800e61c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800e5d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e5da:	d81b      	bhi.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d003      	beq.n	800e5e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800e5e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5e4:	d00b      	beq.n	800e5fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800e5e6:	e015      	b.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e5e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f001 fc0d 	bl	800fe10 <RCCEx_PLL2_Config>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e5fc:	e00f      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e602:	3328      	adds	r3, #40	; 0x28
 800e604:	2102      	movs	r1, #2
 800e606:	4618      	mov	r0, r3
 800e608:	f001 fcb4 	bl	800ff74 <RCCEx_PLL3_Config>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800e612:	e004      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e61a:	e000      	b.n	800e61e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800e61c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e61e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10b      	bne.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e626:	4b4b      	ldr	r3, [pc, #300]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e62a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e62e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e636:	4a47      	ldr	r2, [pc, #284]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e638:	430b      	orrs	r3, r1
 800e63a:	6593      	str	r3, [r2, #88]	; 0x58
 800e63c:	e003      	b.n	800e646 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e63e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e642:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e652:	67bb      	str	r3, [r7, #120]	; 0x78
 800e654:	2300      	movs	r3, #0
 800e656:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e658:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800e65c:	460b      	mov	r3, r1
 800e65e:	4313      	orrs	r3, r2
 800e660:	d03b      	beq.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e66a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e66e:	d01f      	beq.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800e670:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e674:	d818      	bhi.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800e676:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e67a:	d003      	beq.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800e67c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e680:	d007      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800e682:	e011      	b.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e684:	4b33      	ldr	r3, [pc, #204]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e688:	4a32      	ldr	r2, [pc, #200]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e68a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e68e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e690:	e00f      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e696:	3328      	adds	r3, #40	; 0x28
 800e698:	2101      	movs	r1, #1
 800e69a:	4618      	mov	r0, r3
 800e69c:	f001 fc6a 	bl	800ff74 <RCCEx_PLL3_Config>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800e6a6:	e004      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6ae:	e000      	b.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800e6b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d10b      	bne.n	800e6d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e6ba:	4b26      	ldr	r3, [pc, #152]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ca:	4a22      	ldr	r2, [pc, #136]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e6cc:	430b      	orrs	r3, r1
 800e6ce:	6553      	str	r3, [r2, #84]	; 0x54
 800e6d0:	e003      	b.n	800e6da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e6da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e6e6:	673b      	str	r3, [r7, #112]	; 0x70
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	677b      	str	r3, [r7, #116]	; 0x74
 800e6ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e6f0:	460b      	mov	r3, r1
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	d034      	beq.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d003      	beq.n	800e708 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800e700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e704:	d007      	beq.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800e706:	e011      	b.n	800e72c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e708:	4b12      	ldr	r3, [pc, #72]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e70c:	4a11      	ldr	r2, [pc, #68]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e70e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e714:	e00e      	b.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e71a:	3308      	adds	r3, #8
 800e71c:	2102      	movs	r1, #2
 800e71e:	4618      	mov	r0, r3
 800e720:	f001 fb76 	bl	800fe10 <RCCEx_PLL2_Config>
 800e724:	4603      	mov	r3, r0
 800e726:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e72a:	e003      	b.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e732:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d10d      	bne.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e73c:	4b05      	ldr	r3, [pc, #20]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e74a:	4a02      	ldr	r2, [pc, #8]	; (800e754 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e74c:	430b      	orrs	r3, r1
 800e74e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e750:	e006      	b.n	800e760 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800e752:	bf00      	nop
 800e754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e75c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800e76c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e76e:	2300      	movs	r3, #0
 800e770:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e772:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e776:	460b      	mov	r3, r1
 800e778:	4313      	orrs	r3, r2
 800e77a:	d00c      	beq.n	800e796 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e780:	3328      	adds	r3, #40	; 0x28
 800e782:	2102      	movs	r1, #2
 800e784:	4618      	mov	r0, r3
 800e786:	f001 fbf5 	bl	800ff74 <RCCEx_PLL3_Config>
 800e78a:	4603      	mov	r3, r0
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800e790:	2301      	movs	r3, #1
 800e792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e7a2:	663b      	str	r3, [r7, #96]	; 0x60
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	667b      	str	r3, [r7, #100]	; 0x64
 800e7a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	4313      	orrs	r3, r2
 800e7b0:	d038      	beq.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e7b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e7ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7be:	d018      	beq.n	800e7f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800e7c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7c4:	d811      	bhi.n	800e7ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e7c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7ca:	d014      	beq.n	800e7f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800e7cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7d0:	d80b      	bhi.n	800e7ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d011      	beq.n	800e7fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800e7d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7da:	d106      	bne.n	800e7ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e7dc:	4bc3      	ldr	r3, [pc, #780]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7e0:	4ac2      	ldr	r2, [pc, #776]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e7e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e7e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e7e8:	e008      	b.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e7f0:	e004      	b.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e7f2:	bf00      	nop
 800e7f4:	e002      	b.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e7f6:	bf00      	nop
 800e7f8:	e000      	b.n	800e7fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800e7fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10b      	bne.n	800e81c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e804:	4bb9      	ldr	r3, [pc, #740]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e808:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e80c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e814:	4ab5      	ldr	r2, [pc, #724]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e816:	430b      	orrs	r3, r1
 800e818:	6553      	str	r3, [r2, #84]	; 0x54
 800e81a:	e003      	b.n	800e824 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e81c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e82c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e830:	65bb      	str	r3, [r7, #88]	; 0x58
 800e832:	2300      	movs	r3, #0
 800e834:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e836:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e83a:	460b      	mov	r3, r1
 800e83c:	4313      	orrs	r3, r2
 800e83e:	d009      	beq.n	800e854 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e840:	4baa      	ldr	r3, [pc, #680]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e844:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e84c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e84e:	4aa7      	ldr	r2, [pc, #668]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e850:	430b      	orrs	r3, r1
 800e852:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e860:	653b      	str	r3, [r7, #80]	; 0x50
 800e862:	2300      	movs	r3, #0
 800e864:	657b      	str	r3, [r7, #84]	; 0x54
 800e866:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e86a:	460b      	mov	r3, r1
 800e86c:	4313      	orrs	r3, r2
 800e86e:	d00a      	beq.n	800e886 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e870:	4b9e      	ldr	r3, [pc, #632]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e87c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e880:	4a9a      	ldr	r2, [pc, #616]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e882:	430b      	orrs	r3, r1
 800e884:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e88e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e892:	64bb      	str	r3, [r7, #72]	; 0x48
 800e894:	2300      	movs	r3, #0
 800e896:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e898:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e89c:	460b      	mov	r3, r1
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	d009      	beq.n	800e8b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e8a2:	4b92      	ldr	r3, [pc, #584]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e8aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b0:	4a8e      	ldr	r2, [pc, #568]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8b2:	430b      	orrs	r3, r1
 800e8b4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8be:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e8c2:	643b      	str	r3, [r7, #64]	; 0x40
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	647b      	str	r3, [r7, #68]	; 0x44
 800e8c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	d00e      	beq.n	800e8f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e8d2:	4b86      	ldr	r3, [pc, #536]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	4a85      	ldr	r2, [pc, #532]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e8dc:	6113      	str	r3, [r2, #16]
 800e8de:	4b83      	ldr	r3, [pc, #524]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8e0:	6919      	ldr	r1, [r3, #16]
 800e8e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e8ea:	4a80      	ldr	r2, [pc, #512]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e8ec:	430b      	orrs	r3, r1
 800e8ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e8f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e8fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8fe:	2300      	movs	r3, #0
 800e900:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e902:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e906:	460b      	mov	r3, r1
 800e908:	4313      	orrs	r3, r2
 800e90a:	d009      	beq.n	800e920 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e90c:	4b77      	ldr	r3, [pc, #476]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e90e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e910:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e91a:	4a74      	ldr	r2, [pc, #464]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e91c:	430b      	orrs	r3, r1
 800e91e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e928:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e92c:	633b      	str	r3, [r7, #48]	; 0x30
 800e92e:	2300      	movs	r3, #0
 800e930:	637b      	str	r3, [r7, #52]	; 0x34
 800e932:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e936:	460b      	mov	r3, r1
 800e938:	4313      	orrs	r3, r2
 800e93a:	d00a      	beq.n	800e952 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e93c:	4b6b      	ldr	r3, [pc, #428]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e940:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e94c:	4a67      	ldr	r2, [pc, #412]	; (800eaec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800e94e:	430b      	orrs	r3, r1
 800e950:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	2100      	movs	r1, #0
 800e95c:	62b9      	str	r1, [r7, #40]	; 0x28
 800e95e:	f003 0301 	and.w	r3, r3, #1
 800e962:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e964:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e968:	460b      	mov	r3, r1
 800e96a:	4313      	orrs	r3, r2
 800e96c:	d011      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e96e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e972:	3308      	adds	r3, #8
 800e974:	2100      	movs	r1, #0
 800e976:	4618      	mov	r0, r3
 800e978:	f001 fa4a 	bl	800fe10 <RCCEx_PLL2_Config>
 800e97c:	4603      	mov	r3, r0
 800e97e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e986:	2b00      	cmp	r3, #0
 800e988:	d003      	beq.n	800e992 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e98e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99a:	2100      	movs	r1, #0
 800e99c:	6239      	str	r1, [r7, #32]
 800e99e:	f003 0302 	and.w	r3, r3, #2
 800e9a2:	627b      	str	r3, [r7, #36]	; 0x24
 800e9a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	4313      	orrs	r3, r2
 800e9ac:	d011      	beq.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9b2:	3308      	adds	r3, #8
 800e9b4:	2101      	movs	r1, #1
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f001 fa2a 	bl	800fe10 <RCCEx_PLL2_Config>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800e9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d003      	beq.n	800e9d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e9ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9da:	2100      	movs	r1, #0
 800e9dc:	61b9      	str	r1, [r7, #24]
 800e9de:	f003 0304 	and.w	r3, r3, #4
 800e9e2:	61fb      	str	r3, [r7, #28]
 800e9e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	4313      	orrs	r3, r2
 800e9ec:	d011      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e9ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	2102      	movs	r1, #2
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	f001 fa0a 	bl	800fe10 <RCCEx_PLL2_Config>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ea02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d003      	beq.n	800ea12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ea12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	2100      	movs	r1, #0
 800ea1c:	6139      	str	r1, [r7, #16]
 800ea1e:	f003 0308 	and.w	r3, r3, #8
 800ea22:	617b      	str	r3, [r7, #20]
 800ea24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	4313      	orrs	r3, r2
 800ea2c:	d011      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ea2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea32:	3328      	adds	r3, #40	; 0x28
 800ea34:	2100      	movs	r1, #0
 800ea36:	4618      	mov	r0, r3
 800ea38:	f001 fa9c 	bl	800ff74 <RCCEx_PLL3_Config>
 800ea3c:	4603      	mov	r3, r0
 800ea3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ea42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d003      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ea52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	60b9      	str	r1, [r7, #8]
 800ea5e:	f003 0310 	and.w	r3, r3, #16
 800ea62:	60fb      	str	r3, [r7, #12]
 800ea64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ea68:	460b      	mov	r3, r1
 800ea6a:	4313      	orrs	r3, r2
 800ea6c:	d011      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ea6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea72:	3328      	adds	r3, #40	; 0x28
 800ea74:	2101      	movs	r1, #1
 800ea76:	4618      	mov	r0, r3
 800ea78:	f001 fa7c 	bl	800ff74 <RCCEx_PLL3_Config>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ea82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d003      	beq.n	800ea92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ea8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ea92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	6039      	str	r1, [r7, #0]
 800ea9e:	f003 0320 	and.w	r3, r3, #32
 800eaa2:	607b      	str	r3, [r7, #4]
 800eaa4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	d011      	beq.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800eaae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eab2:	3328      	adds	r3, #40	; 0x28
 800eab4:	2102      	movs	r1, #2
 800eab6:	4618      	mov	r0, r3
 800eab8:	f001 fa5c 	bl	800ff74 <RCCEx_PLL3_Config>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800eac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d003      	beq.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ead2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d101      	bne.n	800eade <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800eada:	2300      	movs	r3, #0
 800eadc:	e000      	b.n	800eae0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800eade:	2301      	movs	r3, #1
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800eae6:	46bd      	mov	sp, r7
 800eae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800eaec:	58024400 	.word	0x58024400

0800eaf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b090      	sub	sp, #64	; 0x40
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eafe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800eb02:	430b      	orrs	r3, r1
 800eb04:	f040 8094 	bne.w	800ec30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800eb08:	4b9e      	ldr	r3, [pc, #632]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb0c:	f003 0307 	and.w	r3, r3, #7
 800eb10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	2b04      	cmp	r3, #4
 800eb16:	f200 8087 	bhi.w	800ec28 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800eb1a:	a201      	add	r2, pc, #4	; (adr r2, 800eb20 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800eb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb20:	0800eb35 	.word	0x0800eb35
 800eb24:	0800eb5d 	.word	0x0800eb5d
 800eb28:	0800eb85 	.word	0x0800eb85
 800eb2c:	0800ec21 	.word	0x0800ec21
 800eb30:	0800ebad 	.word	0x0800ebad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eb34:	4b93      	ldr	r3, [pc, #588]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb40:	d108      	bne.n	800eb54 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eb42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eb46:	4618      	mov	r0, r3
 800eb48:	f001 f810 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb50:	f000 bd45 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb58:	f000 bd41 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb5c:	4b89      	ldr	r3, [pc, #548]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eb64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eb68:	d108      	bne.n	800eb7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb6a:	f107 0318 	add.w	r3, r7, #24
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 fd54 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb78:	f000 bd31 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb80:	f000 bd2d 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eb84:	4b7f      	ldr	r3, [pc, #508]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb90:	d108      	bne.n	800eba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb92:	f107 030c 	add.w	r3, r7, #12
 800eb96:	4618      	mov	r0, r3
 800eb98:	f000 fe94 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eba0:	f000 bd1d 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eba8:	f000 bd19 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ebac:	4b75      	ldr	r3, [pc, #468]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ebb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ebb6:	4b73      	ldr	r3, [pc, #460]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f003 0304 	and.w	r3, r3, #4
 800ebbe:	2b04      	cmp	r3, #4
 800ebc0:	d10c      	bne.n	800ebdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ebc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d109      	bne.n	800ebdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ebc8:	4b6e      	ldr	r3, [pc, #440]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	08db      	lsrs	r3, r3, #3
 800ebce:	f003 0303 	and.w	r3, r3, #3
 800ebd2:	4a6d      	ldr	r2, [pc, #436]	; (800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ebd4:	fa22 f303 	lsr.w	r3, r2, r3
 800ebd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebda:	e01f      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ebdc:	4b69      	ldr	r3, [pc, #420]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebe8:	d106      	bne.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ebea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ebf0:	d102      	bne.n	800ebf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ebf2:	4b66      	ldr	r3, [pc, #408]	; (800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ebf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ebf6:	e011      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ebf8:	4b62      	ldr	r3, [pc, #392]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec04:	d106      	bne.n	800ec14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ec06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec0c:	d102      	bne.n	800ec14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ec0e:	4b60      	ldr	r3, [pc, #384]	; (800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ec10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec12:	e003      	b.n	800ec1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ec14:	2300      	movs	r3, #0
 800ec16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ec18:	f000 bce1 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ec1c:	f000 bcdf 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ec20:	4b5c      	ldr	r3, [pc, #368]	; (800ed94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ec22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec24:	f000 bcdb 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec2c:	f000 bcd7 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ec30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec34:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ec38:	430b      	orrs	r3, r1
 800ec3a:	f040 80ad 	bne.w	800ed98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ec3e:	4b51      	ldr	r3, [pc, #324]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec42:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ec46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ec48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec4e:	d056      	beq.n	800ecfe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec56:	f200 8090 	bhi.w	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ec5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec5c:	2bc0      	cmp	r3, #192	; 0xc0
 800ec5e:	f000 8088 	beq.w	800ed72 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800ec62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec64:	2bc0      	cmp	r3, #192	; 0xc0
 800ec66:	f200 8088 	bhi.w	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ec6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6c:	2b80      	cmp	r3, #128	; 0x80
 800ec6e:	d032      	beq.n	800ecd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ec70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec72:	2b80      	cmp	r3, #128	; 0x80
 800ec74:	f200 8081 	bhi.w	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ec78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d003      	beq.n	800ec86 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800ec7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec80:	2b40      	cmp	r3, #64	; 0x40
 800ec82:	d014      	beq.n	800ecae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800ec84:	e079      	b.n	800ed7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ec86:	4b3f      	ldr	r3, [pc, #252]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ec92:	d108      	bne.n	800eca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f000 ff67 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eca2:	f000 bc9c 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecaa:	f000 bc98 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecae:	4b35      	ldr	r3, [pc, #212]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecb6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ecba:	d108      	bne.n	800ecce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecbc:	f107 0318 	add.w	r3, r7, #24
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f000 fcab 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecca:	f000 bc88 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecd2:	f000 bc84 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ecd6:	4b2b      	ldr	r3, [pc, #172]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ecde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ece2:	d108      	bne.n	800ecf6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ece4:	f107 030c 	add.w	r3, r7, #12
 800ece8:	4618      	mov	r0, r3
 800ecea:	f000 fdeb 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecf2:	f000 bc74 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecfa:	f000 bc70 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ecfe:	4b21      	ldr	r3, [pc, #132]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ed06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed08:	4b1e      	ldr	r3, [pc, #120]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	f003 0304 	and.w	r3, r3, #4
 800ed10:	2b04      	cmp	r3, #4
 800ed12:	d10c      	bne.n	800ed2e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ed14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d109      	bne.n	800ed2e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ed1a:	4b1a      	ldr	r3, [pc, #104]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	08db      	lsrs	r3, r3, #3
 800ed20:	f003 0303 	and.w	r3, r3, #3
 800ed24:	4a18      	ldr	r2, [pc, #96]	; (800ed88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ed26:	fa22 f303 	lsr.w	r3, r2, r3
 800ed2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed2c:	e01f      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed2e:	4b15      	ldr	r3, [pc, #84]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed3a:	d106      	bne.n	800ed4a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ed3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ed42:	d102      	bne.n	800ed4a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ed44:	4b11      	ldr	r3, [pc, #68]	; (800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ed46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed48:	e011      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ed4a:	4b0e      	ldr	r3, [pc, #56]	; (800ed84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ed56:	d106      	bne.n	800ed66 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800ed58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed5e:	d102      	bne.n	800ed66 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ed60:	4b0b      	ldr	r3, [pc, #44]	; (800ed90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ed62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed64:	e003      	b.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ed6a:	f000 bc38 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed6e:	f000 bc36 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ed72:	4b08      	ldr	r3, [pc, #32]	; (800ed94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ed74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed76:	f000 bc32 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ed7e:	f000 bc2e 	b.w	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ed82:	bf00      	nop
 800ed84:	58024400 	.word	0x58024400
 800ed88:	03d09000 	.word	0x03d09000
 800ed8c:	003d0900 	.word	0x003d0900
 800ed90:	017d7840 	.word	0x017d7840
 800ed94:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ed98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed9c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800eda0:	430b      	orrs	r3, r1
 800eda2:	f040 809c 	bne.w	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800eda6:	4b9e      	ldr	r3, [pc, #632]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edaa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800edae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800edb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800edb6:	d054      	beq.n	800ee62 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800edb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800edbe:	f200 808b 	bhi.w	800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800edc8:	f000 8083 	beq.w	800eed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800edcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800edd2:	f200 8081 	bhi.w	800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800edd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eddc:	d02f      	beq.n	800ee3e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ede4:	d878      	bhi.n	800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d004      	beq.n	800edf6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800edec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edf2:	d012      	beq.n	800ee1a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800edf4:	e070      	b.n	800eed8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800edf6:	4b8a      	ldr	r3, [pc, #552]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee02:	d107      	bne.n	800ee14 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f000 feaf 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee12:	e3e4      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee18:	e3e1      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee1a:	4b81      	ldr	r3, [pc, #516]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee26:	d107      	bne.n	800ee38 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee28:	f107 0318 	add.w	r3, r7, #24
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 fbf5 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee32:	69bb      	ldr	r3, [r7, #24]
 800ee34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee36:	e3d2      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee3c:	e3cf      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee3e:	4b78      	ldr	r3, [pc, #480]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee4a:	d107      	bne.n	800ee5c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee4c:	f107 030c 	add.w	r3, r7, #12
 800ee50:	4618      	mov	r0, r3
 800ee52:	f000 fd37 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee5a:	e3c0      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee60:	e3bd      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ee62:	4b6f      	ldr	r3, [pc, #444]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ee6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ee6c:	4b6c      	ldr	r3, [pc, #432]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f003 0304 	and.w	r3, r3, #4
 800ee74:	2b04      	cmp	r3, #4
 800ee76:	d10c      	bne.n	800ee92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ee78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d109      	bne.n	800ee92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ee7e:	4b68      	ldr	r3, [pc, #416]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	08db      	lsrs	r3, r3, #3
 800ee84:	f003 0303 	and.w	r3, r3, #3
 800ee88:	4a66      	ldr	r2, [pc, #408]	; (800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ee8a:	fa22 f303 	lsr.w	r3, r2, r3
 800ee8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee90:	e01e      	b.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ee92:	4b63      	ldr	r3, [pc, #396]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee9e:	d106      	bne.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800eea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eea6:	d102      	bne.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eea8:	4b5f      	ldr	r3, [pc, #380]	; (800f028 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eeac:	e010      	b.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eeae:	4b5c      	ldr	r3, [pc, #368]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eeb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eeba:	d106      	bne.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800eebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eec2:	d102      	bne.n	800eeca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800eec4:	4b59      	ldr	r3, [pc, #356]	; (800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800eec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eec8:	e002      	b.n	800eed0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eeca:	2300      	movs	r3, #0
 800eecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800eece:	e386      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eed0:	e385      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800eed2:	4b57      	ldr	r3, [pc, #348]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800eed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eed6:	e382      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800eed8:	2300      	movs	r3, #0
 800eeda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eedc:	e37f      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800eede:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eee2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800eee6:	430b      	orrs	r3, r1
 800eee8:	f040 80a7 	bne.w	800f03a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800eeec:	4b4c      	ldr	r3, [pc, #304]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eeee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eef0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800eef4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800eef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eefc:	d055      	beq.n	800efaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800eefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef04:	f200 8096 	bhi.w	800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ef08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef0e:	f000 8084 	beq.w	800f01a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800ef12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef18:	f200 808c 	bhi.w	800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ef1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef22:	d030      	beq.n	800ef86 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef2a:	f200 8083 	bhi.w	800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800ef2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d004      	beq.n	800ef3e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800ef34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef3a:	d012      	beq.n	800ef62 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800ef3c:	e07a      	b.n	800f034 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef3e:	4b38      	ldr	r3, [pc, #224]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef4a:	d107      	bne.n	800ef5c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef50:	4618      	mov	r0, r3
 800ef52:	f000 fe0b 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef5a:	e340      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef60:	e33d      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef62:	4b2f      	ldr	r3, [pc, #188]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef6e:	d107      	bne.n	800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef70:	f107 0318 	add.w	r3, r7, #24
 800ef74:	4618      	mov	r0, r3
 800ef76:	f000 fb51 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ef7e:	e32e      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ef80:	2300      	movs	r3, #0
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ef84:	e32b      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef86:	4b26      	ldr	r3, [pc, #152]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef92:	d107      	bne.n	800efa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef94:	f107 030c 	add.w	r3, r7, #12
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f000 fc93 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efa2:	e31c      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efa4:	2300      	movs	r3, #0
 800efa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efa8:	e319      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800efaa:	4b1d      	ldr	r3, [pc, #116]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800efb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efb4:	4b1a      	ldr	r3, [pc, #104]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	f003 0304 	and.w	r3, r3, #4
 800efbc:	2b04      	cmp	r3, #4
 800efbe:	d10c      	bne.n	800efda <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800efc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d109      	bne.n	800efda <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800efc6:	4b16      	ldr	r3, [pc, #88]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	08db      	lsrs	r3, r3, #3
 800efcc:	f003 0303 	and.w	r3, r3, #3
 800efd0:	4a14      	ldr	r2, [pc, #80]	; (800f024 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800efd2:	fa22 f303 	lsr.w	r3, r2, r3
 800efd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efd8:	e01e      	b.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800efda:	4b11      	ldr	r3, [pc, #68]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efe6:	d106      	bne.n	800eff6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800efe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efee:	d102      	bne.n	800eff6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800eff0:	4b0d      	ldr	r3, [pc, #52]	; (800f028 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800eff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eff4:	e010      	b.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eff6:	4b0a      	ldr	r3, [pc, #40]	; (800f020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800effe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f002:	d106      	bne.n	800f012 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f00a:	d102      	bne.n	800f012 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f00c:	4b07      	ldr	r3, [pc, #28]	; (800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f010:	e002      	b.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f016:	e2e2      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f018:	e2e1      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f01a:	4b05      	ldr	r3, [pc, #20]	; (800f030 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f01e:	e2de      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f020:	58024400 	.word	0x58024400
 800f024:	03d09000 	.word	0x03d09000
 800f028:	003d0900 	.word	0x003d0900
 800f02c:	017d7840 	.word	0x017d7840
 800f030:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f034:	2300      	movs	r3, #0
 800f036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f038:	e2d1      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f03a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f03e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f042:	430b      	orrs	r3, r1
 800f044:	f040 809c 	bne.w	800f180 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f048:	4b93      	ldr	r3, [pc, #588]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f04c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f050:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f054:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f058:	d054      	beq.n	800f104 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f060:	f200 808b 	bhi.w	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f066:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f06a:	f000 8083 	beq.w	800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f070:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f074:	f200 8081 	bhi.w	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f07e:	d02f      	beq.n	800f0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f086:	d878      	bhi.n	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d004      	beq.n	800f098 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f094:	d012      	beq.n	800f0bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f096:	e070      	b.n	800f17a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f098:	4b7f      	ldr	r3, [pc, #508]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0a4:	d107      	bne.n	800f0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f000 fd5e 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0b4:	e293      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0ba:	e290      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0bc:	4b76      	ldr	r3, [pc, #472]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0c8:	d107      	bne.n	800f0da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0ca:	f107 0318 	add.w	r3, r7, #24
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 faa4 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0d4:	69bb      	ldr	r3, [r7, #24]
 800f0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0d8:	e281      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0de:	e27e      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0e0:	4b6d      	ldr	r3, [pc, #436]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0ec:	d107      	bne.n	800f0fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0ee:	f107 030c 	add.w	r3, r7, #12
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 fbe6 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f0fc:	e26f      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f0fe:	2300      	movs	r3, #0
 800f100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f102:	e26c      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f104:	4b64      	ldr	r3, [pc, #400]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f10c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f10e:	4b62      	ldr	r3, [pc, #392]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	f003 0304 	and.w	r3, r3, #4
 800f116:	2b04      	cmp	r3, #4
 800f118:	d10c      	bne.n	800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d109      	bne.n	800f134 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f120:	4b5d      	ldr	r3, [pc, #372]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	08db      	lsrs	r3, r3, #3
 800f126:	f003 0303 	and.w	r3, r3, #3
 800f12a:	4a5c      	ldr	r2, [pc, #368]	; (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f12c:	fa22 f303 	lsr.w	r3, r2, r3
 800f130:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f132:	e01e      	b.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f134:	4b58      	ldr	r3, [pc, #352]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f140:	d106      	bne.n	800f150 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f148:	d102      	bne.n	800f150 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f14a:	4b55      	ldr	r3, [pc, #340]	; (800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f14c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f14e:	e010      	b.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f150:	4b51      	ldr	r3, [pc, #324]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f158:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f15c:	d106      	bne.n	800f16c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f164:	d102      	bne.n	800f16c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f166:	4b4f      	ldr	r3, [pc, #316]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f16a:	e002      	b.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f16c:	2300      	movs	r3, #0
 800f16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f170:	e235      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f172:	e234      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f174:	4b4c      	ldr	r3, [pc, #304]	; (800f2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f178:	e231      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f17e:	e22e      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f180:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f184:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f188:	430b      	orrs	r3, r1
 800f18a:	f040 808f 	bne.w	800f2ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f18e:	4b42      	ldr	r3, [pc, #264]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f192:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f196:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f19e:	d06b      	beq.n	800f278 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f1a6:	d874      	bhi.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f1ae:	d056      	beq.n	800f25e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f1b6:	d86c      	bhi.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f1be:	d03b      	beq.n	800f238 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f1c6:	d864      	bhi.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1ce:	d021      	beq.n	800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1d6:	d85c      	bhi.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d004      	beq.n	800f1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f1e4:	d004      	beq.n	800f1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f1e6:	e054      	b.n	800f292 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f1e8:	f7fe fa4c 	bl	800d684 <HAL_RCC_GetPCLK1Freq>
 800f1ec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f1ee:	e1f6      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f1f0:	4b29      	ldr	r3, [pc, #164]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f1f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f1fc:	d107      	bne.n	800f20e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f1fe:	f107 0318 	add.w	r3, r7, #24
 800f202:	4618      	mov	r0, r3
 800f204:	f000 fa0a 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f20c:	e1e7      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f20e:	2300      	movs	r3, #0
 800f210:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f212:	e1e4      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f214:	4b20      	ldr	r3, [pc, #128]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f21c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f220:	d107      	bne.n	800f232 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f222:	f107 030c 	add.w	r3, r7, #12
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fb4c 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f22c:	693b      	ldr	r3, [r7, #16]
 800f22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f230:	e1d5      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f232:	2300      	movs	r3, #0
 800f234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f236:	e1d2      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f238:	4b17      	ldr	r3, [pc, #92]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f003 0304 	and.w	r3, r3, #4
 800f240:	2b04      	cmp	r3, #4
 800f242:	d109      	bne.n	800f258 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f244:	4b14      	ldr	r3, [pc, #80]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	08db      	lsrs	r3, r3, #3
 800f24a:	f003 0303 	and.w	r3, r3, #3
 800f24e:	4a13      	ldr	r2, [pc, #76]	; (800f29c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f250:	fa22 f303 	lsr.w	r3, r2, r3
 800f254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f256:	e1c2      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f25c:	e1bf      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f25e:	4b0e      	ldr	r3, [pc, #56]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f26a:	d102      	bne.n	800f272 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f26c:	4b0c      	ldr	r3, [pc, #48]	; (800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f270:	e1b5      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f276:	e1b2      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f278:	4b07      	ldr	r3, [pc, #28]	; (800f298 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f284:	d102      	bne.n	800f28c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f286:	4b07      	ldr	r3, [pc, #28]	; (800f2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f288:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f28a:	e1a8      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f28c:	2300      	movs	r3, #0
 800f28e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f290:	e1a5      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f292:	2300      	movs	r3, #0
 800f294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f296:	e1a2      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f298:	58024400 	.word	0x58024400
 800f29c:	03d09000 	.word	0x03d09000
 800f2a0:	003d0900 	.word	0x003d0900
 800f2a4:	017d7840 	.word	0x017d7840
 800f2a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2b0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f2b4:	430b      	orrs	r3, r1
 800f2b6:	d173      	bne.n	800f3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f2b8:	4b9c      	ldr	r3, [pc, #624]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f2c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2c8:	d02f      	beq.n	800f32a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2d0:	d863      	bhi.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d004      	beq.n	800f2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2de:	d012      	beq.n	800f306 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f2e0:	e05b      	b.n	800f39a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2e2:	4b92      	ldr	r3, [pc, #584]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2ee:	d107      	bne.n	800f300 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2f0:	f107 0318 	add.w	r3, r7, #24
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 f991 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2fe:	e16e      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f304:	e16b      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f306:	4b89      	ldr	r3, [pc, #548]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f30e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f312:	d107      	bne.n	800f324 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f314:	f107 030c 	add.w	r3, r7, #12
 800f318:	4618      	mov	r0, r3
 800f31a:	f000 fad3 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f322:	e15c      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f324:	2300      	movs	r3, #0
 800f326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f328:	e159      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f32a:	4b80      	ldr	r3, [pc, #512]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f32e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f332:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f334:	4b7d      	ldr	r3, [pc, #500]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	f003 0304 	and.w	r3, r3, #4
 800f33c:	2b04      	cmp	r3, #4
 800f33e:	d10c      	bne.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f342:	2b00      	cmp	r3, #0
 800f344:	d109      	bne.n	800f35a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f346:	4b79      	ldr	r3, [pc, #484]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	08db      	lsrs	r3, r3, #3
 800f34c:	f003 0303 	and.w	r3, r3, #3
 800f350:	4a77      	ldr	r2, [pc, #476]	; (800f530 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f352:	fa22 f303 	lsr.w	r3, r2, r3
 800f356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f358:	e01e      	b.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f35a:	4b74      	ldr	r3, [pc, #464]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f366:	d106      	bne.n	800f376 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f36e:	d102      	bne.n	800f376 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f370:	4b70      	ldr	r3, [pc, #448]	; (800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f374:	e010      	b.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f376:	4b6d      	ldr	r3, [pc, #436]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f37e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f382:	d106      	bne.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f38a:	d102      	bne.n	800f392 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f38c:	4b6a      	ldr	r3, [pc, #424]	; (800f538 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f390:	e002      	b.n	800f398 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f392:	2300      	movs	r3, #0
 800f394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f396:	e122      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f398:	e121      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f39a:	2300      	movs	r3, #0
 800f39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f39e:	e11e      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f3a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f3a4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f3a8:	430b      	orrs	r3, r1
 800f3aa:	d133      	bne.n	800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f3ac:	4b5f      	ldr	r3, [pc, #380]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f3b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d004      	beq.n	800f3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3c2:	d012      	beq.n	800f3ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f3c4:	e023      	b.n	800f40e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f3c6:	4b59      	ldr	r3, [pc, #356]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3d2:	d107      	bne.n	800f3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3d8:	4618      	mov	r0, r3
 800f3da:	f000 fbc7 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3e2:	e0fc      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3e8:	e0f9      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3ea:	4b50      	ldr	r3, [pc, #320]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3f6:	d107      	bne.n	800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3f8:	f107 0318 	add.w	r3, r7, #24
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 f90d 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f406:	e0ea      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f40c:	e0e7      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f412:	e0e4      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f414:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f418:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f41c:	430b      	orrs	r3, r1
 800f41e:	f040 808d 	bne.w	800f53c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f422:	4b42      	ldr	r3, [pc, #264]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f426:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f42a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f432:	d06b      	beq.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f43a:	d874      	bhi.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f442:	d056      	beq.n	800f4f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f44a:	d86c      	bhi.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f452:	d03b      	beq.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f45a:	d864      	bhi.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f462:	d021      	beq.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f466:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f46a:	d85c      	bhi.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d004      	beq.n	800f47c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f474:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f478:	d004      	beq.n	800f484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f47a:	e054      	b.n	800f526 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f47c:	f000 f8b8 	bl	800f5f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800f480:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f482:	e0ac      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f484:	4b29      	ldr	r3, [pc, #164]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f48c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f490:	d107      	bne.n	800f4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f492:	f107 0318 	add.w	r3, r7, #24
 800f496:	4618      	mov	r0, r3
 800f498:	f000 f8c0 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4a0:	e09d      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4a6:	e09a      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f4a8:	4b20      	ldr	r3, [pc, #128]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4b4:	d107      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4b6:	f107 030c 	add.w	r3, r7, #12
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fa02 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4c4:	e08b      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4ca:	e088      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f4cc:	4b17      	ldr	r3, [pc, #92]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f003 0304 	and.w	r3, r3, #4
 800f4d4:	2b04      	cmp	r3, #4
 800f4d6:	d109      	bne.n	800f4ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4d8:	4b14      	ldr	r3, [pc, #80]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	08db      	lsrs	r3, r3, #3
 800f4de:	f003 0303 	and.w	r3, r3, #3
 800f4e2:	4a13      	ldr	r2, [pc, #76]	; (800f530 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800f4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f4ea:	e078      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4f0:	e075      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f4f2:	4b0e      	ldr	r3, [pc, #56]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4fe:	d102      	bne.n	800f506 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f500:	4b0c      	ldr	r3, [pc, #48]	; (800f534 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f504:	e06b      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f50a:	e068      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f50c:	4b07      	ldr	r3, [pc, #28]	; (800f52c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f514:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f518:	d102      	bne.n	800f520 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f51a:	4b07      	ldr	r3, [pc, #28]	; (800f538 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f51c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f51e:	e05e      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f520:	2300      	movs	r3, #0
 800f522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f524:	e05b      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f526:	2300      	movs	r3, #0
 800f528:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f52a:	e058      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f52c:	58024400 	.word	0x58024400
 800f530:	03d09000 	.word	0x03d09000
 800f534:	003d0900 	.word	0x003d0900
 800f538:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f53c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f540:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f544:	430b      	orrs	r3, r1
 800f546:	d148      	bne.n	800f5da <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f548:	4b27      	ldr	r3, [pc, #156]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f54a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f54c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f550:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f558:	d02a      	beq.n	800f5b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f560:	d838      	bhi.n	800f5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	2b00      	cmp	r3, #0
 800f566:	d004      	beq.n	800f572 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f56e:	d00d      	beq.n	800f58c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f570:	e030      	b.n	800f5d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f572:	4b1d      	ldr	r3, [pc, #116]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f57a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f57e:	d102      	bne.n	800f586 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800f580:	4b1a      	ldr	r3, [pc, #104]	; (800f5ec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800f582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f584:	e02b      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f586:	2300      	movs	r3, #0
 800f588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f58a:	e028      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f58c:	4b16      	ldr	r3, [pc, #88]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f598:	d107      	bne.n	800f5aa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f59a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f000 fae4 	bl	800fb6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f5a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5a8:	e019      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5ae:	e016      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5b0:	4b0d      	ldr	r3, [pc, #52]	; (800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5bc:	d107      	bne.n	800f5ce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5be:	f107 0318 	add.w	r3, r7, #24
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 f82a 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f5cc:	e007      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d2:	e004      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5d8:	e001      	b.n	800f5de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800f5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3740      	adds	r7, #64	; 0x40
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	58024400 	.word	0x58024400
 800f5ec:	017d7840 	.word	0x017d7840

0800f5f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f5f4:	f7fe f816 	bl	800d624 <HAL_RCC_GetHCLKFreq>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	4b06      	ldr	r3, [pc, #24]	; (800f614 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	091b      	lsrs	r3, r3, #4
 800f600:	f003 0307 	and.w	r3, r3, #7
 800f604:	4904      	ldr	r1, [pc, #16]	; (800f618 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f606:	5ccb      	ldrb	r3, [r1, r3]
 800f608:	f003 031f 	and.w	r3, r3, #31
 800f60c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f610:	4618      	mov	r0, r3
 800f612:	bd80      	pop	{r7, pc}
 800f614:	58024400 	.word	0x58024400
 800f618:	08017130 	.word	0x08017130

0800f61c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b089      	sub	sp, #36	; 0x24
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f624:	4ba1      	ldr	r3, [pc, #644]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f628:	f003 0303 	and.w	r3, r3, #3
 800f62c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800f62e:	4b9f      	ldr	r3, [pc, #636]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f632:	0b1b      	lsrs	r3, r3, #12
 800f634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f638:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f63a:	4b9c      	ldr	r3, [pc, #624]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f63e:	091b      	lsrs	r3, r3, #4
 800f640:	f003 0301 	and.w	r3, r3, #1
 800f644:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800f646:	4b99      	ldr	r3, [pc, #612]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f64a:	08db      	lsrs	r3, r3, #3
 800f64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	fb02 f303 	mul.w	r3, r2, r3
 800f656:	ee07 3a90 	vmov	s15, r3
 800f65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f65e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	2b00      	cmp	r3, #0
 800f666:	f000 8111 	beq.w	800f88c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	f000 8083 	beq.w	800f778 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f672:	69bb      	ldr	r3, [r7, #24]
 800f674:	2b02      	cmp	r3, #2
 800f676:	f200 80a1 	bhi.w	800f7bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d003      	beq.n	800f688 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	2b01      	cmp	r3, #1
 800f684:	d056      	beq.n	800f734 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f686:	e099      	b.n	800f7bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f688:	4b88      	ldr	r3, [pc, #544]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	f003 0320 	and.w	r3, r3, #32
 800f690:	2b00      	cmp	r3, #0
 800f692:	d02d      	beq.n	800f6f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f694:	4b85      	ldr	r3, [pc, #532]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	08db      	lsrs	r3, r3, #3
 800f69a:	f003 0303 	and.w	r3, r3, #3
 800f69e:	4a84      	ldr	r2, [pc, #528]	; (800f8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800f6a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	ee07 3a90 	vmov	s15, r3
 800f6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	ee07 3a90 	vmov	s15, r3
 800f6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6be:	4b7b      	ldr	r3, [pc, #492]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6c6:	ee07 3a90 	vmov	s15, r3
 800f6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f6ee:	e087      	b.n	800f800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	ee07 3a90 	vmov	s15, r3
 800f6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f702:	4b6a      	ldr	r3, [pc, #424]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f70a:	ee07 3a90 	vmov	s15, r3
 800f70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f712:	ed97 6a03 	vldr	s12, [r7, #12]
 800f716:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f72e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f732:	e065      	b.n	800f800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	ee07 3a90 	vmov	s15, r3
 800f73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f73e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f746:	4b59      	ldr	r3, [pc, #356]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f74e:	ee07 3a90 	vmov	s15, r3
 800f752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f756:	ed97 6a03 	vldr	s12, [r7, #12]
 800f75a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f776:	e043      	b.n	800f800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	ee07 3a90 	vmov	s15, r3
 800f77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f782:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f78a:	4b48      	ldr	r3, [pc, #288]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f792:	ee07 3a90 	vmov	s15, r3
 800f796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f79a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f79e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7ba:	e021      	b.n	800f800 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	ee07 3a90 	vmov	s15, r3
 800f7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f8bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f7ce:	4b37      	ldr	r3, [pc, #220]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7d6:	ee07 3a90 	vmov	s15, r3
 800f7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f7de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f7e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f8b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f7fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f800:	4b2a      	ldr	r3, [pc, #168]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f804:	0a5b      	lsrs	r3, r3, #9
 800f806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f80a:	ee07 3a90 	vmov	s15, r3
 800f80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f81a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f81e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f826:	ee17 2a90 	vmov	r2, s15
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f82e:	4b1f      	ldr	r3, [pc, #124]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f832:	0c1b      	lsrs	r3, r3, #16
 800f834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f838:	ee07 3a90 	vmov	s15, r3
 800f83c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f844:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f848:	edd7 6a07 	vldr	s13, [r7, #28]
 800f84c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f854:	ee17 2a90 	vmov	r2, s15
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f85c:	4b13      	ldr	r3, [pc, #76]	; (800f8ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f860:	0e1b      	lsrs	r3, r3, #24
 800f862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f866:	ee07 3a90 	vmov	s15, r3
 800f86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f86e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f872:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f876:	edd7 6a07 	vldr	s13, [r7, #28]
 800f87a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f87e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f882:	ee17 2a90 	vmov	r2, s15
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f88a:	e008      	b.n	800f89e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2200      	movs	r2, #0
 800f890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2200      	movs	r2, #0
 800f89c:	609a      	str	r2, [r3, #8]
}
 800f89e:	bf00      	nop
 800f8a0:	3724      	adds	r7, #36	; 0x24
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	58024400 	.word	0x58024400
 800f8b0:	03d09000 	.word	0x03d09000
 800f8b4:	46000000 	.word	0x46000000
 800f8b8:	4c742400 	.word	0x4c742400
 800f8bc:	4a742400 	.word	0x4a742400
 800f8c0:	4bbebc20 	.word	0x4bbebc20

0800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f8c4:	b480      	push	{r7}
 800f8c6:	b089      	sub	sp, #36	; 0x24
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f8cc:	4ba1      	ldr	r3, [pc, #644]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8d0:	f003 0303 	and.w	r3, r3, #3
 800f8d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f8d6:	4b9f      	ldr	r3, [pc, #636]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8da:	0d1b      	lsrs	r3, r3, #20
 800f8dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f8e2:	4b9c      	ldr	r3, [pc, #624]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8e6:	0a1b      	lsrs	r3, r3, #8
 800f8e8:	f003 0301 	and.w	r3, r3, #1
 800f8ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f8ee:	4b99      	ldr	r3, [pc, #612]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8f2:	08db      	lsrs	r3, r3, #3
 800f8f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8f8:	693a      	ldr	r2, [r7, #16]
 800f8fa:	fb02 f303 	mul.w	r3, r2, r3
 800f8fe:	ee07 3a90 	vmov	s15, r3
 800f902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f906:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 8111 	beq.w	800fb34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	2b02      	cmp	r3, #2
 800f916:	f000 8083 	beq.w	800fa20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	f200 80a1 	bhi.w	800fa64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f922:	69bb      	ldr	r3, [r7, #24]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d003      	beq.n	800f930 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	2b01      	cmp	r3, #1
 800f92c:	d056      	beq.n	800f9dc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f92e:	e099      	b.n	800fa64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f930:	4b88      	ldr	r3, [pc, #544]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f003 0320 	and.w	r3, r3, #32
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d02d      	beq.n	800f998 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f93c:	4b85      	ldr	r3, [pc, #532]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	08db      	lsrs	r3, r3, #3
 800f942:	f003 0303 	and.w	r3, r3, #3
 800f946:	4a84      	ldr	r2, [pc, #528]	; (800fb58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f948:	fa22 f303 	lsr.w	r3, r2, r3
 800f94c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	ee07 3a90 	vmov	s15, r3
 800f954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	ee07 3a90 	vmov	s15, r3
 800f95e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f966:	4b7b      	ldr	r3, [pc, #492]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f96e:	ee07 3a90 	vmov	s15, r3
 800f972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f976:	ed97 6a03 	vldr	s12, [r7, #12]
 800f97a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f992:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f996:	e087      	b.n	800faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	ee07 3a90 	vmov	s15, r3
 800f99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fb60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9aa:	4b6a      	ldr	r3, [pc, #424]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9b2:	ee07 3a90 	vmov	s15, r3
 800f9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f9da:	e065      	b.n	800faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	ee07 3a90 	vmov	s15, r3
 800f9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9ee:	4b59      	ldr	r3, [pc, #356]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f6:	ee07 3a90 	vmov	s15, r3
 800f9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa1e:	e043      	b.n	800faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa20:	697b      	ldr	r3, [r7, #20]
 800fa22:	ee07 3a90 	vmov	s15, r3
 800fa26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fb68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fa2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa32:	4b48      	ldr	r3, [pc, #288]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa3a:	ee07 3a90 	vmov	s15, r3
 800fa3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa42:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fa62:	e021      	b.n	800faa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	ee07 3a90 	vmov	s15, r3
 800fa6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fb64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fa72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fa76:	4b37      	ldr	r3, [pc, #220]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa7e:	ee07 3a90 	vmov	s15, r3
 800fa82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fa86:	ed97 6a03 	vldr	s12, [r7, #12]
 800fa8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fb5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fa8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800faa6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800faa8:	4b2a      	ldr	r3, [pc, #168]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800faaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faac:	0a5b      	lsrs	r3, r3, #9
 800faae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fab2:	ee07 3a90 	vmov	s15, r3
 800fab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fabe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fac2:	edd7 6a07 	vldr	s13, [r7, #28]
 800fac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800faca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800face:	ee17 2a90 	vmov	r2, s15
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800fad6:	4b1f      	ldr	r3, [pc, #124]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fada:	0c1b      	lsrs	r3, r3, #16
 800fadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fae0:	ee07 3a90 	vmov	s15, r3
 800fae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800faec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800faf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800faf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800faf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fafc:	ee17 2a90 	vmov	r2, s15
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800fb04:	4b13      	ldr	r3, [pc, #76]	; (800fb54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb08:	0e1b      	lsrs	r3, r3, #24
 800fb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb0e:	ee07 3a90 	vmov	s15, r3
 800fb12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fb1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fb2a:	ee17 2a90 	vmov	r2, s15
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fb32:	e008      	b.n	800fb46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2200      	movs	r2, #0
 800fb38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	609a      	str	r2, [r3, #8]
}
 800fb46:	bf00      	nop
 800fb48:	3724      	adds	r7, #36	; 0x24
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	58024400 	.word	0x58024400
 800fb58:	03d09000 	.word	0x03d09000
 800fb5c:	46000000 	.word	0x46000000
 800fb60:	4c742400 	.word	0x4c742400
 800fb64:	4a742400 	.word	0x4a742400
 800fb68:	4bbebc20 	.word	0x4bbebc20

0800fb6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b089      	sub	sp, #36	; 0x24
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fb74:	4ba0      	ldr	r3, [pc, #640]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb78:	f003 0303 	and.w	r3, r3, #3
 800fb7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800fb7e:	4b9e      	ldr	r3, [pc, #632]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb82:	091b      	lsrs	r3, r3, #4
 800fb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fb88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fb8a:	4b9b      	ldr	r3, [pc, #620]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8e:	f003 0301 	and.w	r3, r3, #1
 800fb92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fb94:	4b98      	ldr	r3, [pc, #608]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb98:	08db      	lsrs	r3, r3, #3
 800fb9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	fb02 f303 	mul.w	r3, r2, r3
 800fba4:	ee07 3a90 	vmov	s15, r3
 800fba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	f000 8111 	beq.w	800fdda <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fbb8:	69bb      	ldr	r3, [r7, #24]
 800fbba:	2b02      	cmp	r3, #2
 800fbbc:	f000 8083 	beq.w	800fcc6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	2b02      	cmp	r3, #2
 800fbc4:	f200 80a1 	bhi.w	800fd0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fbc8:	69bb      	ldr	r3, [r7, #24]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d003      	beq.n	800fbd6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fbce:	69bb      	ldr	r3, [r7, #24]
 800fbd0:	2b01      	cmp	r3, #1
 800fbd2:	d056      	beq.n	800fc82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fbd4:	e099      	b.n	800fd0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fbd6:	4b88      	ldr	r3, [pc, #544]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f003 0320 	and.w	r3, r3, #32
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d02d      	beq.n	800fc3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fbe2:	4b85      	ldr	r3, [pc, #532]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	08db      	lsrs	r3, r3, #3
 800fbe8:	f003 0303 	and.w	r3, r3, #3
 800fbec:	4a83      	ldr	r2, [pc, #524]	; (800fdfc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fbee:	fa22 f303 	lsr.w	r3, r2, r3
 800fbf2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	ee07 3a90 	vmov	s15, r3
 800fbfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	ee07 3a90 	vmov	s15, r3
 800fc04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc0c:	4b7a      	ldr	r3, [pc, #488]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc14:	ee07 3a90 	vmov	s15, r3
 800fc18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc20:	eddf 5a77 	vldr	s11, [pc, #476]	; 800fe00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc38:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fc3c:	e087      	b.n	800fd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fe04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fc4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc50:	4b69      	ldr	r3, [pc, #420]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc58:	ee07 3a90 	vmov	s15, r3
 800fc5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc60:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc64:	eddf 5a66 	vldr	s11, [pc, #408]	; 800fe00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc80:	e065      	b.n	800fd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fc82:	697b      	ldr	r3, [r7, #20]
 800fc84:	ee07 3a90 	vmov	s15, r3
 800fc88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fe08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fc90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc94:	4b58      	ldr	r3, [pc, #352]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc9c:	ee07 3a90 	vmov	s15, r3
 800fca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fca4:	ed97 6a03 	vldr	s12, [r7, #12]
 800fca8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800fe00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fcb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fcc4:	e043      	b.n	800fd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	ee07 3a90 	vmov	s15, r3
 800fccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcd0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fe0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fcd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fcd8:	4b47      	ldr	r3, [pc, #284]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fce0:	ee07 3a90 	vmov	s15, r3
 800fce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fce8:	ed97 6a03 	vldr	s12, [r7, #12]
 800fcec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fe00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fcf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fcf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fcf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fcfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd08:	e021      	b.n	800fd4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fd0a:	697b      	ldr	r3, [r7, #20]
 800fd0c:	ee07 3a90 	vmov	s15, r3
 800fd10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fe04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fd18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd1c:	4b36      	ldr	r3, [pc, #216]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd24:	ee07 3a90 	vmov	s15, r3
 800fd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd30:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fe00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fd4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800fd4e:	4b2a      	ldr	r3, [pc, #168]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd52:	0a5b      	lsrs	r3, r3, #9
 800fd54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd58:	ee07 3a90 	vmov	s15, r3
 800fd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd68:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd74:	ee17 2a90 	vmov	r2, s15
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800fd7c:	4b1e      	ldr	r3, [pc, #120]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd80:	0c1b      	lsrs	r3, r3, #16
 800fd82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd86:	ee07 3a90 	vmov	s15, r3
 800fd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd96:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fda2:	ee17 2a90 	vmov	r2, s15
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800fdaa:	4b13      	ldr	r3, [pc, #76]	; (800fdf8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdae:	0e1b      	lsrs	r3, r3, #24
 800fdb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdb4:	ee07 3a90 	vmov	s15, r3
 800fdb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fdc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800fdc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fdd0:	ee17 2a90 	vmov	r2, s15
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fdd8:	e008      	b.n	800fdec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	2200      	movs	r2, #0
 800fdde:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2200      	movs	r2, #0
 800fdea:	609a      	str	r2, [r3, #8]
}
 800fdec:	bf00      	nop
 800fdee:	3724      	adds	r7, #36	; 0x24
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf6:	4770      	bx	lr
 800fdf8:	58024400 	.word	0x58024400
 800fdfc:	03d09000 	.word	0x03d09000
 800fe00:	46000000 	.word	0x46000000
 800fe04:	4c742400 	.word	0x4c742400
 800fe08:	4a742400 	.word	0x4a742400
 800fe0c:	4bbebc20 	.word	0x4bbebc20

0800fe10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b084      	sub	sp, #16
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
 800fe18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fe1e:	4b53      	ldr	r3, [pc, #332]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fe20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe22:	f003 0303 	and.w	r3, r3, #3
 800fe26:	2b03      	cmp	r3, #3
 800fe28:	d101      	bne.n	800fe2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	e099      	b.n	800ff62 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fe2e:	4b4f      	ldr	r3, [pc, #316]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a4e      	ldr	r2, [pc, #312]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fe34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe3a:	f7f7 f86f 	bl	8006f1c <HAL_GetTick>
 800fe3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe40:	e008      	b.n	800fe54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800fe42:	f7f7 f86b 	bl	8006f1c <HAL_GetTick>
 800fe46:	4602      	mov	r2, r0
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d901      	bls.n	800fe54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fe50:	2303      	movs	r3, #3
 800fe52:	e086      	b.n	800ff62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fe54:	4b45      	ldr	r3, [pc, #276]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1f0      	bne.n	800fe42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fe60:	4b42      	ldr	r3, [pc, #264]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fe62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	031b      	lsls	r3, r3, #12
 800fe6e:	493f      	ldr	r1, [pc, #252]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fe70:	4313      	orrs	r3, r2
 800fe72:	628b      	str	r3, [r1, #40]	; 0x28
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	3b01      	subs	r3, #1
 800fe7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	689b      	ldr	r3, [r3, #8]
 800fe82:	3b01      	subs	r3, #1
 800fe84:	025b      	lsls	r3, r3, #9
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	431a      	orrs	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	3b01      	subs	r3, #1
 800fe90:	041b      	lsls	r3, r3, #16
 800fe92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fe96:	431a      	orrs	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	3b01      	subs	r3, #1
 800fe9e:	061b      	lsls	r3, r3, #24
 800fea0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fea4:	4931      	ldr	r1, [pc, #196]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fea6:	4313      	orrs	r3, r2
 800fea8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800feaa:	4b30      	ldr	r3, [pc, #192]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800feac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	695b      	ldr	r3, [r3, #20]
 800feb6:	492d      	ldr	r1, [pc, #180]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800feb8:	4313      	orrs	r3, r2
 800feba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800febc:	4b2b      	ldr	r3, [pc, #172]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800febe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec0:	f023 0220 	bic.w	r2, r3, #32
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	699b      	ldr	r3, [r3, #24]
 800fec8:	4928      	ldr	r1, [pc, #160]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800feca:	4313      	orrs	r3, r2
 800fecc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fece:	4b27      	ldr	r3, [pc, #156]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fed2:	4a26      	ldr	r2, [pc, #152]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fed4:	f023 0310 	bic.w	r3, r3, #16
 800fed8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800feda:	4b24      	ldr	r3, [pc, #144]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fedc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fede:	4b24      	ldr	r3, [pc, #144]	; (800ff70 <RCCEx_PLL2_Config+0x160>)
 800fee0:	4013      	ands	r3, r2
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	69d2      	ldr	r2, [r2, #28]
 800fee6:	00d2      	lsls	r2, r2, #3
 800fee8:	4920      	ldr	r1, [pc, #128]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800feea:	4313      	orrs	r3, r2
 800feec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800feee:	4b1f      	ldr	r3, [pc, #124]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef2:	4a1e      	ldr	r2, [pc, #120]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800fef4:	f043 0310 	orr.w	r3, r3, #16
 800fef8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d106      	bne.n	800ff0e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ff00:	4b1a      	ldr	r3, [pc, #104]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff04:	4a19      	ldr	r2, [pc, #100]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ff0c:	e00f      	b.n	800ff2e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	2b01      	cmp	r3, #1
 800ff12:	d106      	bne.n	800ff22 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ff14:	4b15      	ldr	r3, [pc, #84]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff18:	4a14      	ldr	r2, [pc, #80]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ff20:	e005      	b.n	800ff2e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ff22:	4b12      	ldr	r3, [pc, #72]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff26:	4a11      	ldr	r2, [pc, #68]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ff2c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ff2e:	4b0f      	ldr	r3, [pc, #60]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	4a0e      	ldr	r2, [pc, #56]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ff38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff3a:	f7f6 ffef 	bl	8006f1c <HAL_GetTick>
 800ff3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff40:	e008      	b.n	800ff54 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ff42:	f7f6 ffeb 	bl	8006f1c <HAL_GetTick>
 800ff46:	4602      	mov	r2, r0
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	1ad3      	subs	r3, r2, r3
 800ff4c:	2b02      	cmp	r3, #2
 800ff4e:	d901      	bls.n	800ff54 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ff50:	2303      	movs	r3, #3
 800ff52:	e006      	b.n	800ff62 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ff54:	4b05      	ldr	r3, [pc, #20]	; (800ff6c <RCCEx_PLL2_Config+0x15c>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d0f0      	beq.n	800ff42 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ff60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3710      	adds	r7, #16
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	58024400 	.word	0x58024400
 800ff70:	ffff0007 	.word	0xffff0007

0800ff74 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b084      	sub	sp, #16
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ff82:	4b53      	ldr	r3, [pc, #332]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 800ff84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff86:	f003 0303 	and.w	r3, r3, #3
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d101      	bne.n	800ff92 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e099      	b.n	80100c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ff92:	4b4f      	ldr	r3, [pc, #316]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	4a4e      	ldr	r2, [pc, #312]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 800ff98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff9e:	f7f6 ffbd 	bl	8006f1c <HAL_GetTick>
 800ffa2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffa4:	e008      	b.n	800ffb8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ffa6:	f7f6 ffb9 	bl	8006f1c <HAL_GetTick>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	2b02      	cmp	r3, #2
 800ffb2:	d901      	bls.n	800ffb8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ffb4:	2303      	movs	r3, #3
 800ffb6:	e086      	b.n	80100c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ffb8:	4b45      	ldr	r3, [pc, #276]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1f0      	bne.n	800ffa6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ffc4:	4b42      	ldr	r3, [pc, #264]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 800ffc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	051b      	lsls	r3, r3, #20
 800ffd2:	493f      	ldr	r1, [pc, #252]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	628b      	str	r3, [r1, #40]	; 0x28
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	689b      	ldr	r3, [r3, #8]
 800ffe6:	3b01      	subs	r3, #1
 800ffe8:	025b      	lsls	r3, r3, #9
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	431a      	orrs	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	3b01      	subs	r3, #1
 800fff4:	041b      	lsls	r3, r3, #16
 800fff6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fffa:	431a      	orrs	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	3b01      	subs	r3, #1
 8010002:	061b      	lsls	r3, r3, #24
 8010004:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010008:	4931      	ldr	r1, [pc, #196]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801000a:	4313      	orrs	r3, r2
 801000c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801000e:	4b30      	ldr	r3, [pc, #192]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010012:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	695b      	ldr	r3, [r3, #20]
 801001a:	492d      	ldr	r1, [pc, #180]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801001c:	4313      	orrs	r3, r2
 801001e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010020:	4b2b      	ldr	r3, [pc, #172]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010024:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	699b      	ldr	r3, [r3, #24]
 801002c:	4928      	ldr	r1, [pc, #160]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801002e:	4313      	orrs	r3, r2
 8010030:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010032:	4b27      	ldr	r3, [pc, #156]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010036:	4a26      	ldr	r2, [pc, #152]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801003c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801003e:	4b24      	ldr	r3, [pc, #144]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010042:	4b24      	ldr	r3, [pc, #144]	; (80100d4 <RCCEx_PLL3_Config+0x160>)
 8010044:	4013      	ands	r3, r2
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	69d2      	ldr	r2, [r2, #28]
 801004a:	00d2      	lsls	r2, r2, #3
 801004c:	4920      	ldr	r1, [pc, #128]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801004e:	4313      	orrs	r3, r2
 8010050:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8010052:	4b1f      	ldr	r3, [pc, #124]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010056:	4a1e      	ldr	r2, [pc, #120]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801005c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d106      	bne.n	8010072 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8010064:	4b1a      	ldr	r3, [pc, #104]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010068:	4a19      	ldr	r2, [pc, #100]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801006a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801006e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010070:	e00f      	b.n	8010092 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	2b01      	cmp	r3, #1
 8010076:	d106      	bne.n	8010086 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010078:	4b15      	ldr	r3, [pc, #84]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801007a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801007c:	4a14      	ldr	r2, [pc, #80]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801007e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010082:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010084:	e005      	b.n	8010092 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010086:	4b12      	ldr	r3, [pc, #72]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801008a:	4a11      	ldr	r2, [pc, #68]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 801008c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010090:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8010092:	4b0f      	ldr	r3, [pc, #60]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a0e      	ldr	r2, [pc, #56]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 8010098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801009c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801009e:	f7f6 ff3d 	bl	8006f1c <HAL_GetTick>
 80100a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100a4:	e008      	b.n	80100b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80100a6:	f7f6 ff39 	bl	8006f1c <HAL_GetTick>
 80100aa:	4602      	mov	r2, r0
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	2b02      	cmp	r3, #2
 80100b2:	d901      	bls.n	80100b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100b4:	2303      	movs	r3, #3
 80100b6:	e006      	b.n	80100c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <RCCEx_PLL3_Config+0x15c>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d0f0      	beq.n	80100a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80100c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}
 80100ce:	bf00      	nop
 80100d0:	58024400 	.word	0x58024400
 80100d4:	ffff0007 	.word	0xffff0007

080100d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d101      	bne.n	80100ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80100e6:	2301      	movs	r3, #1
 80100e8:	e049      	b.n	801017e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d106      	bne.n	8010104 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f7f6 faa8 	bl	8006654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2202      	movs	r2, #2
 8010108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681a      	ldr	r2, [r3, #0]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	3304      	adds	r3, #4
 8010114:	4619      	mov	r1, r3
 8010116:	4610      	mov	r0, r2
 8010118:	f001 f940 	bl	801139c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2201      	movs	r2, #1
 8010120:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2201      	movs	r2, #1
 8010128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2201      	movs	r2, #1
 8010138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2201      	movs	r2, #1
 8010140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	2201      	movs	r2, #1
 8010148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2201      	movs	r2, #1
 8010158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	2201      	movs	r2, #1
 8010160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2201      	movs	r2, #1
 8010168:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	2201      	movs	r2, #1
 8010170:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	2201      	movs	r2, #1
 8010178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801017c:	2300      	movs	r3, #0
}
 801017e:	4618      	mov	r0, r3
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
	...

08010188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010188:	b480      	push	{r7}
 801018a:	b085      	sub	sp, #20
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010196:	b2db      	uxtb	r3, r3
 8010198:	2b01      	cmp	r3, #1
 801019a:	d001      	beq.n	80101a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801019c:	2301      	movs	r3, #1
 801019e:	e054      	b.n	801024a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	2202      	movs	r2, #2
 80101a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	68da      	ldr	r2, [r3, #12]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	f042 0201 	orr.w	r2, r2, #1
 80101b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a26      	ldr	r2, [pc, #152]	; (8010258 <HAL_TIM_Base_Start_IT+0xd0>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d022      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101ca:	d01d      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	4a22      	ldr	r2, [pc, #136]	; (801025c <HAL_TIM_Base_Start_IT+0xd4>)
 80101d2:	4293      	cmp	r3, r2
 80101d4:	d018      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	4a21      	ldr	r2, [pc, #132]	; (8010260 <HAL_TIM_Base_Start_IT+0xd8>)
 80101dc:	4293      	cmp	r3, r2
 80101de:	d013      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	4a1f      	ldr	r2, [pc, #124]	; (8010264 <HAL_TIM_Base_Start_IT+0xdc>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d00e      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	4a1e      	ldr	r2, [pc, #120]	; (8010268 <HAL_TIM_Base_Start_IT+0xe0>)
 80101f0:	4293      	cmp	r3, r2
 80101f2:	d009      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	4a1c      	ldr	r2, [pc, #112]	; (801026c <HAL_TIM_Base_Start_IT+0xe4>)
 80101fa:	4293      	cmp	r3, r2
 80101fc:	d004      	beq.n	8010208 <HAL_TIM_Base_Start_IT+0x80>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a1b      	ldr	r2, [pc, #108]	; (8010270 <HAL_TIM_Base_Start_IT+0xe8>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d115      	bne.n	8010234 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	689a      	ldr	r2, [r3, #8]
 801020e:	4b19      	ldr	r3, [pc, #100]	; (8010274 <HAL_TIM_Base_Start_IT+0xec>)
 8010210:	4013      	ands	r3, r2
 8010212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	2b06      	cmp	r3, #6
 8010218:	d015      	beq.n	8010246 <HAL_TIM_Base_Start_IT+0xbe>
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010220:	d011      	beq.n	8010246 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	f042 0201 	orr.w	r2, r2, #1
 8010230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010232:	e008      	b.n	8010246 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	f042 0201 	orr.w	r2, r2, #1
 8010242:	601a      	str	r2, [r3, #0]
 8010244:	e000      	b.n	8010248 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010246:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	3714      	adds	r7, #20
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr
 8010256:	bf00      	nop
 8010258:	40010000 	.word	0x40010000
 801025c:	40000400 	.word	0x40000400
 8010260:	40000800 	.word	0x40000800
 8010264:	40000c00 	.word	0x40000c00
 8010268:	40010400 	.word	0x40010400
 801026c:	40001800 	.word	0x40001800
 8010270:	40014000 	.word	0x40014000
 8010274:	00010007 	.word	0x00010007

08010278 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b082      	sub	sp, #8
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d101      	bne.n	801028a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010286:	2301      	movs	r3, #1
 8010288:	e049      	b.n	801031e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010290:	b2db      	uxtb	r3, r3
 8010292:	2b00      	cmp	r3, #0
 8010294:	d106      	bne.n	80102a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2200      	movs	r2, #0
 801029a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 f841 	bl	8010326 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2202      	movs	r2, #2
 80102a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	3304      	adds	r3, #4
 80102b4:	4619      	mov	r1, r3
 80102b6:	4610      	mov	r0, r2
 80102b8:	f001 f870 	bl	801139c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2201      	movs	r2, #1
 80102c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	2201      	movs	r2, #1
 80102c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2201      	movs	r2, #1
 80102d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2201      	movs	r2, #1
 80102d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2201      	movs	r2, #1
 80102e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2201      	movs	r2, #1
 80102f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2201      	movs	r2, #1
 8010300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2201      	movs	r2, #1
 8010308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2201      	movs	r2, #1
 8010310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2201      	movs	r2, #1
 8010318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801031c:	2300      	movs	r3, #0
}
 801031e:	4618      	mov	r0, r3
 8010320:	3708      	adds	r7, #8
 8010322:	46bd      	mov	sp, r7
 8010324:	bd80      	pop	{r7, pc}

08010326 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010326:	b480      	push	{r7}
 8010328:	b083      	sub	sp, #12
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801032e:	bf00      	nop
 8010330:	370c      	adds	r7, #12
 8010332:	46bd      	mov	sp, r7
 8010334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010338:	4770      	bx	lr
	...

0801033c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d109      	bne.n	8010360 <HAL_TIM_PWM_Start+0x24>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010352:	b2db      	uxtb	r3, r3
 8010354:	2b01      	cmp	r3, #1
 8010356:	bf14      	ite	ne
 8010358:	2301      	movne	r3, #1
 801035a:	2300      	moveq	r3, #0
 801035c:	b2db      	uxtb	r3, r3
 801035e:	e03c      	b.n	80103da <HAL_TIM_PWM_Start+0x9e>
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2b04      	cmp	r3, #4
 8010364:	d109      	bne.n	801037a <HAL_TIM_PWM_Start+0x3e>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801036c:	b2db      	uxtb	r3, r3
 801036e:	2b01      	cmp	r3, #1
 8010370:	bf14      	ite	ne
 8010372:	2301      	movne	r3, #1
 8010374:	2300      	moveq	r3, #0
 8010376:	b2db      	uxtb	r3, r3
 8010378:	e02f      	b.n	80103da <HAL_TIM_PWM_Start+0x9e>
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	2b08      	cmp	r3, #8
 801037e:	d109      	bne.n	8010394 <HAL_TIM_PWM_Start+0x58>
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010386:	b2db      	uxtb	r3, r3
 8010388:	2b01      	cmp	r3, #1
 801038a:	bf14      	ite	ne
 801038c:	2301      	movne	r3, #1
 801038e:	2300      	moveq	r3, #0
 8010390:	b2db      	uxtb	r3, r3
 8010392:	e022      	b.n	80103da <HAL_TIM_PWM_Start+0x9e>
 8010394:	683b      	ldr	r3, [r7, #0]
 8010396:	2b0c      	cmp	r3, #12
 8010398:	d109      	bne.n	80103ae <HAL_TIM_PWM_Start+0x72>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	2b01      	cmp	r3, #1
 80103a4:	bf14      	ite	ne
 80103a6:	2301      	movne	r3, #1
 80103a8:	2300      	moveq	r3, #0
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	e015      	b.n	80103da <HAL_TIM_PWM_Start+0x9e>
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	2b10      	cmp	r3, #16
 80103b2:	d109      	bne.n	80103c8 <HAL_TIM_PWM_Start+0x8c>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	2b01      	cmp	r3, #1
 80103be:	bf14      	ite	ne
 80103c0:	2301      	movne	r3, #1
 80103c2:	2300      	moveq	r3, #0
 80103c4:	b2db      	uxtb	r3, r3
 80103c6:	e008      	b.n	80103da <HAL_TIM_PWM_Start+0x9e>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	bf14      	ite	ne
 80103d4:	2301      	movne	r3, #1
 80103d6:	2300      	moveq	r3, #0
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80103de:	2301      	movs	r3, #1
 80103e0:	e0a1      	b.n	8010526 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d104      	bne.n	80103f2 <HAL_TIM_PWM_Start+0xb6>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2202      	movs	r2, #2
 80103ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80103f0:	e023      	b.n	801043a <HAL_TIM_PWM_Start+0xfe>
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	2b04      	cmp	r3, #4
 80103f6:	d104      	bne.n	8010402 <HAL_TIM_PWM_Start+0xc6>
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2202      	movs	r2, #2
 80103fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010400:	e01b      	b.n	801043a <HAL_TIM_PWM_Start+0xfe>
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	2b08      	cmp	r3, #8
 8010406:	d104      	bne.n	8010412 <HAL_TIM_PWM_Start+0xd6>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2202      	movs	r2, #2
 801040c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010410:	e013      	b.n	801043a <HAL_TIM_PWM_Start+0xfe>
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	2b0c      	cmp	r3, #12
 8010416:	d104      	bne.n	8010422 <HAL_TIM_PWM_Start+0xe6>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2202      	movs	r2, #2
 801041c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010420:	e00b      	b.n	801043a <HAL_TIM_PWM_Start+0xfe>
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	2b10      	cmp	r3, #16
 8010426:	d104      	bne.n	8010432 <HAL_TIM_PWM_Start+0xf6>
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	2202      	movs	r2, #2
 801042c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010430:	e003      	b.n	801043a <HAL_TIM_PWM_Start+0xfe>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	2202      	movs	r2, #2
 8010436:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	2201      	movs	r2, #1
 8010440:	6839      	ldr	r1, [r7, #0]
 8010442:	4618      	mov	r0, r3
 8010444:	f001 fdcc 	bl	8011fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a38      	ldr	r2, [pc, #224]	; (8010530 <HAL_TIM_PWM_Start+0x1f4>)
 801044e:	4293      	cmp	r3, r2
 8010450:	d013      	beq.n	801047a <HAL_TIM_PWM_Start+0x13e>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	4a37      	ldr	r2, [pc, #220]	; (8010534 <HAL_TIM_PWM_Start+0x1f8>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d00e      	beq.n	801047a <HAL_TIM_PWM_Start+0x13e>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	4a35      	ldr	r2, [pc, #212]	; (8010538 <HAL_TIM_PWM_Start+0x1fc>)
 8010462:	4293      	cmp	r3, r2
 8010464:	d009      	beq.n	801047a <HAL_TIM_PWM_Start+0x13e>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	4a34      	ldr	r2, [pc, #208]	; (801053c <HAL_TIM_PWM_Start+0x200>)
 801046c:	4293      	cmp	r3, r2
 801046e:	d004      	beq.n	801047a <HAL_TIM_PWM_Start+0x13e>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a32      	ldr	r2, [pc, #200]	; (8010540 <HAL_TIM_PWM_Start+0x204>)
 8010476:	4293      	cmp	r3, r2
 8010478:	d101      	bne.n	801047e <HAL_TIM_PWM_Start+0x142>
 801047a:	2301      	movs	r3, #1
 801047c:	e000      	b.n	8010480 <HAL_TIM_PWM_Start+0x144>
 801047e:	2300      	movs	r3, #0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d007      	beq.n	8010494 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010492:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a25      	ldr	r2, [pc, #148]	; (8010530 <HAL_TIM_PWM_Start+0x1f4>)
 801049a:	4293      	cmp	r3, r2
 801049c:	d022      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80104a6:	d01d      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	4a25      	ldr	r2, [pc, #148]	; (8010544 <HAL_TIM_PWM_Start+0x208>)
 80104ae:	4293      	cmp	r3, r2
 80104b0:	d018      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	4a24      	ldr	r2, [pc, #144]	; (8010548 <HAL_TIM_PWM_Start+0x20c>)
 80104b8:	4293      	cmp	r3, r2
 80104ba:	d013      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a22      	ldr	r2, [pc, #136]	; (801054c <HAL_TIM_PWM_Start+0x210>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d00e      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4a1a      	ldr	r2, [pc, #104]	; (8010534 <HAL_TIM_PWM_Start+0x1f8>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d009      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	4a1e      	ldr	r2, [pc, #120]	; (8010550 <HAL_TIM_PWM_Start+0x214>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d004      	beq.n	80104e4 <HAL_TIM_PWM_Start+0x1a8>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4a16      	ldr	r2, [pc, #88]	; (8010538 <HAL_TIM_PWM_Start+0x1fc>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d115      	bne.n	8010510 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	689a      	ldr	r2, [r3, #8]
 80104ea:	4b1a      	ldr	r3, [pc, #104]	; (8010554 <HAL_TIM_PWM_Start+0x218>)
 80104ec:	4013      	ands	r3, r2
 80104ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	2b06      	cmp	r3, #6
 80104f4:	d015      	beq.n	8010522 <HAL_TIM_PWM_Start+0x1e6>
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80104fc:	d011      	beq.n	8010522 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f042 0201 	orr.w	r2, r2, #1
 801050c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801050e:	e008      	b.n	8010522 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	681a      	ldr	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f042 0201 	orr.w	r2, r2, #1
 801051e:	601a      	str	r2, [r3, #0]
 8010520:	e000      	b.n	8010524 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}
 801052e:	bf00      	nop
 8010530:	40010000 	.word	0x40010000
 8010534:	40010400 	.word	0x40010400
 8010538:	40014000 	.word	0x40014000
 801053c:	40014400 	.word	0x40014400
 8010540:	40014800 	.word	0x40014800
 8010544:	40000400 	.word	0x40000400
 8010548:	40000800 	.word	0x40000800
 801054c:	40000c00 	.word	0x40000c00
 8010550:	40001800 	.word	0x40001800
 8010554:	00010007 	.word	0x00010007

08010558 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d101      	bne.n	801056a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8010566:	2301      	movs	r3, #1
 8010568:	e049      	b.n	80105fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010570:	b2db      	uxtb	r3, r3
 8010572:	2b00      	cmp	r3, #0
 8010574:	d106      	bne.n	8010584 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f000 f841 	bl	8010606 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2202      	movs	r2, #2
 8010588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681a      	ldr	r2, [r3, #0]
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	3304      	adds	r3, #4
 8010594:	4619      	mov	r1, r3
 8010596:	4610      	mov	r0, r2
 8010598:	f000 ff00 	bl	801139c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2201      	movs	r2, #1
 80105d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2201      	movs	r2, #1
 80105f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2201      	movs	r2, #1
 80105f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80105fc:	2300      	movs	r3, #0
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3708      	adds	r7, #8
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}

08010606 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801060e:	bf00      	nop
 8010610:	370c      	adds	r7, #12
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr
	...

0801061c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b084      	sub	sp, #16
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d104      	bne.n	8010636 <HAL_TIM_IC_Start+0x1a>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010632:	b2db      	uxtb	r3, r3
 8010634:	e023      	b.n	801067e <HAL_TIM_IC_Start+0x62>
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	2b04      	cmp	r3, #4
 801063a:	d104      	bne.n	8010646 <HAL_TIM_IC_Start+0x2a>
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010642:	b2db      	uxtb	r3, r3
 8010644:	e01b      	b.n	801067e <HAL_TIM_IC_Start+0x62>
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b08      	cmp	r3, #8
 801064a:	d104      	bne.n	8010656 <HAL_TIM_IC_Start+0x3a>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010652:	b2db      	uxtb	r3, r3
 8010654:	e013      	b.n	801067e <HAL_TIM_IC_Start+0x62>
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	2b0c      	cmp	r3, #12
 801065a:	d104      	bne.n	8010666 <HAL_TIM_IC_Start+0x4a>
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010662:	b2db      	uxtb	r3, r3
 8010664:	e00b      	b.n	801067e <HAL_TIM_IC_Start+0x62>
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2b10      	cmp	r3, #16
 801066a:	d104      	bne.n	8010676 <HAL_TIM_IC_Start+0x5a>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010672:	b2db      	uxtb	r3, r3
 8010674:	e003      	b.n	801067e <HAL_TIM_IC_Start+0x62>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801067c:	b2db      	uxtb	r3, r3
 801067e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d104      	bne.n	8010690 <HAL_TIM_IC_Start+0x74>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801068c:	b2db      	uxtb	r3, r3
 801068e:	e013      	b.n	80106b8 <HAL_TIM_IC_Start+0x9c>
 8010690:	683b      	ldr	r3, [r7, #0]
 8010692:	2b04      	cmp	r3, #4
 8010694:	d104      	bne.n	80106a0 <HAL_TIM_IC_Start+0x84>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801069c:	b2db      	uxtb	r3, r3
 801069e:	e00b      	b.n	80106b8 <HAL_TIM_IC_Start+0x9c>
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	2b08      	cmp	r3, #8
 80106a4:	d104      	bne.n	80106b0 <HAL_TIM_IC_Start+0x94>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80106ac:	b2db      	uxtb	r3, r3
 80106ae:	e003      	b.n	80106b8 <HAL_TIM_IC_Start+0x9c>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80106b6:	b2db      	uxtb	r3, r3
 80106b8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80106ba:	7bfb      	ldrb	r3, [r7, #15]
 80106bc:	2b01      	cmp	r3, #1
 80106be:	d102      	bne.n	80106c6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80106c0:	7bbb      	ldrb	r3, [r7, #14]
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d001      	beq.n	80106ca <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 80106c6:	2301      	movs	r3, #1
 80106c8:	e097      	b.n	80107fa <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d104      	bne.n	80106da <HAL_TIM_IC_Start+0xbe>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2202      	movs	r2, #2
 80106d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106d8:	e023      	b.n	8010722 <HAL_TIM_IC_Start+0x106>
 80106da:	683b      	ldr	r3, [r7, #0]
 80106dc:	2b04      	cmp	r3, #4
 80106de:	d104      	bne.n	80106ea <HAL_TIM_IC_Start+0xce>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2202      	movs	r2, #2
 80106e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106e8:	e01b      	b.n	8010722 <HAL_TIM_IC_Start+0x106>
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	2b08      	cmp	r3, #8
 80106ee:	d104      	bne.n	80106fa <HAL_TIM_IC_Start+0xde>
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2202      	movs	r2, #2
 80106f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106f8:	e013      	b.n	8010722 <HAL_TIM_IC_Start+0x106>
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	2b0c      	cmp	r3, #12
 80106fe:	d104      	bne.n	801070a <HAL_TIM_IC_Start+0xee>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2202      	movs	r2, #2
 8010704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010708:	e00b      	b.n	8010722 <HAL_TIM_IC_Start+0x106>
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	2b10      	cmp	r3, #16
 801070e:	d104      	bne.n	801071a <HAL_TIM_IC_Start+0xfe>
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2202      	movs	r2, #2
 8010714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010718:	e003      	b.n	8010722 <HAL_TIM_IC_Start+0x106>
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	2202      	movs	r2, #2
 801071e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d104      	bne.n	8010732 <HAL_TIM_IC_Start+0x116>
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2202      	movs	r2, #2
 801072c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010730:	e013      	b.n	801075a <HAL_TIM_IC_Start+0x13e>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	2b04      	cmp	r3, #4
 8010736:	d104      	bne.n	8010742 <HAL_TIM_IC_Start+0x126>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	2202      	movs	r2, #2
 801073c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010740:	e00b      	b.n	801075a <HAL_TIM_IC_Start+0x13e>
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	2b08      	cmp	r3, #8
 8010746:	d104      	bne.n	8010752 <HAL_TIM_IC_Start+0x136>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2202      	movs	r2, #2
 801074c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010750:	e003      	b.n	801075a <HAL_TIM_IC_Start+0x13e>
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2202      	movs	r2, #2
 8010756:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2201      	movs	r2, #1
 8010760:	6839      	ldr	r1, [r7, #0]
 8010762:	4618      	mov	r0, r3
 8010764:	f001 fc3c 	bl	8011fe0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a25      	ldr	r2, [pc, #148]	; (8010804 <HAL_TIM_IC_Start+0x1e8>)
 801076e:	4293      	cmp	r3, r2
 8010770:	d022      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801077a:	d01d      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	4a21      	ldr	r2, [pc, #132]	; (8010808 <HAL_TIM_IC_Start+0x1ec>)
 8010782:	4293      	cmp	r3, r2
 8010784:	d018      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	4a20      	ldr	r2, [pc, #128]	; (801080c <HAL_TIM_IC_Start+0x1f0>)
 801078c:	4293      	cmp	r3, r2
 801078e:	d013      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	4a1e      	ldr	r2, [pc, #120]	; (8010810 <HAL_TIM_IC_Start+0x1f4>)
 8010796:	4293      	cmp	r3, r2
 8010798:	d00e      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	4a1d      	ldr	r2, [pc, #116]	; (8010814 <HAL_TIM_IC_Start+0x1f8>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d009      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4a1b      	ldr	r2, [pc, #108]	; (8010818 <HAL_TIM_IC_Start+0x1fc>)
 80107aa:	4293      	cmp	r3, r2
 80107ac:	d004      	beq.n	80107b8 <HAL_TIM_IC_Start+0x19c>
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	4a1a      	ldr	r2, [pc, #104]	; (801081c <HAL_TIM_IC_Start+0x200>)
 80107b4:	4293      	cmp	r3, r2
 80107b6:	d115      	bne.n	80107e4 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	689a      	ldr	r2, [r3, #8]
 80107be:	4b18      	ldr	r3, [pc, #96]	; (8010820 <HAL_TIM_IC_Start+0x204>)
 80107c0:	4013      	ands	r3, r2
 80107c2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	2b06      	cmp	r3, #6
 80107c8:	d015      	beq.n	80107f6 <HAL_TIM_IC_Start+0x1da>
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107d0:	d011      	beq.n	80107f6 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f042 0201 	orr.w	r2, r2, #1
 80107e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107e2:	e008      	b.n	80107f6 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	681a      	ldr	r2, [r3, #0]
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	f042 0201 	orr.w	r2, r2, #1
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	e000      	b.n	80107f8 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80107f8:	2300      	movs	r3, #0
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3710      	adds	r7, #16
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	40010000 	.word	0x40010000
 8010808:	40000400 	.word	0x40000400
 801080c:	40000800 	.word	0x40000800
 8010810:	40000c00 	.word	0x40000c00
 8010814:	40010400 	.word	0x40010400
 8010818:	40001800 	.word	0x40001800
 801081c:	40014000 	.word	0x40014000
 8010820:	00010007 	.word	0x00010007

08010824 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b084      	sub	sp, #16
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801082e:	2300      	movs	r3, #0
 8010830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d104      	bne.n	8010842 <HAL_TIM_IC_Start_IT+0x1e>
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801083e:	b2db      	uxtb	r3, r3
 8010840:	e023      	b.n	801088a <HAL_TIM_IC_Start_IT+0x66>
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	2b04      	cmp	r3, #4
 8010846:	d104      	bne.n	8010852 <HAL_TIM_IC_Start_IT+0x2e>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801084e:	b2db      	uxtb	r3, r3
 8010850:	e01b      	b.n	801088a <HAL_TIM_IC_Start_IT+0x66>
 8010852:	683b      	ldr	r3, [r7, #0]
 8010854:	2b08      	cmp	r3, #8
 8010856:	d104      	bne.n	8010862 <HAL_TIM_IC_Start_IT+0x3e>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801085e:	b2db      	uxtb	r3, r3
 8010860:	e013      	b.n	801088a <HAL_TIM_IC_Start_IT+0x66>
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	2b0c      	cmp	r3, #12
 8010866:	d104      	bne.n	8010872 <HAL_TIM_IC_Start_IT+0x4e>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801086e:	b2db      	uxtb	r3, r3
 8010870:	e00b      	b.n	801088a <HAL_TIM_IC_Start_IT+0x66>
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	2b10      	cmp	r3, #16
 8010876:	d104      	bne.n	8010882 <HAL_TIM_IC_Start_IT+0x5e>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801087e:	b2db      	uxtb	r3, r3
 8010880:	e003      	b.n	801088a <HAL_TIM_IC_Start_IT+0x66>
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010888:	b2db      	uxtb	r3, r3
 801088a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d104      	bne.n	801089c <HAL_TIM_IC_Start_IT+0x78>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010898:	b2db      	uxtb	r3, r3
 801089a:	e013      	b.n	80108c4 <HAL_TIM_IC_Start_IT+0xa0>
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	2b04      	cmp	r3, #4
 80108a0:	d104      	bne.n	80108ac <HAL_TIM_IC_Start_IT+0x88>
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80108a8:	b2db      	uxtb	r3, r3
 80108aa:	e00b      	b.n	80108c4 <HAL_TIM_IC_Start_IT+0xa0>
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	2b08      	cmp	r3, #8
 80108b0:	d104      	bne.n	80108bc <HAL_TIM_IC_Start_IT+0x98>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80108b8:	b2db      	uxtb	r3, r3
 80108ba:	e003      	b.n	80108c4 <HAL_TIM_IC_Start_IT+0xa0>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80108c6:	7bbb      	ldrb	r3, [r7, #14]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d102      	bne.n	80108d2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80108cc:	7b7b      	ldrb	r3, [r7, #13]
 80108ce:	2b01      	cmp	r3, #1
 80108d0:	d001      	beq.n	80108d6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e0e2      	b.n	8010a9c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d104      	bne.n	80108e6 <HAL_TIM_IC_Start_IT+0xc2>
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2202      	movs	r2, #2
 80108e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80108e4:	e023      	b.n	801092e <HAL_TIM_IC_Start_IT+0x10a>
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	2b04      	cmp	r3, #4
 80108ea:	d104      	bne.n	80108f6 <HAL_TIM_IC_Start_IT+0xd2>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2202      	movs	r2, #2
 80108f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80108f4:	e01b      	b.n	801092e <HAL_TIM_IC_Start_IT+0x10a>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	2b08      	cmp	r3, #8
 80108fa:	d104      	bne.n	8010906 <HAL_TIM_IC_Start_IT+0xe2>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	2202      	movs	r2, #2
 8010900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010904:	e013      	b.n	801092e <HAL_TIM_IC_Start_IT+0x10a>
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	2b0c      	cmp	r3, #12
 801090a:	d104      	bne.n	8010916 <HAL_TIM_IC_Start_IT+0xf2>
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	2202      	movs	r2, #2
 8010910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010914:	e00b      	b.n	801092e <HAL_TIM_IC_Start_IT+0x10a>
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b10      	cmp	r3, #16
 801091a:	d104      	bne.n	8010926 <HAL_TIM_IC_Start_IT+0x102>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2202      	movs	r2, #2
 8010920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010924:	e003      	b.n	801092e <HAL_TIM_IC_Start_IT+0x10a>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	2202      	movs	r2, #2
 801092a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d104      	bne.n	801093e <HAL_TIM_IC_Start_IT+0x11a>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2202      	movs	r2, #2
 8010938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801093c:	e013      	b.n	8010966 <HAL_TIM_IC_Start_IT+0x142>
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2b04      	cmp	r3, #4
 8010942:	d104      	bne.n	801094e <HAL_TIM_IC_Start_IT+0x12a>
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	2202      	movs	r2, #2
 8010948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801094c:	e00b      	b.n	8010966 <HAL_TIM_IC_Start_IT+0x142>
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	2b08      	cmp	r3, #8
 8010952:	d104      	bne.n	801095e <HAL_TIM_IC_Start_IT+0x13a>
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2202      	movs	r2, #2
 8010958:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801095c:	e003      	b.n	8010966 <HAL_TIM_IC_Start_IT+0x142>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	2202      	movs	r2, #2
 8010962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	2b0c      	cmp	r3, #12
 801096a:	d841      	bhi.n	80109f0 <HAL_TIM_IC_Start_IT+0x1cc>
 801096c:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <HAL_TIM_IC_Start_IT+0x150>)
 801096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010972:	bf00      	nop
 8010974:	080109a9 	.word	0x080109a9
 8010978:	080109f1 	.word	0x080109f1
 801097c:	080109f1 	.word	0x080109f1
 8010980:	080109f1 	.word	0x080109f1
 8010984:	080109bb 	.word	0x080109bb
 8010988:	080109f1 	.word	0x080109f1
 801098c:	080109f1 	.word	0x080109f1
 8010990:	080109f1 	.word	0x080109f1
 8010994:	080109cd 	.word	0x080109cd
 8010998:	080109f1 	.word	0x080109f1
 801099c:	080109f1 	.word	0x080109f1
 80109a0:	080109f1 	.word	0x080109f1
 80109a4:	080109df 	.word	0x080109df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	68da      	ldr	r2, [r3, #12]
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	f042 0202 	orr.w	r2, r2, #2
 80109b6:	60da      	str	r2, [r3, #12]
      break;
 80109b8:	e01d      	b.n	80109f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	68da      	ldr	r2, [r3, #12]
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f042 0204 	orr.w	r2, r2, #4
 80109c8:	60da      	str	r2, [r3, #12]
      break;
 80109ca:	e014      	b.n	80109f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	68da      	ldr	r2, [r3, #12]
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f042 0208 	orr.w	r2, r2, #8
 80109da:	60da      	str	r2, [r3, #12]
      break;
 80109dc:	e00b      	b.n	80109f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	68da      	ldr	r2, [r3, #12]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	f042 0210 	orr.w	r2, r2, #16
 80109ec:	60da      	str	r2, [r3, #12]
      break;
 80109ee:	e002      	b.n	80109f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80109f0:	2301      	movs	r3, #1
 80109f2:	73fb      	strb	r3, [r7, #15]
      break;
 80109f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d14e      	bne.n	8010a9a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2201      	movs	r2, #1
 8010a02:	6839      	ldr	r1, [r7, #0]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f001 faeb 	bl	8011fe0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a25      	ldr	r2, [pc, #148]	; (8010aa4 <HAL_TIM_IC_Start_IT+0x280>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d022      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a1c:	d01d      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	4a21      	ldr	r2, [pc, #132]	; (8010aa8 <HAL_TIM_IC_Start_IT+0x284>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d018      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a1f      	ldr	r2, [pc, #124]	; (8010aac <HAL_TIM_IC_Start_IT+0x288>)
 8010a2e:	4293      	cmp	r3, r2
 8010a30:	d013      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	4a1e      	ldr	r2, [pc, #120]	; (8010ab0 <HAL_TIM_IC_Start_IT+0x28c>)
 8010a38:	4293      	cmp	r3, r2
 8010a3a:	d00e      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	4a1c      	ldr	r2, [pc, #112]	; (8010ab4 <HAL_TIM_IC_Start_IT+0x290>)
 8010a42:	4293      	cmp	r3, r2
 8010a44:	d009      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	4a1b      	ldr	r2, [pc, #108]	; (8010ab8 <HAL_TIM_IC_Start_IT+0x294>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d004      	beq.n	8010a5a <HAL_TIM_IC_Start_IT+0x236>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	4a19      	ldr	r2, [pc, #100]	; (8010abc <HAL_TIM_IC_Start_IT+0x298>)
 8010a56:	4293      	cmp	r3, r2
 8010a58:	d115      	bne.n	8010a86 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	689a      	ldr	r2, [r3, #8]
 8010a60:	4b17      	ldr	r3, [pc, #92]	; (8010ac0 <HAL_TIM_IC_Start_IT+0x29c>)
 8010a62:	4013      	ands	r3, r2
 8010a64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a66:	68bb      	ldr	r3, [r7, #8]
 8010a68:	2b06      	cmp	r3, #6
 8010a6a:	d015      	beq.n	8010a98 <HAL_TIM_IC_Start_IT+0x274>
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010a72:	d011      	beq.n	8010a98 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f042 0201 	orr.w	r2, r2, #1
 8010a82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a84:	e008      	b.n	8010a98 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	681a      	ldr	r2, [r3, #0]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	f042 0201 	orr.w	r2, r2, #1
 8010a94:	601a      	str	r2, [r3, #0]
 8010a96:	e000      	b.n	8010a9a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a98:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3710      	adds	r7, #16
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	40010000 	.word	0x40010000
 8010aa8:	40000400 	.word	0x40000400
 8010aac:	40000800 	.word	0x40000800
 8010ab0:	40000c00 	.word	0x40000c00
 8010ab4:	40010400 	.word	0x40010400
 8010ab8:	40001800 	.word	0x40001800
 8010abc:	40014000 	.word	0x40014000
 8010ac0:	00010007 	.word	0x00010007

08010ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b082      	sub	sp, #8
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	f003 0302 	and.w	r3, r3, #2
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	d122      	bne.n	8010b20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	f003 0302 	and.w	r3, r3, #2
 8010ae4:	2b02      	cmp	r3, #2
 8010ae6:	d11b      	bne.n	8010b20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	f06f 0202 	mvn.w	r2, #2
 8010af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	2201      	movs	r2, #1
 8010af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	699b      	ldr	r3, [r3, #24]
 8010afe:	f003 0303 	and.w	r3, r3, #3
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d003      	beq.n	8010b0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f7f3 fb70 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8010b0c:	e005      	b.n	8010b1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f000 fc26 	bl	8011360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f000 fc2d 	bl	8011374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	f003 0304 	and.w	r3, r3, #4
 8010b2a:	2b04      	cmp	r3, #4
 8010b2c:	d122      	bne.n	8010b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	f003 0304 	and.w	r3, r3, #4
 8010b38:	2b04      	cmp	r3, #4
 8010b3a:	d11b      	bne.n	8010b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	f06f 0204 	mvn.w	r2, #4
 8010b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	2202      	movs	r2, #2
 8010b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	699b      	ldr	r3, [r3, #24]
 8010b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d003      	beq.n	8010b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f7f3 fb46 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8010b60:	e005      	b.n	8010b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 fbfc 	bl	8011360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b68:	6878      	ldr	r0, [r7, #4]
 8010b6a:	f000 fc03 	bl	8011374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	691b      	ldr	r3, [r3, #16]
 8010b7a:	f003 0308 	and.w	r3, r3, #8
 8010b7e:	2b08      	cmp	r3, #8
 8010b80:	d122      	bne.n	8010bc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	68db      	ldr	r3, [r3, #12]
 8010b88:	f003 0308 	and.w	r3, r3, #8
 8010b8c:	2b08      	cmp	r3, #8
 8010b8e:	d11b      	bne.n	8010bc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f06f 0208 	mvn.w	r2, #8
 8010b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2204      	movs	r2, #4
 8010b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	69db      	ldr	r3, [r3, #28]
 8010ba6:	f003 0303 	and.w	r3, r3, #3
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d003      	beq.n	8010bb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f7f3 fb1c 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8010bb4:	e005      	b.n	8010bc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 fbd2 	bl	8011360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fbd9 	bl	8011374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	691b      	ldr	r3, [r3, #16]
 8010bce:	f003 0310 	and.w	r3, r3, #16
 8010bd2:	2b10      	cmp	r3, #16
 8010bd4:	d122      	bne.n	8010c1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	68db      	ldr	r3, [r3, #12]
 8010bdc:	f003 0310 	and.w	r3, r3, #16
 8010be0:	2b10      	cmp	r3, #16
 8010be2:	d11b      	bne.n	8010c1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	f06f 0210 	mvn.w	r2, #16
 8010bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2208      	movs	r2, #8
 8010bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	69db      	ldr	r3, [r3, #28]
 8010bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d003      	beq.n	8010c0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f7f3 faf2 	bl	80041ec <HAL_TIM_IC_CaptureCallback>
 8010c08:	e005      	b.n	8010c16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 fba8 	bl	8011360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 fbaf 	bl	8011374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	2200      	movs	r2, #0
 8010c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	691b      	ldr	r3, [r3, #16]
 8010c22:	f003 0301 	and.w	r3, r3, #1
 8010c26:	2b01      	cmp	r3, #1
 8010c28:	d10e      	bne.n	8010c48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	f003 0301 	and.w	r3, r3, #1
 8010c34:	2b01      	cmp	r3, #1
 8010c36:	d107      	bne.n	8010c48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f06f 0201 	mvn.w	r2, #1
 8010c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f7f3 fb7e 	bl	8004344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	691b      	ldr	r3, [r3, #16]
 8010c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c52:	2b80      	cmp	r3, #128	; 0x80
 8010c54:	d10e      	bne.n	8010c74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c60:	2b80      	cmp	r3, #128	; 0x80
 8010c62:	d107      	bne.n	8010c74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f001 fa74 	bl	801215c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	691b      	ldr	r3, [r3, #16]
 8010c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c82:	d10e      	bne.n	8010ca2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c8e:	2b80      	cmp	r3, #128	; 0x80
 8010c90:	d107      	bne.n	8010ca2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010c9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f001 fa67 	bl	8012170 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	691b      	ldr	r3, [r3, #16]
 8010ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cac:	2b40      	cmp	r3, #64	; 0x40
 8010cae:	d10e      	bne.n	8010cce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	68db      	ldr	r3, [r3, #12]
 8010cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cba:	2b40      	cmp	r3, #64	; 0x40
 8010cbc:	d107      	bne.n	8010cce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 fb5d 	bl	8011388 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	691b      	ldr	r3, [r3, #16]
 8010cd4:	f003 0320 	and.w	r3, r3, #32
 8010cd8:	2b20      	cmp	r3, #32
 8010cda:	d10e      	bne.n	8010cfa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	68db      	ldr	r3, [r3, #12]
 8010ce2:	f003 0320 	and.w	r3, r3, #32
 8010ce6:	2b20      	cmp	r3, #32
 8010ce8:	d107      	bne.n	8010cfa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f06f 0220 	mvn.w	r2, #32
 8010cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f001 fa27 	bl	8012148 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010cfa:	bf00      	nop
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	b086      	sub	sp, #24
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	60f8      	str	r0, [r7, #12]
 8010d0a:	60b9      	str	r1, [r7, #8]
 8010d0c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010d0e:	2300      	movs	r3, #0
 8010d10:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010d18:	2b01      	cmp	r3, #1
 8010d1a:	d101      	bne.n	8010d20 <HAL_TIM_IC_ConfigChannel+0x1e>
 8010d1c:	2302      	movs	r3, #2
 8010d1e:	e088      	b.n	8010e32 <HAL_TIM_IC_ConfigChannel+0x130>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2201      	movs	r2, #1
 8010d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d11b      	bne.n	8010d66 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010d3a:	68bb      	ldr	r3, [r7, #8]
 8010d3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8010d3e:	f000 ff87 	bl	8011c50 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	699a      	ldr	r2, [r3, #24]
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f022 020c 	bic.w	r2, r2, #12
 8010d50:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6999      	ldr	r1, [r3, #24]
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	689a      	ldr	r2, [r3, #8]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	430a      	orrs	r2, r1
 8010d62:	619a      	str	r2, [r3, #24]
 8010d64:	e060      	b.n	8010e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2b04      	cmp	r3, #4
 8010d6a:	d11c      	bne.n	8010da6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8010d6c:	68fb      	ldr	r3, [r7, #12]
 8010d6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8010d7c:	f001 f80b 	bl	8011d96 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	699a      	ldr	r2, [r3, #24]
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010d8e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6999      	ldr	r1, [r3, #24]
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	021a      	lsls	r2, r3, #8
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	430a      	orrs	r2, r1
 8010da2:	619a      	str	r2, [r3, #24]
 8010da4:	e040      	b.n	8010e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2b08      	cmp	r3, #8
 8010daa:	d11b      	bne.n	8010de4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8010dbc:	f001 f858 	bl	8011e70 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	69da      	ldr	r2, [r3, #28]
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	f022 020c 	bic.w	r2, r2, #12
 8010dce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	69d9      	ldr	r1, [r3, #28]
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	689a      	ldr	r2, [r3, #8]
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	430a      	orrs	r2, r1
 8010de0:	61da      	str	r2, [r3, #28]
 8010de2:	e021      	b.n	8010e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2b0c      	cmp	r3, #12
 8010de8:	d11c      	bne.n	8010e24 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8010df6:	68bb      	ldr	r3, [r7, #8]
 8010df8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8010dfa:	f001 f875 	bl	8011ee8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	69da      	ldr	r2, [r3, #28]
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8010e0c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	69d9      	ldr	r1, [r3, #28]
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	689b      	ldr	r3, [r3, #8]
 8010e18:	021a      	lsls	r2, r3, #8
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	61da      	str	r2, [r3, #28]
 8010e22:	e001      	b.n	8010e28 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8010e24:	2301      	movs	r3, #1
 8010e26:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3718      	adds	r7, #24
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd80      	pop	{r7, pc}
	...

08010e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b086      	sub	sp, #24
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60f8      	str	r0, [r7, #12]
 8010e44:	60b9      	str	r1, [r7, #8]
 8010e46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e48:	2300      	movs	r3, #0
 8010e4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	d101      	bne.n	8010e5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010e56:	2302      	movs	r3, #2
 8010e58:	e0ff      	b.n	801105a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	2201      	movs	r2, #1
 8010e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2b14      	cmp	r3, #20
 8010e66:	f200 80f0 	bhi.w	801104a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010e6a:	a201      	add	r2, pc, #4	; (adr r2, 8010e70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e70:	08010ec5 	.word	0x08010ec5
 8010e74:	0801104b 	.word	0x0801104b
 8010e78:	0801104b 	.word	0x0801104b
 8010e7c:	0801104b 	.word	0x0801104b
 8010e80:	08010f05 	.word	0x08010f05
 8010e84:	0801104b 	.word	0x0801104b
 8010e88:	0801104b 	.word	0x0801104b
 8010e8c:	0801104b 	.word	0x0801104b
 8010e90:	08010f47 	.word	0x08010f47
 8010e94:	0801104b 	.word	0x0801104b
 8010e98:	0801104b 	.word	0x0801104b
 8010e9c:	0801104b 	.word	0x0801104b
 8010ea0:	08010f87 	.word	0x08010f87
 8010ea4:	0801104b 	.word	0x0801104b
 8010ea8:	0801104b 	.word	0x0801104b
 8010eac:	0801104b 	.word	0x0801104b
 8010eb0:	08010fc9 	.word	0x08010fc9
 8010eb4:	0801104b 	.word	0x0801104b
 8010eb8:	0801104b 	.word	0x0801104b
 8010ebc:	0801104b 	.word	0x0801104b
 8010ec0:	08011009 	.word	0x08011009
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	68b9      	ldr	r1, [r7, #8]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f000 fb00 	bl	80114d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	699a      	ldr	r2, [r3, #24]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f042 0208 	orr.w	r2, r2, #8
 8010ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	699a      	ldr	r2, [r3, #24]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f022 0204 	bic.w	r2, r2, #4
 8010eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	6999      	ldr	r1, [r3, #24]
 8010ef6:	68bb      	ldr	r3, [r7, #8]
 8010ef8:	691a      	ldr	r2, [r3, #16]
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	430a      	orrs	r2, r1
 8010f00:	619a      	str	r2, [r3, #24]
      break;
 8010f02:	e0a5      	b.n	8011050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	68b9      	ldr	r1, [r7, #8]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f000 fb70 	bl	80115f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	699a      	ldr	r2, [r3, #24]
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	699a      	ldr	r2, [r3, #24]
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	6999      	ldr	r1, [r3, #24]
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	021a      	lsls	r2, r3, #8
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	430a      	orrs	r2, r1
 8010f42:	619a      	str	r2, [r3, #24]
      break;
 8010f44:	e084      	b.n	8011050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	68b9      	ldr	r1, [r7, #8]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f000 fbd9 	bl	8011704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	69da      	ldr	r2, [r3, #28]
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f042 0208 	orr.w	r2, r2, #8
 8010f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	69da      	ldr	r2, [r3, #28]
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f022 0204 	bic.w	r2, r2, #4
 8010f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	69d9      	ldr	r1, [r3, #28]
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	691a      	ldr	r2, [r3, #16]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	430a      	orrs	r2, r1
 8010f82:	61da      	str	r2, [r3, #28]
      break;
 8010f84:	e064      	b.n	8011050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	68b9      	ldr	r1, [r7, #8]
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f000 fc41 	bl	8011814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	69da      	ldr	r2, [r3, #28]
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	69da      	ldr	r2, [r3, #28]
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	69d9      	ldr	r1, [r3, #28]
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	691b      	ldr	r3, [r3, #16]
 8010fbc:	021a      	lsls	r2, r3, #8
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	430a      	orrs	r2, r1
 8010fc4:	61da      	str	r2, [r3, #28]
      break;
 8010fc6:	e043      	b.n	8011050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	68b9      	ldr	r1, [r7, #8]
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f000 fc8a 	bl	80118e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f042 0208 	orr.w	r2, r2, #8
 8010fe2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	f022 0204 	bic.w	r2, r2, #4
 8010ff2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	691a      	ldr	r2, [r3, #16]
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	430a      	orrs	r2, r1
 8011004:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011006:	e023      	b.n	8011050 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	68b9      	ldr	r1, [r7, #8]
 801100e:	4618      	mov	r0, r3
 8011010:	f000 fcce 	bl	80119b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011022:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8011032:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	691b      	ldr	r3, [r3, #16]
 801103e:	021a      	lsls	r2, r3, #8
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	430a      	orrs	r2, r1
 8011046:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011048:	e002      	b.n	8011050 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801104a:	2301      	movs	r3, #1
 801104c:	75fb      	strb	r3, [r7, #23]
      break;
 801104e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2200      	movs	r2, #0
 8011054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011058:	7dfb      	ldrb	r3, [r7, #23]
}
 801105a:	4618      	mov	r0, r3
 801105c:	3718      	adds	r7, #24
 801105e:	46bd      	mov	sp, r7
 8011060:	bd80      	pop	{r7, pc}
 8011062:	bf00      	nop

08011064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801106e:	2300      	movs	r3, #0
 8011070:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011078:	2b01      	cmp	r3, #1
 801107a:	d101      	bne.n	8011080 <HAL_TIM_ConfigClockSource+0x1c>
 801107c:	2302      	movs	r3, #2
 801107e:	e0dc      	b.n	801123a <HAL_TIM_ConfigClockSource+0x1d6>
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2201      	movs	r2, #1
 8011084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	2202      	movs	r2, #2
 801108c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	689b      	ldr	r3, [r3, #8]
 8011096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011098:	68ba      	ldr	r2, [r7, #8]
 801109a:	4b6a      	ldr	r3, [pc, #424]	; (8011244 <HAL_TIM_ConfigClockSource+0x1e0>)
 801109c:	4013      	ands	r3, r2
 801109e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80110a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a64      	ldr	r2, [pc, #400]	; (8011248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80110b6:	4293      	cmp	r3, r2
 80110b8:	f000 80a9 	beq.w	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 80110bc:	4a62      	ldr	r2, [pc, #392]	; (8011248 <HAL_TIM_ConfigClockSource+0x1e4>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	f200 80ae 	bhi.w	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 80110c4:	4a61      	ldr	r2, [pc, #388]	; (801124c <HAL_TIM_ConfigClockSource+0x1e8>)
 80110c6:	4293      	cmp	r3, r2
 80110c8:	f000 80a1 	beq.w	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 80110cc:	4a5f      	ldr	r2, [pc, #380]	; (801124c <HAL_TIM_ConfigClockSource+0x1e8>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	f200 80a6 	bhi.w	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 80110d4:	4a5e      	ldr	r2, [pc, #376]	; (8011250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	f000 8099 	beq.w	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 80110dc:	4a5c      	ldr	r2, [pc, #368]	; (8011250 <HAL_TIM_ConfigClockSource+0x1ec>)
 80110de:	4293      	cmp	r3, r2
 80110e0:	f200 809e 	bhi.w	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 80110e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80110e8:	f000 8091 	beq.w	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 80110ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80110f0:	f200 8096 	bhi.w	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 80110f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110f8:	f000 8089 	beq.w	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 80110fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011100:	f200 808e 	bhi.w	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011108:	d03e      	beq.n	8011188 <HAL_TIM_ConfigClockSource+0x124>
 801110a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801110e:	f200 8087 	bhi.w	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011116:	f000 8086 	beq.w	8011226 <HAL_TIM_ConfigClockSource+0x1c2>
 801111a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801111e:	d87f      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011120:	2b70      	cmp	r3, #112	; 0x70
 8011122:	d01a      	beq.n	801115a <HAL_TIM_ConfigClockSource+0xf6>
 8011124:	2b70      	cmp	r3, #112	; 0x70
 8011126:	d87b      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011128:	2b60      	cmp	r3, #96	; 0x60
 801112a:	d050      	beq.n	80111ce <HAL_TIM_ConfigClockSource+0x16a>
 801112c:	2b60      	cmp	r3, #96	; 0x60
 801112e:	d877      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011130:	2b50      	cmp	r3, #80	; 0x50
 8011132:	d03c      	beq.n	80111ae <HAL_TIM_ConfigClockSource+0x14a>
 8011134:	2b50      	cmp	r3, #80	; 0x50
 8011136:	d873      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011138:	2b40      	cmp	r3, #64	; 0x40
 801113a:	d058      	beq.n	80111ee <HAL_TIM_ConfigClockSource+0x18a>
 801113c:	2b40      	cmp	r3, #64	; 0x40
 801113e:	d86f      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011140:	2b30      	cmp	r3, #48	; 0x30
 8011142:	d064      	beq.n	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 8011144:	2b30      	cmp	r3, #48	; 0x30
 8011146:	d86b      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011148:	2b20      	cmp	r3, #32
 801114a:	d060      	beq.n	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 801114c:	2b20      	cmp	r3, #32
 801114e:	d867      	bhi.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
 8011150:	2b00      	cmp	r3, #0
 8011152:	d05c      	beq.n	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 8011154:	2b10      	cmp	r3, #16
 8011156:	d05a      	beq.n	801120e <HAL_TIM_ConfigClockSource+0x1aa>
 8011158:	e062      	b.n	8011220 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801116a:	f000 ff19 	bl	8011fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	689b      	ldr	r3, [r3, #8]
 8011174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801117c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	68ba      	ldr	r2, [r7, #8]
 8011184:	609a      	str	r2, [r3, #8]
      break;
 8011186:	e04f      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011198:	f000 ff02 	bl	8011fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	689a      	ldr	r2, [r3, #8]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80111aa:	609a      	str	r2, [r3, #8]
      break;
 80111ac:	e03c      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80111ba:	461a      	mov	r2, r3
 80111bc:	f000 fdbc 	bl	8011d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	2150      	movs	r1, #80	; 0x50
 80111c6:	4618      	mov	r0, r3
 80111c8:	f000 fecc 	bl	8011f64 <TIM_ITRx_SetConfig>
      break;
 80111cc:	e02c      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111d6:	683b      	ldr	r3, [r7, #0]
 80111d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80111da:	461a      	mov	r2, r3
 80111dc:	f000 fe18 	bl	8011e10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	2160      	movs	r1, #96	; 0x60
 80111e6:	4618      	mov	r0, r3
 80111e8:	f000 febc 	bl	8011f64 <TIM_ITRx_SetConfig>
      break;
 80111ec:	e01c      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80111fa:	461a      	mov	r2, r3
 80111fc:	f000 fd9c 	bl	8011d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	2140      	movs	r1, #64	; 0x40
 8011206:	4618      	mov	r0, r3
 8011208:	f000 feac 	bl	8011f64 <TIM_ITRx_SetConfig>
      break;
 801120c:	e00c      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	4619      	mov	r1, r3
 8011218:	4610      	mov	r0, r2
 801121a:	f000 fea3 	bl	8011f64 <TIM_ITRx_SetConfig>
      break;
 801121e:	e003      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8011220:	2301      	movs	r3, #1
 8011222:	73fb      	strb	r3, [r7, #15]
      break;
 8011224:	e000      	b.n	8011228 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8011226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	2201      	movs	r2, #1
 801122c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2200      	movs	r2, #0
 8011234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8011238:	7bfb      	ldrb	r3, [r7, #15]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3710      	adds	r7, #16
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	ffceff88 	.word	0xffceff88
 8011248:	00100040 	.word	0x00100040
 801124c:	00100030 	.word	0x00100030
 8011250:	00100020 	.word	0x00100020

08011254 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011264:	2b01      	cmp	r3, #1
 8011266:	d101      	bne.n	801126c <HAL_TIM_SlaveConfigSynchro+0x18>
 8011268:	2302      	movs	r3, #2
 801126a:	e031      	b.n	80112d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2201      	movs	r2, #1
 8011270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2202      	movs	r2, #2
 8011278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801127c:	6839      	ldr	r1, [r7, #0]
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f000 fbfc 	bl	8011a7c <TIM_SlaveTimer_SetConfig>
 8011284:	4603      	mov	r3, r0
 8011286:	2b00      	cmp	r3, #0
 8011288:	d009      	beq.n	801129e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	2201      	movs	r2, #1
 801128e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2200      	movs	r2, #0
 8011296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801129a:	2301      	movs	r3, #1
 801129c:	e018      	b.n	80112d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	68da      	ldr	r2, [r3, #12]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80112ac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	68da      	ldr	r2, [r3, #12]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80112bc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2201      	movs	r2, #1
 80112c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	2200      	movs	r2, #0
 80112ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80112ce:	2300      	movs	r3, #0
}
 80112d0:	4618      	mov	r0, r3
 80112d2:	3708      	adds	r7, #8
 80112d4:	46bd      	mov	sp, r7
 80112d6:	bd80      	pop	{r7, pc}

080112d8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80112d8:	b480      	push	{r7}
 80112da:	b085      	sub	sp, #20
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
 80112e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80112e2:	2300      	movs	r3, #0
 80112e4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80112e6:	683b      	ldr	r3, [r7, #0]
 80112e8:	2b0c      	cmp	r3, #12
 80112ea:	d831      	bhi.n	8011350 <HAL_TIM_ReadCapturedValue+0x78>
 80112ec:	a201      	add	r2, pc, #4	; (adr r2, 80112f4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80112ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f2:	bf00      	nop
 80112f4:	08011329 	.word	0x08011329
 80112f8:	08011351 	.word	0x08011351
 80112fc:	08011351 	.word	0x08011351
 8011300:	08011351 	.word	0x08011351
 8011304:	08011333 	.word	0x08011333
 8011308:	08011351 	.word	0x08011351
 801130c:	08011351 	.word	0x08011351
 8011310:	08011351 	.word	0x08011351
 8011314:	0801133d 	.word	0x0801133d
 8011318:	08011351 	.word	0x08011351
 801131c:	08011351 	.word	0x08011351
 8011320:	08011351 	.word	0x08011351
 8011324:	08011347 	.word	0x08011347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801132e:	60fb      	str	r3, [r7, #12]

      break;
 8011330:	e00f      	b.n	8011352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011338:	60fb      	str	r3, [r7, #12]

      break;
 801133a:	e00a      	b.n	8011352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011342:	60fb      	str	r3, [r7, #12]

      break;
 8011344:	e005      	b.n	8011352 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801134c:	60fb      	str	r3, [r7, #12]

      break;
 801134e:	e000      	b.n	8011352 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8011350:	bf00      	nop
  }

  return tmpreg;
 8011352:	68fb      	ldr	r3, [r7, #12]
}
 8011354:	4618      	mov	r0, r3
 8011356:	3714      	adds	r7, #20
 8011358:	46bd      	mov	sp, r7
 801135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135e:	4770      	bx	lr

08011360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011360:	b480      	push	{r7}
 8011362:	b083      	sub	sp, #12
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8011368:	bf00      	nop
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr

08011374 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801137c:	bf00      	nop
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011390:	bf00      	nop
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr

0801139c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801139c:	b480      	push	{r7}
 801139e:	b085      	sub	sp, #20
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	4a40      	ldr	r2, [pc, #256]	; (80114b0 <TIM_Base_SetConfig+0x114>)
 80113b0:	4293      	cmp	r3, r2
 80113b2:	d013      	beq.n	80113dc <TIM_Base_SetConfig+0x40>
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113ba:	d00f      	beq.n	80113dc <TIM_Base_SetConfig+0x40>
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	4a3d      	ldr	r2, [pc, #244]	; (80114b4 <TIM_Base_SetConfig+0x118>)
 80113c0:	4293      	cmp	r3, r2
 80113c2:	d00b      	beq.n	80113dc <TIM_Base_SetConfig+0x40>
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	4a3c      	ldr	r2, [pc, #240]	; (80114b8 <TIM_Base_SetConfig+0x11c>)
 80113c8:	4293      	cmp	r3, r2
 80113ca:	d007      	beq.n	80113dc <TIM_Base_SetConfig+0x40>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	4a3b      	ldr	r2, [pc, #236]	; (80114bc <TIM_Base_SetConfig+0x120>)
 80113d0:	4293      	cmp	r3, r2
 80113d2:	d003      	beq.n	80113dc <TIM_Base_SetConfig+0x40>
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a3a      	ldr	r2, [pc, #232]	; (80114c0 <TIM_Base_SetConfig+0x124>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d108      	bne.n	80113ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80113e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	68fa      	ldr	r2, [r7, #12]
 80113ea:	4313      	orrs	r3, r2
 80113ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	4a2f      	ldr	r2, [pc, #188]	; (80114b0 <TIM_Base_SetConfig+0x114>)
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d01f      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113fc:	d01b      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4a2c      	ldr	r2, [pc, #176]	; (80114b4 <TIM_Base_SetConfig+0x118>)
 8011402:	4293      	cmp	r3, r2
 8011404:	d017      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4a2b      	ldr	r2, [pc, #172]	; (80114b8 <TIM_Base_SetConfig+0x11c>)
 801140a:	4293      	cmp	r3, r2
 801140c:	d013      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	4a2a      	ldr	r2, [pc, #168]	; (80114bc <TIM_Base_SetConfig+0x120>)
 8011412:	4293      	cmp	r3, r2
 8011414:	d00f      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	4a29      	ldr	r2, [pc, #164]	; (80114c0 <TIM_Base_SetConfig+0x124>)
 801141a:	4293      	cmp	r3, r2
 801141c:	d00b      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	4a28      	ldr	r2, [pc, #160]	; (80114c4 <TIM_Base_SetConfig+0x128>)
 8011422:	4293      	cmp	r3, r2
 8011424:	d007      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	4a27      	ldr	r2, [pc, #156]	; (80114c8 <TIM_Base_SetConfig+0x12c>)
 801142a:	4293      	cmp	r3, r2
 801142c:	d003      	beq.n	8011436 <TIM_Base_SetConfig+0x9a>
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	4a26      	ldr	r2, [pc, #152]	; (80114cc <TIM_Base_SetConfig+0x130>)
 8011432:	4293      	cmp	r3, r2
 8011434:	d108      	bne.n	8011448 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801143c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	68db      	ldr	r3, [r3, #12]
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	4313      	orrs	r3, r2
 8011446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	695b      	ldr	r3, [r3, #20]
 8011452:	4313      	orrs	r3, r2
 8011454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	68fa      	ldr	r2, [r7, #12]
 801145a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	689a      	ldr	r2, [r3, #8]
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	4a10      	ldr	r2, [pc, #64]	; (80114b0 <TIM_Base_SetConfig+0x114>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d00f      	beq.n	8011494 <TIM_Base_SetConfig+0xf8>
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	4a12      	ldr	r2, [pc, #72]	; (80114c0 <TIM_Base_SetConfig+0x124>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d00b      	beq.n	8011494 <TIM_Base_SetConfig+0xf8>
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	4a11      	ldr	r2, [pc, #68]	; (80114c4 <TIM_Base_SetConfig+0x128>)
 8011480:	4293      	cmp	r3, r2
 8011482:	d007      	beq.n	8011494 <TIM_Base_SetConfig+0xf8>
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	4a10      	ldr	r2, [pc, #64]	; (80114c8 <TIM_Base_SetConfig+0x12c>)
 8011488:	4293      	cmp	r3, r2
 801148a:	d003      	beq.n	8011494 <TIM_Base_SetConfig+0xf8>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	4a0f      	ldr	r2, [pc, #60]	; (80114cc <TIM_Base_SetConfig+0x130>)
 8011490:	4293      	cmp	r3, r2
 8011492:	d103      	bne.n	801149c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	691a      	ldr	r2, [r3, #16]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	2201      	movs	r2, #1
 80114a0:	615a      	str	r2, [r3, #20]
}
 80114a2:	bf00      	nop
 80114a4:	3714      	adds	r7, #20
 80114a6:	46bd      	mov	sp, r7
 80114a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ac:	4770      	bx	lr
 80114ae:	bf00      	nop
 80114b0:	40010000 	.word	0x40010000
 80114b4:	40000400 	.word	0x40000400
 80114b8:	40000800 	.word	0x40000800
 80114bc:	40000c00 	.word	0x40000c00
 80114c0:	40010400 	.word	0x40010400
 80114c4:	40014000 	.word	0x40014000
 80114c8:	40014400 	.word	0x40014400
 80114cc:	40014800 	.word	0x40014800

080114d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b087      	sub	sp, #28
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6a1b      	ldr	r3, [r3, #32]
 80114de:	f023 0201 	bic.w	r2, r3, #1
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6a1b      	ldr	r3, [r3, #32]
 80114ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	699b      	ldr	r3, [r3, #24]
 80114f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80114f8:	68fa      	ldr	r2, [r7, #12]
 80114fa:	4b37      	ldr	r3, [pc, #220]	; (80115d8 <TIM_OC1_SetConfig+0x108>)
 80114fc:	4013      	ands	r3, r2
 80114fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	f023 0303 	bic.w	r3, r3, #3
 8011506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	68fa      	ldr	r2, [r7, #12]
 801150e:	4313      	orrs	r3, r2
 8011510:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	f023 0302 	bic.w	r3, r3, #2
 8011518:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801151a:	683b      	ldr	r3, [r7, #0]
 801151c:	689b      	ldr	r3, [r3, #8]
 801151e:	697a      	ldr	r2, [r7, #20]
 8011520:	4313      	orrs	r3, r2
 8011522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4a2d      	ldr	r2, [pc, #180]	; (80115dc <TIM_OC1_SetConfig+0x10c>)
 8011528:	4293      	cmp	r3, r2
 801152a:	d00f      	beq.n	801154c <TIM_OC1_SetConfig+0x7c>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	4a2c      	ldr	r2, [pc, #176]	; (80115e0 <TIM_OC1_SetConfig+0x110>)
 8011530:	4293      	cmp	r3, r2
 8011532:	d00b      	beq.n	801154c <TIM_OC1_SetConfig+0x7c>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4a2b      	ldr	r2, [pc, #172]	; (80115e4 <TIM_OC1_SetConfig+0x114>)
 8011538:	4293      	cmp	r3, r2
 801153a:	d007      	beq.n	801154c <TIM_OC1_SetConfig+0x7c>
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a2a      	ldr	r2, [pc, #168]	; (80115e8 <TIM_OC1_SetConfig+0x118>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d003      	beq.n	801154c <TIM_OC1_SetConfig+0x7c>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4a29      	ldr	r2, [pc, #164]	; (80115ec <TIM_OC1_SetConfig+0x11c>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d10c      	bne.n	8011566 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	f023 0308 	bic.w	r3, r3, #8
 8011552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011554:	683b      	ldr	r3, [r7, #0]
 8011556:	68db      	ldr	r3, [r3, #12]
 8011558:	697a      	ldr	r2, [r7, #20]
 801155a:	4313      	orrs	r3, r2
 801155c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	f023 0304 	bic.w	r3, r3, #4
 8011564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	4a1c      	ldr	r2, [pc, #112]	; (80115dc <TIM_OC1_SetConfig+0x10c>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d00f      	beq.n	801158e <TIM_OC1_SetConfig+0xbe>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a1b      	ldr	r2, [pc, #108]	; (80115e0 <TIM_OC1_SetConfig+0x110>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d00b      	beq.n	801158e <TIM_OC1_SetConfig+0xbe>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a1a      	ldr	r2, [pc, #104]	; (80115e4 <TIM_OC1_SetConfig+0x114>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d007      	beq.n	801158e <TIM_OC1_SetConfig+0xbe>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a19      	ldr	r2, [pc, #100]	; (80115e8 <TIM_OC1_SetConfig+0x118>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d003      	beq.n	801158e <TIM_OC1_SetConfig+0xbe>
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	4a18      	ldr	r2, [pc, #96]	; (80115ec <TIM_OC1_SetConfig+0x11c>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d111      	bne.n	80115b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801159c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	695b      	ldr	r3, [r3, #20]
 80115a2:	693a      	ldr	r2, [r7, #16]
 80115a4:	4313      	orrs	r3, r2
 80115a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	699b      	ldr	r3, [r3, #24]
 80115ac:	693a      	ldr	r2, [r7, #16]
 80115ae:	4313      	orrs	r3, r2
 80115b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	693a      	ldr	r2, [r7, #16]
 80115b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	68fa      	ldr	r2, [r7, #12]
 80115bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	697a      	ldr	r2, [r7, #20]
 80115ca:	621a      	str	r2, [r3, #32]
}
 80115cc:	bf00      	nop
 80115ce:	371c      	adds	r7, #28
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr
 80115d8:	fffeff8f 	.word	0xfffeff8f
 80115dc:	40010000 	.word	0x40010000
 80115e0:	40010400 	.word	0x40010400
 80115e4:	40014000 	.word	0x40014000
 80115e8:	40014400 	.word	0x40014400
 80115ec:	40014800 	.word	0x40014800

080115f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b087      	sub	sp, #28
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
 80115f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6a1b      	ldr	r3, [r3, #32]
 80115fe:	f023 0210 	bic.w	r2, r3, #16
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	6a1b      	ldr	r3, [r3, #32]
 801160a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	685b      	ldr	r3, [r3, #4]
 8011610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	699b      	ldr	r3, [r3, #24]
 8011616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	4b34      	ldr	r3, [pc, #208]	; (80116ec <TIM_OC2_SetConfig+0xfc>)
 801161c:	4013      	ands	r3, r2
 801161e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011628:	683b      	ldr	r3, [r7, #0]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	021b      	lsls	r3, r3, #8
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	4313      	orrs	r3, r2
 8011632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	f023 0320 	bic.w	r3, r3, #32
 801163a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	689b      	ldr	r3, [r3, #8]
 8011640:	011b      	lsls	r3, r3, #4
 8011642:	697a      	ldr	r2, [r7, #20]
 8011644:	4313      	orrs	r3, r2
 8011646:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	4a29      	ldr	r2, [pc, #164]	; (80116f0 <TIM_OC2_SetConfig+0x100>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d003      	beq.n	8011658 <TIM_OC2_SetConfig+0x68>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4a28      	ldr	r2, [pc, #160]	; (80116f4 <TIM_OC2_SetConfig+0x104>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d10d      	bne.n	8011674 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801165e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	011b      	lsls	r3, r3, #4
 8011666:	697a      	ldr	r2, [r7, #20]
 8011668:	4313      	orrs	r3, r2
 801166a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4a1e      	ldr	r2, [pc, #120]	; (80116f0 <TIM_OC2_SetConfig+0x100>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d00f      	beq.n	801169c <TIM_OC2_SetConfig+0xac>
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	4a1d      	ldr	r2, [pc, #116]	; (80116f4 <TIM_OC2_SetConfig+0x104>)
 8011680:	4293      	cmp	r3, r2
 8011682:	d00b      	beq.n	801169c <TIM_OC2_SetConfig+0xac>
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	4a1c      	ldr	r2, [pc, #112]	; (80116f8 <TIM_OC2_SetConfig+0x108>)
 8011688:	4293      	cmp	r3, r2
 801168a:	d007      	beq.n	801169c <TIM_OC2_SetConfig+0xac>
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	4a1b      	ldr	r2, [pc, #108]	; (80116fc <TIM_OC2_SetConfig+0x10c>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d003      	beq.n	801169c <TIM_OC2_SetConfig+0xac>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	4a1a      	ldr	r2, [pc, #104]	; (8011700 <TIM_OC2_SetConfig+0x110>)
 8011698:	4293      	cmp	r3, r2
 801169a:	d113      	bne.n	80116c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801169c:	693b      	ldr	r3, [r7, #16]
 801169e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80116a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	695b      	ldr	r3, [r3, #20]
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	693a      	ldr	r2, [r7, #16]
 80116b4:	4313      	orrs	r3, r2
 80116b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	699b      	ldr	r3, [r3, #24]
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	693a      	ldr	r2, [r7, #16]
 80116c0:	4313      	orrs	r3, r2
 80116c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	693a      	ldr	r2, [r7, #16]
 80116c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	68fa      	ldr	r2, [r7, #12]
 80116ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	685a      	ldr	r2, [r3, #4]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	697a      	ldr	r2, [r7, #20]
 80116dc:	621a      	str	r2, [r3, #32]
}
 80116de:	bf00      	nop
 80116e0:	371c      	adds	r7, #28
 80116e2:	46bd      	mov	sp, r7
 80116e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	feff8fff 	.word	0xfeff8fff
 80116f0:	40010000 	.word	0x40010000
 80116f4:	40010400 	.word	0x40010400
 80116f8:	40014000 	.word	0x40014000
 80116fc:	40014400 	.word	0x40014400
 8011700:	40014800 	.word	0x40014800

08011704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011704:	b480      	push	{r7}
 8011706:	b087      	sub	sp, #28
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6a1b      	ldr	r3, [r3, #32]
 8011712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6a1b      	ldr	r3, [r3, #32]
 801171e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	69db      	ldr	r3, [r3, #28]
 801172a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	4b33      	ldr	r3, [pc, #204]	; (80117fc <TIM_OC3_SetConfig+0xf8>)
 8011730:	4013      	ands	r3, r2
 8011732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f023 0303 	bic.w	r3, r3, #3
 801173a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	68fa      	ldr	r2, [r7, #12]
 8011742:	4313      	orrs	r3, r2
 8011744:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801174c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	689b      	ldr	r3, [r3, #8]
 8011752:	021b      	lsls	r3, r3, #8
 8011754:	697a      	ldr	r2, [r7, #20]
 8011756:	4313      	orrs	r3, r2
 8011758:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	4a28      	ldr	r2, [pc, #160]	; (8011800 <TIM_OC3_SetConfig+0xfc>)
 801175e:	4293      	cmp	r3, r2
 8011760:	d003      	beq.n	801176a <TIM_OC3_SetConfig+0x66>
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	4a27      	ldr	r2, [pc, #156]	; (8011804 <TIM_OC3_SetConfig+0x100>)
 8011766:	4293      	cmp	r3, r2
 8011768:	d10d      	bne.n	8011786 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	021b      	lsls	r3, r3, #8
 8011778:	697a      	ldr	r2, [r7, #20]
 801177a:	4313      	orrs	r3, r2
 801177c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801177e:	697b      	ldr	r3, [r7, #20]
 8011780:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4a1d      	ldr	r2, [pc, #116]	; (8011800 <TIM_OC3_SetConfig+0xfc>)
 801178a:	4293      	cmp	r3, r2
 801178c:	d00f      	beq.n	80117ae <TIM_OC3_SetConfig+0xaa>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	4a1c      	ldr	r2, [pc, #112]	; (8011804 <TIM_OC3_SetConfig+0x100>)
 8011792:	4293      	cmp	r3, r2
 8011794:	d00b      	beq.n	80117ae <TIM_OC3_SetConfig+0xaa>
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	4a1b      	ldr	r2, [pc, #108]	; (8011808 <TIM_OC3_SetConfig+0x104>)
 801179a:	4293      	cmp	r3, r2
 801179c:	d007      	beq.n	80117ae <TIM_OC3_SetConfig+0xaa>
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	4a1a      	ldr	r2, [pc, #104]	; (801180c <TIM_OC3_SetConfig+0x108>)
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d003      	beq.n	80117ae <TIM_OC3_SetConfig+0xaa>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	4a19      	ldr	r2, [pc, #100]	; (8011810 <TIM_OC3_SetConfig+0x10c>)
 80117aa:	4293      	cmp	r3, r2
 80117ac:	d113      	bne.n	80117d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80117b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80117bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	011b      	lsls	r3, r3, #4
 80117c4:	693a      	ldr	r2, [r7, #16]
 80117c6:	4313      	orrs	r3, r2
 80117c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	699b      	ldr	r3, [r3, #24]
 80117ce:	011b      	lsls	r3, r3, #4
 80117d0:	693a      	ldr	r2, [r7, #16]
 80117d2:	4313      	orrs	r3, r2
 80117d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	693a      	ldr	r2, [r7, #16]
 80117da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	68fa      	ldr	r2, [r7, #12]
 80117e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	685a      	ldr	r2, [r3, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	697a      	ldr	r2, [r7, #20]
 80117ee:	621a      	str	r2, [r3, #32]
}
 80117f0:	bf00      	nop
 80117f2:	371c      	adds	r7, #28
 80117f4:	46bd      	mov	sp, r7
 80117f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fa:	4770      	bx	lr
 80117fc:	fffeff8f 	.word	0xfffeff8f
 8011800:	40010000 	.word	0x40010000
 8011804:	40010400 	.word	0x40010400
 8011808:	40014000 	.word	0x40014000
 801180c:	40014400 	.word	0x40014400
 8011810:	40014800 	.word	0x40014800

08011814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011814:	b480      	push	{r7}
 8011816:	b087      	sub	sp, #28
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6a1b      	ldr	r3, [r3, #32]
 8011822:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a1b      	ldr	r3, [r3, #32]
 801182e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	685b      	ldr	r3, [r3, #4]
 8011834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	69db      	ldr	r3, [r3, #28]
 801183a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801183c:	68fa      	ldr	r2, [r7, #12]
 801183e:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <TIM_OC4_SetConfig+0xbc>)
 8011840:	4013      	ands	r3, r2
 8011842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801184a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	021b      	lsls	r3, r3, #8
 8011852:	68fa      	ldr	r2, [r7, #12]
 8011854:	4313      	orrs	r3, r2
 8011856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011858:	693b      	ldr	r3, [r7, #16]
 801185a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801185e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011860:	683b      	ldr	r3, [r7, #0]
 8011862:	689b      	ldr	r3, [r3, #8]
 8011864:	031b      	lsls	r3, r3, #12
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	4313      	orrs	r3, r2
 801186a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	4a19      	ldr	r2, [pc, #100]	; (80118d4 <TIM_OC4_SetConfig+0xc0>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d00f      	beq.n	8011894 <TIM_OC4_SetConfig+0x80>
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	4a18      	ldr	r2, [pc, #96]	; (80118d8 <TIM_OC4_SetConfig+0xc4>)
 8011878:	4293      	cmp	r3, r2
 801187a:	d00b      	beq.n	8011894 <TIM_OC4_SetConfig+0x80>
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	4a17      	ldr	r2, [pc, #92]	; (80118dc <TIM_OC4_SetConfig+0xc8>)
 8011880:	4293      	cmp	r3, r2
 8011882:	d007      	beq.n	8011894 <TIM_OC4_SetConfig+0x80>
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4a16      	ldr	r2, [pc, #88]	; (80118e0 <TIM_OC4_SetConfig+0xcc>)
 8011888:	4293      	cmp	r3, r2
 801188a:	d003      	beq.n	8011894 <TIM_OC4_SetConfig+0x80>
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	4a15      	ldr	r2, [pc, #84]	; (80118e4 <TIM_OC4_SetConfig+0xd0>)
 8011890:	4293      	cmp	r3, r2
 8011892:	d109      	bne.n	80118a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801189a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	695b      	ldr	r3, [r3, #20]
 80118a0:	019b      	lsls	r3, r3, #6
 80118a2:	697a      	ldr	r2, [r7, #20]
 80118a4:	4313      	orrs	r3, r2
 80118a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	697a      	ldr	r2, [r7, #20]
 80118ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	685a      	ldr	r2, [r3, #4]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	693a      	ldr	r2, [r7, #16]
 80118c0:	621a      	str	r2, [r3, #32]
}
 80118c2:	bf00      	nop
 80118c4:	371c      	adds	r7, #28
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop
 80118d0:	feff8fff 	.word	0xfeff8fff
 80118d4:	40010000 	.word	0x40010000
 80118d8:	40010400 	.word	0x40010400
 80118dc:	40014000 	.word	0x40014000
 80118e0:	40014400 	.word	0x40014400
 80118e4:	40014800 	.word	0x40014800

080118e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b087      	sub	sp, #28
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
 80118f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6a1b      	ldr	r3, [r3, #32]
 80118f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6a1b      	ldr	r3, [r3, #32]
 8011902:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	685b      	ldr	r3, [r3, #4]
 8011908:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801190e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011910:	68fa      	ldr	r2, [r7, #12]
 8011912:	4b21      	ldr	r3, [pc, #132]	; (8011998 <TIM_OC5_SetConfig+0xb0>)
 8011914:	4013      	ands	r3, r2
 8011916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	68fa      	ldr	r2, [r7, #12]
 801191e:	4313      	orrs	r3, r2
 8011920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011928:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	041b      	lsls	r3, r3, #16
 8011930:	693a      	ldr	r2, [r7, #16]
 8011932:	4313      	orrs	r3, r2
 8011934:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4a18      	ldr	r2, [pc, #96]	; (801199c <TIM_OC5_SetConfig+0xb4>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d00f      	beq.n	801195e <TIM_OC5_SetConfig+0x76>
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	4a17      	ldr	r2, [pc, #92]	; (80119a0 <TIM_OC5_SetConfig+0xb8>)
 8011942:	4293      	cmp	r3, r2
 8011944:	d00b      	beq.n	801195e <TIM_OC5_SetConfig+0x76>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	4a16      	ldr	r2, [pc, #88]	; (80119a4 <TIM_OC5_SetConfig+0xbc>)
 801194a:	4293      	cmp	r3, r2
 801194c:	d007      	beq.n	801195e <TIM_OC5_SetConfig+0x76>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	4a15      	ldr	r2, [pc, #84]	; (80119a8 <TIM_OC5_SetConfig+0xc0>)
 8011952:	4293      	cmp	r3, r2
 8011954:	d003      	beq.n	801195e <TIM_OC5_SetConfig+0x76>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	4a14      	ldr	r2, [pc, #80]	; (80119ac <TIM_OC5_SetConfig+0xc4>)
 801195a:	4293      	cmp	r3, r2
 801195c:	d109      	bne.n	8011972 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011964:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011966:	683b      	ldr	r3, [r7, #0]
 8011968:	695b      	ldr	r3, [r3, #20]
 801196a:	021b      	lsls	r3, r3, #8
 801196c:	697a      	ldr	r2, [r7, #20]
 801196e:	4313      	orrs	r3, r2
 8011970:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	697a      	ldr	r2, [r7, #20]
 8011976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	68fa      	ldr	r2, [r7, #12]
 801197c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	685a      	ldr	r2, [r3, #4]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	693a      	ldr	r2, [r7, #16]
 801198a:	621a      	str	r2, [r3, #32]
}
 801198c:	bf00      	nop
 801198e:	371c      	adds	r7, #28
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr
 8011998:	fffeff8f 	.word	0xfffeff8f
 801199c:	40010000 	.word	0x40010000
 80119a0:	40010400 	.word	0x40010400
 80119a4:	40014000 	.word	0x40014000
 80119a8:	40014400 	.word	0x40014400
 80119ac:	40014800 	.word	0x40014800

080119b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80119b0:	b480      	push	{r7}
 80119b2:	b087      	sub	sp, #28
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6a1b      	ldr	r3, [r3, #32]
 80119be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	6a1b      	ldr	r3, [r3, #32]
 80119ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80119d8:	68fa      	ldr	r2, [r7, #12]
 80119da:	4b22      	ldr	r3, [pc, #136]	; (8011a64 <TIM_OC6_SetConfig+0xb4>)
 80119dc:	4013      	ands	r3, r2
 80119de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	021b      	lsls	r3, r3, #8
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	4313      	orrs	r3, r2
 80119ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80119f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80119f4:	683b      	ldr	r3, [r7, #0]
 80119f6:	689b      	ldr	r3, [r3, #8]
 80119f8:	051b      	lsls	r3, r3, #20
 80119fa:	693a      	ldr	r2, [r7, #16]
 80119fc:	4313      	orrs	r3, r2
 80119fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	4a19      	ldr	r2, [pc, #100]	; (8011a68 <TIM_OC6_SetConfig+0xb8>)
 8011a04:	4293      	cmp	r3, r2
 8011a06:	d00f      	beq.n	8011a28 <TIM_OC6_SetConfig+0x78>
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	4a18      	ldr	r2, [pc, #96]	; (8011a6c <TIM_OC6_SetConfig+0xbc>)
 8011a0c:	4293      	cmp	r3, r2
 8011a0e:	d00b      	beq.n	8011a28 <TIM_OC6_SetConfig+0x78>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	4a17      	ldr	r2, [pc, #92]	; (8011a70 <TIM_OC6_SetConfig+0xc0>)
 8011a14:	4293      	cmp	r3, r2
 8011a16:	d007      	beq.n	8011a28 <TIM_OC6_SetConfig+0x78>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	4a16      	ldr	r2, [pc, #88]	; (8011a74 <TIM_OC6_SetConfig+0xc4>)
 8011a1c:	4293      	cmp	r3, r2
 8011a1e:	d003      	beq.n	8011a28 <TIM_OC6_SetConfig+0x78>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4a15      	ldr	r2, [pc, #84]	; (8011a78 <TIM_OC6_SetConfig+0xc8>)
 8011a24:	4293      	cmp	r3, r2
 8011a26:	d109      	bne.n	8011a3c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	695b      	ldr	r3, [r3, #20]
 8011a34:	029b      	lsls	r3, r3, #10
 8011a36:	697a      	ldr	r2, [r7, #20]
 8011a38:	4313      	orrs	r3, r2
 8011a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	685a      	ldr	r2, [r3, #4]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	693a      	ldr	r2, [r7, #16]
 8011a54:	621a      	str	r2, [r3, #32]
}
 8011a56:	bf00      	nop
 8011a58:	371c      	adds	r7, #28
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a60:	4770      	bx	lr
 8011a62:	bf00      	nop
 8011a64:	feff8fff 	.word	0xfeff8fff
 8011a68:	40010000 	.word	0x40010000
 8011a6c:	40010400 	.word	0x40010400
 8011a70:	40014000 	.word	0x40014000
 8011a74:	40014400 	.word	0x40014400
 8011a78:	40014800 	.word	0x40014800

08011a7c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b086      	sub	sp, #24
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011a86:	2300      	movs	r3, #0
 8011a88:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	689b      	ldr	r3, [r3, #8]
 8011a90:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011a92:	693a      	ldr	r2, [r7, #16]
 8011a94:	4b65      	ldr	r3, [pc, #404]	; (8011c2c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8011a96:	4013      	ands	r3, r2
 8011a98:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	693a      	ldr	r2, [r7, #16]
 8011aa0:	4313      	orrs	r3, r2
 8011aa2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011aa4:	693a      	ldr	r2, [r7, #16]
 8011aa6:	4b62      	ldr	r3, [pc, #392]	; (8011c30 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8011aa8:	4013      	ands	r3, r2
 8011aaa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	693a      	ldr	r2, [r7, #16]
 8011ab2:	4313      	orrs	r3, r2
 8011ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	693a      	ldr	r2, [r7, #16]
 8011abc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	4a5c      	ldr	r2, [pc, #368]	; (8011c34 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	f000 80ab 	beq.w	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011aca:	4a5a      	ldr	r2, [pc, #360]	; (8011c34 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011acc:	4293      	cmp	r3, r2
 8011ace:	f200 80a4 	bhi.w	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ad6:	f000 80a3 	beq.w	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011ada:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011ade:	f200 809c 	bhi.w	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011ae2:	4a55      	ldr	r2, [pc, #340]	; (8011c38 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	f000 809b 	beq.w	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011aea:	4a53      	ldr	r2, [pc, #332]	; (8011c38 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011aec:	4293      	cmp	r3, r2
 8011aee:	f200 8094 	bhi.w	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011af2:	4a52      	ldr	r2, [pc, #328]	; (8011c3c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011af4:	4293      	cmp	r3, r2
 8011af6:	f000 8093 	beq.w	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011afa:	4a50      	ldr	r2, [pc, #320]	; (8011c3c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011afc:	4293      	cmp	r3, r2
 8011afe:	f200 808c 	bhi.w	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b02:	4a4f      	ldr	r2, [pc, #316]	; (8011c40 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	f000 808b 	beq.w	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b0a:	4a4d      	ldr	r2, [pc, #308]	; (8011c40 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	f200 8084 	bhi.w	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b12:	4a4c      	ldr	r2, [pc, #304]	; (8011c44 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011b14:	4293      	cmp	r3, r2
 8011b16:	f000 8083 	beq.w	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b1a:	4a4a      	ldr	r2, [pc, #296]	; (8011c44 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d87c      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b20:	4a49      	ldr	r2, [pc, #292]	; (8011c48 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011b22:	4293      	cmp	r3, r2
 8011b24:	d07c      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b26:	4a48      	ldr	r2, [pc, #288]	; (8011c48 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011b28:	4293      	cmp	r3, r2
 8011b2a:	d876      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b2c:	4a47      	ldr	r2, [pc, #284]	; (8011c4c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	d076      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b32:	4a46      	ldr	r2, [pc, #280]	; (8011c4c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d870      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011b3c:	d070      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b3e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011b42:	d86a      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b48:	d06a      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b4e:	d864      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b50:	2b70      	cmp	r3, #112	; 0x70
 8011b52:	d01a      	beq.n	8011b8a <TIM_SlaveTimer_SetConfig+0x10e>
 8011b54:	2b70      	cmp	r3, #112	; 0x70
 8011b56:	d860      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b58:	2b60      	cmp	r3, #96	; 0x60
 8011b5a:	d054      	beq.n	8011c06 <TIM_SlaveTimer_SetConfig+0x18a>
 8011b5c:	2b60      	cmp	r3, #96	; 0x60
 8011b5e:	d85c      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b60:	2b50      	cmp	r3, #80	; 0x50
 8011b62:	d046      	beq.n	8011bf2 <TIM_SlaveTimer_SetConfig+0x176>
 8011b64:	2b50      	cmp	r3, #80	; 0x50
 8011b66:	d858      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b68:	2b40      	cmp	r3, #64	; 0x40
 8011b6a:	d019      	beq.n	8011ba0 <TIM_SlaveTimer_SetConfig+0x124>
 8011b6c:	2b40      	cmp	r3, #64	; 0x40
 8011b6e:	d854      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b70:	2b30      	cmp	r3, #48	; 0x30
 8011b72:	d055      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b74:	2b30      	cmp	r3, #48	; 0x30
 8011b76:	d850      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b78:	2b20      	cmp	r3, #32
 8011b7a:	d051      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b7c:	2b20      	cmp	r3, #32
 8011b7e:	d84c      	bhi.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d04d      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b84:	2b10      	cmp	r3, #16
 8011b86:	d04b      	beq.n	8011c20 <TIM_SlaveTimer_SetConfig+0x1a4>
 8011b88:	e047      	b.n	8011c1a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8011b96:	683b      	ldr	r3, [r7, #0]
 8011b98:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8011b9a:	f000 fa01 	bl	8011fa0 <TIM_ETR_SetConfig>
      break;
 8011b9e:	e040      	b.n	8011c22 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	2b05      	cmp	r3, #5
 8011ba6:	d101      	bne.n	8011bac <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8011ba8:	2301      	movs	r3, #1
 8011baa:	e03b      	b.n	8011c24 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	6a1a      	ldr	r2, [r3, #32]
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	f022 0201 	bic.w	r2, r2, #1
 8011bc2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	699b      	ldr	r3, [r3, #24]
 8011bca:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011bd2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	691b      	ldr	r3, [r3, #16]
 8011bd8:	011b      	lsls	r3, r3, #4
 8011bda:	68ba      	ldr	r2, [r7, #8]
 8011bdc:	4313      	orrs	r3, r2
 8011bde:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	68ba      	ldr	r2, [r7, #8]
 8011be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	621a      	str	r2, [r3, #32]
      break;
 8011bf0:	e017      	b.n	8011c22 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011bfe:	461a      	mov	r2, r3
 8011c00:	f000 f89a 	bl	8011d38 <TIM_TI1_ConfigInputStage>
      break;
 8011c04:	e00d      	b.n	8011c22 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011c12:	461a      	mov	r2, r3
 8011c14:	f000 f8fc 	bl	8011e10 <TIM_TI2_ConfigInputStage>
      break;
 8011c18:	e003      	b.n	8011c22 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8011c1e:	e000      	b.n	8011c22 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8011c20:	bf00      	nop
  }

  return status;
 8011c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3718      	adds	r7, #24
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}
 8011c2c:	ffcfff8f 	.word	0xffcfff8f
 8011c30:	fffefff8 	.word	0xfffefff8
 8011c34:	00200010 	.word	0x00200010
 8011c38:	00100070 	.word	0x00100070
 8011c3c:	00100060 	.word	0x00100060
 8011c40:	00100050 	.word	0x00100050
 8011c44:	00100040 	.word	0x00100040
 8011c48:	00100030 	.word	0x00100030
 8011c4c:	00100020 	.word	0x00100020

08011c50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b087      	sub	sp, #28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	60f8      	str	r0, [r7, #12]
 8011c58:	60b9      	str	r1, [r7, #8]
 8011c5a:	607a      	str	r2, [r7, #4]
 8011c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	6a1b      	ldr	r3, [r3, #32]
 8011c62:	f023 0201 	bic.w	r2, r3, #1
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6a1b      	ldr	r3, [r3, #32]
 8011c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	4a28      	ldr	r2, [pc, #160]	; (8011d1c <TIM_TI1_SetConfig+0xcc>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d01b      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c84:	d017      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	4a25      	ldr	r2, [pc, #148]	; (8011d20 <TIM_TI1_SetConfig+0xd0>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d013      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	4a24      	ldr	r2, [pc, #144]	; (8011d24 <TIM_TI1_SetConfig+0xd4>)
 8011c92:	4293      	cmp	r3, r2
 8011c94:	d00f      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	4a23      	ldr	r2, [pc, #140]	; (8011d28 <TIM_TI1_SetConfig+0xd8>)
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d00b      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	4a22      	ldr	r2, [pc, #136]	; (8011d2c <TIM_TI1_SetConfig+0xdc>)
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d007      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	4a21      	ldr	r2, [pc, #132]	; (8011d30 <TIM_TI1_SetConfig+0xe0>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d003      	beq.n	8011cb6 <TIM_TI1_SetConfig+0x66>
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	4a20      	ldr	r2, [pc, #128]	; (8011d34 <TIM_TI1_SetConfig+0xe4>)
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d101      	bne.n	8011cba <TIM_TI1_SetConfig+0x6a>
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	e000      	b.n	8011cbc <TIM_TI1_SetConfig+0x6c>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d008      	beq.n	8011cd2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	f023 0303 	bic.w	r3, r3, #3
 8011cc6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8011cc8:	697a      	ldr	r2, [r7, #20]
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	4313      	orrs	r3, r2
 8011cce:	617b      	str	r3, [r7, #20]
 8011cd0:	e003      	b.n	8011cda <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	f043 0301 	orr.w	r3, r3, #1
 8011cd8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011ce0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	011b      	lsls	r3, r3, #4
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	697a      	ldr	r2, [r7, #20]
 8011cea:	4313      	orrs	r3, r2
 8011cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011cee:	693b      	ldr	r3, [r7, #16]
 8011cf0:	f023 030a 	bic.w	r3, r3, #10
 8011cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8011cf6:	68bb      	ldr	r3, [r7, #8]
 8011cf8:	f003 030a 	and.w	r3, r3, #10
 8011cfc:	693a      	ldr	r2, [r7, #16]
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	697a      	ldr	r2, [r7, #20]
 8011d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	693a      	ldr	r2, [r7, #16]
 8011d0c:	621a      	str	r2, [r3, #32]
}
 8011d0e:	bf00      	nop
 8011d10:	371c      	adds	r7, #28
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr
 8011d1a:	bf00      	nop
 8011d1c:	40010000 	.word	0x40010000
 8011d20:	40000400 	.word	0x40000400
 8011d24:	40000800 	.word	0x40000800
 8011d28:	40000c00 	.word	0x40000c00
 8011d2c:	40010400 	.word	0x40010400
 8011d30:	40001800 	.word	0x40001800
 8011d34:	40014000 	.word	0x40014000

08011d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011d38:	b480      	push	{r7}
 8011d3a:	b087      	sub	sp, #28
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	6a1b      	ldr	r3, [r3, #32]
 8011d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	6a1b      	ldr	r3, [r3, #32]
 8011d4e:	f023 0201 	bic.w	r2, r3, #1
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	699b      	ldr	r3, [r3, #24]
 8011d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	011b      	lsls	r3, r3, #4
 8011d68:	693a      	ldr	r2, [r7, #16]
 8011d6a:	4313      	orrs	r3, r2
 8011d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011d6e:	697b      	ldr	r3, [r7, #20]
 8011d70:	f023 030a 	bic.w	r3, r3, #10
 8011d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011d76:	697a      	ldr	r2, [r7, #20]
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	4313      	orrs	r3, r2
 8011d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	693a      	ldr	r2, [r7, #16]
 8011d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	697a      	ldr	r2, [r7, #20]
 8011d88:	621a      	str	r2, [r3, #32]
}
 8011d8a:	bf00      	nop
 8011d8c:	371c      	adds	r7, #28
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr

08011d96 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011d96:	b480      	push	{r7}
 8011d98:	b087      	sub	sp, #28
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	60b9      	str	r1, [r7, #8]
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	6a1b      	ldr	r3, [r3, #32]
 8011da8:	f023 0210 	bic.w	r2, r3, #16
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	699b      	ldr	r3, [r3, #24]
 8011db4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	6a1b      	ldr	r3, [r3, #32]
 8011dba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8011dbc:	697b      	ldr	r3, [r7, #20]
 8011dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011dc2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	021b      	lsls	r3, r3, #8
 8011dc8:	697a      	ldr	r2, [r7, #20]
 8011dca:	4313      	orrs	r3, r2
 8011dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011dd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	031b      	lsls	r3, r3, #12
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	697a      	ldr	r2, [r7, #20]
 8011dde:	4313      	orrs	r3, r2
 8011de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	011b      	lsls	r3, r3, #4
 8011dee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8011df2:	693a      	ldr	r2, [r7, #16]
 8011df4:	4313      	orrs	r3, r2
 8011df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	697a      	ldr	r2, [r7, #20]
 8011dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	693a      	ldr	r2, [r7, #16]
 8011e02:	621a      	str	r2, [r3, #32]
}
 8011e04:	bf00      	nop
 8011e06:	371c      	adds	r7, #28
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0e:	4770      	bx	lr

08011e10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b087      	sub	sp, #28
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	6a1b      	ldr	r3, [r3, #32]
 8011e20:	f023 0210 	bic.w	r2, r3, #16
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	699b      	ldr	r3, [r3, #24]
 8011e2c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	6a1b      	ldr	r3, [r3, #32]
 8011e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011e3a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	031b      	lsls	r3, r3, #12
 8011e40:	697a      	ldr	r2, [r7, #20]
 8011e42:	4313      	orrs	r3, r2
 8011e44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011e4c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011e4e:	68bb      	ldr	r3, [r7, #8]
 8011e50:	011b      	lsls	r3, r3, #4
 8011e52:	693a      	ldr	r2, [r7, #16]
 8011e54:	4313      	orrs	r3, r2
 8011e56:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	697a      	ldr	r2, [r7, #20]
 8011e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	693a      	ldr	r2, [r7, #16]
 8011e62:	621a      	str	r2, [r3, #32]
}
 8011e64:	bf00      	nop
 8011e66:	371c      	adds	r7, #28
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6e:	4770      	bx	lr

08011e70 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011e70:	b480      	push	{r7}
 8011e72:	b087      	sub	sp, #28
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	60f8      	str	r0, [r7, #12]
 8011e78:	60b9      	str	r1, [r7, #8]
 8011e7a:	607a      	str	r2, [r7, #4]
 8011e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	6a1b      	ldr	r3, [r3, #32]
 8011e82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	69db      	ldr	r3, [r3, #28]
 8011e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6a1b      	ldr	r3, [r3, #32]
 8011e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8011e96:	697b      	ldr	r3, [r7, #20]
 8011e98:	f023 0303 	bic.w	r3, r3, #3
 8011e9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8011e9e:	697a      	ldr	r2, [r7, #20]
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	4313      	orrs	r3, r2
 8011ea4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011eac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	011b      	lsls	r3, r3, #4
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	697a      	ldr	r2, [r7, #20]
 8011eb6:	4313      	orrs	r3, r2
 8011eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8011ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8011ec2:	68bb      	ldr	r3, [r7, #8]
 8011ec4:	021b      	lsls	r3, r3, #8
 8011ec6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8011eca:	693a      	ldr	r2, [r7, #16]
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	697a      	ldr	r2, [r7, #20]
 8011ed4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	693a      	ldr	r2, [r7, #16]
 8011eda:	621a      	str	r2, [r3, #32]
}
 8011edc:	bf00      	nop
 8011ede:	371c      	adds	r7, #28
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr

08011ee8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8011ee8:	b480      	push	{r7}
 8011eea:	b087      	sub	sp, #28
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	607a      	str	r2, [r7, #4]
 8011ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6a1b      	ldr	r3, [r3, #32]
 8011efa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	69db      	ldr	r3, [r3, #28]
 8011f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	6a1b      	ldr	r3, [r3, #32]
 8011f0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	021b      	lsls	r3, r3, #8
 8011f1a:	697a      	ldr	r2, [r7, #20]
 8011f1c:	4313      	orrs	r3, r2
 8011f1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8011f20:	697b      	ldr	r3, [r7, #20]
 8011f22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011f26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	031b      	lsls	r3, r3, #12
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	697a      	ldr	r2, [r7, #20]
 8011f30:	4313      	orrs	r3, r2
 8011f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8011f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	031b      	lsls	r3, r3, #12
 8011f40:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8011f44:	693a      	ldr	r2, [r7, #16]
 8011f46:	4313      	orrs	r3, r2
 8011f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	697a      	ldr	r2, [r7, #20]
 8011f4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	693a      	ldr	r2, [r7, #16]
 8011f54:	621a      	str	r2, [r3, #32]
}
 8011f56:	bf00      	nop
 8011f58:	371c      	adds	r7, #28
 8011f5a:	46bd      	mov	sp, r7
 8011f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f60:	4770      	bx	lr
	...

08011f64 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	689b      	ldr	r3, [r3, #8]
 8011f72:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	4b09      	ldr	r3, [pc, #36]	; (8011f9c <TIM_ITRx_SetConfig+0x38>)
 8011f78:	4013      	ands	r3, r2
 8011f7a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011f7c:	683a      	ldr	r2, [r7, #0]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	4313      	orrs	r3, r2
 8011f82:	f043 0307 	orr.w	r3, r3, #7
 8011f86:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	68fa      	ldr	r2, [r7, #12]
 8011f8c:	609a      	str	r2, [r3, #8]
}
 8011f8e:	bf00      	nop
 8011f90:	3714      	adds	r7, #20
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr
 8011f9a:	bf00      	nop
 8011f9c:	ffcfff8f 	.word	0xffcfff8f

08011fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
 8011fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	689b      	ldr	r3, [r3, #8]
 8011fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011fb4:	697b      	ldr	r3, [r7, #20]
 8011fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	021a      	lsls	r2, r3, #8
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	431a      	orrs	r2, r3
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	4313      	orrs	r3, r2
 8011fc8:	697a      	ldr	r2, [r7, #20]
 8011fca:	4313      	orrs	r3, r2
 8011fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	697a      	ldr	r2, [r7, #20]
 8011fd2:	609a      	str	r2, [r3, #8]
}
 8011fd4:	bf00      	nop
 8011fd6:	371c      	adds	r7, #28
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011fe0:	b480      	push	{r7}
 8011fe2:	b087      	sub	sp, #28
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	60f8      	str	r0, [r7, #12]
 8011fe8:	60b9      	str	r1, [r7, #8]
 8011fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	f003 031f 	and.w	r3, r3, #31
 8011ff2:	2201      	movs	r2, #1
 8011ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8011ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	6a1a      	ldr	r2, [r3, #32]
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	43db      	mvns	r3, r3
 8012002:	401a      	ands	r2, r3
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	6a1a      	ldr	r2, [r3, #32]
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	f003 031f 	and.w	r3, r3, #31
 8012012:	6879      	ldr	r1, [r7, #4]
 8012014:	fa01 f303 	lsl.w	r3, r1, r3
 8012018:	431a      	orrs	r2, r3
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	621a      	str	r2, [r3, #32]
}
 801201e:	bf00      	nop
 8012020:	371c      	adds	r7, #28
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr
	...

0801202c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801202c:	b480      	push	{r7}
 801202e:	b085      	sub	sp, #20
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801203c:	2b01      	cmp	r3, #1
 801203e:	d101      	bne.n	8012044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012040:	2302      	movs	r3, #2
 8012042:	e06d      	b.n	8012120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2201      	movs	r2, #1
 8012048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2202      	movs	r2, #2
 8012050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	689b      	ldr	r3, [r3, #8]
 8012062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	4a30      	ldr	r2, [pc, #192]	; (801212c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801206a:	4293      	cmp	r3, r2
 801206c:	d004      	beq.n	8012078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	4a2f      	ldr	r2, [pc, #188]	; (8012130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012074:	4293      	cmp	r3, r2
 8012076:	d108      	bne.n	801208a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801207e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	68fa      	ldr	r2, [r7, #12]
 8012086:	4313      	orrs	r3, r2
 8012088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	4313      	orrs	r3, r2
 801209a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	68fa      	ldr	r2, [r7, #12]
 80120a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	4a20      	ldr	r2, [pc, #128]	; (801212c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80120aa:	4293      	cmp	r3, r2
 80120ac:	d022      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80120b6:	d01d      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	4a1d      	ldr	r2, [pc, #116]	; (8012134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80120be:	4293      	cmp	r3, r2
 80120c0:	d018      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4a1c      	ldr	r2, [pc, #112]	; (8012138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80120c8:	4293      	cmp	r3, r2
 80120ca:	d013      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	4a1a      	ldr	r2, [pc, #104]	; (801213c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80120d2:	4293      	cmp	r3, r2
 80120d4:	d00e      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	4a15      	ldr	r2, [pc, #84]	; (8012130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80120dc:	4293      	cmp	r3, r2
 80120de:	d009      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	4a16      	ldr	r2, [pc, #88]	; (8012140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80120e6:	4293      	cmp	r3, r2
 80120e8:	d004      	beq.n	80120f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	4a15      	ldr	r2, [pc, #84]	; (8012144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80120f0:	4293      	cmp	r3, r2
 80120f2:	d10c      	bne.n	801210e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80120fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	689b      	ldr	r3, [r3, #8]
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	4313      	orrs	r3, r2
 8012104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	68ba      	ldr	r2, [r7, #8]
 801210c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	2201      	movs	r2, #1
 8012112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	2200      	movs	r2, #0
 801211a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801211e:	2300      	movs	r3, #0
}
 8012120:	4618      	mov	r0, r3
 8012122:	3714      	adds	r7, #20
 8012124:	46bd      	mov	sp, r7
 8012126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212a:	4770      	bx	lr
 801212c:	40010000 	.word	0x40010000
 8012130:	40010400 	.word	0x40010400
 8012134:	40000400 	.word	0x40000400
 8012138:	40000800 	.word	0x40000800
 801213c:	40000c00 	.word	0x40000c00
 8012140:	40001800 	.word	0x40001800
 8012144:	40014000 	.word	0x40014000

08012148 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012148:	b480      	push	{r7}
 801214a:	b083      	sub	sp, #12
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012150:	bf00      	nop
 8012152:	370c      	adds	r7, #12
 8012154:	46bd      	mov	sp, r7
 8012156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215a:	4770      	bx	lr

0801215c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801215c:	b480      	push	{r7}
 801215e:	b083      	sub	sp, #12
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012164:	bf00      	nop
 8012166:	370c      	adds	r7, #12
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8012170:	b480      	push	{r7}
 8012172:	b083      	sub	sp, #12
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012178:	bf00      	nop
 801217a:	370c      	adds	r7, #12
 801217c:	46bd      	mov	sp, r7
 801217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012182:	4770      	bx	lr

08012184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012184:	b580      	push	{r7, lr}
 8012186:	b082      	sub	sp, #8
 8012188:	af00      	add	r7, sp, #0
 801218a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d101      	bne.n	8012196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012192:	2301      	movs	r3, #1
 8012194:	e042      	b.n	801221c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801219c:	2b00      	cmp	r3, #0
 801219e:	d106      	bne.n	80121ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2200      	movs	r2, #0
 80121a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	f7f3 fdff 	bl	8005dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2224      	movs	r2, #36	; 0x24
 80121b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	681a      	ldr	r2, [r3, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	f022 0201 	bic.w	r2, r2, #1
 80121c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80121c6:	6878      	ldr	r0, [r7, #4]
 80121c8:	f000 fd54 	bl	8012c74 <UART_SetConfig>
 80121cc:	4603      	mov	r3, r0
 80121ce:	2b01      	cmp	r3, #1
 80121d0:	d101      	bne.n	80121d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80121d2:	2301      	movs	r3, #1
 80121d4:	e022      	b.n	801221c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d002      	beq.n	80121e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f001 fab0 	bl	8013744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	685a      	ldr	r2, [r3, #4]
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80121f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	689a      	ldr	r2, [r3, #8]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	f042 0201 	orr.w	r2, r2, #1
 8012212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f001 fb37 	bl	8013888 <UART_CheckIdleState>
 801221a:	4603      	mov	r3, r0
}
 801221c:	4618      	mov	r0, r3
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b08a      	sub	sp, #40	; 0x28
 8012228:	af02      	add	r7, sp, #8
 801222a:	60f8      	str	r0, [r7, #12]
 801222c:	60b9      	str	r1, [r7, #8]
 801222e:	603b      	str	r3, [r7, #0]
 8012230:	4613      	mov	r3, r2
 8012232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801223a:	2b20      	cmp	r3, #32
 801223c:	d17b      	bne.n	8012336 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <HAL_UART_Transmit+0x26>
 8012244:	88fb      	ldrh	r3, [r7, #6]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d101      	bne.n	801224e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801224a:	2301      	movs	r3, #1
 801224c:	e074      	b.n	8012338 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	2200      	movs	r2, #0
 8012252:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	2221      	movs	r2, #33	; 0x21
 801225a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801225e:	f7f4 fe5d 	bl	8006f1c <HAL_GetTick>
 8012262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	88fa      	ldrh	r2, [r7, #6]
 8012268:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	88fa      	ldrh	r2, [r7, #6]
 8012270:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	689b      	ldr	r3, [r3, #8]
 8012278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801227c:	d108      	bne.n	8012290 <HAL_UART_Transmit+0x6c>
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	691b      	ldr	r3, [r3, #16]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d104      	bne.n	8012290 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012286:	2300      	movs	r3, #0
 8012288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801228a:	68bb      	ldr	r3, [r7, #8]
 801228c:	61bb      	str	r3, [r7, #24]
 801228e:	e003      	b.n	8012298 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012290:	68bb      	ldr	r3, [r7, #8]
 8012292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012294:	2300      	movs	r3, #0
 8012296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012298:	e030      	b.n	80122fc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	2200      	movs	r2, #0
 80122a2:	2180      	movs	r1, #128	; 0x80
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f001 fb99 	bl	80139dc <UART_WaitOnFlagUntilTimeout>
 80122aa:	4603      	mov	r3, r0
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d005      	beq.n	80122bc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	2220      	movs	r2, #32
 80122b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80122b8:	2303      	movs	r3, #3
 80122ba:	e03d      	b.n	8012338 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d10b      	bne.n	80122da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	881b      	ldrh	r3, [r3, #0]
 80122c6:	461a      	mov	r2, r3
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80122d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	3302      	adds	r3, #2
 80122d6:	61bb      	str	r3, [r7, #24]
 80122d8:	e007      	b.n	80122ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	781a      	ldrb	r2, [r3, #0]
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	3301      	adds	r3, #1
 80122e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80122f0:	b29b      	uxth	r3, r3
 80122f2:	3b01      	subs	r3, #1
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012302:	b29b      	uxth	r3, r3
 8012304:	2b00      	cmp	r3, #0
 8012306:	d1c8      	bne.n	801229a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	9300      	str	r3, [sp, #0]
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	2200      	movs	r2, #0
 8012310:	2140      	movs	r1, #64	; 0x40
 8012312:	68f8      	ldr	r0, [r7, #12]
 8012314:	f001 fb62 	bl	80139dc <UART_WaitOnFlagUntilTimeout>
 8012318:	4603      	mov	r3, r0
 801231a:	2b00      	cmp	r3, #0
 801231c:	d005      	beq.n	801232a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	2220      	movs	r2, #32
 8012322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8012326:	2303      	movs	r3, #3
 8012328:	e006      	b.n	8012338 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2220      	movs	r2, #32
 801232e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8012332:	2300      	movs	r3, #0
 8012334:	e000      	b.n	8012338 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012336:	2302      	movs	r3, #2
  }
}
 8012338:	4618      	mov	r0, r3
 801233a:	3720      	adds	r7, #32
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b08a      	sub	sp, #40	; 0x28
 8012344:	af00      	add	r7, sp, #0
 8012346:	60f8      	str	r0, [r7, #12]
 8012348:	60b9      	str	r1, [r7, #8]
 801234a:	4613      	mov	r3, r2
 801234c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012354:	2b20      	cmp	r3, #32
 8012356:	d167      	bne.n	8012428 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <HAL_UART_Transmit_DMA+0x24>
 801235e:	88fb      	ldrh	r3, [r7, #6]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d101      	bne.n	8012368 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8012364:	2301      	movs	r3, #1
 8012366:	e060      	b.n	801242a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	68ba      	ldr	r2, [r7, #8]
 801236c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	88fa      	ldrh	r2, [r7, #6]
 8012372:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	88fa      	ldrh	r2, [r7, #6]
 801237a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	2200      	movs	r2, #0
 8012382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	2221      	movs	r2, #33	; 0x21
 801238a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012392:	2b00      	cmp	r3, #0
 8012394:	d028      	beq.n	80123e8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801239a:	4a26      	ldr	r2, [pc, #152]	; (8012434 <HAL_UART_Transmit_DMA+0xf4>)
 801239c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123a2:	4a25      	ldr	r2, [pc, #148]	; (8012438 <HAL_UART_Transmit_DMA+0xf8>)
 80123a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123aa:	4a24      	ldr	r2, [pc, #144]	; (801243c <HAL_UART_Transmit_DMA+0xfc>)
 80123ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80123b2:	2200      	movs	r2, #0
 80123b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80123be:	4619      	mov	r1, r3
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	3328      	adds	r3, #40	; 0x28
 80123c6:	461a      	mov	r2, r3
 80123c8:	88fb      	ldrh	r3, [r7, #6]
 80123ca:	f7f6 ffcf 	bl	800936c <HAL_DMA_Start_IT>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d009      	beq.n	80123e8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2210      	movs	r2, #16
 80123d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2220      	movs	r2, #32
 80123e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80123e4:	2301      	movs	r3, #1
 80123e6:	e020      	b.n	801242a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	2240      	movs	r2, #64	; 0x40
 80123ee:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	3308      	adds	r3, #8
 80123f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123f8:	697b      	ldr	r3, [r7, #20]
 80123fa:	e853 3f00 	ldrex	r3, [r3]
 80123fe:	613b      	str	r3, [r7, #16]
   return(result);
 8012400:	693b      	ldr	r3, [r7, #16]
 8012402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012406:	627b      	str	r3, [r7, #36]	; 0x24
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	3308      	adds	r3, #8
 801240e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012410:	623a      	str	r2, [r7, #32]
 8012412:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012414:	69f9      	ldr	r1, [r7, #28]
 8012416:	6a3a      	ldr	r2, [r7, #32]
 8012418:	e841 2300 	strex	r3, r2, [r1]
 801241c:	61bb      	str	r3, [r7, #24]
   return(result);
 801241e:	69bb      	ldr	r3, [r7, #24]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d1e5      	bne.n	80123f0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8012424:	2300      	movs	r3, #0
 8012426:	e000      	b.n	801242a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8012428:	2302      	movs	r3, #2
  }
}
 801242a:	4618      	mov	r0, r3
 801242c:	3728      	adds	r7, #40	; 0x28
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	08013d49 	.word	0x08013d49
 8012438:	08013ddf 	.word	0x08013ddf
 801243c:	08013f61 	.word	0x08013f61

08012440 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b08a      	sub	sp, #40	; 0x28
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	4613      	mov	r3, r2
 801244c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012454:	2b20      	cmp	r3, #32
 8012456:	d137      	bne.n	80124c8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d002      	beq.n	8012464 <HAL_UART_Receive_DMA+0x24>
 801245e:	88fb      	ldrh	r3, [r7, #6]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d101      	bne.n	8012468 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8012464:	2301      	movs	r3, #1
 8012466:	e030      	b.n	80124ca <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	2200      	movs	r2, #0
 801246c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	4a18      	ldr	r2, [pc, #96]	; (80124d4 <HAL_UART_Receive_DMA+0x94>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d01f      	beq.n	80124b8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	685b      	ldr	r3, [r3, #4]
 801247e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012482:	2b00      	cmp	r3, #0
 8012484:	d018      	beq.n	80124b8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	e853 3f00 	ldrex	r3, [r3]
 8012492:	613b      	str	r3, [r7, #16]
   return(result);
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801249a:	627b      	str	r3, [r7, #36]	; 0x24
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	461a      	mov	r2, r3
 80124a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a4:	623b      	str	r3, [r7, #32]
 80124a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124a8:	69f9      	ldr	r1, [r7, #28]
 80124aa:	6a3a      	ldr	r2, [r7, #32]
 80124ac:	e841 2300 	strex	r3, r2, [r1]
 80124b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80124b2:	69bb      	ldr	r3, [r7, #24]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1e6      	bne.n	8012486 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80124b8:	88fb      	ldrh	r3, [r7, #6]
 80124ba:	461a      	mov	r2, r3
 80124bc:	68b9      	ldr	r1, [r7, #8]
 80124be:	68f8      	ldr	r0, [r7, #12]
 80124c0:	f001 faf4 	bl	8013aac <UART_Start_Receive_DMA>
 80124c4:	4603      	mov	r3, r0
 80124c6:	e000      	b.n	80124ca <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80124c8:	2302      	movs	r3, #2
  }
}
 80124ca:	4618      	mov	r0, r3
 80124cc:	3728      	adds	r7, #40	; 0x28
 80124ce:	46bd      	mov	sp, r7
 80124d0:	bd80      	pop	{r7, pc}
 80124d2:	bf00      	nop
 80124d4:	58000c00 	.word	0x58000c00

080124d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b0ba      	sub	sp, #232	; 0xe8
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	69db      	ldr	r3, [r3, #28]
 80124e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80124fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8012502:	f640 030f 	movw	r3, #2063	; 0x80f
 8012506:	4013      	ands	r3, r2
 8012508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801250c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012510:	2b00      	cmp	r3, #0
 8012512:	d11b      	bne.n	801254c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012518:	f003 0320 	and.w	r3, r3, #32
 801251c:	2b00      	cmp	r3, #0
 801251e:	d015      	beq.n	801254c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012524:	f003 0320 	and.w	r3, r3, #32
 8012528:	2b00      	cmp	r3, #0
 801252a:	d105      	bne.n	8012538 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801252c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012534:	2b00      	cmp	r3, #0
 8012536:	d009      	beq.n	801254c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801253c:	2b00      	cmp	r3, #0
 801253e:	f000 8377 	beq.w	8012c30 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	4798      	blx	r3
      }
      return;
 801254a:	e371      	b.n	8012c30 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801254c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8012550:	2b00      	cmp	r3, #0
 8012552:	f000 8123 	beq.w	801279c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8012556:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801255a:	4b8d      	ldr	r3, [pc, #564]	; (8012790 <HAL_UART_IRQHandler+0x2b8>)
 801255c:	4013      	ands	r3, r2
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8012562:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012566:	4b8b      	ldr	r3, [pc, #556]	; (8012794 <HAL_UART_IRQHandler+0x2bc>)
 8012568:	4013      	ands	r3, r2
 801256a:	2b00      	cmp	r3, #0
 801256c:	f000 8116 	beq.w	801279c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012574:	f003 0301 	and.w	r3, r3, #1
 8012578:	2b00      	cmp	r3, #0
 801257a:	d011      	beq.n	80125a0 <HAL_UART_IRQHandler+0xc8>
 801257c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012584:	2b00      	cmp	r3, #0
 8012586:	d00b      	beq.n	80125a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	2201      	movs	r2, #1
 801258e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012596:	f043 0201 	orr.w	r2, r3, #1
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125a4:	f003 0302 	and.w	r3, r3, #2
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d011      	beq.n	80125d0 <HAL_UART_IRQHandler+0xf8>
 80125ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125b0:	f003 0301 	and.w	r3, r3, #1
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d00b      	beq.n	80125d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	2202      	movs	r2, #2
 80125be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125c6:	f043 0204 	orr.w	r2, r3, #4
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80125d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80125d4:	f003 0304 	and.w	r3, r3, #4
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d011      	beq.n	8012600 <HAL_UART_IRQHandler+0x128>
 80125dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80125e0:	f003 0301 	and.w	r3, r3, #1
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d00b      	beq.n	8012600 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2204      	movs	r2, #4
 80125ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125f6:	f043 0202 	orr.w	r2, r3, #2
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012604:	f003 0308 	and.w	r3, r3, #8
 8012608:	2b00      	cmp	r3, #0
 801260a:	d017      	beq.n	801263c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801260c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012610:	f003 0320 	and.w	r3, r3, #32
 8012614:	2b00      	cmp	r3, #0
 8012616:	d105      	bne.n	8012624 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012618:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801261c:	4b5c      	ldr	r3, [pc, #368]	; (8012790 <HAL_UART_IRQHandler+0x2b8>)
 801261e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00b      	beq.n	801263c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	2208      	movs	r2, #8
 801262a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012632:	f043 0208 	orr.w	r2, r3, #8
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801263c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012644:	2b00      	cmp	r3, #0
 8012646:	d012      	beq.n	801266e <HAL_UART_IRQHandler+0x196>
 8012648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801264c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012650:	2b00      	cmp	r3, #0
 8012652:	d00c      	beq.n	801266e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801265c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012664:	f043 0220 	orr.w	r2, r3, #32
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012674:	2b00      	cmp	r3, #0
 8012676:	f000 82dd 	beq.w	8012c34 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801267e:	f003 0320 	and.w	r3, r3, #32
 8012682:	2b00      	cmp	r3, #0
 8012684:	d013      	beq.n	80126ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801268a:	f003 0320 	and.w	r3, r3, #32
 801268e:	2b00      	cmp	r3, #0
 8012690:	d105      	bne.n	801269e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012692:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801269a:	2b00      	cmp	r3, #0
 801269c:	d007      	beq.n	80126ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d003      	beq.n	80126ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126c2:	2b40      	cmp	r3, #64	; 0x40
 80126c4:	d005      	beq.n	80126d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80126c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80126ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d054      	beq.n	801277c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f001 fad2 	bl	8013c7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80126e2:	2b40      	cmp	r3, #64	; 0x40
 80126e4:	d146      	bne.n	8012774 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	3308      	adds	r3, #8
 80126ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80126f4:	e853 3f00 	ldrex	r3, [r3]
 80126f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80126fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	3308      	adds	r3, #8
 801270e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012712:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801271a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801271e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012722:	e841 2300 	strex	r3, r2, [r1]
 8012726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801272a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d1d9      	bne.n	80126e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012738:	2b00      	cmp	r3, #0
 801273a:	d017      	beq.n	801276c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012742:	4a15      	ldr	r2, [pc, #84]	; (8012798 <HAL_UART_IRQHandler+0x2c0>)
 8012744:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801274c:	4618      	mov	r0, r3
 801274e:	f7f7 fb95 	bl	8009e7c <HAL_DMA_Abort_IT>
 8012752:	4603      	mov	r3, r0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d019      	beq.n	801278c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801275e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012766:	4610      	mov	r0, r2
 8012768:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801276a:	e00f      	b.n	801278c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f7f1 fc71 	bl	8004054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012772:	e00b      	b.n	801278c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f7f1 fc6d 	bl	8004054 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801277a:	e007      	b.n	801278c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7f1 fc69 	bl	8004054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2200      	movs	r2, #0
 8012786:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801278a:	e253      	b.n	8012c34 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801278c:	bf00      	nop
    return;
 801278e:	e251      	b.n	8012c34 <HAL_UART_IRQHandler+0x75c>
 8012790:	10000001 	.word	0x10000001
 8012794:	04000120 	.word	0x04000120
 8012798:	08013fe1 	.word	0x08013fe1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	f040 81e7 	bne.w	8012b74 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80127a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80127aa:	f003 0310 	and.w	r3, r3, #16
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f000 81e0 	beq.w	8012b74 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80127b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80127b8:	f003 0310 	and.w	r3, r3, #16
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f000 81d9 	beq.w	8012b74 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	2210      	movs	r2, #16
 80127c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127d4:	2b40      	cmp	r3, #64	; 0x40
 80127d6:	f040 8151 	bne.w	8012a7c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	4a96      	ldr	r2, [pc, #600]	; (8012a3c <HAL_UART_IRQHandler+0x564>)
 80127e4:	4293      	cmp	r3, r2
 80127e6:	d068      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a93      	ldr	r2, [pc, #588]	; (8012a40 <HAL_UART_IRQHandler+0x568>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d061      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80127fc:	681b      	ldr	r3, [r3, #0]
 80127fe:	4a91      	ldr	r2, [pc, #580]	; (8012a44 <HAL_UART_IRQHandler+0x56c>)
 8012800:	4293      	cmp	r3, r2
 8012802:	d05a      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a8e      	ldr	r2, [pc, #568]	; (8012a48 <HAL_UART_IRQHandler+0x570>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d053      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	4a8c      	ldr	r2, [pc, #560]	; (8012a4c <HAL_UART_IRQHandler+0x574>)
 801281c:	4293      	cmp	r3, r2
 801281e:	d04c      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	4a89      	ldr	r2, [pc, #548]	; (8012a50 <HAL_UART_IRQHandler+0x578>)
 801282a:	4293      	cmp	r3, r2
 801282c:	d045      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4a87      	ldr	r2, [pc, #540]	; (8012a54 <HAL_UART_IRQHandler+0x57c>)
 8012838:	4293      	cmp	r3, r2
 801283a:	d03e      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a84      	ldr	r2, [pc, #528]	; (8012a58 <HAL_UART_IRQHandler+0x580>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d037      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4a82      	ldr	r2, [pc, #520]	; (8012a5c <HAL_UART_IRQHandler+0x584>)
 8012854:	4293      	cmp	r3, r2
 8012856:	d030      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	4a7f      	ldr	r2, [pc, #508]	; (8012a60 <HAL_UART_IRQHandler+0x588>)
 8012862:	4293      	cmp	r3, r2
 8012864:	d029      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	4a7d      	ldr	r2, [pc, #500]	; (8012a64 <HAL_UART_IRQHandler+0x58c>)
 8012870:	4293      	cmp	r3, r2
 8012872:	d022      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	4a7a      	ldr	r2, [pc, #488]	; (8012a68 <HAL_UART_IRQHandler+0x590>)
 801287e:	4293      	cmp	r3, r2
 8012880:	d01b      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	4a78      	ldr	r2, [pc, #480]	; (8012a6c <HAL_UART_IRQHandler+0x594>)
 801288c:	4293      	cmp	r3, r2
 801288e:	d014      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	4a75      	ldr	r2, [pc, #468]	; (8012a70 <HAL_UART_IRQHandler+0x598>)
 801289a:	4293      	cmp	r3, r2
 801289c:	d00d      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4a73      	ldr	r2, [pc, #460]	; (8012a74 <HAL_UART_IRQHandler+0x59c>)
 80128a8:	4293      	cmp	r3, r2
 80128aa:	d006      	beq.n	80128ba <HAL_UART_IRQHandler+0x3e2>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	4a70      	ldr	r2, [pc, #448]	; (8012a78 <HAL_UART_IRQHandler+0x5a0>)
 80128b6:	4293      	cmp	r3, r2
 80128b8:	d106      	bne.n	80128c8 <HAL_UART_IRQHandler+0x3f0>
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	b29b      	uxth	r3, r3
 80128c6:	e005      	b.n	80128d4 <HAL_UART_IRQHandler+0x3fc>
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80128ce:	681b      	ldr	r3, [r3, #0]
 80128d0:	685b      	ldr	r3, [r3, #4]
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80128d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80128dc:	2b00      	cmp	r3, #0
 80128de:	f000 81ab 	beq.w	8012c38 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80128e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80128ec:	429a      	cmp	r2, r3
 80128ee:	f080 81a3 	bcs.w	8012c38 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80128f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012902:	69db      	ldr	r3, [r3, #28]
 8012904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012908:	f000 8087 	beq.w	8012a1a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012918:	e853 3f00 	ldrex	r3, [r3]
 801291c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	461a      	mov	r2, r3
 8012932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801293a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801293e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012946:	e841 2300 	strex	r3, r2, [r1]
 801294a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801294e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012952:	2b00      	cmp	r3, #0
 8012954:	d1da      	bne.n	801290c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	3308      	adds	r3, #8
 801295c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801295e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012960:	e853 3f00 	ldrex	r3, [r3]
 8012964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012968:	f023 0301 	bic.w	r3, r3, #1
 801296c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	3308      	adds	r3, #8
 8012976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801297a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801297e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012986:	e841 2300 	strex	r3, r2, [r1]
 801298a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801298c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801298e:	2b00      	cmp	r3, #0
 8012990:	d1e1      	bne.n	8012956 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	3308      	adds	r3, #8
 8012998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801299a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801299c:	e853 3f00 	ldrex	r3, [r3]
 80129a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80129a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80129a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	3308      	adds	r3, #8
 80129b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80129b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80129b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80129bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129be:	e841 2300 	strex	r3, r2, [r1]
 80129c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80129c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1e3      	bne.n	8012992 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	2220      	movs	r2, #32
 80129ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	2200      	movs	r2, #0
 80129d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129e0:	e853 3f00 	ldrex	r3, [r3]
 80129e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80129e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80129e8:	f023 0310 	bic.w	r3, r3, #16
 80129ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	461a      	mov	r2, r3
 80129f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80129fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80129fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80129fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012a02:	e841 2300 	strex	r3, r2, [r1]
 8012a06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d1e4      	bne.n	80129d8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7f6 ff13 	bl	8009840 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	2202      	movs	r2, #2
 8012a1e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a2c:	b29b      	uxth	r3, r3
 8012a2e:	1ad3      	subs	r3, r2, r3
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	4619      	mov	r1, r3
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f7f1 fa0d 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012a3a:	e0fd      	b.n	8012c38 <HAL_UART_IRQHandler+0x760>
 8012a3c:	40020010 	.word	0x40020010
 8012a40:	40020028 	.word	0x40020028
 8012a44:	40020040 	.word	0x40020040
 8012a48:	40020058 	.word	0x40020058
 8012a4c:	40020070 	.word	0x40020070
 8012a50:	40020088 	.word	0x40020088
 8012a54:	400200a0 	.word	0x400200a0
 8012a58:	400200b8 	.word	0x400200b8
 8012a5c:	40020410 	.word	0x40020410
 8012a60:	40020428 	.word	0x40020428
 8012a64:	40020440 	.word	0x40020440
 8012a68:	40020458 	.word	0x40020458
 8012a6c:	40020470 	.word	0x40020470
 8012a70:	40020488 	.word	0x40020488
 8012a74:	400204a0 	.word	0x400204a0
 8012a78:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a88:	b29b      	uxth	r3, r3
 8012a8a:	1ad3      	subs	r3, r2, r3
 8012a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f000 80cf 	beq.w	8012c3c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	f000 80ca 	beq.w	8012c3c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab0:	e853 3f00 	ldrex	r3, [r3]
 8012ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012aca:	647b      	str	r3, [r7, #68]	; 0x44
 8012acc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012ad2:	e841 2300 	strex	r3, r2, [r1]
 8012ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d1e4      	bne.n	8012aa8 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	3308      	adds	r3, #8
 8012ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae8:	e853 3f00 	ldrex	r3, [r3]
 8012aec:	623b      	str	r3, [r7, #32]
   return(result);
 8012aee:	6a3a      	ldr	r2, [r7, #32]
 8012af0:	4b55      	ldr	r3, [pc, #340]	; (8012c48 <HAL_UART_IRQHandler+0x770>)
 8012af2:	4013      	ands	r3, r2
 8012af4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	3308      	adds	r3, #8
 8012afe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012b02:	633a      	str	r2, [r7, #48]	; 0x30
 8012b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012b08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b0a:	e841 2300 	strex	r3, r2, [r1]
 8012b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d1e3      	bne.n	8012ade <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	2220      	movs	r2, #32
 8012b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	2200      	movs	r2, #0
 8012b22:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2200      	movs	r2, #0
 8012b28:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b30:	693b      	ldr	r3, [r7, #16]
 8012b32:	e853 3f00 	ldrex	r3, [r3]
 8012b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f023 0310 	bic.w	r3, r3, #16
 8012b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	461a      	mov	r2, r3
 8012b48:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012b4c:	61fb      	str	r3, [r7, #28]
 8012b4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b50:	69b9      	ldr	r1, [r7, #24]
 8012b52:	69fa      	ldr	r2, [r7, #28]
 8012b54:	e841 2300 	strex	r3, r2, [r1]
 8012b58:	617b      	str	r3, [r7, #20]
   return(result);
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1e4      	bne.n	8012b2a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	2202      	movs	r2, #2
 8012b64:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012b66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012b6a:	4619      	mov	r1, r3
 8012b6c:	6878      	ldr	r0, [r7, #4]
 8012b6e:	f7f1 f971 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012b72:	e063      	b.n	8012c3c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d00e      	beq.n	8012b9e <HAL_UART_IRQHandler+0x6c6>
 8012b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012b84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d008      	beq.n	8012b9e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012b94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f001 fa63 	bl	8014062 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012b9c:	e051      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d014      	beq.n	8012bd4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012baa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d105      	bne.n	8012bc2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d008      	beq.n	8012bd4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d03a      	beq.n	8012c40 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	4798      	blx	r3
    }
    return;
 8012bd2:	e035      	b.n	8012c40 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d009      	beq.n	8012bf4 <HAL_UART_IRQHandler+0x71c>
 8012be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d003      	beq.n	8012bf4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8012bec:	6878      	ldr	r0, [r7, #4]
 8012bee:	f001 fa0d 	bl	801400c <UART_EndTransmit_IT>
    return;
 8012bf2:	e026      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012bf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d009      	beq.n	8012c14 <HAL_UART_IRQHandler+0x73c>
 8012c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c04:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d003      	beq.n	8012c14 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f001 fa3c 	bl	801408a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c12:	e016      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d010      	beq.n	8012c42 <HAL_UART_IRQHandler+0x76a>
 8012c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	da0c      	bge.n	8012c42 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f001 fa24 	bl	8014076 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012c2e:	e008      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
      return;
 8012c30:	bf00      	nop
 8012c32:	e006      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
    return;
 8012c34:	bf00      	nop
 8012c36:	e004      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
      return;
 8012c38:	bf00      	nop
 8012c3a:	e002      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
      return;
 8012c3c:	bf00      	nop
 8012c3e:	e000      	b.n	8012c42 <HAL_UART_IRQHandler+0x76a>
    return;
 8012c40:	bf00      	nop
  }
}
 8012c42:	37e8      	adds	r7, #232	; 0xe8
 8012c44:	46bd      	mov	sp, r7
 8012c46:	bd80      	pop	{r7, pc}
 8012c48:	effffffe 	.word	0xeffffffe

08012c4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8012c54:	bf00      	nop
 8012c56:	370c      	adds	r7, #12
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr

08012c60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012c68:	bf00      	nop
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr

08012c74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012c78:	b092      	sub	sp, #72	; 0x48
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012c7e:	2300      	movs	r3, #0
 8012c80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	689a      	ldr	r2, [r3, #8]
 8012c88:	697b      	ldr	r3, [r7, #20]
 8012c8a:	691b      	ldr	r3, [r3, #16]
 8012c8c:	431a      	orrs	r2, r3
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	695b      	ldr	r3, [r3, #20]
 8012c92:	431a      	orrs	r2, r3
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	69db      	ldr	r3, [r3, #28]
 8012c98:	4313      	orrs	r3, r2
 8012c9a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	681a      	ldr	r2, [r3, #0]
 8012ca2:	4bbe      	ldr	r3, [pc, #760]	; (8012f9c <UART_SetConfig+0x328>)
 8012ca4:	4013      	ands	r3, r2
 8012ca6:	697a      	ldr	r2, [r7, #20]
 8012ca8:	6812      	ldr	r2, [r2, #0]
 8012caa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012cac:	430b      	orrs	r3, r1
 8012cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012cb0:	697b      	ldr	r3, [r7, #20]
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	685b      	ldr	r3, [r3, #4]
 8012cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012cba:	697b      	ldr	r3, [r7, #20]
 8012cbc:	68da      	ldr	r2, [r3, #12]
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	430a      	orrs	r2, r1
 8012cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	699b      	ldr	r3, [r3, #24]
 8012cca:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012ccc:	697b      	ldr	r3, [r7, #20]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4ab3      	ldr	r2, [pc, #716]	; (8012fa0 <UART_SetConfig+0x32c>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d004      	beq.n	8012ce0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	6a1b      	ldr	r3, [r3, #32]
 8012cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012ce0:	697b      	ldr	r3, [r7, #20]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	689a      	ldr	r2, [r3, #8]
 8012ce6:	4baf      	ldr	r3, [pc, #700]	; (8012fa4 <UART_SetConfig+0x330>)
 8012ce8:	4013      	ands	r3, r2
 8012cea:	697a      	ldr	r2, [r7, #20]
 8012cec:	6812      	ldr	r2, [r2, #0]
 8012cee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012cf0:	430b      	orrs	r3, r1
 8012cf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012cf4:	697b      	ldr	r3, [r7, #20]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cfa:	f023 010f 	bic.w	r1, r3, #15
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	430a      	orrs	r2, r1
 8012d08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	4aa6      	ldr	r2, [pc, #664]	; (8012fa8 <UART_SetConfig+0x334>)
 8012d10:	4293      	cmp	r3, r2
 8012d12:	d177      	bne.n	8012e04 <UART_SetConfig+0x190>
 8012d14:	4ba5      	ldr	r3, [pc, #660]	; (8012fac <UART_SetConfig+0x338>)
 8012d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012d1c:	2b28      	cmp	r3, #40	; 0x28
 8012d1e:	d86d      	bhi.n	8012dfc <UART_SetConfig+0x188>
 8012d20:	a201      	add	r2, pc, #4	; (adr r2, 8012d28 <UART_SetConfig+0xb4>)
 8012d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d26:	bf00      	nop
 8012d28:	08012dcd 	.word	0x08012dcd
 8012d2c:	08012dfd 	.word	0x08012dfd
 8012d30:	08012dfd 	.word	0x08012dfd
 8012d34:	08012dfd 	.word	0x08012dfd
 8012d38:	08012dfd 	.word	0x08012dfd
 8012d3c:	08012dfd 	.word	0x08012dfd
 8012d40:	08012dfd 	.word	0x08012dfd
 8012d44:	08012dfd 	.word	0x08012dfd
 8012d48:	08012dd5 	.word	0x08012dd5
 8012d4c:	08012dfd 	.word	0x08012dfd
 8012d50:	08012dfd 	.word	0x08012dfd
 8012d54:	08012dfd 	.word	0x08012dfd
 8012d58:	08012dfd 	.word	0x08012dfd
 8012d5c:	08012dfd 	.word	0x08012dfd
 8012d60:	08012dfd 	.word	0x08012dfd
 8012d64:	08012dfd 	.word	0x08012dfd
 8012d68:	08012ddd 	.word	0x08012ddd
 8012d6c:	08012dfd 	.word	0x08012dfd
 8012d70:	08012dfd 	.word	0x08012dfd
 8012d74:	08012dfd 	.word	0x08012dfd
 8012d78:	08012dfd 	.word	0x08012dfd
 8012d7c:	08012dfd 	.word	0x08012dfd
 8012d80:	08012dfd 	.word	0x08012dfd
 8012d84:	08012dfd 	.word	0x08012dfd
 8012d88:	08012de5 	.word	0x08012de5
 8012d8c:	08012dfd 	.word	0x08012dfd
 8012d90:	08012dfd 	.word	0x08012dfd
 8012d94:	08012dfd 	.word	0x08012dfd
 8012d98:	08012dfd 	.word	0x08012dfd
 8012d9c:	08012dfd 	.word	0x08012dfd
 8012da0:	08012dfd 	.word	0x08012dfd
 8012da4:	08012dfd 	.word	0x08012dfd
 8012da8:	08012ded 	.word	0x08012ded
 8012dac:	08012dfd 	.word	0x08012dfd
 8012db0:	08012dfd 	.word	0x08012dfd
 8012db4:	08012dfd 	.word	0x08012dfd
 8012db8:	08012dfd 	.word	0x08012dfd
 8012dbc:	08012dfd 	.word	0x08012dfd
 8012dc0:	08012dfd 	.word	0x08012dfd
 8012dc4:	08012dfd 	.word	0x08012dfd
 8012dc8:	08012df5 	.word	0x08012df5
 8012dcc:	2301      	movs	r3, #1
 8012dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dd2:	e222      	b.n	801321a <UART_SetConfig+0x5a6>
 8012dd4:	2304      	movs	r3, #4
 8012dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dda:	e21e      	b.n	801321a <UART_SetConfig+0x5a6>
 8012ddc:	2308      	movs	r3, #8
 8012dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012de2:	e21a      	b.n	801321a <UART_SetConfig+0x5a6>
 8012de4:	2310      	movs	r3, #16
 8012de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dea:	e216      	b.n	801321a <UART_SetConfig+0x5a6>
 8012dec:	2320      	movs	r3, #32
 8012dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012df2:	e212      	b.n	801321a <UART_SetConfig+0x5a6>
 8012df4:	2340      	movs	r3, #64	; 0x40
 8012df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dfa:	e20e      	b.n	801321a <UART_SetConfig+0x5a6>
 8012dfc:	2380      	movs	r3, #128	; 0x80
 8012dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e02:	e20a      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4a69      	ldr	r2, [pc, #420]	; (8012fb0 <UART_SetConfig+0x33c>)
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d130      	bne.n	8012e70 <UART_SetConfig+0x1fc>
 8012e0e:	4b67      	ldr	r3, [pc, #412]	; (8012fac <UART_SetConfig+0x338>)
 8012e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e12:	f003 0307 	and.w	r3, r3, #7
 8012e16:	2b05      	cmp	r3, #5
 8012e18:	d826      	bhi.n	8012e68 <UART_SetConfig+0x1f4>
 8012e1a:	a201      	add	r2, pc, #4	; (adr r2, 8012e20 <UART_SetConfig+0x1ac>)
 8012e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e20:	08012e39 	.word	0x08012e39
 8012e24:	08012e41 	.word	0x08012e41
 8012e28:	08012e49 	.word	0x08012e49
 8012e2c:	08012e51 	.word	0x08012e51
 8012e30:	08012e59 	.word	0x08012e59
 8012e34:	08012e61 	.word	0x08012e61
 8012e38:	2300      	movs	r3, #0
 8012e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e3e:	e1ec      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e40:	2304      	movs	r3, #4
 8012e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e46:	e1e8      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e48:	2308      	movs	r3, #8
 8012e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e4e:	e1e4      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e50:	2310      	movs	r3, #16
 8012e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e56:	e1e0      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e58:	2320      	movs	r3, #32
 8012e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e5e:	e1dc      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e60:	2340      	movs	r3, #64	; 0x40
 8012e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e66:	e1d8      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e68:	2380      	movs	r3, #128	; 0x80
 8012e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e6e:	e1d4      	b.n	801321a <UART_SetConfig+0x5a6>
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	4a4f      	ldr	r2, [pc, #316]	; (8012fb4 <UART_SetConfig+0x340>)
 8012e76:	4293      	cmp	r3, r2
 8012e78:	d130      	bne.n	8012edc <UART_SetConfig+0x268>
 8012e7a:	4b4c      	ldr	r3, [pc, #304]	; (8012fac <UART_SetConfig+0x338>)
 8012e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e7e:	f003 0307 	and.w	r3, r3, #7
 8012e82:	2b05      	cmp	r3, #5
 8012e84:	d826      	bhi.n	8012ed4 <UART_SetConfig+0x260>
 8012e86:	a201      	add	r2, pc, #4	; (adr r2, 8012e8c <UART_SetConfig+0x218>)
 8012e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e8c:	08012ea5 	.word	0x08012ea5
 8012e90:	08012ead 	.word	0x08012ead
 8012e94:	08012eb5 	.word	0x08012eb5
 8012e98:	08012ebd 	.word	0x08012ebd
 8012e9c:	08012ec5 	.word	0x08012ec5
 8012ea0:	08012ecd 	.word	0x08012ecd
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eaa:	e1b6      	b.n	801321a <UART_SetConfig+0x5a6>
 8012eac:	2304      	movs	r3, #4
 8012eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb2:	e1b2      	b.n	801321a <UART_SetConfig+0x5a6>
 8012eb4:	2308      	movs	r3, #8
 8012eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eba:	e1ae      	b.n	801321a <UART_SetConfig+0x5a6>
 8012ebc:	2310      	movs	r3, #16
 8012ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ec2:	e1aa      	b.n	801321a <UART_SetConfig+0x5a6>
 8012ec4:	2320      	movs	r3, #32
 8012ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eca:	e1a6      	b.n	801321a <UART_SetConfig+0x5a6>
 8012ecc:	2340      	movs	r3, #64	; 0x40
 8012ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ed2:	e1a2      	b.n	801321a <UART_SetConfig+0x5a6>
 8012ed4:	2380      	movs	r3, #128	; 0x80
 8012ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eda:	e19e      	b.n	801321a <UART_SetConfig+0x5a6>
 8012edc:	697b      	ldr	r3, [r7, #20]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	4a35      	ldr	r2, [pc, #212]	; (8012fb8 <UART_SetConfig+0x344>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d130      	bne.n	8012f48 <UART_SetConfig+0x2d4>
 8012ee6:	4b31      	ldr	r3, [pc, #196]	; (8012fac <UART_SetConfig+0x338>)
 8012ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eea:	f003 0307 	and.w	r3, r3, #7
 8012eee:	2b05      	cmp	r3, #5
 8012ef0:	d826      	bhi.n	8012f40 <UART_SetConfig+0x2cc>
 8012ef2:	a201      	add	r2, pc, #4	; (adr r2, 8012ef8 <UART_SetConfig+0x284>)
 8012ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ef8:	08012f11 	.word	0x08012f11
 8012efc:	08012f19 	.word	0x08012f19
 8012f00:	08012f21 	.word	0x08012f21
 8012f04:	08012f29 	.word	0x08012f29
 8012f08:	08012f31 	.word	0x08012f31
 8012f0c:	08012f39 	.word	0x08012f39
 8012f10:	2300      	movs	r3, #0
 8012f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f16:	e180      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f18:	2304      	movs	r3, #4
 8012f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f1e:	e17c      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f20:	2308      	movs	r3, #8
 8012f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f26:	e178      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f28:	2310      	movs	r3, #16
 8012f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f2e:	e174      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f30:	2320      	movs	r3, #32
 8012f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f36:	e170      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f38:	2340      	movs	r3, #64	; 0x40
 8012f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f3e:	e16c      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f40:	2380      	movs	r3, #128	; 0x80
 8012f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f46:	e168      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	4a1b      	ldr	r2, [pc, #108]	; (8012fbc <UART_SetConfig+0x348>)
 8012f4e:	4293      	cmp	r3, r2
 8012f50:	d142      	bne.n	8012fd8 <UART_SetConfig+0x364>
 8012f52:	4b16      	ldr	r3, [pc, #88]	; (8012fac <UART_SetConfig+0x338>)
 8012f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f56:	f003 0307 	and.w	r3, r3, #7
 8012f5a:	2b05      	cmp	r3, #5
 8012f5c:	d838      	bhi.n	8012fd0 <UART_SetConfig+0x35c>
 8012f5e:	a201      	add	r2, pc, #4	; (adr r2, 8012f64 <UART_SetConfig+0x2f0>)
 8012f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f64:	08012f7d 	.word	0x08012f7d
 8012f68:	08012f85 	.word	0x08012f85
 8012f6c:	08012f8d 	.word	0x08012f8d
 8012f70:	08012f95 	.word	0x08012f95
 8012f74:	08012fc1 	.word	0x08012fc1
 8012f78:	08012fc9 	.word	0x08012fc9
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f82:	e14a      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f84:	2304      	movs	r3, #4
 8012f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f8a:	e146      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f8c:	2308      	movs	r3, #8
 8012f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f92:	e142      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f94:	2310      	movs	r3, #16
 8012f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f9a:	e13e      	b.n	801321a <UART_SetConfig+0x5a6>
 8012f9c:	cfff69f3 	.word	0xcfff69f3
 8012fa0:	58000c00 	.word	0x58000c00
 8012fa4:	11fff4ff 	.word	0x11fff4ff
 8012fa8:	40011000 	.word	0x40011000
 8012fac:	58024400 	.word	0x58024400
 8012fb0:	40004400 	.word	0x40004400
 8012fb4:	40004800 	.word	0x40004800
 8012fb8:	40004c00 	.word	0x40004c00
 8012fbc:	40005000 	.word	0x40005000
 8012fc0:	2320      	movs	r3, #32
 8012fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fc6:	e128      	b.n	801321a <UART_SetConfig+0x5a6>
 8012fc8:	2340      	movs	r3, #64	; 0x40
 8012fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fce:	e124      	b.n	801321a <UART_SetConfig+0x5a6>
 8012fd0:	2380      	movs	r3, #128	; 0x80
 8012fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012fd6:	e120      	b.n	801321a <UART_SetConfig+0x5a6>
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	4acb      	ldr	r2, [pc, #812]	; (801330c <UART_SetConfig+0x698>)
 8012fde:	4293      	cmp	r3, r2
 8012fe0:	d176      	bne.n	80130d0 <UART_SetConfig+0x45c>
 8012fe2:	4bcb      	ldr	r3, [pc, #812]	; (8013310 <UART_SetConfig+0x69c>)
 8012fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012fea:	2b28      	cmp	r3, #40	; 0x28
 8012fec:	d86c      	bhi.n	80130c8 <UART_SetConfig+0x454>
 8012fee:	a201      	add	r2, pc, #4	; (adr r2, 8012ff4 <UART_SetConfig+0x380>)
 8012ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ff4:	08013099 	.word	0x08013099
 8012ff8:	080130c9 	.word	0x080130c9
 8012ffc:	080130c9 	.word	0x080130c9
 8013000:	080130c9 	.word	0x080130c9
 8013004:	080130c9 	.word	0x080130c9
 8013008:	080130c9 	.word	0x080130c9
 801300c:	080130c9 	.word	0x080130c9
 8013010:	080130c9 	.word	0x080130c9
 8013014:	080130a1 	.word	0x080130a1
 8013018:	080130c9 	.word	0x080130c9
 801301c:	080130c9 	.word	0x080130c9
 8013020:	080130c9 	.word	0x080130c9
 8013024:	080130c9 	.word	0x080130c9
 8013028:	080130c9 	.word	0x080130c9
 801302c:	080130c9 	.word	0x080130c9
 8013030:	080130c9 	.word	0x080130c9
 8013034:	080130a9 	.word	0x080130a9
 8013038:	080130c9 	.word	0x080130c9
 801303c:	080130c9 	.word	0x080130c9
 8013040:	080130c9 	.word	0x080130c9
 8013044:	080130c9 	.word	0x080130c9
 8013048:	080130c9 	.word	0x080130c9
 801304c:	080130c9 	.word	0x080130c9
 8013050:	080130c9 	.word	0x080130c9
 8013054:	080130b1 	.word	0x080130b1
 8013058:	080130c9 	.word	0x080130c9
 801305c:	080130c9 	.word	0x080130c9
 8013060:	080130c9 	.word	0x080130c9
 8013064:	080130c9 	.word	0x080130c9
 8013068:	080130c9 	.word	0x080130c9
 801306c:	080130c9 	.word	0x080130c9
 8013070:	080130c9 	.word	0x080130c9
 8013074:	080130b9 	.word	0x080130b9
 8013078:	080130c9 	.word	0x080130c9
 801307c:	080130c9 	.word	0x080130c9
 8013080:	080130c9 	.word	0x080130c9
 8013084:	080130c9 	.word	0x080130c9
 8013088:	080130c9 	.word	0x080130c9
 801308c:	080130c9 	.word	0x080130c9
 8013090:	080130c9 	.word	0x080130c9
 8013094:	080130c1 	.word	0x080130c1
 8013098:	2301      	movs	r3, #1
 801309a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801309e:	e0bc      	b.n	801321a <UART_SetConfig+0x5a6>
 80130a0:	2304      	movs	r3, #4
 80130a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130a6:	e0b8      	b.n	801321a <UART_SetConfig+0x5a6>
 80130a8:	2308      	movs	r3, #8
 80130aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ae:	e0b4      	b.n	801321a <UART_SetConfig+0x5a6>
 80130b0:	2310      	movs	r3, #16
 80130b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130b6:	e0b0      	b.n	801321a <UART_SetConfig+0x5a6>
 80130b8:	2320      	movs	r3, #32
 80130ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130be:	e0ac      	b.n	801321a <UART_SetConfig+0x5a6>
 80130c0:	2340      	movs	r3, #64	; 0x40
 80130c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130c6:	e0a8      	b.n	801321a <UART_SetConfig+0x5a6>
 80130c8:	2380      	movs	r3, #128	; 0x80
 80130ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ce:	e0a4      	b.n	801321a <UART_SetConfig+0x5a6>
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	4a8f      	ldr	r2, [pc, #572]	; (8013314 <UART_SetConfig+0x6a0>)
 80130d6:	4293      	cmp	r3, r2
 80130d8:	d130      	bne.n	801313c <UART_SetConfig+0x4c8>
 80130da:	4b8d      	ldr	r3, [pc, #564]	; (8013310 <UART_SetConfig+0x69c>)
 80130dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130de:	f003 0307 	and.w	r3, r3, #7
 80130e2:	2b05      	cmp	r3, #5
 80130e4:	d826      	bhi.n	8013134 <UART_SetConfig+0x4c0>
 80130e6:	a201      	add	r2, pc, #4	; (adr r2, 80130ec <UART_SetConfig+0x478>)
 80130e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130ec:	08013105 	.word	0x08013105
 80130f0:	0801310d 	.word	0x0801310d
 80130f4:	08013115 	.word	0x08013115
 80130f8:	0801311d 	.word	0x0801311d
 80130fc:	08013125 	.word	0x08013125
 8013100:	0801312d 	.word	0x0801312d
 8013104:	2300      	movs	r3, #0
 8013106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801310a:	e086      	b.n	801321a <UART_SetConfig+0x5a6>
 801310c:	2304      	movs	r3, #4
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013112:	e082      	b.n	801321a <UART_SetConfig+0x5a6>
 8013114:	2308      	movs	r3, #8
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311a:	e07e      	b.n	801321a <UART_SetConfig+0x5a6>
 801311c:	2310      	movs	r3, #16
 801311e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013122:	e07a      	b.n	801321a <UART_SetConfig+0x5a6>
 8013124:	2320      	movs	r3, #32
 8013126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801312a:	e076      	b.n	801321a <UART_SetConfig+0x5a6>
 801312c:	2340      	movs	r3, #64	; 0x40
 801312e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013132:	e072      	b.n	801321a <UART_SetConfig+0x5a6>
 8013134:	2380      	movs	r3, #128	; 0x80
 8013136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801313a:	e06e      	b.n	801321a <UART_SetConfig+0x5a6>
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	4a75      	ldr	r2, [pc, #468]	; (8013318 <UART_SetConfig+0x6a4>)
 8013142:	4293      	cmp	r3, r2
 8013144:	d130      	bne.n	80131a8 <UART_SetConfig+0x534>
 8013146:	4b72      	ldr	r3, [pc, #456]	; (8013310 <UART_SetConfig+0x69c>)
 8013148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801314a:	f003 0307 	and.w	r3, r3, #7
 801314e:	2b05      	cmp	r3, #5
 8013150:	d826      	bhi.n	80131a0 <UART_SetConfig+0x52c>
 8013152:	a201      	add	r2, pc, #4	; (adr r2, 8013158 <UART_SetConfig+0x4e4>)
 8013154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013158:	08013171 	.word	0x08013171
 801315c:	08013179 	.word	0x08013179
 8013160:	08013181 	.word	0x08013181
 8013164:	08013189 	.word	0x08013189
 8013168:	08013191 	.word	0x08013191
 801316c:	08013199 	.word	0x08013199
 8013170:	2300      	movs	r3, #0
 8013172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013176:	e050      	b.n	801321a <UART_SetConfig+0x5a6>
 8013178:	2304      	movs	r3, #4
 801317a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801317e:	e04c      	b.n	801321a <UART_SetConfig+0x5a6>
 8013180:	2308      	movs	r3, #8
 8013182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013186:	e048      	b.n	801321a <UART_SetConfig+0x5a6>
 8013188:	2310      	movs	r3, #16
 801318a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801318e:	e044      	b.n	801321a <UART_SetConfig+0x5a6>
 8013190:	2320      	movs	r3, #32
 8013192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013196:	e040      	b.n	801321a <UART_SetConfig+0x5a6>
 8013198:	2340      	movs	r3, #64	; 0x40
 801319a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801319e:	e03c      	b.n	801321a <UART_SetConfig+0x5a6>
 80131a0:	2380      	movs	r3, #128	; 0x80
 80131a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131a6:	e038      	b.n	801321a <UART_SetConfig+0x5a6>
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	4a5b      	ldr	r2, [pc, #364]	; (801331c <UART_SetConfig+0x6a8>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d130      	bne.n	8013214 <UART_SetConfig+0x5a0>
 80131b2:	4b57      	ldr	r3, [pc, #348]	; (8013310 <UART_SetConfig+0x69c>)
 80131b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80131b6:	f003 0307 	and.w	r3, r3, #7
 80131ba:	2b05      	cmp	r3, #5
 80131bc:	d826      	bhi.n	801320c <UART_SetConfig+0x598>
 80131be:	a201      	add	r2, pc, #4	; (adr r2, 80131c4 <UART_SetConfig+0x550>)
 80131c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131c4:	080131dd 	.word	0x080131dd
 80131c8:	080131e5 	.word	0x080131e5
 80131cc:	080131ed 	.word	0x080131ed
 80131d0:	080131f5 	.word	0x080131f5
 80131d4:	080131fd 	.word	0x080131fd
 80131d8:	08013205 	.word	0x08013205
 80131dc:	2302      	movs	r3, #2
 80131de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e2:	e01a      	b.n	801321a <UART_SetConfig+0x5a6>
 80131e4:	2304      	movs	r3, #4
 80131e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ea:	e016      	b.n	801321a <UART_SetConfig+0x5a6>
 80131ec:	2308      	movs	r3, #8
 80131ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f2:	e012      	b.n	801321a <UART_SetConfig+0x5a6>
 80131f4:	2310      	movs	r3, #16
 80131f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fa:	e00e      	b.n	801321a <UART_SetConfig+0x5a6>
 80131fc:	2320      	movs	r3, #32
 80131fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013202:	e00a      	b.n	801321a <UART_SetConfig+0x5a6>
 8013204:	2340      	movs	r3, #64	; 0x40
 8013206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801320a:	e006      	b.n	801321a <UART_SetConfig+0x5a6>
 801320c:	2380      	movs	r3, #128	; 0x80
 801320e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013212:	e002      	b.n	801321a <UART_SetConfig+0x5a6>
 8013214:	2380      	movs	r3, #128	; 0x80
 8013216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	4a3f      	ldr	r2, [pc, #252]	; (801331c <UART_SetConfig+0x6a8>)
 8013220:	4293      	cmp	r3, r2
 8013222:	f040 80f8 	bne.w	8013416 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8013226:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801322a:	2b20      	cmp	r3, #32
 801322c:	dc46      	bgt.n	80132bc <UART_SetConfig+0x648>
 801322e:	2b02      	cmp	r3, #2
 8013230:	f2c0 8082 	blt.w	8013338 <UART_SetConfig+0x6c4>
 8013234:	3b02      	subs	r3, #2
 8013236:	2b1e      	cmp	r3, #30
 8013238:	d87e      	bhi.n	8013338 <UART_SetConfig+0x6c4>
 801323a:	a201      	add	r2, pc, #4	; (adr r2, 8013240 <UART_SetConfig+0x5cc>)
 801323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013240:	080132c3 	.word	0x080132c3
 8013244:	08013339 	.word	0x08013339
 8013248:	080132cb 	.word	0x080132cb
 801324c:	08013339 	.word	0x08013339
 8013250:	08013339 	.word	0x08013339
 8013254:	08013339 	.word	0x08013339
 8013258:	080132db 	.word	0x080132db
 801325c:	08013339 	.word	0x08013339
 8013260:	08013339 	.word	0x08013339
 8013264:	08013339 	.word	0x08013339
 8013268:	08013339 	.word	0x08013339
 801326c:	08013339 	.word	0x08013339
 8013270:	08013339 	.word	0x08013339
 8013274:	08013339 	.word	0x08013339
 8013278:	080132eb 	.word	0x080132eb
 801327c:	08013339 	.word	0x08013339
 8013280:	08013339 	.word	0x08013339
 8013284:	08013339 	.word	0x08013339
 8013288:	08013339 	.word	0x08013339
 801328c:	08013339 	.word	0x08013339
 8013290:	08013339 	.word	0x08013339
 8013294:	08013339 	.word	0x08013339
 8013298:	08013339 	.word	0x08013339
 801329c:	08013339 	.word	0x08013339
 80132a0:	08013339 	.word	0x08013339
 80132a4:	08013339 	.word	0x08013339
 80132a8:	08013339 	.word	0x08013339
 80132ac:	08013339 	.word	0x08013339
 80132b0:	08013339 	.word	0x08013339
 80132b4:	08013339 	.word	0x08013339
 80132b8:	0801332b 	.word	0x0801332b
 80132bc:	2b40      	cmp	r3, #64	; 0x40
 80132be:	d037      	beq.n	8013330 <UART_SetConfig+0x6bc>
 80132c0:	e03a      	b.n	8013338 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80132c2:	f7fc f995 	bl	800f5f0 <HAL_RCCEx_GetD3PCLK1Freq>
 80132c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80132c8:	e03c      	b.n	8013344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80132ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fc f9a4 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80132d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132d8:	e034      	b.n	8013344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80132da:	f107 0318 	add.w	r3, r7, #24
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fc faf0 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80132e8:	e02c      	b.n	8013344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132ea:	4b09      	ldr	r3, [pc, #36]	; (8013310 <UART_SetConfig+0x69c>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	f003 0320 	and.w	r3, r3, #32
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d016      	beq.n	8013324 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80132f6:	4b06      	ldr	r3, [pc, #24]	; (8013310 <UART_SetConfig+0x69c>)
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	08db      	lsrs	r3, r3, #3
 80132fc:	f003 0303 	and.w	r3, r3, #3
 8013300:	4a07      	ldr	r2, [pc, #28]	; (8013320 <UART_SetConfig+0x6ac>)
 8013302:	fa22 f303 	lsr.w	r3, r2, r3
 8013306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013308:	e01c      	b.n	8013344 <UART_SetConfig+0x6d0>
 801330a:	bf00      	nop
 801330c:	40011400 	.word	0x40011400
 8013310:	58024400 	.word	0x58024400
 8013314:	40007800 	.word	0x40007800
 8013318:	40007c00 	.word	0x40007c00
 801331c:	58000c00 	.word	0x58000c00
 8013320:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8013324:	4b9d      	ldr	r3, [pc, #628]	; (801359c <UART_SetConfig+0x928>)
 8013326:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013328:	e00c      	b.n	8013344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801332a:	4b9d      	ldr	r3, [pc, #628]	; (80135a0 <UART_SetConfig+0x92c>)
 801332c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801332e:	e009      	b.n	8013344 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013336:	e005      	b.n	8013344 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8013338:	2300      	movs	r3, #0
 801333a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801333c:	2301      	movs	r3, #1
 801333e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013342:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8013344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013346:	2b00      	cmp	r3, #0
 8013348:	f000 81de 	beq.w	8013708 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013350:	4a94      	ldr	r2, [pc, #592]	; (80135a4 <UART_SetConfig+0x930>)
 8013352:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013356:	461a      	mov	r2, r3
 8013358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801335a:	fbb3 f3f2 	udiv	r3, r3, r2
 801335e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013360:	697b      	ldr	r3, [r7, #20]
 8013362:	685a      	ldr	r2, [r3, #4]
 8013364:	4613      	mov	r3, r2
 8013366:	005b      	lsls	r3, r3, #1
 8013368:	4413      	add	r3, r2
 801336a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801336c:	429a      	cmp	r2, r3
 801336e:	d305      	bcc.n	801337c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8013370:	697b      	ldr	r3, [r7, #20]
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013378:	429a      	cmp	r2, r3
 801337a:	d903      	bls.n	8013384 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801337c:	2301      	movs	r3, #1
 801337e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013382:	e1c1      	b.n	8013708 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013386:	2200      	movs	r2, #0
 8013388:	60bb      	str	r3, [r7, #8]
 801338a:	60fa      	str	r2, [r7, #12]
 801338c:	697b      	ldr	r3, [r7, #20]
 801338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013390:	4a84      	ldr	r2, [pc, #528]	; (80135a4 <UART_SetConfig+0x930>)
 8013392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013396:	b29b      	uxth	r3, r3
 8013398:	2200      	movs	r2, #0
 801339a:	603b      	str	r3, [r7, #0]
 801339c:	607a      	str	r2, [r7, #4]
 801339e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80133a6:	f7ec fff3 	bl	8000390 <__aeabi_uldivmod>
 80133aa:	4602      	mov	r2, r0
 80133ac:	460b      	mov	r3, r1
 80133ae:	4610      	mov	r0, r2
 80133b0:	4619      	mov	r1, r3
 80133b2:	f04f 0200 	mov.w	r2, #0
 80133b6:	f04f 0300 	mov.w	r3, #0
 80133ba:	020b      	lsls	r3, r1, #8
 80133bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80133c0:	0202      	lsls	r2, r0, #8
 80133c2:	6979      	ldr	r1, [r7, #20]
 80133c4:	6849      	ldr	r1, [r1, #4]
 80133c6:	0849      	lsrs	r1, r1, #1
 80133c8:	2000      	movs	r0, #0
 80133ca:	460c      	mov	r4, r1
 80133cc:	4605      	mov	r5, r0
 80133ce:	eb12 0804 	adds.w	r8, r2, r4
 80133d2:	eb43 0905 	adc.w	r9, r3, r5
 80133d6:	697b      	ldr	r3, [r7, #20]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	2200      	movs	r2, #0
 80133dc:	469a      	mov	sl, r3
 80133de:	4693      	mov	fp, r2
 80133e0:	4652      	mov	r2, sl
 80133e2:	465b      	mov	r3, fp
 80133e4:	4640      	mov	r0, r8
 80133e6:	4649      	mov	r1, r9
 80133e8:	f7ec ffd2 	bl	8000390 <__aeabi_uldivmod>
 80133ec:	4602      	mov	r2, r0
 80133ee:	460b      	mov	r3, r1
 80133f0:	4613      	mov	r3, r2
 80133f2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80133f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80133fa:	d308      	bcc.n	801340e <UART_SetConfig+0x79a>
 80133fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013402:	d204      	bcs.n	801340e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801340a:	60da      	str	r2, [r3, #12]
 801340c:	e17c      	b.n	8013708 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801340e:	2301      	movs	r3, #1
 8013410:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013414:	e178      	b.n	8013708 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	69db      	ldr	r3, [r3, #28]
 801341a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801341e:	f040 80c5 	bne.w	80135ac <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8013422:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013426:	2b20      	cmp	r3, #32
 8013428:	dc48      	bgt.n	80134bc <UART_SetConfig+0x848>
 801342a:	2b00      	cmp	r3, #0
 801342c:	db7b      	blt.n	8013526 <UART_SetConfig+0x8b2>
 801342e:	2b20      	cmp	r3, #32
 8013430:	d879      	bhi.n	8013526 <UART_SetConfig+0x8b2>
 8013432:	a201      	add	r2, pc, #4	; (adr r2, 8013438 <UART_SetConfig+0x7c4>)
 8013434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013438:	080134c3 	.word	0x080134c3
 801343c:	080134cb 	.word	0x080134cb
 8013440:	08013527 	.word	0x08013527
 8013444:	08013527 	.word	0x08013527
 8013448:	080134d3 	.word	0x080134d3
 801344c:	08013527 	.word	0x08013527
 8013450:	08013527 	.word	0x08013527
 8013454:	08013527 	.word	0x08013527
 8013458:	080134e3 	.word	0x080134e3
 801345c:	08013527 	.word	0x08013527
 8013460:	08013527 	.word	0x08013527
 8013464:	08013527 	.word	0x08013527
 8013468:	08013527 	.word	0x08013527
 801346c:	08013527 	.word	0x08013527
 8013470:	08013527 	.word	0x08013527
 8013474:	08013527 	.word	0x08013527
 8013478:	080134f3 	.word	0x080134f3
 801347c:	08013527 	.word	0x08013527
 8013480:	08013527 	.word	0x08013527
 8013484:	08013527 	.word	0x08013527
 8013488:	08013527 	.word	0x08013527
 801348c:	08013527 	.word	0x08013527
 8013490:	08013527 	.word	0x08013527
 8013494:	08013527 	.word	0x08013527
 8013498:	08013527 	.word	0x08013527
 801349c:	08013527 	.word	0x08013527
 80134a0:	08013527 	.word	0x08013527
 80134a4:	08013527 	.word	0x08013527
 80134a8:	08013527 	.word	0x08013527
 80134ac:	08013527 	.word	0x08013527
 80134b0:	08013527 	.word	0x08013527
 80134b4:	08013527 	.word	0x08013527
 80134b8:	08013519 	.word	0x08013519
 80134bc:	2b40      	cmp	r3, #64	; 0x40
 80134be:	d02e      	beq.n	801351e <UART_SetConfig+0x8aa>
 80134c0:	e031      	b.n	8013526 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80134c2:	f7fa f8df 	bl	800d684 <HAL_RCC_GetPCLK1Freq>
 80134c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80134c8:	e033      	b.n	8013532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80134ca:	f7fa f8f1 	bl	800d6b0 <HAL_RCC_GetPCLK2Freq>
 80134ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80134d0:	e02f      	b.n	8013532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80134d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134d6:	4618      	mov	r0, r3
 80134d8:	f7fc f8a0 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80134dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134e0:	e027      	b.n	8013532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80134e2:	f107 0318 	add.w	r3, r7, #24
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7fc f9ec 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80134f0:	e01f      	b.n	8013532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80134f2:	4b2d      	ldr	r3, [pc, #180]	; (80135a8 <UART_SetConfig+0x934>)
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	f003 0320 	and.w	r3, r3, #32
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d009      	beq.n	8013512 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80134fe:	4b2a      	ldr	r3, [pc, #168]	; (80135a8 <UART_SetConfig+0x934>)
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	08db      	lsrs	r3, r3, #3
 8013504:	f003 0303 	and.w	r3, r3, #3
 8013508:	4a24      	ldr	r2, [pc, #144]	; (801359c <UART_SetConfig+0x928>)
 801350a:	fa22 f303 	lsr.w	r3, r2, r3
 801350e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013510:	e00f      	b.n	8013532 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013512:	4b22      	ldr	r3, [pc, #136]	; (801359c <UART_SetConfig+0x928>)
 8013514:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013516:	e00c      	b.n	8013532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013518:	4b21      	ldr	r3, [pc, #132]	; (80135a0 <UART_SetConfig+0x92c>)
 801351a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801351c:	e009      	b.n	8013532 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801351e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013522:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013524:	e005      	b.n	8013532 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8013526:	2300      	movs	r3, #0
 8013528:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801352a:	2301      	movs	r3, #1
 801352c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013530:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8013532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013534:	2b00      	cmp	r3, #0
 8013536:	f000 80e7 	beq.w	8013708 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801353a:	697b      	ldr	r3, [r7, #20]
 801353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801353e:	4a19      	ldr	r2, [pc, #100]	; (80135a4 <UART_SetConfig+0x930>)
 8013540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013544:	461a      	mov	r2, r3
 8013546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013548:	fbb3 f3f2 	udiv	r3, r3, r2
 801354c:	005a      	lsls	r2, r3, #1
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	085b      	lsrs	r3, r3, #1
 8013554:	441a      	add	r2, r3
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	fbb2 f3f3 	udiv	r3, r2, r3
 801355e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013562:	2b0f      	cmp	r3, #15
 8013564:	d916      	bls.n	8013594 <UART_SetConfig+0x920>
 8013566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801356c:	d212      	bcs.n	8013594 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013570:	b29b      	uxth	r3, r3
 8013572:	f023 030f 	bic.w	r3, r3, #15
 8013576:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357a:	085b      	lsrs	r3, r3, #1
 801357c:	b29b      	uxth	r3, r3
 801357e:	f003 0307 	and.w	r3, r3, #7
 8013582:	b29a      	uxth	r2, r3
 8013584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013586:	4313      	orrs	r3, r2
 8013588:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013590:	60da      	str	r2, [r3, #12]
 8013592:	e0b9      	b.n	8013708 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013594:	2301      	movs	r3, #1
 8013596:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801359a:	e0b5      	b.n	8013708 <UART_SetConfig+0xa94>
 801359c:	03d09000 	.word	0x03d09000
 80135a0:	003d0900 	.word	0x003d0900
 80135a4:	08017148 	.word	0x08017148
 80135a8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80135ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80135b0:	2b20      	cmp	r3, #32
 80135b2:	dc49      	bgt.n	8013648 <UART_SetConfig+0x9d4>
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	db7c      	blt.n	80136b2 <UART_SetConfig+0xa3e>
 80135b8:	2b20      	cmp	r3, #32
 80135ba:	d87a      	bhi.n	80136b2 <UART_SetConfig+0xa3e>
 80135bc:	a201      	add	r2, pc, #4	; (adr r2, 80135c4 <UART_SetConfig+0x950>)
 80135be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135c2:	bf00      	nop
 80135c4:	0801364f 	.word	0x0801364f
 80135c8:	08013657 	.word	0x08013657
 80135cc:	080136b3 	.word	0x080136b3
 80135d0:	080136b3 	.word	0x080136b3
 80135d4:	0801365f 	.word	0x0801365f
 80135d8:	080136b3 	.word	0x080136b3
 80135dc:	080136b3 	.word	0x080136b3
 80135e0:	080136b3 	.word	0x080136b3
 80135e4:	0801366f 	.word	0x0801366f
 80135e8:	080136b3 	.word	0x080136b3
 80135ec:	080136b3 	.word	0x080136b3
 80135f0:	080136b3 	.word	0x080136b3
 80135f4:	080136b3 	.word	0x080136b3
 80135f8:	080136b3 	.word	0x080136b3
 80135fc:	080136b3 	.word	0x080136b3
 8013600:	080136b3 	.word	0x080136b3
 8013604:	0801367f 	.word	0x0801367f
 8013608:	080136b3 	.word	0x080136b3
 801360c:	080136b3 	.word	0x080136b3
 8013610:	080136b3 	.word	0x080136b3
 8013614:	080136b3 	.word	0x080136b3
 8013618:	080136b3 	.word	0x080136b3
 801361c:	080136b3 	.word	0x080136b3
 8013620:	080136b3 	.word	0x080136b3
 8013624:	080136b3 	.word	0x080136b3
 8013628:	080136b3 	.word	0x080136b3
 801362c:	080136b3 	.word	0x080136b3
 8013630:	080136b3 	.word	0x080136b3
 8013634:	080136b3 	.word	0x080136b3
 8013638:	080136b3 	.word	0x080136b3
 801363c:	080136b3 	.word	0x080136b3
 8013640:	080136b3 	.word	0x080136b3
 8013644:	080136a5 	.word	0x080136a5
 8013648:	2b40      	cmp	r3, #64	; 0x40
 801364a:	d02e      	beq.n	80136aa <UART_SetConfig+0xa36>
 801364c:	e031      	b.n	80136b2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801364e:	f7fa f819 	bl	800d684 <HAL_RCC_GetPCLK1Freq>
 8013652:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013654:	e033      	b.n	80136be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013656:	f7fa f82b 	bl	800d6b0 <HAL_RCC_GetPCLK2Freq>
 801365a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801365c:	e02f      	b.n	80136be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801365e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013662:	4618      	mov	r0, r3
 8013664:	f7fb ffda 	bl	800f61c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801366a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801366c:	e027      	b.n	80136be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801366e:	f107 0318 	add.w	r3, r7, #24
 8013672:	4618      	mov	r0, r3
 8013674:	f7fc f926 	bl	800f8c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013678:	69fb      	ldr	r3, [r7, #28]
 801367a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801367c:	e01f      	b.n	80136be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801367e:	4b2d      	ldr	r3, [pc, #180]	; (8013734 <UART_SetConfig+0xac0>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	f003 0320 	and.w	r3, r3, #32
 8013686:	2b00      	cmp	r3, #0
 8013688:	d009      	beq.n	801369e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801368a:	4b2a      	ldr	r3, [pc, #168]	; (8013734 <UART_SetConfig+0xac0>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	08db      	lsrs	r3, r3, #3
 8013690:	f003 0303 	and.w	r3, r3, #3
 8013694:	4a28      	ldr	r2, [pc, #160]	; (8013738 <UART_SetConfig+0xac4>)
 8013696:	fa22 f303 	lsr.w	r3, r2, r3
 801369a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801369c:	e00f      	b.n	80136be <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801369e:	4b26      	ldr	r3, [pc, #152]	; (8013738 <UART_SetConfig+0xac4>)
 80136a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136a2:	e00c      	b.n	80136be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80136a4:	4b25      	ldr	r3, [pc, #148]	; (801373c <UART_SetConfig+0xac8>)
 80136a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136a8:	e009      	b.n	80136be <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80136aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80136ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136b0:	e005      	b.n	80136be <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80136b2:	2300      	movs	r3, #0
 80136b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80136b6:	2301      	movs	r3, #1
 80136b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80136bc:	bf00      	nop
    }

    if (pclk != 0U)
 80136be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d021      	beq.n	8013708 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136c4:	697b      	ldr	r3, [r7, #20]
 80136c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c8:	4a1d      	ldr	r2, [pc, #116]	; (8013740 <UART_SetConfig+0xacc>)
 80136ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136ce:	461a      	mov	r2, r3
 80136d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	685b      	ldr	r3, [r3, #4]
 80136da:	085b      	lsrs	r3, r3, #1
 80136dc:	441a      	add	r2, r3
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80136e6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80136e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ea:	2b0f      	cmp	r3, #15
 80136ec:	d909      	bls.n	8013702 <UART_SetConfig+0xa8e>
 80136ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136f4:	d205      	bcs.n	8013702 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80136f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f8:	b29a      	uxth	r2, r3
 80136fa:	697b      	ldr	r3, [r7, #20]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	60da      	str	r2, [r3, #12]
 8013700:	e002      	b.n	8013708 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013702:	2301      	movs	r3, #1
 8013704:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013708:	697b      	ldr	r3, [r7, #20]
 801370a:	2201      	movs	r2, #1
 801370c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	2201      	movs	r2, #1
 8013714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013718:	697b      	ldr	r3, [r7, #20]
 801371a:	2200      	movs	r2, #0
 801371c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	2200      	movs	r2, #0
 8013722:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013724:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013728:	4618      	mov	r0, r3
 801372a:	3748      	adds	r7, #72	; 0x48
 801372c:	46bd      	mov	sp, r7
 801372e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013732:	bf00      	nop
 8013734:	58024400 	.word	0x58024400
 8013738:	03d09000 	.word	0x03d09000
 801373c:	003d0900 	.word	0x003d0900
 8013740:	08017148 	.word	0x08017148

08013744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013744:	b480      	push	{r7}
 8013746:	b083      	sub	sp, #12
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013750:	f003 0301 	and.w	r3, r3, #1
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00a      	beq.n	801376e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	685b      	ldr	r3, [r3, #4]
 801375e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	430a      	orrs	r2, r1
 801376c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013772:	f003 0302 	and.w	r3, r3, #2
 8013776:	2b00      	cmp	r3, #0
 8013778:	d00a      	beq.n	8013790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	681b      	ldr	r3, [r3, #0]
 801378c:	430a      	orrs	r2, r1
 801378e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013794:	f003 0304 	and.w	r3, r3, #4
 8013798:	2b00      	cmp	r3, #0
 801379a:	d00a      	beq.n	80137b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	430a      	orrs	r2, r1
 80137b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137b6:	f003 0308 	and.w	r3, r3, #8
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d00a      	beq.n	80137d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	430a      	orrs	r2, r1
 80137d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137d8:	f003 0310 	and.w	r3, r3, #16
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d00a      	beq.n	80137f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	430a      	orrs	r2, r1
 80137f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80137fa:	f003 0320 	and.w	r3, r3, #32
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d00a      	beq.n	8013818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	689b      	ldr	r3, [r3, #8]
 8013808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	430a      	orrs	r2, r1
 8013816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013820:	2b00      	cmp	r3, #0
 8013822:	d01a      	beq.n	801385a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	430a      	orrs	r2, r1
 8013838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801383e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013842:	d10a      	bne.n	801385a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	430a      	orrs	r2, r1
 8013858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013862:	2b00      	cmp	r3, #0
 8013864:	d00a      	beq.n	801387c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	430a      	orrs	r2, r1
 801387a:	605a      	str	r2, [r3, #4]
  }
}
 801387c:	bf00      	nop
 801387e:	370c      	adds	r7, #12
 8013880:	46bd      	mov	sp, r7
 8013882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013886:	4770      	bx	lr

08013888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b098      	sub	sp, #96	; 0x60
 801388c:	af02      	add	r7, sp, #8
 801388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2200      	movs	r2, #0
 8013894:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013898:	f7f3 fb40 	bl	8006f1c <HAL_GetTick>
 801389c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f003 0308 	and.w	r3, r3, #8
 80138a8:	2b08      	cmp	r3, #8
 80138aa:	d12f      	bne.n	801390c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80138ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80138b0:	9300      	str	r3, [sp, #0]
 80138b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80138b4:	2200      	movs	r2, #0
 80138b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 f88e 	bl	80139dc <UART_WaitOnFlagUntilTimeout>
 80138c0:	4603      	mov	r3, r0
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d022      	beq.n	801390c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ce:	e853 3f00 	ldrex	r3, [r3]
 80138d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80138d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80138da:	653b      	str	r3, [r7, #80]	; 0x50
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	461a      	mov	r2, r3
 80138e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138e4:	647b      	str	r3, [r7, #68]	; 0x44
 80138e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80138ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80138ec:	e841 2300 	strex	r3, r2, [r1]
 80138f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80138f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d1e6      	bne.n	80138c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	2220      	movs	r2, #32
 80138fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2200      	movs	r2, #0
 8013904:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013908:	2303      	movs	r3, #3
 801390a:	e063      	b.n	80139d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f003 0304 	and.w	r3, r3, #4
 8013916:	2b04      	cmp	r3, #4
 8013918:	d149      	bne.n	80139ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801391a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801391e:	9300      	str	r3, [sp, #0]
 8013920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013922:	2200      	movs	r2, #0
 8013924:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	f000 f857 	bl	80139dc <UART_WaitOnFlagUntilTimeout>
 801392e:	4603      	mov	r3, r0
 8013930:	2b00      	cmp	r3, #0
 8013932:	d03c      	beq.n	80139ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801393c:	e853 3f00 	ldrex	r3, [r3]
 8013940:	623b      	str	r3, [r7, #32]
   return(result);
 8013942:	6a3b      	ldr	r3, [r7, #32]
 8013944:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013948:	64fb      	str	r3, [r7, #76]	; 0x4c
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	461a      	mov	r2, r3
 8013950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013952:	633b      	str	r3, [r7, #48]	; 0x30
 8013954:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801395a:	e841 2300 	strex	r3, r2, [r1]
 801395e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013962:	2b00      	cmp	r3, #0
 8013964:	d1e6      	bne.n	8013934 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	3308      	adds	r3, #8
 801396c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	e853 3f00 	ldrex	r3, [r3]
 8013974:	60fb      	str	r3, [r7, #12]
   return(result);
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f023 0301 	bic.w	r3, r3, #1
 801397c:	64bb      	str	r3, [r7, #72]	; 0x48
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	3308      	adds	r3, #8
 8013984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013986:	61fa      	str	r2, [r7, #28]
 8013988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801398a:	69b9      	ldr	r1, [r7, #24]
 801398c:	69fa      	ldr	r2, [r7, #28]
 801398e:	e841 2300 	strex	r3, r2, [r1]
 8013992:	617b      	str	r3, [r7, #20]
   return(result);
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d1e5      	bne.n	8013966 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	2220      	movs	r2, #32
 801399e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2200      	movs	r2, #0
 80139a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80139aa:	2303      	movs	r3, #3
 80139ac:	e012      	b.n	80139d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2220      	movs	r2, #32
 80139b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2220      	movs	r2, #32
 80139ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	2200      	movs	r2, #0
 80139c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2200      	movs	r2, #0
 80139c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80139d2:	2300      	movs	r3, #0
}
 80139d4:	4618      	mov	r0, r3
 80139d6:	3758      	adds	r7, #88	; 0x58
 80139d8:	46bd      	mov	sp, r7
 80139da:	bd80      	pop	{r7, pc}

080139dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b084      	sub	sp, #16
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	603b      	str	r3, [r7, #0]
 80139e8:	4613      	mov	r3, r2
 80139ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80139ec:	e049      	b.n	8013a82 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80139ee:	69bb      	ldr	r3, [r7, #24]
 80139f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139f4:	d045      	beq.n	8013a82 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80139f6:	f7f3 fa91 	bl	8006f1c <HAL_GetTick>
 80139fa:	4602      	mov	r2, r0
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	1ad3      	subs	r3, r2, r3
 8013a00:	69ba      	ldr	r2, [r7, #24]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d302      	bcc.n	8013a0c <UART_WaitOnFlagUntilTimeout+0x30>
 8013a06:	69bb      	ldr	r3, [r7, #24]
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d101      	bne.n	8013a10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013a0c:	2303      	movs	r3, #3
 8013a0e:	e048      	b.n	8013aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f003 0304 	and.w	r3, r3, #4
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d031      	beq.n	8013a82 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	69db      	ldr	r3, [r3, #28]
 8013a24:	f003 0308 	and.w	r3, r3, #8
 8013a28:	2b08      	cmp	r3, #8
 8013a2a:	d110      	bne.n	8013a4e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	2208      	movs	r2, #8
 8013a32:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013a34:	68f8      	ldr	r0, [r7, #12]
 8013a36:	f000 f921 	bl	8013c7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2208      	movs	r2, #8
 8013a3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2200      	movs	r2, #0
 8013a46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e029      	b.n	8013aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	69db      	ldr	r3, [r3, #28]
 8013a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013a58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013a5c:	d111      	bne.n	8013a82 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f000 f907 	bl	8013c7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2220      	movs	r2, #32
 8013a72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013a7e:	2303      	movs	r3, #3
 8013a80:	e00f      	b.n	8013aa2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	69da      	ldr	r2, [r3, #28]
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	4013      	ands	r3, r2
 8013a8c:	68ba      	ldr	r2, [r7, #8]
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	bf0c      	ite	eq
 8013a92:	2301      	moveq	r3, #1
 8013a94:	2300      	movne	r3, #0
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	461a      	mov	r2, r3
 8013a9a:	79fb      	ldrb	r3, [r7, #7]
 8013a9c:	429a      	cmp	r2, r3
 8013a9e:	d0a6      	beq.n	80139ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013aa0:	2300      	movs	r3, #0
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}
	...

08013aac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b096      	sub	sp, #88	; 0x58
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	4613      	mov	r3, r2
 8013ab8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	68ba      	ldr	r2, [r7, #8]
 8013abe:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	88fa      	ldrh	r2, [r7, #6]
 8013ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2222      	movs	r2, #34	; 0x22
 8013ad4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d02d      	beq.n	8013b3e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ae8:	4a40      	ldr	r2, [pc, #256]	; (8013bec <UART_Start_Receive_DMA+0x140>)
 8013aea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013af2:	4a3f      	ldr	r2, [pc, #252]	; (8013bf0 <UART_Start_Receive_DMA+0x144>)
 8013af4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013afc:	4a3d      	ldr	r2, [pc, #244]	; (8013bf4 <UART_Start_Receive_DMA+0x148>)
 8013afe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013b06:	2200      	movs	r2, #0
 8013b08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	3324      	adds	r3, #36	; 0x24
 8013b16:	4619      	mov	r1, r3
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	88fb      	ldrh	r3, [r7, #6]
 8013b20:	f7f5 fc24 	bl	800936c <HAL_DMA_Start_IT>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d009      	beq.n	8013b3e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2210      	movs	r2, #16
 8013b2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	2220      	movs	r2, #32
 8013b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	e051      	b.n	8013be2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	691b      	ldr	r3, [r3, #16]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d018      	beq.n	8013b78 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b4e:	e853 3f00 	ldrex	r3, [r3]
 8013b52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	461a      	mov	r2, r3
 8013b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b66:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b68:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b6c:	e841 2300 	strex	r3, r2, [r1]
 8013b70:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d1e6      	bne.n	8013b46 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	3308      	adds	r3, #8
 8013b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b82:	e853 3f00 	ldrex	r3, [r3]
 8013b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8a:	f043 0301 	orr.w	r3, r3, #1
 8013b8e:	653b      	str	r3, [r7, #80]	; 0x50
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	3308      	adds	r3, #8
 8013b96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013b98:	637a      	str	r2, [r7, #52]	; 0x34
 8013b9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ba0:	e841 2300 	strex	r3, r2, [r1]
 8013ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d1e5      	bne.n	8013b78 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	3308      	adds	r3, #8
 8013bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	e853 3f00 	ldrex	r3, [r3]
 8013bba:	613b      	str	r3, [r7, #16]
   return(result);
 8013bbc:	693b      	ldr	r3, [r7, #16]
 8013bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	3308      	adds	r3, #8
 8013bca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013bcc:	623a      	str	r2, [r7, #32]
 8013bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd0:	69f9      	ldr	r1, [r7, #28]
 8013bd2:	6a3a      	ldr	r2, [r7, #32]
 8013bd4:	e841 2300 	strex	r3, r2, [r1]
 8013bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d1e5      	bne.n	8013bac <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8013be0:	2300      	movs	r3, #0
}
 8013be2:	4618      	mov	r0, r3
 8013be4:	3758      	adds	r7, #88	; 0x58
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}
 8013bea:	bf00      	nop
 8013bec:	08013dfb 	.word	0x08013dfb
 8013bf0:	08013f23 	.word	0x08013f23
 8013bf4:	08013f61 	.word	0x08013f61

08013bf8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8013bf8:	b480      	push	{r7}
 8013bfa:	b08f      	sub	sp, #60	; 0x3c
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c06:	6a3b      	ldr	r3, [r7, #32]
 8013c08:	e853 3f00 	ldrex	r3, [r3]
 8013c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c0e:	69fb      	ldr	r3, [r7, #28]
 8013c10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8013c14:	637b      	str	r3, [r7, #52]	; 0x34
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013c20:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c26:	e841 2300 	strex	r3, r2, [r1]
 8013c2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1e6      	bne.n	8013c00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	3308      	adds	r3, #8
 8013c38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	e853 3f00 	ldrex	r3, [r3]
 8013c40:	60bb      	str	r3, [r7, #8]
   return(result);
 8013c42:	68bb      	ldr	r3, [r7, #8]
 8013c44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013c48:	633b      	str	r3, [r7, #48]	; 0x30
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	3308      	adds	r3, #8
 8013c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c52:	61ba      	str	r2, [r7, #24]
 8013c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c56:	6979      	ldr	r1, [r7, #20]
 8013c58:	69ba      	ldr	r2, [r7, #24]
 8013c5a:	e841 2300 	strex	r3, r2, [r1]
 8013c5e:	613b      	str	r3, [r7, #16]
   return(result);
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d1e5      	bne.n	8013c32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2220      	movs	r2, #32
 8013c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8013c6e:	bf00      	nop
 8013c70:	373c      	adds	r7, #60	; 0x3c
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr
	...

08013c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013c7c:	b480      	push	{r7}
 8013c7e:	b095      	sub	sp, #84	; 0x54
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c8c:	e853 3f00 	ldrex	r3, [r3]
 8013c90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8013ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ca6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013caa:	e841 2300 	strex	r3, r2, [r1]
 8013cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d1e6      	bne.n	8013c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	3308      	adds	r3, #8
 8013cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cbe:	6a3b      	ldr	r3, [r7, #32]
 8013cc0:	e853 3f00 	ldrex	r3, [r3]
 8013cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8013cc6:	69fa      	ldr	r2, [r7, #28]
 8013cc8:	4b1e      	ldr	r3, [pc, #120]	; (8013d44 <UART_EndRxTransfer+0xc8>)
 8013cca:	4013      	ands	r3, r2
 8013ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	3308      	adds	r3, #8
 8013cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013cde:	e841 2300 	strex	r3, r2, [r1]
 8013ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d1e5      	bne.n	8013cb6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cee:	2b01      	cmp	r3, #1
 8013cf0:	d118      	bne.n	8013d24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	e853 3f00 	ldrex	r3, [r3]
 8013cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	f023 0310 	bic.w	r3, r3, #16
 8013d06:	647b      	str	r3, [r7, #68]	; 0x44
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	681b      	ldr	r3, [r3, #0]
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d10:	61bb      	str	r3, [r7, #24]
 8013d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d14:	6979      	ldr	r1, [r7, #20]
 8013d16:	69ba      	ldr	r2, [r7, #24]
 8013d18:	e841 2300 	strex	r3, r2, [r1]
 8013d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d1e6      	bne.n	8013cf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2220      	movs	r2, #32
 8013d28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2200      	movs	r2, #0
 8013d36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013d38:	bf00      	nop
 8013d3a:	3754      	adds	r7, #84	; 0x54
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d42:	4770      	bx	lr
 8013d44:	effffffe 	.word	0xeffffffe

08013d48 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b090      	sub	sp, #64	; 0x40
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013d54:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	69db      	ldr	r3, [r3, #28]
 8013d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013d5e:	d037      	beq.n	8013dd0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8013d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d62:	2200      	movs	r2, #0
 8013d64:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	3308      	adds	r3, #8
 8013d6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d72:	e853 3f00 	ldrex	r3, [r3]
 8013d76:	623b      	str	r3, [r7, #32]
   return(result);
 8013d78:	6a3b      	ldr	r3, [r7, #32]
 8013d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	3308      	adds	r3, #8
 8013d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d88:	633a      	str	r2, [r7, #48]	; 0x30
 8013d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013d90:	e841 2300 	strex	r3, r2, [r1]
 8013d94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d1e5      	bne.n	8013d68 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	e853 3f00 	ldrex	r3, [r3]
 8013da8:	60fb      	str	r3, [r7, #12]
   return(result);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013db0:	637b      	str	r3, [r7, #52]	; 0x34
 8013db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	461a      	mov	r2, r3
 8013db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dba:	61fb      	str	r3, [r7, #28]
 8013dbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013dbe:	69b9      	ldr	r1, [r7, #24]
 8013dc0:	69fa      	ldr	r2, [r7, #28]
 8013dc2:	e841 2300 	strex	r3, r2, [r1]
 8013dc6:	617b      	str	r3, [r7, #20]
   return(result);
 8013dc8:	697b      	ldr	r3, [r7, #20]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d1e6      	bne.n	8013d9c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013dce:	e002      	b.n	8013dd6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8013dd0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013dd2:	f7ef ffa3 	bl	8003d1c <HAL_UART_TxCpltCallback>
}
 8013dd6:	bf00      	nop
 8013dd8:	3740      	adds	r7, #64	; 0x40
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b084      	sub	sp, #16
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8013dec:	68f8      	ldr	r0, [r7, #12]
 8013dee:	f7fe ff2d 	bl	8012c4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013df2:	bf00      	nop
 8013df4:	3710      	adds	r7, #16
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}

08013dfa <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013dfa:	b580      	push	{r7, lr}
 8013dfc:	b09c      	sub	sp, #112	; 0x70
 8013dfe:	af00      	add	r7, sp, #0
 8013e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e06:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	69db      	ldr	r3, [r3, #28]
 8013e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e10:	d071      	beq.n	8013ef6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8013e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e14:	2200      	movs	r2, #0
 8013e16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e22:	e853 3f00 	ldrex	r3, [r3]
 8013e26:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8013e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e32:	681b      	ldr	r3, [r3, #0]
 8013e34:	461a      	mov	r2, r3
 8013e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8013e3a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013e3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013e40:	e841 2300 	strex	r3, r2, [r1]
 8013e44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d1e6      	bne.n	8013e1a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	3308      	adds	r3, #8
 8013e52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e56:	e853 3f00 	ldrex	r3, [r3]
 8013e5a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e5e:	f023 0301 	bic.w	r3, r3, #1
 8013e62:	667b      	str	r3, [r7, #100]	; 0x64
 8013e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	3308      	adds	r3, #8
 8013e6a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8013e6c:	647a      	str	r2, [r7, #68]	; 0x44
 8013e6e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e74:	e841 2300 	strex	r3, r2, [r1]
 8013e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d1e5      	bne.n	8013e4c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e82:	681b      	ldr	r3, [r3, #0]
 8013e84:	3308      	adds	r3, #8
 8013e86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8a:	e853 3f00 	ldrex	r3, [r3]
 8013e8e:	623b      	str	r3, [r7, #32]
   return(result);
 8013e90:	6a3b      	ldr	r3, [r7, #32]
 8013e92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e96:	663b      	str	r3, [r7, #96]	; 0x60
 8013e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	3308      	adds	r3, #8
 8013e9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013ea0:	633a      	str	r2, [r7, #48]	; 0x30
 8013ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ea4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ea8:	e841 2300 	strex	r3, r2, [r1]
 8013eac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d1e5      	bne.n	8013e80 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013eb6:	2220      	movs	r2, #32
 8013eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec0:	2b01      	cmp	r3, #1
 8013ec2:	d118      	bne.n	8013ef6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eca:	693b      	ldr	r3, [r7, #16]
 8013ecc:	e853 3f00 	ldrex	r3, [r3]
 8013ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	f023 0310 	bic.w	r3, r3, #16
 8013ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	461a      	mov	r2, r3
 8013ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ee2:	61fb      	str	r3, [r7, #28]
 8013ee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ee6:	69b9      	ldr	r1, [r7, #24]
 8013ee8:	69fa      	ldr	r2, [r7, #28]
 8013eea:	e841 2300 	strex	r3, r2, [r1]
 8013eee:	617b      	str	r3, [r7, #20]
   return(result);
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d1e6      	bne.n	8013ec4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013ef8:	2200      	movs	r2, #0
 8013efa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d107      	bne.n	8013f14 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013f04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f0e:	f7ef ffa1 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013f12:	e002      	b.n	8013f1a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8013f14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013f16:	f7ef ff19 	bl	8003d4c <HAL_UART_RxCpltCallback>
}
 8013f1a:	bf00      	nop
 8013f1c:	3770      	adds	r7, #112	; 0x70
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}

08013f22 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013f22:	b580      	push	{r7, lr}
 8013f24:	b084      	sub	sp, #16
 8013f26:	af00      	add	r7, sp, #0
 8013f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	2201      	movs	r2, #1
 8013f34:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f3a:	2b01      	cmp	r3, #1
 8013f3c:	d109      	bne.n	8013f52 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013f44:	085b      	lsrs	r3, r3, #1
 8013f46:	b29b      	uxth	r3, r3
 8013f48:	4619      	mov	r1, r3
 8013f4a:	68f8      	ldr	r0, [r7, #12]
 8013f4c:	f7ef ff82 	bl	8003e54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8013f50:	e002      	b.n	8013f58 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8013f52:	68f8      	ldr	r0, [r7, #12]
 8013f54:	f7fe fe84 	bl	8012c60 <HAL_UART_RxHalfCpltCallback>
}
 8013f58:	bf00      	nop
 8013f5a:	3710      	adds	r7, #16
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b086      	sub	sp, #24
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f6c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8013f6e:	697b      	ldr	r3, [r7, #20]
 8013f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013f74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f7c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	689b      	ldr	r3, [r3, #8]
 8013f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f88:	2b80      	cmp	r3, #128	; 0x80
 8013f8a:	d109      	bne.n	8013fa0 <UART_DMAError+0x40>
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	2b21      	cmp	r3, #33	; 0x21
 8013f90:	d106      	bne.n	8013fa0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	2200      	movs	r2, #0
 8013f96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8013f9a:	6978      	ldr	r0, [r7, #20]
 8013f9c:	f7ff fe2c 	bl	8013bf8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	681b      	ldr	r3, [r3, #0]
 8013fa4:	689b      	ldr	r3, [r3, #8]
 8013fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013faa:	2b40      	cmp	r3, #64	; 0x40
 8013fac:	d109      	bne.n	8013fc2 <UART_DMAError+0x62>
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	2b22      	cmp	r3, #34	; 0x22
 8013fb2:	d106      	bne.n	8013fc2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8013fbc:	6978      	ldr	r0, [r7, #20]
 8013fbe:	f7ff fe5d 	bl	8013c7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013fc8:	f043 0210 	orr.w	r2, r3, #16
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013fd2:	6978      	ldr	r0, [r7, #20]
 8013fd4:	f7f0 f83e 	bl	8004054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013fd8:	bf00      	nop
 8013fda:	3718      	adds	r7, #24
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b084      	sub	sp, #16
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013fec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	2200      	movs	r2, #0
 8013ff2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f7f0 f828 	bl	8004054 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014004:	bf00      	nop
 8014006:	3710      	adds	r7, #16
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}

0801400c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b088      	sub	sp, #32
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	681b      	ldr	r3, [r3, #0]
 8014018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	e853 3f00 	ldrex	r3, [r3]
 8014020:	60bb      	str	r3, [r7, #8]
   return(result);
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014028:	61fb      	str	r3, [r7, #28]
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	461a      	mov	r2, r3
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	61bb      	str	r3, [r7, #24]
 8014034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014036:	6979      	ldr	r1, [r7, #20]
 8014038:	69ba      	ldr	r2, [r7, #24]
 801403a:	e841 2300 	strex	r3, r2, [r1]
 801403e:	613b      	str	r3, [r7, #16]
   return(result);
 8014040:	693b      	ldr	r3, [r7, #16]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d1e6      	bne.n	8014014 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2220      	movs	r2, #32
 801404a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	2200      	movs	r2, #0
 8014052:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8014054:	6878      	ldr	r0, [r7, #4]
 8014056:	f7ef fe61 	bl	8003d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801405a:	bf00      	nop
 801405c:	3720      	adds	r7, #32
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}

08014062 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014062:	b480      	push	{r7}
 8014064:	b083      	sub	sp, #12
 8014066:	af00      	add	r7, sp, #0
 8014068:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801406a:	bf00      	nop
 801406c:	370c      	adds	r7, #12
 801406e:	46bd      	mov	sp, r7
 8014070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014074:	4770      	bx	lr

08014076 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014076:	b480      	push	{r7}
 8014078:	b083      	sub	sp, #12
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801407e:	bf00      	nop
 8014080:	370c      	adds	r7, #12
 8014082:	46bd      	mov	sp, r7
 8014084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014088:	4770      	bx	lr

0801408a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801408a:	b480      	push	{r7}
 801408c:	b083      	sub	sp, #12
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014092:	bf00      	nop
 8014094:	370c      	adds	r7, #12
 8014096:	46bd      	mov	sp, r7
 8014098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801409c:	4770      	bx	lr

0801409e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801409e:	b480      	push	{r7}
 80140a0:	b085      	sub	sp, #20
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d101      	bne.n	80140b4 <HAL_UARTEx_DisableFifoMode+0x16>
 80140b0:	2302      	movs	r3, #2
 80140b2:	e027      	b.n	8014104 <HAL_UARTEx_DisableFifoMode+0x66>
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	2201      	movs	r2, #1
 80140b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2224      	movs	r2, #36	; 0x24
 80140c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	f022 0201 	bic.w	r2, r2, #1
 80140da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80140e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2200      	movs	r2, #0
 80140e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	68fa      	ldr	r2, [r7, #12]
 80140f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2220      	movs	r2, #32
 80140f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2200      	movs	r2, #0
 80140fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014102:	2300      	movs	r3, #0
}
 8014104:	4618      	mov	r0, r3
 8014106:	3714      	adds	r7, #20
 8014108:	46bd      	mov	sp, r7
 801410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801410e:	4770      	bx	lr

08014110 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b084      	sub	sp, #16
 8014114:	af00      	add	r7, sp, #0
 8014116:	6078      	str	r0, [r7, #4]
 8014118:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014120:	2b01      	cmp	r3, #1
 8014122:	d101      	bne.n	8014128 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014124:	2302      	movs	r3, #2
 8014126:	e02d      	b.n	8014184 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2201      	movs	r2, #1
 801412c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2224      	movs	r2, #36	; 0x24
 8014134:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	681b      	ldr	r3, [r3, #0]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	f022 0201 	bic.w	r2, r2, #1
 801414e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	689b      	ldr	r3, [r3, #8]
 8014156:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	683a      	ldr	r2, [r7, #0]
 8014160:	430a      	orrs	r2, r1
 8014162:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f000 f8a3 	bl	80142b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	68fa      	ldr	r2, [r7, #12]
 8014170:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	2220      	movs	r2, #32
 8014176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2200      	movs	r2, #0
 801417e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014182:	2300      	movs	r3, #0
}
 8014184:	4618      	mov	r0, r3
 8014186:	3710      	adds	r7, #16
 8014188:	46bd      	mov	sp, r7
 801418a:	bd80      	pop	{r7, pc}

0801418c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
 8014194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801419c:	2b01      	cmp	r3, #1
 801419e:	d101      	bne.n	80141a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80141a0:	2302      	movs	r3, #2
 80141a2:	e02d      	b.n	8014200 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2201      	movs	r2, #1
 80141a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	2224      	movs	r2, #36	; 0x24
 80141b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	681a      	ldr	r2, [r3, #0]
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f022 0201 	bic.w	r2, r2, #1
 80141ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	689b      	ldr	r3, [r3, #8]
 80141d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	683a      	ldr	r2, [r7, #0]
 80141dc:	430a      	orrs	r2, r1
 80141de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f000 f865 	bl	80142b0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	68fa      	ldr	r2, [r7, #12]
 80141ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	2220      	movs	r2, #32
 80141f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80141f6:	687b      	ldr	r3, [r7, #4]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80141fe:	2300      	movs	r3, #0
}
 8014200:	4618      	mov	r0, r3
 8014202:	3710      	adds	r7, #16
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b08c      	sub	sp, #48	; 0x30
 801420c:	af00      	add	r7, sp, #0
 801420e:	60f8      	str	r0, [r7, #12]
 8014210:	60b9      	str	r1, [r7, #8]
 8014212:	4613      	mov	r3, r2
 8014214:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014216:	68fb      	ldr	r3, [r7, #12]
 8014218:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801421c:	2b20      	cmp	r3, #32
 801421e:	d142      	bne.n	80142a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d002      	beq.n	801422c <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8014226:	88fb      	ldrh	r3, [r7, #6]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d101      	bne.n	8014230 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801422c:	2301      	movs	r3, #1
 801422e:	e03b      	b.n	80142a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	2201      	movs	r2, #1
 8014234:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	2200      	movs	r2, #0
 801423a:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801423c:	88fb      	ldrh	r3, [r7, #6]
 801423e:	461a      	mov	r2, r3
 8014240:	68b9      	ldr	r1, [r7, #8]
 8014242:	68f8      	ldr	r0, [r7, #12]
 8014244:	f7ff fc32 	bl	8013aac <UART_Start_Receive_DMA>
 8014248:	4603      	mov	r3, r0
 801424a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801424e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014252:	2b00      	cmp	r3, #0
 8014254:	d124      	bne.n	80142a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801425a:	2b01      	cmp	r3, #1
 801425c:	d11d      	bne.n	801429a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	2210      	movs	r2, #16
 8014264:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801426c:	69bb      	ldr	r3, [r7, #24]
 801426e:	e853 3f00 	ldrex	r3, [r3]
 8014272:	617b      	str	r3, [r7, #20]
   return(result);
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	f043 0310 	orr.w	r3, r3, #16
 801427a:	62bb      	str	r3, [r7, #40]	; 0x28
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	461a      	mov	r2, r3
 8014282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014284:	627b      	str	r3, [r7, #36]	; 0x24
 8014286:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014288:	6a39      	ldr	r1, [r7, #32]
 801428a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801428c:	e841 2300 	strex	r3, r2, [r1]
 8014290:	61fb      	str	r3, [r7, #28]
   return(result);
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d1e6      	bne.n	8014266 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8014298:	e002      	b.n	80142a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801429a:	2301      	movs	r3, #1
 801429c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80142a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142a4:	e000      	b.n	80142a8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80142a6:	2302      	movs	r3, #2
  }
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3730      	adds	r7, #48	; 0x30
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}

080142b0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80142b0:	b480      	push	{r7}
 80142b2:	b085      	sub	sp, #20
 80142b4:	af00      	add	r7, sp, #0
 80142b6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d108      	bne.n	80142d2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2201      	movs	r2, #1
 80142c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2201      	movs	r2, #1
 80142cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80142d0:	e031      	b.n	8014336 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80142d2:	2310      	movs	r3, #16
 80142d4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80142d6:	2310      	movs	r3, #16
 80142d8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	689b      	ldr	r3, [r3, #8]
 80142e0:	0e5b      	lsrs	r3, r3, #25
 80142e2:	b2db      	uxtb	r3, r3
 80142e4:	f003 0307 	and.w	r3, r3, #7
 80142e8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	689b      	ldr	r3, [r3, #8]
 80142f0:	0f5b      	lsrs	r3, r3, #29
 80142f2:	b2db      	uxtb	r3, r3
 80142f4:	f003 0307 	and.w	r3, r3, #7
 80142f8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80142fa:	7bbb      	ldrb	r3, [r7, #14]
 80142fc:	7b3a      	ldrb	r2, [r7, #12]
 80142fe:	4911      	ldr	r1, [pc, #68]	; (8014344 <UARTEx_SetNbDataToProcess+0x94>)
 8014300:	5c8a      	ldrb	r2, [r1, r2]
 8014302:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014306:	7b3a      	ldrb	r2, [r7, #12]
 8014308:	490f      	ldr	r1, [pc, #60]	; (8014348 <UARTEx_SetNbDataToProcess+0x98>)
 801430a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801430c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014310:	b29a      	uxth	r2, r3
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014318:	7bfb      	ldrb	r3, [r7, #15]
 801431a:	7b7a      	ldrb	r2, [r7, #13]
 801431c:	4909      	ldr	r1, [pc, #36]	; (8014344 <UARTEx_SetNbDataToProcess+0x94>)
 801431e:	5c8a      	ldrb	r2, [r1, r2]
 8014320:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014324:	7b7a      	ldrb	r2, [r7, #13]
 8014326:	4908      	ldr	r1, [pc, #32]	; (8014348 <UARTEx_SetNbDataToProcess+0x98>)
 8014328:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801432a:	fb93 f3f2 	sdiv	r3, r3, r2
 801432e:	b29a      	uxth	r2, r3
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014336:	bf00      	nop
 8014338:	3714      	adds	r7, #20
 801433a:	46bd      	mov	sp, r7
 801433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014340:	4770      	bx	lr
 8014342:	bf00      	nop
 8014344:	08017160 	.word	0x08017160
 8014348:	08017168 	.word	0x08017168

0801434c <_ZdlPvj>:
 801434c:	f000 b813 	b.w	8014376 <_ZdlPv>

08014350 <_Znwj>:
 8014350:	2801      	cmp	r0, #1
 8014352:	bf38      	it	cc
 8014354:	2001      	movcc	r0, #1
 8014356:	b510      	push	{r4, lr}
 8014358:	4604      	mov	r4, r0
 801435a:	4620      	mov	r0, r4
 801435c:	f000 f81e 	bl	801439c <malloc>
 8014360:	b100      	cbz	r0, 8014364 <_Znwj+0x14>
 8014362:	bd10      	pop	{r4, pc}
 8014364:	f000 f80a 	bl	801437c <_ZSt15get_new_handlerv>
 8014368:	b908      	cbnz	r0, 801436e <_Znwj+0x1e>
 801436a:	f000 f80f 	bl	801438c <abort>
 801436e:	4780      	blx	r0
 8014370:	e7f3      	b.n	801435a <_Znwj+0xa>

08014372 <_Znaj>:
 8014372:	f7ff bfed 	b.w	8014350 <_Znwj>

08014376 <_ZdlPv>:
 8014376:	f000 b819 	b.w	80143ac <free>
	...

0801437c <_ZSt15get_new_handlerv>:
 801437c:	4b02      	ldr	r3, [pc, #8]	; (8014388 <_ZSt15get_new_handlerv+0xc>)
 801437e:	6818      	ldr	r0, [r3, #0]
 8014380:	f3bf 8f5b 	dmb	ish
 8014384:	4770      	bx	lr
 8014386:	bf00      	nop
 8014388:	2400459c 	.word	0x2400459c

0801438c <abort>:
 801438c:	b508      	push	{r3, lr}
 801438e:	2006      	movs	r0, #6
 8014390:	f000 ff6c 	bl	801526c <raise>
 8014394:	2001      	movs	r0, #1
 8014396:	f7f2 fbaf 	bl	8006af8 <_exit>
	...

0801439c <malloc>:
 801439c:	4b02      	ldr	r3, [pc, #8]	; (80143a8 <malloc+0xc>)
 801439e:	4601      	mov	r1, r0
 80143a0:	6818      	ldr	r0, [r3, #0]
 80143a2:	f000 b82b 	b.w	80143fc <_malloc_r>
 80143a6:	bf00      	nop
 80143a8:	240000d8 	.word	0x240000d8

080143ac <free>:
 80143ac:	4b02      	ldr	r3, [pc, #8]	; (80143b8 <free+0xc>)
 80143ae:	4601      	mov	r1, r0
 80143b0:	6818      	ldr	r0, [r3, #0]
 80143b2:	f001 be01 	b.w	8015fb8 <_free_r>
 80143b6:	bf00      	nop
 80143b8:	240000d8 	.word	0x240000d8

080143bc <sbrk_aligned>:
 80143bc:	b570      	push	{r4, r5, r6, lr}
 80143be:	4e0e      	ldr	r6, [pc, #56]	; (80143f8 <sbrk_aligned+0x3c>)
 80143c0:	460c      	mov	r4, r1
 80143c2:	6831      	ldr	r1, [r6, #0]
 80143c4:	4605      	mov	r5, r0
 80143c6:	b911      	cbnz	r1, 80143ce <sbrk_aligned+0x12>
 80143c8:	f000 ffa4 	bl	8015314 <_sbrk_r>
 80143cc:	6030      	str	r0, [r6, #0]
 80143ce:	4621      	mov	r1, r4
 80143d0:	4628      	mov	r0, r5
 80143d2:	f000 ff9f 	bl	8015314 <_sbrk_r>
 80143d6:	1c43      	adds	r3, r0, #1
 80143d8:	d00a      	beq.n	80143f0 <sbrk_aligned+0x34>
 80143da:	1cc4      	adds	r4, r0, #3
 80143dc:	f024 0403 	bic.w	r4, r4, #3
 80143e0:	42a0      	cmp	r0, r4
 80143e2:	d007      	beq.n	80143f4 <sbrk_aligned+0x38>
 80143e4:	1a21      	subs	r1, r4, r0
 80143e6:	4628      	mov	r0, r5
 80143e8:	f000 ff94 	bl	8015314 <_sbrk_r>
 80143ec:	3001      	adds	r0, #1
 80143ee:	d101      	bne.n	80143f4 <sbrk_aligned+0x38>
 80143f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80143f4:	4620      	mov	r0, r4
 80143f6:	bd70      	pop	{r4, r5, r6, pc}
 80143f8:	240045a4 	.word	0x240045a4

080143fc <_malloc_r>:
 80143fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014400:	1ccd      	adds	r5, r1, #3
 8014402:	f025 0503 	bic.w	r5, r5, #3
 8014406:	3508      	adds	r5, #8
 8014408:	2d0c      	cmp	r5, #12
 801440a:	bf38      	it	cc
 801440c:	250c      	movcc	r5, #12
 801440e:	2d00      	cmp	r5, #0
 8014410:	4607      	mov	r7, r0
 8014412:	db01      	blt.n	8014418 <_malloc_r+0x1c>
 8014414:	42a9      	cmp	r1, r5
 8014416:	d905      	bls.n	8014424 <_malloc_r+0x28>
 8014418:	230c      	movs	r3, #12
 801441a:	603b      	str	r3, [r7, #0]
 801441c:	2600      	movs	r6, #0
 801441e:	4630      	mov	r0, r6
 8014420:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014424:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80144f8 <_malloc_r+0xfc>
 8014428:	f000 f868 	bl	80144fc <__malloc_lock>
 801442c:	f8d8 3000 	ldr.w	r3, [r8]
 8014430:	461c      	mov	r4, r3
 8014432:	bb5c      	cbnz	r4, 801448c <_malloc_r+0x90>
 8014434:	4629      	mov	r1, r5
 8014436:	4638      	mov	r0, r7
 8014438:	f7ff ffc0 	bl	80143bc <sbrk_aligned>
 801443c:	1c43      	adds	r3, r0, #1
 801443e:	4604      	mov	r4, r0
 8014440:	d155      	bne.n	80144ee <_malloc_r+0xf2>
 8014442:	f8d8 4000 	ldr.w	r4, [r8]
 8014446:	4626      	mov	r6, r4
 8014448:	2e00      	cmp	r6, #0
 801444a:	d145      	bne.n	80144d8 <_malloc_r+0xdc>
 801444c:	2c00      	cmp	r4, #0
 801444e:	d048      	beq.n	80144e2 <_malloc_r+0xe6>
 8014450:	6823      	ldr	r3, [r4, #0]
 8014452:	4631      	mov	r1, r6
 8014454:	4638      	mov	r0, r7
 8014456:	eb04 0903 	add.w	r9, r4, r3
 801445a:	f000 ff5b 	bl	8015314 <_sbrk_r>
 801445e:	4581      	cmp	r9, r0
 8014460:	d13f      	bne.n	80144e2 <_malloc_r+0xe6>
 8014462:	6821      	ldr	r1, [r4, #0]
 8014464:	1a6d      	subs	r5, r5, r1
 8014466:	4629      	mov	r1, r5
 8014468:	4638      	mov	r0, r7
 801446a:	f7ff ffa7 	bl	80143bc <sbrk_aligned>
 801446e:	3001      	adds	r0, #1
 8014470:	d037      	beq.n	80144e2 <_malloc_r+0xe6>
 8014472:	6823      	ldr	r3, [r4, #0]
 8014474:	442b      	add	r3, r5
 8014476:	6023      	str	r3, [r4, #0]
 8014478:	f8d8 3000 	ldr.w	r3, [r8]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d038      	beq.n	80144f2 <_malloc_r+0xf6>
 8014480:	685a      	ldr	r2, [r3, #4]
 8014482:	42a2      	cmp	r2, r4
 8014484:	d12b      	bne.n	80144de <_malloc_r+0xe2>
 8014486:	2200      	movs	r2, #0
 8014488:	605a      	str	r2, [r3, #4]
 801448a:	e00f      	b.n	80144ac <_malloc_r+0xb0>
 801448c:	6822      	ldr	r2, [r4, #0]
 801448e:	1b52      	subs	r2, r2, r5
 8014490:	d41f      	bmi.n	80144d2 <_malloc_r+0xd6>
 8014492:	2a0b      	cmp	r2, #11
 8014494:	d917      	bls.n	80144c6 <_malloc_r+0xca>
 8014496:	1961      	adds	r1, r4, r5
 8014498:	42a3      	cmp	r3, r4
 801449a:	6025      	str	r5, [r4, #0]
 801449c:	bf18      	it	ne
 801449e:	6059      	strne	r1, [r3, #4]
 80144a0:	6863      	ldr	r3, [r4, #4]
 80144a2:	bf08      	it	eq
 80144a4:	f8c8 1000 	streq.w	r1, [r8]
 80144a8:	5162      	str	r2, [r4, r5]
 80144aa:	604b      	str	r3, [r1, #4]
 80144ac:	4638      	mov	r0, r7
 80144ae:	f104 060b 	add.w	r6, r4, #11
 80144b2:	f000 f829 	bl	8014508 <__malloc_unlock>
 80144b6:	f026 0607 	bic.w	r6, r6, #7
 80144ba:	1d23      	adds	r3, r4, #4
 80144bc:	1af2      	subs	r2, r6, r3
 80144be:	d0ae      	beq.n	801441e <_malloc_r+0x22>
 80144c0:	1b9b      	subs	r3, r3, r6
 80144c2:	50a3      	str	r3, [r4, r2]
 80144c4:	e7ab      	b.n	801441e <_malloc_r+0x22>
 80144c6:	42a3      	cmp	r3, r4
 80144c8:	6862      	ldr	r2, [r4, #4]
 80144ca:	d1dd      	bne.n	8014488 <_malloc_r+0x8c>
 80144cc:	f8c8 2000 	str.w	r2, [r8]
 80144d0:	e7ec      	b.n	80144ac <_malloc_r+0xb0>
 80144d2:	4623      	mov	r3, r4
 80144d4:	6864      	ldr	r4, [r4, #4]
 80144d6:	e7ac      	b.n	8014432 <_malloc_r+0x36>
 80144d8:	4634      	mov	r4, r6
 80144da:	6876      	ldr	r6, [r6, #4]
 80144dc:	e7b4      	b.n	8014448 <_malloc_r+0x4c>
 80144de:	4613      	mov	r3, r2
 80144e0:	e7cc      	b.n	801447c <_malloc_r+0x80>
 80144e2:	230c      	movs	r3, #12
 80144e4:	603b      	str	r3, [r7, #0]
 80144e6:	4638      	mov	r0, r7
 80144e8:	f000 f80e 	bl	8014508 <__malloc_unlock>
 80144ec:	e797      	b.n	801441e <_malloc_r+0x22>
 80144ee:	6025      	str	r5, [r4, #0]
 80144f0:	e7dc      	b.n	80144ac <_malloc_r+0xb0>
 80144f2:	605b      	str	r3, [r3, #4]
 80144f4:	deff      	udf	#255	; 0xff
 80144f6:	bf00      	nop
 80144f8:	240045a0 	.word	0x240045a0

080144fc <__malloc_lock>:
 80144fc:	4801      	ldr	r0, [pc, #4]	; (8014504 <__malloc_lock+0x8>)
 80144fe:	f000 bf56 	b.w	80153ae <__retarget_lock_acquire_recursive>
 8014502:	bf00      	nop
 8014504:	240046e8 	.word	0x240046e8

08014508 <__malloc_unlock>:
 8014508:	4801      	ldr	r0, [pc, #4]	; (8014510 <__malloc_unlock+0x8>)
 801450a:	f000 bf51 	b.w	80153b0 <__retarget_lock_release_recursive>
 801450e:	bf00      	nop
 8014510:	240046e8 	.word	0x240046e8

08014514 <realloc>:
 8014514:	4b02      	ldr	r3, [pc, #8]	; (8014520 <realloc+0xc>)
 8014516:	460a      	mov	r2, r1
 8014518:	4601      	mov	r1, r0
 801451a:	6818      	ldr	r0, [r3, #0]
 801451c:	f000 b802 	b.w	8014524 <_realloc_r>
 8014520:	240000d8 	.word	0x240000d8

08014524 <_realloc_r>:
 8014524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014528:	4680      	mov	r8, r0
 801452a:	4614      	mov	r4, r2
 801452c:	460e      	mov	r6, r1
 801452e:	b921      	cbnz	r1, 801453a <_realloc_r+0x16>
 8014530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014534:	4611      	mov	r1, r2
 8014536:	f7ff bf61 	b.w	80143fc <_malloc_r>
 801453a:	b92a      	cbnz	r2, 8014548 <_realloc_r+0x24>
 801453c:	f001 fd3c 	bl	8015fb8 <_free_r>
 8014540:	4625      	mov	r5, r4
 8014542:	4628      	mov	r0, r5
 8014544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014548:	f002 f8fe 	bl	8016748 <_malloc_usable_size_r>
 801454c:	4284      	cmp	r4, r0
 801454e:	4607      	mov	r7, r0
 8014550:	d802      	bhi.n	8014558 <_realloc_r+0x34>
 8014552:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014556:	d812      	bhi.n	801457e <_realloc_r+0x5a>
 8014558:	4621      	mov	r1, r4
 801455a:	4640      	mov	r0, r8
 801455c:	f7ff ff4e 	bl	80143fc <_malloc_r>
 8014560:	4605      	mov	r5, r0
 8014562:	2800      	cmp	r0, #0
 8014564:	d0ed      	beq.n	8014542 <_realloc_r+0x1e>
 8014566:	42bc      	cmp	r4, r7
 8014568:	4622      	mov	r2, r4
 801456a:	4631      	mov	r1, r6
 801456c:	bf28      	it	cs
 801456e:	463a      	movcs	r2, r7
 8014570:	f000 ff1f 	bl	80153b2 <memcpy>
 8014574:	4631      	mov	r1, r6
 8014576:	4640      	mov	r0, r8
 8014578:	f001 fd1e 	bl	8015fb8 <_free_r>
 801457c:	e7e1      	b.n	8014542 <_realloc_r+0x1e>
 801457e:	4635      	mov	r5, r6
 8014580:	e7df      	b.n	8014542 <_realloc_r+0x1e>

08014582 <__cvt>:
 8014582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014584:	ed2d 8b02 	vpush	{d8}
 8014588:	eeb0 8b40 	vmov.f64	d8, d0
 801458c:	b085      	sub	sp, #20
 801458e:	4617      	mov	r7, r2
 8014590:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014592:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014594:	ee18 2a90 	vmov	r2, s17
 8014598:	f025 0520 	bic.w	r5, r5, #32
 801459c:	2a00      	cmp	r2, #0
 801459e:	bfb6      	itet	lt
 80145a0:	222d      	movlt	r2, #45	; 0x2d
 80145a2:	2200      	movge	r2, #0
 80145a4:	eeb1 8b40 	vneglt.f64	d8, d0
 80145a8:	2d46      	cmp	r5, #70	; 0x46
 80145aa:	460c      	mov	r4, r1
 80145ac:	701a      	strb	r2, [r3, #0]
 80145ae:	d004      	beq.n	80145ba <__cvt+0x38>
 80145b0:	2d45      	cmp	r5, #69	; 0x45
 80145b2:	d100      	bne.n	80145b6 <__cvt+0x34>
 80145b4:	3401      	adds	r4, #1
 80145b6:	2102      	movs	r1, #2
 80145b8:	e000      	b.n	80145bc <__cvt+0x3a>
 80145ba:	2103      	movs	r1, #3
 80145bc:	ab03      	add	r3, sp, #12
 80145be:	9301      	str	r3, [sp, #4]
 80145c0:	ab02      	add	r3, sp, #8
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	4622      	mov	r2, r4
 80145c6:	4633      	mov	r3, r6
 80145c8:	eeb0 0b48 	vmov.f64	d0, d8
 80145cc:	f000 ff88 	bl	80154e0 <_dtoa_r>
 80145d0:	2d47      	cmp	r5, #71	; 0x47
 80145d2:	d101      	bne.n	80145d8 <__cvt+0x56>
 80145d4:	07fb      	lsls	r3, r7, #31
 80145d6:	d51a      	bpl.n	801460e <__cvt+0x8c>
 80145d8:	2d46      	cmp	r5, #70	; 0x46
 80145da:	eb00 0204 	add.w	r2, r0, r4
 80145de:	d10c      	bne.n	80145fa <__cvt+0x78>
 80145e0:	7803      	ldrb	r3, [r0, #0]
 80145e2:	2b30      	cmp	r3, #48	; 0x30
 80145e4:	d107      	bne.n	80145f6 <__cvt+0x74>
 80145e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80145ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ee:	bf1c      	itt	ne
 80145f0:	f1c4 0401 	rsbne	r4, r4, #1
 80145f4:	6034      	strne	r4, [r6, #0]
 80145f6:	6833      	ldr	r3, [r6, #0]
 80145f8:	441a      	add	r2, r3
 80145fa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80145fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014602:	bf08      	it	eq
 8014604:	9203      	streq	r2, [sp, #12]
 8014606:	2130      	movs	r1, #48	; 0x30
 8014608:	9b03      	ldr	r3, [sp, #12]
 801460a:	4293      	cmp	r3, r2
 801460c:	d307      	bcc.n	801461e <__cvt+0x9c>
 801460e:	9b03      	ldr	r3, [sp, #12]
 8014610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014612:	1a1b      	subs	r3, r3, r0
 8014614:	6013      	str	r3, [r2, #0]
 8014616:	b005      	add	sp, #20
 8014618:	ecbd 8b02 	vpop	{d8}
 801461c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801461e:	1c5c      	adds	r4, r3, #1
 8014620:	9403      	str	r4, [sp, #12]
 8014622:	7019      	strb	r1, [r3, #0]
 8014624:	e7f0      	b.n	8014608 <__cvt+0x86>

08014626 <__exponent>:
 8014626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014628:	4603      	mov	r3, r0
 801462a:	2900      	cmp	r1, #0
 801462c:	bfb8      	it	lt
 801462e:	4249      	neglt	r1, r1
 8014630:	f803 2b02 	strb.w	r2, [r3], #2
 8014634:	bfb4      	ite	lt
 8014636:	222d      	movlt	r2, #45	; 0x2d
 8014638:	222b      	movge	r2, #43	; 0x2b
 801463a:	2909      	cmp	r1, #9
 801463c:	7042      	strb	r2, [r0, #1]
 801463e:	dd2a      	ble.n	8014696 <__exponent+0x70>
 8014640:	f10d 0207 	add.w	r2, sp, #7
 8014644:	4617      	mov	r7, r2
 8014646:	260a      	movs	r6, #10
 8014648:	4694      	mov	ip, r2
 801464a:	fb91 f5f6 	sdiv	r5, r1, r6
 801464e:	fb06 1415 	mls	r4, r6, r5, r1
 8014652:	3430      	adds	r4, #48	; 0x30
 8014654:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014658:	460c      	mov	r4, r1
 801465a:	2c63      	cmp	r4, #99	; 0x63
 801465c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014660:	4629      	mov	r1, r5
 8014662:	dcf1      	bgt.n	8014648 <__exponent+0x22>
 8014664:	3130      	adds	r1, #48	; 0x30
 8014666:	f1ac 0402 	sub.w	r4, ip, #2
 801466a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801466e:	1c41      	adds	r1, r0, #1
 8014670:	4622      	mov	r2, r4
 8014672:	42ba      	cmp	r2, r7
 8014674:	d30a      	bcc.n	801468c <__exponent+0x66>
 8014676:	f10d 0209 	add.w	r2, sp, #9
 801467a:	eba2 020c 	sub.w	r2, r2, ip
 801467e:	42bc      	cmp	r4, r7
 8014680:	bf88      	it	hi
 8014682:	2200      	movhi	r2, #0
 8014684:	4413      	add	r3, r2
 8014686:	1a18      	subs	r0, r3, r0
 8014688:	b003      	add	sp, #12
 801468a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801468c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014690:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014694:	e7ed      	b.n	8014672 <__exponent+0x4c>
 8014696:	2330      	movs	r3, #48	; 0x30
 8014698:	3130      	adds	r1, #48	; 0x30
 801469a:	7083      	strb	r3, [r0, #2]
 801469c:	70c1      	strb	r1, [r0, #3]
 801469e:	1d03      	adds	r3, r0, #4
 80146a0:	e7f1      	b.n	8014686 <__exponent+0x60>
 80146a2:	0000      	movs	r0, r0
 80146a4:	0000      	movs	r0, r0
	...

080146a8 <_printf_float>:
 80146a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146ac:	b08b      	sub	sp, #44	; 0x2c
 80146ae:	460c      	mov	r4, r1
 80146b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80146b4:	4616      	mov	r6, r2
 80146b6:	461f      	mov	r7, r3
 80146b8:	4605      	mov	r5, r0
 80146ba:	f000 fddf 	bl	801527c <_localeconv_r>
 80146be:	f8d0 b000 	ldr.w	fp, [r0]
 80146c2:	4658      	mov	r0, fp
 80146c4:	f7eb fe5c 	bl	8000380 <strlen>
 80146c8:	2300      	movs	r3, #0
 80146ca:	9308      	str	r3, [sp, #32]
 80146cc:	f8d8 3000 	ldr.w	r3, [r8]
 80146d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80146d4:	6822      	ldr	r2, [r4, #0]
 80146d6:	3307      	adds	r3, #7
 80146d8:	f023 0307 	bic.w	r3, r3, #7
 80146dc:	f103 0108 	add.w	r1, r3, #8
 80146e0:	f8c8 1000 	str.w	r1, [r8]
 80146e4:	ed93 0b00 	vldr	d0, [r3]
 80146e8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014948 <_printf_float+0x2a0>
 80146ec:	eeb0 7bc0 	vabs.f64	d7, d0
 80146f0:	eeb4 7b46 	vcmp.f64	d7, d6
 80146f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f8:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80146fc:	4682      	mov	sl, r0
 80146fe:	dd24      	ble.n	801474a <_printf_float+0xa2>
 8014700:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014708:	d502      	bpl.n	8014710 <_printf_float+0x68>
 801470a:	232d      	movs	r3, #45	; 0x2d
 801470c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014710:	498f      	ldr	r1, [pc, #572]	; (8014950 <_printf_float+0x2a8>)
 8014712:	4b90      	ldr	r3, [pc, #576]	; (8014954 <_printf_float+0x2ac>)
 8014714:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014718:	bf94      	ite	ls
 801471a:	4688      	movls	r8, r1
 801471c:	4698      	movhi	r8, r3
 801471e:	2303      	movs	r3, #3
 8014720:	6123      	str	r3, [r4, #16]
 8014722:	f022 0204 	bic.w	r2, r2, #4
 8014726:	2300      	movs	r3, #0
 8014728:	6022      	str	r2, [r4, #0]
 801472a:	9304      	str	r3, [sp, #16]
 801472c:	9700      	str	r7, [sp, #0]
 801472e:	4633      	mov	r3, r6
 8014730:	aa09      	add	r2, sp, #36	; 0x24
 8014732:	4621      	mov	r1, r4
 8014734:	4628      	mov	r0, r5
 8014736:	f000 f9d1 	bl	8014adc <_printf_common>
 801473a:	3001      	adds	r0, #1
 801473c:	f040 808a 	bne.w	8014854 <_printf_float+0x1ac>
 8014740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014744:	b00b      	add	sp, #44	; 0x2c
 8014746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801474a:	eeb4 0b40 	vcmp.f64	d0, d0
 801474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014752:	d709      	bvc.n	8014768 <_printf_float+0xc0>
 8014754:	ee10 3a90 	vmov	r3, s1
 8014758:	2b00      	cmp	r3, #0
 801475a:	bfbc      	itt	lt
 801475c:	232d      	movlt	r3, #45	; 0x2d
 801475e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014762:	497d      	ldr	r1, [pc, #500]	; (8014958 <_printf_float+0x2b0>)
 8014764:	4b7d      	ldr	r3, [pc, #500]	; (801495c <_printf_float+0x2b4>)
 8014766:	e7d5      	b.n	8014714 <_printf_float+0x6c>
 8014768:	6863      	ldr	r3, [r4, #4]
 801476a:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801476e:	9104      	str	r1, [sp, #16]
 8014770:	1c59      	adds	r1, r3, #1
 8014772:	d13c      	bne.n	80147ee <_printf_float+0x146>
 8014774:	2306      	movs	r3, #6
 8014776:	6063      	str	r3, [r4, #4]
 8014778:	2300      	movs	r3, #0
 801477a:	9303      	str	r3, [sp, #12]
 801477c:	ab08      	add	r3, sp, #32
 801477e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014786:	ab07      	add	r3, sp, #28
 8014788:	6861      	ldr	r1, [r4, #4]
 801478a:	9300      	str	r3, [sp, #0]
 801478c:	6022      	str	r2, [r4, #0]
 801478e:	f10d 031b 	add.w	r3, sp, #27
 8014792:	4628      	mov	r0, r5
 8014794:	f7ff fef5 	bl	8014582 <__cvt>
 8014798:	9b04      	ldr	r3, [sp, #16]
 801479a:	9907      	ldr	r1, [sp, #28]
 801479c:	2b47      	cmp	r3, #71	; 0x47
 801479e:	4680      	mov	r8, r0
 80147a0:	d108      	bne.n	80147b4 <_printf_float+0x10c>
 80147a2:	1cc8      	adds	r0, r1, #3
 80147a4:	db02      	blt.n	80147ac <_printf_float+0x104>
 80147a6:	6863      	ldr	r3, [r4, #4]
 80147a8:	4299      	cmp	r1, r3
 80147aa:	dd41      	ble.n	8014830 <_printf_float+0x188>
 80147ac:	f1a9 0902 	sub.w	r9, r9, #2
 80147b0:	fa5f f989 	uxtb.w	r9, r9
 80147b4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80147b8:	d820      	bhi.n	80147fc <_printf_float+0x154>
 80147ba:	3901      	subs	r1, #1
 80147bc:	464a      	mov	r2, r9
 80147be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80147c2:	9107      	str	r1, [sp, #28]
 80147c4:	f7ff ff2f 	bl	8014626 <__exponent>
 80147c8:	9a08      	ldr	r2, [sp, #32]
 80147ca:	9004      	str	r0, [sp, #16]
 80147cc:	1813      	adds	r3, r2, r0
 80147ce:	2a01      	cmp	r2, #1
 80147d0:	6123      	str	r3, [r4, #16]
 80147d2:	dc02      	bgt.n	80147da <_printf_float+0x132>
 80147d4:	6822      	ldr	r2, [r4, #0]
 80147d6:	07d2      	lsls	r2, r2, #31
 80147d8:	d501      	bpl.n	80147de <_printf_float+0x136>
 80147da:	3301      	adds	r3, #1
 80147dc:	6123      	str	r3, [r4, #16]
 80147de:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d0a2      	beq.n	801472c <_printf_float+0x84>
 80147e6:	232d      	movs	r3, #45	; 0x2d
 80147e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147ec:	e79e      	b.n	801472c <_printf_float+0x84>
 80147ee:	9904      	ldr	r1, [sp, #16]
 80147f0:	2947      	cmp	r1, #71	; 0x47
 80147f2:	d1c1      	bne.n	8014778 <_printf_float+0xd0>
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d1bf      	bne.n	8014778 <_printf_float+0xd0>
 80147f8:	2301      	movs	r3, #1
 80147fa:	e7bc      	b.n	8014776 <_printf_float+0xce>
 80147fc:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014800:	d118      	bne.n	8014834 <_printf_float+0x18c>
 8014802:	2900      	cmp	r1, #0
 8014804:	6863      	ldr	r3, [r4, #4]
 8014806:	dd0b      	ble.n	8014820 <_printf_float+0x178>
 8014808:	6121      	str	r1, [r4, #16]
 801480a:	b913      	cbnz	r3, 8014812 <_printf_float+0x16a>
 801480c:	6822      	ldr	r2, [r4, #0]
 801480e:	07d0      	lsls	r0, r2, #31
 8014810:	d502      	bpl.n	8014818 <_printf_float+0x170>
 8014812:	3301      	adds	r3, #1
 8014814:	440b      	add	r3, r1
 8014816:	6123      	str	r3, [r4, #16]
 8014818:	2300      	movs	r3, #0
 801481a:	65a1      	str	r1, [r4, #88]	; 0x58
 801481c:	9304      	str	r3, [sp, #16]
 801481e:	e7de      	b.n	80147de <_printf_float+0x136>
 8014820:	b913      	cbnz	r3, 8014828 <_printf_float+0x180>
 8014822:	6822      	ldr	r2, [r4, #0]
 8014824:	07d2      	lsls	r2, r2, #31
 8014826:	d501      	bpl.n	801482c <_printf_float+0x184>
 8014828:	3302      	adds	r3, #2
 801482a:	e7f4      	b.n	8014816 <_printf_float+0x16e>
 801482c:	2301      	movs	r3, #1
 801482e:	e7f2      	b.n	8014816 <_printf_float+0x16e>
 8014830:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014834:	9b08      	ldr	r3, [sp, #32]
 8014836:	4299      	cmp	r1, r3
 8014838:	db05      	blt.n	8014846 <_printf_float+0x19e>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	6121      	str	r1, [r4, #16]
 801483e:	07d8      	lsls	r0, r3, #31
 8014840:	d5ea      	bpl.n	8014818 <_printf_float+0x170>
 8014842:	1c4b      	adds	r3, r1, #1
 8014844:	e7e7      	b.n	8014816 <_printf_float+0x16e>
 8014846:	2900      	cmp	r1, #0
 8014848:	bfd4      	ite	le
 801484a:	f1c1 0202 	rsble	r2, r1, #2
 801484e:	2201      	movgt	r2, #1
 8014850:	4413      	add	r3, r2
 8014852:	e7e0      	b.n	8014816 <_printf_float+0x16e>
 8014854:	6823      	ldr	r3, [r4, #0]
 8014856:	055a      	lsls	r2, r3, #21
 8014858:	d407      	bmi.n	801486a <_printf_float+0x1c2>
 801485a:	6923      	ldr	r3, [r4, #16]
 801485c:	4642      	mov	r2, r8
 801485e:	4631      	mov	r1, r6
 8014860:	4628      	mov	r0, r5
 8014862:	47b8      	blx	r7
 8014864:	3001      	adds	r0, #1
 8014866:	d12a      	bne.n	80148be <_printf_float+0x216>
 8014868:	e76a      	b.n	8014740 <_printf_float+0x98>
 801486a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801486e:	f240 80e0 	bls.w	8014a32 <_printf_float+0x38a>
 8014872:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014876:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801487e:	d133      	bne.n	80148e8 <_printf_float+0x240>
 8014880:	4a37      	ldr	r2, [pc, #220]	; (8014960 <_printf_float+0x2b8>)
 8014882:	2301      	movs	r3, #1
 8014884:	4631      	mov	r1, r6
 8014886:	4628      	mov	r0, r5
 8014888:	47b8      	blx	r7
 801488a:	3001      	adds	r0, #1
 801488c:	f43f af58 	beq.w	8014740 <_printf_float+0x98>
 8014890:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014894:	429a      	cmp	r2, r3
 8014896:	db02      	blt.n	801489e <_printf_float+0x1f6>
 8014898:	6823      	ldr	r3, [r4, #0]
 801489a:	07d8      	lsls	r0, r3, #31
 801489c:	d50f      	bpl.n	80148be <_printf_float+0x216>
 801489e:	4653      	mov	r3, sl
 80148a0:	465a      	mov	r2, fp
 80148a2:	4631      	mov	r1, r6
 80148a4:	4628      	mov	r0, r5
 80148a6:	47b8      	blx	r7
 80148a8:	3001      	adds	r0, #1
 80148aa:	f43f af49 	beq.w	8014740 <_printf_float+0x98>
 80148ae:	f04f 0800 	mov.w	r8, #0
 80148b2:	f104 091a 	add.w	r9, r4, #26
 80148b6:	9b08      	ldr	r3, [sp, #32]
 80148b8:	3b01      	subs	r3, #1
 80148ba:	4543      	cmp	r3, r8
 80148bc:	dc09      	bgt.n	80148d2 <_printf_float+0x22a>
 80148be:	6823      	ldr	r3, [r4, #0]
 80148c0:	079b      	lsls	r3, r3, #30
 80148c2:	f100 8106 	bmi.w	8014ad2 <_printf_float+0x42a>
 80148c6:	68e0      	ldr	r0, [r4, #12]
 80148c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148ca:	4298      	cmp	r0, r3
 80148cc:	bfb8      	it	lt
 80148ce:	4618      	movlt	r0, r3
 80148d0:	e738      	b.n	8014744 <_printf_float+0x9c>
 80148d2:	2301      	movs	r3, #1
 80148d4:	464a      	mov	r2, r9
 80148d6:	4631      	mov	r1, r6
 80148d8:	4628      	mov	r0, r5
 80148da:	47b8      	blx	r7
 80148dc:	3001      	adds	r0, #1
 80148de:	f43f af2f 	beq.w	8014740 <_printf_float+0x98>
 80148e2:	f108 0801 	add.w	r8, r8, #1
 80148e6:	e7e6      	b.n	80148b6 <_printf_float+0x20e>
 80148e8:	9b07      	ldr	r3, [sp, #28]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	dc3a      	bgt.n	8014964 <_printf_float+0x2bc>
 80148ee:	4a1c      	ldr	r2, [pc, #112]	; (8014960 <_printf_float+0x2b8>)
 80148f0:	2301      	movs	r3, #1
 80148f2:	4631      	mov	r1, r6
 80148f4:	4628      	mov	r0, r5
 80148f6:	47b8      	blx	r7
 80148f8:	3001      	adds	r0, #1
 80148fa:	f43f af21 	beq.w	8014740 <_printf_float+0x98>
 80148fe:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014902:	4313      	orrs	r3, r2
 8014904:	d102      	bne.n	801490c <_printf_float+0x264>
 8014906:	6823      	ldr	r3, [r4, #0]
 8014908:	07d9      	lsls	r1, r3, #31
 801490a:	d5d8      	bpl.n	80148be <_printf_float+0x216>
 801490c:	4653      	mov	r3, sl
 801490e:	465a      	mov	r2, fp
 8014910:	4631      	mov	r1, r6
 8014912:	4628      	mov	r0, r5
 8014914:	47b8      	blx	r7
 8014916:	3001      	adds	r0, #1
 8014918:	f43f af12 	beq.w	8014740 <_printf_float+0x98>
 801491c:	f04f 0900 	mov.w	r9, #0
 8014920:	f104 0a1a 	add.w	sl, r4, #26
 8014924:	9b07      	ldr	r3, [sp, #28]
 8014926:	425b      	negs	r3, r3
 8014928:	454b      	cmp	r3, r9
 801492a:	dc01      	bgt.n	8014930 <_printf_float+0x288>
 801492c:	9b08      	ldr	r3, [sp, #32]
 801492e:	e795      	b.n	801485c <_printf_float+0x1b4>
 8014930:	2301      	movs	r3, #1
 8014932:	4652      	mov	r2, sl
 8014934:	4631      	mov	r1, r6
 8014936:	4628      	mov	r0, r5
 8014938:	47b8      	blx	r7
 801493a:	3001      	adds	r0, #1
 801493c:	f43f af00 	beq.w	8014740 <_printf_float+0x98>
 8014940:	f109 0901 	add.w	r9, r9, #1
 8014944:	e7ee      	b.n	8014924 <_printf_float+0x27c>
 8014946:	bf00      	nop
 8014948:	ffffffff 	.word	0xffffffff
 801494c:	7fefffff 	.word	0x7fefffff
 8014950:	08017170 	.word	0x08017170
 8014954:	08017174 	.word	0x08017174
 8014958:	08017178 	.word	0x08017178
 801495c:	0801717c 	.word	0x0801717c
 8014960:	08017180 	.word	0x08017180
 8014964:	9a08      	ldr	r2, [sp, #32]
 8014966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014968:	429a      	cmp	r2, r3
 801496a:	bfa8      	it	ge
 801496c:	461a      	movge	r2, r3
 801496e:	2a00      	cmp	r2, #0
 8014970:	4691      	mov	r9, r2
 8014972:	dc38      	bgt.n	80149e6 <_printf_float+0x33e>
 8014974:	2300      	movs	r3, #0
 8014976:	9305      	str	r3, [sp, #20]
 8014978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801497c:	f104 021a 	add.w	r2, r4, #26
 8014980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014982:	9905      	ldr	r1, [sp, #20]
 8014984:	9304      	str	r3, [sp, #16]
 8014986:	eba3 0309 	sub.w	r3, r3, r9
 801498a:	428b      	cmp	r3, r1
 801498c:	dc33      	bgt.n	80149f6 <_printf_float+0x34e>
 801498e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014992:	429a      	cmp	r2, r3
 8014994:	db3c      	blt.n	8014a10 <_printf_float+0x368>
 8014996:	6823      	ldr	r3, [r4, #0]
 8014998:	07da      	lsls	r2, r3, #31
 801499a:	d439      	bmi.n	8014a10 <_printf_float+0x368>
 801499c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80149a0:	eba2 0903 	sub.w	r9, r2, r3
 80149a4:	9b04      	ldr	r3, [sp, #16]
 80149a6:	1ad2      	subs	r2, r2, r3
 80149a8:	4591      	cmp	r9, r2
 80149aa:	bfa8      	it	ge
 80149ac:	4691      	movge	r9, r2
 80149ae:	f1b9 0f00 	cmp.w	r9, #0
 80149b2:	dc35      	bgt.n	8014a20 <_printf_float+0x378>
 80149b4:	f04f 0800 	mov.w	r8, #0
 80149b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80149bc:	f104 0a1a 	add.w	sl, r4, #26
 80149c0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80149c4:	1a9b      	subs	r3, r3, r2
 80149c6:	eba3 0309 	sub.w	r3, r3, r9
 80149ca:	4543      	cmp	r3, r8
 80149cc:	f77f af77 	ble.w	80148be <_printf_float+0x216>
 80149d0:	2301      	movs	r3, #1
 80149d2:	4652      	mov	r2, sl
 80149d4:	4631      	mov	r1, r6
 80149d6:	4628      	mov	r0, r5
 80149d8:	47b8      	blx	r7
 80149da:	3001      	adds	r0, #1
 80149dc:	f43f aeb0 	beq.w	8014740 <_printf_float+0x98>
 80149e0:	f108 0801 	add.w	r8, r8, #1
 80149e4:	e7ec      	b.n	80149c0 <_printf_float+0x318>
 80149e6:	4613      	mov	r3, r2
 80149e8:	4631      	mov	r1, r6
 80149ea:	4642      	mov	r2, r8
 80149ec:	4628      	mov	r0, r5
 80149ee:	47b8      	blx	r7
 80149f0:	3001      	adds	r0, #1
 80149f2:	d1bf      	bne.n	8014974 <_printf_float+0x2cc>
 80149f4:	e6a4      	b.n	8014740 <_printf_float+0x98>
 80149f6:	2301      	movs	r3, #1
 80149f8:	4631      	mov	r1, r6
 80149fa:	4628      	mov	r0, r5
 80149fc:	9204      	str	r2, [sp, #16]
 80149fe:	47b8      	blx	r7
 8014a00:	3001      	adds	r0, #1
 8014a02:	f43f ae9d 	beq.w	8014740 <_printf_float+0x98>
 8014a06:	9b05      	ldr	r3, [sp, #20]
 8014a08:	9a04      	ldr	r2, [sp, #16]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	9305      	str	r3, [sp, #20]
 8014a0e:	e7b7      	b.n	8014980 <_printf_float+0x2d8>
 8014a10:	4653      	mov	r3, sl
 8014a12:	465a      	mov	r2, fp
 8014a14:	4631      	mov	r1, r6
 8014a16:	4628      	mov	r0, r5
 8014a18:	47b8      	blx	r7
 8014a1a:	3001      	adds	r0, #1
 8014a1c:	d1be      	bne.n	801499c <_printf_float+0x2f4>
 8014a1e:	e68f      	b.n	8014740 <_printf_float+0x98>
 8014a20:	9a04      	ldr	r2, [sp, #16]
 8014a22:	464b      	mov	r3, r9
 8014a24:	4442      	add	r2, r8
 8014a26:	4631      	mov	r1, r6
 8014a28:	4628      	mov	r0, r5
 8014a2a:	47b8      	blx	r7
 8014a2c:	3001      	adds	r0, #1
 8014a2e:	d1c1      	bne.n	80149b4 <_printf_float+0x30c>
 8014a30:	e686      	b.n	8014740 <_printf_float+0x98>
 8014a32:	9a08      	ldr	r2, [sp, #32]
 8014a34:	2a01      	cmp	r2, #1
 8014a36:	dc01      	bgt.n	8014a3c <_printf_float+0x394>
 8014a38:	07db      	lsls	r3, r3, #31
 8014a3a:	d537      	bpl.n	8014aac <_printf_float+0x404>
 8014a3c:	2301      	movs	r3, #1
 8014a3e:	4642      	mov	r2, r8
 8014a40:	4631      	mov	r1, r6
 8014a42:	4628      	mov	r0, r5
 8014a44:	47b8      	blx	r7
 8014a46:	3001      	adds	r0, #1
 8014a48:	f43f ae7a 	beq.w	8014740 <_printf_float+0x98>
 8014a4c:	4653      	mov	r3, sl
 8014a4e:	465a      	mov	r2, fp
 8014a50:	4631      	mov	r1, r6
 8014a52:	4628      	mov	r0, r5
 8014a54:	47b8      	blx	r7
 8014a56:	3001      	adds	r0, #1
 8014a58:	f43f ae72 	beq.w	8014740 <_printf_float+0x98>
 8014a5c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014a60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a68:	9b08      	ldr	r3, [sp, #32]
 8014a6a:	d01a      	beq.n	8014aa2 <_printf_float+0x3fa>
 8014a6c:	3b01      	subs	r3, #1
 8014a6e:	f108 0201 	add.w	r2, r8, #1
 8014a72:	4631      	mov	r1, r6
 8014a74:	4628      	mov	r0, r5
 8014a76:	47b8      	blx	r7
 8014a78:	3001      	adds	r0, #1
 8014a7a:	d10e      	bne.n	8014a9a <_printf_float+0x3f2>
 8014a7c:	e660      	b.n	8014740 <_printf_float+0x98>
 8014a7e:	2301      	movs	r3, #1
 8014a80:	464a      	mov	r2, r9
 8014a82:	4631      	mov	r1, r6
 8014a84:	4628      	mov	r0, r5
 8014a86:	47b8      	blx	r7
 8014a88:	3001      	adds	r0, #1
 8014a8a:	f43f ae59 	beq.w	8014740 <_printf_float+0x98>
 8014a8e:	f108 0801 	add.w	r8, r8, #1
 8014a92:	9b08      	ldr	r3, [sp, #32]
 8014a94:	3b01      	subs	r3, #1
 8014a96:	4543      	cmp	r3, r8
 8014a98:	dcf1      	bgt.n	8014a7e <_printf_float+0x3d6>
 8014a9a:	9b04      	ldr	r3, [sp, #16]
 8014a9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014aa0:	e6dd      	b.n	801485e <_printf_float+0x1b6>
 8014aa2:	f04f 0800 	mov.w	r8, #0
 8014aa6:	f104 091a 	add.w	r9, r4, #26
 8014aaa:	e7f2      	b.n	8014a92 <_printf_float+0x3ea>
 8014aac:	2301      	movs	r3, #1
 8014aae:	4642      	mov	r2, r8
 8014ab0:	e7df      	b.n	8014a72 <_printf_float+0x3ca>
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	464a      	mov	r2, r9
 8014ab6:	4631      	mov	r1, r6
 8014ab8:	4628      	mov	r0, r5
 8014aba:	47b8      	blx	r7
 8014abc:	3001      	adds	r0, #1
 8014abe:	f43f ae3f 	beq.w	8014740 <_printf_float+0x98>
 8014ac2:	f108 0801 	add.w	r8, r8, #1
 8014ac6:	68e3      	ldr	r3, [r4, #12]
 8014ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014aca:	1a5b      	subs	r3, r3, r1
 8014acc:	4543      	cmp	r3, r8
 8014ace:	dcf0      	bgt.n	8014ab2 <_printf_float+0x40a>
 8014ad0:	e6f9      	b.n	80148c6 <_printf_float+0x21e>
 8014ad2:	f04f 0800 	mov.w	r8, #0
 8014ad6:	f104 0919 	add.w	r9, r4, #25
 8014ada:	e7f4      	b.n	8014ac6 <_printf_float+0x41e>

08014adc <_printf_common>:
 8014adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ae0:	4616      	mov	r6, r2
 8014ae2:	4699      	mov	r9, r3
 8014ae4:	688a      	ldr	r2, [r1, #8]
 8014ae6:	690b      	ldr	r3, [r1, #16]
 8014ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014aec:	4293      	cmp	r3, r2
 8014aee:	bfb8      	it	lt
 8014af0:	4613      	movlt	r3, r2
 8014af2:	6033      	str	r3, [r6, #0]
 8014af4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014af8:	4607      	mov	r7, r0
 8014afa:	460c      	mov	r4, r1
 8014afc:	b10a      	cbz	r2, 8014b02 <_printf_common+0x26>
 8014afe:	3301      	adds	r3, #1
 8014b00:	6033      	str	r3, [r6, #0]
 8014b02:	6823      	ldr	r3, [r4, #0]
 8014b04:	0699      	lsls	r1, r3, #26
 8014b06:	bf42      	ittt	mi
 8014b08:	6833      	ldrmi	r3, [r6, #0]
 8014b0a:	3302      	addmi	r3, #2
 8014b0c:	6033      	strmi	r3, [r6, #0]
 8014b0e:	6825      	ldr	r5, [r4, #0]
 8014b10:	f015 0506 	ands.w	r5, r5, #6
 8014b14:	d106      	bne.n	8014b24 <_printf_common+0x48>
 8014b16:	f104 0a19 	add.w	sl, r4, #25
 8014b1a:	68e3      	ldr	r3, [r4, #12]
 8014b1c:	6832      	ldr	r2, [r6, #0]
 8014b1e:	1a9b      	subs	r3, r3, r2
 8014b20:	42ab      	cmp	r3, r5
 8014b22:	dc26      	bgt.n	8014b72 <_printf_common+0x96>
 8014b24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014b28:	1e13      	subs	r3, r2, #0
 8014b2a:	6822      	ldr	r2, [r4, #0]
 8014b2c:	bf18      	it	ne
 8014b2e:	2301      	movne	r3, #1
 8014b30:	0692      	lsls	r2, r2, #26
 8014b32:	d42b      	bmi.n	8014b8c <_printf_common+0xb0>
 8014b34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014b38:	4649      	mov	r1, r9
 8014b3a:	4638      	mov	r0, r7
 8014b3c:	47c0      	blx	r8
 8014b3e:	3001      	adds	r0, #1
 8014b40:	d01e      	beq.n	8014b80 <_printf_common+0xa4>
 8014b42:	6823      	ldr	r3, [r4, #0]
 8014b44:	6922      	ldr	r2, [r4, #16]
 8014b46:	f003 0306 	and.w	r3, r3, #6
 8014b4a:	2b04      	cmp	r3, #4
 8014b4c:	bf02      	ittt	eq
 8014b4e:	68e5      	ldreq	r5, [r4, #12]
 8014b50:	6833      	ldreq	r3, [r6, #0]
 8014b52:	1aed      	subeq	r5, r5, r3
 8014b54:	68a3      	ldr	r3, [r4, #8]
 8014b56:	bf0c      	ite	eq
 8014b58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b5c:	2500      	movne	r5, #0
 8014b5e:	4293      	cmp	r3, r2
 8014b60:	bfc4      	itt	gt
 8014b62:	1a9b      	subgt	r3, r3, r2
 8014b64:	18ed      	addgt	r5, r5, r3
 8014b66:	2600      	movs	r6, #0
 8014b68:	341a      	adds	r4, #26
 8014b6a:	42b5      	cmp	r5, r6
 8014b6c:	d11a      	bne.n	8014ba4 <_printf_common+0xc8>
 8014b6e:	2000      	movs	r0, #0
 8014b70:	e008      	b.n	8014b84 <_printf_common+0xa8>
 8014b72:	2301      	movs	r3, #1
 8014b74:	4652      	mov	r2, sl
 8014b76:	4649      	mov	r1, r9
 8014b78:	4638      	mov	r0, r7
 8014b7a:	47c0      	blx	r8
 8014b7c:	3001      	adds	r0, #1
 8014b7e:	d103      	bne.n	8014b88 <_printf_common+0xac>
 8014b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b88:	3501      	adds	r5, #1
 8014b8a:	e7c6      	b.n	8014b1a <_printf_common+0x3e>
 8014b8c:	18e1      	adds	r1, r4, r3
 8014b8e:	1c5a      	adds	r2, r3, #1
 8014b90:	2030      	movs	r0, #48	; 0x30
 8014b92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014b96:	4422      	add	r2, r4
 8014b98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014b9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ba0:	3302      	adds	r3, #2
 8014ba2:	e7c7      	b.n	8014b34 <_printf_common+0x58>
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	4622      	mov	r2, r4
 8014ba8:	4649      	mov	r1, r9
 8014baa:	4638      	mov	r0, r7
 8014bac:	47c0      	blx	r8
 8014bae:	3001      	adds	r0, #1
 8014bb0:	d0e6      	beq.n	8014b80 <_printf_common+0xa4>
 8014bb2:	3601      	adds	r6, #1
 8014bb4:	e7d9      	b.n	8014b6a <_printf_common+0x8e>
	...

08014bb8 <_printf_i>:
 8014bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bbc:	7e0f      	ldrb	r7, [r1, #24]
 8014bbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014bc0:	2f78      	cmp	r7, #120	; 0x78
 8014bc2:	4691      	mov	r9, r2
 8014bc4:	4680      	mov	r8, r0
 8014bc6:	460c      	mov	r4, r1
 8014bc8:	469a      	mov	sl, r3
 8014bca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014bce:	d807      	bhi.n	8014be0 <_printf_i+0x28>
 8014bd0:	2f62      	cmp	r7, #98	; 0x62
 8014bd2:	d80a      	bhi.n	8014bea <_printf_i+0x32>
 8014bd4:	2f00      	cmp	r7, #0
 8014bd6:	f000 80d4 	beq.w	8014d82 <_printf_i+0x1ca>
 8014bda:	2f58      	cmp	r7, #88	; 0x58
 8014bdc:	f000 80c0 	beq.w	8014d60 <_printf_i+0x1a8>
 8014be0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014be4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014be8:	e03a      	b.n	8014c60 <_printf_i+0xa8>
 8014bea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014bee:	2b15      	cmp	r3, #21
 8014bf0:	d8f6      	bhi.n	8014be0 <_printf_i+0x28>
 8014bf2:	a101      	add	r1, pc, #4	; (adr r1, 8014bf8 <_printf_i+0x40>)
 8014bf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014bf8:	08014c51 	.word	0x08014c51
 8014bfc:	08014c65 	.word	0x08014c65
 8014c00:	08014be1 	.word	0x08014be1
 8014c04:	08014be1 	.word	0x08014be1
 8014c08:	08014be1 	.word	0x08014be1
 8014c0c:	08014be1 	.word	0x08014be1
 8014c10:	08014c65 	.word	0x08014c65
 8014c14:	08014be1 	.word	0x08014be1
 8014c18:	08014be1 	.word	0x08014be1
 8014c1c:	08014be1 	.word	0x08014be1
 8014c20:	08014be1 	.word	0x08014be1
 8014c24:	08014d69 	.word	0x08014d69
 8014c28:	08014c91 	.word	0x08014c91
 8014c2c:	08014d23 	.word	0x08014d23
 8014c30:	08014be1 	.word	0x08014be1
 8014c34:	08014be1 	.word	0x08014be1
 8014c38:	08014d8b 	.word	0x08014d8b
 8014c3c:	08014be1 	.word	0x08014be1
 8014c40:	08014c91 	.word	0x08014c91
 8014c44:	08014be1 	.word	0x08014be1
 8014c48:	08014be1 	.word	0x08014be1
 8014c4c:	08014d2b 	.word	0x08014d2b
 8014c50:	682b      	ldr	r3, [r5, #0]
 8014c52:	1d1a      	adds	r2, r3, #4
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	602a      	str	r2, [r5, #0]
 8014c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014c5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014c60:	2301      	movs	r3, #1
 8014c62:	e09f      	b.n	8014da4 <_printf_i+0x1ec>
 8014c64:	6820      	ldr	r0, [r4, #0]
 8014c66:	682b      	ldr	r3, [r5, #0]
 8014c68:	0607      	lsls	r7, r0, #24
 8014c6a:	f103 0104 	add.w	r1, r3, #4
 8014c6e:	6029      	str	r1, [r5, #0]
 8014c70:	d501      	bpl.n	8014c76 <_printf_i+0xbe>
 8014c72:	681e      	ldr	r6, [r3, #0]
 8014c74:	e003      	b.n	8014c7e <_printf_i+0xc6>
 8014c76:	0646      	lsls	r6, r0, #25
 8014c78:	d5fb      	bpl.n	8014c72 <_printf_i+0xba>
 8014c7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014c7e:	2e00      	cmp	r6, #0
 8014c80:	da03      	bge.n	8014c8a <_printf_i+0xd2>
 8014c82:	232d      	movs	r3, #45	; 0x2d
 8014c84:	4276      	negs	r6, r6
 8014c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c8a:	485a      	ldr	r0, [pc, #360]	; (8014df4 <_printf_i+0x23c>)
 8014c8c:	230a      	movs	r3, #10
 8014c8e:	e012      	b.n	8014cb6 <_printf_i+0xfe>
 8014c90:	682b      	ldr	r3, [r5, #0]
 8014c92:	6820      	ldr	r0, [r4, #0]
 8014c94:	1d19      	adds	r1, r3, #4
 8014c96:	6029      	str	r1, [r5, #0]
 8014c98:	0605      	lsls	r5, r0, #24
 8014c9a:	d501      	bpl.n	8014ca0 <_printf_i+0xe8>
 8014c9c:	681e      	ldr	r6, [r3, #0]
 8014c9e:	e002      	b.n	8014ca6 <_printf_i+0xee>
 8014ca0:	0641      	lsls	r1, r0, #25
 8014ca2:	d5fb      	bpl.n	8014c9c <_printf_i+0xe4>
 8014ca4:	881e      	ldrh	r6, [r3, #0]
 8014ca6:	4853      	ldr	r0, [pc, #332]	; (8014df4 <_printf_i+0x23c>)
 8014ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8014caa:	bf0c      	ite	eq
 8014cac:	2308      	moveq	r3, #8
 8014cae:	230a      	movne	r3, #10
 8014cb0:	2100      	movs	r1, #0
 8014cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014cb6:	6865      	ldr	r5, [r4, #4]
 8014cb8:	60a5      	str	r5, [r4, #8]
 8014cba:	2d00      	cmp	r5, #0
 8014cbc:	bfa2      	ittt	ge
 8014cbe:	6821      	ldrge	r1, [r4, #0]
 8014cc0:	f021 0104 	bicge.w	r1, r1, #4
 8014cc4:	6021      	strge	r1, [r4, #0]
 8014cc6:	b90e      	cbnz	r6, 8014ccc <_printf_i+0x114>
 8014cc8:	2d00      	cmp	r5, #0
 8014cca:	d04b      	beq.n	8014d64 <_printf_i+0x1ac>
 8014ccc:	4615      	mov	r5, r2
 8014cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8014cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8014cd6:	5dc7      	ldrb	r7, [r0, r7]
 8014cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014cdc:	4637      	mov	r7, r6
 8014cde:	42bb      	cmp	r3, r7
 8014ce0:	460e      	mov	r6, r1
 8014ce2:	d9f4      	bls.n	8014cce <_printf_i+0x116>
 8014ce4:	2b08      	cmp	r3, #8
 8014ce6:	d10b      	bne.n	8014d00 <_printf_i+0x148>
 8014ce8:	6823      	ldr	r3, [r4, #0]
 8014cea:	07de      	lsls	r6, r3, #31
 8014cec:	d508      	bpl.n	8014d00 <_printf_i+0x148>
 8014cee:	6923      	ldr	r3, [r4, #16]
 8014cf0:	6861      	ldr	r1, [r4, #4]
 8014cf2:	4299      	cmp	r1, r3
 8014cf4:	bfde      	ittt	le
 8014cf6:	2330      	movle	r3, #48	; 0x30
 8014cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014cfc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8014d00:	1b52      	subs	r2, r2, r5
 8014d02:	6122      	str	r2, [r4, #16]
 8014d04:	f8cd a000 	str.w	sl, [sp]
 8014d08:	464b      	mov	r3, r9
 8014d0a:	aa03      	add	r2, sp, #12
 8014d0c:	4621      	mov	r1, r4
 8014d0e:	4640      	mov	r0, r8
 8014d10:	f7ff fee4 	bl	8014adc <_printf_common>
 8014d14:	3001      	adds	r0, #1
 8014d16:	d14a      	bne.n	8014dae <_printf_i+0x1f6>
 8014d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014d1c:	b004      	add	sp, #16
 8014d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d22:	6823      	ldr	r3, [r4, #0]
 8014d24:	f043 0320 	orr.w	r3, r3, #32
 8014d28:	6023      	str	r3, [r4, #0]
 8014d2a:	4833      	ldr	r0, [pc, #204]	; (8014df8 <_printf_i+0x240>)
 8014d2c:	2778      	movs	r7, #120	; 0x78
 8014d2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014d32:	6823      	ldr	r3, [r4, #0]
 8014d34:	6829      	ldr	r1, [r5, #0]
 8014d36:	061f      	lsls	r7, r3, #24
 8014d38:	f851 6b04 	ldr.w	r6, [r1], #4
 8014d3c:	d402      	bmi.n	8014d44 <_printf_i+0x18c>
 8014d3e:	065f      	lsls	r7, r3, #25
 8014d40:	bf48      	it	mi
 8014d42:	b2b6      	uxthmi	r6, r6
 8014d44:	07df      	lsls	r7, r3, #31
 8014d46:	bf48      	it	mi
 8014d48:	f043 0320 	orrmi.w	r3, r3, #32
 8014d4c:	6029      	str	r1, [r5, #0]
 8014d4e:	bf48      	it	mi
 8014d50:	6023      	strmi	r3, [r4, #0]
 8014d52:	b91e      	cbnz	r6, 8014d5c <_printf_i+0x1a4>
 8014d54:	6823      	ldr	r3, [r4, #0]
 8014d56:	f023 0320 	bic.w	r3, r3, #32
 8014d5a:	6023      	str	r3, [r4, #0]
 8014d5c:	2310      	movs	r3, #16
 8014d5e:	e7a7      	b.n	8014cb0 <_printf_i+0xf8>
 8014d60:	4824      	ldr	r0, [pc, #144]	; (8014df4 <_printf_i+0x23c>)
 8014d62:	e7e4      	b.n	8014d2e <_printf_i+0x176>
 8014d64:	4615      	mov	r5, r2
 8014d66:	e7bd      	b.n	8014ce4 <_printf_i+0x12c>
 8014d68:	682b      	ldr	r3, [r5, #0]
 8014d6a:	6826      	ldr	r6, [r4, #0]
 8014d6c:	6961      	ldr	r1, [r4, #20]
 8014d6e:	1d18      	adds	r0, r3, #4
 8014d70:	6028      	str	r0, [r5, #0]
 8014d72:	0635      	lsls	r5, r6, #24
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	d501      	bpl.n	8014d7c <_printf_i+0x1c4>
 8014d78:	6019      	str	r1, [r3, #0]
 8014d7a:	e002      	b.n	8014d82 <_printf_i+0x1ca>
 8014d7c:	0670      	lsls	r0, r6, #25
 8014d7e:	d5fb      	bpl.n	8014d78 <_printf_i+0x1c0>
 8014d80:	8019      	strh	r1, [r3, #0]
 8014d82:	2300      	movs	r3, #0
 8014d84:	6123      	str	r3, [r4, #16]
 8014d86:	4615      	mov	r5, r2
 8014d88:	e7bc      	b.n	8014d04 <_printf_i+0x14c>
 8014d8a:	682b      	ldr	r3, [r5, #0]
 8014d8c:	1d1a      	adds	r2, r3, #4
 8014d8e:	602a      	str	r2, [r5, #0]
 8014d90:	681d      	ldr	r5, [r3, #0]
 8014d92:	6862      	ldr	r2, [r4, #4]
 8014d94:	2100      	movs	r1, #0
 8014d96:	4628      	mov	r0, r5
 8014d98:	f7eb faa2 	bl	80002e0 <memchr>
 8014d9c:	b108      	cbz	r0, 8014da2 <_printf_i+0x1ea>
 8014d9e:	1b40      	subs	r0, r0, r5
 8014da0:	6060      	str	r0, [r4, #4]
 8014da2:	6863      	ldr	r3, [r4, #4]
 8014da4:	6123      	str	r3, [r4, #16]
 8014da6:	2300      	movs	r3, #0
 8014da8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014dac:	e7aa      	b.n	8014d04 <_printf_i+0x14c>
 8014dae:	6923      	ldr	r3, [r4, #16]
 8014db0:	462a      	mov	r2, r5
 8014db2:	4649      	mov	r1, r9
 8014db4:	4640      	mov	r0, r8
 8014db6:	47d0      	blx	sl
 8014db8:	3001      	adds	r0, #1
 8014dba:	d0ad      	beq.n	8014d18 <_printf_i+0x160>
 8014dbc:	6823      	ldr	r3, [r4, #0]
 8014dbe:	079b      	lsls	r3, r3, #30
 8014dc0:	d413      	bmi.n	8014dea <_printf_i+0x232>
 8014dc2:	68e0      	ldr	r0, [r4, #12]
 8014dc4:	9b03      	ldr	r3, [sp, #12]
 8014dc6:	4298      	cmp	r0, r3
 8014dc8:	bfb8      	it	lt
 8014dca:	4618      	movlt	r0, r3
 8014dcc:	e7a6      	b.n	8014d1c <_printf_i+0x164>
 8014dce:	2301      	movs	r3, #1
 8014dd0:	4632      	mov	r2, r6
 8014dd2:	4649      	mov	r1, r9
 8014dd4:	4640      	mov	r0, r8
 8014dd6:	47d0      	blx	sl
 8014dd8:	3001      	adds	r0, #1
 8014dda:	d09d      	beq.n	8014d18 <_printf_i+0x160>
 8014ddc:	3501      	adds	r5, #1
 8014dde:	68e3      	ldr	r3, [r4, #12]
 8014de0:	9903      	ldr	r1, [sp, #12]
 8014de2:	1a5b      	subs	r3, r3, r1
 8014de4:	42ab      	cmp	r3, r5
 8014de6:	dcf2      	bgt.n	8014dce <_printf_i+0x216>
 8014de8:	e7eb      	b.n	8014dc2 <_printf_i+0x20a>
 8014dea:	2500      	movs	r5, #0
 8014dec:	f104 0619 	add.w	r6, r4, #25
 8014df0:	e7f5      	b.n	8014dde <_printf_i+0x226>
 8014df2:	bf00      	nop
 8014df4:	08017182 	.word	0x08017182
 8014df8:	08017193 	.word	0x08017193

08014dfc <std>:
 8014dfc:	2300      	movs	r3, #0
 8014dfe:	b510      	push	{r4, lr}
 8014e00:	4604      	mov	r4, r0
 8014e02:	e9c0 3300 	strd	r3, r3, [r0]
 8014e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e0a:	6083      	str	r3, [r0, #8]
 8014e0c:	8181      	strh	r1, [r0, #12]
 8014e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8014e10:	81c2      	strh	r2, [r0, #14]
 8014e12:	6183      	str	r3, [r0, #24]
 8014e14:	4619      	mov	r1, r3
 8014e16:	2208      	movs	r2, #8
 8014e18:	305c      	adds	r0, #92	; 0x5c
 8014e1a:	f000 f9f7 	bl	801520c <memset>
 8014e1e:	4b0d      	ldr	r3, [pc, #52]	; (8014e54 <std+0x58>)
 8014e20:	6263      	str	r3, [r4, #36]	; 0x24
 8014e22:	4b0d      	ldr	r3, [pc, #52]	; (8014e58 <std+0x5c>)
 8014e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e26:	4b0d      	ldr	r3, [pc, #52]	; (8014e5c <std+0x60>)
 8014e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e2a:	4b0d      	ldr	r3, [pc, #52]	; (8014e60 <std+0x64>)
 8014e2c:	6323      	str	r3, [r4, #48]	; 0x30
 8014e2e:	4b0d      	ldr	r3, [pc, #52]	; (8014e64 <std+0x68>)
 8014e30:	6224      	str	r4, [r4, #32]
 8014e32:	429c      	cmp	r4, r3
 8014e34:	d006      	beq.n	8014e44 <std+0x48>
 8014e36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8014e3a:	4294      	cmp	r4, r2
 8014e3c:	d002      	beq.n	8014e44 <std+0x48>
 8014e3e:	33d0      	adds	r3, #208	; 0xd0
 8014e40:	429c      	cmp	r4, r3
 8014e42:	d105      	bne.n	8014e50 <std+0x54>
 8014e44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e4c:	f000 baae 	b.w	80153ac <__retarget_lock_init_recursive>
 8014e50:	bd10      	pop	{r4, pc}
 8014e52:	bf00      	nop
 8014e54:	0801505d 	.word	0x0801505d
 8014e58:	0801507f 	.word	0x0801507f
 8014e5c:	080150b7 	.word	0x080150b7
 8014e60:	080150db 	.word	0x080150db
 8014e64:	240045a8 	.word	0x240045a8

08014e68 <stdio_exit_handler>:
 8014e68:	4a02      	ldr	r2, [pc, #8]	; (8014e74 <stdio_exit_handler+0xc>)
 8014e6a:	4903      	ldr	r1, [pc, #12]	; (8014e78 <stdio_exit_handler+0x10>)
 8014e6c:	4803      	ldr	r0, [pc, #12]	; (8014e7c <stdio_exit_handler+0x14>)
 8014e6e:	f000 b869 	b.w	8014f44 <_fwalk_sglue>
 8014e72:	bf00      	nop
 8014e74:	24000080 	.word	0x24000080
 8014e78:	08016aed 	.word	0x08016aed
 8014e7c:	2400008c 	.word	0x2400008c

08014e80 <cleanup_stdio>:
 8014e80:	6841      	ldr	r1, [r0, #4]
 8014e82:	4b0c      	ldr	r3, [pc, #48]	; (8014eb4 <cleanup_stdio+0x34>)
 8014e84:	4299      	cmp	r1, r3
 8014e86:	b510      	push	{r4, lr}
 8014e88:	4604      	mov	r4, r0
 8014e8a:	d001      	beq.n	8014e90 <cleanup_stdio+0x10>
 8014e8c:	f001 fe2e 	bl	8016aec <_fflush_r>
 8014e90:	68a1      	ldr	r1, [r4, #8]
 8014e92:	4b09      	ldr	r3, [pc, #36]	; (8014eb8 <cleanup_stdio+0x38>)
 8014e94:	4299      	cmp	r1, r3
 8014e96:	d002      	beq.n	8014e9e <cleanup_stdio+0x1e>
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f001 fe27 	bl	8016aec <_fflush_r>
 8014e9e:	68e1      	ldr	r1, [r4, #12]
 8014ea0:	4b06      	ldr	r3, [pc, #24]	; (8014ebc <cleanup_stdio+0x3c>)
 8014ea2:	4299      	cmp	r1, r3
 8014ea4:	d004      	beq.n	8014eb0 <cleanup_stdio+0x30>
 8014ea6:	4620      	mov	r0, r4
 8014ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eac:	f001 be1e 	b.w	8016aec <_fflush_r>
 8014eb0:	bd10      	pop	{r4, pc}
 8014eb2:	bf00      	nop
 8014eb4:	240045a8 	.word	0x240045a8
 8014eb8:	24004610 	.word	0x24004610
 8014ebc:	24004678 	.word	0x24004678

08014ec0 <global_stdio_init.part.0>:
 8014ec0:	b510      	push	{r4, lr}
 8014ec2:	4b0b      	ldr	r3, [pc, #44]	; (8014ef0 <global_stdio_init.part.0+0x30>)
 8014ec4:	4c0b      	ldr	r4, [pc, #44]	; (8014ef4 <global_stdio_init.part.0+0x34>)
 8014ec6:	4a0c      	ldr	r2, [pc, #48]	; (8014ef8 <global_stdio_init.part.0+0x38>)
 8014ec8:	601a      	str	r2, [r3, #0]
 8014eca:	4620      	mov	r0, r4
 8014ecc:	2200      	movs	r2, #0
 8014ece:	2104      	movs	r1, #4
 8014ed0:	f7ff ff94 	bl	8014dfc <std>
 8014ed4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014ed8:	2201      	movs	r2, #1
 8014eda:	2109      	movs	r1, #9
 8014edc:	f7ff ff8e 	bl	8014dfc <std>
 8014ee0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014ee4:	2202      	movs	r2, #2
 8014ee6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014eea:	2112      	movs	r1, #18
 8014eec:	f7ff bf86 	b.w	8014dfc <std>
 8014ef0:	240046e0 	.word	0x240046e0
 8014ef4:	240045a8 	.word	0x240045a8
 8014ef8:	08014e69 	.word	0x08014e69

08014efc <__sfp_lock_acquire>:
 8014efc:	4801      	ldr	r0, [pc, #4]	; (8014f04 <__sfp_lock_acquire+0x8>)
 8014efe:	f000 ba56 	b.w	80153ae <__retarget_lock_acquire_recursive>
 8014f02:	bf00      	nop
 8014f04:	240046e9 	.word	0x240046e9

08014f08 <__sfp_lock_release>:
 8014f08:	4801      	ldr	r0, [pc, #4]	; (8014f10 <__sfp_lock_release+0x8>)
 8014f0a:	f000 ba51 	b.w	80153b0 <__retarget_lock_release_recursive>
 8014f0e:	bf00      	nop
 8014f10:	240046e9 	.word	0x240046e9

08014f14 <__sinit>:
 8014f14:	b510      	push	{r4, lr}
 8014f16:	4604      	mov	r4, r0
 8014f18:	f7ff fff0 	bl	8014efc <__sfp_lock_acquire>
 8014f1c:	6a23      	ldr	r3, [r4, #32]
 8014f1e:	b11b      	cbz	r3, 8014f28 <__sinit+0x14>
 8014f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f24:	f7ff bff0 	b.w	8014f08 <__sfp_lock_release>
 8014f28:	4b04      	ldr	r3, [pc, #16]	; (8014f3c <__sinit+0x28>)
 8014f2a:	6223      	str	r3, [r4, #32]
 8014f2c:	4b04      	ldr	r3, [pc, #16]	; (8014f40 <__sinit+0x2c>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d1f5      	bne.n	8014f20 <__sinit+0xc>
 8014f34:	f7ff ffc4 	bl	8014ec0 <global_stdio_init.part.0>
 8014f38:	e7f2      	b.n	8014f20 <__sinit+0xc>
 8014f3a:	bf00      	nop
 8014f3c:	08014e81 	.word	0x08014e81
 8014f40:	240046e0 	.word	0x240046e0

08014f44 <_fwalk_sglue>:
 8014f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014f48:	4607      	mov	r7, r0
 8014f4a:	4688      	mov	r8, r1
 8014f4c:	4614      	mov	r4, r2
 8014f4e:	2600      	movs	r6, #0
 8014f50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014f54:	f1b9 0901 	subs.w	r9, r9, #1
 8014f58:	d505      	bpl.n	8014f66 <_fwalk_sglue+0x22>
 8014f5a:	6824      	ldr	r4, [r4, #0]
 8014f5c:	2c00      	cmp	r4, #0
 8014f5e:	d1f7      	bne.n	8014f50 <_fwalk_sglue+0xc>
 8014f60:	4630      	mov	r0, r6
 8014f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f66:	89ab      	ldrh	r3, [r5, #12]
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	d907      	bls.n	8014f7c <_fwalk_sglue+0x38>
 8014f6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014f70:	3301      	adds	r3, #1
 8014f72:	d003      	beq.n	8014f7c <_fwalk_sglue+0x38>
 8014f74:	4629      	mov	r1, r5
 8014f76:	4638      	mov	r0, r7
 8014f78:	47c0      	blx	r8
 8014f7a:	4306      	orrs	r6, r0
 8014f7c:	3568      	adds	r5, #104	; 0x68
 8014f7e:	e7e9      	b.n	8014f54 <_fwalk_sglue+0x10>

08014f80 <iprintf>:
 8014f80:	b40f      	push	{r0, r1, r2, r3}
 8014f82:	b507      	push	{r0, r1, r2, lr}
 8014f84:	4906      	ldr	r1, [pc, #24]	; (8014fa0 <iprintf+0x20>)
 8014f86:	ab04      	add	r3, sp, #16
 8014f88:	6808      	ldr	r0, [r1, #0]
 8014f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f8e:	6881      	ldr	r1, [r0, #8]
 8014f90:	9301      	str	r3, [sp, #4]
 8014f92:	f001 fc0b 	bl	80167ac <_vfiprintf_r>
 8014f96:	b003      	add	sp, #12
 8014f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f9c:	b004      	add	sp, #16
 8014f9e:	4770      	bx	lr
 8014fa0:	240000d8 	.word	0x240000d8

08014fa4 <_puts_r>:
 8014fa4:	6a03      	ldr	r3, [r0, #32]
 8014fa6:	b570      	push	{r4, r5, r6, lr}
 8014fa8:	6884      	ldr	r4, [r0, #8]
 8014faa:	4605      	mov	r5, r0
 8014fac:	460e      	mov	r6, r1
 8014fae:	b90b      	cbnz	r3, 8014fb4 <_puts_r+0x10>
 8014fb0:	f7ff ffb0 	bl	8014f14 <__sinit>
 8014fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014fb6:	07db      	lsls	r3, r3, #31
 8014fb8:	d405      	bmi.n	8014fc6 <_puts_r+0x22>
 8014fba:	89a3      	ldrh	r3, [r4, #12]
 8014fbc:	0598      	lsls	r0, r3, #22
 8014fbe:	d402      	bmi.n	8014fc6 <_puts_r+0x22>
 8014fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014fc2:	f000 f9f4 	bl	80153ae <__retarget_lock_acquire_recursive>
 8014fc6:	89a3      	ldrh	r3, [r4, #12]
 8014fc8:	0719      	lsls	r1, r3, #28
 8014fca:	d513      	bpl.n	8014ff4 <_puts_r+0x50>
 8014fcc:	6923      	ldr	r3, [r4, #16]
 8014fce:	b18b      	cbz	r3, 8014ff4 <_puts_r+0x50>
 8014fd0:	3e01      	subs	r6, #1
 8014fd2:	68a3      	ldr	r3, [r4, #8]
 8014fd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014fd8:	3b01      	subs	r3, #1
 8014fda:	60a3      	str	r3, [r4, #8]
 8014fdc:	b9e9      	cbnz	r1, 801501a <_puts_r+0x76>
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	da2e      	bge.n	8015040 <_puts_r+0x9c>
 8014fe2:	4622      	mov	r2, r4
 8014fe4:	210a      	movs	r1, #10
 8014fe6:	4628      	mov	r0, r5
 8014fe8:	f000 f87b 	bl	80150e2 <__swbuf_r>
 8014fec:	3001      	adds	r0, #1
 8014fee:	d007      	beq.n	8015000 <_puts_r+0x5c>
 8014ff0:	250a      	movs	r5, #10
 8014ff2:	e007      	b.n	8015004 <_puts_r+0x60>
 8014ff4:	4621      	mov	r1, r4
 8014ff6:	4628      	mov	r0, r5
 8014ff8:	f000 f8b0 	bl	801515c <__swsetup_r>
 8014ffc:	2800      	cmp	r0, #0
 8014ffe:	d0e7      	beq.n	8014fd0 <_puts_r+0x2c>
 8015000:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015006:	07da      	lsls	r2, r3, #31
 8015008:	d405      	bmi.n	8015016 <_puts_r+0x72>
 801500a:	89a3      	ldrh	r3, [r4, #12]
 801500c:	059b      	lsls	r3, r3, #22
 801500e:	d402      	bmi.n	8015016 <_puts_r+0x72>
 8015010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015012:	f000 f9cd 	bl	80153b0 <__retarget_lock_release_recursive>
 8015016:	4628      	mov	r0, r5
 8015018:	bd70      	pop	{r4, r5, r6, pc}
 801501a:	2b00      	cmp	r3, #0
 801501c:	da04      	bge.n	8015028 <_puts_r+0x84>
 801501e:	69a2      	ldr	r2, [r4, #24]
 8015020:	429a      	cmp	r2, r3
 8015022:	dc06      	bgt.n	8015032 <_puts_r+0x8e>
 8015024:	290a      	cmp	r1, #10
 8015026:	d004      	beq.n	8015032 <_puts_r+0x8e>
 8015028:	6823      	ldr	r3, [r4, #0]
 801502a:	1c5a      	adds	r2, r3, #1
 801502c:	6022      	str	r2, [r4, #0]
 801502e:	7019      	strb	r1, [r3, #0]
 8015030:	e7cf      	b.n	8014fd2 <_puts_r+0x2e>
 8015032:	4622      	mov	r2, r4
 8015034:	4628      	mov	r0, r5
 8015036:	f000 f854 	bl	80150e2 <__swbuf_r>
 801503a:	3001      	adds	r0, #1
 801503c:	d1c9      	bne.n	8014fd2 <_puts_r+0x2e>
 801503e:	e7df      	b.n	8015000 <_puts_r+0x5c>
 8015040:	6823      	ldr	r3, [r4, #0]
 8015042:	250a      	movs	r5, #10
 8015044:	1c5a      	adds	r2, r3, #1
 8015046:	6022      	str	r2, [r4, #0]
 8015048:	701d      	strb	r5, [r3, #0]
 801504a:	e7db      	b.n	8015004 <_puts_r+0x60>

0801504c <puts>:
 801504c:	4b02      	ldr	r3, [pc, #8]	; (8015058 <puts+0xc>)
 801504e:	4601      	mov	r1, r0
 8015050:	6818      	ldr	r0, [r3, #0]
 8015052:	f7ff bfa7 	b.w	8014fa4 <_puts_r>
 8015056:	bf00      	nop
 8015058:	240000d8 	.word	0x240000d8

0801505c <__sread>:
 801505c:	b510      	push	{r4, lr}
 801505e:	460c      	mov	r4, r1
 8015060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015064:	f000 f930 	bl	80152c8 <_read_r>
 8015068:	2800      	cmp	r0, #0
 801506a:	bfab      	itete	ge
 801506c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801506e:	89a3      	ldrhlt	r3, [r4, #12]
 8015070:	181b      	addge	r3, r3, r0
 8015072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015076:	bfac      	ite	ge
 8015078:	6563      	strge	r3, [r4, #84]	; 0x54
 801507a:	81a3      	strhlt	r3, [r4, #12]
 801507c:	bd10      	pop	{r4, pc}

0801507e <__swrite>:
 801507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015082:	461f      	mov	r7, r3
 8015084:	898b      	ldrh	r3, [r1, #12]
 8015086:	05db      	lsls	r3, r3, #23
 8015088:	4605      	mov	r5, r0
 801508a:	460c      	mov	r4, r1
 801508c:	4616      	mov	r6, r2
 801508e:	d505      	bpl.n	801509c <__swrite+0x1e>
 8015090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015094:	2302      	movs	r3, #2
 8015096:	2200      	movs	r2, #0
 8015098:	f000 f904 	bl	80152a4 <_lseek_r>
 801509c:	89a3      	ldrh	r3, [r4, #12]
 801509e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80150a6:	81a3      	strh	r3, [r4, #12]
 80150a8:	4632      	mov	r2, r6
 80150aa:	463b      	mov	r3, r7
 80150ac:	4628      	mov	r0, r5
 80150ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150b2:	f000 b93f 	b.w	8015334 <_write_r>

080150b6 <__sseek>:
 80150b6:	b510      	push	{r4, lr}
 80150b8:	460c      	mov	r4, r1
 80150ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150be:	f000 f8f1 	bl	80152a4 <_lseek_r>
 80150c2:	1c43      	adds	r3, r0, #1
 80150c4:	89a3      	ldrh	r3, [r4, #12]
 80150c6:	bf15      	itete	ne
 80150c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80150ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80150ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80150d2:	81a3      	strheq	r3, [r4, #12]
 80150d4:	bf18      	it	ne
 80150d6:	81a3      	strhne	r3, [r4, #12]
 80150d8:	bd10      	pop	{r4, pc}

080150da <__sclose>:
 80150da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150de:	f000 b8d1 	b.w	8015284 <_close_r>

080150e2 <__swbuf_r>:
 80150e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150e4:	460e      	mov	r6, r1
 80150e6:	4614      	mov	r4, r2
 80150e8:	4605      	mov	r5, r0
 80150ea:	b118      	cbz	r0, 80150f4 <__swbuf_r+0x12>
 80150ec:	6a03      	ldr	r3, [r0, #32]
 80150ee:	b90b      	cbnz	r3, 80150f4 <__swbuf_r+0x12>
 80150f0:	f7ff ff10 	bl	8014f14 <__sinit>
 80150f4:	69a3      	ldr	r3, [r4, #24]
 80150f6:	60a3      	str	r3, [r4, #8]
 80150f8:	89a3      	ldrh	r3, [r4, #12]
 80150fa:	071a      	lsls	r2, r3, #28
 80150fc:	d525      	bpl.n	801514a <__swbuf_r+0x68>
 80150fe:	6923      	ldr	r3, [r4, #16]
 8015100:	b31b      	cbz	r3, 801514a <__swbuf_r+0x68>
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	6922      	ldr	r2, [r4, #16]
 8015106:	1a98      	subs	r0, r3, r2
 8015108:	6963      	ldr	r3, [r4, #20]
 801510a:	b2f6      	uxtb	r6, r6
 801510c:	4283      	cmp	r3, r0
 801510e:	4637      	mov	r7, r6
 8015110:	dc04      	bgt.n	801511c <__swbuf_r+0x3a>
 8015112:	4621      	mov	r1, r4
 8015114:	4628      	mov	r0, r5
 8015116:	f001 fce9 	bl	8016aec <_fflush_r>
 801511a:	b9e0      	cbnz	r0, 8015156 <__swbuf_r+0x74>
 801511c:	68a3      	ldr	r3, [r4, #8]
 801511e:	3b01      	subs	r3, #1
 8015120:	60a3      	str	r3, [r4, #8]
 8015122:	6823      	ldr	r3, [r4, #0]
 8015124:	1c5a      	adds	r2, r3, #1
 8015126:	6022      	str	r2, [r4, #0]
 8015128:	701e      	strb	r6, [r3, #0]
 801512a:	6962      	ldr	r2, [r4, #20]
 801512c:	1c43      	adds	r3, r0, #1
 801512e:	429a      	cmp	r2, r3
 8015130:	d004      	beq.n	801513c <__swbuf_r+0x5a>
 8015132:	89a3      	ldrh	r3, [r4, #12]
 8015134:	07db      	lsls	r3, r3, #31
 8015136:	d506      	bpl.n	8015146 <__swbuf_r+0x64>
 8015138:	2e0a      	cmp	r6, #10
 801513a:	d104      	bne.n	8015146 <__swbuf_r+0x64>
 801513c:	4621      	mov	r1, r4
 801513e:	4628      	mov	r0, r5
 8015140:	f001 fcd4 	bl	8016aec <_fflush_r>
 8015144:	b938      	cbnz	r0, 8015156 <__swbuf_r+0x74>
 8015146:	4638      	mov	r0, r7
 8015148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801514a:	4621      	mov	r1, r4
 801514c:	4628      	mov	r0, r5
 801514e:	f000 f805 	bl	801515c <__swsetup_r>
 8015152:	2800      	cmp	r0, #0
 8015154:	d0d5      	beq.n	8015102 <__swbuf_r+0x20>
 8015156:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801515a:	e7f4      	b.n	8015146 <__swbuf_r+0x64>

0801515c <__swsetup_r>:
 801515c:	b538      	push	{r3, r4, r5, lr}
 801515e:	4b2a      	ldr	r3, [pc, #168]	; (8015208 <__swsetup_r+0xac>)
 8015160:	4605      	mov	r5, r0
 8015162:	6818      	ldr	r0, [r3, #0]
 8015164:	460c      	mov	r4, r1
 8015166:	b118      	cbz	r0, 8015170 <__swsetup_r+0x14>
 8015168:	6a03      	ldr	r3, [r0, #32]
 801516a:	b90b      	cbnz	r3, 8015170 <__swsetup_r+0x14>
 801516c:	f7ff fed2 	bl	8014f14 <__sinit>
 8015170:	89a3      	ldrh	r3, [r4, #12]
 8015172:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015176:	0718      	lsls	r0, r3, #28
 8015178:	d422      	bmi.n	80151c0 <__swsetup_r+0x64>
 801517a:	06d9      	lsls	r1, r3, #27
 801517c:	d407      	bmi.n	801518e <__swsetup_r+0x32>
 801517e:	2309      	movs	r3, #9
 8015180:	602b      	str	r3, [r5, #0]
 8015182:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015186:	81a3      	strh	r3, [r4, #12]
 8015188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801518c:	e034      	b.n	80151f8 <__swsetup_r+0x9c>
 801518e:	0758      	lsls	r0, r3, #29
 8015190:	d512      	bpl.n	80151b8 <__swsetup_r+0x5c>
 8015192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015194:	b141      	cbz	r1, 80151a8 <__swsetup_r+0x4c>
 8015196:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801519a:	4299      	cmp	r1, r3
 801519c:	d002      	beq.n	80151a4 <__swsetup_r+0x48>
 801519e:	4628      	mov	r0, r5
 80151a0:	f000 ff0a 	bl	8015fb8 <_free_r>
 80151a4:	2300      	movs	r3, #0
 80151a6:	6363      	str	r3, [r4, #52]	; 0x34
 80151a8:	89a3      	ldrh	r3, [r4, #12]
 80151aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80151ae:	81a3      	strh	r3, [r4, #12]
 80151b0:	2300      	movs	r3, #0
 80151b2:	6063      	str	r3, [r4, #4]
 80151b4:	6923      	ldr	r3, [r4, #16]
 80151b6:	6023      	str	r3, [r4, #0]
 80151b8:	89a3      	ldrh	r3, [r4, #12]
 80151ba:	f043 0308 	orr.w	r3, r3, #8
 80151be:	81a3      	strh	r3, [r4, #12]
 80151c0:	6923      	ldr	r3, [r4, #16]
 80151c2:	b94b      	cbnz	r3, 80151d8 <__swsetup_r+0x7c>
 80151c4:	89a3      	ldrh	r3, [r4, #12]
 80151c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80151ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151ce:	d003      	beq.n	80151d8 <__swsetup_r+0x7c>
 80151d0:	4621      	mov	r1, r4
 80151d2:	4628      	mov	r0, r5
 80151d4:	f001 fcd8 	bl	8016b88 <__smakebuf_r>
 80151d8:	89a0      	ldrh	r0, [r4, #12]
 80151da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151de:	f010 0301 	ands.w	r3, r0, #1
 80151e2:	d00a      	beq.n	80151fa <__swsetup_r+0x9e>
 80151e4:	2300      	movs	r3, #0
 80151e6:	60a3      	str	r3, [r4, #8]
 80151e8:	6963      	ldr	r3, [r4, #20]
 80151ea:	425b      	negs	r3, r3
 80151ec:	61a3      	str	r3, [r4, #24]
 80151ee:	6923      	ldr	r3, [r4, #16]
 80151f0:	b943      	cbnz	r3, 8015204 <__swsetup_r+0xa8>
 80151f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80151f6:	d1c4      	bne.n	8015182 <__swsetup_r+0x26>
 80151f8:	bd38      	pop	{r3, r4, r5, pc}
 80151fa:	0781      	lsls	r1, r0, #30
 80151fc:	bf58      	it	pl
 80151fe:	6963      	ldrpl	r3, [r4, #20]
 8015200:	60a3      	str	r3, [r4, #8]
 8015202:	e7f4      	b.n	80151ee <__swsetup_r+0x92>
 8015204:	2000      	movs	r0, #0
 8015206:	e7f7      	b.n	80151f8 <__swsetup_r+0x9c>
 8015208:	240000d8 	.word	0x240000d8

0801520c <memset>:
 801520c:	4402      	add	r2, r0
 801520e:	4603      	mov	r3, r0
 8015210:	4293      	cmp	r3, r2
 8015212:	d100      	bne.n	8015216 <memset+0xa>
 8015214:	4770      	bx	lr
 8015216:	f803 1b01 	strb.w	r1, [r3], #1
 801521a:	e7f9      	b.n	8015210 <memset+0x4>

0801521c <_raise_r>:
 801521c:	291f      	cmp	r1, #31
 801521e:	b538      	push	{r3, r4, r5, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	460d      	mov	r5, r1
 8015224:	d904      	bls.n	8015230 <_raise_r+0x14>
 8015226:	2316      	movs	r3, #22
 8015228:	6003      	str	r3, [r0, #0]
 801522a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801522e:	bd38      	pop	{r3, r4, r5, pc}
 8015230:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015232:	b112      	cbz	r2, 801523a <_raise_r+0x1e>
 8015234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015238:	b94b      	cbnz	r3, 801524e <_raise_r+0x32>
 801523a:	4620      	mov	r0, r4
 801523c:	f000 f868 	bl	8015310 <_getpid_r>
 8015240:	462a      	mov	r2, r5
 8015242:	4601      	mov	r1, r0
 8015244:	4620      	mov	r0, r4
 8015246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801524a:	f000 b84f 	b.w	80152ec <_kill_r>
 801524e:	2b01      	cmp	r3, #1
 8015250:	d00a      	beq.n	8015268 <_raise_r+0x4c>
 8015252:	1c59      	adds	r1, r3, #1
 8015254:	d103      	bne.n	801525e <_raise_r+0x42>
 8015256:	2316      	movs	r3, #22
 8015258:	6003      	str	r3, [r0, #0]
 801525a:	2001      	movs	r0, #1
 801525c:	e7e7      	b.n	801522e <_raise_r+0x12>
 801525e:	2400      	movs	r4, #0
 8015260:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015264:	4628      	mov	r0, r5
 8015266:	4798      	blx	r3
 8015268:	2000      	movs	r0, #0
 801526a:	e7e0      	b.n	801522e <_raise_r+0x12>

0801526c <raise>:
 801526c:	4b02      	ldr	r3, [pc, #8]	; (8015278 <raise+0xc>)
 801526e:	4601      	mov	r1, r0
 8015270:	6818      	ldr	r0, [r3, #0]
 8015272:	f7ff bfd3 	b.w	801521c <_raise_r>
 8015276:	bf00      	nop
 8015278:	240000d8 	.word	0x240000d8

0801527c <_localeconv_r>:
 801527c:	4800      	ldr	r0, [pc, #0]	; (8015280 <_localeconv_r+0x4>)
 801527e:	4770      	bx	lr
 8015280:	240001cc 	.word	0x240001cc

08015284 <_close_r>:
 8015284:	b538      	push	{r3, r4, r5, lr}
 8015286:	4d06      	ldr	r5, [pc, #24]	; (80152a0 <_close_r+0x1c>)
 8015288:	2300      	movs	r3, #0
 801528a:	4604      	mov	r4, r0
 801528c:	4608      	mov	r0, r1
 801528e:	602b      	str	r3, [r5, #0]
 8015290:	f7f1 fc75 	bl	8006b7e <_close>
 8015294:	1c43      	adds	r3, r0, #1
 8015296:	d102      	bne.n	801529e <_close_r+0x1a>
 8015298:	682b      	ldr	r3, [r5, #0]
 801529a:	b103      	cbz	r3, 801529e <_close_r+0x1a>
 801529c:	6023      	str	r3, [r4, #0]
 801529e:	bd38      	pop	{r3, r4, r5, pc}
 80152a0:	240046e4 	.word	0x240046e4

080152a4 <_lseek_r>:
 80152a4:	b538      	push	{r3, r4, r5, lr}
 80152a6:	4d07      	ldr	r5, [pc, #28]	; (80152c4 <_lseek_r+0x20>)
 80152a8:	4604      	mov	r4, r0
 80152aa:	4608      	mov	r0, r1
 80152ac:	4611      	mov	r1, r2
 80152ae:	2200      	movs	r2, #0
 80152b0:	602a      	str	r2, [r5, #0]
 80152b2:	461a      	mov	r2, r3
 80152b4:	f7f1 fc8a 	bl	8006bcc <_lseek>
 80152b8:	1c43      	adds	r3, r0, #1
 80152ba:	d102      	bne.n	80152c2 <_lseek_r+0x1e>
 80152bc:	682b      	ldr	r3, [r5, #0]
 80152be:	b103      	cbz	r3, 80152c2 <_lseek_r+0x1e>
 80152c0:	6023      	str	r3, [r4, #0]
 80152c2:	bd38      	pop	{r3, r4, r5, pc}
 80152c4:	240046e4 	.word	0x240046e4

080152c8 <_read_r>:
 80152c8:	b538      	push	{r3, r4, r5, lr}
 80152ca:	4d07      	ldr	r5, [pc, #28]	; (80152e8 <_read_r+0x20>)
 80152cc:	4604      	mov	r4, r0
 80152ce:	4608      	mov	r0, r1
 80152d0:	4611      	mov	r1, r2
 80152d2:	2200      	movs	r2, #0
 80152d4:	602a      	str	r2, [r5, #0]
 80152d6:	461a      	mov	r2, r3
 80152d8:	f7f1 fc18 	bl	8006b0c <_read>
 80152dc:	1c43      	adds	r3, r0, #1
 80152de:	d102      	bne.n	80152e6 <_read_r+0x1e>
 80152e0:	682b      	ldr	r3, [r5, #0]
 80152e2:	b103      	cbz	r3, 80152e6 <_read_r+0x1e>
 80152e4:	6023      	str	r3, [r4, #0]
 80152e6:	bd38      	pop	{r3, r4, r5, pc}
 80152e8:	240046e4 	.word	0x240046e4

080152ec <_kill_r>:
 80152ec:	b538      	push	{r3, r4, r5, lr}
 80152ee:	4d07      	ldr	r5, [pc, #28]	; (801530c <_kill_r+0x20>)
 80152f0:	2300      	movs	r3, #0
 80152f2:	4604      	mov	r4, r0
 80152f4:	4608      	mov	r0, r1
 80152f6:	4611      	mov	r1, r2
 80152f8:	602b      	str	r3, [r5, #0]
 80152fa:	f7f1 fbed 	bl	8006ad8 <_kill>
 80152fe:	1c43      	adds	r3, r0, #1
 8015300:	d102      	bne.n	8015308 <_kill_r+0x1c>
 8015302:	682b      	ldr	r3, [r5, #0]
 8015304:	b103      	cbz	r3, 8015308 <_kill_r+0x1c>
 8015306:	6023      	str	r3, [r4, #0]
 8015308:	bd38      	pop	{r3, r4, r5, pc}
 801530a:	bf00      	nop
 801530c:	240046e4 	.word	0x240046e4

08015310 <_getpid_r>:
 8015310:	f7f1 bbda 	b.w	8006ac8 <_getpid>

08015314 <_sbrk_r>:
 8015314:	b538      	push	{r3, r4, r5, lr}
 8015316:	4d06      	ldr	r5, [pc, #24]	; (8015330 <_sbrk_r+0x1c>)
 8015318:	2300      	movs	r3, #0
 801531a:	4604      	mov	r4, r0
 801531c:	4608      	mov	r0, r1
 801531e:	602b      	str	r3, [r5, #0]
 8015320:	f7f1 fc62 	bl	8006be8 <_sbrk>
 8015324:	1c43      	adds	r3, r0, #1
 8015326:	d102      	bne.n	801532e <_sbrk_r+0x1a>
 8015328:	682b      	ldr	r3, [r5, #0]
 801532a:	b103      	cbz	r3, 801532e <_sbrk_r+0x1a>
 801532c:	6023      	str	r3, [r4, #0]
 801532e:	bd38      	pop	{r3, r4, r5, pc}
 8015330:	240046e4 	.word	0x240046e4

08015334 <_write_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4d07      	ldr	r5, [pc, #28]	; (8015354 <_write_r+0x20>)
 8015338:	4604      	mov	r4, r0
 801533a:	4608      	mov	r0, r1
 801533c:	4611      	mov	r1, r2
 801533e:	2200      	movs	r2, #0
 8015340:	602a      	str	r2, [r5, #0]
 8015342:	461a      	mov	r2, r3
 8015344:	f7f1 fbff 	bl	8006b46 <_write>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_write_r+0x1e>
 801534c:	682b      	ldr	r3, [r5, #0]
 801534e:	b103      	cbz	r3, 8015352 <_write_r+0x1e>
 8015350:	6023      	str	r3, [r4, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	240046e4 	.word	0x240046e4

08015358 <__errno>:
 8015358:	4b01      	ldr	r3, [pc, #4]	; (8015360 <__errno+0x8>)
 801535a:	6818      	ldr	r0, [r3, #0]
 801535c:	4770      	bx	lr
 801535e:	bf00      	nop
 8015360:	240000d8 	.word	0x240000d8

08015364 <__libc_init_array>:
 8015364:	b570      	push	{r4, r5, r6, lr}
 8015366:	4d0d      	ldr	r5, [pc, #52]	; (801539c <__libc_init_array+0x38>)
 8015368:	4c0d      	ldr	r4, [pc, #52]	; (80153a0 <__libc_init_array+0x3c>)
 801536a:	1b64      	subs	r4, r4, r5
 801536c:	10a4      	asrs	r4, r4, #2
 801536e:	2600      	movs	r6, #0
 8015370:	42a6      	cmp	r6, r4
 8015372:	d109      	bne.n	8015388 <__libc_init_array+0x24>
 8015374:	4d0b      	ldr	r5, [pc, #44]	; (80153a4 <__libc_init_array+0x40>)
 8015376:	4c0c      	ldr	r4, [pc, #48]	; (80153a8 <__libc_init_array+0x44>)
 8015378:	f001 fcca 	bl	8016d10 <_init>
 801537c:	1b64      	subs	r4, r4, r5
 801537e:	10a4      	asrs	r4, r4, #2
 8015380:	2600      	movs	r6, #0
 8015382:	42a6      	cmp	r6, r4
 8015384:	d105      	bne.n	8015392 <__libc_init_array+0x2e>
 8015386:	bd70      	pop	{r4, r5, r6, pc}
 8015388:	f855 3b04 	ldr.w	r3, [r5], #4
 801538c:	4798      	blx	r3
 801538e:	3601      	adds	r6, #1
 8015390:	e7ee      	b.n	8015370 <__libc_init_array+0xc>
 8015392:	f855 3b04 	ldr.w	r3, [r5], #4
 8015396:	4798      	blx	r3
 8015398:	3601      	adds	r6, #1
 801539a:	e7f2      	b.n	8015382 <__libc_init_array+0x1e>
 801539c:	080174ec 	.word	0x080174ec
 80153a0:	080174ec 	.word	0x080174ec
 80153a4:	080174ec 	.word	0x080174ec
 80153a8:	080174f8 	.word	0x080174f8

080153ac <__retarget_lock_init_recursive>:
 80153ac:	4770      	bx	lr

080153ae <__retarget_lock_acquire_recursive>:
 80153ae:	4770      	bx	lr

080153b0 <__retarget_lock_release_recursive>:
 80153b0:	4770      	bx	lr

080153b2 <memcpy>:
 80153b2:	440a      	add	r2, r1
 80153b4:	4291      	cmp	r1, r2
 80153b6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80153ba:	d100      	bne.n	80153be <memcpy+0xc>
 80153bc:	4770      	bx	lr
 80153be:	b510      	push	{r4, lr}
 80153c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80153c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80153c8:	4291      	cmp	r1, r2
 80153ca:	d1f9      	bne.n	80153c0 <memcpy+0xe>
 80153cc:	bd10      	pop	{r4, pc}

080153ce <quorem>:
 80153ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d2:	6903      	ldr	r3, [r0, #16]
 80153d4:	690c      	ldr	r4, [r1, #16]
 80153d6:	42a3      	cmp	r3, r4
 80153d8:	4607      	mov	r7, r0
 80153da:	db7e      	blt.n	80154da <quorem+0x10c>
 80153dc:	3c01      	subs	r4, #1
 80153de:	f101 0814 	add.w	r8, r1, #20
 80153e2:	f100 0514 	add.w	r5, r0, #20
 80153e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80153ea:	9301      	str	r3, [sp, #4]
 80153ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80153f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80153f4:	3301      	adds	r3, #1
 80153f6:	429a      	cmp	r2, r3
 80153f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80153fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015400:	fbb2 f6f3 	udiv	r6, r2, r3
 8015404:	d331      	bcc.n	801546a <quorem+0x9c>
 8015406:	f04f 0e00 	mov.w	lr, #0
 801540a:	4640      	mov	r0, r8
 801540c:	46ac      	mov	ip, r5
 801540e:	46f2      	mov	sl, lr
 8015410:	f850 2b04 	ldr.w	r2, [r0], #4
 8015414:	b293      	uxth	r3, r2
 8015416:	fb06 e303 	mla	r3, r6, r3, lr
 801541a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801541e:	0c1a      	lsrs	r2, r3, #16
 8015420:	b29b      	uxth	r3, r3
 8015422:	ebaa 0303 	sub.w	r3, sl, r3
 8015426:	f8dc a000 	ldr.w	sl, [ip]
 801542a:	fa13 f38a 	uxtah	r3, r3, sl
 801542e:	fb06 220e 	mla	r2, r6, lr, r2
 8015432:	9300      	str	r3, [sp, #0]
 8015434:	9b00      	ldr	r3, [sp, #0]
 8015436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801543a:	b292      	uxth	r2, r2
 801543c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015440:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015444:	f8bd 3000 	ldrh.w	r3, [sp]
 8015448:	4581      	cmp	r9, r0
 801544a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801544e:	f84c 3b04 	str.w	r3, [ip], #4
 8015452:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8015456:	d2db      	bcs.n	8015410 <quorem+0x42>
 8015458:	f855 300b 	ldr.w	r3, [r5, fp]
 801545c:	b92b      	cbnz	r3, 801546a <quorem+0x9c>
 801545e:	9b01      	ldr	r3, [sp, #4]
 8015460:	3b04      	subs	r3, #4
 8015462:	429d      	cmp	r5, r3
 8015464:	461a      	mov	r2, r3
 8015466:	d32c      	bcc.n	80154c2 <quorem+0xf4>
 8015468:	613c      	str	r4, [r7, #16]
 801546a:	4638      	mov	r0, r7
 801546c:	f001 f86c 	bl	8016548 <__mcmp>
 8015470:	2800      	cmp	r0, #0
 8015472:	db22      	blt.n	80154ba <quorem+0xec>
 8015474:	3601      	adds	r6, #1
 8015476:	4629      	mov	r1, r5
 8015478:	2000      	movs	r0, #0
 801547a:	f858 2b04 	ldr.w	r2, [r8], #4
 801547e:	f8d1 c000 	ldr.w	ip, [r1]
 8015482:	b293      	uxth	r3, r2
 8015484:	1ac3      	subs	r3, r0, r3
 8015486:	0c12      	lsrs	r2, r2, #16
 8015488:	fa13 f38c 	uxtah	r3, r3, ip
 801548c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015494:	b29b      	uxth	r3, r3
 8015496:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801549a:	45c1      	cmp	r9, r8
 801549c:	f841 3b04 	str.w	r3, [r1], #4
 80154a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80154a4:	d2e9      	bcs.n	801547a <quorem+0xac>
 80154a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80154aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80154ae:	b922      	cbnz	r2, 80154ba <quorem+0xec>
 80154b0:	3b04      	subs	r3, #4
 80154b2:	429d      	cmp	r5, r3
 80154b4:	461a      	mov	r2, r3
 80154b6:	d30a      	bcc.n	80154ce <quorem+0x100>
 80154b8:	613c      	str	r4, [r7, #16]
 80154ba:	4630      	mov	r0, r6
 80154bc:	b003      	add	sp, #12
 80154be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154c2:	6812      	ldr	r2, [r2, #0]
 80154c4:	3b04      	subs	r3, #4
 80154c6:	2a00      	cmp	r2, #0
 80154c8:	d1ce      	bne.n	8015468 <quorem+0x9a>
 80154ca:	3c01      	subs	r4, #1
 80154cc:	e7c9      	b.n	8015462 <quorem+0x94>
 80154ce:	6812      	ldr	r2, [r2, #0]
 80154d0:	3b04      	subs	r3, #4
 80154d2:	2a00      	cmp	r2, #0
 80154d4:	d1f0      	bne.n	80154b8 <quorem+0xea>
 80154d6:	3c01      	subs	r4, #1
 80154d8:	e7eb      	b.n	80154b2 <quorem+0xe4>
 80154da:	2000      	movs	r0, #0
 80154dc:	e7ee      	b.n	80154bc <quorem+0xee>
	...

080154e0 <_dtoa_r>:
 80154e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e4:	ed2d 8b02 	vpush	{d8}
 80154e8:	69c5      	ldr	r5, [r0, #28]
 80154ea:	b091      	sub	sp, #68	; 0x44
 80154ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80154f0:	ec59 8b10 	vmov	r8, r9, d0
 80154f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80154f6:	9106      	str	r1, [sp, #24]
 80154f8:	4606      	mov	r6, r0
 80154fa:	9208      	str	r2, [sp, #32]
 80154fc:	930c      	str	r3, [sp, #48]	; 0x30
 80154fe:	b975      	cbnz	r5, 801551e <_dtoa_r+0x3e>
 8015500:	2010      	movs	r0, #16
 8015502:	f7fe ff4b 	bl	801439c <malloc>
 8015506:	4602      	mov	r2, r0
 8015508:	61f0      	str	r0, [r6, #28]
 801550a:	b920      	cbnz	r0, 8015516 <_dtoa_r+0x36>
 801550c:	4ba6      	ldr	r3, [pc, #664]	; (80157a8 <_dtoa_r+0x2c8>)
 801550e:	21ef      	movs	r1, #239	; 0xef
 8015510:	48a6      	ldr	r0, [pc, #664]	; (80157ac <_dtoa_r+0x2cc>)
 8015512:	f001 fb97 	bl	8016c44 <__assert_func>
 8015516:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801551a:	6005      	str	r5, [r0, #0]
 801551c:	60c5      	str	r5, [r0, #12]
 801551e:	69f3      	ldr	r3, [r6, #28]
 8015520:	6819      	ldr	r1, [r3, #0]
 8015522:	b151      	cbz	r1, 801553a <_dtoa_r+0x5a>
 8015524:	685a      	ldr	r2, [r3, #4]
 8015526:	604a      	str	r2, [r1, #4]
 8015528:	2301      	movs	r3, #1
 801552a:	4093      	lsls	r3, r2
 801552c:	608b      	str	r3, [r1, #8]
 801552e:	4630      	mov	r0, r6
 8015530:	f000 fdce 	bl	80160d0 <_Bfree>
 8015534:	69f3      	ldr	r3, [r6, #28]
 8015536:	2200      	movs	r2, #0
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	f1b9 0300 	subs.w	r3, r9, #0
 801553e:	bfbb      	ittet	lt
 8015540:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015544:	9303      	strlt	r3, [sp, #12]
 8015546:	2300      	movge	r3, #0
 8015548:	2201      	movlt	r2, #1
 801554a:	bfac      	ite	ge
 801554c:	6023      	strge	r3, [r4, #0]
 801554e:	6022      	strlt	r2, [r4, #0]
 8015550:	4b97      	ldr	r3, [pc, #604]	; (80157b0 <_dtoa_r+0x2d0>)
 8015552:	9c03      	ldr	r4, [sp, #12]
 8015554:	43a3      	bics	r3, r4
 8015556:	d11c      	bne.n	8015592 <_dtoa_r+0xb2>
 8015558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801555a:	f242 730f 	movw	r3, #9999	; 0x270f
 801555e:	6013      	str	r3, [r2, #0]
 8015560:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8015564:	ea53 0308 	orrs.w	r3, r3, r8
 8015568:	f000 84fb 	beq.w	8015f62 <_dtoa_r+0xa82>
 801556c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801556e:	b963      	cbnz	r3, 801558a <_dtoa_r+0xaa>
 8015570:	4b90      	ldr	r3, [pc, #576]	; (80157b4 <_dtoa_r+0x2d4>)
 8015572:	e020      	b.n	80155b6 <_dtoa_r+0xd6>
 8015574:	4b90      	ldr	r3, [pc, #576]	; (80157b8 <_dtoa_r+0x2d8>)
 8015576:	9301      	str	r3, [sp, #4]
 8015578:	3308      	adds	r3, #8
 801557a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801557c:	6013      	str	r3, [r2, #0]
 801557e:	9801      	ldr	r0, [sp, #4]
 8015580:	b011      	add	sp, #68	; 0x44
 8015582:	ecbd 8b02 	vpop	{d8}
 8015586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801558a:	4b8a      	ldr	r3, [pc, #552]	; (80157b4 <_dtoa_r+0x2d4>)
 801558c:	9301      	str	r3, [sp, #4]
 801558e:	3303      	adds	r3, #3
 8015590:	e7f3      	b.n	801557a <_dtoa_r+0x9a>
 8015592:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015596:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801559a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801559e:	d10c      	bne.n	80155ba <_dtoa_r+0xda>
 80155a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80155a2:	2301      	movs	r3, #1
 80155a4:	6013      	str	r3, [r2, #0]
 80155a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	f000 84d7 	beq.w	8015f5c <_dtoa_r+0xa7c>
 80155ae:	4b83      	ldr	r3, [pc, #524]	; (80157bc <_dtoa_r+0x2dc>)
 80155b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80155b2:	6013      	str	r3, [r2, #0]
 80155b4:	3b01      	subs	r3, #1
 80155b6:	9301      	str	r3, [sp, #4]
 80155b8:	e7e1      	b.n	801557e <_dtoa_r+0x9e>
 80155ba:	aa0e      	add	r2, sp, #56	; 0x38
 80155bc:	a90f      	add	r1, sp, #60	; 0x3c
 80155be:	4630      	mov	r0, r6
 80155c0:	eeb0 0b48 	vmov.f64	d0, d8
 80155c4:	f001 f866 	bl	8016694 <__d2b>
 80155c8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80155cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155ce:	4605      	mov	r5, r0
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d046      	beq.n	8015662 <_dtoa_r+0x182>
 80155d4:	eeb0 7b48 	vmov.f64	d7, d8
 80155d8:	ee18 1a90 	vmov	r1, s17
 80155dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80155e0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80155e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80155e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80155ec:	2000      	movs	r0, #0
 80155ee:	ee07 1a90 	vmov	s15, r1
 80155f2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80155f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015790 <_dtoa_r+0x2b0>
 80155fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80155fe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015798 <_dtoa_r+0x2b8>
 8015602:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015606:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80157a0 <_dtoa_r+0x2c0>
 801560a:	ee07 3a90 	vmov	s15, r3
 801560e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015612:	eeb0 7b46 	vmov.f64	d7, d6
 8015616:	eea4 7b05 	vfma.f64	d7, d4, d5
 801561a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801561e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015626:	ee16 ba90 	vmov	fp, s13
 801562a:	9009      	str	r0, [sp, #36]	; 0x24
 801562c:	d508      	bpl.n	8015640 <_dtoa_r+0x160>
 801562e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015632:	eeb4 6b47 	vcmp.f64	d6, d7
 8015636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801563a:	bf18      	it	ne
 801563c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8015640:	f1bb 0f16 	cmp.w	fp, #22
 8015644:	d82b      	bhi.n	801569e <_dtoa_r+0x1be>
 8015646:	495e      	ldr	r1, [pc, #376]	; (80157c0 <_dtoa_r+0x2e0>)
 8015648:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801564c:	ed91 7b00 	vldr	d7, [r1]
 8015650:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015658:	d501      	bpl.n	801565e <_dtoa_r+0x17e>
 801565a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801565e:	2100      	movs	r1, #0
 8015660:	e01e      	b.n	80156a0 <_dtoa_r+0x1c0>
 8015662:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015664:	4413      	add	r3, r2
 8015666:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801566a:	2920      	cmp	r1, #32
 801566c:	bfc1      	itttt	gt
 801566e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8015672:	408c      	lslgt	r4, r1
 8015674:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8015678:	fa28 f101 	lsrgt.w	r1, r8, r1
 801567c:	bfd6      	itet	le
 801567e:	f1c1 0120 	rsble	r1, r1, #32
 8015682:	4321      	orrgt	r1, r4
 8015684:	fa08 f101 	lslle.w	r1, r8, r1
 8015688:	ee07 1a90 	vmov	s15, r1
 801568c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015690:	3b01      	subs	r3, #1
 8015692:	ee17 1a90 	vmov	r1, s15
 8015696:	2001      	movs	r0, #1
 8015698:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801569c:	e7a7      	b.n	80155ee <_dtoa_r+0x10e>
 801569e:	2101      	movs	r1, #1
 80156a0:	1ad2      	subs	r2, r2, r3
 80156a2:	1e53      	subs	r3, r2, #1
 80156a4:	9305      	str	r3, [sp, #20]
 80156a6:	bf45      	ittet	mi
 80156a8:	f1c2 0301 	rsbmi	r3, r2, #1
 80156ac:	9304      	strmi	r3, [sp, #16]
 80156ae:	2300      	movpl	r3, #0
 80156b0:	2300      	movmi	r3, #0
 80156b2:	bf4c      	ite	mi
 80156b4:	9305      	strmi	r3, [sp, #20]
 80156b6:	9304      	strpl	r3, [sp, #16]
 80156b8:	f1bb 0f00 	cmp.w	fp, #0
 80156bc:	910b      	str	r1, [sp, #44]	; 0x2c
 80156be:	db18      	blt.n	80156f2 <_dtoa_r+0x212>
 80156c0:	9b05      	ldr	r3, [sp, #20]
 80156c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80156c6:	445b      	add	r3, fp
 80156c8:	9305      	str	r3, [sp, #20]
 80156ca:	2300      	movs	r3, #0
 80156cc:	9a06      	ldr	r2, [sp, #24]
 80156ce:	2a09      	cmp	r2, #9
 80156d0:	d848      	bhi.n	8015764 <_dtoa_r+0x284>
 80156d2:	2a05      	cmp	r2, #5
 80156d4:	bfc4      	itt	gt
 80156d6:	3a04      	subgt	r2, #4
 80156d8:	9206      	strgt	r2, [sp, #24]
 80156da:	9a06      	ldr	r2, [sp, #24]
 80156dc:	f1a2 0202 	sub.w	r2, r2, #2
 80156e0:	bfcc      	ite	gt
 80156e2:	2400      	movgt	r4, #0
 80156e4:	2401      	movle	r4, #1
 80156e6:	2a03      	cmp	r2, #3
 80156e8:	d847      	bhi.n	801577a <_dtoa_r+0x29a>
 80156ea:	e8df f002 	tbb	[pc, r2]
 80156ee:	2d0b      	.short	0x2d0b
 80156f0:	392b      	.short	0x392b
 80156f2:	9b04      	ldr	r3, [sp, #16]
 80156f4:	2200      	movs	r2, #0
 80156f6:	eba3 030b 	sub.w	r3, r3, fp
 80156fa:	9304      	str	r3, [sp, #16]
 80156fc:	920a      	str	r2, [sp, #40]	; 0x28
 80156fe:	f1cb 0300 	rsb	r3, fp, #0
 8015702:	e7e3      	b.n	80156cc <_dtoa_r+0x1ec>
 8015704:	2200      	movs	r2, #0
 8015706:	9207      	str	r2, [sp, #28]
 8015708:	9a08      	ldr	r2, [sp, #32]
 801570a:	2a00      	cmp	r2, #0
 801570c:	dc38      	bgt.n	8015780 <_dtoa_r+0x2a0>
 801570e:	f04f 0a01 	mov.w	sl, #1
 8015712:	46d1      	mov	r9, sl
 8015714:	4652      	mov	r2, sl
 8015716:	f8cd a020 	str.w	sl, [sp, #32]
 801571a:	69f7      	ldr	r7, [r6, #28]
 801571c:	2100      	movs	r1, #0
 801571e:	2004      	movs	r0, #4
 8015720:	f100 0c14 	add.w	ip, r0, #20
 8015724:	4594      	cmp	ip, r2
 8015726:	d930      	bls.n	801578a <_dtoa_r+0x2aa>
 8015728:	6079      	str	r1, [r7, #4]
 801572a:	4630      	mov	r0, r6
 801572c:	930d      	str	r3, [sp, #52]	; 0x34
 801572e:	f000 fc8f 	bl	8016050 <_Balloc>
 8015732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015734:	9001      	str	r0, [sp, #4]
 8015736:	4602      	mov	r2, r0
 8015738:	2800      	cmp	r0, #0
 801573a:	d145      	bne.n	80157c8 <_dtoa_r+0x2e8>
 801573c:	4b21      	ldr	r3, [pc, #132]	; (80157c4 <_dtoa_r+0x2e4>)
 801573e:	f240 11af 	movw	r1, #431	; 0x1af
 8015742:	e6e5      	b.n	8015510 <_dtoa_r+0x30>
 8015744:	2201      	movs	r2, #1
 8015746:	e7de      	b.n	8015706 <_dtoa_r+0x226>
 8015748:	2200      	movs	r2, #0
 801574a:	9207      	str	r2, [sp, #28]
 801574c:	9a08      	ldr	r2, [sp, #32]
 801574e:	eb0b 0a02 	add.w	sl, fp, r2
 8015752:	f10a 0901 	add.w	r9, sl, #1
 8015756:	464a      	mov	r2, r9
 8015758:	2a01      	cmp	r2, #1
 801575a:	bfb8      	it	lt
 801575c:	2201      	movlt	r2, #1
 801575e:	e7dc      	b.n	801571a <_dtoa_r+0x23a>
 8015760:	2201      	movs	r2, #1
 8015762:	e7f2      	b.n	801574a <_dtoa_r+0x26a>
 8015764:	2401      	movs	r4, #1
 8015766:	2200      	movs	r2, #0
 8015768:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801576c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015770:	2100      	movs	r1, #0
 8015772:	46d1      	mov	r9, sl
 8015774:	2212      	movs	r2, #18
 8015776:	9108      	str	r1, [sp, #32]
 8015778:	e7cf      	b.n	801571a <_dtoa_r+0x23a>
 801577a:	2201      	movs	r2, #1
 801577c:	9207      	str	r2, [sp, #28]
 801577e:	e7f5      	b.n	801576c <_dtoa_r+0x28c>
 8015780:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015784:	46d1      	mov	r9, sl
 8015786:	4652      	mov	r2, sl
 8015788:	e7c7      	b.n	801571a <_dtoa_r+0x23a>
 801578a:	3101      	adds	r1, #1
 801578c:	0040      	lsls	r0, r0, #1
 801578e:	e7c7      	b.n	8015720 <_dtoa_r+0x240>
 8015790:	636f4361 	.word	0x636f4361
 8015794:	3fd287a7 	.word	0x3fd287a7
 8015798:	8b60c8b3 	.word	0x8b60c8b3
 801579c:	3fc68a28 	.word	0x3fc68a28
 80157a0:	509f79fb 	.word	0x509f79fb
 80157a4:	3fd34413 	.word	0x3fd34413
 80157a8:	080171b1 	.word	0x080171b1
 80157ac:	080171c8 	.word	0x080171c8
 80157b0:	7ff00000 	.word	0x7ff00000
 80157b4:	080171ad 	.word	0x080171ad
 80157b8:	080171a4 	.word	0x080171a4
 80157bc:	08017181 	.word	0x08017181
 80157c0:	080172b8 	.word	0x080172b8
 80157c4:	08017220 	.word	0x08017220
 80157c8:	69f2      	ldr	r2, [r6, #28]
 80157ca:	9901      	ldr	r1, [sp, #4]
 80157cc:	6011      	str	r1, [r2, #0]
 80157ce:	f1b9 0f0e 	cmp.w	r9, #14
 80157d2:	d86c      	bhi.n	80158ae <_dtoa_r+0x3ce>
 80157d4:	2c00      	cmp	r4, #0
 80157d6:	d06a      	beq.n	80158ae <_dtoa_r+0x3ce>
 80157d8:	f1bb 0f00 	cmp.w	fp, #0
 80157dc:	f340 80a0 	ble.w	8015920 <_dtoa_r+0x440>
 80157e0:	4ac1      	ldr	r2, [pc, #772]	; (8015ae8 <_dtoa_r+0x608>)
 80157e2:	f00b 010f 	and.w	r1, fp, #15
 80157e6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80157ea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80157ee:	ed92 7b00 	vldr	d7, [r2]
 80157f2:	ea4f 122b 	mov.w	r2, fp, asr #4
 80157f6:	f000 8087 	beq.w	8015908 <_dtoa_r+0x428>
 80157fa:	49bc      	ldr	r1, [pc, #752]	; (8015aec <_dtoa_r+0x60c>)
 80157fc:	ed91 6b08 	vldr	d6, [r1, #32]
 8015800:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015804:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015808:	f002 020f 	and.w	r2, r2, #15
 801580c:	2103      	movs	r1, #3
 801580e:	48b7      	ldr	r0, [pc, #732]	; (8015aec <_dtoa_r+0x60c>)
 8015810:	2a00      	cmp	r2, #0
 8015812:	d17b      	bne.n	801590c <_dtoa_r+0x42c>
 8015814:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015818:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801581c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015820:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015822:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015826:	2a00      	cmp	r2, #0
 8015828:	f000 80a0 	beq.w	801596c <_dtoa_r+0x48c>
 801582c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015830:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015838:	f140 8098 	bpl.w	801596c <_dtoa_r+0x48c>
 801583c:	f1b9 0f00 	cmp.w	r9, #0
 8015840:	f000 8094 	beq.w	801596c <_dtoa_r+0x48c>
 8015844:	f1ba 0f00 	cmp.w	sl, #0
 8015848:	dd2f      	ble.n	80158aa <_dtoa_r+0x3ca>
 801584a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801584e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015852:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015856:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 801585a:	3101      	adds	r1, #1
 801585c:	4654      	mov	r4, sl
 801585e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015862:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015866:	ee07 1a90 	vmov	s15, r1
 801586a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801586e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015872:	ee15 7a90 	vmov	r7, s11
 8015876:	ec51 0b15 	vmov	r0, r1, d5
 801587a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801587e:	2c00      	cmp	r4, #0
 8015880:	d177      	bne.n	8015972 <_dtoa_r+0x492>
 8015882:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015886:	ee36 6b47 	vsub.f64	d6, d6, d7
 801588a:	ec41 0b17 	vmov	d7, r0, r1
 801588e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015896:	f300 826a 	bgt.w	8015d6e <_dtoa_r+0x88e>
 801589a:	eeb1 7b47 	vneg.f64	d7, d7
 801589e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80158a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158a6:	f100 8260 	bmi.w	8015d6a <_dtoa_r+0x88a>
 80158aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80158ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80158b0:	2a00      	cmp	r2, #0
 80158b2:	f2c0 811d 	blt.w	8015af0 <_dtoa_r+0x610>
 80158b6:	f1bb 0f0e 	cmp.w	fp, #14
 80158ba:	f300 8119 	bgt.w	8015af0 <_dtoa_r+0x610>
 80158be:	4b8a      	ldr	r3, [pc, #552]	; (8015ae8 <_dtoa_r+0x608>)
 80158c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80158c4:	ed93 6b00 	vldr	d6, [r3]
 80158c8:	9b08      	ldr	r3, [sp, #32]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	f280 80b7 	bge.w	8015a3e <_dtoa_r+0x55e>
 80158d0:	f1b9 0f00 	cmp.w	r9, #0
 80158d4:	f300 80b3 	bgt.w	8015a3e <_dtoa_r+0x55e>
 80158d8:	f040 8246 	bne.w	8015d68 <_dtoa_r+0x888>
 80158dc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80158e0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80158e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80158e8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80158ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f0:	464c      	mov	r4, r9
 80158f2:	464f      	mov	r7, r9
 80158f4:	f280 821c 	bge.w	8015d30 <_dtoa_r+0x850>
 80158f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80158fc:	2331      	movs	r3, #49	; 0x31
 80158fe:	f808 3b01 	strb.w	r3, [r8], #1
 8015902:	f10b 0b01 	add.w	fp, fp, #1
 8015906:	e218      	b.n	8015d3a <_dtoa_r+0x85a>
 8015908:	2102      	movs	r1, #2
 801590a:	e780      	b.n	801580e <_dtoa_r+0x32e>
 801590c:	07d4      	lsls	r4, r2, #31
 801590e:	d504      	bpl.n	801591a <_dtoa_r+0x43a>
 8015910:	ed90 6b00 	vldr	d6, [r0]
 8015914:	3101      	adds	r1, #1
 8015916:	ee27 7b06 	vmul.f64	d7, d7, d6
 801591a:	1052      	asrs	r2, r2, #1
 801591c:	3008      	adds	r0, #8
 801591e:	e777      	b.n	8015810 <_dtoa_r+0x330>
 8015920:	d022      	beq.n	8015968 <_dtoa_r+0x488>
 8015922:	f1cb 0200 	rsb	r2, fp, #0
 8015926:	4970      	ldr	r1, [pc, #448]	; (8015ae8 <_dtoa_r+0x608>)
 8015928:	f002 000f 	and.w	r0, r2, #15
 801592c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015930:	ed91 7b00 	vldr	d7, [r1]
 8015934:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015938:	ed8d 7b02 	vstr	d7, [sp, #8]
 801593c:	486b      	ldr	r0, [pc, #428]	; (8015aec <_dtoa_r+0x60c>)
 801593e:	1112      	asrs	r2, r2, #4
 8015940:	2400      	movs	r4, #0
 8015942:	2102      	movs	r1, #2
 8015944:	b92a      	cbnz	r2, 8015952 <_dtoa_r+0x472>
 8015946:	2c00      	cmp	r4, #0
 8015948:	f43f af6a 	beq.w	8015820 <_dtoa_r+0x340>
 801594c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015950:	e766      	b.n	8015820 <_dtoa_r+0x340>
 8015952:	07d7      	lsls	r7, r2, #31
 8015954:	d505      	bpl.n	8015962 <_dtoa_r+0x482>
 8015956:	ed90 6b00 	vldr	d6, [r0]
 801595a:	3101      	adds	r1, #1
 801595c:	2401      	movs	r4, #1
 801595e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015962:	1052      	asrs	r2, r2, #1
 8015964:	3008      	adds	r0, #8
 8015966:	e7ed      	b.n	8015944 <_dtoa_r+0x464>
 8015968:	2102      	movs	r1, #2
 801596a:	e759      	b.n	8015820 <_dtoa_r+0x340>
 801596c:	465a      	mov	r2, fp
 801596e:	464c      	mov	r4, r9
 8015970:	e775      	b.n	801585e <_dtoa_r+0x37e>
 8015972:	ec41 0b17 	vmov	d7, r0, r1
 8015976:	495c      	ldr	r1, [pc, #368]	; (8015ae8 <_dtoa_r+0x608>)
 8015978:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801597c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8015980:	9901      	ldr	r1, [sp, #4]
 8015982:	440c      	add	r4, r1
 8015984:	9907      	ldr	r1, [sp, #28]
 8015986:	b351      	cbz	r1, 80159de <_dtoa_r+0x4fe>
 8015988:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801598c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015990:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015994:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015998:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801599c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80159a0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80159a4:	ee14 1a90 	vmov	r1, s9
 80159a8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80159ac:	3130      	adds	r1, #48	; 0x30
 80159ae:	ee36 6b45 	vsub.f64	d6, d6, d5
 80159b2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80159b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ba:	f808 1b01 	strb.w	r1, [r8], #1
 80159be:	d439      	bmi.n	8015a34 <_dtoa_r+0x554>
 80159c0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80159c4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80159c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159cc:	d472      	bmi.n	8015ab4 <_dtoa_r+0x5d4>
 80159ce:	45a0      	cmp	r8, r4
 80159d0:	f43f af6b 	beq.w	80158aa <_dtoa_r+0x3ca>
 80159d4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80159d8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80159dc:	e7e0      	b.n	80159a0 <_dtoa_r+0x4c0>
 80159de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80159e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80159e6:	4620      	mov	r0, r4
 80159e8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80159ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80159f0:	ee14 1a90 	vmov	r1, s9
 80159f4:	3130      	adds	r1, #48	; 0x30
 80159f6:	f808 1b01 	strb.w	r1, [r8], #1
 80159fa:	45a0      	cmp	r8, r4
 80159fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015a00:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015a04:	d118      	bne.n	8015a38 <_dtoa_r+0x558>
 8015a06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015a0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015a0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a16:	dc4d      	bgt.n	8015ab4 <_dtoa_r+0x5d4>
 8015a18:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015a1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a24:	f57f af41 	bpl.w	80158aa <_dtoa_r+0x3ca>
 8015a28:	4680      	mov	r8, r0
 8015a2a:	3801      	subs	r0, #1
 8015a2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015a30:	2b30      	cmp	r3, #48	; 0x30
 8015a32:	d0f9      	beq.n	8015a28 <_dtoa_r+0x548>
 8015a34:	4693      	mov	fp, r2
 8015a36:	e02a      	b.n	8015a8e <_dtoa_r+0x5ae>
 8015a38:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015a3c:	e7d6      	b.n	80159ec <_dtoa_r+0x50c>
 8015a3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015a42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015a46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015a4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015a4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015a52:	ee15 3a10 	vmov	r3, s10
 8015a56:	3330      	adds	r3, #48	; 0x30
 8015a58:	f808 3b01 	strb.w	r3, [r8], #1
 8015a5c:	9b01      	ldr	r3, [sp, #4]
 8015a5e:	eba8 0303 	sub.w	r3, r8, r3
 8015a62:	4599      	cmp	r9, r3
 8015a64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015a68:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015a6c:	d133      	bne.n	8015ad6 <_dtoa_r+0x5f6>
 8015a6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015a72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a7a:	dc1a      	bgt.n	8015ab2 <_dtoa_r+0x5d2>
 8015a7c:	eeb4 7b46 	vcmp.f64	d7, d6
 8015a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a84:	d103      	bne.n	8015a8e <_dtoa_r+0x5ae>
 8015a86:	ee15 3a10 	vmov	r3, s10
 8015a8a:	07d9      	lsls	r1, r3, #31
 8015a8c:	d411      	bmi.n	8015ab2 <_dtoa_r+0x5d2>
 8015a8e:	4629      	mov	r1, r5
 8015a90:	4630      	mov	r0, r6
 8015a92:	f000 fb1d 	bl	80160d0 <_Bfree>
 8015a96:	2300      	movs	r3, #0
 8015a98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a9a:	f888 3000 	strb.w	r3, [r8]
 8015a9e:	f10b 0301 	add.w	r3, fp, #1
 8015aa2:	6013      	str	r3, [r2, #0]
 8015aa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f43f ad69 	beq.w	801557e <_dtoa_r+0x9e>
 8015aac:	f8c3 8000 	str.w	r8, [r3]
 8015ab0:	e565      	b.n	801557e <_dtoa_r+0x9e>
 8015ab2:	465a      	mov	r2, fp
 8015ab4:	4643      	mov	r3, r8
 8015ab6:	4698      	mov	r8, r3
 8015ab8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8015abc:	2939      	cmp	r1, #57	; 0x39
 8015abe:	d106      	bne.n	8015ace <_dtoa_r+0x5ee>
 8015ac0:	9901      	ldr	r1, [sp, #4]
 8015ac2:	4299      	cmp	r1, r3
 8015ac4:	d1f7      	bne.n	8015ab6 <_dtoa_r+0x5d6>
 8015ac6:	9801      	ldr	r0, [sp, #4]
 8015ac8:	2130      	movs	r1, #48	; 0x30
 8015aca:	3201      	adds	r2, #1
 8015acc:	7001      	strb	r1, [r0, #0]
 8015ace:	7819      	ldrb	r1, [r3, #0]
 8015ad0:	3101      	adds	r1, #1
 8015ad2:	7019      	strb	r1, [r3, #0]
 8015ad4:	e7ae      	b.n	8015a34 <_dtoa_r+0x554>
 8015ad6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015ada:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ae2:	d1b2      	bne.n	8015a4a <_dtoa_r+0x56a>
 8015ae4:	e7d3      	b.n	8015a8e <_dtoa_r+0x5ae>
 8015ae6:	bf00      	nop
 8015ae8:	080172b8 	.word	0x080172b8
 8015aec:	08017290 	.word	0x08017290
 8015af0:	9907      	ldr	r1, [sp, #28]
 8015af2:	2900      	cmp	r1, #0
 8015af4:	f000 80d0 	beq.w	8015c98 <_dtoa_r+0x7b8>
 8015af8:	9906      	ldr	r1, [sp, #24]
 8015afa:	2901      	cmp	r1, #1
 8015afc:	f300 80b4 	bgt.w	8015c68 <_dtoa_r+0x788>
 8015b00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b02:	2900      	cmp	r1, #0
 8015b04:	f000 80ac 	beq.w	8015c60 <_dtoa_r+0x780>
 8015b08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015b0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015b10:	461c      	mov	r4, r3
 8015b12:	9309      	str	r3, [sp, #36]	; 0x24
 8015b14:	9b04      	ldr	r3, [sp, #16]
 8015b16:	4413      	add	r3, r2
 8015b18:	9304      	str	r3, [sp, #16]
 8015b1a:	9b05      	ldr	r3, [sp, #20]
 8015b1c:	2101      	movs	r1, #1
 8015b1e:	4413      	add	r3, r2
 8015b20:	4630      	mov	r0, r6
 8015b22:	9305      	str	r3, [sp, #20]
 8015b24:	f000 fb8a 	bl	801623c <__i2b>
 8015b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b2a:	4607      	mov	r7, r0
 8015b2c:	f1b8 0f00 	cmp.w	r8, #0
 8015b30:	d00d      	beq.n	8015b4e <_dtoa_r+0x66e>
 8015b32:	9a05      	ldr	r2, [sp, #20]
 8015b34:	2a00      	cmp	r2, #0
 8015b36:	dd0a      	ble.n	8015b4e <_dtoa_r+0x66e>
 8015b38:	4542      	cmp	r2, r8
 8015b3a:	9904      	ldr	r1, [sp, #16]
 8015b3c:	bfa8      	it	ge
 8015b3e:	4642      	movge	r2, r8
 8015b40:	1a89      	subs	r1, r1, r2
 8015b42:	9104      	str	r1, [sp, #16]
 8015b44:	9905      	ldr	r1, [sp, #20]
 8015b46:	eba8 0802 	sub.w	r8, r8, r2
 8015b4a:	1a8a      	subs	r2, r1, r2
 8015b4c:	9205      	str	r2, [sp, #20]
 8015b4e:	b303      	cbz	r3, 8015b92 <_dtoa_r+0x6b2>
 8015b50:	9a07      	ldr	r2, [sp, #28]
 8015b52:	2a00      	cmp	r2, #0
 8015b54:	f000 80a5 	beq.w	8015ca2 <_dtoa_r+0x7c2>
 8015b58:	2c00      	cmp	r4, #0
 8015b5a:	dd13      	ble.n	8015b84 <_dtoa_r+0x6a4>
 8015b5c:	4639      	mov	r1, r7
 8015b5e:	4622      	mov	r2, r4
 8015b60:	4630      	mov	r0, r6
 8015b62:	930d      	str	r3, [sp, #52]	; 0x34
 8015b64:	f000 fc2a 	bl	80163bc <__pow5mult>
 8015b68:	462a      	mov	r2, r5
 8015b6a:	4601      	mov	r1, r0
 8015b6c:	4607      	mov	r7, r0
 8015b6e:	4630      	mov	r0, r6
 8015b70:	f000 fb7a 	bl	8016268 <__multiply>
 8015b74:	4629      	mov	r1, r5
 8015b76:	9009      	str	r0, [sp, #36]	; 0x24
 8015b78:	4630      	mov	r0, r6
 8015b7a:	f000 faa9 	bl	80160d0 <_Bfree>
 8015b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015b82:	4615      	mov	r5, r2
 8015b84:	1b1a      	subs	r2, r3, r4
 8015b86:	d004      	beq.n	8015b92 <_dtoa_r+0x6b2>
 8015b88:	4629      	mov	r1, r5
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	f000 fc16 	bl	80163bc <__pow5mult>
 8015b90:	4605      	mov	r5, r0
 8015b92:	2101      	movs	r1, #1
 8015b94:	4630      	mov	r0, r6
 8015b96:	f000 fb51 	bl	801623c <__i2b>
 8015b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	4604      	mov	r4, r0
 8015ba0:	f340 8081 	ble.w	8015ca6 <_dtoa_r+0x7c6>
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	4601      	mov	r1, r0
 8015ba8:	4630      	mov	r0, r6
 8015baa:	f000 fc07 	bl	80163bc <__pow5mult>
 8015bae:	9b06      	ldr	r3, [sp, #24]
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	4604      	mov	r4, r0
 8015bb4:	dd7a      	ble.n	8015cac <_dtoa_r+0x7cc>
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8015bba:	6922      	ldr	r2, [r4, #16]
 8015bbc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015bc0:	6910      	ldr	r0, [r2, #16]
 8015bc2:	f000 faed 	bl	80161a0 <__hi0bits>
 8015bc6:	f1c0 0020 	rsb	r0, r0, #32
 8015bca:	9b05      	ldr	r3, [sp, #20]
 8015bcc:	4418      	add	r0, r3
 8015bce:	f010 001f 	ands.w	r0, r0, #31
 8015bd2:	f000 8093 	beq.w	8015cfc <_dtoa_r+0x81c>
 8015bd6:	f1c0 0220 	rsb	r2, r0, #32
 8015bda:	2a04      	cmp	r2, #4
 8015bdc:	f340 8085 	ble.w	8015cea <_dtoa_r+0x80a>
 8015be0:	9b04      	ldr	r3, [sp, #16]
 8015be2:	f1c0 001c 	rsb	r0, r0, #28
 8015be6:	4403      	add	r3, r0
 8015be8:	9304      	str	r3, [sp, #16]
 8015bea:	9b05      	ldr	r3, [sp, #20]
 8015bec:	4480      	add	r8, r0
 8015bee:	4403      	add	r3, r0
 8015bf0:	9305      	str	r3, [sp, #20]
 8015bf2:	9b04      	ldr	r3, [sp, #16]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	dd05      	ble.n	8015c04 <_dtoa_r+0x724>
 8015bf8:	4629      	mov	r1, r5
 8015bfa:	461a      	mov	r2, r3
 8015bfc:	4630      	mov	r0, r6
 8015bfe:	f000 fc37 	bl	8016470 <__lshift>
 8015c02:	4605      	mov	r5, r0
 8015c04:	9b05      	ldr	r3, [sp, #20]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	dd05      	ble.n	8015c16 <_dtoa_r+0x736>
 8015c0a:	4621      	mov	r1, r4
 8015c0c:	461a      	mov	r2, r3
 8015c0e:	4630      	mov	r0, r6
 8015c10:	f000 fc2e 	bl	8016470 <__lshift>
 8015c14:	4604      	mov	r4, r0
 8015c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	d071      	beq.n	8015d00 <_dtoa_r+0x820>
 8015c1c:	4621      	mov	r1, r4
 8015c1e:	4628      	mov	r0, r5
 8015c20:	f000 fc92 	bl	8016548 <__mcmp>
 8015c24:	2800      	cmp	r0, #0
 8015c26:	da6b      	bge.n	8015d00 <_dtoa_r+0x820>
 8015c28:	2300      	movs	r3, #0
 8015c2a:	4629      	mov	r1, r5
 8015c2c:	220a      	movs	r2, #10
 8015c2e:	4630      	mov	r0, r6
 8015c30:	f000 fa70 	bl	8016114 <__multadd>
 8015c34:	9b07      	ldr	r3, [sp, #28]
 8015c36:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015c3a:	4605      	mov	r5, r0
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	f000 8197 	beq.w	8015f70 <_dtoa_r+0xa90>
 8015c42:	4639      	mov	r1, r7
 8015c44:	2300      	movs	r3, #0
 8015c46:	220a      	movs	r2, #10
 8015c48:	4630      	mov	r0, r6
 8015c4a:	f000 fa63 	bl	8016114 <__multadd>
 8015c4e:	f1ba 0f00 	cmp.w	sl, #0
 8015c52:	4607      	mov	r7, r0
 8015c54:	f300 8093 	bgt.w	8015d7e <_dtoa_r+0x89e>
 8015c58:	9b06      	ldr	r3, [sp, #24]
 8015c5a:	2b02      	cmp	r3, #2
 8015c5c:	dc57      	bgt.n	8015d0e <_dtoa_r+0x82e>
 8015c5e:	e08e      	b.n	8015d7e <_dtoa_r+0x89e>
 8015c60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015c62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015c66:	e751      	b.n	8015b0c <_dtoa_r+0x62c>
 8015c68:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8015c6c:	42a3      	cmp	r3, r4
 8015c6e:	bfbf      	itttt	lt
 8015c70:	1ae2      	sublt	r2, r4, r3
 8015c72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015c74:	189b      	addlt	r3, r3, r2
 8015c76:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015c78:	bfae      	itee	ge
 8015c7a:	1b1c      	subge	r4, r3, r4
 8015c7c:	4623      	movlt	r3, r4
 8015c7e:	2400      	movlt	r4, #0
 8015c80:	f1b9 0f00 	cmp.w	r9, #0
 8015c84:	bfb5      	itete	lt
 8015c86:	9a04      	ldrlt	r2, [sp, #16]
 8015c88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8015c8c:	eba2 0809 	sublt.w	r8, r2, r9
 8015c90:	464a      	movge	r2, r9
 8015c92:	bfb8      	it	lt
 8015c94:	2200      	movlt	r2, #0
 8015c96:	e73c      	b.n	8015b12 <_dtoa_r+0x632>
 8015c98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015c9c:	9f07      	ldr	r7, [sp, #28]
 8015c9e:	461c      	mov	r4, r3
 8015ca0:	e744      	b.n	8015b2c <_dtoa_r+0x64c>
 8015ca2:	461a      	mov	r2, r3
 8015ca4:	e770      	b.n	8015b88 <_dtoa_r+0x6a8>
 8015ca6:	9b06      	ldr	r3, [sp, #24]
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	dc18      	bgt.n	8015cde <_dtoa_r+0x7fe>
 8015cac:	9b02      	ldr	r3, [sp, #8]
 8015cae:	b9b3      	cbnz	r3, 8015cde <_dtoa_r+0x7fe>
 8015cb0:	9b03      	ldr	r3, [sp, #12]
 8015cb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015cb6:	b9a2      	cbnz	r2, 8015ce2 <_dtoa_r+0x802>
 8015cb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015cbc:	0d12      	lsrs	r2, r2, #20
 8015cbe:	0512      	lsls	r2, r2, #20
 8015cc0:	b18a      	cbz	r2, 8015ce6 <_dtoa_r+0x806>
 8015cc2:	9b04      	ldr	r3, [sp, #16]
 8015cc4:	3301      	adds	r3, #1
 8015cc6:	9304      	str	r3, [sp, #16]
 8015cc8:	9b05      	ldr	r3, [sp, #20]
 8015cca:	3301      	adds	r3, #1
 8015ccc:	9305      	str	r3, [sp, #20]
 8015cce:	2301      	movs	r3, #1
 8015cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8015cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f47f af70 	bne.w	8015bba <_dtoa_r+0x6da>
 8015cda:	2001      	movs	r0, #1
 8015cdc:	e775      	b.n	8015bca <_dtoa_r+0x6ea>
 8015cde:	2300      	movs	r3, #0
 8015ce0:	e7f6      	b.n	8015cd0 <_dtoa_r+0x7f0>
 8015ce2:	9b02      	ldr	r3, [sp, #8]
 8015ce4:	e7f4      	b.n	8015cd0 <_dtoa_r+0x7f0>
 8015ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8015ce8:	e7f3      	b.n	8015cd2 <_dtoa_r+0x7f2>
 8015cea:	d082      	beq.n	8015bf2 <_dtoa_r+0x712>
 8015cec:	9b04      	ldr	r3, [sp, #16]
 8015cee:	321c      	adds	r2, #28
 8015cf0:	4413      	add	r3, r2
 8015cf2:	9304      	str	r3, [sp, #16]
 8015cf4:	9b05      	ldr	r3, [sp, #20]
 8015cf6:	4490      	add	r8, r2
 8015cf8:	4413      	add	r3, r2
 8015cfa:	e779      	b.n	8015bf0 <_dtoa_r+0x710>
 8015cfc:	4602      	mov	r2, r0
 8015cfe:	e7f5      	b.n	8015cec <_dtoa_r+0x80c>
 8015d00:	f1b9 0f00 	cmp.w	r9, #0
 8015d04:	dc36      	bgt.n	8015d74 <_dtoa_r+0x894>
 8015d06:	9b06      	ldr	r3, [sp, #24]
 8015d08:	2b02      	cmp	r3, #2
 8015d0a:	dd33      	ble.n	8015d74 <_dtoa_r+0x894>
 8015d0c:	46ca      	mov	sl, r9
 8015d0e:	f1ba 0f00 	cmp.w	sl, #0
 8015d12:	d10d      	bne.n	8015d30 <_dtoa_r+0x850>
 8015d14:	4621      	mov	r1, r4
 8015d16:	4653      	mov	r3, sl
 8015d18:	2205      	movs	r2, #5
 8015d1a:	4630      	mov	r0, r6
 8015d1c:	f000 f9fa 	bl	8016114 <__multadd>
 8015d20:	4601      	mov	r1, r0
 8015d22:	4604      	mov	r4, r0
 8015d24:	4628      	mov	r0, r5
 8015d26:	f000 fc0f 	bl	8016548 <__mcmp>
 8015d2a:	2800      	cmp	r0, #0
 8015d2c:	f73f ade4 	bgt.w	80158f8 <_dtoa_r+0x418>
 8015d30:	9b08      	ldr	r3, [sp, #32]
 8015d32:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d36:	ea6f 0b03 	mvn.w	fp, r3
 8015d3a:	f04f 0900 	mov.w	r9, #0
 8015d3e:	4621      	mov	r1, r4
 8015d40:	4630      	mov	r0, r6
 8015d42:	f000 f9c5 	bl	80160d0 <_Bfree>
 8015d46:	2f00      	cmp	r7, #0
 8015d48:	f43f aea1 	beq.w	8015a8e <_dtoa_r+0x5ae>
 8015d4c:	f1b9 0f00 	cmp.w	r9, #0
 8015d50:	d005      	beq.n	8015d5e <_dtoa_r+0x87e>
 8015d52:	45b9      	cmp	r9, r7
 8015d54:	d003      	beq.n	8015d5e <_dtoa_r+0x87e>
 8015d56:	4649      	mov	r1, r9
 8015d58:	4630      	mov	r0, r6
 8015d5a:	f000 f9b9 	bl	80160d0 <_Bfree>
 8015d5e:	4639      	mov	r1, r7
 8015d60:	4630      	mov	r0, r6
 8015d62:	f000 f9b5 	bl	80160d0 <_Bfree>
 8015d66:	e692      	b.n	8015a8e <_dtoa_r+0x5ae>
 8015d68:	2400      	movs	r4, #0
 8015d6a:	4627      	mov	r7, r4
 8015d6c:	e7e0      	b.n	8015d30 <_dtoa_r+0x850>
 8015d6e:	4693      	mov	fp, r2
 8015d70:	4627      	mov	r7, r4
 8015d72:	e5c1      	b.n	80158f8 <_dtoa_r+0x418>
 8015d74:	9b07      	ldr	r3, [sp, #28]
 8015d76:	46ca      	mov	sl, r9
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f000 8100 	beq.w	8015f7e <_dtoa_r+0xa9e>
 8015d7e:	f1b8 0f00 	cmp.w	r8, #0
 8015d82:	dd05      	ble.n	8015d90 <_dtoa_r+0x8b0>
 8015d84:	4639      	mov	r1, r7
 8015d86:	4642      	mov	r2, r8
 8015d88:	4630      	mov	r0, r6
 8015d8a:	f000 fb71 	bl	8016470 <__lshift>
 8015d8e:	4607      	mov	r7, r0
 8015d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d05d      	beq.n	8015e52 <_dtoa_r+0x972>
 8015d96:	6879      	ldr	r1, [r7, #4]
 8015d98:	4630      	mov	r0, r6
 8015d9a:	f000 f959 	bl	8016050 <_Balloc>
 8015d9e:	4680      	mov	r8, r0
 8015da0:	b928      	cbnz	r0, 8015dae <_dtoa_r+0x8ce>
 8015da2:	4b82      	ldr	r3, [pc, #520]	; (8015fac <_dtoa_r+0xacc>)
 8015da4:	4602      	mov	r2, r0
 8015da6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8015daa:	f7ff bbb1 	b.w	8015510 <_dtoa_r+0x30>
 8015dae:	693a      	ldr	r2, [r7, #16]
 8015db0:	3202      	adds	r2, #2
 8015db2:	0092      	lsls	r2, r2, #2
 8015db4:	f107 010c 	add.w	r1, r7, #12
 8015db8:	300c      	adds	r0, #12
 8015dba:	f7ff fafa 	bl	80153b2 <memcpy>
 8015dbe:	2201      	movs	r2, #1
 8015dc0:	4641      	mov	r1, r8
 8015dc2:	4630      	mov	r0, r6
 8015dc4:	f000 fb54 	bl	8016470 <__lshift>
 8015dc8:	9b01      	ldr	r3, [sp, #4]
 8015dca:	3301      	adds	r3, #1
 8015dcc:	9304      	str	r3, [sp, #16]
 8015dce:	9b01      	ldr	r3, [sp, #4]
 8015dd0:	4453      	add	r3, sl
 8015dd2:	9308      	str	r3, [sp, #32]
 8015dd4:	9b02      	ldr	r3, [sp, #8]
 8015dd6:	f003 0301 	and.w	r3, r3, #1
 8015dda:	46b9      	mov	r9, r7
 8015ddc:	9307      	str	r3, [sp, #28]
 8015dde:	4607      	mov	r7, r0
 8015de0:	9b04      	ldr	r3, [sp, #16]
 8015de2:	4621      	mov	r1, r4
 8015de4:	3b01      	subs	r3, #1
 8015de6:	4628      	mov	r0, r5
 8015de8:	9302      	str	r3, [sp, #8]
 8015dea:	f7ff faf0 	bl	80153ce <quorem>
 8015dee:	4603      	mov	r3, r0
 8015df0:	3330      	adds	r3, #48	; 0x30
 8015df2:	9005      	str	r0, [sp, #20]
 8015df4:	4649      	mov	r1, r9
 8015df6:	4628      	mov	r0, r5
 8015df8:	9309      	str	r3, [sp, #36]	; 0x24
 8015dfa:	f000 fba5 	bl	8016548 <__mcmp>
 8015dfe:	463a      	mov	r2, r7
 8015e00:	4682      	mov	sl, r0
 8015e02:	4621      	mov	r1, r4
 8015e04:	4630      	mov	r0, r6
 8015e06:	f000 fbbb 	bl	8016580 <__mdiff>
 8015e0a:	68c2      	ldr	r2, [r0, #12]
 8015e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e0e:	4680      	mov	r8, r0
 8015e10:	bb0a      	cbnz	r2, 8015e56 <_dtoa_r+0x976>
 8015e12:	4601      	mov	r1, r0
 8015e14:	4628      	mov	r0, r5
 8015e16:	f000 fb97 	bl	8016548 <__mcmp>
 8015e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e1c:	4602      	mov	r2, r0
 8015e1e:	4641      	mov	r1, r8
 8015e20:	4630      	mov	r0, r6
 8015e22:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015e26:	f000 f953 	bl	80160d0 <_Bfree>
 8015e2a:	9b06      	ldr	r3, [sp, #24]
 8015e2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e2e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015e32:	ea43 0102 	orr.w	r1, r3, r2
 8015e36:	9b07      	ldr	r3, [sp, #28]
 8015e38:	4319      	orrs	r1, r3
 8015e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015e3c:	d10d      	bne.n	8015e5a <_dtoa_r+0x97a>
 8015e3e:	2b39      	cmp	r3, #57	; 0x39
 8015e40:	d029      	beq.n	8015e96 <_dtoa_r+0x9b6>
 8015e42:	f1ba 0f00 	cmp.w	sl, #0
 8015e46:	dd01      	ble.n	8015e4c <_dtoa_r+0x96c>
 8015e48:	9b05      	ldr	r3, [sp, #20]
 8015e4a:	3331      	adds	r3, #49	; 0x31
 8015e4c:	9a02      	ldr	r2, [sp, #8]
 8015e4e:	7013      	strb	r3, [r2, #0]
 8015e50:	e775      	b.n	8015d3e <_dtoa_r+0x85e>
 8015e52:	4638      	mov	r0, r7
 8015e54:	e7b8      	b.n	8015dc8 <_dtoa_r+0x8e8>
 8015e56:	2201      	movs	r2, #1
 8015e58:	e7e1      	b.n	8015e1e <_dtoa_r+0x93e>
 8015e5a:	f1ba 0f00 	cmp.w	sl, #0
 8015e5e:	db06      	blt.n	8015e6e <_dtoa_r+0x98e>
 8015e60:	9906      	ldr	r1, [sp, #24]
 8015e62:	ea41 0a0a 	orr.w	sl, r1, sl
 8015e66:	9907      	ldr	r1, [sp, #28]
 8015e68:	ea5a 0a01 	orrs.w	sl, sl, r1
 8015e6c:	d120      	bne.n	8015eb0 <_dtoa_r+0x9d0>
 8015e6e:	2a00      	cmp	r2, #0
 8015e70:	ddec      	ble.n	8015e4c <_dtoa_r+0x96c>
 8015e72:	4629      	mov	r1, r5
 8015e74:	2201      	movs	r2, #1
 8015e76:	4630      	mov	r0, r6
 8015e78:	9304      	str	r3, [sp, #16]
 8015e7a:	f000 faf9 	bl	8016470 <__lshift>
 8015e7e:	4621      	mov	r1, r4
 8015e80:	4605      	mov	r5, r0
 8015e82:	f000 fb61 	bl	8016548 <__mcmp>
 8015e86:	2800      	cmp	r0, #0
 8015e88:	9b04      	ldr	r3, [sp, #16]
 8015e8a:	dc02      	bgt.n	8015e92 <_dtoa_r+0x9b2>
 8015e8c:	d1de      	bne.n	8015e4c <_dtoa_r+0x96c>
 8015e8e:	07da      	lsls	r2, r3, #31
 8015e90:	d5dc      	bpl.n	8015e4c <_dtoa_r+0x96c>
 8015e92:	2b39      	cmp	r3, #57	; 0x39
 8015e94:	d1d8      	bne.n	8015e48 <_dtoa_r+0x968>
 8015e96:	9a02      	ldr	r2, [sp, #8]
 8015e98:	2339      	movs	r3, #57	; 0x39
 8015e9a:	7013      	strb	r3, [r2, #0]
 8015e9c:	4643      	mov	r3, r8
 8015e9e:	4698      	mov	r8, r3
 8015ea0:	3b01      	subs	r3, #1
 8015ea2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015ea6:	2a39      	cmp	r2, #57	; 0x39
 8015ea8:	d051      	beq.n	8015f4e <_dtoa_r+0xa6e>
 8015eaa:	3201      	adds	r2, #1
 8015eac:	701a      	strb	r2, [r3, #0]
 8015eae:	e746      	b.n	8015d3e <_dtoa_r+0x85e>
 8015eb0:	2a00      	cmp	r2, #0
 8015eb2:	dd03      	ble.n	8015ebc <_dtoa_r+0x9dc>
 8015eb4:	2b39      	cmp	r3, #57	; 0x39
 8015eb6:	d0ee      	beq.n	8015e96 <_dtoa_r+0x9b6>
 8015eb8:	3301      	adds	r3, #1
 8015eba:	e7c7      	b.n	8015e4c <_dtoa_r+0x96c>
 8015ebc:	9a04      	ldr	r2, [sp, #16]
 8015ebe:	9908      	ldr	r1, [sp, #32]
 8015ec0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015ec4:	428a      	cmp	r2, r1
 8015ec6:	d02b      	beq.n	8015f20 <_dtoa_r+0xa40>
 8015ec8:	4629      	mov	r1, r5
 8015eca:	2300      	movs	r3, #0
 8015ecc:	220a      	movs	r2, #10
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f000 f920 	bl	8016114 <__multadd>
 8015ed4:	45b9      	cmp	r9, r7
 8015ed6:	4605      	mov	r5, r0
 8015ed8:	f04f 0300 	mov.w	r3, #0
 8015edc:	f04f 020a 	mov.w	r2, #10
 8015ee0:	4649      	mov	r1, r9
 8015ee2:	4630      	mov	r0, r6
 8015ee4:	d107      	bne.n	8015ef6 <_dtoa_r+0xa16>
 8015ee6:	f000 f915 	bl	8016114 <__multadd>
 8015eea:	4681      	mov	r9, r0
 8015eec:	4607      	mov	r7, r0
 8015eee:	9b04      	ldr	r3, [sp, #16]
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	9304      	str	r3, [sp, #16]
 8015ef4:	e774      	b.n	8015de0 <_dtoa_r+0x900>
 8015ef6:	f000 f90d 	bl	8016114 <__multadd>
 8015efa:	4639      	mov	r1, r7
 8015efc:	4681      	mov	r9, r0
 8015efe:	2300      	movs	r3, #0
 8015f00:	220a      	movs	r2, #10
 8015f02:	4630      	mov	r0, r6
 8015f04:	f000 f906 	bl	8016114 <__multadd>
 8015f08:	4607      	mov	r7, r0
 8015f0a:	e7f0      	b.n	8015eee <_dtoa_r+0xa0e>
 8015f0c:	f1ba 0f00 	cmp.w	sl, #0
 8015f10:	9a01      	ldr	r2, [sp, #4]
 8015f12:	bfcc      	ite	gt
 8015f14:	46d0      	movgt	r8, sl
 8015f16:	f04f 0801 	movle.w	r8, #1
 8015f1a:	4490      	add	r8, r2
 8015f1c:	f04f 0900 	mov.w	r9, #0
 8015f20:	4629      	mov	r1, r5
 8015f22:	2201      	movs	r2, #1
 8015f24:	4630      	mov	r0, r6
 8015f26:	9302      	str	r3, [sp, #8]
 8015f28:	f000 faa2 	bl	8016470 <__lshift>
 8015f2c:	4621      	mov	r1, r4
 8015f2e:	4605      	mov	r5, r0
 8015f30:	f000 fb0a 	bl	8016548 <__mcmp>
 8015f34:	2800      	cmp	r0, #0
 8015f36:	dcb1      	bgt.n	8015e9c <_dtoa_r+0x9bc>
 8015f38:	d102      	bne.n	8015f40 <_dtoa_r+0xa60>
 8015f3a:	9b02      	ldr	r3, [sp, #8]
 8015f3c:	07db      	lsls	r3, r3, #31
 8015f3e:	d4ad      	bmi.n	8015e9c <_dtoa_r+0x9bc>
 8015f40:	4643      	mov	r3, r8
 8015f42:	4698      	mov	r8, r3
 8015f44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015f48:	2a30      	cmp	r2, #48	; 0x30
 8015f4a:	d0fa      	beq.n	8015f42 <_dtoa_r+0xa62>
 8015f4c:	e6f7      	b.n	8015d3e <_dtoa_r+0x85e>
 8015f4e:	9a01      	ldr	r2, [sp, #4]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	d1a4      	bne.n	8015e9e <_dtoa_r+0x9be>
 8015f54:	f10b 0b01 	add.w	fp, fp, #1
 8015f58:	2331      	movs	r3, #49	; 0x31
 8015f5a:	e778      	b.n	8015e4e <_dtoa_r+0x96e>
 8015f5c:	4b14      	ldr	r3, [pc, #80]	; (8015fb0 <_dtoa_r+0xad0>)
 8015f5e:	f7ff bb2a 	b.w	80155b6 <_dtoa_r+0xd6>
 8015f62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	f47f ab05 	bne.w	8015574 <_dtoa_r+0x94>
 8015f6a:	4b12      	ldr	r3, [pc, #72]	; (8015fb4 <_dtoa_r+0xad4>)
 8015f6c:	f7ff bb23 	b.w	80155b6 <_dtoa_r+0xd6>
 8015f70:	f1ba 0f00 	cmp.w	sl, #0
 8015f74:	dc03      	bgt.n	8015f7e <_dtoa_r+0xa9e>
 8015f76:	9b06      	ldr	r3, [sp, #24]
 8015f78:	2b02      	cmp	r3, #2
 8015f7a:	f73f aec8 	bgt.w	8015d0e <_dtoa_r+0x82e>
 8015f7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015f82:	4621      	mov	r1, r4
 8015f84:	4628      	mov	r0, r5
 8015f86:	f7ff fa22 	bl	80153ce <quorem>
 8015f8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015f8e:	f808 3b01 	strb.w	r3, [r8], #1
 8015f92:	9a01      	ldr	r2, [sp, #4]
 8015f94:	eba8 0202 	sub.w	r2, r8, r2
 8015f98:	4592      	cmp	sl, r2
 8015f9a:	ddb7      	ble.n	8015f0c <_dtoa_r+0xa2c>
 8015f9c:	4629      	mov	r1, r5
 8015f9e:	2300      	movs	r3, #0
 8015fa0:	220a      	movs	r2, #10
 8015fa2:	4630      	mov	r0, r6
 8015fa4:	f000 f8b6 	bl	8016114 <__multadd>
 8015fa8:	4605      	mov	r5, r0
 8015faa:	e7ea      	b.n	8015f82 <_dtoa_r+0xaa2>
 8015fac:	08017220 	.word	0x08017220
 8015fb0:	08017180 	.word	0x08017180
 8015fb4:	080171a4 	.word	0x080171a4

08015fb8 <_free_r>:
 8015fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fba:	2900      	cmp	r1, #0
 8015fbc:	d044      	beq.n	8016048 <_free_r+0x90>
 8015fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fc2:	9001      	str	r0, [sp, #4]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8015fca:	bfb8      	it	lt
 8015fcc:	18e4      	addlt	r4, r4, r3
 8015fce:	f7fe fa95 	bl	80144fc <__malloc_lock>
 8015fd2:	4a1e      	ldr	r2, [pc, #120]	; (801604c <_free_r+0x94>)
 8015fd4:	9801      	ldr	r0, [sp, #4]
 8015fd6:	6813      	ldr	r3, [r2, #0]
 8015fd8:	b933      	cbnz	r3, 8015fe8 <_free_r+0x30>
 8015fda:	6063      	str	r3, [r4, #4]
 8015fdc:	6014      	str	r4, [r2, #0]
 8015fde:	b003      	add	sp, #12
 8015fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fe4:	f7fe ba90 	b.w	8014508 <__malloc_unlock>
 8015fe8:	42a3      	cmp	r3, r4
 8015fea:	d908      	bls.n	8015ffe <_free_r+0x46>
 8015fec:	6825      	ldr	r5, [r4, #0]
 8015fee:	1961      	adds	r1, r4, r5
 8015ff0:	428b      	cmp	r3, r1
 8015ff2:	bf01      	itttt	eq
 8015ff4:	6819      	ldreq	r1, [r3, #0]
 8015ff6:	685b      	ldreq	r3, [r3, #4]
 8015ff8:	1949      	addeq	r1, r1, r5
 8015ffa:	6021      	streq	r1, [r4, #0]
 8015ffc:	e7ed      	b.n	8015fda <_free_r+0x22>
 8015ffe:	461a      	mov	r2, r3
 8016000:	685b      	ldr	r3, [r3, #4]
 8016002:	b10b      	cbz	r3, 8016008 <_free_r+0x50>
 8016004:	42a3      	cmp	r3, r4
 8016006:	d9fa      	bls.n	8015ffe <_free_r+0x46>
 8016008:	6811      	ldr	r1, [r2, #0]
 801600a:	1855      	adds	r5, r2, r1
 801600c:	42a5      	cmp	r5, r4
 801600e:	d10b      	bne.n	8016028 <_free_r+0x70>
 8016010:	6824      	ldr	r4, [r4, #0]
 8016012:	4421      	add	r1, r4
 8016014:	1854      	adds	r4, r2, r1
 8016016:	42a3      	cmp	r3, r4
 8016018:	6011      	str	r1, [r2, #0]
 801601a:	d1e0      	bne.n	8015fde <_free_r+0x26>
 801601c:	681c      	ldr	r4, [r3, #0]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	6053      	str	r3, [r2, #4]
 8016022:	440c      	add	r4, r1
 8016024:	6014      	str	r4, [r2, #0]
 8016026:	e7da      	b.n	8015fde <_free_r+0x26>
 8016028:	d902      	bls.n	8016030 <_free_r+0x78>
 801602a:	230c      	movs	r3, #12
 801602c:	6003      	str	r3, [r0, #0]
 801602e:	e7d6      	b.n	8015fde <_free_r+0x26>
 8016030:	6825      	ldr	r5, [r4, #0]
 8016032:	1961      	adds	r1, r4, r5
 8016034:	428b      	cmp	r3, r1
 8016036:	bf04      	itt	eq
 8016038:	6819      	ldreq	r1, [r3, #0]
 801603a:	685b      	ldreq	r3, [r3, #4]
 801603c:	6063      	str	r3, [r4, #4]
 801603e:	bf04      	itt	eq
 8016040:	1949      	addeq	r1, r1, r5
 8016042:	6021      	streq	r1, [r4, #0]
 8016044:	6054      	str	r4, [r2, #4]
 8016046:	e7ca      	b.n	8015fde <_free_r+0x26>
 8016048:	b003      	add	sp, #12
 801604a:	bd30      	pop	{r4, r5, pc}
 801604c:	240045a0 	.word	0x240045a0

08016050 <_Balloc>:
 8016050:	b570      	push	{r4, r5, r6, lr}
 8016052:	69c6      	ldr	r6, [r0, #28]
 8016054:	4604      	mov	r4, r0
 8016056:	460d      	mov	r5, r1
 8016058:	b976      	cbnz	r6, 8016078 <_Balloc+0x28>
 801605a:	2010      	movs	r0, #16
 801605c:	f7fe f99e 	bl	801439c <malloc>
 8016060:	4602      	mov	r2, r0
 8016062:	61e0      	str	r0, [r4, #28]
 8016064:	b920      	cbnz	r0, 8016070 <_Balloc+0x20>
 8016066:	4b18      	ldr	r3, [pc, #96]	; (80160c8 <_Balloc+0x78>)
 8016068:	4818      	ldr	r0, [pc, #96]	; (80160cc <_Balloc+0x7c>)
 801606a:	216b      	movs	r1, #107	; 0x6b
 801606c:	f000 fdea 	bl	8016c44 <__assert_func>
 8016070:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016074:	6006      	str	r6, [r0, #0]
 8016076:	60c6      	str	r6, [r0, #12]
 8016078:	69e6      	ldr	r6, [r4, #28]
 801607a:	68f3      	ldr	r3, [r6, #12]
 801607c:	b183      	cbz	r3, 80160a0 <_Balloc+0x50>
 801607e:	69e3      	ldr	r3, [r4, #28]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016086:	b9b8      	cbnz	r0, 80160b8 <_Balloc+0x68>
 8016088:	2101      	movs	r1, #1
 801608a:	fa01 f605 	lsl.w	r6, r1, r5
 801608e:	1d72      	adds	r2, r6, #5
 8016090:	0092      	lsls	r2, r2, #2
 8016092:	4620      	mov	r0, r4
 8016094:	f000 fdf4 	bl	8016c80 <_calloc_r>
 8016098:	b160      	cbz	r0, 80160b4 <_Balloc+0x64>
 801609a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801609e:	e00e      	b.n	80160be <_Balloc+0x6e>
 80160a0:	2221      	movs	r2, #33	; 0x21
 80160a2:	2104      	movs	r1, #4
 80160a4:	4620      	mov	r0, r4
 80160a6:	f000 fdeb 	bl	8016c80 <_calloc_r>
 80160aa:	69e3      	ldr	r3, [r4, #28]
 80160ac:	60f0      	str	r0, [r6, #12]
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d1e4      	bne.n	801607e <_Balloc+0x2e>
 80160b4:	2000      	movs	r0, #0
 80160b6:	bd70      	pop	{r4, r5, r6, pc}
 80160b8:	6802      	ldr	r2, [r0, #0]
 80160ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80160be:	2300      	movs	r3, #0
 80160c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80160c4:	e7f7      	b.n	80160b6 <_Balloc+0x66>
 80160c6:	bf00      	nop
 80160c8:	080171b1 	.word	0x080171b1
 80160cc:	08017231 	.word	0x08017231

080160d0 <_Bfree>:
 80160d0:	b570      	push	{r4, r5, r6, lr}
 80160d2:	69c6      	ldr	r6, [r0, #28]
 80160d4:	4605      	mov	r5, r0
 80160d6:	460c      	mov	r4, r1
 80160d8:	b976      	cbnz	r6, 80160f8 <_Bfree+0x28>
 80160da:	2010      	movs	r0, #16
 80160dc:	f7fe f95e 	bl	801439c <malloc>
 80160e0:	4602      	mov	r2, r0
 80160e2:	61e8      	str	r0, [r5, #28]
 80160e4:	b920      	cbnz	r0, 80160f0 <_Bfree+0x20>
 80160e6:	4b09      	ldr	r3, [pc, #36]	; (801610c <_Bfree+0x3c>)
 80160e8:	4809      	ldr	r0, [pc, #36]	; (8016110 <_Bfree+0x40>)
 80160ea:	218f      	movs	r1, #143	; 0x8f
 80160ec:	f000 fdaa 	bl	8016c44 <__assert_func>
 80160f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80160f4:	6006      	str	r6, [r0, #0]
 80160f6:	60c6      	str	r6, [r0, #12]
 80160f8:	b13c      	cbz	r4, 801610a <_Bfree+0x3a>
 80160fa:	69eb      	ldr	r3, [r5, #28]
 80160fc:	6862      	ldr	r2, [r4, #4]
 80160fe:	68db      	ldr	r3, [r3, #12]
 8016100:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016104:	6021      	str	r1, [r4, #0]
 8016106:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801610a:	bd70      	pop	{r4, r5, r6, pc}
 801610c:	080171b1 	.word	0x080171b1
 8016110:	08017231 	.word	0x08017231

08016114 <__multadd>:
 8016114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016118:	690d      	ldr	r5, [r1, #16]
 801611a:	4607      	mov	r7, r0
 801611c:	460c      	mov	r4, r1
 801611e:	461e      	mov	r6, r3
 8016120:	f101 0c14 	add.w	ip, r1, #20
 8016124:	2000      	movs	r0, #0
 8016126:	f8dc 3000 	ldr.w	r3, [ip]
 801612a:	b299      	uxth	r1, r3
 801612c:	fb02 6101 	mla	r1, r2, r1, r6
 8016130:	0c1e      	lsrs	r6, r3, #16
 8016132:	0c0b      	lsrs	r3, r1, #16
 8016134:	fb02 3306 	mla	r3, r2, r6, r3
 8016138:	b289      	uxth	r1, r1
 801613a:	3001      	adds	r0, #1
 801613c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8016140:	4285      	cmp	r5, r0
 8016142:	f84c 1b04 	str.w	r1, [ip], #4
 8016146:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801614a:	dcec      	bgt.n	8016126 <__multadd+0x12>
 801614c:	b30e      	cbz	r6, 8016192 <__multadd+0x7e>
 801614e:	68a3      	ldr	r3, [r4, #8]
 8016150:	42ab      	cmp	r3, r5
 8016152:	dc19      	bgt.n	8016188 <__multadd+0x74>
 8016154:	6861      	ldr	r1, [r4, #4]
 8016156:	4638      	mov	r0, r7
 8016158:	3101      	adds	r1, #1
 801615a:	f7ff ff79 	bl	8016050 <_Balloc>
 801615e:	4680      	mov	r8, r0
 8016160:	b928      	cbnz	r0, 801616e <__multadd+0x5a>
 8016162:	4602      	mov	r2, r0
 8016164:	4b0c      	ldr	r3, [pc, #48]	; (8016198 <__multadd+0x84>)
 8016166:	480d      	ldr	r0, [pc, #52]	; (801619c <__multadd+0x88>)
 8016168:	21ba      	movs	r1, #186	; 0xba
 801616a:	f000 fd6b 	bl	8016c44 <__assert_func>
 801616e:	6922      	ldr	r2, [r4, #16]
 8016170:	3202      	adds	r2, #2
 8016172:	f104 010c 	add.w	r1, r4, #12
 8016176:	0092      	lsls	r2, r2, #2
 8016178:	300c      	adds	r0, #12
 801617a:	f7ff f91a 	bl	80153b2 <memcpy>
 801617e:	4621      	mov	r1, r4
 8016180:	4638      	mov	r0, r7
 8016182:	f7ff ffa5 	bl	80160d0 <_Bfree>
 8016186:	4644      	mov	r4, r8
 8016188:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801618c:	3501      	adds	r5, #1
 801618e:	615e      	str	r6, [r3, #20]
 8016190:	6125      	str	r5, [r4, #16]
 8016192:	4620      	mov	r0, r4
 8016194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016198:	08017220 	.word	0x08017220
 801619c:	08017231 	.word	0x08017231

080161a0 <__hi0bits>:
 80161a0:	0c03      	lsrs	r3, r0, #16
 80161a2:	041b      	lsls	r3, r3, #16
 80161a4:	b9d3      	cbnz	r3, 80161dc <__hi0bits+0x3c>
 80161a6:	0400      	lsls	r0, r0, #16
 80161a8:	2310      	movs	r3, #16
 80161aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80161ae:	bf04      	itt	eq
 80161b0:	0200      	lsleq	r0, r0, #8
 80161b2:	3308      	addeq	r3, #8
 80161b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80161b8:	bf04      	itt	eq
 80161ba:	0100      	lsleq	r0, r0, #4
 80161bc:	3304      	addeq	r3, #4
 80161be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80161c2:	bf04      	itt	eq
 80161c4:	0080      	lsleq	r0, r0, #2
 80161c6:	3302      	addeq	r3, #2
 80161c8:	2800      	cmp	r0, #0
 80161ca:	db05      	blt.n	80161d8 <__hi0bits+0x38>
 80161cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80161d0:	f103 0301 	add.w	r3, r3, #1
 80161d4:	bf08      	it	eq
 80161d6:	2320      	moveq	r3, #32
 80161d8:	4618      	mov	r0, r3
 80161da:	4770      	bx	lr
 80161dc:	2300      	movs	r3, #0
 80161de:	e7e4      	b.n	80161aa <__hi0bits+0xa>

080161e0 <__lo0bits>:
 80161e0:	6803      	ldr	r3, [r0, #0]
 80161e2:	f013 0207 	ands.w	r2, r3, #7
 80161e6:	d00c      	beq.n	8016202 <__lo0bits+0x22>
 80161e8:	07d9      	lsls	r1, r3, #31
 80161ea:	d422      	bmi.n	8016232 <__lo0bits+0x52>
 80161ec:	079a      	lsls	r2, r3, #30
 80161ee:	bf49      	itett	mi
 80161f0:	085b      	lsrmi	r3, r3, #1
 80161f2:	089b      	lsrpl	r3, r3, #2
 80161f4:	6003      	strmi	r3, [r0, #0]
 80161f6:	2201      	movmi	r2, #1
 80161f8:	bf5c      	itt	pl
 80161fa:	6003      	strpl	r3, [r0, #0]
 80161fc:	2202      	movpl	r2, #2
 80161fe:	4610      	mov	r0, r2
 8016200:	4770      	bx	lr
 8016202:	b299      	uxth	r1, r3
 8016204:	b909      	cbnz	r1, 801620a <__lo0bits+0x2a>
 8016206:	0c1b      	lsrs	r3, r3, #16
 8016208:	2210      	movs	r2, #16
 801620a:	b2d9      	uxtb	r1, r3
 801620c:	b909      	cbnz	r1, 8016212 <__lo0bits+0x32>
 801620e:	3208      	adds	r2, #8
 8016210:	0a1b      	lsrs	r3, r3, #8
 8016212:	0719      	lsls	r1, r3, #28
 8016214:	bf04      	itt	eq
 8016216:	091b      	lsreq	r3, r3, #4
 8016218:	3204      	addeq	r2, #4
 801621a:	0799      	lsls	r1, r3, #30
 801621c:	bf04      	itt	eq
 801621e:	089b      	lsreq	r3, r3, #2
 8016220:	3202      	addeq	r2, #2
 8016222:	07d9      	lsls	r1, r3, #31
 8016224:	d403      	bmi.n	801622e <__lo0bits+0x4e>
 8016226:	085b      	lsrs	r3, r3, #1
 8016228:	f102 0201 	add.w	r2, r2, #1
 801622c:	d003      	beq.n	8016236 <__lo0bits+0x56>
 801622e:	6003      	str	r3, [r0, #0]
 8016230:	e7e5      	b.n	80161fe <__lo0bits+0x1e>
 8016232:	2200      	movs	r2, #0
 8016234:	e7e3      	b.n	80161fe <__lo0bits+0x1e>
 8016236:	2220      	movs	r2, #32
 8016238:	e7e1      	b.n	80161fe <__lo0bits+0x1e>
	...

0801623c <__i2b>:
 801623c:	b510      	push	{r4, lr}
 801623e:	460c      	mov	r4, r1
 8016240:	2101      	movs	r1, #1
 8016242:	f7ff ff05 	bl	8016050 <_Balloc>
 8016246:	4602      	mov	r2, r0
 8016248:	b928      	cbnz	r0, 8016256 <__i2b+0x1a>
 801624a:	4b05      	ldr	r3, [pc, #20]	; (8016260 <__i2b+0x24>)
 801624c:	4805      	ldr	r0, [pc, #20]	; (8016264 <__i2b+0x28>)
 801624e:	f240 1145 	movw	r1, #325	; 0x145
 8016252:	f000 fcf7 	bl	8016c44 <__assert_func>
 8016256:	2301      	movs	r3, #1
 8016258:	6144      	str	r4, [r0, #20]
 801625a:	6103      	str	r3, [r0, #16]
 801625c:	bd10      	pop	{r4, pc}
 801625e:	bf00      	nop
 8016260:	08017220 	.word	0x08017220
 8016264:	08017231 	.word	0x08017231

08016268 <__multiply>:
 8016268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801626c:	4691      	mov	r9, r2
 801626e:	690a      	ldr	r2, [r1, #16]
 8016270:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016274:	429a      	cmp	r2, r3
 8016276:	bfb8      	it	lt
 8016278:	460b      	movlt	r3, r1
 801627a:	460c      	mov	r4, r1
 801627c:	bfbc      	itt	lt
 801627e:	464c      	movlt	r4, r9
 8016280:	4699      	movlt	r9, r3
 8016282:	6927      	ldr	r7, [r4, #16]
 8016284:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016288:	68a3      	ldr	r3, [r4, #8]
 801628a:	6861      	ldr	r1, [r4, #4]
 801628c:	eb07 060a 	add.w	r6, r7, sl
 8016290:	42b3      	cmp	r3, r6
 8016292:	b085      	sub	sp, #20
 8016294:	bfb8      	it	lt
 8016296:	3101      	addlt	r1, #1
 8016298:	f7ff feda 	bl	8016050 <_Balloc>
 801629c:	b930      	cbnz	r0, 80162ac <__multiply+0x44>
 801629e:	4602      	mov	r2, r0
 80162a0:	4b44      	ldr	r3, [pc, #272]	; (80163b4 <__multiply+0x14c>)
 80162a2:	4845      	ldr	r0, [pc, #276]	; (80163b8 <__multiply+0x150>)
 80162a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80162a8:	f000 fccc 	bl	8016c44 <__assert_func>
 80162ac:	f100 0514 	add.w	r5, r0, #20
 80162b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80162b4:	462b      	mov	r3, r5
 80162b6:	2200      	movs	r2, #0
 80162b8:	4543      	cmp	r3, r8
 80162ba:	d321      	bcc.n	8016300 <__multiply+0x98>
 80162bc:	f104 0314 	add.w	r3, r4, #20
 80162c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80162c4:	f109 0314 	add.w	r3, r9, #20
 80162c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80162cc:	9202      	str	r2, [sp, #8]
 80162ce:	1b3a      	subs	r2, r7, r4
 80162d0:	3a15      	subs	r2, #21
 80162d2:	f022 0203 	bic.w	r2, r2, #3
 80162d6:	3204      	adds	r2, #4
 80162d8:	f104 0115 	add.w	r1, r4, #21
 80162dc:	428f      	cmp	r7, r1
 80162de:	bf38      	it	cc
 80162e0:	2204      	movcc	r2, #4
 80162e2:	9201      	str	r2, [sp, #4]
 80162e4:	9a02      	ldr	r2, [sp, #8]
 80162e6:	9303      	str	r3, [sp, #12]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d80c      	bhi.n	8016306 <__multiply+0x9e>
 80162ec:	2e00      	cmp	r6, #0
 80162ee:	dd03      	ble.n	80162f8 <__multiply+0x90>
 80162f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d05b      	beq.n	80163b0 <__multiply+0x148>
 80162f8:	6106      	str	r6, [r0, #16]
 80162fa:	b005      	add	sp, #20
 80162fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016300:	f843 2b04 	str.w	r2, [r3], #4
 8016304:	e7d8      	b.n	80162b8 <__multiply+0x50>
 8016306:	f8b3 a000 	ldrh.w	sl, [r3]
 801630a:	f1ba 0f00 	cmp.w	sl, #0
 801630e:	d024      	beq.n	801635a <__multiply+0xf2>
 8016310:	f104 0e14 	add.w	lr, r4, #20
 8016314:	46a9      	mov	r9, r5
 8016316:	f04f 0c00 	mov.w	ip, #0
 801631a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801631e:	f8d9 1000 	ldr.w	r1, [r9]
 8016322:	fa1f fb82 	uxth.w	fp, r2
 8016326:	b289      	uxth	r1, r1
 8016328:	fb0a 110b 	mla	r1, sl, fp, r1
 801632c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016330:	f8d9 2000 	ldr.w	r2, [r9]
 8016334:	4461      	add	r1, ip
 8016336:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801633a:	fb0a c20b 	mla	r2, sl, fp, ip
 801633e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016342:	b289      	uxth	r1, r1
 8016344:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016348:	4577      	cmp	r7, lr
 801634a:	f849 1b04 	str.w	r1, [r9], #4
 801634e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016352:	d8e2      	bhi.n	801631a <__multiply+0xb2>
 8016354:	9a01      	ldr	r2, [sp, #4]
 8016356:	f845 c002 	str.w	ip, [r5, r2]
 801635a:	9a03      	ldr	r2, [sp, #12]
 801635c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016360:	3304      	adds	r3, #4
 8016362:	f1b9 0f00 	cmp.w	r9, #0
 8016366:	d021      	beq.n	80163ac <__multiply+0x144>
 8016368:	6829      	ldr	r1, [r5, #0]
 801636a:	f104 0c14 	add.w	ip, r4, #20
 801636e:	46ae      	mov	lr, r5
 8016370:	f04f 0a00 	mov.w	sl, #0
 8016374:	f8bc b000 	ldrh.w	fp, [ip]
 8016378:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801637c:	fb09 220b 	mla	r2, r9, fp, r2
 8016380:	4452      	add	r2, sl
 8016382:	b289      	uxth	r1, r1
 8016384:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016388:	f84e 1b04 	str.w	r1, [lr], #4
 801638c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016390:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016394:	f8be 1000 	ldrh.w	r1, [lr]
 8016398:	fb09 110a 	mla	r1, r9, sl, r1
 801639c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80163a0:	4567      	cmp	r7, ip
 80163a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80163a6:	d8e5      	bhi.n	8016374 <__multiply+0x10c>
 80163a8:	9a01      	ldr	r2, [sp, #4]
 80163aa:	50a9      	str	r1, [r5, r2]
 80163ac:	3504      	adds	r5, #4
 80163ae:	e799      	b.n	80162e4 <__multiply+0x7c>
 80163b0:	3e01      	subs	r6, #1
 80163b2:	e79b      	b.n	80162ec <__multiply+0x84>
 80163b4:	08017220 	.word	0x08017220
 80163b8:	08017231 	.word	0x08017231

080163bc <__pow5mult>:
 80163bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163c0:	4615      	mov	r5, r2
 80163c2:	f012 0203 	ands.w	r2, r2, #3
 80163c6:	4606      	mov	r6, r0
 80163c8:	460f      	mov	r7, r1
 80163ca:	d007      	beq.n	80163dc <__pow5mult+0x20>
 80163cc:	4c25      	ldr	r4, [pc, #148]	; (8016464 <__pow5mult+0xa8>)
 80163ce:	3a01      	subs	r2, #1
 80163d0:	2300      	movs	r3, #0
 80163d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80163d6:	f7ff fe9d 	bl	8016114 <__multadd>
 80163da:	4607      	mov	r7, r0
 80163dc:	10ad      	asrs	r5, r5, #2
 80163de:	d03d      	beq.n	801645c <__pow5mult+0xa0>
 80163e0:	69f4      	ldr	r4, [r6, #28]
 80163e2:	b97c      	cbnz	r4, 8016404 <__pow5mult+0x48>
 80163e4:	2010      	movs	r0, #16
 80163e6:	f7fd ffd9 	bl	801439c <malloc>
 80163ea:	4602      	mov	r2, r0
 80163ec:	61f0      	str	r0, [r6, #28]
 80163ee:	b928      	cbnz	r0, 80163fc <__pow5mult+0x40>
 80163f0:	4b1d      	ldr	r3, [pc, #116]	; (8016468 <__pow5mult+0xac>)
 80163f2:	481e      	ldr	r0, [pc, #120]	; (801646c <__pow5mult+0xb0>)
 80163f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80163f8:	f000 fc24 	bl	8016c44 <__assert_func>
 80163fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016400:	6004      	str	r4, [r0, #0]
 8016402:	60c4      	str	r4, [r0, #12]
 8016404:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801640c:	b94c      	cbnz	r4, 8016422 <__pow5mult+0x66>
 801640e:	f240 2171 	movw	r1, #625	; 0x271
 8016412:	4630      	mov	r0, r6
 8016414:	f7ff ff12 	bl	801623c <__i2b>
 8016418:	2300      	movs	r3, #0
 801641a:	f8c8 0008 	str.w	r0, [r8, #8]
 801641e:	4604      	mov	r4, r0
 8016420:	6003      	str	r3, [r0, #0]
 8016422:	f04f 0900 	mov.w	r9, #0
 8016426:	07eb      	lsls	r3, r5, #31
 8016428:	d50a      	bpl.n	8016440 <__pow5mult+0x84>
 801642a:	4639      	mov	r1, r7
 801642c:	4622      	mov	r2, r4
 801642e:	4630      	mov	r0, r6
 8016430:	f7ff ff1a 	bl	8016268 <__multiply>
 8016434:	4639      	mov	r1, r7
 8016436:	4680      	mov	r8, r0
 8016438:	4630      	mov	r0, r6
 801643a:	f7ff fe49 	bl	80160d0 <_Bfree>
 801643e:	4647      	mov	r7, r8
 8016440:	106d      	asrs	r5, r5, #1
 8016442:	d00b      	beq.n	801645c <__pow5mult+0xa0>
 8016444:	6820      	ldr	r0, [r4, #0]
 8016446:	b938      	cbnz	r0, 8016458 <__pow5mult+0x9c>
 8016448:	4622      	mov	r2, r4
 801644a:	4621      	mov	r1, r4
 801644c:	4630      	mov	r0, r6
 801644e:	f7ff ff0b 	bl	8016268 <__multiply>
 8016452:	6020      	str	r0, [r4, #0]
 8016454:	f8c0 9000 	str.w	r9, [r0]
 8016458:	4604      	mov	r4, r0
 801645a:	e7e4      	b.n	8016426 <__pow5mult+0x6a>
 801645c:	4638      	mov	r0, r7
 801645e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016462:	bf00      	nop
 8016464:	08017380 	.word	0x08017380
 8016468:	080171b1 	.word	0x080171b1
 801646c:	08017231 	.word	0x08017231

08016470 <__lshift>:
 8016470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016474:	460c      	mov	r4, r1
 8016476:	6849      	ldr	r1, [r1, #4]
 8016478:	6923      	ldr	r3, [r4, #16]
 801647a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801647e:	68a3      	ldr	r3, [r4, #8]
 8016480:	4607      	mov	r7, r0
 8016482:	4691      	mov	r9, r2
 8016484:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016488:	f108 0601 	add.w	r6, r8, #1
 801648c:	42b3      	cmp	r3, r6
 801648e:	db0b      	blt.n	80164a8 <__lshift+0x38>
 8016490:	4638      	mov	r0, r7
 8016492:	f7ff fddd 	bl	8016050 <_Balloc>
 8016496:	4605      	mov	r5, r0
 8016498:	b948      	cbnz	r0, 80164ae <__lshift+0x3e>
 801649a:	4602      	mov	r2, r0
 801649c:	4b28      	ldr	r3, [pc, #160]	; (8016540 <__lshift+0xd0>)
 801649e:	4829      	ldr	r0, [pc, #164]	; (8016544 <__lshift+0xd4>)
 80164a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80164a4:	f000 fbce 	bl	8016c44 <__assert_func>
 80164a8:	3101      	adds	r1, #1
 80164aa:	005b      	lsls	r3, r3, #1
 80164ac:	e7ee      	b.n	801648c <__lshift+0x1c>
 80164ae:	2300      	movs	r3, #0
 80164b0:	f100 0114 	add.w	r1, r0, #20
 80164b4:	f100 0210 	add.w	r2, r0, #16
 80164b8:	4618      	mov	r0, r3
 80164ba:	4553      	cmp	r3, sl
 80164bc:	db33      	blt.n	8016526 <__lshift+0xb6>
 80164be:	6920      	ldr	r0, [r4, #16]
 80164c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80164c4:	f104 0314 	add.w	r3, r4, #20
 80164c8:	f019 091f 	ands.w	r9, r9, #31
 80164cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80164d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80164d4:	d02b      	beq.n	801652e <__lshift+0xbe>
 80164d6:	f1c9 0e20 	rsb	lr, r9, #32
 80164da:	468a      	mov	sl, r1
 80164dc:	2200      	movs	r2, #0
 80164de:	6818      	ldr	r0, [r3, #0]
 80164e0:	fa00 f009 	lsl.w	r0, r0, r9
 80164e4:	4310      	orrs	r0, r2
 80164e6:	f84a 0b04 	str.w	r0, [sl], #4
 80164ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80164ee:	459c      	cmp	ip, r3
 80164f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80164f4:	d8f3      	bhi.n	80164de <__lshift+0x6e>
 80164f6:	ebac 0304 	sub.w	r3, ip, r4
 80164fa:	3b15      	subs	r3, #21
 80164fc:	f023 0303 	bic.w	r3, r3, #3
 8016500:	3304      	adds	r3, #4
 8016502:	f104 0015 	add.w	r0, r4, #21
 8016506:	4584      	cmp	ip, r0
 8016508:	bf38      	it	cc
 801650a:	2304      	movcc	r3, #4
 801650c:	50ca      	str	r2, [r1, r3]
 801650e:	b10a      	cbz	r2, 8016514 <__lshift+0xa4>
 8016510:	f108 0602 	add.w	r6, r8, #2
 8016514:	3e01      	subs	r6, #1
 8016516:	4638      	mov	r0, r7
 8016518:	612e      	str	r6, [r5, #16]
 801651a:	4621      	mov	r1, r4
 801651c:	f7ff fdd8 	bl	80160d0 <_Bfree>
 8016520:	4628      	mov	r0, r5
 8016522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016526:	f842 0f04 	str.w	r0, [r2, #4]!
 801652a:	3301      	adds	r3, #1
 801652c:	e7c5      	b.n	80164ba <__lshift+0x4a>
 801652e:	3904      	subs	r1, #4
 8016530:	f853 2b04 	ldr.w	r2, [r3], #4
 8016534:	f841 2f04 	str.w	r2, [r1, #4]!
 8016538:	459c      	cmp	ip, r3
 801653a:	d8f9      	bhi.n	8016530 <__lshift+0xc0>
 801653c:	e7ea      	b.n	8016514 <__lshift+0xa4>
 801653e:	bf00      	nop
 8016540:	08017220 	.word	0x08017220
 8016544:	08017231 	.word	0x08017231

08016548 <__mcmp>:
 8016548:	b530      	push	{r4, r5, lr}
 801654a:	6902      	ldr	r2, [r0, #16]
 801654c:	690c      	ldr	r4, [r1, #16]
 801654e:	1b12      	subs	r2, r2, r4
 8016550:	d10e      	bne.n	8016570 <__mcmp+0x28>
 8016552:	f100 0314 	add.w	r3, r0, #20
 8016556:	3114      	adds	r1, #20
 8016558:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801655c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016560:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016564:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016568:	42a5      	cmp	r5, r4
 801656a:	d003      	beq.n	8016574 <__mcmp+0x2c>
 801656c:	d305      	bcc.n	801657a <__mcmp+0x32>
 801656e:	2201      	movs	r2, #1
 8016570:	4610      	mov	r0, r2
 8016572:	bd30      	pop	{r4, r5, pc}
 8016574:	4283      	cmp	r3, r0
 8016576:	d3f3      	bcc.n	8016560 <__mcmp+0x18>
 8016578:	e7fa      	b.n	8016570 <__mcmp+0x28>
 801657a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801657e:	e7f7      	b.n	8016570 <__mcmp+0x28>

08016580 <__mdiff>:
 8016580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016584:	460c      	mov	r4, r1
 8016586:	4606      	mov	r6, r0
 8016588:	4611      	mov	r1, r2
 801658a:	4620      	mov	r0, r4
 801658c:	4690      	mov	r8, r2
 801658e:	f7ff ffdb 	bl	8016548 <__mcmp>
 8016592:	1e05      	subs	r5, r0, #0
 8016594:	d110      	bne.n	80165b8 <__mdiff+0x38>
 8016596:	4629      	mov	r1, r5
 8016598:	4630      	mov	r0, r6
 801659a:	f7ff fd59 	bl	8016050 <_Balloc>
 801659e:	b930      	cbnz	r0, 80165ae <__mdiff+0x2e>
 80165a0:	4b3a      	ldr	r3, [pc, #232]	; (801668c <__mdiff+0x10c>)
 80165a2:	4602      	mov	r2, r0
 80165a4:	f240 2137 	movw	r1, #567	; 0x237
 80165a8:	4839      	ldr	r0, [pc, #228]	; (8016690 <__mdiff+0x110>)
 80165aa:	f000 fb4b 	bl	8016c44 <__assert_func>
 80165ae:	2301      	movs	r3, #1
 80165b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80165b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165b8:	bfa4      	itt	ge
 80165ba:	4643      	movge	r3, r8
 80165bc:	46a0      	movge	r8, r4
 80165be:	4630      	mov	r0, r6
 80165c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80165c4:	bfa6      	itte	ge
 80165c6:	461c      	movge	r4, r3
 80165c8:	2500      	movge	r5, #0
 80165ca:	2501      	movlt	r5, #1
 80165cc:	f7ff fd40 	bl	8016050 <_Balloc>
 80165d0:	b920      	cbnz	r0, 80165dc <__mdiff+0x5c>
 80165d2:	4b2e      	ldr	r3, [pc, #184]	; (801668c <__mdiff+0x10c>)
 80165d4:	4602      	mov	r2, r0
 80165d6:	f240 2145 	movw	r1, #581	; 0x245
 80165da:	e7e5      	b.n	80165a8 <__mdiff+0x28>
 80165dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80165e0:	6926      	ldr	r6, [r4, #16]
 80165e2:	60c5      	str	r5, [r0, #12]
 80165e4:	f104 0914 	add.w	r9, r4, #20
 80165e8:	f108 0514 	add.w	r5, r8, #20
 80165ec:	f100 0e14 	add.w	lr, r0, #20
 80165f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80165f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80165f8:	f108 0210 	add.w	r2, r8, #16
 80165fc:	46f2      	mov	sl, lr
 80165fe:	2100      	movs	r1, #0
 8016600:	f859 3b04 	ldr.w	r3, [r9], #4
 8016604:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016608:	fa11 f88b 	uxtah	r8, r1, fp
 801660c:	b299      	uxth	r1, r3
 801660e:	0c1b      	lsrs	r3, r3, #16
 8016610:	eba8 0801 	sub.w	r8, r8, r1
 8016614:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016618:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801661c:	fa1f f888 	uxth.w	r8, r8
 8016620:	1419      	asrs	r1, r3, #16
 8016622:	454e      	cmp	r6, r9
 8016624:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016628:	f84a 3b04 	str.w	r3, [sl], #4
 801662c:	d8e8      	bhi.n	8016600 <__mdiff+0x80>
 801662e:	1b33      	subs	r3, r6, r4
 8016630:	3b15      	subs	r3, #21
 8016632:	f023 0303 	bic.w	r3, r3, #3
 8016636:	3304      	adds	r3, #4
 8016638:	3415      	adds	r4, #21
 801663a:	42a6      	cmp	r6, r4
 801663c:	bf38      	it	cc
 801663e:	2304      	movcc	r3, #4
 8016640:	441d      	add	r5, r3
 8016642:	4473      	add	r3, lr
 8016644:	469e      	mov	lr, r3
 8016646:	462e      	mov	r6, r5
 8016648:	4566      	cmp	r6, ip
 801664a:	d30e      	bcc.n	801666a <__mdiff+0xea>
 801664c:	f10c 0203 	add.w	r2, ip, #3
 8016650:	1b52      	subs	r2, r2, r5
 8016652:	f022 0203 	bic.w	r2, r2, #3
 8016656:	3d03      	subs	r5, #3
 8016658:	45ac      	cmp	ip, r5
 801665a:	bf38      	it	cc
 801665c:	2200      	movcc	r2, #0
 801665e:	4413      	add	r3, r2
 8016660:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016664:	b17a      	cbz	r2, 8016686 <__mdiff+0x106>
 8016666:	6107      	str	r7, [r0, #16]
 8016668:	e7a4      	b.n	80165b4 <__mdiff+0x34>
 801666a:	f856 8b04 	ldr.w	r8, [r6], #4
 801666e:	fa11 f288 	uxtah	r2, r1, r8
 8016672:	1414      	asrs	r4, r2, #16
 8016674:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016678:	b292      	uxth	r2, r2
 801667a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801667e:	f84e 2b04 	str.w	r2, [lr], #4
 8016682:	1421      	asrs	r1, r4, #16
 8016684:	e7e0      	b.n	8016648 <__mdiff+0xc8>
 8016686:	3f01      	subs	r7, #1
 8016688:	e7ea      	b.n	8016660 <__mdiff+0xe0>
 801668a:	bf00      	nop
 801668c:	08017220 	.word	0x08017220
 8016690:	08017231 	.word	0x08017231

08016694 <__d2b>:
 8016694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016698:	460f      	mov	r7, r1
 801669a:	2101      	movs	r1, #1
 801669c:	ec59 8b10 	vmov	r8, r9, d0
 80166a0:	4616      	mov	r6, r2
 80166a2:	f7ff fcd5 	bl	8016050 <_Balloc>
 80166a6:	4604      	mov	r4, r0
 80166a8:	b930      	cbnz	r0, 80166b8 <__d2b+0x24>
 80166aa:	4602      	mov	r2, r0
 80166ac:	4b24      	ldr	r3, [pc, #144]	; (8016740 <__d2b+0xac>)
 80166ae:	4825      	ldr	r0, [pc, #148]	; (8016744 <__d2b+0xb0>)
 80166b0:	f240 310f 	movw	r1, #783	; 0x30f
 80166b4:	f000 fac6 	bl	8016c44 <__assert_func>
 80166b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80166bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166c0:	bb2d      	cbnz	r5, 801670e <__d2b+0x7a>
 80166c2:	9301      	str	r3, [sp, #4]
 80166c4:	f1b8 0300 	subs.w	r3, r8, #0
 80166c8:	d026      	beq.n	8016718 <__d2b+0x84>
 80166ca:	4668      	mov	r0, sp
 80166cc:	9300      	str	r3, [sp, #0]
 80166ce:	f7ff fd87 	bl	80161e0 <__lo0bits>
 80166d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80166d6:	b1e8      	cbz	r0, 8016714 <__d2b+0x80>
 80166d8:	f1c0 0320 	rsb	r3, r0, #32
 80166dc:	fa02 f303 	lsl.w	r3, r2, r3
 80166e0:	430b      	orrs	r3, r1
 80166e2:	40c2      	lsrs	r2, r0
 80166e4:	6163      	str	r3, [r4, #20]
 80166e6:	9201      	str	r2, [sp, #4]
 80166e8:	9b01      	ldr	r3, [sp, #4]
 80166ea:	61a3      	str	r3, [r4, #24]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	bf14      	ite	ne
 80166f0:	2202      	movne	r2, #2
 80166f2:	2201      	moveq	r2, #1
 80166f4:	6122      	str	r2, [r4, #16]
 80166f6:	b1bd      	cbz	r5, 8016728 <__d2b+0x94>
 80166f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80166fc:	4405      	add	r5, r0
 80166fe:	603d      	str	r5, [r7, #0]
 8016700:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016704:	6030      	str	r0, [r6, #0]
 8016706:	4620      	mov	r0, r4
 8016708:	b003      	add	sp, #12
 801670a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801670e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016712:	e7d6      	b.n	80166c2 <__d2b+0x2e>
 8016714:	6161      	str	r1, [r4, #20]
 8016716:	e7e7      	b.n	80166e8 <__d2b+0x54>
 8016718:	a801      	add	r0, sp, #4
 801671a:	f7ff fd61 	bl	80161e0 <__lo0bits>
 801671e:	9b01      	ldr	r3, [sp, #4]
 8016720:	6163      	str	r3, [r4, #20]
 8016722:	3020      	adds	r0, #32
 8016724:	2201      	movs	r2, #1
 8016726:	e7e5      	b.n	80166f4 <__d2b+0x60>
 8016728:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801672c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016730:	6038      	str	r0, [r7, #0]
 8016732:	6918      	ldr	r0, [r3, #16]
 8016734:	f7ff fd34 	bl	80161a0 <__hi0bits>
 8016738:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801673c:	e7e2      	b.n	8016704 <__d2b+0x70>
 801673e:	bf00      	nop
 8016740:	08017220 	.word	0x08017220
 8016744:	08017231 	.word	0x08017231

08016748 <_malloc_usable_size_r>:
 8016748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801674c:	1f18      	subs	r0, r3, #4
 801674e:	2b00      	cmp	r3, #0
 8016750:	bfbc      	itt	lt
 8016752:	580b      	ldrlt	r3, [r1, r0]
 8016754:	18c0      	addlt	r0, r0, r3
 8016756:	4770      	bx	lr

08016758 <__sfputc_r>:
 8016758:	6893      	ldr	r3, [r2, #8]
 801675a:	3b01      	subs	r3, #1
 801675c:	2b00      	cmp	r3, #0
 801675e:	b410      	push	{r4}
 8016760:	6093      	str	r3, [r2, #8]
 8016762:	da08      	bge.n	8016776 <__sfputc_r+0x1e>
 8016764:	6994      	ldr	r4, [r2, #24]
 8016766:	42a3      	cmp	r3, r4
 8016768:	db01      	blt.n	801676e <__sfputc_r+0x16>
 801676a:	290a      	cmp	r1, #10
 801676c:	d103      	bne.n	8016776 <__sfputc_r+0x1e>
 801676e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016772:	f7fe bcb6 	b.w	80150e2 <__swbuf_r>
 8016776:	6813      	ldr	r3, [r2, #0]
 8016778:	1c58      	adds	r0, r3, #1
 801677a:	6010      	str	r0, [r2, #0]
 801677c:	7019      	strb	r1, [r3, #0]
 801677e:	4608      	mov	r0, r1
 8016780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016784:	4770      	bx	lr

08016786 <__sfputs_r>:
 8016786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016788:	4606      	mov	r6, r0
 801678a:	460f      	mov	r7, r1
 801678c:	4614      	mov	r4, r2
 801678e:	18d5      	adds	r5, r2, r3
 8016790:	42ac      	cmp	r4, r5
 8016792:	d101      	bne.n	8016798 <__sfputs_r+0x12>
 8016794:	2000      	movs	r0, #0
 8016796:	e007      	b.n	80167a8 <__sfputs_r+0x22>
 8016798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801679c:	463a      	mov	r2, r7
 801679e:	4630      	mov	r0, r6
 80167a0:	f7ff ffda 	bl	8016758 <__sfputc_r>
 80167a4:	1c43      	adds	r3, r0, #1
 80167a6:	d1f3      	bne.n	8016790 <__sfputs_r+0xa>
 80167a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080167ac <_vfiprintf_r>:
 80167ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167b0:	460d      	mov	r5, r1
 80167b2:	b09d      	sub	sp, #116	; 0x74
 80167b4:	4614      	mov	r4, r2
 80167b6:	4698      	mov	r8, r3
 80167b8:	4606      	mov	r6, r0
 80167ba:	b118      	cbz	r0, 80167c4 <_vfiprintf_r+0x18>
 80167bc:	6a03      	ldr	r3, [r0, #32]
 80167be:	b90b      	cbnz	r3, 80167c4 <_vfiprintf_r+0x18>
 80167c0:	f7fe fba8 	bl	8014f14 <__sinit>
 80167c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80167c6:	07d9      	lsls	r1, r3, #31
 80167c8:	d405      	bmi.n	80167d6 <_vfiprintf_r+0x2a>
 80167ca:	89ab      	ldrh	r3, [r5, #12]
 80167cc:	059a      	lsls	r2, r3, #22
 80167ce:	d402      	bmi.n	80167d6 <_vfiprintf_r+0x2a>
 80167d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80167d2:	f7fe fdec 	bl	80153ae <__retarget_lock_acquire_recursive>
 80167d6:	89ab      	ldrh	r3, [r5, #12]
 80167d8:	071b      	lsls	r3, r3, #28
 80167da:	d501      	bpl.n	80167e0 <_vfiprintf_r+0x34>
 80167dc:	692b      	ldr	r3, [r5, #16]
 80167de:	b99b      	cbnz	r3, 8016808 <_vfiprintf_r+0x5c>
 80167e0:	4629      	mov	r1, r5
 80167e2:	4630      	mov	r0, r6
 80167e4:	f7fe fcba 	bl	801515c <__swsetup_r>
 80167e8:	b170      	cbz	r0, 8016808 <_vfiprintf_r+0x5c>
 80167ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80167ec:	07dc      	lsls	r4, r3, #31
 80167ee:	d504      	bpl.n	80167fa <_vfiprintf_r+0x4e>
 80167f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167f4:	b01d      	add	sp, #116	; 0x74
 80167f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fa:	89ab      	ldrh	r3, [r5, #12]
 80167fc:	0598      	lsls	r0, r3, #22
 80167fe:	d4f7      	bmi.n	80167f0 <_vfiprintf_r+0x44>
 8016800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016802:	f7fe fdd5 	bl	80153b0 <__retarget_lock_release_recursive>
 8016806:	e7f3      	b.n	80167f0 <_vfiprintf_r+0x44>
 8016808:	2300      	movs	r3, #0
 801680a:	9309      	str	r3, [sp, #36]	; 0x24
 801680c:	2320      	movs	r3, #32
 801680e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016812:	f8cd 800c 	str.w	r8, [sp, #12]
 8016816:	2330      	movs	r3, #48	; 0x30
 8016818:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80169cc <_vfiprintf_r+0x220>
 801681c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016820:	f04f 0901 	mov.w	r9, #1
 8016824:	4623      	mov	r3, r4
 8016826:	469a      	mov	sl, r3
 8016828:	f813 2b01 	ldrb.w	r2, [r3], #1
 801682c:	b10a      	cbz	r2, 8016832 <_vfiprintf_r+0x86>
 801682e:	2a25      	cmp	r2, #37	; 0x25
 8016830:	d1f9      	bne.n	8016826 <_vfiprintf_r+0x7a>
 8016832:	ebba 0b04 	subs.w	fp, sl, r4
 8016836:	d00b      	beq.n	8016850 <_vfiprintf_r+0xa4>
 8016838:	465b      	mov	r3, fp
 801683a:	4622      	mov	r2, r4
 801683c:	4629      	mov	r1, r5
 801683e:	4630      	mov	r0, r6
 8016840:	f7ff ffa1 	bl	8016786 <__sfputs_r>
 8016844:	3001      	adds	r0, #1
 8016846:	f000 80a9 	beq.w	801699c <_vfiprintf_r+0x1f0>
 801684a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801684c:	445a      	add	r2, fp
 801684e:	9209      	str	r2, [sp, #36]	; 0x24
 8016850:	f89a 3000 	ldrb.w	r3, [sl]
 8016854:	2b00      	cmp	r3, #0
 8016856:	f000 80a1 	beq.w	801699c <_vfiprintf_r+0x1f0>
 801685a:	2300      	movs	r3, #0
 801685c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016864:	f10a 0a01 	add.w	sl, sl, #1
 8016868:	9304      	str	r3, [sp, #16]
 801686a:	9307      	str	r3, [sp, #28]
 801686c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016870:	931a      	str	r3, [sp, #104]	; 0x68
 8016872:	4654      	mov	r4, sl
 8016874:	2205      	movs	r2, #5
 8016876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801687a:	4854      	ldr	r0, [pc, #336]	; (80169cc <_vfiprintf_r+0x220>)
 801687c:	f7e9 fd30 	bl	80002e0 <memchr>
 8016880:	9a04      	ldr	r2, [sp, #16]
 8016882:	b9d8      	cbnz	r0, 80168bc <_vfiprintf_r+0x110>
 8016884:	06d1      	lsls	r1, r2, #27
 8016886:	bf44      	itt	mi
 8016888:	2320      	movmi	r3, #32
 801688a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801688e:	0713      	lsls	r3, r2, #28
 8016890:	bf44      	itt	mi
 8016892:	232b      	movmi	r3, #43	; 0x2b
 8016894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016898:	f89a 3000 	ldrb.w	r3, [sl]
 801689c:	2b2a      	cmp	r3, #42	; 0x2a
 801689e:	d015      	beq.n	80168cc <_vfiprintf_r+0x120>
 80168a0:	9a07      	ldr	r2, [sp, #28]
 80168a2:	4654      	mov	r4, sl
 80168a4:	2000      	movs	r0, #0
 80168a6:	f04f 0c0a 	mov.w	ip, #10
 80168aa:	4621      	mov	r1, r4
 80168ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80168b0:	3b30      	subs	r3, #48	; 0x30
 80168b2:	2b09      	cmp	r3, #9
 80168b4:	d94d      	bls.n	8016952 <_vfiprintf_r+0x1a6>
 80168b6:	b1b0      	cbz	r0, 80168e6 <_vfiprintf_r+0x13a>
 80168b8:	9207      	str	r2, [sp, #28]
 80168ba:	e014      	b.n	80168e6 <_vfiprintf_r+0x13a>
 80168bc:	eba0 0308 	sub.w	r3, r0, r8
 80168c0:	fa09 f303 	lsl.w	r3, r9, r3
 80168c4:	4313      	orrs	r3, r2
 80168c6:	9304      	str	r3, [sp, #16]
 80168c8:	46a2      	mov	sl, r4
 80168ca:	e7d2      	b.n	8016872 <_vfiprintf_r+0xc6>
 80168cc:	9b03      	ldr	r3, [sp, #12]
 80168ce:	1d19      	adds	r1, r3, #4
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	9103      	str	r1, [sp, #12]
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	bfbb      	ittet	lt
 80168d8:	425b      	neglt	r3, r3
 80168da:	f042 0202 	orrlt.w	r2, r2, #2
 80168de:	9307      	strge	r3, [sp, #28]
 80168e0:	9307      	strlt	r3, [sp, #28]
 80168e2:	bfb8      	it	lt
 80168e4:	9204      	strlt	r2, [sp, #16]
 80168e6:	7823      	ldrb	r3, [r4, #0]
 80168e8:	2b2e      	cmp	r3, #46	; 0x2e
 80168ea:	d10c      	bne.n	8016906 <_vfiprintf_r+0x15a>
 80168ec:	7863      	ldrb	r3, [r4, #1]
 80168ee:	2b2a      	cmp	r3, #42	; 0x2a
 80168f0:	d134      	bne.n	801695c <_vfiprintf_r+0x1b0>
 80168f2:	9b03      	ldr	r3, [sp, #12]
 80168f4:	1d1a      	adds	r2, r3, #4
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	9203      	str	r2, [sp, #12]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	bfb8      	it	lt
 80168fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016902:	3402      	adds	r4, #2
 8016904:	9305      	str	r3, [sp, #20]
 8016906:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80169dc <_vfiprintf_r+0x230>
 801690a:	7821      	ldrb	r1, [r4, #0]
 801690c:	2203      	movs	r2, #3
 801690e:	4650      	mov	r0, sl
 8016910:	f7e9 fce6 	bl	80002e0 <memchr>
 8016914:	b138      	cbz	r0, 8016926 <_vfiprintf_r+0x17a>
 8016916:	9b04      	ldr	r3, [sp, #16]
 8016918:	eba0 000a 	sub.w	r0, r0, sl
 801691c:	2240      	movs	r2, #64	; 0x40
 801691e:	4082      	lsls	r2, r0
 8016920:	4313      	orrs	r3, r2
 8016922:	3401      	adds	r4, #1
 8016924:	9304      	str	r3, [sp, #16]
 8016926:	f814 1b01 	ldrb.w	r1, [r4], #1
 801692a:	4829      	ldr	r0, [pc, #164]	; (80169d0 <_vfiprintf_r+0x224>)
 801692c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016930:	2206      	movs	r2, #6
 8016932:	f7e9 fcd5 	bl	80002e0 <memchr>
 8016936:	2800      	cmp	r0, #0
 8016938:	d03f      	beq.n	80169ba <_vfiprintf_r+0x20e>
 801693a:	4b26      	ldr	r3, [pc, #152]	; (80169d4 <_vfiprintf_r+0x228>)
 801693c:	bb1b      	cbnz	r3, 8016986 <_vfiprintf_r+0x1da>
 801693e:	9b03      	ldr	r3, [sp, #12]
 8016940:	3307      	adds	r3, #7
 8016942:	f023 0307 	bic.w	r3, r3, #7
 8016946:	3308      	adds	r3, #8
 8016948:	9303      	str	r3, [sp, #12]
 801694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801694c:	443b      	add	r3, r7
 801694e:	9309      	str	r3, [sp, #36]	; 0x24
 8016950:	e768      	b.n	8016824 <_vfiprintf_r+0x78>
 8016952:	fb0c 3202 	mla	r2, ip, r2, r3
 8016956:	460c      	mov	r4, r1
 8016958:	2001      	movs	r0, #1
 801695a:	e7a6      	b.n	80168aa <_vfiprintf_r+0xfe>
 801695c:	2300      	movs	r3, #0
 801695e:	3401      	adds	r4, #1
 8016960:	9305      	str	r3, [sp, #20]
 8016962:	4619      	mov	r1, r3
 8016964:	f04f 0c0a 	mov.w	ip, #10
 8016968:	4620      	mov	r0, r4
 801696a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801696e:	3a30      	subs	r2, #48	; 0x30
 8016970:	2a09      	cmp	r2, #9
 8016972:	d903      	bls.n	801697c <_vfiprintf_r+0x1d0>
 8016974:	2b00      	cmp	r3, #0
 8016976:	d0c6      	beq.n	8016906 <_vfiprintf_r+0x15a>
 8016978:	9105      	str	r1, [sp, #20]
 801697a:	e7c4      	b.n	8016906 <_vfiprintf_r+0x15a>
 801697c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016980:	4604      	mov	r4, r0
 8016982:	2301      	movs	r3, #1
 8016984:	e7f0      	b.n	8016968 <_vfiprintf_r+0x1bc>
 8016986:	ab03      	add	r3, sp, #12
 8016988:	9300      	str	r3, [sp, #0]
 801698a:	462a      	mov	r2, r5
 801698c:	4b12      	ldr	r3, [pc, #72]	; (80169d8 <_vfiprintf_r+0x22c>)
 801698e:	a904      	add	r1, sp, #16
 8016990:	4630      	mov	r0, r6
 8016992:	f7fd fe89 	bl	80146a8 <_printf_float>
 8016996:	4607      	mov	r7, r0
 8016998:	1c78      	adds	r0, r7, #1
 801699a:	d1d6      	bne.n	801694a <_vfiprintf_r+0x19e>
 801699c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801699e:	07d9      	lsls	r1, r3, #31
 80169a0:	d405      	bmi.n	80169ae <_vfiprintf_r+0x202>
 80169a2:	89ab      	ldrh	r3, [r5, #12]
 80169a4:	059a      	lsls	r2, r3, #22
 80169a6:	d402      	bmi.n	80169ae <_vfiprintf_r+0x202>
 80169a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80169aa:	f7fe fd01 	bl	80153b0 <__retarget_lock_release_recursive>
 80169ae:	89ab      	ldrh	r3, [r5, #12]
 80169b0:	065b      	lsls	r3, r3, #25
 80169b2:	f53f af1d 	bmi.w	80167f0 <_vfiprintf_r+0x44>
 80169b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80169b8:	e71c      	b.n	80167f4 <_vfiprintf_r+0x48>
 80169ba:	ab03      	add	r3, sp, #12
 80169bc:	9300      	str	r3, [sp, #0]
 80169be:	462a      	mov	r2, r5
 80169c0:	4b05      	ldr	r3, [pc, #20]	; (80169d8 <_vfiprintf_r+0x22c>)
 80169c2:	a904      	add	r1, sp, #16
 80169c4:	4630      	mov	r0, r6
 80169c6:	f7fe f8f7 	bl	8014bb8 <_printf_i>
 80169ca:	e7e4      	b.n	8016996 <_vfiprintf_r+0x1ea>
 80169cc:	0801738c 	.word	0x0801738c
 80169d0:	08017396 	.word	0x08017396
 80169d4:	080146a9 	.word	0x080146a9
 80169d8:	08016787 	.word	0x08016787
 80169dc:	08017392 	.word	0x08017392

080169e0 <__sflush_r>:
 80169e0:	898a      	ldrh	r2, [r1, #12]
 80169e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169e6:	4605      	mov	r5, r0
 80169e8:	0710      	lsls	r0, r2, #28
 80169ea:	460c      	mov	r4, r1
 80169ec:	d458      	bmi.n	8016aa0 <__sflush_r+0xc0>
 80169ee:	684b      	ldr	r3, [r1, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	dc05      	bgt.n	8016a00 <__sflush_r+0x20>
 80169f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	dc02      	bgt.n	8016a00 <__sflush_r+0x20>
 80169fa:	2000      	movs	r0, #0
 80169fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a02:	2e00      	cmp	r6, #0
 8016a04:	d0f9      	beq.n	80169fa <__sflush_r+0x1a>
 8016a06:	2300      	movs	r3, #0
 8016a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016a0c:	682f      	ldr	r7, [r5, #0]
 8016a0e:	6a21      	ldr	r1, [r4, #32]
 8016a10:	602b      	str	r3, [r5, #0]
 8016a12:	d032      	beq.n	8016a7a <__sflush_r+0x9a>
 8016a14:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016a16:	89a3      	ldrh	r3, [r4, #12]
 8016a18:	075a      	lsls	r2, r3, #29
 8016a1a:	d505      	bpl.n	8016a28 <__sflush_r+0x48>
 8016a1c:	6863      	ldr	r3, [r4, #4]
 8016a1e:	1ac0      	subs	r0, r0, r3
 8016a20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016a22:	b10b      	cbz	r3, 8016a28 <__sflush_r+0x48>
 8016a24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016a26:	1ac0      	subs	r0, r0, r3
 8016a28:	2300      	movs	r3, #0
 8016a2a:	4602      	mov	r2, r0
 8016a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a2e:	6a21      	ldr	r1, [r4, #32]
 8016a30:	4628      	mov	r0, r5
 8016a32:	47b0      	blx	r6
 8016a34:	1c43      	adds	r3, r0, #1
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	d106      	bne.n	8016a48 <__sflush_r+0x68>
 8016a3a:	6829      	ldr	r1, [r5, #0]
 8016a3c:	291d      	cmp	r1, #29
 8016a3e:	d82b      	bhi.n	8016a98 <__sflush_r+0xb8>
 8016a40:	4a29      	ldr	r2, [pc, #164]	; (8016ae8 <__sflush_r+0x108>)
 8016a42:	410a      	asrs	r2, r1
 8016a44:	07d6      	lsls	r6, r2, #31
 8016a46:	d427      	bmi.n	8016a98 <__sflush_r+0xb8>
 8016a48:	2200      	movs	r2, #0
 8016a4a:	6062      	str	r2, [r4, #4]
 8016a4c:	04d9      	lsls	r1, r3, #19
 8016a4e:	6922      	ldr	r2, [r4, #16]
 8016a50:	6022      	str	r2, [r4, #0]
 8016a52:	d504      	bpl.n	8016a5e <__sflush_r+0x7e>
 8016a54:	1c42      	adds	r2, r0, #1
 8016a56:	d101      	bne.n	8016a5c <__sflush_r+0x7c>
 8016a58:	682b      	ldr	r3, [r5, #0]
 8016a5a:	b903      	cbnz	r3, 8016a5e <__sflush_r+0x7e>
 8016a5c:	6560      	str	r0, [r4, #84]	; 0x54
 8016a5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016a60:	602f      	str	r7, [r5, #0]
 8016a62:	2900      	cmp	r1, #0
 8016a64:	d0c9      	beq.n	80169fa <__sflush_r+0x1a>
 8016a66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016a6a:	4299      	cmp	r1, r3
 8016a6c:	d002      	beq.n	8016a74 <__sflush_r+0x94>
 8016a6e:	4628      	mov	r0, r5
 8016a70:	f7ff faa2 	bl	8015fb8 <_free_r>
 8016a74:	2000      	movs	r0, #0
 8016a76:	6360      	str	r0, [r4, #52]	; 0x34
 8016a78:	e7c0      	b.n	80169fc <__sflush_r+0x1c>
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	4628      	mov	r0, r5
 8016a7e:	47b0      	blx	r6
 8016a80:	1c41      	adds	r1, r0, #1
 8016a82:	d1c8      	bne.n	8016a16 <__sflush_r+0x36>
 8016a84:	682b      	ldr	r3, [r5, #0]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d0c5      	beq.n	8016a16 <__sflush_r+0x36>
 8016a8a:	2b1d      	cmp	r3, #29
 8016a8c:	d001      	beq.n	8016a92 <__sflush_r+0xb2>
 8016a8e:	2b16      	cmp	r3, #22
 8016a90:	d101      	bne.n	8016a96 <__sflush_r+0xb6>
 8016a92:	602f      	str	r7, [r5, #0]
 8016a94:	e7b1      	b.n	80169fa <__sflush_r+0x1a>
 8016a96:	89a3      	ldrh	r3, [r4, #12]
 8016a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a9c:	81a3      	strh	r3, [r4, #12]
 8016a9e:	e7ad      	b.n	80169fc <__sflush_r+0x1c>
 8016aa0:	690f      	ldr	r7, [r1, #16]
 8016aa2:	2f00      	cmp	r7, #0
 8016aa4:	d0a9      	beq.n	80169fa <__sflush_r+0x1a>
 8016aa6:	0793      	lsls	r3, r2, #30
 8016aa8:	680e      	ldr	r6, [r1, #0]
 8016aaa:	bf08      	it	eq
 8016aac:	694b      	ldreq	r3, [r1, #20]
 8016aae:	600f      	str	r7, [r1, #0]
 8016ab0:	bf18      	it	ne
 8016ab2:	2300      	movne	r3, #0
 8016ab4:	eba6 0807 	sub.w	r8, r6, r7
 8016ab8:	608b      	str	r3, [r1, #8]
 8016aba:	f1b8 0f00 	cmp.w	r8, #0
 8016abe:	dd9c      	ble.n	80169fa <__sflush_r+0x1a>
 8016ac0:	6a21      	ldr	r1, [r4, #32]
 8016ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ac4:	4643      	mov	r3, r8
 8016ac6:	463a      	mov	r2, r7
 8016ac8:	4628      	mov	r0, r5
 8016aca:	47b0      	blx	r6
 8016acc:	2800      	cmp	r0, #0
 8016ace:	dc06      	bgt.n	8016ade <__sflush_r+0xfe>
 8016ad0:	89a3      	ldrh	r3, [r4, #12]
 8016ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ad6:	81a3      	strh	r3, [r4, #12]
 8016ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016adc:	e78e      	b.n	80169fc <__sflush_r+0x1c>
 8016ade:	4407      	add	r7, r0
 8016ae0:	eba8 0800 	sub.w	r8, r8, r0
 8016ae4:	e7e9      	b.n	8016aba <__sflush_r+0xda>
 8016ae6:	bf00      	nop
 8016ae8:	dfbffffe 	.word	0xdfbffffe

08016aec <_fflush_r>:
 8016aec:	b538      	push	{r3, r4, r5, lr}
 8016aee:	690b      	ldr	r3, [r1, #16]
 8016af0:	4605      	mov	r5, r0
 8016af2:	460c      	mov	r4, r1
 8016af4:	b913      	cbnz	r3, 8016afc <_fflush_r+0x10>
 8016af6:	2500      	movs	r5, #0
 8016af8:	4628      	mov	r0, r5
 8016afa:	bd38      	pop	{r3, r4, r5, pc}
 8016afc:	b118      	cbz	r0, 8016b06 <_fflush_r+0x1a>
 8016afe:	6a03      	ldr	r3, [r0, #32]
 8016b00:	b90b      	cbnz	r3, 8016b06 <_fflush_r+0x1a>
 8016b02:	f7fe fa07 	bl	8014f14 <__sinit>
 8016b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d0f3      	beq.n	8016af6 <_fflush_r+0xa>
 8016b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016b10:	07d0      	lsls	r0, r2, #31
 8016b12:	d404      	bmi.n	8016b1e <_fflush_r+0x32>
 8016b14:	0599      	lsls	r1, r3, #22
 8016b16:	d402      	bmi.n	8016b1e <_fflush_r+0x32>
 8016b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b1a:	f7fe fc48 	bl	80153ae <__retarget_lock_acquire_recursive>
 8016b1e:	4628      	mov	r0, r5
 8016b20:	4621      	mov	r1, r4
 8016b22:	f7ff ff5d 	bl	80169e0 <__sflush_r>
 8016b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016b28:	07da      	lsls	r2, r3, #31
 8016b2a:	4605      	mov	r5, r0
 8016b2c:	d4e4      	bmi.n	8016af8 <_fflush_r+0xc>
 8016b2e:	89a3      	ldrh	r3, [r4, #12]
 8016b30:	059b      	lsls	r3, r3, #22
 8016b32:	d4e1      	bmi.n	8016af8 <_fflush_r+0xc>
 8016b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016b36:	f7fe fc3b 	bl	80153b0 <__retarget_lock_release_recursive>
 8016b3a:	e7dd      	b.n	8016af8 <_fflush_r+0xc>

08016b3c <__swhatbuf_r>:
 8016b3c:	b570      	push	{r4, r5, r6, lr}
 8016b3e:	460c      	mov	r4, r1
 8016b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b44:	2900      	cmp	r1, #0
 8016b46:	b096      	sub	sp, #88	; 0x58
 8016b48:	4615      	mov	r5, r2
 8016b4a:	461e      	mov	r6, r3
 8016b4c:	da0d      	bge.n	8016b6a <__swhatbuf_r+0x2e>
 8016b4e:	89a3      	ldrh	r3, [r4, #12]
 8016b50:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016b54:	f04f 0100 	mov.w	r1, #0
 8016b58:	bf0c      	ite	eq
 8016b5a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016b5e:	2340      	movne	r3, #64	; 0x40
 8016b60:	2000      	movs	r0, #0
 8016b62:	6031      	str	r1, [r6, #0]
 8016b64:	602b      	str	r3, [r5, #0]
 8016b66:	b016      	add	sp, #88	; 0x58
 8016b68:	bd70      	pop	{r4, r5, r6, pc}
 8016b6a:	466a      	mov	r2, sp
 8016b6c:	f000 f848 	bl	8016c00 <_fstat_r>
 8016b70:	2800      	cmp	r0, #0
 8016b72:	dbec      	blt.n	8016b4e <__swhatbuf_r+0x12>
 8016b74:	9901      	ldr	r1, [sp, #4]
 8016b76:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016b7a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016b7e:	4259      	negs	r1, r3
 8016b80:	4159      	adcs	r1, r3
 8016b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b86:	e7eb      	b.n	8016b60 <__swhatbuf_r+0x24>

08016b88 <__smakebuf_r>:
 8016b88:	898b      	ldrh	r3, [r1, #12]
 8016b8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b8c:	079d      	lsls	r5, r3, #30
 8016b8e:	4606      	mov	r6, r0
 8016b90:	460c      	mov	r4, r1
 8016b92:	d507      	bpl.n	8016ba4 <__smakebuf_r+0x1c>
 8016b94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b98:	6023      	str	r3, [r4, #0]
 8016b9a:	6123      	str	r3, [r4, #16]
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	6163      	str	r3, [r4, #20]
 8016ba0:	b002      	add	sp, #8
 8016ba2:	bd70      	pop	{r4, r5, r6, pc}
 8016ba4:	ab01      	add	r3, sp, #4
 8016ba6:	466a      	mov	r2, sp
 8016ba8:	f7ff ffc8 	bl	8016b3c <__swhatbuf_r>
 8016bac:	9900      	ldr	r1, [sp, #0]
 8016bae:	4605      	mov	r5, r0
 8016bb0:	4630      	mov	r0, r6
 8016bb2:	f7fd fc23 	bl	80143fc <_malloc_r>
 8016bb6:	b948      	cbnz	r0, 8016bcc <__smakebuf_r+0x44>
 8016bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016bbc:	059a      	lsls	r2, r3, #22
 8016bbe:	d4ef      	bmi.n	8016ba0 <__smakebuf_r+0x18>
 8016bc0:	f023 0303 	bic.w	r3, r3, #3
 8016bc4:	f043 0302 	orr.w	r3, r3, #2
 8016bc8:	81a3      	strh	r3, [r4, #12]
 8016bca:	e7e3      	b.n	8016b94 <__smakebuf_r+0xc>
 8016bcc:	89a3      	ldrh	r3, [r4, #12]
 8016bce:	6020      	str	r0, [r4, #0]
 8016bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016bd4:	81a3      	strh	r3, [r4, #12]
 8016bd6:	9b00      	ldr	r3, [sp, #0]
 8016bd8:	6163      	str	r3, [r4, #20]
 8016bda:	9b01      	ldr	r3, [sp, #4]
 8016bdc:	6120      	str	r0, [r4, #16]
 8016bde:	b15b      	cbz	r3, 8016bf8 <__smakebuf_r+0x70>
 8016be0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016be4:	4630      	mov	r0, r6
 8016be6:	f000 f81d 	bl	8016c24 <_isatty_r>
 8016bea:	b128      	cbz	r0, 8016bf8 <__smakebuf_r+0x70>
 8016bec:	89a3      	ldrh	r3, [r4, #12]
 8016bee:	f023 0303 	bic.w	r3, r3, #3
 8016bf2:	f043 0301 	orr.w	r3, r3, #1
 8016bf6:	81a3      	strh	r3, [r4, #12]
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	431d      	orrs	r5, r3
 8016bfc:	81a5      	strh	r5, [r4, #12]
 8016bfe:	e7cf      	b.n	8016ba0 <__smakebuf_r+0x18>

08016c00 <_fstat_r>:
 8016c00:	b538      	push	{r3, r4, r5, lr}
 8016c02:	4d07      	ldr	r5, [pc, #28]	; (8016c20 <_fstat_r+0x20>)
 8016c04:	2300      	movs	r3, #0
 8016c06:	4604      	mov	r4, r0
 8016c08:	4608      	mov	r0, r1
 8016c0a:	4611      	mov	r1, r2
 8016c0c:	602b      	str	r3, [r5, #0]
 8016c0e:	f7ef ffc2 	bl	8006b96 <_fstat>
 8016c12:	1c43      	adds	r3, r0, #1
 8016c14:	d102      	bne.n	8016c1c <_fstat_r+0x1c>
 8016c16:	682b      	ldr	r3, [r5, #0]
 8016c18:	b103      	cbz	r3, 8016c1c <_fstat_r+0x1c>
 8016c1a:	6023      	str	r3, [r4, #0]
 8016c1c:	bd38      	pop	{r3, r4, r5, pc}
 8016c1e:	bf00      	nop
 8016c20:	240046e4 	.word	0x240046e4

08016c24 <_isatty_r>:
 8016c24:	b538      	push	{r3, r4, r5, lr}
 8016c26:	4d06      	ldr	r5, [pc, #24]	; (8016c40 <_isatty_r+0x1c>)
 8016c28:	2300      	movs	r3, #0
 8016c2a:	4604      	mov	r4, r0
 8016c2c:	4608      	mov	r0, r1
 8016c2e:	602b      	str	r3, [r5, #0]
 8016c30:	f7ef ffc1 	bl	8006bb6 <_isatty>
 8016c34:	1c43      	adds	r3, r0, #1
 8016c36:	d102      	bne.n	8016c3e <_isatty_r+0x1a>
 8016c38:	682b      	ldr	r3, [r5, #0]
 8016c3a:	b103      	cbz	r3, 8016c3e <_isatty_r+0x1a>
 8016c3c:	6023      	str	r3, [r4, #0]
 8016c3e:	bd38      	pop	{r3, r4, r5, pc}
 8016c40:	240046e4 	.word	0x240046e4

08016c44 <__assert_func>:
 8016c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c46:	4614      	mov	r4, r2
 8016c48:	461a      	mov	r2, r3
 8016c4a:	4b09      	ldr	r3, [pc, #36]	; (8016c70 <__assert_func+0x2c>)
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	4605      	mov	r5, r0
 8016c50:	68d8      	ldr	r0, [r3, #12]
 8016c52:	b14c      	cbz	r4, 8016c68 <__assert_func+0x24>
 8016c54:	4b07      	ldr	r3, [pc, #28]	; (8016c74 <__assert_func+0x30>)
 8016c56:	9100      	str	r1, [sp, #0]
 8016c58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016c5c:	4906      	ldr	r1, [pc, #24]	; (8016c78 <__assert_func+0x34>)
 8016c5e:	462b      	mov	r3, r5
 8016c60:	f000 f844 	bl	8016cec <fiprintf>
 8016c64:	f7fd fb92 	bl	801438c <abort>
 8016c68:	4b04      	ldr	r3, [pc, #16]	; (8016c7c <__assert_func+0x38>)
 8016c6a:	461c      	mov	r4, r3
 8016c6c:	e7f3      	b.n	8016c56 <__assert_func+0x12>
 8016c6e:	bf00      	nop
 8016c70:	240000d8 	.word	0x240000d8
 8016c74:	080173a7 	.word	0x080173a7
 8016c78:	080173b4 	.word	0x080173b4
 8016c7c:	080173e2 	.word	0x080173e2

08016c80 <_calloc_r>:
 8016c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016c82:	fba1 2402 	umull	r2, r4, r1, r2
 8016c86:	b94c      	cbnz	r4, 8016c9c <_calloc_r+0x1c>
 8016c88:	4611      	mov	r1, r2
 8016c8a:	9201      	str	r2, [sp, #4]
 8016c8c:	f7fd fbb6 	bl	80143fc <_malloc_r>
 8016c90:	9a01      	ldr	r2, [sp, #4]
 8016c92:	4605      	mov	r5, r0
 8016c94:	b930      	cbnz	r0, 8016ca4 <_calloc_r+0x24>
 8016c96:	4628      	mov	r0, r5
 8016c98:	b003      	add	sp, #12
 8016c9a:	bd30      	pop	{r4, r5, pc}
 8016c9c:	220c      	movs	r2, #12
 8016c9e:	6002      	str	r2, [r0, #0]
 8016ca0:	2500      	movs	r5, #0
 8016ca2:	e7f8      	b.n	8016c96 <_calloc_r+0x16>
 8016ca4:	4621      	mov	r1, r4
 8016ca6:	f7fe fab1 	bl	801520c <memset>
 8016caa:	e7f4      	b.n	8016c96 <_calloc_r+0x16>

08016cac <__ascii_mbtowc>:
 8016cac:	b082      	sub	sp, #8
 8016cae:	b901      	cbnz	r1, 8016cb2 <__ascii_mbtowc+0x6>
 8016cb0:	a901      	add	r1, sp, #4
 8016cb2:	b142      	cbz	r2, 8016cc6 <__ascii_mbtowc+0x1a>
 8016cb4:	b14b      	cbz	r3, 8016cca <__ascii_mbtowc+0x1e>
 8016cb6:	7813      	ldrb	r3, [r2, #0]
 8016cb8:	600b      	str	r3, [r1, #0]
 8016cba:	7812      	ldrb	r2, [r2, #0]
 8016cbc:	1e10      	subs	r0, r2, #0
 8016cbe:	bf18      	it	ne
 8016cc0:	2001      	movne	r0, #1
 8016cc2:	b002      	add	sp, #8
 8016cc4:	4770      	bx	lr
 8016cc6:	4610      	mov	r0, r2
 8016cc8:	e7fb      	b.n	8016cc2 <__ascii_mbtowc+0x16>
 8016cca:	f06f 0001 	mvn.w	r0, #1
 8016cce:	e7f8      	b.n	8016cc2 <__ascii_mbtowc+0x16>

08016cd0 <__ascii_wctomb>:
 8016cd0:	b149      	cbz	r1, 8016ce6 <__ascii_wctomb+0x16>
 8016cd2:	2aff      	cmp	r2, #255	; 0xff
 8016cd4:	bf85      	ittet	hi
 8016cd6:	238a      	movhi	r3, #138	; 0x8a
 8016cd8:	6003      	strhi	r3, [r0, #0]
 8016cda:	700a      	strbls	r2, [r1, #0]
 8016cdc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8016ce0:	bf98      	it	ls
 8016ce2:	2001      	movls	r0, #1
 8016ce4:	4770      	bx	lr
 8016ce6:	4608      	mov	r0, r1
 8016ce8:	4770      	bx	lr
	...

08016cec <fiprintf>:
 8016cec:	b40e      	push	{r1, r2, r3}
 8016cee:	b503      	push	{r0, r1, lr}
 8016cf0:	4601      	mov	r1, r0
 8016cf2:	ab03      	add	r3, sp, #12
 8016cf4:	4805      	ldr	r0, [pc, #20]	; (8016d0c <fiprintf+0x20>)
 8016cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cfa:	6800      	ldr	r0, [r0, #0]
 8016cfc:	9301      	str	r3, [sp, #4]
 8016cfe:	f7ff fd55 	bl	80167ac <_vfiprintf_r>
 8016d02:	b002      	add	sp, #8
 8016d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d08:	b003      	add	sp, #12
 8016d0a:	4770      	bx	lr
 8016d0c:	240000d8 	.word	0x240000d8

08016d10 <_init>:
 8016d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d12:	bf00      	nop
 8016d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d16:	bc08      	pop	{r3}
 8016d18:	469e      	mov	lr, r3
 8016d1a:	4770      	bx	lr

08016d1c <_fini>:
 8016d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d1e:	bf00      	nop
 8016d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d22:	bc08      	pop	{r3}
 8016d24:	469e      	mov	lr, r3
 8016d26:	4770      	bx	lr
