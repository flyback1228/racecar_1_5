
racecar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016ef8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  08017198  08017198  00027198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017a7c  08017a7c  00027a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   0000000c  08017a84  08017a84  00027a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017a90  08017a90  00027a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000021c  24000000  08017a94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004580  2400021c  08017cb0  0003021c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400479c  08017cb0  0003479c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003024a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002f662  00000000  00000000  0003028d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004848  00000000  00000000  0005f8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001ed0  00000000  00000000  00064138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001809  00000000  00000000  00066008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f810  00000000  00000000  00067811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000250c2  00000000  00000000  000a7021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00186751  00000000  00000000  000cc0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000094fc  00000000  00000000  00252834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  0025bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400021c 	.word	0x2400021c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017180 	.word	0x08017180

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000220 	.word	0x24000220
 80002dc:	08017180 	.word	0x08017180

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <_ZL6millisv>:

static inline uint32_t micros(void){
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

static inline uint32_t millis(void){
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000U);
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <_ZL6millisv+0x24>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <_ZL6millisv+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4907      	ldr	r1, [pc, #28]	; (80006b8 <_ZL6millisv+0x2c>)
 800069a:	fba1 1303 	umull	r1, r3, r1, r3
 800069e:	099b      	lsrs	r3, r3, #6
 80006a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	e0001000 	.word	0xe0001000
 80006b4:	24000044 	.word	0x24000044
 80006b8:	10624dd3 	.word	0x10624dd3

080006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>:
#include <jy901/JY901_Control.h>
#include <jy901/JY901_Serial.h>
#include <string.h>
#include "utility.h"

CJY901::CJY901(UART_HandleTypeDef* huart) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	6039      	str	r1, [r7, #0]
	_huart=huart;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	683a      	ldr	r2, [r7, #0]
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  _lastTime = millis();
 80006cc:	f7ff ffde 	bl	800068c <_ZL6millisv>
 80006d0:	4602      	mov	r2, r0
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_ZN6CJY9019parseDataEPh>:


bool CJY901::parseData(uint8_t* rxBuffer) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	6039      	str	r1, [r7, #0]

  // do sum check to confirm data is not corrupted
  uint8_t sum = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 80006ee:	2300      	movs	r3, #0
 80006f0:	73bb      	strb	r3, [r7, #14]
 80006f2:	e009      	b.n	8000708 <_ZN6CJY9019parseDataEPh+0x28>
    sum += rxBuffer[cnt];
 80006f4:	7bbb      	ldrb	r3, [r7, #14]
 80006f6:	683a      	ldr	r2, [r7, #0]
 80006f8:	4413      	add	r3, r2
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	4413      	add	r3, r2
 8000700:	73fb      	strb	r3, [r7, #15]
  for (uint8_t cnt = 0; cnt < 10; cnt++)
 8000702:	7bbb      	ldrb	r3, [r7, #14]
 8000704:	3301      	adds	r3, #1
 8000706:	73bb      	strb	r3, [r7, #14]
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	2b09      	cmp	r3, #9
 800070c:	d9f2      	bls.n	80006f4 <_ZN6CJY9019parseDataEPh+0x14>
  if (sum != rxBuffer[10])
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	330a      	adds	r3, #10
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	7bfa      	ldrb	r2, [r7, #15]
 8000716:	429a      	cmp	r2, r3
 8000718:	d001      	beq.n	800071e <_ZN6CJY9019parseDataEPh+0x3e>
    return false;
 800071a:	2300      	movs	r3, #0
 800071c:	e0a5      	b.n	800086a <_ZN6CJY9019parseDataEPh+0x18a>

  switch (rxBuffer[1]) {  // these cases are based on Manual p26,27,28,29 and 30
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	3301      	adds	r3, #1
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	3b50      	subs	r3, #80	; 0x50
 8000726:	2b0a      	cmp	r3, #10
 8000728:	f200 8099 	bhi.w	800085e <_ZN6CJY9019parseDataEPh+0x17e>
 800072c:	a201      	add	r2, pc, #4	; (adr r2, 8000734 <_ZN6CJY9019parseDataEPh+0x54>)
 800072e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000732:	bf00      	nop
 8000734:	08000761 	.word	0x08000761
 8000738:	08000775 	.word	0x08000775
 800073c:	08000789 	.word	0x08000789
 8000740:	0800079d 	.word	0x0800079d
 8000744:	080007b1 	.word	0x080007b1
 8000748:	080007c5 	.word	0x080007c5
 800074c:	080007d9 	.word	0x080007d9
 8000750:	080007f3 	.word	0x080007f3
 8000754:	0800080d 	.word	0x0800080d
 8000758:	08000837 	.word	0x08000837
 800075c:	0800084b 	.word	0x0800084b
    case 0x50:
      memcpy(&JY901_data.time, &rxBuffer[2], 8);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	2208      	movs	r2, #8
 800076c:	4619      	mov	r1, r3
 800076e:	f015 f858 	bl	8015822 <memcpy>
      break;  // time
 8000772:	e074      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x51:
      memcpy(&JY901_data.acc, &rxBuffer[2], 8);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	3302      	adds	r3, #2
 800077e:	2208      	movs	r2, #8
 8000780:	4619      	mov	r1, r3
 8000782:	f015 f84e 	bl	8015822 <memcpy>
      break;  // acceleration
 8000786:	e06a      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x52:
      memcpy(&JY901_data.gyro, &rxBuffer[2], 8);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	3302      	adds	r3, #2
 8000792:	2208      	movs	r2, #8
 8000794:	4619      	mov	r1, r3
 8000796:	f015 f844 	bl	8015822 <memcpy>
      break;  // angular velocity
 800079a:	e060      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x53:
      memcpy(&JY901_data.angle, &rxBuffer[2], 8);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	3302      	adds	r3, #2
 80007a6:	2208      	movs	r2, #8
 80007a8:	4619      	mov	r1, r3
 80007aa:	f015 f83a 	bl	8015822 <memcpy>
      break;  // angle
 80007ae:	e056      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x54:
      memcpy(&JY901_data.mag, &rxBuffer[2], 8);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	3302      	adds	r3, #2
 80007ba:	2208      	movs	r2, #8
 80007bc:	4619      	mov	r1, r3
 80007be:	f015 f830 	bl	8015822 <memcpy>
      break;  // magnetic field and temperature
 80007c2:	e04c      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x55:
      memcpy(&JY901_data.dStatus, &rxBuffer[2], 8);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	3302      	adds	r3, #2
 80007ce:	2208      	movs	r2, #8
 80007d0:	4619      	mov	r1, r3
 80007d2:	f015 f826 	bl	8015822 <memcpy>
      break;  // D port status
 80007d6:	e042      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x56:
      memcpy(&JY901_data.pressure, &rxBuffer[2], 4);  // pressure
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	335c      	adds	r3, #92	; 0x5c
 80007dc:	683a      	ldr	r2, [r7, #0]
 80007de:	3202      	adds	r2, #2
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.altitude, &rxBuffer[6], 4);  // altitude
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	3360      	adds	r3, #96	; 0x60
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	3206      	adds	r2, #6
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	601a      	str	r2, [r3, #0]
      break;
 80007f0:	e035      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x57:
      memcpy(&JY901_data.lon, &rxBuffer[2], 4);  // longtitude
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3364      	adds	r3, #100	; 0x64
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	3202      	adds	r2, #2
 80007fa:	6812      	ldr	r2, [r2, #0]
 80007fc:	601a      	str	r2, [r3, #0]
      memcpy(&JY901_data.lat, &rxBuffer[6], 4);  // latitude
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3368      	adds	r3, #104	; 0x68
 8000802:	683a      	ldr	r2, [r7, #0]
 8000804:	3206      	adds	r2, #6
 8000806:	6812      	ldr	r2, [r2, #0]
 8000808:	601a      	str	r2, [r3, #0]
      break;
 800080a:	e028      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x58:
      memcpy(&JY901_data.GPSHeight, &rxBuffer[2], 2);    //
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	336c      	adds	r3, #108	; 0x6c
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	3202      	adds	r2, #2
 8000814:	8812      	ldrh	r2, [r2, #0]
 8000816:	b292      	uxth	r2, r2
 8000818:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSYaw, &rxBuffer[4], 2);       // GPS data
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	336e      	adds	r3, #110	; 0x6e
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	3204      	adds	r2, #4
 8000822:	8812      	ldrh	r2, [r2, #0]
 8000824:	b292      	uxth	r2, r2
 8000826:	801a      	strh	r2, [r3, #0]
      memcpy(&JY901_data.GPSVelocity, &rxBuffer[6], 4);  //
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3370      	adds	r3, #112	; 0x70
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	3206      	adds	r2, #6
 8000830:	6812      	ldr	r2, [r2, #0]
 8000832:	601a      	str	r2, [r3, #0]
      break;
 8000834:	e013      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>

    case 0x59:
      memcpy(&JY901_data.quater, &rxBuffer[2], 8);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f103 0074 	add.w	r0, r3, #116	; 0x74
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3302      	adds	r3, #2
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	f014 ffed 	bl	8015822 <memcpy>
      break;  // quaternion
 8000848:	e009      	b.n	800085e <_ZN6CJY9019parseDataEPh+0x17e>
    case 0x5A:
      memcpy(&JY901_data.GPS_DOP, &rxBuffer[2], 8);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	3302      	adds	r3, #2
 8000854:	2208      	movs	r2, #8
 8000856:	4619      	mov	r1, r3
 8000858:	f014 ffe3 	bl	8015822 <memcpy>
      break;  // GPS DOP
 800085c:	bf00      	nop
  }
  _lastTime = millis();  // last receive time
 800085e:	f7ff ff15 	bl	800068c <_ZL6millisv>
 8000862:	4602      	mov	r2, r0
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  return true;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3710      	adds	r7, #16
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	0000      	movs	r0, r0
	...

08000878 <_ZN6CJY9017getAccXEv>:
double CJY901::getTemp() {
  return JY901_data.mag.temperature /
         100.0;  // are all the data(from mag acc gyro) same?
}  // may need further test

double CJY901::getAccX() {
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.x / (32768.0 / 16.0);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000886:	ee07 3a90 	vmov	s15, r3
 800088a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800088e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008a8 <_ZN6CJY9017getAccXEv+0x30>
 8000892:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000896:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccX() unit: G(gravity)
 800089a:	eeb0 0b47 	vmov.f64	d0, d7
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	00000000 	.word	0x00000000
 80008ac:	40a00000 	.word	0x40a00000

080008b0 <_ZN6CJY9017getAccYEv>:

double CJY901::getAccY() {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.y / (32768.0 / 16.0);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008c6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80008e0 <_ZN6CJY9017getAccYEv+0x30>
 80008ca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80008ce:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccY() unit: G(gravity)
 80008d2:	eeb0 0b47 	vmov.f64	d0, d7
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	00000000 	.word	0x00000000
 80008e4:	40a00000 	.word	0x40a00000

080008e8 <_ZN6CJY9017getAccZEv>:

double CJY901::getAccZ() {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  return JY901_data.acc.z / (32768.0 / 16.0);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80008f6:	ee07 3a90 	vmov	s15, r3
 80008fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80008fe:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000918 <_ZN6CJY9017getAccZEv+0x30>
 8000902:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000906:	eeb0 7b45 	vmov.f64	d7, d5
}  // getAccZ() unit: G(gravity)
 800090a:	eeb0 0b47 	vmov.f64	d0, d7
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	00000000 	.word	0x00000000
 800091c:	40a00000 	.word	0x40a00000

08000920 <_ZN6CJY9018getGyroXEv>:

double CJY901::getGyroX() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.x / (32768.0 / 2000.0);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800092e:	ee07 3a90 	vmov	s15, r3
 8000932:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000936:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000950 <_ZN6CJY9018getGyroXEv+0x30>
 800093a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800093e:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroX() unit: degree(s) per second
 8000942:	eeb0 0b47 	vmov.f64	d0, d7
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	d2f1a9fc 	.word	0xd2f1a9fc
 8000954:	4030624d 	.word	0x4030624d

08000958 <_ZN6CJY9018getGyroYEv>:

double CJY901::getGyroY() {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.y / (32768.0 / 2000.0);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800096e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000988 <_ZN6CJY9018getGyroYEv+0x30>
 8000972:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000976:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroY() unit: degree(s) per second
 800097a:	eeb0 0b47 	vmov.f64	d0, d7
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	d2f1a9fc 	.word	0xd2f1a9fc
 800098c:	4030624d 	.word	0x4030624d

08000990 <_ZN6CJY9018getGyroZEv>:

double CJY901::getGyroZ() {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  return JY901_data.gyro.z / (32768.0 / 2000.0);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009a6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009c0 <_ZN6CJY9018getGyroZEv+0x30>
 80009aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80009ae:	eeb0 7b45 	vmov.f64	d7, d5
}  // getGyroZ() unit: degree(s) per second
 80009b2:	eeb0 0b47 	vmov.f64	d0, d7
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80009c4:	4030624d 	.word	0x4030624d

080009c8 <_ZN6CJY9017getRollEv>:

/* -- Noticed that The Euler angles' order here is ---- */
/* ----------- Z-Y-X, for more please visit ----------- */
/* --- http://web.mit.edu/2.05/www/Handout/HO2.PDF ---- */
double CJY901::getRoll() {  // X-axis
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.roll / (32768.0 / 180.0);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80009d6:	ee07 3a90 	vmov	s15, r3
 80009da:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009de:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80009f8 <_ZN6CJY9017getRollEv+0x30>
 80009e2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80009e6:	eeb0 7b45 	vmov.f64	d7, d5
}  // getRoll() unit: degree(s)
 80009ea:	eeb0 0b47 	vmov.f64	d0, d7
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	16c16c17 	.word	0x16c16c17
 80009fc:	4066c16c 	.word	0x4066c16c

08000a00 <_ZN6CJY9018getPitchEv>:

double CJY901::getPitch() {  // Y-axis
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.pitch / (32768.0 / 180.0);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8000a0e:	ee07 3a90 	vmov	s15, r3
 8000a12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a16:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a30 <_ZN6CJY9018getPitchEv+0x30>
 8000a1a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000a1e:	eeb0 7b45 	vmov.f64	d7, d5
}  // getPitch() unit: degree(s)
 8000a22:	eeb0 0b47 	vmov.f64	d0, d7
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	16c16c17 	.word	0x16c16c17
 8000a34:	4066c16c 	.word	0x4066c16c

08000a38 <_ZN6CJY9016getYawEv>:

double CJY901::getYaw() {  // Z-axis
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  return JY901_data.angle.yaw / (32768.0 / 180.0);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8000a46:	ee07 3a90 	vmov	s15, r3
 8000a4a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a4e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000a68 <_ZN6CJY9016getYawEv+0x30>
 8000a52:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000a56:	eeb0 7b45 	vmov.f64	d7, d5
}  // getYaw() unit: degree(s)
 8000a5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	16c16c17 	.word	0x16c16c17
 8000a6c:	4066c16c 	.word	0x4066c16c

08000a70 <_Z41__static_initialization_and_destruction_0ii>:
	  HAL_UART_Transmit(_huart, JY901_GPSBAUDRATE, 5, 10);
  }
  //Serial1.write(JY901_GPSBAUDRATE, 5);
}

CJY901 JY901;
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d108      	bne.n	8000a92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d103      	bne.n	8000a92 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8000a8e:	f7ff fe15 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	24000238 	.word	0x24000238

08000aa0 <_GLOBAL__sub_I_JY901_SAVECONF>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f7ff ffe1 	bl	8000a70 <_Z41__static_initialization_and_destruction_0ii>
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_ZN3PIDIfEC1EPfS1_S1_fffh>:

template <typename T>
PID<T>::PID() { }

template <typename T>
PID<T>::PID(T *input, T *output, T *setpoint, T kp, T ki, T kd,uint8_t add_input)
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	61f8      	str	r0, [r7, #28]
 8000ab8:	61b9      	str	r1, [r7, #24]
 8000aba:	617a      	str	r2, [r7, #20]
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	ed87 0a03 	vstr	s0, [r7, #12]
 8000ac2:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ac6:	ed87 1a01 	vstr	s2, [r7, #4]
{
	output_   = output;
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	697a      	ldr	r2, [r7, #20]
 8000ace:	619a      	str	r2, [r3, #24]
	input_    = input;
 8000ad0:	69fb      	ldr	r3, [r7, #28]
 8000ad2:	69ba      	ldr	r2, [r7, #24]
 8000ad4:	615a      	str	r2, [r3, #20]
	setpoint_ = setpoint;
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	61da      	str	r2, [r3, #28]
//	mode_     = PID_MODE_MANUAL;
	
	PID<T>::set_tunings(kp, ki, kd, add_input);
 8000adc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	ed97 1a01 	vldr	s2, [r7, #4]
 8000ae6:	edd7 0a02 	vldr	s1, [r7, #8]
 8000aea:	ed97 0a03 	vldr	s0, [r7, #12]
 8000aee:	69f8      	ldr	r0, [r7, #28]
 8000af0:	f000 f80a 	bl	8000b08 <_ZN3PIDIfE11set_tuningsEfffh>
	
	last_time_ = HAL_GetTick();
 8000af4:	f006 fc58 	bl	80073a8 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	605a      	str	r2, [r3, #4]
}
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	4618      	mov	r0, r3
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <_ZN3PIDIfE11set_tuningsEfffh>:
}



template <typename T>
void PID<T>::set_tunings(T kp, T ki, T kd, uint8_t add_input)
 8000b08:	b480      	push	{r7}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6178      	str	r0, [r7, #20]
 8000b10:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b14:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b18:	ed87 1a02 	vstr	s2, [r7, #8]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	71fb      	strb	r3, [r7, #7]
{
	kp_=kp;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	609a      	str	r2, [r3, #8]
	ki_=ki;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	60da      	str	r2, [r3, #12]
	kd_=kd;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	68ba      	ldr	r2, [r7, #8]
 8000b30:	611a      	str	r2, [r3, #16]
	add_input_error_to_proportional_=add_input;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	79fa      	ldrb	r2, [r7, #7]
 8000b36:	701a      	strb	r2, [r3, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	371c      	adds	r7, #28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <QSPI_W25Q64JV_AutoPollingMemReady>:
/*
 * 写操作时先读取内部数据
 */
static uint8_t w25q64jv_buf[W25Q64JV_SECTOR_SIZE];

static int QSPI_W25Q64JV_AutoPollingMemReady(uint32_t timeout) {
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b096      	sub	sp, #88	; 0x58
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

    QSPI_CommandTypeDef cmd = {
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	2238      	movs	r2, #56	; 0x38
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f014 fd91 	bl	801567c <memset>
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	623b      	str	r3, [r7, #32]
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_STATUS_REG1,
        .DataMode = QSPI_DATA_1_LINE,
    };

    QSPI_AutoPollingTypeDef conf = {
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <QSPI_W25Q64JV_AutoPollingMemReady+0x60>)
 8000b6c:	f107 0408 	add.w	r4, r7, #8
 8000b70:	461d      	mov	r5, r3
 8000b72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b76:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b7a:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, timeout) != HAL_OK) {
 8000b7e:	f107 0208 	add.w	r2, r7, #8
 8000b82:	f107 0120 	add.w	r1, r7, #32
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <QSPI_W25Q64JV_AutoPollingMemReady+0x64>)
 8000b8a:	f00b fdc4 	bl	800c716 <HAL_QSPI_AutoPolling>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <QSPI_W25Q64JV_AutoPollingMemReady+0x56>
        return QSPI_ERROR;
 8000b94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b98:	e000      	b.n	8000b9c <QSPI_W25Q64JV_AutoPollingMemReady+0x58>
    }

    return QSPI_OK;
 8000b9a:	2300      	movs	r3, #0
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3758      	adds	r7, #88	; 0x58
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba4:	08017198 	.word	0x08017198
 8000ba8:	2400195c 	.word	0x2400195c

08000bac <QSPI_W25Q64JV_WriteEnable>:

static int QSPI_W25Q64JV_WriteEnable() {
 8000bac:	b5b0      	push	{r4, r5, r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	2238      	movs	r2, #56	; 0x38
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f014 fd5e 	bl	801567c <memset>
 8000bc0:	2306      	movs	r3, #6
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_WRITE_ENABLE,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000bd6:	f00b fc11 	bl	800c3fc <HAL_QSPI_Command>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <QSPI_W25Q64JV_WriteEnable+0x3a>
        return QSPI_ERROR;
 8000be0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000be4:	e023      	b.n	8000c2e <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
    cmd.Instruction = W25Q64JV_STATUS_REG1;
 8000bec:	2305      	movs	r3, #5
 8000bee:	61bb      	str	r3, [r7, #24]

    cmd.DataMode = QSPI_DATA_1_LINE;
 8000bf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    cmd.DummyCycles = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    cmd.NbData = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	643b      	str	r3, [r7, #64]	; 0x40

    QSPI_AutoPollingTypeDef conf = {
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <QSPI_W25Q64JV_WriteEnable+0x90>)
 8000c00:	463c      	mov	r4, r7
 8000c02:	461d      	mov	r5, r3
 8000c04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c08:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c0c:	e884 0003 	stmia.w	r4, {r0, r1}
        .StatusBytesSize = 1,
        .Interval = 0x10,
        .AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE,
    };

    if (HAL_QSPI_AutoPolling(&hqspi, &cmd, &conf, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c10:	463a      	mov	r2, r7
 8000c12:	f107 0118 	add.w	r1, r7, #24
 8000c16:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c1a:	4807      	ldr	r0, [pc, #28]	; (8000c38 <QSPI_W25Q64JV_WriteEnable+0x8c>)
 8000c1c:	f00b fd7b 	bl	800c716 <HAL_QSPI_AutoPolling>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <QSPI_W25Q64JV_WriteEnable+0x80>
        return QSPI_ERROR;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c2a:	e000      	b.n	8000c2e <QSPI_W25Q64JV_WriteEnable+0x82>
    }

    return QSPI_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3750      	adds	r7, #80	; 0x50
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bdb0      	pop	{r4, r5, r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2400195c 	.word	0x2400195c
 8000c3c:	080171b0 	.word	0x080171b0

08000c40 <QSPI_W25Q64JV_Init>:
void QSPI_W25Q64JV_Init() {
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <QSPI_W25Q64JV_Reset>:

int QSPI_W25Q64JV_Reset() {
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

    QSPI_CommandTypeDef cmd = {
 8000c56:	463b      	mov	r3, r7
 8000c58:	2238      	movs	r2, #56	; 0x38
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f014 fd0d 	bl	801567c <memset>
 8000c62:	2366      	movs	r3, #102	; 0x66
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6a:	61bb      	str	r3, [r7, #24]
        .InstructionMode = QSPI_INSTRUCTION_1_LINE,
        .Instruction = W25Q64JV_ENABLE_RESET,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c72:	4619      	mov	r1, r3
 8000c74:	4814      	ldr	r0, [pc, #80]	; (8000cc8 <QSPI_W25Q64JV_Reset+0x78>)
 8000c76:	f00b fbc1 	bl	800c3fc <HAL_QSPI_Command>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <QSPI_W25Q64JV_Reset+0x36>
        return QSPI_ERROR;
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c84:	e01c      	b.n	8000cc0 <QSPI_W25Q64JV_Reset+0x70>
    }

    cmd.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8a:	61bb      	str	r3, [r7, #24]
    cmd.Instruction = W25Q64JV_RESET_DEVICE;
 8000c8c:	2399      	movs	r3, #153	; 0x99
 8000c8e:	603b      	str	r3, [r7, #0]
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000c90:	463b      	mov	r3, r7
 8000c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c96:	4619      	mov	r1, r3
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <QSPI_W25Q64JV_Reset+0x78>)
 8000c9a:	f00b fbaf 	bl	800c3fc <HAL_QSPI_Command>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <QSPI_W25Q64JV_Reset+0x5a>
        return QSPI_ERROR;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	e00a      	b.n	8000cc0 <QSPI_W25Q64JV_Reset+0x70>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000caa:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cae:	f7ff ff49 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <QSPI_W25Q64JV_Reset+0x6e>
        return QSPI_ERROR;
 8000cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cbc:	e000      	b.n	8000cc0 <QSPI_W25Q64JV_Reset+0x70>
    }

    return QSPI_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3738      	adds	r7, #56	; 0x38
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	2400195c 	.word	0x2400195c

08000ccc <QSPI_W25Q64JV_EraseSector>:

int QSPI_W25Q64JV_EraseSector(uint32_t SectorAddress) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	; 0x40
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000cd4:	f7ff ff6a 	bl	8000bac <QSPI_W25Q64JV_WriteEnable>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <QSPI_W25Q64JV_EraseSector+0x18>
        return QSPI_ERROR;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ce2:	e02c      	b.n	8000d3e <QSPI_W25Q64JV_EraseSector+0x72>
    }

    QSPI_CommandTypeDef cmd = {
 8000ce4:	f107 0308 	add.w	r3, r7, #8
 8000ce8:	2238      	movs	r2, #56	; 0x38
 8000cea:	2100      	movs	r1, #0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f014 fcc5 	bl	801567c <memset>
 8000cf2:	2320      	movs	r3, #32
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d04:	623b      	str	r3, [r7, #32]
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
        .AddressMode = QSPI_ADDRESS_1_LINE,
        .Address = SectorAddress,
        .AddressSize = QSPI_ADDRESS_24_BITS,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000d0c:	f107 0308 	add.w	r3, r7, #8
 8000d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d14:	4619      	mov	r1, r3
 8000d16:	480c      	ldr	r0, [pc, #48]	; (8000d48 <QSPI_W25Q64JV_EraseSector+0x7c>)
 8000d18:	f00b fb70 	bl	800c3fc <HAL_QSPI_Command>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <QSPI_W25Q64JV_EraseSector+0x5c>
        return QSPI_ERROR;
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d26:	e00a      	b.n	8000d3e <QSPI_W25Q64JV_EraseSector+0x72>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d28:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d2c:	f7ff ff0a 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <QSPI_W25Q64JV_EraseSector+0x70>
        return QSPI_ERROR;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d3a:	e000      	b.n	8000d3e <QSPI_W25Q64JV_EraseSector+0x72>
    }

    return QSPI_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3740      	adds	r7, #64	; 0x40
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2400195c 	.word	0x2400195c

08000d4c <QSPI_W25Q64JV_Read>:

int QSPI_W25Q64JV_Read(uint8_t *pData, uint32_t ReadAddr, uint32_t Size) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b092      	sub	sp, #72	; 0x48
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000d58:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d5c:	f7ff fef2 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d002      	beq.n	8000d6c <QSPI_W25Q64JV_Read+0x20>
        return QSPI_ERROR;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d6a:	e044      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    QSPI_CommandTypeDef cmd = {
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2238      	movs	r2, #56	; 0x38
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f014 fc81 	bl	801567c <memset>
 8000d7a:	23eb      	movs	r3, #235	; 0xeb
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	617b      	str	r3, [r7, #20]
 8000d82:	23f0      	movs	r3, #240	; 0xf0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d9c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000da0:	633b      	str	r3, [r7, #48]	; 0x30
 8000da2:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000da6:	637b      	str	r3, [r7, #52]	; 0x34
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	63bb      	str	r3, [r7, #56]	; 0x38
        .DataMode = QSPI_DATA_4_LINES,
        .DummyCycles = 4,
        .NbData = Size,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000db4:	4619      	mov	r1, r3
 8000db6:	4812      	ldr	r0, [pc, #72]	; (8000e00 <QSPI_W25Q64JV_Read+0xb4>)
 8000db8:	f00b fb20 	bl	800c3fc <HAL_QSPI_Command>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d002      	beq.n	8000dc8 <QSPI_W25Q64JV_Read+0x7c>
        return QSPI_ERROR;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dc6:	e016      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    if (HAL_QSPI_Receive(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dcc:	68f9      	ldr	r1, [r7, #12]
 8000dce:	480c      	ldr	r0, [pc, #48]	; (8000e00 <QSPI_W25Q64JV_Read+0xb4>)
 8000dd0:	f00b fc04 	bl	800c5dc <HAL_QSPI_Receive>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d002      	beq.n	8000de0 <QSPI_W25Q64JV_Read+0x94>
        return QSPI_ERROR;
 8000dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dde:	e00a      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000de0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000de4:	f7ff feae 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d002      	beq.n	8000df4 <QSPI_W25Q64JV_Read+0xa8>
        return QSPI_ERROR;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000df2:	e000      	b.n	8000df6 <QSPI_W25Q64JV_Read+0xaa>
    }

    return QSPI_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3748      	adds	r7, #72	; 0x48
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2400195c 	.word	0x2400195c

08000e04 <QSPI_W25Q64JV_PageProgram>:

int QSPI_W25Q64JV_PageProgram(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b092      	sub	sp, #72	; 0x48
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e10:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e14:	f7ff fe96 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d002      	beq.n	8000e24 <QSPI_W25Q64JV_PageProgram+0x20>
        return QSPI_ERROR;
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e22:	e045      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_WriteEnable() != QSPI_OK) {
 8000e24:	f7ff fec2 	bl	8000bac <QSPI_W25Q64JV_WriteEnable>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d002      	beq.n	8000e34 <QSPI_W25Q64JV_PageProgram+0x30>
        return QSPI_ERROR;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e32:	e03d      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    QSPI_CommandTypeDef cmd = {
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2238      	movs	r2, #56	; 0x38
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f014 fc1d 	bl	801567c <memset>
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4e:	61fb      	str	r3, [r7, #28]
 8000e50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .DummyCycles = 0,
        .NbData = Size,
    };
    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000e72:	f00b fac3 	bl	800c3fc <HAL_QSPI_Command>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <QSPI_W25Q64JV_PageProgram+0x7e>
        return QSPI_ERROR;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e80:	e016      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (HAL_QSPI_Transmit(&hqspi, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 8000e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e86:	68f9      	ldr	r1, [r7, #12]
 8000e88:	480b      	ldr	r0, [pc, #44]	; (8000eb8 <QSPI_W25Q64JV_PageProgram+0xb4>)
 8000e8a:	f00b fb15 	bl	800c4b8 <HAL_QSPI_Transmit>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d002      	beq.n	8000e9a <QSPI_W25Q64JV_PageProgram+0x96>
        return QSPI_ERROR;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e98:	e00a      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    if (QSPI_W25Q64JV_AutoPollingMemReady(HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK) {
 8000e9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e9e:	f7ff fe51 	bl	8000b44 <QSPI_W25Q64JV_AutoPollingMemReady>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <QSPI_W25Q64JV_PageProgram+0xaa>
        return QSPI_ERROR;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000eac:	e000      	b.n	8000eb0 <QSPI_W25Q64JV_PageProgram+0xac>
    }

    return QSPI_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3748      	adds	r7, #72	; 0x48
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2400195c 	.word	0x2400195c

08000ebc <QSPI_W25Q64JV_Write_NoCheck>:

/*
 * 必须确保写的地址范围内的数据全部为0xFF
 * 具有自动换页的功能
 */
int QSPI_W25Q64JV_Write_NoCheck(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
    uint32_t pageremain = W25Q64JV_PAGE_SIZE - WriteAddr % W25Q64JV_PAGE_SIZE;
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000ed4:	617b      	str	r3, [r7, #20]
    if (Size <= pageremain) {
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d801      	bhi.n	8000ee2 <QSPI_W25Q64JV_Write_NoCheck+0x26>
        pageremain = Size;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	617b      	str	r3, [r7, #20]
    }
    while (1) {
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	f7ff ff8c 	bl	8000e04 <QSPI_W25Q64JV_PageProgram>
 8000eec:	6138      	str	r0, [r7, #16]
        if (ret != QSPI_OK || Size == pageremain) break;
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d117      	bne.n	8000f24 <QSPI_W25Q64JV_Write_NoCheck+0x68>
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d013      	beq.n	8000f24 <QSPI_W25Q64JV_Write_NoCheck+0x68>
        pData += pageremain;
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	60fb      	str	r3, [r7, #12]
        WriteAddr += pageremain;
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	4413      	add	r3, r2
 8000f0a:	60bb      	str	r3, [r7, #8]
        Size -= pageremain;
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	607b      	str	r3, [r7, #4]
        pageremain = Size > W25Q64JV_PAGE_SIZE ? W25Q64JV_PAGE_SIZE : Size;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f1a:	bf28      	it	cs
 8000f1c:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8000f20:	617b      	str	r3, [r7, #20]
        ret = QSPI_W25Q64JV_PageProgram(pData, WriteAddr, pageremain);
 8000f22:	e7de      	b.n	8000ee2 <QSPI_W25Q64JV_Write_NoCheck+0x26>
    }
    return ret;
 8000f24:	693b      	ldr	r3, [r7, #16]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <QSPI_W25Q64JV_Write>:

int QSPI_W25Q64JV_Write(uint8_t *pData, uint32_t WriteAddr, uint32_t Size) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
    int ret = QSPI_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    uint32_t secpos = WriteAddr / W25Q64JV_SECTOR_SIZE;
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	0b1b      	lsrs	r3, r3, #12
 8000f44:	61bb      	str	r3, [r7, #24]
    uint16_t secoff = WriteAddr % W25Q64JV_SECTOR_SIZE;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f4e:	82fb      	strh	r3, [r7, #22]
    uint16_t secremain = W25Q64JV_SECTOR_SIZE - secoff;
 8000f50:	8afb      	ldrh	r3, [r7, #22]
 8000f52:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000f56:	82bb      	strh	r3, [r7, #20]
    uint32_t i;
    while (1) {
    	if (Size <= secremain) secremain = Size;
 8000f58:	8abb      	ldrh	r3, [r7, #20]
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d801      	bhi.n	8000f64 <QSPI_W25Q64JV_Write+0x34>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	82bb      	strh	r3, [r7, #20]
        ret = QSPI_W25Q64JV_Read(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);  //读出整个扇区的内容
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	031b      	lsls	r3, r3, #12
 8000f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4835      	ldr	r0, [pc, #212]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000f70:	f7ff feec 	bl	8000d4c <QSPI_W25Q64JV_Read>
 8000f74:	61f8      	str	r0, [r7, #28]
        if (ret != QSPI_OK) break;
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d157      	bne.n	800102c <QSPI_W25Q64JV_Write+0xfc>
        for (i = 0; i < secremain; i++) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	613b      	str	r3, [r7, #16]
 8000f80:	e009      	b.n	8000f96 <QSPI_W25Q64JV_Write+0x66>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000f82:	8afa      	ldrh	r2, [r7, #22]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a2e      	ldr	r2, [pc, #184]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000f8a:	5cd3      	ldrb	r3, [r2, r3]
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d107      	bne.n	8000fa0 <QSPI_W25Q64JV_Write+0x70>
        for (i = 0; i < secremain; i++) {
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	3301      	adds	r3, #1
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	8abb      	ldrh	r3, [r7, #20]
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3f1      	bcc.n	8000f82 <QSPI_W25Q64JV_Write+0x52>
 8000f9e:	e000      	b.n	8000fa2 <QSPI_W25Q64JV_Write+0x72>
            if (w25q64jv_buf[secoff + i] != 0xFF) break;
 8000fa0:	bf00      	nop
        }
        if (i < secremain) {
 8000fa2:	8abb      	ldrh	r3, [r7, #20]
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	d21d      	bcs.n	8000fe6 <QSPI_W25Q64JV_Write+0xb6>
            ret = QSPI_W25Q64JV_EraseSector(secpos * W25Q64JV_SECTOR_SIZE);
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	031b      	lsls	r3, r3, #12
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fe8c 	bl	8000ccc <QSPI_W25Q64JV_EraseSector>
 8000fb4:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d139      	bne.n	8001030 <QSPI_W25Q64JV_Write+0x100>
            memcpy(w25q64jv_buf + secoff, pData, secremain);
 8000fbc:	8afb      	ldrh	r3, [r7, #22]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000fc0:	4413      	add	r3, r2
 8000fc2:	8aba      	ldrh	r2, [r7, #20]
 8000fc4:	68f9      	ldr	r1, [r7, #12]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f014 fc2b 	bl	8015822 <memcpy>
            ret = QSPI_W25Q64JV_Write_NoCheck(w25q64jv_buf, secpos * W25Q64JV_SECTOR_SIZE, W25Q64JV_SECTOR_SIZE);
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	031b      	lsls	r3, r3, #12
 8000fd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <QSPI_W25Q64JV_Write+0x114>)
 8000fd8:	f7ff ff70 	bl	8000ebc <QSPI_W25Q64JV_Write_NoCheck>
 8000fdc:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00a      	beq.n	8000ffa <QSPI_W25Q64JV_Write+0xca>
 8000fe4:	e029      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
        } else {
            ret = QSPI_W25Q64JV_Write_NoCheck(pData, WriteAddr, secremain);
 8000fe6:	8abb      	ldrh	r3, [r7, #20]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68b9      	ldr	r1, [r7, #8]
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f7ff ff65 	bl	8000ebc <QSPI_W25Q64JV_Write_NoCheck>
 8000ff2:	61f8      	str	r0, [r7, #28]
            if (ret != QSPI_OK) break;
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d11c      	bne.n	8001034 <QSPI_W25Q64JV_Write+0x104>
        }
        if (Size == secremain) break;
 8000ffa:	8abb      	ldrh	r3, [r7, #20]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d01a      	beq.n	8001038 <QSPI_W25Q64JV_Write+0x108>
        secpos++;
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	3301      	adds	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
        secoff = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	82fb      	strh	r3, [r7, #22]
        pData += secremain;
 800100c:	8abb      	ldrh	r3, [r7, #20]
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	4413      	add	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]
        WriteAddr += secremain;
 8001014:	8abb      	ldrh	r3, [r7, #20]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
        Size -= secremain;
 800101c:	8abb      	ldrh	r3, [r7, #20]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	607b      	str	r3, [r7, #4]
        secremain = (Size - W25Q64JV_SECTOR_SIZE) ? W25Q64JV_SECTOR_SIZE : Size;
 8001024:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001028:	82bb      	strh	r3, [r7, #20]
    	if (Size <= secremain) secremain = Size;
 800102a:	e795      	b.n	8000f58 <QSPI_W25Q64JV_Write+0x28>
        if (ret != QSPI_OK) break;
 800102c:	bf00      	nop
 800102e:	e004      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001030:	bf00      	nop
 8001032:	e002      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
            if (ret != QSPI_OK) break;
 8001034:	bf00      	nop
 8001036:	e000      	b.n	800103a <QSPI_W25Q64JV_Write+0x10a>
        if (Size == secremain) break;
 8001038:	bf00      	nop
    }
    return ret;
 800103a:	69fb      	ldr	r3, [r7, #28]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	240002bc 	.word	0x240002bc

08001048 <QSPI_W25Q64JV_DeviceID>:
    }

    return QSPI_OK;
}

int QSPI_W25Q64JV_DeviceID(uint8_t id[2]) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
    QSPI_CommandTypeDef cmd = {
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	2238      	movs	r2, #56	; 0x38
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f014 fb0f 	bl	801567c <memset>
 800105e:	2390      	movs	r3, #144	; 0x90
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001066:	617b      	str	r3, [r7, #20]
 8001068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
 8001074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001078:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107a:	2302      	movs	r3, #2
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
        .AddressSize = QSPI_ADDRESS_24_BITS,
        .DataMode = QSPI_DATA_1_LINE,
        .NbData = 2,
    };

    if (HAL_QSPI_Command(&hqspi, &cmd, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	f241 3288 	movw	r2, #5000	; 0x1388
 8001086:	4619      	mov	r1, r3
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <QSPI_W25Q64JV_DeviceID+0x74>)
 800108a:	f00b f9b7 	bl	800c3fc <HAL_QSPI_Command>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d002      	beq.n	800109a <QSPI_W25Q64JV_DeviceID+0x52>
        return QSPI_ERROR;
 8001094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001098:	e00c      	b.n	80010b4 <QSPI_W25Q64JV_DeviceID+0x6c>
    }

    if (HAL_QSPI_Receive(&hqspi, id, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
 800109a:	f241 3288 	movw	r2, #5000	; 0x1388
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	4806      	ldr	r0, [pc, #24]	; (80010bc <QSPI_W25Q64JV_DeviceID+0x74>)
 80010a2:	f00b fa9b 	bl	800c5dc <HAL_QSPI_Receive>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d002      	beq.n	80010b2 <QSPI_W25Q64JV_DeviceID+0x6a>
        return QSPI_ERROR;
 80010ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010b0:	e000      	b.n	80010b4 <QSPI_W25Q64JV_DeviceID+0x6c>
    }
    return QSPI_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3740      	adds	r7, #64	; 0x40
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	2400195c 	.word	0x2400195c

080010c0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PUTCHAR_PROTOTYPE
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart7, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010c8:	1d39      	adds	r1, r7, #4
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	2201      	movs	r2, #1
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <__io_putchar+0x20>)
 80010d2:	f011 faed 	bl	80126b0 <HAL_UART_Transmit>
  return ch;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	24001564 	.word	0x24001564

080010e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e8:	f006 f8d8 	bl	800729c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ec:	f000 f828 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f0:	f000 fe7a 	bl	8001de8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f4:	f000 fe30 	bl	8001d58 <MX_DMA_Init>
  MX_BDMA_Init();
 80010f8:	f000 fe0e 	bl	8001d18 <MX_BDMA_Init>
  MX_UART8_Init();
 80010fc:	f000 fada 	bl	80016b4 <MX_UART8_Init>
  MX_UART4_Init();
 8001100:	f000 f9f4 	bl	80014ec <MX_UART4_Init>
  MX_QUADSPI_Init();
 8001104:	f000 fb22 	bl	800174c <MX_QUADSPI_Init>
  MX_ADC1_Init();
 8001108:	f000 f896 	bl	8001238 <MX_ADC1_Init>
  MX_UART5_Init();
 800110c:	f000 fa3a 	bl	8001584 <MX_UART5_Init>
  MX_UART7_Init();
 8001110:	f000 fa84 	bl	800161c <MX_UART7_Init>
  MX_LPUART1_UART_Init();
 8001114:	f000 f99c 	bl	8001450 <MX_LPUART1_UART_Init>
  MX_TIM2_Init();
 8001118:	f000 fb44 	bl	80017a4 <MX_TIM2_Init>
  MX_TIM16_Init();
 800111c:	f000 fdd4 	bl	8001cc8 <MX_TIM16_Init>
  MX_TIM3_Init();
 8001120:	f000 fbd8 	bl	80018d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001124:	f000 fc58 	bl	80019d8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8001128:	f000 fd2c 	bl	8001b84 <MX_TIM15_Init>
  MX_IWDG1_Init();
 800112c:	f000 f972 	bl	8001414 <MX_IWDG1_Init>
  MX_TIM6_Init();
 8001130:	f000 fcf0 	bl	8001b14 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  setup();
 8001134:	f003 ff34 	bl	8004fa0 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8001138:	f003 ff5c 	bl	8004ff4 <loop>
  {
 800113c:	e7fc      	b.n	8001138 <main+0x54>
	...

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b09c      	sub	sp, #112	; 0x70
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114a:	224c      	movs	r2, #76	; 0x4c
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f014 fa94 	bl	801567c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2220      	movs	r2, #32
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f014 fa8e 	bl	801567c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001160:	2002      	movs	r0, #2
 8001162:	f00b f89d 	bl	800c2a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	2300      	movs	r3, #0
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	4b31      	ldr	r3, [pc, #196]	; (8001230 <SystemClock_Config+0xf0>)
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	4a30      	ldr	r2, [pc, #192]	; (8001230 <SystemClock_Config+0xf0>)
 8001170:	f023 0301 	bic.w	r3, r3, #1
 8001174:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001176:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <SystemClock_Config+0xf0>)
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <SystemClock_Config+0xf4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <SystemClock_Config+0xf4>)
 8001186:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <SystemClock_Config+0xf4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001198:	bf00      	nop
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <SystemClock_Config+0xf4>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a6:	d1f8      	bne.n	800119a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80011a8:	2309      	movs	r3, #9
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80011be:	2305      	movs	r3, #5
 80011c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80011c2:	23a0      	movs	r3, #160	; 0xa0
 80011c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011c6:	2302      	movs	r3, #2
 80011c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80011d2:	2308      	movs	r3, #8
 80011d4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00b fcda 	bl	800cb9c <HAL_RCC_OscConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011ee:	f000 fec1 	bl	8001f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	233f      	movs	r3, #63	; 0x3f
 80011f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f6:	2303      	movs	r3, #3
 80011f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011fe:	2308      	movs	r3, #8
 8001200:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001206:	2350      	movs	r3, #80	; 0x50
 8001208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800120a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800120e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001210:	2350      	movs	r3, #80	; 0x50
 8001212:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001214:	1d3b      	adds	r3, r7, #4
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f00c f919 	bl	800d450 <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001224:	f000 fea6 	bl	8001f74 <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3770      	adds	r7, #112	; 0x70
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	58000400 	.word	0x58000400
 8001234:	58024800 	.word	0x58024800

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	; 0x28
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800125c:	4b63      	ldr	r3, [pc, #396]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800125e:	4a64      	ldr	r2, [pc, #400]	; (80013f0 <MX_ADC1_Init+0x1b8>)
 8001260:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001262:	4b62      	ldr	r3, [pc, #392]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001264:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001268:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800126a:	4b60      	ldr	r3, [pc, #384]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001270:	4b5e      	ldr	r3, [pc, #376]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001272:	2201      	movs	r2, #1
 8001274:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b5d      	ldr	r3, [pc, #372]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001278:	2204      	movs	r2, #4
 800127a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800127c:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001282:	4b5a      	ldr	r3, [pc, #360]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001284:	2201      	movs	r2, #1
 8001286:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 8;
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800128a:	2208      	movs	r2, #8
 800128c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b57      	ldr	r3, [pc, #348]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001290:	2200      	movs	r2, #0
 8001292:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001294:	4b55      	ldr	r3, [pc, #340]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129a:	4b54      	ldr	r3, [pc, #336]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800129c:	2200      	movs	r2, #0
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012a2:	2203      	movs	r2, #3
 80012a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012a6:	4b51      	ldr	r3, [pc, #324]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ba:	484c      	ldr	r0, [pc, #304]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012bc:	f006 fab8 	bl	8007830 <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012c6:	f000 fe55 	bl	8001f74 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4845      	ldr	r0, [pc, #276]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80012d6:	f007 fd45 	bl	8008d64 <HAL_ADCEx_MultiModeConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012e0:	f000 fe48 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e4:	4b43      	ldr	r3, [pc, #268]	; (80013f4 <MX_ADC1_Init+0x1bc>)
 80012e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012e8:	2306      	movs	r3, #6
 80012ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80012ec:	2304      	movs	r3, #4
 80012ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012f0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012f6:	2304      	movs	r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	4619      	mov	r1, r3
 8001306:	4839      	ldr	r0, [pc, #228]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001308:	f006 ff5a 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001312:	f000 fe2f 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001316:	4b38      	ldr	r3, [pc, #224]	; (80013f8 <MX_ADC1_Init+0x1c0>)
 8001318:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800131a:	230c      	movs	r3, #12
 800131c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131e:	463b      	mov	r3, r7
 8001320:	4619      	mov	r1, r3
 8001322:	4832      	ldr	r0, [pc, #200]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001324:	f006 ff4c 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800132e:	f000 fe21 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <MX_ADC1_Init+0x1c4>)
 8001334:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001336:	2312      	movs	r3, #18
 8001338:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	482b      	ldr	r0, [pc, #172]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001340:	f006 ff3e 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800134a:	f000 fe13 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800134e:	4b2c      	ldr	r3, [pc, #176]	; (8001400 <MX_ADC1_Init+0x1c8>)
 8001350:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001352:	2318      	movs	r3, #24
 8001354:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001356:	463b      	mov	r3, r7
 8001358:	4619      	mov	r1, r3
 800135a:	4824      	ldr	r0, [pc, #144]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800135c:	f006 ff30 	bl	80081c0 <HAL_ADC_ConfigChannel>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001366:	f000 fe05 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800136a:	4b26      	ldr	r3, [pc, #152]	; (8001404 <MX_ADC1_Init+0x1cc>)
 800136c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800136e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001374:	463b      	mov	r3, r7
 8001376:	4619      	mov	r1, r3
 8001378:	481c      	ldr	r0, [pc, #112]	; (80013ec <MX_ADC1_Init+0x1b4>)
 800137a:	f006 ff21 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8001384:	f000 fdf6 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001388:	4b1f      	ldr	r3, [pc, #124]	; (8001408 <MX_ADC1_Init+0x1d0>)
 800138a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800138c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8001390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001392:	463b      	mov	r3, r7
 8001394:	4619      	mov	r1, r3
 8001396:	4815      	ldr	r0, [pc, #84]	; (80013ec <MX_ADC1_Init+0x1b4>)
 8001398:	f006 ff12 	bl	80081c0 <HAL_ADC_ConfigChannel>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80013a2:	f000 fde7 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013a6:	4b19      	ldr	r3, [pc, #100]	; (800140c <MX_ADC1_Init+0x1d4>)
 80013a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80013aa:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80013ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80013b6:	f006 ff03 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 80013c0:	f000 fdd8 	bl	8001f74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_ADC1_Init+0x1d8>)
 80013c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80013c8:	f44f 7389 	mov.w	r3, #274	; 0x112
 80013cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ce:	463b      	mov	r3, r7
 80013d0:	4619      	mov	r1, r3
 80013d2:	4806      	ldr	r0, [pc, #24]	; (80013ec <MX_ADC1_Init+0x1b4>)
 80013d4:	f006 fef4 	bl	80081c0 <HAL_ADC_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_ADC1_Init+0x1aa>
  {
    Error_Handler();
 80013de:	f000 fdc9 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	3728      	adds	r7, #40	; 0x28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	240012bc 	.word	0x240012bc
 80013f0:	40022000 	.word	0x40022000
 80013f4:	0c900008 	.word	0x0c900008
 80013f8:	10c00010 	.word	0x10c00010
 80013fc:	14f00020 	.word	0x14f00020
 8001400:	21800100 	.word	0x21800100
 8001404:	25b00200 	.word	0x25b00200
 8001408:	2a000400 	.word	0x2a000400
 800140c:	2e300800 	.word	0x2e300800
 8001410:	4b840000 	.word	0x4b840000

08001414 <MX_IWDG1_Init>:
  * @brief IWDG1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG1_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <MX_IWDG1_Init+0x34>)
 800141a:	4a0c      	ldr	r2, [pc, #48]	; (800144c <MX_IWDG1_Init+0x38>)
 800141c:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_32;
 800141e:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <MX_IWDG1_Init+0x34>)
 8001420:	2203      	movs	r2, #3
 8001422:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 1999;
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <MX_IWDG1_Init+0x34>)
 8001426:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800142a:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 1999;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <MX_IWDG1_Init+0x34>)
 800142e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001432:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <MX_IWDG1_Init+0x34>)
 8001436:	f00a fed4 	bl	800c1e2 <HAL_IWDG_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8001440:	f000 fd98 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	24001398 	.word	0x24001398
 800144c:	58004800 	.word	0x58004800

08001450 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <MX_LPUART1_UART_Init+0x94>)
 8001458:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800145a:	4b21      	ldr	r3, [pc, #132]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <MX_LPUART1_UART_Init+0x98>)
 800145e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800146c:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001472:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001474:	220c      	movs	r2, #12
 8001476:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 8001498:	f011 f8ba 	bl	8012610 <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80014a2:	f000 fd67 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 80014aa:	f013 f877 	bl	801459c <HAL_UARTEx_SetTxFifoThreshold>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80014b4:	f000 fd5e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 80014bc:	f013 f8ac 	bl	8014618 <HAL_UARTEx_SetRxFifoThreshold>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80014c6:	f000 fd55 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_LPUART1_UART_Init+0x90>)
 80014cc:	f013 f82d 	bl	801452a <HAL_UARTEx_DisableFifoMode>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80014d6:	f000 fd4d 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	240013a8 	.word	0x240013a8
 80014e4:	58000c00 	.word	0x58000c00
 80014e8:	00033324 	.word	0x00033324

080014ec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014f0:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_UART4_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	; (8001580 <MX_UART4_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 230400;
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <MX_UART4_Init+0x90>)
 80014f8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80014fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_UART4_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_UART4_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_UART4_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_UART4_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_UART4_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	; (800157c <MX_UART4_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_UART4_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	; (800157c <MX_UART4_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	; (800157c <MX_UART4_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_UART4_Init+0x90>)
 8001536:	f011 f86b 	bl	8012610 <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 fd18 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_UART4_Init+0x90>)
 8001548:	f013 f828 	bl	801459c <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 fd0f 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_UART4_Init+0x90>)
 800155a:	f013 f85d 	bl	8014618 <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 fd06 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_UART4_Init+0x90>)
 800156a:	f012 ffde 	bl	801452a <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 fcfe 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2400143c 	.word	0x2400143c
 8001580:	40004c00 	.word	0x40004c00

08001584 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <MX_UART5_Init+0x90>)
 800158a:	4a23      	ldr	r2, [pc, #140]	; (8001618 <MX_UART5_Init+0x94>)
 800158c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <MX_UART5_Init+0x90>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <MX_UART5_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <MX_UART5_Init+0x90>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <MX_UART5_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b1a      	ldr	r3, [pc, #104]	; (8001614 <MX_UART5_Init+0x90>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_UART5_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_UART5_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_UART5_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_UART5_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_UART5_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80015cc:	4811      	ldr	r0, [pc, #68]	; (8001614 <MX_UART5_Init+0x90>)
 80015ce:	f011 f81f 	bl	8012610 <HAL_UART_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80015d8:	f000 fccc 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015dc:	2100      	movs	r1, #0
 80015de:	480d      	ldr	r0, [pc, #52]	; (8001614 <MX_UART5_Init+0x90>)
 80015e0:	f012 ffdc 	bl	801459c <HAL_UARTEx_SetTxFifoThreshold>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80015ea:	f000 fcc3 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	4808      	ldr	r0, [pc, #32]	; (8001614 <MX_UART5_Init+0x90>)
 80015f2:	f013 f811 	bl	8014618 <HAL_UARTEx_SetRxFifoThreshold>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 80015fc:	f000 fcba 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <MX_UART5_Init+0x90>)
 8001602:	f012 ff92 	bl	801452a <HAL_UARTEx_DisableFifoMode>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 fcb2 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	240014d0 	.word	0x240014d0
 8001618:	40005000 	.word	0x40005000

0800161c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001620:	4b22      	ldr	r3, [pc, #136]	; (80016ac <MX_UART7_Init+0x90>)
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <MX_UART7_Init+0x94>)
 8001624:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001626:	4b21      	ldr	r3, [pc, #132]	; (80016ac <MX_UART7_Init+0x90>)
 8001628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800162c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <MX_UART7_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_UART7_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_UART7_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_UART7_Init+0x90>)
 8001642:	220c      	movs	r2, #12
 8001644:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_UART7_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_UART7_Init+0x90>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_UART7_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_UART7_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <MX_UART7_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <MX_UART7_Init+0x90>)
 8001666:	f010 ffd3 	bl	8012610 <HAL_UART_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8001670:	f000 fc80 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001674:	2100      	movs	r1, #0
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_UART7_Init+0x90>)
 8001678:	f012 ff90 	bl	801459c <HAL_UARTEx_SetTxFifoThreshold>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8001682:	f000 fc77 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001686:	2100      	movs	r1, #0
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <MX_UART7_Init+0x90>)
 800168a:	f012 ffc5 	bl	8014618 <HAL_UARTEx_SetRxFifoThreshold>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8001694:	f000 fc6e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_UART7_Init+0x90>)
 800169a:	f012 ff46 	bl	801452a <HAL_UARTEx_DisableFifoMode>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80016a4:	f000 fc66 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	24001564 	.word	0x24001564
 80016b0:	40007800 	.word	0x40007800

080016b4 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80016b8:	4b22      	ldr	r3, [pc, #136]	; (8001744 <MX_UART8_Init+0x90>)
 80016ba:	4a23      	ldr	r2, [pc, #140]	; (8001748 <MX_UART8_Init+0x94>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_UART8_Init+0x90>)
 80016c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_UART8_Init+0x90>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_UART8_Init+0x90>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_UART8_Init+0x90>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_UART8_Init+0x90>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_UART8_Init+0x90>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_UART8_Init+0x90>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <MX_UART8_Init+0x90>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_UART8_Init+0x90>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_UART8_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80016fc:	4811      	ldr	r0, [pc, #68]	; (8001744 <MX_UART8_Init+0x90>)
 80016fe:	f010 ff87 	bl	8012610 <HAL_UART_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8001708:	f000 fc34 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800170c:	2100      	movs	r1, #0
 800170e:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_UART8_Init+0x90>)
 8001710:	f012 ff44 	bl	801459c <HAL_UARTEx_SetTxFifoThreshold>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800171a:	f000 fc2b 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4808      	ldr	r0, [pc, #32]	; (8001744 <MX_UART8_Init+0x90>)
 8001722:	f012 ff79 	bl	8014618 <HAL_UARTEx_SetRxFifoThreshold>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800172c:	f000 fc22 	bl	8001f74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	; (8001744 <MX_UART8_Init+0x90>)
 8001732:	f012 fefa 	bl	801452a <HAL_UARTEx_DisableFifoMode>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800173c:	f000 fc1a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	240015f8 	.word	0x240015f8
 8001748:	40007c00 	.word	0x40007c00

0800174c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <MX_QUADSPI_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 10;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001758:	220a      	movs	r2, #10
 800175a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 800175c:	4b0f      	ldr	r3, [pc, #60]	; (800179c <MX_QUADSPI_Init+0x50>)
 800175e:	2201      	movs	r2, #1
 8001760:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001764:	2210      	movs	r2, #16
 8001766:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_QUADSPI_Init+0x50>)
 800176a:	2216      	movs	r2, #22
 800176c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_5_CYCLE;
 800176e:	4b0b      	ldr	r3, [pc, #44]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001770:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001774:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 800177c:	4b07      	ldr	r3, [pc, #28]	; (800179c <MX_QUADSPI_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_QUADSPI_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_QUADSPI_Init+0x50>)
 800178a:	f00a fdc3 	bl	800c314 <HAL_QSPI_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 fbee 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2400195c 	.word	0x2400195c
 80017a0:	52005000 	.word	0x52005000

080017a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c4:	463b      	mov	r3, r7
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]
 80017d2:	615a      	str	r2, [r3, #20]
 80017d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017e0:	2263      	movs	r2, #99	; 0x63
 80017e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017fe:	4834      	ldr	r0, [pc, #208]	; (80018d0 <MX_TIM2_Init+0x12c>)
 8001800:	f00e feb0 	bl	8010564 <HAL_TIM_Base_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800180a:	f000 fbb3 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001818:	4619      	mov	r1, r3
 800181a:	482d      	ldr	r0, [pc, #180]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800181c:	f00f fe68 	bl	80114f0 <HAL_TIM_ConfigClockSource>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001826:	f000 fba5 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800182a:	4829      	ldr	r0, [pc, #164]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800182c:	f00e ff6a 	bl	8010704 <HAL_TIM_PWM_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001836:	f000 fb9d 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	4821      	ldr	r0, [pc, #132]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800184a:	f010 fe35 	bl	80124b8 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001854:	f000 fb8e 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001858:	2360      	movs	r3, #96	; 0x60
 800185a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4818      	ldr	r0, [pc, #96]	; (80018d0 <MX_TIM2_Init+0x12c>)
 8001870:	f00f fd2a 	bl	80112c8 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800187a:	f000 fb7b 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800187e:	463b      	mov	r3, r7
 8001880:	2204      	movs	r2, #4
 8001882:	4619      	mov	r1, r3
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <MX_TIM2_Init+0x12c>)
 8001886:	f00f fd1f 	bl	80112c8 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001890:	f000 fb70 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	2208      	movs	r2, #8
 8001898:	4619      	mov	r1, r3
 800189a:	480d      	ldr	r0, [pc, #52]	; (80018d0 <MX_TIM2_Init+0x12c>)
 800189c:	f00f fd14 	bl	80112c8 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80018a6:	f000 fb65 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018aa:	463b      	mov	r3, r7
 80018ac:	220c      	movs	r2, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	4807      	ldr	r0, [pc, #28]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80018b2:	f00f fd09 	bl	80112c8 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80018bc:	f000 fb5a 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018c0:	4803      	ldr	r0, [pc, #12]	; (80018d0 <MX_TIM2_Init+0x12c>)
 80018c2:	f005 fa09 	bl	8006cd8 <HAL_TIM_MspPostInit>

}
 80018c6:	bf00      	nop
 80018c8:	3738      	adds	r7, #56	; 0x38
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	240019a8 	.word	0x240019a8

080018d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f4:	463b      	mov	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
 8001900:	611a      	str	r2, [r3, #16]
 8001902:	615a      	str	r2, [r3, #20]
 8001904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001908:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <MX_TIM3_Init+0x100>)
 800190a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800190e:	2263      	movs	r2, #99	; 0x63
 8001910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800191a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800192e:	f00e fe19 	bl	8010564 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001938:	f000 fb1c 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001946:	4619      	mov	r1, r3
 8001948:	4821      	ldr	r0, [pc, #132]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800194a:	f00f fdd1 	bl	80114f0 <HAL_TIM_ConfigClockSource>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001954:	f000 fb0e 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001958:	481d      	ldr	r0, [pc, #116]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800195a:	f00e fed3 	bl	8010704 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001964:	f000 fb06 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4816      	ldr	r0, [pc, #88]	; (80019d0 <MX_TIM3_Init+0xfc>)
 8001978:	f010 fd9e 	bl	80124b8 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001982:	f000 faf7 	bl	8001f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	; 0x60
 8001988:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198e:	2300      	movs	r3, #0
 8001990:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <MX_TIM3_Init+0xfc>)
 800199e:	f00f fc93 	bl	80112c8 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80019a8:	f000 fae4 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	2204      	movs	r2, #4
 80019b0:	4619      	mov	r1, r3
 80019b2:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM3_Init+0xfc>)
 80019b4:	f00f fc88 	bl	80112c8 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80019be:	f000 fad9 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM3_Init+0xfc>)
 80019c4:	f005 f988 	bl	8006cd8 <HAL_TIM_MspPostInit>

}
 80019c8:	bf00      	nop
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	240019f4 	.word	0x240019f4
 80019d4:	40000400 	.word	0x40000400

080019d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b090      	sub	sp, #64	; 0x40
 80019dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a14:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a16:	4a3e      	ldr	r2, [pc, #248]	; (8001b10 <MX_TIM5_Init+0x138>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a1c:	2263      	movs	r2, #99	; 0x63
 8001a1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a26:	4b39      	ldr	r3, [pc, #228]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a36:	2280      	movs	r2, #128	; 0x80
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a3a:	4834      	ldr	r0, [pc, #208]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a3c:	f00e fd92 	bl	8010564 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001a46:	f000 fa95 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a54:	4619      	mov	r1, r3
 8001a56:	482d      	ldr	r0, [pc, #180]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a58:	f00f fd4a 	bl	80114f0 <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001a62:	f000 fa87 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001a66:	4829      	ldr	r0, [pc, #164]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a68:	f00e ffbc 	bl	80109e4 <HAL_TIM_IC_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001a72:	f000 fa7f 	bl	8001f74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a76:	2304      	movs	r3, #4
 8001a78:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a7a:	2350      	movs	r3, #80	; 0x50
 8001a7c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001a92:	f00f fe25 	bl	80116e0 <HAL_TIM_SlaveConfigSynchro>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8001a9c:	f000 fa6a 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4814      	ldr	r0, [pc, #80]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001aba:	f00f fb68 	bl	801118e <HAL_TIM_IC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 8001ac4:	f000 fa56 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001acc:	2302      	movs	r3, #2
 8001ace:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001ada:	f00f fb58 	bl	801118e <HAL_TIM_IC_ConfigChannel>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 8001ae4:	f000 fa46 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001af0:	463b      	mov	r3, r7
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM5_Init+0x134>)
 8001af6:	f010 fcdf 	bl	80124b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 8001b00:	f000 fa38 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	3740      	adds	r7, #64	; 0x40
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	24001a40 	.word	0x24001a40
 8001b10:	40000c00 	.word	0x40000c00

08001b14 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <MX_TIM6_Init+0x6c>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9999;
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b30:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b12      	ldr	r3, [pc, #72]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b48:	f00e fd0c 	bl	8010564 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001b52:	f000 fa0f 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <MX_TIM6_Init+0x68>)
 8001b64:	f010 fca8 	bl	80124b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001b6e:	f000 fa01 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	24001a8c 	.word	0x24001a8c
 8001b80:	40001000 	.word	0x40001000

08001b84 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b090      	sub	sp, #64	; 0x40
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b98:	f107 031c 	add.w	r3, r7, #28
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	463b      	mov	r3, r7
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bc2:	4a40      	ldr	r2, [pc, #256]	; (8001cc4 <MX_TIM15_Init+0x140>)
 8001bc4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 99;
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bc8:	2263      	movs	r2, #99	; 0x63
 8001bca:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bda:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001be0:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001bec:	4834      	ldr	r0, [pc, #208]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001bee:	f00e fcb9 	bl	8010564 <HAL_TIM_Base_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8001bf8:	f000 f9bc 	bl	8001f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001c02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c06:	4619      	mov	r1, r3
 8001c08:	482d      	ldr	r0, [pc, #180]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c0a:	f00f fc71 	bl	80114f0 <HAL_TIM_ConfigClockSource>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8001c14:	f000 f9ae 	bl	8001f74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8001c18:	4829      	ldr	r0, [pc, #164]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c1a:	f00e fee3 	bl	80109e4 <HAL_TIM_IC_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM15_Init+0xa4>
  {
    Error_Handler();
 8001c24:	f000 f9a6 	bl	8001f74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001c28:	2304      	movs	r3, #4
 8001c2a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001c2c:	2350      	movs	r3, #80	; 0x50
 8001c2e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim15, &sSlaveConfig) != HAL_OK)
 8001c3c:	f107 031c 	add.w	r3, r7, #28
 8001c40:	4619      	mov	r1, r3
 8001c42:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c44:	f00f fd4c 	bl	80116e0 <HAL_TIM_SlaveConfigSynchro>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8001c4e:	f000 f991 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c56:	2301      	movs	r3, #1
 8001c58:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	2200      	movs	r2, #0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4815      	ldr	r0, [pc, #84]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c6c:	f00f fa8f 	bl	801118e <HAL_TIM_IC_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001c76:	f000 f97d 	bl	8001f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001c8c:	f00f fa7f 	bl	801118e <HAL_TIM_IC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM15_Init+0x116>
  {
    Error_Handler();
 8001c96:	f000 f96d 	bl	8001f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM15_Init+0x13c>)
 8001ca8:	f010 fc06 	bl	80124b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8001cb2:	f000 f95f 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3740      	adds	r7, #64	; 0x40
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	24001ad8 	.word	0x24001ad8
 8001cc4:	40014000 	.word	0x40014000

08001cc8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cce:	4a11      	ldr	r2, [pc, #68]	; (8001d14 <MX_TIM16_Init+0x4c>)
 8001cd0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9999;
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cd4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cd8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ce6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM16_Init+0x48>)
 8001cfc:	f00e fc32 	bl	8010564 <HAL_TIM_Base_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001d06:	f000 f935 	bl	8001f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24001b24 	.word	0x24001b24
 8001d14:	40014400 	.word	0x40014400

08001d18 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <MX_BDMA_Init+0x3c>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <MX_BDMA_Init+0x3c>)
 8001d26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <MX_BDMA_Init+0x3c>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2081      	movs	r0, #129	; 0x81
 8001d42:	f007 f9c8 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001d46:	2081      	movs	r0, #129	; 0x81
 8001d48:	f007 f9df 	bl	800910a <HAL_NVIC_EnableIRQ>

}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	58024400 	.word	0x58024400

08001d58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <MX_DMA_Init+0x8c>)
 8001d60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d64:	4a1f      	ldr	r2, [pc, #124]	; (8001de4 <MX_DMA_Init+0x8c>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d6e:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <MX_DMA_Init+0x8c>)
 8001d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2100      	movs	r1, #0
 8001d80:	200b      	movs	r0, #11
 8001d82:	f007 f9a8 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d86:	200b      	movs	r0, #11
 8001d88:	f007 f9bf 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2100      	movs	r1, #0
 8001d90:	200c      	movs	r0, #12
 8001d92:	f007 f9a0 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d96:	200c      	movs	r0, #12
 8001d98:	f007 f9b7 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	200d      	movs	r0, #13
 8001da2:	f007 f998 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001da6:	200d      	movs	r0, #13
 8001da8:	f007 f9af 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2100      	movs	r1, #0
 8001db0:	200e      	movs	r0, #14
 8001db2:	f007 f990 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001db6:	200e      	movs	r0, #14
 8001db8:	f007 f9a7 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	200f      	movs	r0, #15
 8001dc2:	f007 f988 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f007 f99f 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2010      	movs	r0, #16
 8001dd2:	f007 f980 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001dd6:	2010      	movs	r0, #16
 8001dd8:	f007 f997 	bl	800910a <HAL_NVIC_EnableIRQ>

}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	58024400 	.word	0x58024400

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08c      	sub	sp, #48	; 0x30
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 031c 	add.w	r3, r7, #28
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
 8001dfc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfe:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a57      	ldr	r2, [pc, #348]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b55      	ldr	r3, [pc, #340]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1c:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e22:	4a50      	ldr	r2, [pc, #320]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e2c:	4b4d      	ldr	r3, [pc, #308]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e40:	4a48      	ldr	r2, [pc, #288]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5e:	4a41      	ldr	r2, [pc, #260]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e68:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	4b3b      	ldr	r3, [pc, #236]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e7c:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e7e:	f043 0302 	orr.w	r3, r3, #2
 8001e82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	60bb      	str	r3, [r7, #8]
 8001e92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001e9c:	f043 0308 	orr.w	r3, r3, #8
 8001ea0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <MX_GPIO_Init+0x17c>)
 8001ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2168      	movs	r1, #104	; 0x68
 8001eb6:	482c      	ldr	r0, [pc, #176]	; (8001f68 <MX_GPIO_Init+0x180>)
 8001eb8:	f00a f946 	bl	800c148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2120      	movs	r1, #32
 8001ec0:	482a      	ldr	r0, [pc, #168]	; (8001f6c <MX_GPIO_Init+0x184>)
 8001ec2:	f00a f941 	bl	800c148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONBOARD_LED_Pin */
  GPIO_InitStruct.Pin = ONBOARD_LED_Pin;
 8001ec6:	2308      	movs	r3, #8
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ONBOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4825      	ldr	r0, [pc, #148]	; (8001f70 <MX_GPIO_Init+0x188>)
 8001eda:	f009 ff6d 	bl	800bdb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PID_MODE_INPUT_Pin */
  GPIO_InitStruct.Pin = PID_MODE_INPUT_Pin;
 8001ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ee4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ee8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PID_MODE_INPUT_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	481e      	ldr	r0, [pc, #120]	; (8001f70 <MX_GPIO_Init+0x188>)
 8001ef6:	f009 ff5f 	bl	800bdb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_YELLOW_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_YELLOW_Pin|LED_RED_Pin;
 8001efa:	2368      	movs	r3, #104	; 0x68
 8001efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4815      	ldr	r0, [pc, #84]	; (8001f68 <MX_GPIO_Init+0x180>)
 8001f12:	f009 ff51 	bl	800bdb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Output_Pin */
  GPIO_InitStruct.Pin = Manual_Output_Pin;
 8001f16:	2320      	movs	r3, #32
 8001f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Manual_Output_GPIO_Port, &GPIO_InitStruct);
 8001f26:	f107 031c 	add.w	r3, r7, #28
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <MX_GPIO_Init+0x184>)
 8001f2e:	f009 ff43 	bl	800bdb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Manual_Input_Pin */
  GPIO_InitStruct.Pin = Manual_Input_Pin;
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f36:	2300      	movs	r3, #0
 8001f38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Manual_Input_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4809      	ldr	r0, [pc, #36]	; (8001f6c <MX_GPIO_Init+0x184>)
 8001f46:	f009 ff37 	bl	800bdb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2017      	movs	r0, #23
 8001f50:	f007 f8c1 	bl	80090d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f54:	2017      	movs	r0, #23
 8001f56:	f007 f8d8 	bl	800910a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3730      	adds	r7, #48	; 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58020400 	.word	0x58020400
 8001f70:	58021000 	.word	0x58021000

08001f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f78:	b672      	cpsid	i
}
 8001f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <Error_Handler+0x8>

08001f7e <_ZSt3absl>:

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bfb8      	it	lt
 8001f8c:	425b      	neglt	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <_ZN3ros3MsgC1Ev+0x1c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	080176b8 	.word	0x080176b8

08001fdc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
      data()
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ffe8 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8001fec:	4a06      	ldr	r2, [pc, #24]	; (8002008 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ffcf 	bl	8001f9a <_ZN3ros4TimeC1Ev>
    {
    }
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	080176a0 	.word	0x080176a0

0800200c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	4413      	add	r3, r2
 8002024:	b2ca      	uxtb	r2, r1
 8002026:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	0a19      	lsrs	r1, r3, #8
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3301      	adds	r3, #1
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	b2ca      	uxtb	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	0c19      	lsrs	r1, r3, #16
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3302      	adds	r3, #2
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	4413      	add	r3, r2
 8002048:	b2ca      	uxtb	r2, r1
 800204a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0e19      	lsrs	r1, r3, #24
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	3303      	adds	r3, #3
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	4413      	add	r3, r2
 800205a:	b2ca      	uxtb	r2, r1
 800205c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3304      	adds	r3, #4
 8002062:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	0a19      	lsrs	r1, r3, #8
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	3301      	adds	r3, #1
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	4413      	add	r3, r2
 8002080:	b2ca      	uxtb	r2, r1
 8002082:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	0c19      	lsrs	r1, r3, #16
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	3302      	adds	r3, #2
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	0e19      	lsrs	r1, r3, #24
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	3303      	adds	r3, #3
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	b2ca      	uxtb	r2, r1
 80020a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3304      	adds	r3, #4
 80020ac:	60fb      	str	r3, [r7, #12]
      return offset;
 80020ae:	68fb      	ldr	r3, [r7, #12]
    }
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	4413      	add	r3, r2
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	461a      	mov	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	3301      	adds	r3, #1
 80020e0:	6839      	ldr	r1, [r7, #0]
 80020e2:	440b      	add	r3, r1
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	021b      	lsls	r3, r3, #8
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3302      	adds	r3, #2
 80020f6:	6839      	ldr	r1, [r7, #0]
 80020f8:	440b      	add	r3, r1
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	041b      	lsls	r3, r3, #16
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3303      	adds	r3, #3
 800210c:	6839      	ldr	r1, [r7, #0]
 800210e:	440b      	add	r3, r1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	061b      	lsls	r3, r3, #24
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	3304      	adds	r3, #4
 800211e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	4413      	add	r3, r2
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	461a      	mov	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	6839      	ldr	r1, [r7, #0]
 8002138:	440b      	add	r3, r1
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3302      	adds	r3, #2
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	440b      	add	r3, r1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3303      	adds	r3, #3
 8002162:	6839      	ldr	r1, [r7, #0]
 8002164:	440b      	add	r3, r1
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	061b      	lsls	r3, r3, #24
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	3304      	adds	r3, #4
 8002174:	60fb      	str	r3, [r7, #12]
     return offset;
 8002176:	68fb      	ldr	r3, [r7, #12]
    }
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	080171c8 	.word	0x080171c8

080021a0 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	080171d8 	.word	0x080171d8

080021bc <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fef8 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021dc:	609a      	str	r2, [r3, #8]
      message_type(""),
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021e2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a06      	ldr	r2, [pc, #24]	; (8002200 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021e8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
    {
    }
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08017688 	.word	0x08017688
 8002200:	080171fc 	.word	0x080171fc

08002204 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	8899      	ldrh	r1, [r3, #4]
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4413      	add	r3, r2
 800221c:	b2ca      	uxtb	r2, r1
 800221e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	b299      	uxth	r1, r3
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	3301      	adds	r3, #1
 800222c:	683a      	ldr	r2, [r7, #0]
 800222e:	4413      	add	r3, r2
 8002230:	b2ca      	uxtb	r2, r1
 8002232:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3302      	adds	r3, #2
 8002238:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f89e 	bl	8000380 <strlen>
 8002244:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	69b9      	ldr	r1, [r7, #24]
 800224e:	4618      	mov	r0, r3
 8002250:	f002 ff52 	bl	80050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	3304      	adds	r3, #4
 8002258:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	18d0      	adds	r0, r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4619      	mov	r1, r3
 8002268:	f013 fadb 	bl	8015822 <memcpy>
      offset += length_topic_name;
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4413      	add	r3, r2
 8002272:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f881 	bl	8000380 <strlen>
 800227e:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	4413      	add	r3, r2
 8002286:	6979      	ldr	r1, [r7, #20]
 8002288:	4618      	mov	r0, r3
 800228a:	f002 ff35 	bl	80050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	18d0      	adds	r0, r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4619      	mov	r1, r3
 80022a2:	f013 fabe 	bl	8015822 <memcpy>
      offset += length_message_type;
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	4413      	add	r3, r2
 80022ac:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	691b      	ldr	r3, [r3, #16]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe f864 	bl	8000380 <strlen>
 80022b8:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	6939      	ldr	r1, [r7, #16]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 ff18 	bl	80050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3304      	adds	r3, #4
 80022cc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	18d0      	adds	r0, r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4619      	mov	r1, r3
 80022dc:	f013 faa1 	bl	8015822 <memcpy>
      offset += length_md5sum;
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022ee:	68f9      	ldr	r1, [r7, #12]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	4413      	add	r3, r2
 80022f6:	b2ca      	uxtb	r2, r1
 80022f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	0a19      	lsrs	r1, r3, #8
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	3301      	adds	r3, #1
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	b2ca      	uxtb	r2, r1
 8002308:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	0c19      	lsrs	r1, r3, #16
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3302      	adds	r3, #2
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	4413      	add	r3, r2
 8002316:	b2ca      	uxtb	r2, r1
 8002318:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	0e19      	lsrs	r1, r3, #24
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3303      	adds	r3, #3
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002330:	69fb      	ldr	r3, [r7, #28]
    }
 8002332:	4618      	mov	r0, r3
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800233a:	b580      	push	{r7, lr}
 800233c:	b08a      	sub	sp, #40	; 0x28
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4413      	add	r3, r2
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	889b      	ldrh	r3, [r3, #4]
 800235a:	b21a      	sxth	r2, r3
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	3301      	adds	r3, #1
 8002360:	6839      	ldr	r1, [r7, #0]
 8002362:	440b      	add	r3, r1
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21b      	sxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b21b      	sxth	r3, r3
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	3302      	adds	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	441a      	add	r2, r3
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f002 fed5 	bl	8005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	3304      	adds	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	e00b      	b.n	80023b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	441a      	add	r2, r3
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	3b01      	subs	r3, #1
 80023a2:	6839      	ldr	r1, [r7, #0]
 80023a4:	440b      	add	r3, r1
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80023aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ac:	3301      	adds	r3, #1
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4413      	add	r3, r2
 80023b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d3ed      	bcc.n	8002398 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	3b01      	subs	r3, #1
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	2200      	movs	r2, #0
 80023ca:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	441a      	add	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	4413      	add	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	441a      	add	r2, r3
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fea2 	bl	8005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	3304      	adds	r3, #4
 80023f6:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	e00b      	b.n	8002416 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	441a      	add	r2, r3
 8002404:	6a3b      	ldr	r3, [r7, #32]
 8002406:	3b01      	subs	r3, #1
 8002408:	6839      	ldr	r1, [r7, #0]
 800240a:	440b      	add	r3, r1
 800240c:	7812      	ldrb	r2, [r2, #0]
 800240e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002410:	6a3b      	ldr	r3, [r7, #32]
 8002412:	3301      	adds	r3, #1
 8002414:	623b      	str	r3, [r7, #32]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	6a3a      	ldr	r2, [r7, #32]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3ed      	bcc.n	80023fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	4413      	add	r3, r2
 8002428:	3b01      	subs	r3, #1
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	4413      	add	r3, r2
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	3b01      	subs	r3, #1
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	441a      	add	r2, r3
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f002 fe6f 	bl	8005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	3304      	adds	r3, #4
 800245c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e00b      	b.n	800247c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	441a      	add	r2, r3
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3b01      	subs	r3, #1
 800246e:	6839      	ldr	r1, [r7, #0]
 8002470:	440b      	add	r3, r1
 8002472:	7812      	ldrb	r2, [r2, #0]
 8002474:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3ed      	bcc.n	8002464 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	3b01      	subs	r3, #1
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	4413      	add	r3, r2
 8002494:	2200      	movs	r2, #0
 8002496:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3b01      	subs	r3, #1
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	441a      	add	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4413      	add	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	440a      	add	r2, r1
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	3301      	adds	r3, #1
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	440b      	add	r3, r1
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4313      	orrs	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	3302      	adds	r3, #2
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	440b      	add	r3, r1
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	041b      	lsls	r3, r3, #16
 80024de:	4313      	orrs	r3, r2
 80024e0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	3303      	adds	r3, #3
 80024e8:	6839      	ldr	r1, [r7, #0]
 80024ea:	440b      	add	r3, r1
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	3304      	adds	r3, #4
 80024fe:	61bb      	str	r3, [r7, #24]
     return offset;
 8002500:	69bb      	ldr	r3, [r7, #24]
    }
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	; 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
	...

0800250c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	08017200 	.word	0x08017200

08002528 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	0801721c 	.word	0x0801721c

08002544 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fd34 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8002554:	4a06      	ldr	r2, [pc, #24]	; (8002570 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
      level(0),
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	711a      	strb	r2, [r3, #4]
      msg("")
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002564:	609a      	str	r2, [r3, #8]
    {
    }
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	08017670 	.word	0x08017670
 8002574:	080171fc 	.word	0x080171fc

08002578 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	4413      	add	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	7912      	ldrb	r2, [r2, #4]
 8002590:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3301      	adds	r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd feef 	bl	8000380 <strlen>
 80025a2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	683a      	ldr	r2, [r7, #0]
 80025a8:	4413      	add	r3, r2
 80025aa:	68b9      	ldr	r1, [r7, #8]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f002 fda3 	bl	80050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3304      	adds	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	18d0      	adds	r0, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4619      	mov	r1, r3
 80025c6:	f013 f92c 	bl	8015822 <memcpy>
      offset += length_msg;
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4413      	add	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
      return offset;
 80025d2:	68fb      	ldr	r3, [r7, #12]
    }
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	4413      	add	r3, r2
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	3301      	adds	r3, #1
 80025fa:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	441a      	add	r2, r3
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4611      	mov	r1, r2
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fd94 	bl	8005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	3304      	adds	r3, #4
 8002612:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	e00b      	b.n	8002632 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	441a      	add	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	3b01      	subs	r3, #1
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	440b      	add	r3, r1
 8002628:	7812      	ldrb	r2, [r2, #0]
 800262a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	429a      	cmp	r2, r3
 800263c:	d3ed      	bcc.n	800261a <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	3b01      	subs	r3, #1
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	4413      	add	r3, r2
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3b01      	subs	r3, #1
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	441a      	add	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4413      	add	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
     return offset;
 8002662:	693b      	ldr	r3, [r7, #16]
    }
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	4b03      	ldr	r3, [pc, #12]	; (8002684 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	08017240 	.word	0x08017240

08002688 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	08017254 	.word	0x08017254

080026a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fc84 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	61da      	str	r2, [r3, #28]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	08017658 	.word	0x08017658

08002700 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6859      	ldr	r1, [r3, #4]
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	4413      	add	r3, r2
 8002718:	b2ca      	uxtb	r2, r1
 800271a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0a19      	lsrs	r1, r3, #8
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	3301      	adds	r3, #1
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	4413      	add	r3, r2
 800272a:	b2ca      	uxtb	r2, r1
 800272c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	0c19      	lsrs	r1, r3, #16
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3302      	adds	r3, #2
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4413      	add	r3, r2
 800273c:	b2ca      	uxtb	r2, r1
 800273e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	0e19      	lsrs	r1, r3, #24
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	3303      	adds	r3, #3
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	b2ca      	uxtb	r2, r1
 8002750:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002754:	3304      	adds	r3, #4
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002758:	2300      	movs	r3, #0
 800275a:	623b      	str	r3, [r7, #32]
 800275c:	e02a      	b.n	80027b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800276c:	6939      	ldr	r1, [r7, #16]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4413      	add	r3, r2
 8002774:	b2ca      	uxtb	r2, r1
 8002776:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	0a19      	lsrs	r1, r3, #8
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	3301      	adds	r3, #1
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	4413      	add	r3, r2
 8002784:	b2ca      	uxtb	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	0c19      	lsrs	r1, r3, #16
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	3302      	adds	r3, #2
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	4413      	add	r3, r2
 8002794:	b2ca      	uxtb	r2, r1
 8002796:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	0e19      	lsrs	r1, r3, #24
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	3303      	adds	r3, #3
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	b2ca      	uxtb	r2, r1
 80027a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3304      	adds	r3, #4
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	3301      	adds	r3, #1
 80027b2:	623b      	str	r3, [r7, #32]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6a3a      	ldr	r2, [r7, #32]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d3cf      	bcc.n	800275e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	0a19      	lsrs	r1, r3, #8
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	0c19      	lsrs	r1, r3, #16
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3302      	adds	r3, #2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	0e19      	lsrs	r1, r3, #24
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3303      	adds	r3, #3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	b2ca      	uxtb	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3304      	adds	r3, #4
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	e02a      	b.n	8002864 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 800281c:	68f9      	ldr	r1, [r7, #12]
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4413      	add	r3, r2
 8002824:	b2ca      	uxtb	r2, r1
 8002826:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	0a19      	lsrs	r1, r3, #8
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	3301      	adds	r3, #1
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	b2ca      	uxtb	r2, r1
 8002836:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	0c19      	lsrs	r1, r3, #16
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	3302      	adds	r3, #2
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	4413      	add	r3, r2
 8002844:	b2ca      	uxtb	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	0e19      	lsrs	r1, r3, #24
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	3303      	adds	r3, #3
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	4413      	add	r3, r2
 8002854:	b2ca      	uxtb	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3304      	adds	r3, #4
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3301      	adds	r3, #1
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	429a      	cmp	r2, r3
 800286c:	d3cf      	bcc.n	800280e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	69d9      	ldr	r1, [r3, #28]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69db      	ldr	r3, [r3, #28]
 8002880:	0a19      	lsrs	r1, r3, #8
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	4413      	add	r3, r2
 800288a:	b2ca      	uxtb	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	0c19      	lsrs	r1, r3, #16
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3302      	adds	r3, #2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	0e19      	lsrs	r1, r3, #24
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3303      	adds	r3, #3
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3304      	adds	r3, #4
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	e027      	b.n	800290e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fd58 	bl	8000380 <strlen>
 80028d0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80028d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	4413      	add	r3, r2
 80028d8:	6979      	ldr	r1, [r7, #20]
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fc0c 	bl	80050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3304      	adds	r3, #4
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	18d0      	adds	r0, r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	4619      	mov	r1, r3
 80028fc:	f012 ff91 	bl	8015822 <memcpy>
      offset += length_stringsi;
 8002900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	4413      	add	r3, r2
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	3301      	adds	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	429a      	cmp	r2, r3
 8002916:	d3d2      	bcc.n	80028be <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800291a:	4618      	mov	r0, r3
 800291c:	3728      	adds	r7, #40	; 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002922:	b580      	push	{r7, lr}
 8002924:	b08e      	sub	sp, #56	; 0x38
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800292c:	2300      	movs	r3, #0
 800292e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	4413      	add	r3, r2
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	3301      	adds	r3, #1
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	021b      	lsls	r3, r3, #8
 8002946:	6a3a      	ldr	r2, [r7, #32]
 8002948:	4313      	orrs	r3, r2
 800294a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	3302      	adds	r3, #2
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	041b      	lsls	r3, r3, #16
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	4313      	orrs	r3, r2
 800295c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002960:	3303      	adds	r3, #3
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	4413      	add	r3, r2
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	061b      	lsls	r3, r3, #24
 800296a:	6a3a      	ldr	r2, [r7, #32]
 800296c:	4313      	orrs	r3, r2
 800296e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002972:	3304      	adds	r3, #4
 8002974:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d90a      	bls.n	8002996 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f011 fffc 	bl	8014988 <realloc>
 8002990:	4602      	mov	r2, r0
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 800299c:	2300      	movs	r3, #0
 800299e:	633b      	str	r3, [r7, #48]	; 0x30
 80029a0:	e035      	b.n	8002a0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	440a      	add	r2, r1
 80029ae:	7812      	ldrb	r2, [r2, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b8:	3301      	adds	r3, #1
 80029ba:	6839      	ldr	r1, [r7, #0]
 80029bc:	440b      	add	r3, r1
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ca:	3302      	adds	r3, #2
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	440b      	add	r3, r1
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029dc:	3303      	adds	r3, #3
 80029de:	6839      	ldr	r1, [r7, #0]
 80029e0:	440b      	add	r3, r1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	061b      	lsls	r3, r3, #24
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	3304      	adds	r3, #4
 80029f4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	6812      	ldr	r2, [r2, #0]
 8002a06:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3c4      	bcc.n	80029a2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a24:	3301      	adds	r3, #1
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	4413      	add	r3, r2
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a36:	3302      	adds	r3, #2
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	041b      	lsls	r3, r3, #16
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a48:	3303      	adds	r3, #3
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	061b      	lsls	r3, r3, #24
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	69fa      	ldr	r2, [r7, #28]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d90a      	bls.n	8002a7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699a      	ldr	r2, [r3, #24]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f011 ff88 	bl	8014988 <realloc>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69fa      	ldr	r2, [r7, #28]
 8002a82:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	e035      	b.n	8002af6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	440a      	add	r2, r1
 8002a96:	7812      	ldrb	r2, [r2, #0]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	440b      	add	r3, r1
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	021b      	lsls	r3, r3, #8
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	6839      	ldr	r1, [r7, #0]
 8002ab6:	440b      	add	r3, r1
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	041b      	lsls	r3, r3, #16
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	3303      	adds	r3, #3
 8002ac6:	6839      	ldr	r1, [r7, #0]
 8002ac8:	440b      	add	r3, r1
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	061b      	lsls	r3, r3, #24
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ada:	3304      	adds	r3, #4
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	3214      	adds	r2, #20
 8002aec:	6812      	ldr	r2, [r2, #0]
 8002aee:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	3301      	adds	r3, #1
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3c4      	bcc.n	8002a8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	021b      	lsls	r3, r3, #8
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	3302      	adds	r3, #2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	041b      	lsls	r3, r3, #16
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	3303      	adds	r3, #3
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4413      	add	r3, r2
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	061b      	lsls	r3, r3, #24
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b42:	3304      	adds	r3, #4
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d90a      	bls.n	8002b66 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f011 ff14 	bl	8014988 <realloc>
 8002b60:	4602      	mov	r2, r0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b70:	e03e      	b.n	8002bf0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	441a      	add	r2, r3
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	4611      	mov	r1, r2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f002 fad9 	bl	8005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b86:	3304      	adds	r3, #4
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b8e:	e00b      	b.n	8002ba8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	441a      	add	r2, r3
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3ed      	bcc.n	8002b90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002bb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4413      	add	r3, r2
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	441a      	add	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	3220      	adds	r2, #32
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bec:	3301      	adds	r3, #1
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	69db      	ldr	r3, [r3, #28]
 8002bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d3bb      	bcc.n	8002b72 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3738      	adds	r7, #56	; 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002c0e:	4618      	mov	r0, r3
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	08017534 	.word	0x08017534

08002c20 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	08017278 	.word	0x08017278

08002c3c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	611a      	str	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
 8002c72:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68d8      	ldr	r0, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6891      	ldr	r1, [r2, #8]
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	4798      	blx	r3
 8002c88:	4603      	mov	r3, r0
  };
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
  }
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4b      	ldr	r2, [pc, #300]	; (8002dec <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d077      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d06f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a45      	ldr	r2, [pc, #276]	; (8002df4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d067      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a42      	ldr	r2, [pc, #264]	; (8002df8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d05f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3f      	ldr	r2, [pc, #252]	; (8002dfc <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d057      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a3c      	ldr	r2, [pc, #240]	; (8002e00 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d04f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a39      	ldr	r2, [pc, #228]	; (8002e04 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d047      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a36      	ldr	r2, [pc, #216]	; (8002e08 <_ZN13STM32Hardware10getRdmaIndEv+0x15c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d03f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a33      	ldr	r2, [pc, #204]	; (8002e0c <_ZN13STM32Hardware10getRdmaIndEv+0x160>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d037      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a30      	ldr	r2, [pc, #192]	; (8002e10 <_ZN13STM32Hardware10getRdmaIndEv+0x164>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	; (8002e14 <_ZN13STM32Hardware10getRdmaIndEv+0x168>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d027      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <_ZN13STM32Hardware10getRdmaIndEv+0x16c>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d01f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <_ZN13STM32Hardware10getRdmaIndEv+0x170>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d017      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <_ZN13STM32Hardware10getRdmaIndEv+0x174>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00f      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a21      	ldr	r2, [pc, #132]	; (8002e24 <_ZN13STM32Hardware10getRdmaIndEv+0x178>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x108>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <_ZN13STM32Hardware10getRdmaIndEv+0x17c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10a      	bne.n	8002dca <_ZN13STM32Hardware10getRdmaIndEv+0x11e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc8:	e009      	b.n	8002dde <_ZN13STM32Hardware10getRdmaIndEv+0x132>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40020010 	.word	0x40020010
 8002df0:	40020028 	.word	0x40020028
 8002df4:	40020040 	.word	0x40020040
 8002df8:	40020058 	.word	0x40020058
 8002dfc:	40020070 	.word	0x40020070
 8002e00:	40020088 	.word	0x40020088
 8002e04:	400200a0 	.word	0x400200a0
 8002e08:	400200b8 	.word	0x400200b8
 8002e0c:	40020410 	.word	0x40020410
 8002e10:	40020428 	.word	0x40020428
 8002e14:	40020440 	.word	0x40020440
 8002e18:	40020458 	.word	0x40020458
 8002e1c:	40020470 	.word	0x40020470
 8002e20:	40020488 	.word	0x40020488
 8002e24:	400204a0 	.word	0x400204a0
 8002e28:	400204b8 	.word	0x400204b8

08002e2c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <_ZN13STM32HardwareC1Ev+0x34>)
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	2400143c 	.word	0x2400143c

08002e64 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f804 	bl	8002e7a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b082      	sub	sp, #8
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3304      	adds	r3, #4
 8002e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e8e:	4619      	mov	r1, r3
 8002e90:	f00f fd1c 	bl	80128cc <HAL_UART_Receive_DMA>
    }
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff fefb 	bl	8002cac <_ZN13STM32Hardware10getRdmaIndEv>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	429c      	cmp	r4, r3
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ecc:	1c59      	adds	r1, r3, #1
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	791b      	ldrb	r3, [r3, #4]
 8002eda:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002eec:	68fb      	ldr	r3, [r7, #12]
    }
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}
	...

08002ef8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d108      	bne.n	8002f1e <_ZN13STM32Hardware5flushEv+0x26>
 8002f0c:	4b27      	ldr	r3, [pc, #156]	; (8002fac <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <_ZN13STM32Hardware5flushEv+0x26>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <_ZN13STM32Hardware5flushEv+0x28>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d03f      	beq.n	8002fa4 <_ZN13STM32Hardware5flushEv+0xac>
        mutex = true;
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <_ZN13STM32Hardware5flushEv+0xb4>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d031      	beq.n	8002f9e <_ZN13STM32Hardware5flushEv+0xa6>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d20a      	bcs.n	8002f60 <_ZN13STM32Hardware5flushEv+0x68>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	e006      	b.n	8002f6e <_ZN13STM32Hardware5flushEv+0x76>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002f7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	89fa      	ldrh	r2, [r7, #14]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f00f fc21 	bl	80127cc <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002f90:	89fb      	ldrh	r3, [r7, #14]
 8002f92:	4413      	add	r3, r2
 8002f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <_ZN13STM32Hardware5flushEv+0xb4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	701a      	strb	r2, [r3, #0]
      }
    }
 8002fa4:	bf00      	nop
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	24001b70 	.word	0x24001b70

08002fb0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
      int n = length;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc6:	bfa8      	it	ge
 8002fc8:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002fcc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fd4:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	bf28      	it	cs
 8002fde:	4613      	movcs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002fe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f012 fc14 	bl	8015822 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	4413      	add	r3, r2
 8003004:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	429a      	cmp	r2, r3
 8003014:	d00b      	beq.n	800302e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	18d1      	adds	r1, r2, r3
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	461a      	mov	r2, r3
 800302a:	f012 fbfa 	bl	8015822 <memcpy>
      }

      flush();
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7ff ff62 	bl	8002ef8 <_ZN13STM32Hardware5flushEv>
    }
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	f004 f9b0 	bl	80073a8 <HAL_GetTick>
 8003048:	4603      	mov	r3, r0
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <_ZN8std_msgs19MultiArrayDimensionC1Ev>:
      typedef uint32_t _size_type;
      _size_type size;
      typedef uint32_t _stride_type;
      _stride_type stride;

    MultiArrayDimension():
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
      label(""),
      size(0),
      stride(0)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe ffac 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8003064:	4a08      	ldr	r2, [pc, #32]	; (8003088 <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x34>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	601a      	str	r2, [r3, #0]
      label(""),
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a07      	ldr	r2, [pc, #28]	; (800308c <_ZN8std_msgs19MultiArrayDimensionC1Ev+0x38>)
 800306e:	605a      	str	r2, [r3, #4]
      size(0),
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
      stride(0)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	60da      	str	r2, [r3, #12]
    {
    }
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	08017614 	.word	0x08017614
 800308c:	080171fc 	.word	0x080171fc

08003090 <_ZNK8std_msgs19MultiArrayDimension9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	60fb      	str	r3, [r7, #12]
      uint32_t length_label = strlen(this->label);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fd f96c 	bl	8000380 <strlen>
 80030a8:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_label);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	4413      	add	r3, r2
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f002 f820 	bl	80050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3304      	adds	r3, #4
 80030bc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->label, length_label);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	18d0      	adds	r0, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	4619      	mov	r1, r3
 80030cc:	f012 fba9 	bl	8015822 <memcpy>
      offset += length_label;
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4413      	add	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->size >> (8 * 0)) & 0xFF;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	4413      	add	r3, r2
 80030e2:	b2ca      	uxtb	r2, r1
 80030e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->size >> (8 * 1)) & 0xFF;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a19      	lsrs	r1, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3301      	adds	r3, #1
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	4413      	add	r3, r2
 80030f4:	b2ca      	uxtb	r2, r1
 80030f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->size >> (8 * 2)) & 0xFF;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	0c19      	lsrs	r1, r3, #16
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3302      	adds	r3, #2
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	4413      	add	r3, r2
 8003106:	b2ca      	uxtb	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->size >> (8 * 3)) & 0xFF;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0e19      	lsrs	r1, r3, #24
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3303      	adds	r3, #3
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	4413      	add	r3, r2
 8003118:	b2ca      	uxtb	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->size);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	3304      	adds	r3, #4
 8003120:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stride >> (8 * 0)) & 0xFF;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	4413      	add	r3, r2
 800312c:	b2ca      	uxtb	r2, r1
 800312e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stride >> (8 * 1)) & 0xFF;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	0a19      	lsrs	r1, r3, #8
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3301      	adds	r3, #1
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	4413      	add	r3, r2
 800313e:	b2ca      	uxtb	r2, r1
 8003140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stride >> (8 * 2)) & 0xFF;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	0c19      	lsrs	r1, r3, #16
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3302      	adds	r3, #2
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	b2ca      	uxtb	r2, r1
 8003152:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stride >> (8 * 3)) & 0xFF;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	0e19      	lsrs	r1, r3, #24
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	3303      	adds	r3, #3
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	4413      	add	r3, r2
 8003162:	b2ca      	uxtb	r2, r1
 8003164:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stride);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3304      	adds	r3, #4
 800316a:	60fb      	str	r3, [r7, #12]
      return offset;
 800316c:	68fb      	ldr	r3, [r7, #12]
    }
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003176:	b580      	push	{r7, lr}
 8003178:	b086      	sub	sp, #24
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
      uint32_t length_label;
      arrToVar(length_label, (inbuffer + offset));
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	441a      	add	r2, r3
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f001 ffd0 	bl	8005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	3304      	adds	r3, #4
 800319a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	e00b      	b.n	80031ba <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	441a      	add	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6839      	ldr	r1, [r7, #0]
 80031ae:	440b      	add	r3, r1
 80031b0:	7812      	ldrb	r2, [r2, #0]
 80031b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_label; ++k){
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	3301      	adds	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3ed      	bcc.n	80031a2 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_label-1]=0;
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4413      	add	r3, r2
 80031cc:	3b01      	subs	r3, #1
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	4413      	add	r3, r2
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
      this->label = (char *)(inbuffer + offset-1);
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	3b01      	subs	r3, #1
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	441a      	add	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	605a      	str	r2, [r3, #4]
      offset += length_label;
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4413      	add	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
      this->size =  ((uint32_t) (*(inbuffer + offset)));
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	3301      	adds	r3, #1
 8003200:	6839      	ldr	r1, [r7, #0]
 8003202:	440b      	add	r3, r1
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	021b      	lsls	r3, r3, #8
 8003208:	431a      	orrs	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	3302      	adds	r3, #2
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	440b      	add	r3, r1
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]
      this->size |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	3303      	adds	r3, #3
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	440b      	add	r3, r1
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	061b      	lsls	r3, r3, #24
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->size);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	3304      	adds	r3, #4
 800323e:	613b      	str	r3, [r7, #16]
      this->stride =  ((uint32_t) (*(inbuffer + offset)));
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	3301      	adds	r3, #1
 8003256:	6839      	ldr	r1, [r7, #0]
 8003258:	440b      	add	r3, r1
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	3302      	adds	r3, #2
 800326c:	6839      	ldr	r1, [r7, #0]
 800326e:	440b      	add	r3, r1
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	041b      	lsls	r3, r3, #16
 8003274:	431a      	orrs	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]
      this->stride |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3303      	adds	r3, #3
 8003282:	6839      	ldr	r1, [r7, #0]
 8003284:	440b      	add	r3, r1
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	061b      	lsls	r3, r3, #24
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stride);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	3304      	adds	r3, #4
 8003294:	613b      	str	r3, [r7, #16]
     return offset;
 8003296:	693b      	ldr	r3, [r7, #16]
    }
 8003298:	4618      	mov	r0, r3
 800329a:	3718      	adds	r7, #24
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZN8std_msgs19MultiArrayDimension7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayDimension"; };
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <_ZN8std_msgs19MultiArrayDimension7getTypeEv+0x18>)
 80032aa:	4618      	mov	r0, r3
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	0801729c 	.word	0x0801729c

080032bc <_ZN8std_msgs19MultiArrayDimension6getMD5Ev>:
    virtual const char * getMD5() override { return "4cd0c83a8683deae40ecdac60e53bfa8"; };
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <_ZN8std_msgs19MultiArrayDimension6getMD5Ev+0x18>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	080172bc 	.word	0x080172bc

080032d8 <_ZN8std_msgs16MultiArrayLayoutC1Ev>:
      _dim_type st_dim;
      _dim_type * dim;
      typedef uint32_t _data_offset_type;
      _data_offset_type data_offset;

    MultiArrayLayout():
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
      dim_length(0), st_dim(), dim(nullptr),
      data_offset(0)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fe6a 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <_ZN8std_msgs16MultiArrayLayoutC1Ev+0x3c>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
      dim_length(0), st_dim(), dim(nullptr),
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3308      	adds	r3, #8
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff feab 	bl	8003054 <_ZN8std_msgs19MultiArrayDimensionC1Ev>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	619a      	str	r2, [r3, #24]
      data_offset(0)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	61da      	str	r2, [r3, #28]
    {
    }
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	080175fc 	.word	0x080175fc

08003318 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->dim_length >> (8 * 0)) & 0xFF;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	4413      	add	r3, r2
 8003330:	b2ca      	uxtb	r2, r1
 8003332:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->dim_length >> (8 * 1)) & 0xFF;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	0a19      	lsrs	r1, r3, #8
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3301      	adds	r3, #1
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	b2ca      	uxtb	r2, r1
 8003344:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->dim_length >> (8 * 2)) & 0xFF;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	0c19      	lsrs	r1, r3, #16
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3302      	adds	r3, #2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	4413      	add	r3, r2
 8003354:	b2ca      	uxtb	r2, r1
 8003356:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->dim_length >> (8 * 3)) & 0xFF;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	0e19      	lsrs	r1, r3, #24
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3303      	adds	r3, #3
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	4413      	add	r3, r2
 8003366:	b2ca      	uxtb	r2, r1
 8003368:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->dim_length);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	3304      	adds	r3, #4
 800336e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
 8003374:	e017      	b.n	80033a6 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x8e>
      offset += this->dim[i].serialize(outbuffer + offset);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699a      	ldr	r2, [r3, #24]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	18d0      	adds	r0, r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	6839      	ldr	r1, [r7, #0]
 8003392:	440a      	add	r2, r1
 8003394:	4611      	mov	r1, r2
 8003396:	4798      	blx	r3
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < dim_length; i++){
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	3301      	adds	r3, #1
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3e2      	bcc.n	8003376 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->data_offset >> (8 * 0)) & 0xFF;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	b2ca      	uxtb	r2, r1
 80033bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_offset >> (8 * 1)) & 0xFF;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	0a19      	lsrs	r1, r3, #8
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	b2ca      	uxtb	r2, r1
 80033ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_offset >> (8 * 2)) & 0xFF;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	69db      	ldr	r3, [r3, #28]
 80033d4:	0c19      	lsrs	r1, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3302      	adds	r3, #2
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	4413      	add	r3, r2
 80033de:	b2ca      	uxtb	r2, r1
 80033e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_offset >> (8 * 3)) & 0xFF;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	0e19      	lsrs	r1, r3, #24
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3303      	adds	r3, #3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	b2ca      	uxtb	r2, r1
 80033f2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_offset);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3304      	adds	r3, #4
 80033f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80033fa:	68fb      	ldr	r3, [r7, #12]
    }
 80033fc:	4618      	mov	r0, r3
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
      uint32_t dim_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	4413      	add	r3, r2
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	3301      	adds	r3, #1
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3302      	adds	r3, #2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	4313      	orrs	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
      dim_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3303      	adds	r3, #3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4413      	add	r3, r2
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->dim_length);
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	3304      	adds	r3, #4
 8003456:	617b      	str	r3, [r7, #20]
      if(dim_lengthT > dim_length)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d90a      	bls.n	8003478 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x74>
        this->dim = (std_msgs::MultiArrayDimension*)realloc(this->dim, dim_lengthT * sizeof(std_msgs::MultiArrayDimension));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f011 fa8b 	bl	8014988 <realloc>
 8003472:	4602      	mov	r2, r0
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
      dim_length = dim_lengthT;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < dim_length; i++){
 800347e:	2300      	movs	r3, #0
 8003480:	613b      	str	r3, [r7, #16]
 8003482:	e01a      	b.n	80034ba <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0xb6>
      offset += this->st_dim.deserialize(inbuffer + offset);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0008 	add.w	r0, r3, #8
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7ff fe70 	bl	8003176 <_ZN8std_msgs19MultiArrayDimension11deserializeEPh>
 8003496:	4602      	mov	r2, r0
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4413      	add	r3, r2
 800349c:	617b      	str	r3, [r7, #20]
        memcpy( &(this->dim[i]), &(this->st_dim), sizeof(std_msgs::MultiArrayDimension));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	18d0      	adds	r0, r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3308      	adds	r3, #8
 80034ac:	2210      	movs	r2, #16
 80034ae:	4619      	mov	r1, r3
 80034b0:	f012 f9b7 	bl	8015822 <memcpy>
      for( uint32_t i = 0; i < dim_length; i++){
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	3301      	adds	r3, #1
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d3df      	bcc.n	8003484 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh+0x80>
      }
      this->data_offset =  ((uint32_t) (*(inbuffer + offset)));
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4413      	add	r3, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	3301      	adds	r3, #1
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	440b      	add	r3, r1
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69da      	ldr	r2, [r3, #28]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	3302      	adds	r3, #2
 80034f0:	6839      	ldr	r1, [r7, #0]
 80034f2:	440b      	add	r3, r1
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	61da      	str	r2, [r3, #28]
      this->data_offset |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69da      	ldr	r2, [r3, #28]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3303      	adds	r3, #3
 8003506:	6839      	ldr	r1, [r7, #0]
 8003508:	440b      	add	r3, r1
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	61da      	str	r2, [r3, #28]
      offset += sizeof(this->data_offset);
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	3304      	adds	r3, #4
 8003518:	617b      	str	r3, [r7, #20]
     return offset;
 800351a:	697b      	ldr	r3, [r7, #20]
    }
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <_ZN8std_msgs16MultiArrayLayout7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/MultiArrayLayout"; };
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <_ZN8std_msgs16MultiArrayLayout7getTypeEv+0x18>)
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	080172e0 	.word	0x080172e0

08003540 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev>:
    virtual const char * getMD5() override { return "0fed2a11c13e11c5571b4e2a995a91a3"; };
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <_ZN8std_msgs16MultiArrayLayout6getMD5Ev+0x18>)
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	080172fc 	.word	0x080172fc

0800355c <_ZN8std_msgs17Float32MultiArrayC1Ev>:
      uint32_t data_length;
      typedef float _data_type;
      _data_type st_data;
      _data_type * data;

    Float32MultiArray():
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
      layout(),
      data_length(0), st_data(), data(nullptr)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fd28 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 800356c:	4a0b      	ldr	r2, [pc, #44]	; (800359c <_ZN8std_msgs17Float32MultiArrayC1Ev+0x40>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]
      layout(),
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	4618      	mov	r0, r3
 8003578:	f7ff feae 	bl	80032d8 <_ZN8std_msgs16MultiArrayLayoutC1Ev>
      data_length(0), st_data(), data(nullptr)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	62da      	str	r2, [r3, #44]	; 0x2c
    {
    }
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	080175e4 	.word	0x080175e4

080035a0 <_ZNK8std_msgs17Float32MultiArray9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
      offset += this->layout.serialize(outbuffer + offset);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1d18      	adds	r0, r3, #4
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7ff fead 	bl	8003318 <_ZNK8std_msgs16MultiArrayLayout9serializeEPh>
 80035be:	4602      	mov	r2, r0
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
      *(outbuffer + offset + 0) = (this->data_length >> (8 * 0)) & 0xFF;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	4413      	add	r3, r2
 80035d0:	b2ca      	uxtb	r2, r1
 80035d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data_length >> (8 * 1)) & 0xFF;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	0a19      	lsrs	r1, r3, #8
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	683a      	ldr	r2, [r7, #0]
 80035e0:	4413      	add	r3, r2
 80035e2:	b2ca      	uxtb	r2, r1
 80035e4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data_length >> (8 * 2)) & 0xFF;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	0c19      	lsrs	r1, r3, #16
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3302      	adds	r3, #2
 80035f0:	683a      	ldr	r2, [r7, #0]
 80035f2:	4413      	add	r3, r2
 80035f4:	b2ca      	uxtb	r2, r1
 80035f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data_length >> (8 * 3)) & 0xFF;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	0e19      	lsrs	r1, r3, #24
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	3303      	adds	r3, #3
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	4413      	add	r3, r2
 8003606:	b2ca      	uxtb	r2, r1
 8003608:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data_length);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3304      	adds	r3, #4
 800360e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003610:	2300      	movs	r3, #0
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	e02a      	b.n	800366c <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0xcc>
      union {
        float real;
        uint32_t base;
      } u_datai;
      u_datai.real = this->data[i];
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_datai.base >> (8 * 0)) & 0xFF;
 8003624:	68f9      	ldr	r1, [r7, #12]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	4413      	add	r3, r2
 800362c:	b2ca      	uxtb	r2, r1
 800362e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_datai.base >> (8 * 1)) & 0xFF;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0a19      	lsrs	r1, r3, #8
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	b2ca      	uxtb	r2, r1
 800363e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_datai.base >> (8 * 2)) & 0xFF;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	0c19      	lsrs	r1, r3, #16
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3302      	adds	r3, #2
 8003648:	683a      	ldr	r2, [r7, #0]
 800364a:	4413      	add	r3, r2
 800364c:	b2ca      	uxtb	r2, r1
 800364e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_datai.base >> (8 * 3)) & 0xFF;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	0e19      	lsrs	r1, r3, #24
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	3303      	adds	r3, #3
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	4413      	add	r3, r2
 800365c:	b2ca      	uxtb	r2, r1
 800365e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data[i]);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3304      	adds	r3, #4
 8003664:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < data_length; i++){
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	429a      	cmp	r2, r3
 8003674:	d3cf      	bcc.n	8003616 <_ZNK8std_msgs17Float32MultiArray9serializeEPh+0x76>
      }
      return offset;
 8003676:	697b      	ldr	r3, [r7, #20]
    }
 8003678:	4618      	mov	r0, r3
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
      offset += this->layout.deserialize(inbuffer + offset);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	1d18      	adds	r0, r3, #4
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4413      	add	r3, r2
 8003698:	4619      	mov	r1, r3
 800369a:	f7ff feb3 	bl	8003404 <_ZN8std_msgs16MultiArrayLayout11deserializeEPh>
 800369e:	4602      	mov	r2, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	4413      	add	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
      uint32_t data_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	4413      	add	r3, r2
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	3301      	adds	r3, #1
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	4413      	add	r3, r2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	021b      	lsls	r3, r3, #8
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	3302      	adds	r3, #2
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	4413      	add	r3, r2
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
      data_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	3303      	adds	r3, #3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
      offset += sizeof(this->data_length);
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	3304      	adds	r3, #4
 80036ea:	617b      	str	r3, [r7, #20]
      if(data_lengthT > data_length)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d90a      	bls.n	800370c <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x8c>
        this->data = (float*)realloc(this->data, data_lengthT * sizeof(float));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4619      	mov	r1, r3
 8003700:	4610      	mov	r0, r2
 8003702:	f011 f941 	bl	8014988 <realloc>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	62da      	str	r2, [r3, #44]	; 0x2c
      data_length = data_lengthT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	625a      	str	r2, [r3, #36]	; 0x24
      for( uint32_t i = 0; i < data_length; i++){
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
 8003716:	e035      	b.n	8003784 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x104>
      union {
        float real;
        uint32_t base;
      } u_st_data;
      u_st_data.base = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6839      	ldr	r1, [r7, #0]
 8003722:	440a      	add	r2, r1
 8003724:	7812      	ldrb	r2, [r2, #0]
 8003726:	4313      	orrs	r3, r2
 8003728:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3301      	adds	r3, #1
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	440b      	add	r3, r1
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	021b      	lsls	r3, r3, #8
 8003738:	4313      	orrs	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3302      	adds	r3, #2
 8003742:	6839      	ldr	r1, [r7, #0]
 8003744:	440b      	add	r3, r1
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	041b      	lsls	r3, r3, #16
 800374a:	4313      	orrs	r3, r2
 800374c:	60bb      	str	r3, [r7, #8]
      u_st_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	3303      	adds	r3, #3
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	440b      	add	r3, r1
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	061b      	lsls	r3, r3, #24
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
      this->st_data = u_st_data.real;
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	629a      	str	r2, [r3, #40]	; 0x28
      offset += sizeof(this->st_data);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	3304      	adds	r3, #4
 800376a:	617b      	str	r3, [r7, #20]
        memcpy( &(this->data[i]), &(this->st_data), sizeof(float));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	3228      	adds	r2, #40	; 0x28
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < data_length; i++){
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	3301      	adds	r3, #1
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3c4      	bcc.n	8003718 <_ZN8std_msgs17Float32MultiArray11deserializeEPh+0x98>
      }
     return offset;
 800378e:	697b      	ldr	r3, [r7, #20]
    }
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <_ZN8std_msgs17Float32MultiArray7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32MultiArray"; };
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <_ZN8std_msgs17Float32MultiArray7getTypeEv+0x18>)
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	08017320 	.word	0x08017320

080037b4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>:
    virtual const char * getMD5() override { return "6a40e0ffa6a17a503ac3f8616991b1f6"; };
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <_ZN8std_msgs17Float32MultiArray6getMD5Ev+0x18>)
 80037be:	4618      	mov	r0, r3
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	0801733c 	.word	0x0801733c

080037d0 <_ZN8std_msgs7Float32C1Ev>:
  {
    public:
      typedef float _data_type;
      _data_type data;

    Float32():
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
      data(0)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe fbee 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 80037e0:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <_ZN8std_msgs7Float32C1Ev+0x28>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	605a      	str	r2, [r3, #4]
    {
    }
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	080175cc 	.word	0x080175cc

080037fc <_ZNK8std_msgs7Float329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	4413      	add	r3, r2
 8003818:	b2ca      	uxtb	r2, r1
 800381a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	0a19      	lsrs	r1, r3, #8
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	3301      	adds	r3, #1
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	4413      	add	r3, r2
 8003828:	b2ca      	uxtb	r2, r1
 800382a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	0c19      	lsrs	r1, r3, #16
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	3302      	adds	r3, #2
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	4413      	add	r3, r2
 8003838:	b2ca      	uxtb	r2, r1
 800383a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	0e19      	lsrs	r1, r3, #24
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	3303      	adds	r3, #3
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4413      	add	r3, r2
 8003848:	b2ca      	uxtb	r2, r1
 800384a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	3304      	adds	r3, #4
 8003850:	60fb      	str	r3, [r7, #12]
      return offset;
 8003852:	68fb      	ldr	r3, [r7, #12]
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3714      	adds	r7, #20
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <_ZN8std_msgs7Float3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
      union {
        float real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	6839      	ldr	r1, [r7, #0]
 8003878:	440a      	add	r2, r1
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	4313      	orrs	r3, r2
 800387e:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	440b      	add	r3, r1
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	021b      	lsls	r3, r3, #8
 800388e:	4313      	orrs	r3, r2
 8003890:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	3302      	adds	r3, #2
 8003898:	6839      	ldr	r1, [r7, #0]
 800389a:	440b      	add	r3, r1
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	3303      	adds	r3, #3
 80038aa:	6839      	ldr	r1, [r7, #0]
 80038ac:	440b      	add	r3, r1
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	061b      	lsls	r3, r3, #24
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3304      	adds	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
     return offset;
 80038c2:	68fb      	ldr	r3, [r7, #12]
    }
 80038c4:	4618      	mov	r0, r3
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <_ZN8std_msgs7Float327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Float32"; };
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <_ZN8std_msgs7Float327getTypeEv+0x18>)
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	08017360 	.word	0x08017360

080038ec <_ZN8std_msgs7Float326getMD5Ev>:
    virtual const char * getMD5() override { return "73fcbf46b49191e672908e50842a83d4"; };
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	4b03      	ldr	r3, [pc, #12]	; (8003904 <_ZN8std_msgs7Float326getMD5Ev+0x18>)
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	08017374 	.word	0x08017374

08003908 <_ZN8std_msgs4BoolC1Ev>:
  {
    public:
      typedef bool _data_type;
      _data_type data;

    Bool():
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
      data(0)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fb52 	bl	8001fbc <_ZN3ros3MsgC1Ev>
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_ZN8std_msgs4BoolC1Ev+0x28>)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	711a      	strb	r2, [r3, #4]
    {
    }
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	080175b4 	.word	0x080175b4

08003934 <_ZNK8std_msgs4Bool9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.real = this->data;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	791b      	ldrb	r3, [r3, #4]
 8003946:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	7a3a      	ldrb	r2, [r7, #8]
 8003950:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
      return offset;
 8003958:	68fb      	ldr	r3, [r7, #12]
    }
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <_ZN8std_msgs4Bool11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
      union {
        bool real;
        uint8_t base;
      } u_data;
      u_data.base = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	723b      	strb	r3, [r7, #8]
      u_data.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003978:	7a3a      	ldrb	r2, [r7, #8]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6839      	ldr	r1, [r7, #0]
 800397e:	440b      	add	r3, r1
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4313      	orrs	r3, r2
 8003984:	b2db      	uxtb	r3, r3
 8003986:	723b      	strb	r3, [r7, #8]
      this->data = u_data.real;
 8003988:	7a3a      	ldrb	r2, [r7, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	3301      	adds	r3, #1
 8003992:	60fb      	str	r3, [r7, #12]
     return offset;
 8003994:	68fb      	ldr	r3, [r7, #12]
    }
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <_ZN8std_msgs4Bool7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Bool"; };
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <_ZN8std_msgs4Bool7getTypeEv+0x18>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	08017398 	.word	0x08017398

080039c0 <_ZN8std_msgs4Bool6getMD5Ev>:
    virtual const char * getMD5() override { return "8b94c1b53db61fb6aed406028ad6332a"; };
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	4b03      	ldr	r3, [pc, #12]	; (80039d8 <_ZN8std_msgs4Bool6getMD5Ev+0x18>)
 80039ca:	4618      	mov	r0, r3
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	080173a8 	.word	0x080173a8

080039dc <_ZL8DWT_Initv>:
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; //
 80039e0:	4b08      	ldr	r3, [pc, #32]	; (8003a04 <_ZL8DWT_Initv+0x28>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4a07      	ldr	r2, [pc, #28]	; (8003a04 <_ZL8DWT_Initv+0x28>)
 80039e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039ea:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   //
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <_ZL8DWT_Initv+0x2c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <_ZL8DWT_Initv+0x2c>)
 80039f2:	f043 0301 	orr.w	r3, r3, #1
 80039f6:	6013      	str	r3, [r2, #0]
}
 80039f8:	bf00      	nop
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	e000edf0 	.word	0xe000edf0
 8003a08:	e0001000 	.word	0xe0001000

08003a0c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	08017644 	.word	0x08017644

08003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ffe8 	bl	8003a0c <_ZN3ros15NodeHandleBase_C1Ev>
 8003a3c:	4a48      	ldr	r2, [pc, #288]	; (8003b60 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev+0x134>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3304      	adds	r3, #4
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff f9f0 	bl	8002e2c <_ZN13STM32HardwareC1Ev>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a76:	2100      	movs	r1, #0
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f011 fdff 	bl	801567c <memset>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a84:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f011 fdf4 	bl	801567c <memset>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003a9a:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003a9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f011 fde9 	bl	801567c <memset>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ab0:	f203 53b4 	addw	r3, r3, #1460	; 0x5b4
 8003ab4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003ab8:	2100      	movs	r1, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	f011 fdde 	bl	801567c <memset>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003af0:	461a      	mov	r2, r3
 8003af2:	2300      	movs	r3, #0
 8003af4:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003afe:	461a      	mov	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b18:	461a      	mov	r2, r3
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b34:	461a      	mov	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	f242 736c 	movw	r3, #10092	; 0x276c
 8003b4e:	4413      	add	r3, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7fe fda7 	bl	80026a4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	080175a0 	.word	0x080175a0

08003b64 <_Z13read_ble_dataPh>:
//uint8_t publish_frequency = 20;
//uint8_t pid_frequency = 10;


//read esc data from ble
HAL_StatusTypeDef read_ble_data(uint8_t* data){
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
	static uint8_t start_index = 0;
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	73fb      	strb	r3, [r7, #15]
 8003b72:	e01e      	b.n	8003bb2 <_Z13read_ble_dataPh+0x4e>
		if(data[i]==0xFE && data[(i+1)%ESC_DATA_SIZE]==0x01){
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2bfe      	cmp	r3, #254	; 0xfe
 8003b7e:	d115      	bne.n	8003bac <_Z13read_ble_dataPh+0x48>
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	3301      	adds	r3, #1
 8003b84:	425a      	negs	r2, r3
 8003b86:	f003 031f 	and.w	r3, r3, #31
 8003b8a:	f002 021f 	and.w	r2, r2, #31
 8003b8e:	bf58      	it	pl
 8003b90:	4253      	negpl	r3, r2
 8003b92:	461a      	mov	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4413      	add	r3, r2
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d106      	bne.n	8003bac <_Z13read_ble_dataPh+0x48>
			start_index = i%ESC_DATA_SIZE;
 8003b9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4b3c      	ldr	r3, [pc, #240]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003ba8:	701a      	strb	r2, [r3, #0]
			break;
 8003baa:	e009      	b.n	8003bc0 <_Z13read_ble_dataPh+0x5c>
	for(uint8_t i=start_index;i<start_index+ESC_DATA_SIZE;++i){
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	4b39      	ldr	r3, [pc, #228]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	f103 021f 	add.w	r2, r3, #31
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	dad9      	bge.n	8003b74 <_Z13read_ble_dataPh+0x10>
		}
	}

	if(data[(2+start_index)%ESC_DATA_SIZE]!=0x00)return HAL_ERROR;
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	3302      	adds	r3, #2
 8003bc6:	425a      	negs	r2, r3
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	f002 021f 	and.w	r2, r2, #31
 8003bd0:	bf58      	it	pl
 8003bd2:	4253      	negpl	r3, r2
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <_Z13read_ble_dataPh+0x80>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e129      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(3+start_index)%ESC_DATA_SIZE]!=0x03)return HAL_ERROR;
 8003be4:	4b2c      	ldr	r3, [pc, #176]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	3303      	adds	r3, #3
 8003bea:	425a      	negs	r2, r3
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	f002 021f 	and.w	r2, r2, #31
 8003bf4:	bf58      	it	pl
 8003bf6:	4253      	negpl	r3, r2
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d001      	beq.n	8003c08 <_Z13read_ble_dataPh+0xa4>
 8003c04:	2301      	movs	r3, #1
 8003c06:	e117      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(4+start_index)%ESC_DATA_SIZE]!=0x30)return HAL_ERROR;
 8003c08:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	425a      	negs	r2, r3
 8003c10:	f003 031f 	and.w	r3, r3, #31
 8003c14:	f002 021f 	and.w	r2, r2, #31
 8003c18:	bf58      	it	pl
 8003c1a:	4253      	negpl	r3, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d001      	beq.n	8003c2c <_Z13read_ble_dataPh+0xc8>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e105      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(5+start_index)%ESC_DATA_SIZE]!=0x5c)return HAL_ERROR;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	3305      	adds	r3, #5
 8003c32:	425a      	negs	r2, r3
 8003c34:	f003 031f 	and.w	r3, r3, #31
 8003c38:	f002 021f 	and.w	r2, r2, #31
 8003c3c:	bf58      	it	pl
 8003c3e:	4253      	negpl	r3, r2
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b5c      	cmp	r3, #92	; 0x5c
 8003c4a:	d001      	beq.n	8003c50 <_Z13read_ble_dataPh+0xec>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0f3      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(6+start_index)%ESC_DATA_SIZE]!=0x17)return HAL_ERROR;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	3306      	adds	r3, #6
 8003c56:	425a      	negs	r2, r3
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	f002 021f 	and.w	r2, r2, #31
 8003c60:	bf58      	it	pl
 8003c62:	4253      	negpl	r3, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b17      	cmp	r3, #23
 8003c6e:	d001      	beq.n	8003c74 <_Z13read_ble_dataPh+0x110>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0e1      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
	if(data[(7+start_index)%ESC_DATA_SIZE]!=0x06)return HAL_ERROR;
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <_Z13read_ble_dataPh+0x134>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	3307      	adds	r3, #7
 8003c7a:	425a      	negs	r2, r3
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	bf58      	it	pl
 8003c86:	4253      	negpl	r3, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d003      	beq.n	8003c9c <_Z13read_ble_dataPh+0x138>
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0cf      	b.n	8003e38 <_Z13read_ble_dataPh+0x2d4>
 8003c98:	2400456c 	.word	0x2400456c

	esc_sensor.throttle = (int16_t)(data[(9+start_index)%ESC_DATA_SIZE]);
 8003c9c:	4b69      	ldr	r3, [pc, #420]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	3309      	adds	r3, #9
 8003ca2:	425a      	negs	r2, r3
 8003ca4:	f003 031f 	and.w	r3, r3, #31
 8003ca8:	f002 021f 	and.w	r2, r2, #31
 8003cac:	bf58      	it	pl
 8003cae:	4253      	negpl	r3, r2
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	b21a      	sxth	r2, r3
 8003cba:	4b63      	ldr	r3, [pc, #396]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003cbc:	801a      	strh	r2, [r3, #0]
	if(data[(11+start_index)%ESC_DATA_SIZE]!=0x01)esc_sensor.throttle=-esc_sensor.throttle;
 8003cbe:	4b61      	ldr	r3, [pc, #388]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	330b      	adds	r3, #11
 8003cc4:	425a      	negs	r2, r3
 8003cc6:	f003 031f 	and.w	r3, r3, #31
 8003cca:	f002 021f 	and.w	r2, r2, #31
 8003cce:	bf58      	it	pl
 8003cd0:	4253      	negpl	r3, r2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d008      	beq.n	8003cf0 <_Z13read_ble_dataPh+0x18c>
 8003cde:	4b5a      	ldr	r3, [pc, #360]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	425b      	negs	r3, r3
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	b21a      	sxth	r2, r3
 8003cec:	4b56      	ldr	r3, [pc, #344]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003cee:	801a      	strh	r2, [r3, #0]

	esc_sensor.rpm = ((uint32_t)(data[(14+start_index)%ESC_DATA_SIZE] <<8) | (data[(13+start_index)%ESC_DATA_SIZE]))*10;
 8003cf0:	4b54      	ldr	r3, [pc, #336]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	330e      	adds	r3, #14
 8003cf6:	425a      	negs	r2, r3
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	f002 021f 	and.w	r2, r2, #31
 8003d00:	bf58      	it	pl
 8003d02:	4253      	negpl	r3, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	021b      	lsls	r3, r3, #8
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	330d      	adds	r3, #13
 8003d16:	425a      	negs	r2, r3
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	f002 021f 	and.w	r2, r2, #31
 8003d20:	bf58      	it	pl
 8003d22:	4253      	negpl	r3, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	ea41 0203 	orr.w	r2, r1, r3
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4b43      	ldr	r3, [pc, #268]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003d3c:	605a      	str	r2, [r3, #4]
	esc_sensor.voltage = (float)(data[(15+start_index)%ESC_DATA_SIZE])/10.0f;
 8003d3e:	4b41      	ldr	r3, [pc, #260]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	330f      	adds	r3, #15
 8003d44:	425a      	negs	r2, r3
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	f002 021f 	and.w	r2, r2, #31
 8003d4e:	bf58      	it	pl
 8003d50:	4253      	negpl	r3, r2
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	ee07 3a90 	vmov	s15, r3
 8003d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d62:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003d6c:	edc3 7a02 	vstr	s15, [r3, #8]
	esc_sensor.current = ((uint16_t)(data[(16+start_index)%ESC_DATA_SIZE] <<8) | (data[(17+start_index)%ESC_DATA_SIZE]))/10.0;
 8003d70:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	3310      	adds	r3, #16
 8003d76:	425a      	negs	r2, r3
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	f002 021f 	and.w	r2, r2, #31
 8003d80:	bf58      	it	pl
 8003d82:	4253      	negpl	r3, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	021b      	lsls	r3, r3, #8
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	4619      	mov	r1, r3
 8003d94:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	3311      	adds	r3, #17
 8003d9a:	425a      	negs	r2, r3
 8003d9c:	f003 031f 	and.w	r3, r3, #31
 8003da0:	f002 021f 	and.w	r2, r2, #31
 8003da4:	bf58      	it	pl
 8003da6:	4253      	negpl	r3, r2
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dba:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8003dbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003dc2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003dc8:	edc3 7a03 	vstr	s15, [r3, #12]
	esc_sensor.temperature = (uint16_t)(data[(18+start_index)%ESC_DATA_SIZE] <<8) | (data[(19+start_index)%ESC_DATA_SIZE]);
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	3312      	adds	r3, #18
 8003dd2:	425a      	negs	r2, r3
 8003dd4:	f003 031f 	and.w	r3, r3, #31
 8003dd8:	f002 021f 	and.w	r2, r2, #31
 8003ddc:	bf58      	it	pl
 8003dde:	4253      	negpl	r3, r2
 8003de0:	461a      	mov	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	021b      	lsls	r3, r3, #8
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <_Z13read_ble_dataPh+0x2e0>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3313      	adds	r3, #19
 8003df4:	4259      	negs	r1, r3
 8003df6:	f003 031f 	and.w	r3, r3, #31
 8003dfa:	f001 011f 	and.w	r1, r1, #31
 8003dfe:	bf58      	it	pl
 8003e00:	424b      	negpl	r3, r1
 8003e02:	4619      	mov	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	440b      	add	r3, r1
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003e12:	821a      	strh	r2, [r3, #16]

	current_esc_speed = esc_sensor.rpm/parameters.esc_rpm_to_speed_ratio;
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <_Z13read_ble_dataPh+0x2e4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	ee07 3a90 	vmov	s15, r3
 8003e1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e20:	4b0a      	ldr	r3, [pc, #40]	; (8003e4c <_Z13read_ble_dataPh+0x2e8>)
 8003e22:	ed93 7a06 	vldr	s14, [r3, #24]
 8003e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e2a:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <_Z13read_ble_dataPh+0x2ec>)
 8003e2c:	edc3 7a00 	vstr	s15, [r3]
	esc_receive_indicator = 0;
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <_Z13read_ble_dataPh+0x2f0>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]

	return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr
 8003e44:	2400456c 	.word	0x2400456c
 8003e48:	2400434c 	.word	0x2400434c
 8003e4c:	24000004 	.word	0x24000004
 8003e50:	24004414 	.word	0x24004414
 8003e54:	24004381 	.word	0x24004381

08003e58 <_Z15read_speed_dataPh>:

//read speed data from f103
//the first data are "acsr", then the fifth is the integer part of speed1, and the sixth is the decimal part of speed1..
HAL_StatusTypeDef read_speed_data(uint8_t* data){
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003e60:	2300      	movs	r3, #0
 8003e62:	73fb      	strb	r3, [r7, #15]
 8003e64:	e01d      	b.n	8003ea2 <_Z15read_speed_dataPh+0x4a>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003e66:	7bfb      	ldrb	r3, [r7, #15]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b41      	cmp	r3, #65	; 0x41
 8003e70:	d114      	bne.n	8003e9c <_Z15read_speed_dataPh+0x44>
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3301      	adds	r3, #1
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	4413      	add	r3, r2
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b43      	cmp	r3, #67	; 0x43
 8003e7e:	d10d      	bne.n	8003e9c <_Z15read_speed_dataPh+0x44>
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
 8003e82:	3302      	adds	r3, #2
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b53      	cmp	r3, #83	; 0x53
 8003e8c:	d106      	bne.n	8003e9c <_Z15read_speed_dataPh+0x44>
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	3303      	adds	r3, #3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b52      	cmp	r3, #82	; 0x52
 8003e9a:	d006      	beq.n	8003eaa <_Z15read_speed_dataPh+0x52>
	for(i = 0;i<2*SPEED_PIN_COUNT;++i){
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b1f      	cmp	r3, #31
 8003ea6:	d9de      	bls.n	8003e66 <_Z15read_speed_dataPh+0xe>
 8003ea8:	e000      	b.n	8003eac <_Z15read_speed_dataPh+0x54>
		if(data[i]=='A' && data[i+1]=='C'&& data[i+2]=='S'&& data[i+3]=='R')break;
 8003eaa:	bf00      	nop
	}
	if(i==2*SPEED_PIN_COUNT)return HAL_ERROR;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d101      	bne.n	8003eb6 <_Z15read_speed_dataPh+0x5e>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e04b      	b.n	8003f4e <_Z15read_speed_dataPh+0xf6>

	for(int j=0;j<SPEED_PIN_COUNT;++j){
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	e041      	b.n	8003f40 <_Z15read_speed_dataPh+0xe8>
		speed[j] = data[(2*j+i+4)%(2*SPEED_PIN_COUNT+4)]+data[(2*j+1+i+4)%(2*SPEED_PIN_COUNT+4)]/100.0;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	005a      	lsls	r2, r3, #1
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	1d1a      	adds	r2, r3, #4
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <_Z15read_speed_dataPh+0x110>)
 8003ec8:	fb83 1302 	smull	r1, r3, r3, r2
 8003ecc:	10d9      	asrs	r1, r3, #3
 8003ece:	17d3      	asrs	r3, r2, #31
 8003ed0:	1ac9      	subs	r1, r1, r3
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	440b      	add	r3, r1
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	1ad1      	subs	r1, r2, r3
 8003edc:	460a      	mov	r2, r1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	1d1a      	adds	r2, r3, #4
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <_Z15read_speed_dataPh+0x110>)
 8003efa:	fb83 1302 	smull	r1, r3, r3, r2
 8003efe:	10d9      	asrs	r1, r3, #3
 8003f00:	17d3      	asrs	r3, r2, #31
 8003f02:	1ac9      	subs	r1, r1, r3
 8003f04:	460b      	mov	r3, r1
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	440b      	add	r3, r1
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	1ad1      	subs	r1, r2, r3
 8003f0e:	460a      	mov	r2, r1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4413      	add	r3, r2
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	ee07 3a90 	vmov	s15, r3
 8003f1a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8003f1e:	ed9f 4b10 	vldr	d4, [pc, #64]	; 8003f60 <_Z15read_speed_dataPh+0x108>
 8003f22:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8003f26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f2e:	4a0f      	ldr	r2, [pc, #60]	; (8003f6c <_Z15read_speed_dataPh+0x114>)
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	edc3 7a00 	vstr	s15, [r3]
	for(int j=0;j<SPEED_PIN_COUNT;++j){
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b0f      	cmp	r3, #15
 8003f44:	ddba      	ble.n	8003ebc <_Z15read_speed_dataPh+0x64>
	}
	f103_receive_indicator = 0;
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <_Z15read_speed_dataPh+0x118>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	f3af 8000 	nop.w
 8003f60:	00000000 	.word	0x00000000
 8003f64:	40590000 	.word	0x40590000
 8003f68:	38e38e39 	.word	0x38e38e39
 8003f6c:	240043a8 	.word	0x240043a8
 8003f70:	24004382 	.word	0x24004382

08003f74 <HAL_UART_TxCpltCallback>:

//ros structure required
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	if(huart==&huart4){
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	4a07      	ldr	r2, [pc, #28]	; (8003f9c <HAL_UART_TxCpltCallback+0x28>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d106      	bne.n	8003f92 <HAL_UART_TxCpltCallback+0x1e>
		nh.getHardware()->flush();
 8003f84:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <HAL_UART_TxCpltCallback+0x2c>)
 8003f86:	f001 f8fc 	bl	8005182 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe ffb3 	bl	8002ef8 <_ZN13STM32Hardware5flushEv>
	}
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2400143c 	.word	0x2400143c
 8003fa0:	24001b74 	.word	0x24001b74

08003fa4 <HAL_UART_RxCpltCallback>:

//uart data receive callback
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart4.Instance){
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b34      	ldr	r3, [pc, #208]	; (8004084 <HAL_UART_RxCpltCallback+0xe0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d107      	bne.n	8003fc8 <HAL_UART_RxCpltCallback+0x24>
		nh.getHardware()->reset_rbuf();
 8003fb8:	4833      	ldr	r0, [pc, #204]	; (8004088 <HAL_UART_RxCpltCallback+0xe4>)
 8003fba:	f001 f8e2 	bl	8005182 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe ff5a 	bl	8002e7a <_ZN13STM32Hardware10reset_rbufEv>

			jy901_data_length = i;
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
		}
	}
}
 8003fc6:	e059      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_esc.Instance){
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	4b2f      	ldr	r3, [pc, #188]	; (800408c <HAL_UART_RxCpltCallback+0xe8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d103      	bne.n	8003fdc <HAL_UART_RxCpltCallback+0x38>
		read_ble_data(esc_receive);
 8003fd4:	482e      	ldr	r0, [pc, #184]	; (8004090 <HAL_UART_RxCpltCallback+0xec>)
 8003fd6:	f7ff fdc5 	bl	8003b64 <_Z13read_ble_dataPh>
}
 8003fda:	e04f      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_f103.Instance){
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	4b2c      	ldr	r3, [pc, #176]	; (8004094 <HAL_UART_RxCpltCallback+0xf0>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d103      	bne.n	8003ff0 <HAL_UART_RxCpltCallback+0x4c>
		read_speed_data(speed_receive);
 8003fe8:	482b      	ldr	r0, [pc, #172]	; (8004098 <HAL_UART_RxCpltCallback+0xf4>)
 8003fea:	f7ff ff35 	bl	8003e58 <_Z15read_speed_dataPh>
}
 8003fee:	e045      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
	}else if(huart->Instance==huart_imu.Instance){
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d13f      	bne.n	800407c <HAL_UART_RxCpltCallback+0xd8>
		if(jy901_data[0]==0x55 && jy901_data_length==11){
 8003ffc:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b55      	cmp	r3, #85	; 0x55
 8004002:	d110      	bne.n	8004026 <HAL_UART_RxCpltCallback+0x82>
 8004004:	4b27      	ldr	r3, [pc, #156]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	2b0b      	cmp	r3, #11
 800400a:	d10c      	bne.n	8004026 <HAL_UART_RxCpltCallback+0x82>
			jy901.parseData(jy901_data);
 800400c:	4924      	ldr	r1, [pc, #144]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 800400e:	4826      	ldr	r0, [pc, #152]	; (80040a8 <HAL_UART_RxCpltCallback+0x104>)
 8004010:	f7fc fb66 	bl	80006e0 <_ZN6CJY9019parseDataEPh>
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	b29b      	uxth	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	4920      	ldr	r1, [pc, #128]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 800401e:	481f      	ldr	r0, [pc, #124]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8004020:	f00e fc54 	bl	80128cc <HAL_UART_Receive_DMA>
}
 8004024:	e02a      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
		}else if(jy901_data_length!=11){
 8004026:	4b1f      	ldr	r3, [pc, #124]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b0b      	cmp	r3, #11
 800402c:	d00b      	beq.n	8004046 <HAL_UART_RxCpltCallback+0xa2>
			jy901_data_length = 11;
 800402e:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004030:	220b      	movs	r2, #11
 8004032:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	4918      	ldr	r1, [pc, #96]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 800403e:	4817      	ldr	r0, [pc, #92]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8004040:	f00e fc44 	bl	80128cc <HAL_UART_Receive_DMA>
}
 8004044:	e01a      	b.n	800407c <HAL_UART_RxCpltCallback+0xd8>
			uint8_t i = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	73fb      	strb	r3, [r7, #15]
			for(;i<11;++i){
 800404a:	e007      	b.n	800405c <HAL_UART_RxCpltCallback+0xb8>
				if(jy901_data[i]==0x55)break;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 8004050:	5cd3      	ldrb	r3, [r2, r3]
 8004052:	2b55      	cmp	r3, #85	; 0x55
 8004054:	d006      	beq.n	8004064 <HAL_UART_RxCpltCallback+0xc0>
			for(;i<11;++i){
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3301      	adds	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	7bfb      	ldrb	r3, [r7, #15]
 800405e:	2b0a      	cmp	r3, #10
 8004060:	d9f4      	bls.n	800404c <HAL_UART_RxCpltCallback+0xa8>
 8004062:	e000      	b.n	8004066 <HAL_UART_RxCpltCallback+0xc2>
				if(jy901_data[i]==0x55)break;
 8004064:	bf00      	nop
			jy901_data_length = i;
 8004066:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	7013      	strb	r3, [r2, #0]
			HAL_UART_Receive_DMA(&huart8, jy901_data, jy901_data_length);
 800406c:	4b0d      	ldr	r3, [pc, #52]	; (80040a4 <HAL_UART_RxCpltCallback+0x100>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	490a      	ldr	r1, [pc, #40]	; (80040a0 <HAL_UART_RxCpltCallback+0xfc>)
 8004076:	4809      	ldr	r0, [pc, #36]	; (800409c <HAL_UART_RxCpltCallback+0xf8>)
 8004078:	f00e fc28 	bl	80128cc <HAL_UART_Receive_DMA>
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	2400143c 	.word	0x2400143c
 8004088:	24001b74 	.word	0x24001b74
 800408c:	240013a8 	.word	0x240013a8
 8004090:	24004360 	.word	0x24004360
 8004094:	240014d0 	.word	0x240014d0
 8004098:	24004384 	.word	0x24004384
 800409c:	240015f8 	.word	0x240015f8
 80040a0:	240044ac 	.word	0x240044ac
 80040a4:	24000000 	.word	0x24000000
 80040a8:	240044b8 	.word	0x240044b8

080040ac <HAL_UARTEx_RxEventCallback>:

//uart receive callback for cp2102
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80040ac:	b5b0      	push	{r4, r5, r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a68      	ldr	r2, [pc, #416]	; (8004260 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	f040 80c9 	bne.w	8004256 <HAL_UARTEx_RxEventCallback+0x1aa>
	{
		if(usb_buf[0]=='x' && usb_buf[1]=='i' && usb_buf[2]=='l' && usb_buf[3]=='i' && usb_buf[4]=='n'){
 80040c4:	4b67      	ldr	r3, [pc, #412]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b78      	cmp	r3, #120	; 0x78
 80040ca:	d116      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040cc:	4b65      	ldr	r3, [pc, #404]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040ce:	785b      	ldrb	r3, [r3, #1]
 80040d0:	2b69      	cmp	r3, #105	; 0x69
 80040d2:	d112      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040d4:	4b63      	ldr	r3, [pc, #396]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040d6:	789b      	ldrb	r3, [r3, #2]
 80040d8:	2b6c      	cmp	r3, #108	; 0x6c
 80040da:	d10e      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040dc:	4b61      	ldr	r3, [pc, #388]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040de:	78db      	ldrb	r3, [r3, #3]
 80040e0:	2b69      	cmp	r3, #105	; 0x69
 80040e2:	d10a      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
 80040e4:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040e6:	791b      	ldrb	r3, [r3, #4]
 80040e8:	2b6e      	cmp	r3, #110	; 0x6e
 80040ea:	d106      	bne.n	80040fa <HAL_UARTEx_RxEventCallback+0x4e>
			HAL_UART_Transmit(&huart7, (uint8_t*)(&parameters) , sizeof(ParameterTypeDef), 10);
 80040ec:	230a      	movs	r3, #10
 80040ee:	2240      	movs	r2, #64	; 0x40
 80040f0:	495d      	ldr	r1, [pc, #372]	; (8004268 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80040f2:	485e      	ldr	r0, [pc, #376]	; (800426c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80040f4:	f00e fadc 	bl	80126b0 <HAL_UART_Transmit>
 80040f8:	e047      	b.n	800418a <HAL_UARTEx_RxEventCallback+0xde>
		}else if(usb_buf[0]=='a' && usb_buf[1]=='c' && usb_buf[2]=='s' && usb_buf[3]=='r'){
 80040fa:	4b5a      	ldr	r3, [pc, #360]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b61      	cmp	r3, #97	; 0x61
 8004100:	d140      	bne.n	8004184 <HAL_UARTEx_RxEventCallback+0xd8>
 8004102:	4b58      	ldr	r3, [pc, #352]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b63      	cmp	r3, #99	; 0x63
 8004108:	d13c      	bne.n	8004184 <HAL_UARTEx_RxEventCallback+0xd8>
 800410a:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800410c:	789b      	ldrb	r3, [r3, #2]
 800410e:	2b73      	cmp	r3, #115	; 0x73
 8004110:	d138      	bne.n	8004184 <HAL_UARTEx_RxEventCallback+0xd8>
 8004112:	4b54      	ldr	r3, [pc, #336]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004114:	78db      	ldrb	r3, [r3, #3]
 8004116:	2b72      	cmp	r3, #114	; 0x72
 8004118:	d134      	bne.n	8004184 <HAL_UARTEx_RxEventCallback+0xd8>
			uint32_t i = sizeof(ParameterTypeDef)-4;
 800411a:	233c      	movs	r3, #60	; 0x3c
 800411c:	60fb      	str	r3, [r7, #12]
			if(usb_buf[i]!='b' || usb_buf[i+1]!='4'|| usb_buf[i+2]!='0'|| usb_buf[i+3]!='1'){
 800411e:	4a51      	ldr	r2, [pc, #324]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4413      	add	r3, r2
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b62      	cmp	r3, #98	; 0x62
 8004128:	d111      	bne.n	800414e <HAL_UARTEx_RxEventCallback+0xa2>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	4a4d      	ldr	r2, [pc, #308]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004130:	5cd3      	ldrb	r3, [r2, r3]
 8004132:	2b34      	cmp	r3, #52	; 0x34
 8004134:	d10b      	bne.n	800414e <HAL_UARTEx_RxEventCallback+0xa2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3302      	adds	r3, #2
 800413a:	4a4a      	ldr	r2, [pc, #296]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800413c:	5cd3      	ldrb	r3, [r2, r3]
 800413e:	2b30      	cmp	r3, #48	; 0x30
 8004140:	d105      	bne.n	800414e <HAL_UARTEx_RxEventCallback+0xa2>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	3303      	adds	r3, #3
 8004146:	4a47      	ldr	r2, [pc, #284]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8004148:	5cd3      	ldrb	r3, [r2, r3]
 800414a:	2b31      	cmp	r3, #49	; 0x31
 800414c:	d003      	beq.n	8004156 <HAL_UARTEx_RxEventCallback+0xaa>
				printf("Receive Wrong Data\n");
 800414e:	4848      	ldr	r0, [pc, #288]	; (8004270 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8004150:	f011 f9b4 	bl	80154bc <puts>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
				printf("Write the Configuration Complete!\n");
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
			}

		}else{
 8004154:	e019      	b.n	800418a <HAL_UARTEx_RxEventCallback+0xde>
				memcpy(&parameters,usb_buf,sizeof(ParameterTypeDef));
 8004156:	4a44      	ldr	r2, [pc, #272]	; (8004268 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8004158:	4b42      	ldr	r3, [pc, #264]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800415a:	4614      	mov	r4, r2
 800415c:	461d      	mov	r5, r3
 800415e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004162:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004164:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004166:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004168:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800416a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800416e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				printf("Write the Configuration Complete!\n");
 8004172:	4840      	ldr	r0, [pc, #256]	; (8004274 <HAL_UARTEx_RxEventCallback+0x1c8>)
 8004174:	f011 f9a2 	bl	80154bc <puts>
				QSPI_W25Q64JV_Write((uint8_t*)(&parameters),0x0,sizeof(ParameterTypeDef));
 8004178:	2240      	movs	r2, #64	; 0x40
 800417a:	2100      	movs	r1, #0
 800417c:	483a      	ldr	r0, [pc, #232]	; (8004268 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800417e:	f7fc fed7 	bl	8000f30 <QSPI_W25Q64JV_Write>
		}else{
 8004182:	e002      	b.n	800418a <HAL_UARTEx_RxEventCallback+0xde>
			printf("Receive Wrong Data\n");
 8004184:	483a      	ldr	r0, [pc, #232]	; (8004270 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8004186:	f011 f999 	bl	80154bc <puts>
			//HAL_UART_Transmit(&huart7,data, sizeof(data), 10);
		}
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 800418a:	2264      	movs	r2, #100	; 0x64
 800418c:	4935      	ldr	r1, [pc, #212]	; (8004264 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800418e:	4837      	ldr	r0, [pc, #220]	; (800426c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8004190:	f010 fa80 	bl	8014694 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004194:	4b38      	ldr	r3, [pc, #224]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a38      	ldr	r2, [pc, #224]	; (800427c <HAL_UARTEx_RxEventCallback+0x1d0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a37      	ldr	r2, [pc, #220]	; (8004280 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041a8:	4b33      	ldr	r3, [pc, #204]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a35      	ldr	r2, [pc, #212]	; (8004284 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041bc:	4b2e      	ldr	r3, [pc, #184]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a32      	ldr	r2, [pc, #200]	; (800428c <HAL_UARTEx_RxEventCallback+0x1e0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a31      	ldr	r2, [pc, #196]	; (8004290 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2f      	ldr	r2, [pc, #188]	; (8004294 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041da:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2e      	ldr	r2, [pc, #184]	; (8004298 <HAL_UARTEx_RxEventCallback+0x1ec>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041e4:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_UARTEx_RxEventCallback+0x1f0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2b      	ldr	r2, [pc, #172]	; (80042a0 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 80041f8:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 8004202:	4b1d      	ldr	r3, [pc, #116]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a28      	ldr	r2, [pc, #160]	; (80042a8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a26      	ldr	r2, [pc, #152]	; (80042ac <HAL_UARTEx_RxEventCallback+0x200>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a25      	ldr	r2, [pc, #148]	; (80042b0 <HAL_UARTEx_RxEventCallback+0x204>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 8004220:	4b15      	ldr	r3, [pc, #84]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a23      	ldr	r2, [pc, #140]	; (80042b4 <HAL_UARTEx_RxEventCallback+0x208>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_UARTEx_RxEventCallback+0x188>
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <HAL_UARTEx_RxEventCallback+0x20c>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <HAL_UARTEx_RxEventCallback+0x19a>
 8004234:	4b10      	ldr	r3, [pc, #64]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0208 	bic.w	r2, r2, #8
 8004242:	601a      	str	r2, [r3, #0]
	}
}
 8004244:	e007      	b.n	8004256 <HAL_UARTEx_RxEventCallback+0x1aa>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004246:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <HAL_UARTEx_RxEventCallback+0x1cc>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0204 	bic.w	r2, r2, #4
 8004254:	601a      	str	r2, [r3, #0]
}
 8004256:	bf00      	nop
 8004258:	3710      	adds	r7, #16
 800425a:	46bd      	mov	sp, r7
 800425c:	bdb0      	pop	{r4, r5, r7, pc}
 800425e:	bf00      	nop
 8004260:	40007800 	.word	0x40007800
 8004264:	24004418 	.word	0x24004418
 8004268:	24000004 	.word	0x24000004
 800426c:	24001564 	.word	0x24001564
 8004270:	080173cc 	.word	0x080173cc
 8004274:	080173e0 	.word	0x080173e0
 8004278:	2400186c 	.word	0x2400186c
 800427c:	40020010 	.word	0x40020010
 8004280:	40020028 	.word	0x40020028
 8004284:	40020040 	.word	0x40020040
 8004288:	40020058 	.word	0x40020058
 800428c:	40020070 	.word	0x40020070
 8004290:	40020088 	.word	0x40020088
 8004294:	400200a0 	.word	0x400200a0
 8004298:	400200b8 	.word	0x400200b8
 800429c:	40020410 	.word	0x40020410
 80042a0:	40020428 	.word	0x40020428
 80042a4:	40020440 	.word	0x40020440
 80042a8:	40020458 	.word	0x40020458
 80042ac:	40020470 	.word	0x40020470
 80042b0:	40020488 	.word	0x40020488
 80042b4:	400204a0 	.word	0x400204a0
 80042b8:	400204b8 	.word	0x400204b8

080042bc <HAL_UART_ErrorCallback>:

//error handle of uart
void HAL_UART_ErrorCallback(UART_HandleTypeDef *UartHandle) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
    if(UartHandle->Instance==huart_esc.Instance) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b48      	ldr	r3, [pc, #288]	; (80043ec <HAL_UART_ErrorCallback+0x130>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d105      	bne.n	80042dc <HAL_UART_ErrorCallback+0x20>
    	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 80042d0:	2220      	movs	r2, #32
 80042d2:	4947      	ldr	r1, [pc, #284]	; (80043f0 <HAL_UART_ErrorCallback+0x134>)
 80042d4:	4845      	ldr	r0, [pc, #276]	; (80043ec <HAL_UART_ErrorCallback+0x130>)
 80042d6:	f00e faf9 	bl	80128cc <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
	}else if(UartHandle->Instance==UART7){
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
	}
}
 80042da:	e082      	b.n	80043e2 <HAL_UART_ErrorCallback+0x126>
    }else if(UartHandle->Instance==huart_f103.Instance) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <HAL_UART_ErrorCallback+0x138>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d105      	bne.n	80042f4 <HAL_UART_ErrorCallback+0x38>
    	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+1);
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	4943      	ldr	r1, [pc, #268]	; (80043f8 <HAL_UART_ErrorCallback+0x13c>)
 80042ec:	4841      	ldr	r0, [pc, #260]	; (80043f4 <HAL_UART_ErrorCallback+0x138>)
 80042ee:	f00e faed 	bl	80128cc <HAL_UART_Receive_DMA>
}
 80042f2:	e076      	b.n	80043e2 <HAL_UART_ErrorCallback+0x126>
    else if(UartHandle->Instance==huart_imu.Instance) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b40      	ldr	r3, [pc, #256]	; (80043fc <HAL_UART_ErrorCallback+0x140>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d105      	bne.n	800430c <HAL_UART_ErrorCallback+0x50>
		HAL_UART_Receive_DMA(&huart_imu, (uint8_t*)jy901_data, 11);
 8004300:	220b      	movs	r2, #11
 8004302:	493f      	ldr	r1, [pc, #252]	; (8004400 <HAL_UART_ErrorCallback+0x144>)
 8004304:	483d      	ldr	r0, [pc, #244]	; (80043fc <HAL_UART_ErrorCallback+0x140>)
 8004306:	f00e fae1 	bl	80128cc <HAL_UART_Receive_DMA>
}
 800430a:	e06a      	b.n	80043e2 <HAL_UART_ErrorCallback+0x126>
	}else if(UartHandle->Instance==UART7){
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3c      	ldr	r2, [pc, #240]	; (8004404 <HAL_UART_ErrorCallback+0x148>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d165      	bne.n	80043e2 <HAL_UART_ErrorCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, (uint8_t *) usb_buf, 100);
 8004316:	2264      	movs	r2, #100	; 0x64
 8004318:	493b      	ldr	r1, [pc, #236]	; (8004408 <HAL_UART_ErrorCallback+0x14c>)
 800431a:	483c      	ldr	r0, [pc, #240]	; (800440c <HAL_UART_ErrorCallback+0x150>)
 800431c:	f010 f9ba 	bl	8014694 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004320:	4b3b      	ldr	r3, [pc, #236]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a3b      	ldr	r2, [pc, #236]	; (8004414 <HAL_UART_ErrorCallback+0x158>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d04a      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 800432a:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a3a      	ldr	r2, [pc, #232]	; (8004418 <HAL_UART_ErrorCallback+0x15c>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d045      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004334:	4b36      	ldr	r3, [pc, #216]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a38      	ldr	r2, [pc, #224]	; (800441c <HAL_UART_ErrorCallback+0x160>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d040      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <HAL_UART_ErrorCallback+0x164>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d03b      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004348:	4b31      	ldr	r3, [pc, #196]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a35      	ldr	r2, [pc, #212]	; (8004424 <HAL_UART_ErrorCallback+0x168>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d036      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004352:	4b2f      	ldr	r3, [pc, #188]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_UART_ErrorCallback+0x16c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d031      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 800435c:	4b2c      	ldr	r3, [pc, #176]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a32      	ldr	r2, [pc, #200]	; (800442c <HAL_UART_ErrorCallback+0x170>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d02c      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004366:	4b2a      	ldr	r3, [pc, #168]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_UART_ErrorCallback+0x174>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d027      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004370:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2f      	ldr	r2, [pc, #188]	; (8004434 <HAL_UART_ErrorCallback+0x178>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d022      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 800437a:	4b25      	ldr	r3, [pc, #148]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_UART_ErrorCallback+0x17c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d01d      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004384:	4b22      	ldr	r3, [pc, #136]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2c      	ldr	r2, [pc, #176]	; (800443c <HAL_UART_ErrorCallback+0x180>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d018      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 800438e:	4b20      	ldr	r3, [pc, #128]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_UART_ErrorCallback+0x184>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d013      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 8004398:	4b1d      	ldr	r3, [pc, #116]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a29      	ldr	r2, [pc, #164]	; (8004444 <HAL_UART_ErrorCallback+0x188>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00e      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 80043a2:	4b1b      	ldr	r3, [pc, #108]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_UART_ErrorCallback+0x18c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 80043ac:	4b18      	ldr	r3, [pc, #96]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	; (800444c <HAL_UART_ErrorCallback+0x190>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_UART_ErrorCallback+0x104>
 80043b6:	4b16      	ldr	r3, [pc, #88]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a25      	ldr	r2, [pc, #148]	; (8004450 <HAL_UART_ErrorCallback+0x194>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d108      	bne.n	80043d2 <HAL_UART_ErrorCallback+0x116>
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b12      	ldr	r3, [pc, #72]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0208 	bic.w	r2, r2, #8
 80043ce:	601a      	str	r2, [r3, #0]
}
 80043d0:	e007      	b.n	80043e2 <HAL_UART_ErrorCallback+0x126>
		__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 80043d2:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b0d      	ldr	r3, [pc, #52]	; (8004410 <HAL_UART_ErrorCallback+0x154>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0204 	bic.w	r2, r2, #4
 80043e0:	601a      	str	r2, [r3, #0]
}
 80043e2:	bf00      	nop
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	240013a8 	.word	0x240013a8
 80043f0:	24004360 	.word	0x24004360
 80043f4:	240014d0 	.word	0x240014d0
 80043f8:	24004384 	.word	0x24004384
 80043fc:	240015f8 	.word	0x240015f8
 8004400:	240044ac 	.word	0x240044ac
 8004404:	40007800 	.word	0x40007800
 8004408:	24004418 	.word	0x24004418
 800440c:	24001564 	.word	0x24001564
 8004410:	2400186c 	.word	0x2400186c
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8

08004454 <HAL_TIM_IC_CaptureCallback>:

//pwm input capture callback
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

	if(input_mode == INPUT_MODE_SOFTWARE)return;
 800445c:	4b4e      	ldr	r3, [pc, #312]	; (8004598 <HAL_TIM_IC_CaptureCallback+0x144>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8095 	beq.w	8004590 <HAL_TIM_IC_CaptureCallback+0x13c>

	uint32_t temp_freq;
	if(htim->Instance==TIM5 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a4c      	ldr	r2, [pc, #304]	; (800459c <HAL_TIM_IC_CaptureCallback+0x148>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d131      	bne.n	80044d4 <HAL_TIM_IC_CaptureCallback+0x80>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	7f1b      	ldrb	r3, [r3, #28]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d12d      	bne.n	80044d4 <HAL_TIM_IC_CaptureCallback+0x80>
		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8004478:	2100      	movs	r1, #0
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f00d f972 	bl	8011764 <HAL_TIM_ReadCapturedValue>
 8004480:	61f8      	str	r0, [r7, #28]
		uint32_t temp_servo_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8004482:	2104      	movs	r1, #4
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f00d f96d 	bl	8011764 <HAL_TIM_ReadCapturedValue>
 800448a:	61b8      	str	r0, [r7, #24]
		int32_t diff = temp_servo_duty - servo_duty;
 800448c:	4b44      	ldr	r3, [pc, #272]	; (80045a0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	617b      	str	r3, [r7, #20]
		if(abs(diff) > 2){
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f7fd fd71 	bl	8001f7e <_ZSt3absl>
 800449c:	4603      	mov	r3, r0
 800449e:	2b02      	cmp	r3, #2
 80044a0:	bfcc      	ite	gt
 80044a2:	2301      	movgt	r3, #1
 80044a4:	2300      	movle	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <HAL_TIM_IC_CaptureCallback+0x66>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1,temp_servo_duty);
 80044ac:	4b3d      	ldr	r3, [pc, #244]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x150>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69ba      	ldr	r2, [r7, #24]
 80044b2:	635a      	str	r2, [r3, #52]	; 0x34
			servo_duty = temp_servo_duty;
 80044b4:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <HAL_TIM_IC_CaptureCallback+0x14c>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2200      	movs	r2, #0
 80044c0:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 80044c2:	2100      	movs	r1, #0
 80044c4:	4838      	ldr	r0, [pc, #224]	; (80045a8 <HAL_TIM_IC_CaptureCallback+0x154>)
 80044c6:	f00c fbf3 	bl	8010cb0 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 80044ca:	2104      	movs	r1, #4
 80044cc:	4836      	ldr	r0, [pc, #216]	; (80045a8 <HAL_TIM_IC_CaptureCallback+0x154>)
 80044ce:	f00c faeb 	bl	8010aa8 <HAL_TIM_IC_Start>

	}else if(htim->Instance==TIM15 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80044d2:	e035      	b.n	8004540 <HAL_TIM_IC_CaptureCallback+0xec>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a34      	ldr	r2, [pc, #208]	; (80045ac <HAL_TIM_IC_CaptureCallback+0x158>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d130      	bne.n	8004540 <HAL_TIM_IC_CaptureCallback+0xec>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	7f1b      	ldrb	r3, [r3, #28]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d12c      	bne.n	8004540 <HAL_TIM_IC_CaptureCallback+0xec>

		temp_freq = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80044e6:	2100      	movs	r1, #0
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f00d f93b 	bl	8011764 <HAL_TIM_ReadCapturedValue>
 80044ee:	61f8      	str	r0, [r7, #28]
		uint32_t temp_esc_duty = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80044f0:	2104      	movs	r1, #4
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f00d f936 	bl	8011764 <HAL_TIM_ReadCapturedValue>
 80044f8:	6138      	str	r0, [r7, #16]
		int32_t diff = temp_esc_duty - esc_duty;
 80044fa:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	60fb      	str	r3, [r7, #12]
		if(abs(diff) >2){
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f7fd fd3a 	bl	8001f7e <_ZSt3absl>
 800450a:	4603      	mov	r3, r0
 800450c:	2b02      	cmp	r3, #2
 800450e:	bfcc      	ite	gt
 8004510:	2301      	movgt	r3, #1
 8004512:	2300      	movle	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d006      	beq.n	8004528 <HAL_TIM_IC_CaptureCallback+0xd4>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2,temp_esc_duty);
 800451a:	4b22      	ldr	r3, [pc, #136]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x150>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	639a      	str	r2, [r3, #56]	; 0x38
			esc_duty = temp_esc_duty;
 8004522:	4a23      	ldr	r2, [pc, #140]	; (80045b0 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6013      	str	r3, [r2, #0]
		}

		__HAL_TIM_SetCounter(htim,0);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2200      	movs	r2, #0
 800452e:	625a      	str	r2, [r3, #36]	; 0x24

		HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004530:	2100      	movs	r1, #0
 8004532:	4820      	ldr	r0, [pc, #128]	; (80045b4 <HAL_TIM_IC_CaptureCallback+0x160>)
 8004534:	f00c fbbc 	bl	8010cb0 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004538:	2104      	movs	r1, #4
 800453a:	481e      	ldr	r0, [pc, #120]	; (80045b4 <HAL_TIM_IC_CaptureCallback+0x160>)
 800453c:	f00c fab4 	bl	8010aa8 <HAL_TIM_IC_Start>

	}
	int32_t diff = temp_freq-input_freq;
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	60bb      	str	r3, [r7, #8]
	if(input_freq<1000 || abs(diff)>50){
 800454a:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <HAL_TIM_IC_CaptureCallback+0x164>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004552:	d305      	bcc.n	8004560 <HAL_TIM_IC_CaptureCallback+0x10c>
 8004554:	68b8      	ldr	r0, [r7, #8]
 8004556:	f7fd fd12 	bl	8001f7e <_ZSt3absl>
 800455a:	4603      	mov	r3, r0
 800455c:	2b32      	cmp	r3, #50	; 0x32
 800455e:	dd01      	ble.n	8004564 <HAL_TIM_IC_CaptureCallback+0x110>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_TIM_IC_CaptureCallback+0x112>
 8004564:	2300      	movs	r3, #0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_TIM_IC_CaptureCallback+0x13e>
		input_freq=temp_freq;
 800456a:	4a13      	ldr	r2, [pc, #76]	; (80045b8 <HAL_TIM_IC_CaptureCallback+0x164>)
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim3,temp_freq);
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x150>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	69fa      	ldr	r2, [r7, #28]
 8004576:	62da      	str	r2, [r3, #44]	; 0x2c
 8004578:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <HAL_TIM_IC_CaptureCallback+0x150>)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	60d3      	str	r3, [r2, #12]
		esc_servo_arr = 1000000/input_freq-1;
 800457e:	4b0e      	ldr	r3, [pc, #56]	; (80045b8 <HAL_TIM_IC_CaptureCallback+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a0e      	ldr	r2, [pc, #56]	; (80045bc <HAL_TIM_IC_CaptureCallback+0x168>)
 8004584:	fbb2 f3f3 	udiv	r3, r2, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	4a0d      	ldr	r2, [pc, #52]	; (80045c0 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	e000      	b.n	8004592 <HAL_TIM_IC_CaptureCallback+0x13e>
	if(input_mode == INPUT_MODE_SOFTWARE)return;
 8004590:	bf00      	nop
	}


}
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	2400447c 	.word	0x2400447c
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	240044a0 	.word	0x240044a0
 80045a4:	240019f4 	.word	0x240019f4
 80045a8:	24001a40 	.word	0x24001a40
 80045ac:	40014000 	.word	0x40014000
 80045b0:	240044a4 	.word	0x240044a4
 80045b4:	24001ad8 	.word	0x24001ad8
 80045b8:	240044a8 	.word	0x240044a8
 80045bc:	000f4240 	.word	0x000f4240
 80045c0:	24004484 	.word	0x24004484
 80045c4:	00000000 	.word	0x00000000

080045c8 <HAL_TIM_PeriodElapsedCallback>:

//timer callback
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]

	//ros publish
	if(htim->Instance==TIM16){
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7a      	ldr	r2, [pc, #488]	; (80047c0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	f040 80d4 	bne.w	8004784 <HAL_TIM_PeriodElapsedCallback+0x1bc>
		memcpy(&sensor_msg.data[0],speed,wheel_speed_size*sizeof(float));
 80045dc:	4b79      	ldr	r3, [pc, #484]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80045de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e0:	2240      	movs	r2, #64	; 0x40
 80045e2:	4979      	ldr	r1, [pc, #484]	; (80047c8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80045e4:	4618      	mov	r0, r3
 80045e6:	f011 f91c 	bl	8015822 <memcpy>
		for(uint8_t i=0;i<force_size;++i){
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
 80045ee:	e01e      	b.n	800462e <HAL_TIM_PeriodElapsedCallback+0x66>
			sensor_msg.data[wheel_speed_size+i]=(float)force_raw[i]*3.3/0xFFFF;
 80045f0:	7bfb      	ldrb	r3, [r7, #15]
 80045f2:	4a76      	ldr	r2, [pc, #472]	; (80047cc <HAL_TIM_PeriodElapsedCallback+0x204>)
 80045f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045f8:	ee07 3a90 	vmov	s15, r3
 80045fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004600:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8004604:	ed9f 6b68 	vldr	d6, [pc, #416]	; 80047a8 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8004608:	ee27 6b06 	vmul.f64	d6, d7, d6
 800460c:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80047b0 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8004610:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004614:	4b6b      	ldr	r3, [pc, #428]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	3310      	adds	r3, #16
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004624:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i=0;i<force_size;++i){
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	3301      	adds	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	2b07      	cmp	r3, #7
 8004632:	d9dd      	bls.n	80045f0 <HAL_TIM_PeriodElapsedCallback+0x28>
		}
		sensor_msg.data[wheel_speed_size+force_size]=esc_sensor.throttle/100.0;
 8004634:	4b66      	ldr	r3, [pc, #408]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004642:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 80047b8 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8004646:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800464a:	4b5e      	ldr	r3, [pc, #376]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	3360      	adds	r3, #96	; 0x60
 8004650:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004654:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size+force_size + 1] = esc_sensor.voltage;
 8004658:	4b5a      	ldr	r3, [pc, #360]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800465a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465c:	3364      	adds	r3, #100	; 0x64
 800465e:	4a5c      	ldr	r2, [pc, #368]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004660:	6892      	ldr	r2, [r2, #8]
 8004662:	601a      	str	r2, [r3, #0]
		sensor_msg.data[wheel_speed_size+force_size + 2] = esc_sensor.current;
 8004664:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	3368      	adds	r3, #104	; 0x68
 800466a:	4a59      	ldr	r2, [pc, #356]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800466c:	68d2      	ldr	r2, [r2, #12]
 800466e:	601a      	str	r2, [r3, #0]
		sensor_msg.data[wheel_speed_size+force_size + 3] = (float)esc_sensor.temperature;
 8004670:	4b57      	ldr	r3, [pc, #348]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004672:	8a1a      	ldrh	r2, [r3, #16]
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	336c      	adds	r3, #108	; 0x6c
 800467a:	ee07 2a90 	vmov	s15, r2
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size+force_size + 4] = (float)esc_sensor.rpm;
 8004686:	4b52      	ldr	r3, [pc, #328]	; (80047d0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	4b4e      	ldr	r3, [pc, #312]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	3370      	adds	r3, #112	; 0x70
 8004690:	ee07 2a90 	vmov	s15, r2
 8004694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004698:	edc3 7a00 	vstr	s15, [r3]

		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 0] = jy901.getAccX();
 800469c:	484d      	ldr	r0, [pc, #308]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800469e:	f7fc f8eb 	bl	8000878 <_ZN6CJY9017getAccXEv>
 80046a2:	eeb0 7b40 	vmov.f64	d7, d0
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046aa:	3374      	adds	r3, #116	; 0x74
 80046ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046b0:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 1] = jy901.getAccY();
 80046b4:	4847      	ldr	r0, [pc, #284]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046b6:	f7fc f8fb 	bl	80008b0 <_ZN6CJY9017getAccYEv>
 80046ba:	eeb0 7b40 	vmov.f64	d7, d0
 80046be:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	3378      	adds	r3, #120	; 0x78
 80046c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046c8:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 2] = jy901.getAccZ();
 80046cc:	4841      	ldr	r0, [pc, #260]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046ce:	f7fc f90b 	bl	80008e8 <_ZN6CJY9017getAccZEv>
 80046d2:	eeb0 7b40 	vmov.f64	d7, d0
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046da:	337c      	adds	r3, #124	; 0x7c
 80046dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046e0:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 3] = jy901.getGyroX();
 80046e4:	483b      	ldr	r0, [pc, #236]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046e6:	f7fc f91b 	bl	8000920 <_ZN6CJY9018getGyroXEv>
 80046ea:	eeb0 7b40 	vmov.f64	d7, d0
 80046ee:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80046f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f2:	3380      	adds	r3, #128	; 0x80
 80046f4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80046f8:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 4] = jy901.getGyroY();
 80046fc:	4835      	ldr	r0, [pc, #212]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80046fe:	f7fc f92b 	bl	8000958 <_ZN6CJY9018getGyroYEv>
 8004702:	eeb0 7b40 	vmov.f64	d7, d0
 8004706:	4b2f      	ldr	r3, [pc, #188]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470a:	3384      	adds	r3, #132	; 0x84
 800470c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004710:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 5] = jy901.getGyroZ();
 8004714:	482f      	ldr	r0, [pc, #188]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004716:	f7fc f93b 	bl	8000990 <_ZN6CJY9018getGyroZEv>
 800471a:	eeb0 7b40 	vmov.f64	d7, d0
 800471e:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	3388      	adds	r3, #136	; 0x88
 8004724:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004728:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 6] = jy901.getRoll();
 800472c:	4829      	ldr	r0, [pc, #164]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800472e:	f7fc f94b 	bl	80009c8 <_ZN6CJY9017getRollEv>
 8004732:	eeb0 7b40 	vmov.f64	d7, d0
 8004736:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	338c      	adds	r3, #140	; 0x8c
 800473c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004740:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 7] = jy901.getPitch();
 8004744:	4823      	ldr	r0, [pc, #140]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8004746:	f7fc f95b 	bl	8000a00 <_ZN6CJY9018getPitchEv>
 800474a:	eeb0 7b40 	vmov.f64	d7, d0
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	3390      	adds	r3, #144	; 0x90
 8004754:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004758:	edc3 7a00 	vstr	s15, [r3]
		sensor_msg.data[wheel_speed_size + force_size + vesc_size + 8] = jy901.getYaw();
 800475c:	481d      	ldr	r0, [pc, #116]	; (80047d4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800475e:	f7fc f96b 	bl	8000a38 <_ZN6CJY9016getYawEv>
 8004762:	eeb0 7b40 	vmov.f64	d7, d0
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	3394      	adds	r3, #148	; 0x94
 800476c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8004770:	edc3 7a00 	vstr	s15, [r3]

		ros_pub.publish(&sensor_msg);
 8004774:	4913      	ldr	r1, [pc, #76]	; (80047c4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004776:	4818      	ldr	r0, [pc, #96]	; (80047d8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8004778:	f7fe fa77 	bl	8002c6a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		nh.spinOnce();
 800477c:	4817      	ldr	r0, [pc, #92]	; (80047dc <HAL_TIM_PeriodElapsedCallback+0x214>)
 800477e:	f000 fd0c 	bl	800519a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>
 8004782:	e00d      	b.n	80047a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
	}else if(htim->Instance==TIM6)//pid computation
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
	{
		if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d003      	beq.n	800479e <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	e000      	b.n	80047a0 <HAL_TIM_PeriodElapsedCallback+0x1d8>
 800479e:	bf00      	nop
		}*/


	}

}
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	66666666 	.word	0x66666666
 80047ac:	400a6666 	.word	0x400a6666
 80047b0:	00000000 	.word	0x00000000
 80047b4:	40efffe0 	.word	0x40efffe0
 80047b8:	00000000 	.word	0x00000000
 80047bc:	40590000 	.word	0x40590000
 80047c0:	40014400 	.word	0x40014400
 80047c4:	24004308 	.word	0x24004308
 80047c8:	240043a8 	.word	0x240043a8
 80047cc:	240043e8 	.word	0x240043e8
 80047d0:	2400434c 	.word	0x2400434c
 80047d4:	240044b8 	.word	0x240044b8
 80047d8:	24004338 	.word	0x24004338
 80047dc:	24001b74 	.word	0x24001b74
 80047e0:	40001000 	.word	0x40001000
 80047e4:	2400447c 	.word	0x2400447c
 80047e8:	24004408 	.word	0x24004408

080047ec <_Z14speed_callbackRKN8std_msgs7Float32E>:
		HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
	}
}

//ros speed subscriber callback
void speed_callback(const std_msgs::Float32& msg){
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 80047f4:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <_Z14speed_callbackRKN8std_msgs7Float32E+0x34>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d00b      	beq.n	8004814 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>
 80047fc:	4b09      	ldr	r3, [pc, #36]	; (8004824 <_Z14speed_callbackRKN8std_msgs7Float32E+0x38>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <_Z14speed_callbackRKN8std_msgs7Float32E+0x28>
	pid_its=0;
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <_Z14speed_callbackRKN8std_msgs7Float32E+0x3c>)
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]
	speed_set=msg.data;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <_Z14speed_callbackRKN8std_msgs7Float32E+0x40>)
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	e000      	b.n	8004816 <_Z14speed_callbackRKN8std_msgs7Float32E+0x2a>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_MANUAL)return;
 8004814:	bf00      	nop
}
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	2400447c 	.word	0x2400447c
 8004824:	24004408 	.word	0x24004408
 8004828:	24004409 	.word	0x24004409
 800482c:	2400440c 	.word	0x2400440c

08004830 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E>:

//ros duty cycle subscriber callback
void duty_cycle_callback(const std_msgs::Float32& msg){
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x78>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d02e      	beq.n	800489e <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x6e>
 8004840:	4b1a      	ldr	r3, [pc, #104]	; (80048ac <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x7c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d02a      	beq.n	800489e <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x6e>
	duty_cycle_output = msg.data;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	4a18      	ldr	r2, [pc, #96]	; (80048b0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x80>)
 800484e:	6013      	str	r3, [r2, #0]
	int32_t esc_count = duty_cycle_output * esc_servo_arr;
 8004850:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x84>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	ee07 3a90 	vmov	s15, r3
 8004858:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x80>)
 800485e:	edd3 7a00 	vldr	s15, [r3]
 8004862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004866:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800486a:	ee17 3a90 	vmov	r3, s15
 800486e:	60fb      	str	r3, [r7, #12]
	if(abs(esc_count - pre_esc_ccr)>5){
 8004870:	4b11      	ldr	r3, [pc, #68]	; (80048b8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x88>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	4618      	mov	r0, r3
 800487a:	f7fd fb80 	bl	8001f7e <_ZSt3absl>
 800487e:	4603      	mov	r3, r0
 8004880:	2b05      	cmp	r3, #5
 8004882:	bfcc      	ite	gt
 8004884:	2301      	movgt	r3, #1
 8004886:	2300      	movle	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d008      	beq.n	80048a0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x70>
		pre_esc_ccr = esc_count;
 800488e:	4a0a      	ldr	r2, [pc, #40]	; (80048b8 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x88>)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,esc_count);
 8004894:	4b09      	ldr	r3, [pc, #36]	; (80048bc <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x8c>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
 800489c:	e000      	b.n	80048a0 <_Z19duty_cycle_callbackRKN8std_msgs7Float32E+0x70>
	if(input_mode == INPUT_MODE_CONTROLLER || pid_mode == PID_MODE_AUTOMATIC)return;
 800489e:	bf00      	nop
	}
}
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	2400447c 	.word	0x2400447c
 80048ac:	24004408 	.word	0x24004408
 80048b0:	24004410 	.word	0x24004410
 80048b4:	24004484 	.word	0x24004484
 80048b8:	2400448c 	.word	0x2400448c
 80048bc:	240019f4 	.word	0x240019f4

080048c0 <_Z17steering_callbackRKN8std_msgs7Float32E>:

//ros steering subscriber callback
void steering_callback(const std_msgs::Float32& msg){
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 80048c8:	4b19      	ldr	r3, [pc, #100]	; (8004930 <_Z17steering_callbackRKN8std_msgs7Float32E+0x70>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d02b      	beq.n	8004928 <_Z17steering_callbackRKN8std_msgs7Float32E+0x68>
	int32_t steering_pulse = parameters.steering_ratio*msg.data + parameters.steering_offset;
 80048d0:	4b18      	ldr	r3, [pc, #96]	; (8004934 <_Z17steering_callbackRKN8std_msgs7Float32E+0x74>)
 80048d2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80048dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048e0:	4b14      	ldr	r3, [pc, #80]	; (8004934 <_Z17steering_callbackRKN8std_msgs7Float32E+0x74>)
 80048e2:	8c1b      	ldrh	r3, [r3, #32]
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048f4:	ee17 3a90 	vmov	r3, s15
 80048f8:	60fb      	str	r3, [r7, #12]
	if(abs(steering_pulse - pre_servo_ccr)>5){
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <_Z17steering_callbackRKN8std_msgs7Float32E+0x78>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	4618      	mov	r0, r3
 8004904:	f7fd fb3b 	bl	8001f7e <_ZSt3absl>
 8004908:	4603      	mov	r3, r0
 800490a:	2b05      	cmp	r3, #5
 800490c:	bfcc      	ite	gt
 800490e:	2301      	movgt	r3, #1
 8004910:	2300      	movle	r3, #0
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <_Z17steering_callbackRKN8std_msgs7Float32E+0x6a>
		pre_servo_ccr = steering_pulse;
 8004918:	4a07      	ldr	r2, [pc, #28]	; (8004938 <_Z17steering_callbackRKN8std_msgs7Float32E+0x78>)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,steering_pulse);
 800491e:	4b07      	ldr	r3, [pc, #28]	; (800493c <_Z17steering_callbackRKN8std_msgs7Float32E+0x7c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	635a      	str	r2, [r3, #52]	; 0x34
 8004926:	e000      	b.n	800492a <_Z17steering_callbackRKN8std_msgs7Float32E+0x6a>
	if(input_mode == INPUT_MODE_CONTROLLER)return;
 8004928:	bf00      	nop
	}
}
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	2400447c 	.word	0x2400447c
 8004934:	24000004 	.word	0x24000004
 8004938:	24004488 	.word	0x24004488
 800493c:	240019f4 	.word	0x240019f4

08004940 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE>:

//ros brake subscriber callback
void brake_callback(const std_msgs::Float32MultiArray& msg){
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	uint32_t c = msg.data[0]*brake_arr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	ed93 7a00 	vldr	s14, [r3]
 8004950:	4b3c      	ldr	r3, [pc, #240]	; (8004a44 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004964:	ee17 3a90 	vmov	r3, s15
 8004968:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[0]){
 800496a:	4b37      	ldr	r3, [pc, #220]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68fa      	ldr	r2, [r7, #12]
 8004970:	429a      	cmp	r2, r3
 8004972:	d006      	beq.n	8004982 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x42>
		pre_brake[0]=c;
 8004974:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,c);
 800497a:	4b34      	ldr	r3, [pc, #208]	; (8004a4c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	635a      	str	r2, [r3, #52]	; 0x34
	}
	c = msg.data[1]*brake_arr;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004986:	3304      	adds	r3, #4
 8004988:	ed93 7a00 	vldr	s14, [r3]
 800498c:	4b2d      	ldr	r3, [pc, #180]	; (8004a44 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a0:	ee17 3a90 	vmov	r3, s15
 80049a4:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[1]){
 80049a6:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d006      	beq.n	80049be <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x7e>
		pre_brake[1]=c;
 80049b0:	4a25      	ldr	r2, [pc, #148]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6053      	str	r3, [r2, #4]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,c);
 80049b6:	4b25      	ldr	r3, [pc, #148]	; (8004a4c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	c = msg.data[2]*brake_arr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	3308      	adds	r3, #8
 80049c4:	ed93 7a00 	vldr	s14, [r3]
 80049c8:	4b1e      	ldr	r3, [pc, #120]	; (8004a44 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049dc:	ee17 3a90 	vmov	r3, s15
 80049e0:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[2]){
 80049e2:	4b19      	ldr	r3, [pc, #100]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d006      	beq.n	80049fa <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xba>
		pre_brake[2]=c;
 80049ec:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6093      	str	r3, [r2, #8]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,c);
 80049f2:	4b16      	ldr	r3, [pc, #88]	; (8004a4c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	c = msg.data[3]*brake_arr;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	330c      	adds	r3, #12
 8004a00:	ed93 7a00 	vldr	s14, [r3]
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x104>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a18:	ee17 3a90 	vmov	r3, s15
 8004a1c:	60fb      	str	r3, [r7, #12]
	if(c!=pre_brake[3]){
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d006      	beq.n	8004a36 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0xf6>
		pre_brake[3]=c;
 8004a28:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x108>)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,c);
 8004a2e:	4b07      	ldr	r3, [pc, #28]	; (8004a4c <_Z14brake_callbackRKN8std_msgs17Float32MultiArrayE+0x10c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
	}
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	24004480 	.word	0x24004480
 8004a48:	24004490 	.word	0x24004490
 8004a4c:	240019a8 	.word	0x240019a8

08004a50 <_Z19input_mode_callbackRKN8std_msgs4BoolE>:

void input_mode_callback(const std_msgs::Bool& msg){
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, (GPIO_PinState)msg.data);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	791b      	ldrb	r3, [r3, #4]
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	2120      	movs	r1, #32
 8004a60:	4803      	ldr	r0, [pc, #12]	; (8004a70 <_Z19input_mode_callbackRKN8std_msgs4BoolE+0x20>)
 8004a62:	f007 fb71 	bl	800c148 <HAL_GPIO_WritePin>

}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	58020400 	.word	0x58020400

08004a74 <_Z17pid_mode_callbackRKN8std_msgs4BoolE>:

void pid_mode_callback(const std_msgs::Bool& msg){
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
	if(msg.data != (bool)pid_mode){
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	791b      	ldrb	r3, [r3, #4]
 8004a80:	461a      	mov	r2, r3
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x40>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf14      	ite	ne
 8004a8a:	2301      	movne	r3, #1
 8004a8c:	2300      	moveq	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d00b      	beq.n	8004aac <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x38>
		pid_mode = (PIDMode_TypeDef)msg.data;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x40>)
 8004a9c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)msg.data);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	791b      	ldrb	r3, [r3, #4]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	2120      	movs	r1, #32
 8004aa6:	4804      	ldr	r0, [pc, #16]	; (8004ab8 <_Z17pid_mode_callbackRKN8std_msgs4BoolE+0x44>)
 8004aa8:	f007 fb4e 	bl	800c148 <HAL_GPIO_WritePin>
	}
}
 8004aac:	bf00      	nop
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	24004408 	.word	0x24004408
 8004ab8:	58020c00 	.word	0x58020c00

08004abc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_9) {
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004acc:	d116      	bne.n	8004afc <HAL_GPIO_EXTI_Callback+0x40>
	  auto state = HAL_GPIO_ReadPin(PID_MODE_INPUT_GPIO_Port, PID_MODE_INPUT_Pin);
 8004ace:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ad2:	480c      	ldr	r0, [pc, #48]	; (8004b04 <HAL_GPIO_EXTI_Callback+0x48>)
 8004ad4:	f007 fb20 	bl	800c118 <HAL_GPIO_ReadPin>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	73fb      	strb	r3, [r7, #15]
	  if(state==GPIO_PIN_SET){
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d103      	bne.n	8004aea <HAL_GPIO_EXTI_Callback+0x2e>
		  pid_mode = PID_MODE_AUTOMATIC;
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e002      	b.n	8004af0 <HAL_GPIO_EXTI_Callback+0x34>
	  }else{
		  pid_mode = PID_MODE_MANUAL;
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_GPIO_EXTI_Callback+0x4c>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, state);
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	461a      	mov	r2, r3
 8004af4:	2120      	movs	r1, #32
 8004af6:	4805      	ldr	r0, [pc, #20]	; (8004b0c <HAL_GPIO_EXTI_Callback+0x50>)
 8004af8:	f007 fb26 	bl	800c148 <HAL_GPIO_WritePin>
  }
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	58021000 	.word	0x58021000
 8004b08:	24004408 	.word	0x24004408
 8004b0c:	58020c00 	.word	0x58020c00

08004b10 <_Z9adc_setupv>:

void adc_setup(){
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*)force_raw,8);
 8004b14:	2208      	movs	r2, #8
 8004b16:	4903      	ldr	r1, [pc, #12]	; (8004b24 <_Z9adc_setupv+0x14>)
 8004b18:	4803      	ldr	r0, [pc, #12]	; (8004b28 <_Z9adc_setupv+0x18>)
 8004b1a:	f003 f82b 	bl	8007b74 <HAL_ADC_Start_DMA>
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	240043e8 	.word	0x240043e8
 8004b28:	240012bc 	.word	0x240012bc

08004b2c <_Z10uart_setupv>:

void uart_setup(){
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart_esc, esc_receive, ESC_DATA_SIZE);
 8004b30:	2220      	movs	r2, #32
 8004b32:	493b      	ldr	r1, [pc, #236]	; (8004c20 <_Z10uart_setupv+0xf4>)
 8004b34:	483b      	ldr	r0, [pc, #236]	; (8004c24 <_Z10uart_setupv+0xf8>)
 8004b36:	f00d fec9 	bl	80128cc <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart_f103, (uint8_t*)speed_receive, 2*SPEED_PIN_COUNT+4);
 8004b3a:	2224      	movs	r2, #36	; 0x24
 8004b3c:	493a      	ldr	r1, [pc, #232]	; (8004c28 <_Z10uart_setupv+0xfc>)
 8004b3e:	483b      	ldr	r0, [pc, #236]	; (8004c2c <_Z10uart_setupv+0x100>)
 8004b40:	f00d fec4 	bl	80128cc <HAL_UART_Receive_DMA>
	HAL_UART_Receive_DMA(&huart8, jy901_data, 11);
 8004b44:	220b      	movs	r2, #11
 8004b46:	493a      	ldr	r1, [pc, #232]	; (8004c30 <_Z10uart_setupv+0x104>)
 8004b48:	483a      	ldr	r0, [pc, #232]	; (8004c34 <_Z10uart_setupv+0x108>)
 8004b4a:	f00d febf 	bl	80128cc <HAL_UART_Receive_DMA>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart7, usb_buf, 100);
 8004b4e:	2264      	movs	r2, #100	; 0x64
 8004b50:	4939      	ldr	r1, [pc, #228]	; (8004c38 <_Z10uart_setupv+0x10c>)
 8004b52:	483a      	ldr	r0, [pc, #232]	; (8004c3c <_Z10uart_setupv+0x110>)
 8004b54:	f00f fd9e 	bl	8014694 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_uart7_rx, DMA_IT_HT);
 8004b58:	4b39      	ldr	r3, [pc, #228]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a39      	ldr	r2, [pc, #228]	; (8004c44 <_Z10uart_setupv+0x118>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d04a      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b62:	4b37      	ldr	r3, [pc, #220]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a38      	ldr	r2, [pc, #224]	; (8004c48 <_Z10uart_setupv+0x11c>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d045      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b6c:	4b34      	ldr	r3, [pc, #208]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a36      	ldr	r2, [pc, #216]	; (8004c4c <_Z10uart_setupv+0x120>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d040      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b76:	4b32      	ldr	r3, [pc, #200]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a35      	ldr	r2, [pc, #212]	; (8004c50 <_Z10uart_setupv+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d03b      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b80:	4b2f      	ldr	r3, [pc, #188]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a33      	ldr	r2, [pc, #204]	; (8004c54 <_Z10uart_setupv+0x128>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d036      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b8a:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a32      	ldr	r2, [pc, #200]	; (8004c58 <_Z10uart_setupv+0x12c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d031      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b94:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a30      	ldr	r2, [pc, #192]	; (8004c5c <_Z10uart_setupv+0x130>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d02c      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004b9e:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a2f      	ldr	r2, [pc, #188]	; (8004c60 <_Z10uart_setupv+0x134>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d027      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004ba8:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a2d      	ldr	r2, [pc, #180]	; (8004c64 <_Z10uart_setupv+0x138>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d022      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a2c      	ldr	r2, [pc, #176]	; (8004c68 <_Z10uart_setupv+0x13c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d01d      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004bbc:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a2a      	ldr	r2, [pc, #168]	; (8004c6c <_Z10uart_setupv+0x140>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d018      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004bc6:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a29      	ldr	r2, [pc, #164]	; (8004c70 <_Z10uart_setupv+0x144>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d013      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004bd0:	4b1b      	ldr	r3, [pc, #108]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <_Z10uart_setupv+0x148>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a26      	ldr	r2, [pc, #152]	; (8004c78 <_Z10uart_setupv+0x14c>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004be4:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a24      	ldr	r2, [pc, #144]	; (8004c7c <_Z10uart_setupv+0x150>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <_Z10uart_setupv+0xcc>
 8004bee:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <_Z10uart_setupv+0x154>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d108      	bne.n	8004c0a <_Z10uart_setupv+0xde>
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0208 	bic.w	r2, r2, #8
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e008      	b.n	8004c1c <_Z10uart_setupv+0xf0>
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <_Z10uart_setupv+0x114>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0204 	bic.w	r2, r2, #4
 8004c18:	601a      	str	r2, [r3, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	bf00      	nop
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	24004360 	.word	0x24004360
 8004c24:	240013a8 	.word	0x240013a8
 8004c28:	24004384 	.word	0x24004384
 8004c2c:	240014d0 	.word	0x240014d0
 8004c30:	240044ac 	.word	0x240044ac
 8004c34:	240015f8 	.word	0x240015f8
 8004c38:	24004418 	.word	0x24004418
 8004c3c:	24001564 	.word	0x24001564
 8004c40:	2400186c 	.word	0x2400186c
 8004c44:	40020010 	.word	0x40020010
 8004c48:	40020028 	.word	0x40020028
 8004c4c:	40020040 	.word	0x40020040
 8004c50:	40020058 	.word	0x40020058
 8004c54:	40020070 	.word	0x40020070
 8004c58:	40020088 	.word	0x40020088
 8004c5c:	400200a0 	.word	0x400200a0
 8004c60:	400200b8 	.word	0x400200b8
 8004c64:	40020410 	.word	0x40020410
 8004c68:	40020428 	.word	0x40020428
 8004c6c:	40020440 	.word	0x40020440
 8004c70:	40020458 	.word	0x40020458
 8004c74:	40020470 	.word	0x40020470
 8004c78:	40020488 	.word	0x40020488
 8004c7c:	400204a0 	.word	0x400204a0
 8004c80:	400204b8 	.word	0x400204b8

08004c84 <_Z11timer_setupv>:

void timer_setup(){
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0

	//set tim16 ARR value based on topic publish frequency and start tim16, 10000 = 100M/(9999+1), where 9999 is the prescale of timer16
	__HAL_TIM_SET_PRESCALER(&htim16,9999);
 8004c88:	4b65      	ldr	r3, [pc, #404]	; (8004e20 <_Z11timer_setupv+0x19c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim16,10000/parameters.publish_frequency-1);
 8004c92:	4b64      	ldr	r3, [pc, #400]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004c94:	7d1b      	ldrb	r3, [r3, #20]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f242 7310 	movw	r3, #10000	; 0x2710
 8004c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	4b5f      	ldr	r3, [pc, #380]	; (8004e20 <_Z11timer_setupv+0x19c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ca8:	4b5e      	ldr	r3, [pc, #376]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004caa:	7d1b      	ldrb	r3, [r3, #20]
 8004cac:	461a      	mov	r2, r3
 8004cae:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	461a      	mov	r2, r3
 8004cba:	4b59      	ldr	r3, [pc, #356]	; (8004e20 <_Z11timer_setupv+0x19c>)
 8004cbc:	60da      	str	r2, [r3, #12]

	//set tim6 ARR value based on PID calculation frequency and start tim7
	__HAL_TIM_SET_PRESCALER(&htim6,9999);
 8004cbe:	4b5a      	ldr	r3, [pc, #360]	; (8004e28 <_Z11timer_setupv+0x1a4>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
	__HAL_TIM_SET_AUTORELOAD(&htim6,uint32_t(10000/parameters.pid_frequency-1));
 8004cc8:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004cca:	7d5b      	ldrb	r3, [r3, #21]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f242 7310 	movw	r3, #10000	; 0x2710
 8004cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cd6:	1e5a      	subs	r2, r3, #1
 8004cd8:	4b53      	ldr	r3, [pc, #332]	; (8004e28 <_Z11timer_setupv+0x1a4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cde:	4b51      	ldr	r3, [pc, #324]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004ce0:	7d5b      	ldrb	r3, [r3, #21]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cec:	3b01      	subs	r3, #1
 8004cee:	461a      	mov	r2, r3
 8004cf0:	4b4d      	ldr	r3, [pc, #308]	; (8004e28 <_Z11timer_setupv+0x1a4>)
 8004cf2:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 8004cf4:	484c      	ldr	r0, [pc, #304]	; (8004e28 <_Z11timer_setupv+0x1a4>)
 8004cf6:	f00b fc8d 	bl	8010614 <HAL_TIM_Base_Start_IT>

	//start esc and steering servo pwm output
	input_freq = parameters.steering_esc_pwm_frequency;
 8004cfa:	4b4a      	ldr	r3, [pc, #296]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004cfc:	edd3 7a07 	vldr	s15, [r3, #28]
 8004d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d04:	ee17 2a90 	vmov	r2, s15
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <_Z11timer_setupv+0x1a8>)
 8004d0a:	601a      	str	r2, [r3, #0]
	esc_servo_arr = 1000000/parameters.steering_esc_pwm_frequency-1;
 8004d0c:	4b45      	ldr	r3, [pc, #276]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004d0e:	ed93 7a07 	vldr	s14, [r3, #28]
 8004d12:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004e30 <_Z11timer_setupv+0x1ac>
 8004d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d26:	ee17 2a90 	vmov	r2, s15
 8004d2a:	4b42      	ldr	r3, [pc, #264]	; (8004e34 <_Z11timer_setupv+0x1b0>)
 8004d2c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim3,esc_servo_arr);
 8004d2e:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <_Z11timer_setupv+0x1b4>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <_Z11timer_setupv+0x1b0>)
 8004d34:	6812      	ldr	r2, [r2, #0]
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d38:	4b3e      	ldr	r3, [pc, #248]	; (8004e34 <_Z11timer_setupv+0x1b0>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a3e      	ldr	r2, [pc, #248]	; (8004e38 <_Z11timer_setupv+0x1b4>)
 8004d3e:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,parameters.steering_offset);
 8004d40:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004d42:	8c1a      	ldrh	r2, [r3, #32]
 8004d44:	4b3c      	ldr	r3, [pc, #240]	; (8004e38 <_Z11timer_setupv+0x1b4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34
	pre_servo_ccr = parameters.steering_offset;
 8004d4a:	4b36      	ldr	r3, [pc, #216]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004d4c:	8c1b      	ldrh	r3, [r3, #32]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <_Z11timer_setupv+0x1b8>)
 8004d52:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,parameters.esc_offset);
 8004d54:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004d56:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004d58:	4b37      	ldr	r3, [pc, #220]	; (8004e38 <_Z11timer_setupv+0x1b4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
	pre_esc_ccr = parameters.esc_offset;
 8004d5e:	4b31      	ldr	r3, [pc, #196]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004d60:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <_Z11timer_setupv+0x1bc>)
 8004d66:	601a      	str	r2, [r3, #0]

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4833      	ldr	r0, [pc, #204]	; (8004e38 <_Z11timer_setupv+0x1b4>)
 8004d6c:	f00b fd2c 	bl	80107c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004d70:	2104      	movs	r1, #4
 8004d72:	4831      	ldr	r0, [pc, #196]	; (8004e38 <_Z11timer_setupv+0x1b4>)
 8004d74:	f00b fd28 	bl	80107c8 <HAL_TIM_PWM_Start>

	//set brake pwm, prescaler 99, timer frequency is 100MHz
	__HAL_TIM_SET_PRESCALER(&htim2,99);
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2263      	movs	r2, #99	; 0x63
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
	//set tim2 ARR value based on brake frequency and start tim6, 1000000 = 100M/(99+1)
	brake_arr = uint32_t(1000000/parameters.brake_pwm_frequency-1);
 8004d80:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <_Z11timer_setupv+0x1a0>)
 8004d82:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8004d86:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8004e30 <_Z11timer_setupv+0x1ac>
 8004d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d9a:	ee17 2a90 	vmov	r2, s15
 8004d9e:	4b2a      	ldr	r3, [pc, #168]	; (8004e48 <_Z11timer_setupv+0x1c4>)
 8004da0:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SET_AUTORELOAD(&htim2,brake_arr);
 8004da2:	4b28      	ldr	r3, [pc, #160]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <_Z11timer_setupv+0x1c4>)
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dac:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <_Z11timer_setupv+0x1c4>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004db2:	60d3      	str	r3, [r2, #12]
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004db4:	2100      	movs	r1, #0
 8004db6:	4823      	ldr	r0, [pc, #140]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004db8:	f00b fd06 	bl	80107c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	4821      	ldr	r0, [pc, #132]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004dc0:	f00b fd02 	bl	80107c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004dc4:	2108      	movs	r1, #8
 8004dc6:	481f      	ldr	r0, [pc, #124]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004dc8:	f00b fcfe 	bl	80107c8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004dcc:	210c      	movs	r1, #12
 8004dce:	481d      	ldr	r0, [pc, #116]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004dd0:	f00b fcfa 	bl	80107c8 <HAL_TIM_PWM_Start>
	//initial value zeros
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1,0);
 8004dd4:	4b1b      	ldr	r3, [pc, #108]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2,0);
 8004ddc:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3,0);
 8004de4:	4b17      	ldr	r3, [pc, #92]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2200      	movs	r2, #0
 8004dea:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4,0);
 8004dec:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <_Z11timer_setupv+0x1c0>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2200      	movs	r2, #0
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40

	//pwm input capture for servo and esc
	HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8004df4:	2100      	movs	r1, #0
 8004df6:	4815      	ldr	r0, [pc, #84]	; (8004e4c <_Z11timer_setupv+0x1c8>)
 8004df8:	f00b ff5a 	bl	8010cb0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4813      	ldr	r0, [pc, #76]	; (8004e4c <_Z11timer_setupv+0x1c8>)
 8004e00:	f00b fe52 	bl	8010aa8 <HAL_TIM_IC_Start>
	HAL_TIM_IC_Start_IT(&htim15, TIM_CHANNEL_1);
 8004e04:	2100      	movs	r1, #0
 8004e06:	4812      	ldr	r0, [pc, #72]	; (8004e50 <_Z11timer_setupv+0x1cc>)
 8004e08:	f00b ff52 	bl	8010cb0 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim15, TIM_CHANNEL_2);
 8004e0c:	2104      	movs	r1, #4
 8004e0e:	4810      	ldr	r0, [pc, #64]	; (8004e50 <_Z11timer_setupv+0x1cc>)
 8004e10:	f00b fe4a 	bl	8010aa8 <HAL_TIM_IC_Start>

	//start ros publish
	//this timer should start as the last one.
	HAL_TIM_Base_Start_IT(&htim16);
 8004e14:	4802      	ldr	r0, [pc, #8]	; (8004e20 <_Z11timer_setupv+0x19c>)
 8004e16:	f00b fbfd 	bl	8010614 <HAL_TIM_Base_Start_IT>


}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	24001b24 	.word	0x24001b24
 8004e24:	24000004 	.word	0x24000004
 8004e28:	24001a8c 	.word	0x24001a8c
 8004e2c:	240044a8 	.word	0x240044a8
 8004e30:	49742400 	.word	0x49742400
 8004e34:	24004484 	.word	0x24004484
 8004e38:	240019f4 	.word	0x240019f4
 8004e3c:	24004488 	.word	0x24004488
 8004e40:	2400448c 	.word	0x2400448c
 8004e44:	240019a8 	.word	0x240019a8
 8004e48:	24004480 	.word	0x24004480
 8004e4c:	24001a40 	.word	0x24001a40
 8004e50:	24001ad8 	.word	0x24001ad8

08004e54 <_Z9ros_setupv>:
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );

void ros_setup(){
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0

	//setup the sensor message, the first 16 data are speed, next 8 data are force, next
	sensor_msg.data_length = wheel_speed_size + force_size + vesc_size + imu_size;
 8004e58:	4b1a      	ldr	r3, [pc, #104]	; (8004ec4 <_Z9ros_setupv+0x70>)
 8004e5a:	2226      	movs	r2, #38	; 0x26
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_msg.data = new std_msgs::Float32MultiArray::_data_type[sensor_msg.data_length];
 8004e5e:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <_Z9ros_setupv+0x70>)
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d201      	bcs.n	8004e6e <_Z9ros_setupv+0x1a>
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	e001      	b.n	8004e72 <_Z9ros_setupv+0x1e>
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e72:	4618      	mov	r0, r3
 8004e74:	f00f fcb0 	bl	80147d8 <_Znaj>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <_Z9ros_setupv+0x70>)
 8004e7e:	62da      	str	r2, [r3, #44]	; 0x2c

	nh.initNode();
 8004e80:	4811      	ldr	r0, [pc, #68]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004e82:	f000 fc77 	bl	8005774 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>

	nh.subscribe(speed_sub);
 8004e86:	4911      	ldr	r1, [pc, #68]	; (8004ecc <_Z9ros_setupv+0x78>)
 8004e88:	480f      	ldr	r0, [pc, #60]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004e8a:	f000 fc9c 	bl	80057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(input_mode_sub);
 8004e8e:	4910      	ldr	r1, [pc, #64]	; (8004ed0 <_Z9ros_setupv+0x7c>)
 8004e90:	480d      	ldr	r0, [pc, #52]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004e92:	f000 fc98 	bl	80057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(brake_sub);
 8004e96:	490f      	ldr	r1, [pc, #60]	; (8004ed4 <_Z9ros_setupv+0x80>)
 8004e98:	480b      	ldr	r0, [pc, #44]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004e9a:	f000 fc94 	bl	80057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(steering_sub);
 8004e9e:	490e      	ldr	r1, [pc, #56]	; (8004ed8 <_Z9ros_setupv+0x84>)
 8004ea0:	4809      	ldr	r0, [pc, #36]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004ea2:	f000 fc90 	bl	80057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(duty_cycle_sub);
 8004ea6:	490d      	ldr	r1, [pc, #52]	; (8004edc <_Z9ros_setupv+0x88>)
 8004ea8:	4807      	ldr	r0, [pc, #28]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004eaa:	f000 fc8c 	bl	80057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(pid_mode_sub);
 8004eae:	490c      	ldr	r1, [pc, #48]	; (8004ee0 <_Z9ros_setupv+0x8c>)
 8004eb0:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004eb2:	f000 fc88 	bl	80057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>

	nh.advertise(ros_pub);
 8004eb6:	490b      	ldr	r1, [pc, #44]	; (8004ee4 <_Z9ros_setupv+0x90>)
 8004eb8:	4803      	ldr	r0, [pc, #12]	; (8004ec8 <_Z9ros_setupv+0x74>)
 8004eba:	f000 fcb1 	bl	8005820 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	24004308 	.word	0x24004308
 8004ec8:	24001b74 	.word	0x24001b74
 8004ecc:	24004570 	.word	0x24004570
 8004ed0:	24004608 	.word	0x24004608
 8004ed4:	240045c4 	.word	0x240045c4
 8004ed8:	240045a8 	.word	0x240045a8
 8004edc:	2400458c 	.word	0x2400458c
 8004ee0:	24004624 	.word	0x24004624
 8004ee4:	24004338 	.word	0x24004338

08004ee8 <_Z15read_parametersv>:
	//blue and yellow led, default off
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
}

void read_parameters(){
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
	QSPI_W25Q64JV_Init();
 8004eee:	f7fb fea7 	bl	8000c40 <QSPI_W25Q64JV_Init>
	QSPI_W25Q64JV_Reset();
 8004ef2:	f7fb fead 	bl	8000c50 <QSPI_W25Q64JV_Reset>

	uint8_t id[2];
	if (QSPI_OK != QSPI_W25Q64JV_DeviceID(id)) {
 8004ef6:	1d3b      	adds	r3, r7, #4
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc f8a5 	bl	8001048 <QSPI_W25Q64JV_DeviceID>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <_Z15read_parametersv+0x2c>
	    printf("Initializing ROM\n");
 8004f0e:	4820      	ldr	r0, [pc, #128]	; (8004f90 <_Z15read_parametersv+0xa8>)
 8004f10:	f010 fad4 	bl	80154bc <puts>
	}
	printf("Connect to ROM, ROM ID: [0x%02x,0x%02x]\n",id[0],id[1]);
 8004f14:	793b      	ldrb	r3, [r7, #4]
 8004f16:	4619      	mov	r1, r3
 8004f18:	797b      	ldrb	r3, [r7, #5]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	481d      	ldr	r0, [pc, #116]	; (8004f94 <_Z15read_parametersv+0xac>)
 8004f1e:	f010 fa67 	bl	80153f0 <iprintf>

	char header[4];
	QSPI_W25Q64JV_Read((uint8_t*)header, 0x00, 4);
 8004f22:	463b      	mov	r3, r7
 8004f24:	2204      	movs	r2, #4
 8004f26:	2100      	movs	r1, #0
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f7fb ff0f 	bl	8000d4c <QSPI_W25Q64JV_Read>
	if(header[0]!='a' || header[1]!='c' || header[2]!='s' || header[3]!='r'){
 8004f2e:	783b      	ldrb	r3, [r7, #0]
 8004f30:	2b61      	cmp	r3, #97	; 0x61
 8004f32:	d108      	bne.n	8004f46 <_Z15read_parametersv+0x5e>
 8004f34:	787b      	ldrb	r3, [r7, #1]
 8004f36:	2b63      	cmp	r3, #99	; 0x63
 8004f38:	d105      	bne.n	8004f46 <_Z15read_parametersv+0x5e>
 8004f3a:	78bb      	ldrb	r3, [r7, #2]
 8004f3c:	2b73      	cmp	r3, #115	; 0x73
 8004f3e:	d102      	bne.n	8004f46 <_Z15read_parametersv+0x5e>
 8004f40:	78fb      	ldrb	r3, [r7, #3]
 8004f42:	2b72      	cmp	r3, #114	; 0x72
 8004f44:	d003      	beq.n	8004f4e <_Z15read_parametersv+0x66>
		printf("Reading parameters fails, use default parameters\n");
 8004f46:	4814      	ldr	r0, [pc, #80]	; (8004f98 <_Z15read_parametersv+0xb0>)
 8004f48:	f010 fab8 	bl	80154bc <puts>
		return;
 8004f4c:	e01c      	b.n	8004f88 <_Z15read_parametersv+0xa0>
	}

	QSPI_W25Q64JV_Read((uint8_t*)(&parameters), 0x00, sizeof(ParameterTypeDef));
 8004f4e:	2240      	movs	r2, #64	; 0x40
 8004f50:	2100      	movs	r1, #0
 8004f52:	4812      	ldr	r0, [pc, #72]	; (8004f9c <_Z15read_parametersv+0xb4>)
 8004f54:	f7fb fefa 	bl	8000d4c <QSPI_W25Q64JV_Read>
	if(parameters.tailer[0]!='b' || parameters.tailer[1]!='4' || parameters.tailer[2]!='0' || parameters.tailer[3]!='1'){
 8004f58:	4b10      	ldr	r3, [pc, #64]	; (8004f9c <_Z15read_parametersv+0xb4>)
 8004f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5e:	2b62      	cmp	r3, #98	; 0x62
 8004f60:	d10e      	bne.n	8004f80 <_Z15read_parametersv+0x98>
 8004f62:	4b0e      	ldr	r3, [pc, #56]	; (8004f9c <_Z15read_parametersv+0xb4>)
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f68:	2b34      	cmp	r3, #52	; 0x34
 8004f6a:	d109      	bne.n	8004f80 <_Z15read_parametersv+0x98>
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <_Z15read_parametersv+0xb4>)
 8004f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f72:	2b30      	cmp	r3, #48	; 0x30
 8004f74:	d104      	bne.n	8004f80 <_Z15read_parametersv+0x98>
 8004f76:	4b09      	ldr	r3, [pc, #36]	; (8004f9c <_Z15read_parametersv+0xb4>)
 8004f78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f7c:	2b31      	cmp	r3, #49	; 0x31
 8004f7e:	d003      	beq.n	8004f88 <_Z15read_parametersv+0xa0>
		printf("Reading parameters fails, use default parameters\n");
 8004f80:	4805      	ldr	r0, [pc, #20]	; (8004f98 <_Z15read_parametersv+0xb0>)
 8004f82:	f010 fa9b 	bl	80154bc <puts>
		return;
 8004f86:	bf00      	nop
	}
}
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	08017404 	.word	0x08017404
 8004f94:	08017418 	.word	0x08017418
 8004f98:	08017444 	.word	0x08017444
 8004f9c:	24000004 	.word	0x24000004

08004fa0 <setup>:


void setup(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
	DWT_Init();
 8004fa4:	f7fe fd1a 	bl	80039dc <_ZL8DWT_Initv>
	read_parameters();
 8004fa8:	f7ff ff9e 	bl	8004ee8 <_Z15read_parametersv>
	uart_setup();
 8004fac:	f7ff fdbe 	bl	8004b2c <_Z10uart_setupv>
	adc_setup();
 8004fb0:	f7ff fdae 	bl	8004b10 <_Z9adc_setupv>
	ros_setup();
 8004fb4:	f7ff ff4e 	bl	8004e54 <_Z9ros_setupv>
	timer_setup();
 8004fb8:	f7ff fe64 	bl	8004c84 <_Z11timer_setupv>
	HAL_GPIO_WritePin(Manual_Output_GPIO_Port, Manual_Output_Pin, GPIO_PIN_RESET);
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	2120      	movs	r1, #32
 8004fc0:	4808      	ldr	r0, [pc, #32]	; (8004fe4 <setup+0x44>)
 8004fc2:	f007 f8c1 	bl	800c148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ONBOARD_LED_GPIO_Port, ONBOARD_LED_Pin, GPIO_PIN_SET);
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	2108      	movs	r1, #8
 8004fca:	4807      	ldr	r0, [pc, #28]	; (8004fe8 <setup+0x48>)
 8004fcc:	f007 f8bc 	bl	800c148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, (GPIO_PinState)pid_mode);
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <setup+0x4c>)
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	2120      	movs	r1, #32
 8004fd8:	4805      	ldr	r0, [pc, #20]	; (8004ff0 <setup+0x50>)
 8004fda:	f007 f8b5 	bl	800c148 <HAL_GPIO_WritePin>
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	58020400 	.word	0x58020400
 8004fe8:	58021000 	.word	0x58021000
 8004fec:	24004408 	.word	0x24004408
 8004ff0:	58020c00 	.word	0x58020c00

08004ff4 <loop>:

uint8_t loop_index = 0;

void loop(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
	auto state = HAL_GPIO_ReadPin(Manual_Input_GPIO_Port, Manual_Input_Pin);
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	4836      	ldr	r0, [pc, #216]	; (80050d8 <loop+0xe4>)
 8004ffe:	f007 f88b 	bl	800c118 <HAL_GPIO_ReadPin>
 8005002:	4603      	mov	r3, r0
 8005004:	71fb      	strb	r3, [r7, #7]

	if(state==GPIO_PIN_SET){
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d103      	bne.n	8005014 <loop+0x20>
		input_mode = INPUT_MODE_CONTROLLER;
 800500c:	4b33      	ldr	r3, [pc, #204]	; (80050dc <loop+0xe8>)
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
 8005012:	e005      	b.n	8005020 <loop+0x2c>
	}else if(state==GPIO_PIN_RESET){
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d102      	bne.n	8005020 <loop+0x2c>
		input_mode = INPUT_MODE_SOFTWARE;
 800501a:	4b30      	ldr	r3, [pc, #192]	; (80050dc <loop+0xe8>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, state);
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	461a      	mov	r2, r3
 8005024:	2108      	movs	r1, #8
 8005026:	482e      	ldr	r0, [pc, #184]	; (80050e0 <loop+0xec>)
 8005028:	f007 f88e 	bl	800c148 <HAL_GPIO_WritePin>

	loop_index++;
 800502c:	4b2d      	ldr	r3, [pc, #180]	; (80050e4 <loop+0xf0>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	3301      	adds	r3, #1
 8005032:	b2da      	uxtb	r2, r3
 8005034:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <loop+0xf0>)
 8005036:	701a      	strb	r2, [r3, #0]

	if(esc_receive_indicator <=5 )esc_receive_indicator++;
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <loop+0xf4>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b05      	cmp	r3, #5
 800503e:	d805      	bhi.n	800504c <loop+0x58>
 8005040:	4b29      	ldr	r3, [pc, #164]	; (80050e8 <loop+0xf4>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	3301      	adds	r3, #1
 8005046:	b2da      	uxtb	r2, r3
 8005048:	4b27      	ldr	r3, [pc, #156]	; (80050e8 <loop+0xf4>)
 800504a:	701a      	strb	r2, [r3, #0]
	if(f103_receive_indicator<=5)f103_receive_indicator++;
 800504c:	4b27      	ldr	r3, [pc, #156]	; (80050ec <loop+0xf8>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d805      	bhi.n	8005060 <loop+0x6c>
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <loop+0xf8>)
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	3301      	adds	r3, #1
 800505a:	b2da      	uxtb	r2, r3
 800505c:	4b23      	ldr	r3, [pc, #140]	; (80050ec <loop+0xf8>)
 800505e:	701a      	strb	r2, [r3, #0]

	HAL_Delay(100);
 8005060:	2064      	movs	r0, #100	; 0x64
 8005062:	f002 f9ad 	bl	80073c0 <HAL_Delay>
	if(loop_index==5){
 8005066:	4b1f      	ldr	r3, [pc, #124]	; (80050e4 <loop+0xf0>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b05      	cmp	r3, #5
 800506c:	d12c      	bne.n	80050c8 <loop+0xd4>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800506e:	2140      	movs	r1, #64	; 0x40
 8005070:	481b      	ldr	r0, [pc, #108]	; (80050e0 <loop+0xec>)
 8005072:	f007 f882 	bl	800c17a <HAL_GPIO_TogglePin>
		loop_index=0;
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <loop+0xf0>)
 8005078:	2200      	movs	r2, #0
 800507a:	701a      	strb	r2, [r3, #0]

		if(esc_receive_indicator>5)error_code = error_code | 0b00000001;
 800507c:	4b1a      	ldr	r3, [pc, #104]	; (80050e8 <loop+0xf4>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	2b05      	cmp	r3, #5
 8005082:	d907      	bls.n	8005094 <loop+0xa0>
 8005084:	4b1a      	ldr	r3, [pc, #104]	; (80050f0 <loop+0xfc>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f043 0301 	orr.w	r3, r3, #1
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <loop+0xfc>)
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e006      	b.n	80050a2 <loop+0xae>
		else error_code = error_code & 0b11111110;
 8005094:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <loop+0xfc>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	f023 0301 	bic.w	r3, r3, #1
 800509c:	b2da      	uxtb	r2, r3
 800509e:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <loop+0xfc>)
 80050a0:	701a      	strb	r2, [r3, #0]

		if(f103_receive_indicator>5)error_code = error_code | 0b00000010;
 80050a2:	4b12      	ldr	r3, [pc, #72]	; (80050ec <loop+0xf8>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d907      	bls.n	80050ba <loop+0xc6>
 80050aa:	4b11      	ldr	r3, [pc, #68]	; (80050f0 <loop+0xfc>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	f043 0302 	orr.w	r3, r3, #2
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <loop+0xfc>)
 80050b6:	701a      	strb	r2, [r3, #0]
 80050b8:	e006      	b.n	80050c8 <loop+0xd4>
		else error_code = error_code & 0b11111101;
 80050ba:	4b0d      	ldr	r3, [pc, #52]	; (80050f0 <loop+0xfc>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	f023 0302 	bic.w	r3, r3, #2
 80050c2:	b2da      	uxtb	r2, r3
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <loop+0xfc>)
 80050c6:	701a      	strb	r2, [r3, #0]


	}
	HAL_IWDG_Refresh(&hiwdg1);
 80050c8:	480a      	ldr	r0, [pc, #40]	; (80050f4 <loop+0x100>)
 80050ca:	f007 f8d9 	bl	800c280 <HAL_IWDG_Refresh>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	58020400 	.word	0x58020400
 80050dc:	2400447c 	.word	0x2400447c
 80050e0:	58020c00 	.word	0x58020c00
 80050e4:	24004640 	.word	0x24004640
 80050e8:	24004381 	.word	0x24004381
 80050ec:	24004382 	.word	0x24004382
 80050f0:	24004380 	.word	0x24004380
 80050f4:	24001398 	.word	0x24001398

080050f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e00c      	b.n	8005122 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	fa22 f103 	lsr.w	r1, r2, r3
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	b2ca      	uxtb	r2, r1
 800511a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d9ef      	bls.n	8005108 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8005128:	bf00      	nop
 800512a:	bf00      	nop
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8005136:	b480      	push	{r7}
 8005138:	b085      	sub	sp, #20
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
 800514a:	e010      	b.n	800516e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6839      	ldr	r1, [r7, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	440a      	add	r2, r1
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	4611      	mov	r1, r2
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	00d2      	lsls	r2, r2, #3
 800515e:	fa01 f202 	lsl.w	r2, r1, r2
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3301      	adds	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d9eb      	bls.n	800514c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3304      	adds	r3, #4
  }
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce() override
 800519a:	b580      	push	{r7, lr}
 800519c:	b084      	sub	sp, #16
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd ff48 	bl	800303c <_ZN13STM32Hardware4timeEv>
 80051ac:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051b4:	f8d3 3760 	ldr.w	r3, [r3, #1888]	; 0x760
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d905      	bls.n	80051d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x36>
    {
      configured_ = false;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051d6:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00e      	beq.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051e4:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d906      	bls.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80051f4:	461a      	mov	r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8005202:	2b00      	cmp	r3, #0
 8005204:	d014      	beq.n	8005230 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd ff16 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005210:	4602      	mov	r2, r0
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1ad2      	subs	r2, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800521c:	429a      	cmp	r2, r3
 800521e:	bf8c      	ite	hi
 8005220:	2301      	movhi	r3, #1
 8005222:	2300      	movls	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d002      	beq.n	8005230 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 800522a:	f06f 0301 	mvn.w	r3, #1
 800522e:	e221      	b.n	8005674 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7fd fe31 	bl	8002e9c <_ZN13STM32Hardware4readEv>
 800523a:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	f2c0 81fa 	blt.w	8005638 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800524a:	f8d3 2754 	ldr.w	r2, [r3, #1876]	; 0x754
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	4413      	add	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005258:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005262:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005266:	2b07      	cmp	r3, #7
 8005268:	d12b      	bne.n	80052c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005270:	f8d3 3750 	ldr.w	r3, [r3, #1872]	; 0x750
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 800527c:	f8c1 2750 	str.w	r2, [r1, #1872]	; 0x750
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	b2d1      	uxtb	r1, r2
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	4413      	add	r3, r2
 8005288:	460a      	mov	r2, r1
 800528a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005294:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 8005298:	3b01      	subs	r3, #1
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80052a0:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052aa:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1a4      	bne.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052b8:	461a      	mov	r2, r3
 80052ba:	2308      	movs	r3, #8
 80052bc:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80052c0:	e79c      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052c8:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d130      	bne.n	8005332 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2bff      	cmp	r3, #255	; 0xff
 80052d4:	d112      	bne.n	80052fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x162>
        {
          mode_++;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80052dc:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80052e0:	3301      	adds	r3, #1
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80052e8:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3314      	adds	r3, #20
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80052f6:	f8c2 3764 	str.w	r3, [r2, #1892]	; 0x764
 80052fa:	e77f      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4618      	mov	r0, r3
 8005302:	f7fd fe9b 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	bf8c      	ite	hi
 8005314:	2301      	movhi	r3, #1
 8005316:	2300      	movls	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	f43f af6e 	beq.w	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
          return SPIN_TIMEOUT;
 800532c:	f06f 0301 	mvn.w	r3, #1
 8005330:	e1a0      	b.n	8005674 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005338:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800533c:	2b01      	cmp	r3, #1
 800533e:	d121      	bne.n	8005384 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2bfe      	cmp	r3, #254	; 0xfe
 8005344:	d10b      	bne.n	800535e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x1c4>
        {
          mode_++;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800534c:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005350:	3301      	adds	r3, #1
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005358:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 800535c:	e74e      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005364:	461a      	mov	r2, r3
 8005366:	2300      	movs	r3, #0
 8005368:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
          if (configured_ == false)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005372:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005376:	2b00      	cmp	r3, #0
 8005378:	f47f af40 	bne.w	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 fa7f 	bl	8005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
 8005382:	e73b      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800538a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800538e:	2b02      	cmp	r3, #2
 8005390:	d120      	bne.n	80053d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005398:	461a      	mov	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        index_ = 0;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053a6:	461a      	mov	r2, r3
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
        mode_++;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053b4:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053b8:	3301      	adds	r3, #1
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053c0:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte for calculating size checksum */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053ca:	461a      	mov	r2, r3
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 80053d2:	e713      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053da:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d118      	bne.n	8005414 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80053e8:	f8d3 2748 	ldr.w	r2, [r3, #1864]	; 0x748
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	021b      	lsls	r3, r3, #8
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80053f8:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
        mode_++;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005402:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005406:	3301      	adds	r3, #1
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800540e:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005412:	e6f3      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800541a:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800541e:	2b04      	cmp	r3, #4
 8005420:	d11f      	bne.n	8005462 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005428:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 800542c:	425a      	negs	r2, r3
 800542e:	b2db      	uxtb	r3, r3
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	bf58      	it	pl
 8005434:	4253      	negpl	r3, r2
 8005436:	2bff      	cmp	r3, #255	; 0xff
 8005438:	d10b      	bne.n	8005452 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x2b8>
          mode_++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005440:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005444:	3301      	adds	r3, #1
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800544c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005450:	e6d4      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005458:	461a      	mov	r2, r3
 800545a:	2300      	movs	r3, #0
 800545c:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 8005460:	e6cc      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005468:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 800546c:	2b05      	cmp	r3, #5
 800546e:	d119      	bne.n	80054a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_++;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005484:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005488:	3301      	adds	r3, #1
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005490:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        checksum_ = data;               /* first byte included in checksum */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800549a:	461a      	mov	r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	f8c2 3754 	str.w	r3, [r2, #1876]	; 0x754
 80054a2:	e6ab      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054aa:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 80054ae:	2b06      	cmp	r3, #6
 80054b0:	d123      	bne.n	80054fa <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054b8:	f8d3 274c 	ldr.w	r2, [r3, #1868]	; 0x74c
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	021b      	lsls	r3, r3, #8
 80054c0:	4413      	add	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80054c8:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
        mode_ = MODE_MESSAGE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054d2:	461a      	mov	r2, r3
 80054d4:	2307      	movs	r3, #7
 80054d6:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if (bytes_ == 0)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054e0:	f8d3 3748 	ldr.w	r3, [r3, #1864]	; 0x748
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f47f ae89 	bne.w	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80054f0:	461a      	mov	r2, r3
 80054f2:	2308      	movs	r3, #8
 80054f4:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
 80054f8:	e680      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005500:	f8d3 3744 	ldr.w	r3, [r3, #1860]	; 0x744
 8005504:	2b08      	cmp	r3, #8
 8005506:	f47f ae79 	bne.w	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005510:	461a      	mov	r2, r3
 8005512:	2300      	movs	r3, #0
 8005514:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
        if ((checksum_ % 256) == 255)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800551e:	f8d3 3754 	ldr.w	r3, [r3, #1876]	; 0x754
 8005522:	425a      	negs	r2, r3
 8005524:	b2db      	uxtb	r3, r3
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	bf58      	it	pl
 800552a:	4253      	negpl	r3, r2
 800552c:	2bff      	cmp	r3, #255	; 0xff
 800552e:	f47f ae65 	bne.w	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005538:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 800553c:	2b00      	cmp	r3, #0
 800553e:	d116      	bne.n	800556e <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f99d 	bl	8005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
            negotiateTopics();
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9b8 	bl	80058bc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005552:	461a      	mov	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
            last_sync_receive_time = c_time;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005560:	461a      	mov	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f8c2 3760 	str.w	r3, [r2, #1888]	; 0x760
            return SPIN_ERR;
 8005568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800556c:	e082      	b.n	8005674 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005574:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005578:	2b0a      	cmp	r3, #10
 800557a:	d107      	bne.n	800558c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8005582:	4619      	mov	r1, r3
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fa83 	bl	8005a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>
 800558a:	e637      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005592:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005596:	2b06      	cmp	r3, #6
 8005598:	d111      	bne.n	80055be <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	f242 736c 	movw	r3, #10092	; 0x276c
 80055a0:	4413      	add	r3, r2
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80055a8:	4611      	mov	r1, r2
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7fd f9b9 	bl	8002922 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2768 	strb.w	r2, [r3, #1896]	; 0x768
 80055bc:	e61e      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055c4:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055c8:	2b0b      	cmp	r3, #11
 80055ca:	d106      	bne.n	80055da <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x440>
          {
            configured_ = false;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
 80055d8:	e610      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055e0:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 80055e4:	3b64      	subs	r3, #100	; 0x64
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f43f ae02 	beq.w	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055fe:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8005602:	3b64      	subs	r3, #100	; 0x64
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	6858      	ldr	r0, [r3, #4]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005616:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 800561a:	3b64      	subs	r3, #100	; 0x64
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8005632:	4611      	mov	r1, r2
 8005634:	4798      	blx	r3
    while (true)
 8005636:	e5e1      	b.n	80051fc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x62>
        break;
 8005638:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005640:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005644:	2b00      	cmp	r3, #0
 8005646:	d014      	beq.n	8005672 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800564e:	f8d3 375c 	ldr.w	r3, [r3, #1884]	; 0x75c
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800565a:	4293      	cmp	r3, r2
 800565c:	d909      	bls.n	8005672 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f90e 	bl	8005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f8c2 375c 	str.w	r3, [r2, #1884]	; 0x75c
    }

    return SPIN_OK;
 8005672:	2300      	movs	r3, #0
  }
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	4a04      	ldr	r2, [pc, #16]	; (8005698 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	0801762c 	.word	0x0801762c

0800569c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff ffe5 	bl	800567c <_ZN3ros11Subscriber_C1Ev>
 80056b2:	4a0b      	ldr	r2, [pc, #44]	; (80056e0 <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei+0x44>)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	330c      	adds	r3, #12
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fe f887 	bl	80037d0 <_ZN8std_msgs7Float32C1Ev>
    cb_(cb),
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	683a      	ldr	r2, [r7, #0]
 80056cc:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	609a      	str	r2, [r3, #8]
  };
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	08017588 	.word	0x08017588

080056e4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ffc1 	bl	800567c <_ZN3ros11Subscriber_C1Ev>
 80056fa:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei+0x44>)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	330c      	adds	r3, #12
 8005704:	4618      	mov	r0, r3
 8005706:	f7fd ff29 	bl	800355c <_ZN8std_msgs17Float32MultiArrayC1Ev>
    cb_(cb),
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	63da      	str	r2, [r3, #60]	; 0x3c
    endpoint_(endpoint)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	683a      	ldr	r2, [r7, #0]
 8005714:	641a      	str	r2, [r3, #64]	; 0x40
    topic_ = topic_name;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	68ba      	ldr	r2, [r7, #8]
 800571a:	609a      	str	r2, [r3, #8]
  };
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	08017570 	.word	0x08017570

0800572c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
 8005738:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff ff9d 	bl	800567c <_ZN3ros11Subscriber_C1Ev>
 8005742:	4a0b      	ldr	r2, [pc, #44]	; (8005770 <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei+0x44>)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	330c      	adds	r3, #12
 800574c:	4618      	mov	r0, r3
 800574e:	f7fe f8db 	bl	8003908 <_ZN8std_msgs4BoolC1Ev>
    cb_(cb),
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	619a      	str	r2, [r3, #24]
    topic_ = topic_name;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68ba      	ldr	r2, [r7, #8]
 8005762:	609a      	str	r2, [r3, #8]
  };
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	08017558 	.word	0x08017558

08005774 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8initNodeEv>:
  void initNode()
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
    hardware_.init();
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3304      	adds	r3, #4
 8005780:	4618      	mov	r0, r3
 8005782:	f7fd fb6f 	bl	8002e64 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800578c:	461a      	mov	r2, r3
 800578e:	2300      	movs	r3, #0
 8005790:	f8c2 3744 	str.w	r3, [r2, #1860]	; 0x744
    bytes_ = 0;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800579a:	461a      	mov	r2, r3
 800579c:	2300      	movs	r3, #0
 800579e:	f8c2 3748 	str.w	r3, [r2, #1864]	; 0x748
    index_ = 0;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057a8:	461a      	mov	r2, r3
 80057aa:	2300      	movs	r3, #0
 80057ac:	f8c2 3750 	str.w	r3, [r2, #1872]	; 0x750
    topic_ = 0;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80057b6:	461a      	mov	r2, r3
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c2 374c 	str.w	r3, [r2, #1868]	; 0x74c
  };
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e01a      	b.n	800580c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x46>
    {
      if (subscribers[i] == 0) // empty slot
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10e      	bne.n	8005806 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	605a      	str	r2, [r3, #4]
        s.id_ = i + 100;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	605a      	str	r2, [r3, #4]
        return true;
 8005802:	2301      	movs	r3, #1
 8005804:	e006      	b.n	8005814 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x4e>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3301      	adds	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b63      	cmp	r3, #99	; 0x63
 8005810:	dde1      	ble.n	80057d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8005812:	2300      	movs	r3, #0
  }
 8005814:	4618      	mov	r0, r3
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e01d      	b.n	800586c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d111      	bne.n	8005866 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	4413      	add	r3, r2
 800584e:	683a      	ldr	r2, [r7, #0]
 8005850:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	60da      	str	r2, [r3, #12]
        return true;
 8005862:	2301      	movs	r3, #1
 8005864:	e006      	b.n	8005874 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b63      	cmp	r3, #99	; 0x63
 8005870:	ddde      	ble.n	8005830 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8005872:	2300      	movs	r3, #0
  }
 8005874:	4618      	mov	r0, r3
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005888:	f107 030c 	add.w	r3, r7, #12
 800588c:	4618      	mov	r0, r3
 800588e:	f7fc fba5 	bl	8001fdc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f107 020c 	add.w	r2, r7, #12
 800589c:	210a      	movs	r1, #10
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
    rt_time = hardware_.time();
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fd fbc8 	bl	800303c <_ZN13STM32Hardware4timeEv>
 80058ac:	4602      	mov	r2, r0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80058b4:	bf00      	nop
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80058bc:	b590      	push	{r4, r7, lr}
 80058be:	b08b      	sub	sp, #44	; 0x2c
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80058c4:	f107 030c 	add.w	r3, r7, #12
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7fc fc77 	bl	80021bc <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80058ce:	2300      	movs	r3, #0
 80058d0:	627b      	str	r3, [r7, #36]	; 0x24
 80058d2:	e062      	b.n	800599a <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	4413      	add	r3, r2
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d056      	beq.n	8005994 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	f603 1308 	addw	r3, r3, #2312	; 0x908
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	4413      	add	r3, r2
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005920:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3308      	adds	r3, #8
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4608      	mov	r0, r1
 8005934:	4798      	blx	r3
 8005936:	4603      	mov	r3, r0
 8005938:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	f603 1308 	addw	r3, r3, #2312	; 0x908
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4608      	mov	r0, r1
 8005962:	4798      	blx	r3
 8005964:	4603      	mov	r3, r0
 8005966:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800596c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681c      	ldr	r4, [r3, #0]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	f603 1308 	addw	r3, r3, #2312	; 0x908
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fd f985 	bl	8002c92 <_ZN3ros9Publisher15getEndpointTypeEv>
 8005988:	4601      	mov	r1, r0
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	461a      	mov	r2, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	3301      	adds	r3, #1
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599c:	2b63      	cmp	r3, #99	; 0x63
 800599e:	dd99      	ble.n	80058d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80059a0:	2300      	movs	r3, #0
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24
 80059a4:	e067      	b.n	8005a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1ba>
    {
      if (subscribers[i] != 0) // non-empty slot
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d05b      	beq.n	8005a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0x1b4>
      {
        ti.topic_id = subscribers[i]->id_;
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3308      	adds	r3, #8
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4608      	mov	r0, r1
 8005a02:	4798      	blx	r3
 8005a04:	4603      	mov	r3, r0
 8005a06:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	6859      	ldr	r1, [r3, #4]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4608      	mov	r0, r1
 8005a2c:	4798      	blx	r3
 8005a2e:	4603      	mov	r3, r0
 8005a30:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a36:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681c      	ldr	r4, [r3, #0]
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	6859      	ldr	r1, [r3, #4]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	f603 136c 	addw	r3, r3, #2412	; 0x96c
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	3304      	adds	r3, #4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4608      	mov	r0, r1
 8005a62:	4798      	blx	r3
 8005a64:	4601      	mov	r1, r0
 8005a66:	f107 030c 	add.w	r3, r7, #12
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a72:	3301      	adds	r3, #1
 8005a74:	627b      	str	r3, [r7, #36]	; 0x24
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a78:	2b63      	cmp	r3, #99	; 0x63
 8005a7a:	dd94      	ble.n	80059a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a82:	2201      	movs	r2, #1
 8005a84:	f883 2758 	strb.w	r2, [r3, #1880]	; 0x758
  }
 8005a88:	bf00      	nop
 8005a8a:	372c      	adds	r7, #44	; 0x2c
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd90      	pop	{r4, r7, pc}

08005a90 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005a9a:	f107 0308 	add.w	r3, r7, #8
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fc fa9c 	bl	8001fdc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fd fac7 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005aba:	f107 0308 	add.w	r3, r7, #8
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fc fafb 	bl	80020bc <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	4916      	ldr	r1, [pc, #88]	; (8005b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005acc:	fba1 1303 	umull	r1, r3, r1, r3
 8005ad0:	099b      	lsrs	r3, r3, #6
 8005ad2:	4413      	add	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	4b12      	ldr	r3, [pc, #72]	; (8005b24 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x94>)
 8005adc:	fba3 0302 	umull	r0, r3, r3, r2
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ae6:	fb00 f303 	mul.w	r3, r0, r3
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	4a0e      	ldr	r2, [pc, #56]	; (8005b28 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8syncTimeEPh+0x98>)
 8005aee:	fb02 f303 	mul.w	r3, r2, r3
 8005af2:	440b      	add	r3, r1
 8005af4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	3304      	adds	r3, #4
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f8c0 	bl	8005c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3304      	adds	r3, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fd fa97 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b16:	f8c3 2760 	str.w	r2, [r3, #1888]	; 0x760
  }
 8005b1a:	bf00      	nop
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	10624dd3 	.word	0x10624dd3
 8005b28:	000f4240 	.word	0x000f4240

08005b2c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b088      	sub	sp, #32
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b63      	cmp	r3, #99	; 0x63
 8005b3c:	dd0b      	ble.n	8005b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b44:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
 8005b48:	f083 0301 	eor.w	r3, r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e090      	b.n	8005c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	68f9      	ldr	r1, [r7, #12]
 8005b5e:	f241 4324 	movw	r3, #5156	; 0x1424
 8005b62:	440b      	add	r3, r1
 8005b64:	3307      	adds	r3, #7
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4790      	blx	r2
 8005b6c:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b74:	22ff      	movs	r2, #255	; 0xff
 8005b76:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    message_out[1] = PROTOCOL_VER;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b80:	22fe      	movs	r2, #254	; 0xfe
 8005b82:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b90:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	0a1b      	lsrs	r3, r3, #8
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba4:	f883 2427 	strb.w	r2, [r3, #1063]	; 0x427
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bae:	f893 2426 	ldrb.w	r2, [r3, #1062]	; 0x426
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb8:	f893 3427 	ldrb.w	r3, [r3, #1063]	; 0x427
 8005bbc:	4413      	add	r3, r2
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bca:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	b2da      	uxtb	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	b21b      	sxth	r3, r3
 8005be0:	121b      	asrs	r3, r3, #8
 8005be2:	b21b      	sxth	r3, r3
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bec:	f883 242a 	strb.w	r2, [r3, #1066]	; 0x42a

    /* calculate checksum */
    int chk = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005bf4:	2305      	movs	r3, #5
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e00d      	b.n	8005c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xea>
      chk += message_out[i];
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	441a      	add	r2, r3
 8005c00:	f241 4324 	movw	r3, #5156	; 0x1424
 8005c04:	4413      	add	r3, r2
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	461a      	mov	r2, r3
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	3301      	adds	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	3306      	adds	r3, #6
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	ddec      	ble.n	8005bfa <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0xce>
    l += 7;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	3307      	adds	r3, #7
 8005c24:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	425a      	negs	r2, r3
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	b2d2      	uxtb	r2, r2
 8005c2e:	bf58      	it	pl
 8005c30:	4253      	negpl	r3, r2
 8005c32:	b2da      	uxtb	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	1c59      	adds	r1, r3, #1
 8005c38:	6179      	str	r1, [r7, #20]
 8005c3a:	43d2      	mvns	r2, r2
 8005c3c:	b2d1      	uxtb	r1, r2
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	441a      	add	r2, r3
 8005c42:	f241 4324 	movw	r3, #5156	; 0x1424
 8005c46:	4413      	add	r3, r2
 8005c48:	460a      	mov	r2, r1
 8005c4a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c52:	dc0b      	bgt.n	8005c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1d18      	adds	r0, r3, #4
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f241 4324 	movw	r3, #5156	; 0x1424
 8005c5e:	4413      	add	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4619      	mov	r1, r3
 8005c64:	f7fd f9a4 	bl	8002fb0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	e005      	b.n	8005c78 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8005c6c:	4904      	ldr	r1, [pc, #16]	; (8005c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE7publishEiPKNS_3MsgE+0x154>)
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f848 	bl	8005d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>
      return -1;
 8005c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3720      	adds	r7, #32
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08017478 	.word	0x08017478

08005c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fd f9d2 	bl	800303c <_ZN13STM32Hardware4timeEv>
 8005c98:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4915      	ldr	r1, [pc, #84]	; (8005cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005ca2:	fba1 1303 	umull	r1, r3, r1, r3
 8005ca6:	099b      	lsrs	r3, r3, #6
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	1e5a      	subs	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6859      	ldr	r1, [r3, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4b0f      	ldr	r3, [pc, #60]	; (8005cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x74>)
 8005cba:	fba3 0302 	umull	r0, r3, r3, r2
 8005cbe:	099b      	lsrs	r3, r3, #6
 8005cc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cc4:	fb00 f303 	mul.w	r3, r0, r3
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x78>)
 8005ccc:	fb02 f303 	mul.w	r3, r2, r3
 8005cd0:	1aca      	subs	r2, r1, r3
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE6setNowERKNS_4TimeE+0x7c>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f001 fa80 	bl	80071f0 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8005cf0:	bf00      	nop
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	10624dd3 	.word	0x10624dd3
 8005cfc:	000f4240 	.word	0x000f4240
 8005d00:	3b9aca00 	.word	0x3b9aca00

08005d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	2103      	movs	r1, #3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 f804 	bl	8005d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>
  }
 8005d18:	bf00      	nop
 8005d1a:	3708      	adds	r7, #8
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE3logEcPKc>:
  void log(char byte, const char * msg)
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b088      	sub	sp, #32
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	460b      	mov	r3, r1
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8005d2e:	f107 0314 	add.w	r3, r7, #20
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fc fc06 	bl	8002544 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f107 0214 	add.w	r2, r7, #20
 8005d4a:	2107      	movs	r1, #7
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	4798      	blx	r3
  }
 8005d50:	bf00      	nop
 8005d52:	3720      	adds	r7, #32
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <_Z41__static_initialization_and_destruction_0ii>:
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	6039      	str	r1, [r7, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d14f      	bne.n	8005e08 <_Z41__static_initialization_and_destruction_0ii+0xb0>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d14a      	bne.n	8005e08 <_Z41__static_initialization_and_destruction_0ii+0xb0>
ros::NodeHandle nh;
 8005d72:	4827      	ldr	r0, [pc, #156]	; (8005e10 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8005d74:	f7fd fe5a 	bl	8003a2c <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EEC1Ev>
std_msgs::Float32MultiArray sensor_msg;
 8005d78:	4826      	ldr	r0, [pc, #152]	; (8005e14 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005d7a:	f7fd fbef 	bl	800355c <_ZN8std_msgs17Float32MultiArrayC1Ev>
ros::Publisher ros_pub("stm32_sensor", &sensor_msg);
 8005d7e:	2300      	movs	r3, #0
 8005d80:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8005d82:	4925      	ldr	r1, [pc, #148]	; (8005e18 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8005d84:	4825      	ldr	r0, [pc, #148]	; (8005e1c <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8005d86:	f7fc ff59 	bl	8002c3c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
CJY901 jy901(&huart8);
 8005d8a:	4925      	ldr	r1, [pc, #148]	; (8005e20 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8005d8c:	4825      	ldr	r0, [pc, #148]	; (8005e24 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8005d8e:	f7fa fc95 	bl	80006bc <_ZN6CJY901C1EP20__UART_HandleTypeDef>
PID<float> pid(&current_esc_speed,&duty_cycle_output,&speed_set,parameters.kp,parameters.ki,parameters.kd);
 8005d92:	4b25      	ldr	r3, [pc, #148]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005d94:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d98:	4b23      	ldr	r3, [pc, #140]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005d9a:	ed93 7a03 	vldr	s14, [r3, #12]
 8005d9e:	4b22      	ldr	r3, [pc, #136]	; (8005e28 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8005da0:	edd3 6a04 	vldr	s13, [r3, #16]
 8005da4:	2300      	movs	r3, #0
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	eeb0 1a66 	vmov.f32	s2, s13
 8005dac:	eef0 0a47 	vmov.f32	s1, s14
 8005db0:	eeb0 0a67 	vmov.f32	s0, s15
 8005db4:	4b1d      	ldr	r3, [pc, #116]	; (8005e2c <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8005db6:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8005db8:	491e      	ldr	r1, [pc, #120]	; (8005e34 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8005dba:	481f      	ldr	r0, [pc, #124]	; (8005e38 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8005dbc:	f7fa fe78 	bl	8000ab0 <_ZN3PIDIfEC1EPfS1_S1_fffh>
ros::Subscriber<std_msgs::Float32> speed_sub("Commands/speed", &speed_callback );
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8005dc4:	491e      	ldr	r1, [pc, #120]	; (8005e40 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8005dc6:	481f      	ldr	r0, [pc, #124]	; (8005e44 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8005dc8:	f7ff fc68 	bl	800569c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> duty_cycle_sub("Commands/duty_cycle", &duty_cycle_callback );
 8005dcc:	2301      	movs	r3, #1
 8005dce:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8005dd0:	491e      	ldr	r1, [pc, #120]	; (8005e4c <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8005dd2:	481f      	ldr	r0, [pc, #124]	; (8005e50 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8005dd4:	f7ff fc62 	bl	800569c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32> steering_sub("Commands/steering", &steering_callback );
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4a1e      	ldr	r2, [pc, #120]	; (8005e54 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8005ddc:	491e      	ldr	r1, [pc, #120]	; (8005e58 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8005dde:	481f      	ldr	r0, [pc, #124]	; (8005e5c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8005de0:	f7ff fc5c 	bl	800569c <_ZN3ros10SubscriberIN8std_msgs7Float32EvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Float32MultiArray> brake_sub("Commands/brakes", &brake_callback );
 8005de4:	2301      	movs	r3, #1
 8005de6:	4a1e      	ldr	r2, [pc, #120]	; (8005e60 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8005de8:	491e      	ldr	r1, [pc, #120]	; (8005e64 <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8005dea:	481f      	ldr	r0, [pc, #124]	; (8005e68 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8005dec:	f7ff fc7a 	bl	80056e4 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> input_mode_sub("Commands/input_mode", &input_mode_callback );
 8005df0:	2301      	movs	r3, #1
 8005df2:	4a1e      	ldr	r2, [pc, #120]	; (8005e6c <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8005df4:	491e      	ldr	r1, [pc, #120]	; (8005e70 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8005df6:	481f      	ldr	r0, [pc, #124]	; (8005e74 <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8005df8:	f7ff fc98 	bl	800572c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Bool> pid_mode_sub("Commands/pid_mode", &pid_mode_callback );
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8005e00:	491e      	ldr	r1, [pc, #120]	; (8005e7c <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8005e02:	481f      	ldr	r0, [pc, #124]	; (8005e80 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8005e04:	f7ff fc92 	bl	800572c <_ZN3ros10SubscriberIN8std_msgs4BoolEvEC1EPKcPFvRKS2_Ei>
}
 8005e08:	bf00      	nop
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	24001b74 	.word	0x24001b74
 8005e14:	24004308 	.word	0x24004308
 8005e18:	080174b4 	.word	0x080174b4
 8005e1c:	24004338 	.word	0x24004338
 8005e20:	240015f8 	.word	0x240015f8
 8005e24:	240044b8 	.word	0x240044b8
 8005e28:	24000004 	.word	0x24000004
 8005e2c:	2400440c 	.word	0x2400440c
 8005e30:	24004410 	.word	0x24004410
 8005e34:	24004414 	.word	0x24004414
 8005e38:	2400453c 	.word	0x2400453c
 8005e3c:	080047ed 	.word	0x080047ed
 8005e40:	080174c4 	.word	0x080174c4
 8005e44:	24004570 	.word	0x24004570
 8005e48:	08004831 	.word	0x08004831
 8005e4c:	080174d4 	.word	0x080174d4
 8005e50:	2400458c 	.word	0x2400458c
 8005e54:	080048c1 	.word	0x080048c1
 8005e58:	080174e8 	.word	0x080174e8
 8005e5c:	240045a8 	.word	0x240045a8
 8005e60:	08004941 	.word	0x08004941
 8005e64:	080174fc 	.word	0x080174fc
 8005e68:	240045c4 	.word	0x240045c4
 8005e6c:	08004a51 	.word	0x08004a51
 8005e70:	0801750c 	.word	0x0801750c
 8005e74:	24004608 	.word	0x24004608
 8005e78:	08004a75 	.word	0x08004a75
 8005e7c:	08017520 	.word	0x08017520
 8005e80:	24004624 	.word	0x24004624

08005e84 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	330c      	adds	r3, #12
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fd fd66 	bl	8003966 <_ZN8std_msgs4Bool11deserializeEPh>
    this->cb_(msg);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	320c      	adds	r2, #12
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	4798      	blx	r3
  }
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <_ZN3ros10SubscriberIN8std_msgs4BoolEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	699b      	ldr	r3, [r3, #24]
  }
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	330c      	adds	r3, #12
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fd fd66 	bl	80039a4 <_ZN8std_msgs4Bool7getTypeEv>
 8005ed8:	4603      	mov	r3, r0
  }
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <_ZN3ros10SubscriberIN8std_msgs4BoolEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	330c      	adds	r3, #12
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fd fd66 	bl	80039c0 <_ZN8std_msgs4Bool6getMD5Ev>
 8005ef4:	4603      	mov	r3, r0
  }
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
 8005f06:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fd fbb6 	bl	8003680 <_ZN8std_msgs17Float32MultiArray11deserializeEPh>
    this->cb_(msg);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	320c      	adds	r2, #12
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
  }
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  }
 8005f34:	4618      	mov	r0, r3
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	330c      	adds	r3, #12
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f7fd fc23 	bl	8003798 <_ZN8std_msgs17Float32MultiArray7getTypeEv>
 8005f52:	4603      	mov	r3, r0
  }
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZN3ros10SubscriberIN8std_msgs17Float32MultiArrayEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	330c      	adds	r3, #12
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fd fc23 	bl	80037b4 <_ZN8std_msgs17Float32MultiArray6getMD5Ev>
 8005f6e:	4603      	mov	r3, r0
  }
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	330c      	adds	r3, #12
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fc69 	bl	8003860 <_ZN8std_msgs7Float3211deserializeEPh>
    this->cb_(msg);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	320c      	adds	r2, #12
 8005f96:	4610      	mov	r0, r2
 8005f98:	4798      	blx	r3
  }
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}

08005fa2 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8005fa2:	b480      	push	{r7}
 8005fa4:	b083      	sub	sp, #12
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
  }
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <_ZN3ros10SubscriberIN8std_msgs7Float32EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b082      	sub	sp, #8
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fd fc82 	bl	80038d0 <_ZN8std_msgs7Float327getTypeEv>
 8005fcc:	4603      	mov	r3, r0
  }
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <_ZN3ros10SubscriberIN8std_msgs7Float32EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fd fc82 	bl	80038ec <_ZN8std_msgs7Float326getMD5Ev>
 8005fe8:	4603      	mov	r3, r0
  }
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <_ZN3ros11NodeHandle_I13STM32HardwareLi100ELi100ELi4096ELi4096EE9connectedEv>:
  virtual bool connected() override
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
    return configured_;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006000:	f893 3758 	ldrb.w	r3, [r3, #1880]	; 0x758
  };
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <_GLOBAL__sub_I_nh>:
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
 8006014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006018:	2001      	movs	r0, #1
 800601a:	f7ff fe9d 	bl	8005d58 <_Z41__static_initialization_and_destruction_0ii>
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <HAL_MspInit+0x30>)
 8006028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800602c:	4a08      	ldr	r2, [pc, #32]	; (8006050 <HAL_MspInit+0x30>)
 800602e:	f043 0302 	orr.w	r3, r3, #2
 8006032:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006036:	4b06      	ldr	r3, [pc, #24]	; (8006050 <HAL_MspInit+0x30>)
 8006038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	607b      	str	r3, [r7, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006044:	bf00      	nop
 8006046:	370c      	adds	r7, #12
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	58024400 	.word	0x58024400

08006054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b0bc      	sub	sp, #240	; 0xf0
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800605c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
 8006064:	605a      	str	r2, [r3, #4]
 8006066:	609a      	str	r2, [r3, #8]
 8006068:	60da      	str	r2, [r3, #12]
 800606a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800606c:	f107 0318 	add.w	r3, r7, #24
 8006070:	22c0      	movs	r2, #192	; 0xc0
 8006072:	2100      	movs	r1, #0
 8006074:	4618      	mov	r0, r3
 8006076:	f00f fb01 	bl	801567c <memset>
  if(hadc->Instance==ADC1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a67      	ldr	r2, [pc, #412]	; (800621c <HAL_ADC_MspInit+0x1c8>)
 8006080:	4293      	cmp	r3, r2
 8006082:	f040 80c6 	bne.w	8006212 <HAL_ADC_MspInit+0x1be>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8006086:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 10;
 8006092:	230a      	movs	r3, #10
 8006094:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3N = 128;
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800609a:	2302      	movs	r3, #2
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800609e:	2302      	movs	r3, #2
 80060a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3R = 8;
 80060a2:	2308      	movs	r3, #8
 80060a4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_1;
 80060a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060aa:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80060b0:	2300      	movs	r3, #0
 80060b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 80060b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060bc:	f107 0318 	add.w	r3, r7, #24
 80060c0:	4618      	mov	r0, r3
 80060c2:	f007 fd51 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_ADC_MspInit+0x7c>
    {
      Error_Handler();
 80060cc:	f7fb ff52 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80060d0:	4b53      	ldr	r3, [pc, #332]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 80060d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060d6:	4a52      	ldr	r2, [pc, #328]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 80060d8:	f043 0320 	orr.w	r3, r3, #32
 80060dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80060e0:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 80060e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	617b      	str	r3, [r7, #20]
 80060ec:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ee:	4b4c      	ldr	r3, [pc, #304]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 80060f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060f4:	4a4a      	ldr	r2, [pc, #296]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 80060f6:	f043 0304 	orr.w	r3, r3, #4
 80060fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80060fe:	4b48      	ldr	r3, [pc, #288]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 8006100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800610c:	4b44      	ldr	r3, [pc, #272]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 800610e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006112:	4a43      	ldr	r2, [pc, #268]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 8006114:	f043 0301 	orr.w	r3, r3, #1
 8006118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800611c:	4b40      	ldr	r3, [pc, #256]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 800611e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006122:	f003 0301 	and.w	r3, r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800612a:	4b3d      	ldr	r3, [pc, #244]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 800612c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006130:	4a3b      	ldr	r2, [pc, #236]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 8006132:	f043 0302 	orr.w	r3, r3, #2
 8006136:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800613a:	4b39      	ldr	r3, [pc, #228]	; (8006220 <HAL_ADC_MspInit+0x1cc>)
 800613c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = F06_Pin|F07_Pin|F01_Pin|F04_Pin;
 8006148:	2333      	movs	r3, #51	; 0x33
 800614a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800614e:	2303      	movs	r3, #3
 8006150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800615a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800615e:	4619      	mov	r1, r3
 8006160:	4830      	ldr	r0, [pc, #192]	; (8006224 <HAL_ADC_MspInit+0x1d0>)
 8006162:	f005 fe29 	bl	800bdb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F03_Pin|F00_Pin;
 8006166:	2350      	movs	r3, #80	; 0x50
 8006168:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800616c:	2303      	movs	r3, #3
 800616e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006172:	2300      	movs	r3, #0
 8006174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006178:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800617c:	4619      	mov	r1, r3
 800617e:	482a      	ldr	r0, [pc, #168]	; (8006228 <HAL_ADC_MspInit+0x1d4>)
 8006180:	f005 fe1a 	bl	800bdb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = F05_Pin|F02_Pin;
 8006184:	2303      	movs	r3, #3
 8006186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800618a:	2303      	movs	r3, #3
 800618c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006190:	2300      	movs	r3, #0
 8006192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006196:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800619a:	4619      	mov	r1, r3
 800619c:	4823      	ldr	r0, [pc, #140]	; (800622c <HAL_ADC_MspInit+0x1d8>)
 800619e:	f005 fe0b 	bl	800bdb8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80061a2:	4b23      	ldr	r3, [pc, #140]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061a4:	4a23      	ldr	r2, [pc, #140]	; (8006234 <HAL_ADC_MspInit+0x1e0>)
 80061a6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80061a8:	4b21      	ldr	r3, [pc, #132]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061aa:	2209      	movs	r2, #9
 80061ac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ae:	4b20      	ldr	r3, [pc, #128]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061b4:	4b1e      	ldr	r3, [pc, #120]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80061ba:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061c0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061c2:	4b1b      	ldr	r3, [pc, #108]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061c8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061ca:	4b19      	ldr	r3, [pc, #100]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80061d2:	4b17      	ldr	r3, [pc, #92]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80061da:	4b15      	ldr	r3, [pc, #84]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061dc:	2200      	movs	r2, #0
 80061de:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80061e0:	4b13      	ldr	r3, [pc, #76]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80061e6:	4812      	ldr	r0, [pc, #72]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061e8:	f002 ffaa 	bl	8009140 <HAL_DMA_Init>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <HAL_ADC_MspInit+0x1a2>
    {
      Error_Handler();
 80061f2:	f7fb febf 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a0d      	ldr	r2, [pc, #52]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80061fc:	4a0c      	ldr	r2, [pc, #48]	; (8006230 <HAL_ADC_MspInit+0x1dc>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	2012      	movs	r0, #18
 8006208:	f002 ff65 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800620c:	2012      	movs	r0, #18
 800620e:	f002 ff7c 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006212:	bf00      	nop
 8006214:	37f0      	adds	r7, #240	; 0xf0
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40022000 	.word	0x40022000
 8006220:	58024400 	.word	0x58024400
 8006224:	58020800 	.word	0x58020800
 8006228:	58020000 	.word	0x58020000
 800622c:	58020400 	.word	0x58020400
 8006230:	24001320 	.word	0x24001320
 8006234:	40020028 	.word	0x40020028

08006238 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b0c4      	sub	sp, #272	; 0x110
 800623c:	af00      	add	r7, sp, #0
 800623e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006242:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006246:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006248:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	605a      	str	r2, [r3, #4]
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	60da      	str	r2, [r3, #12]
 8006256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006258:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800625c:	22c0      	movs	r2, #192	; 0xc0
 800625e:	2100      	movs	r1, #0
 8006260:	4618      	mov	r0, r3
 8006262:	f00f fa0b 	bl	801567c <memset>
  if(huart->Instance==LPUART1)
 8006266:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800626a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4aa7      	ldr	r2, [pc, #668]	; (8006510 <HAL_UART_MspInit+0x2d8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	f040 8084 	bne.w	8006382 <HAL_UART_MspInit+0x14a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800627a:	f04f 0204 	mov.w	r2, #4
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8006286:	2300      	movs	r3, #0
 8006288:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800628c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006290:	4618      	mov	r0, r3
 8006292:	f007 fc69 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_UART_MspInit+0x68>
    {
      Error_Handler();
 800629c:	f7fb fe6a 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80062a0:	4b9c      	ldr	r3, [pc, #624]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80062a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062a6:	4a9b      	ldr	r2, [pc, #620]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80062a8:	f043 0308 	orr.w	r3, r3, #8
 80062ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80062b0:	4b98      	ldr	r3, [pc, #608]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80062b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062b6:	f003 0308 	and.w	r3, r3, #8
 80062ba:	637b      	str	r3, [r7, #52]	; 0x34
 80062bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062be:	4b95      	ldr	r3, [pc, #596]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80062c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c4:	4a93      	ldr	r2, [pc, #588]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80062ce:	4b91      	ldr	r3, [pc, #580]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80062d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062d4:	f003 0301 	and.w	r3, r3, #1
 80062d8:	633b      	str	r3, [r7, #48]	; 0x30
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80062dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80062e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f0:	2300      	movs	r3, #0
 80062f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 80062f6:	2303      	movs	r3, #3
 80062f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062fc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006300:	4619      	mov	r1, r3
 8006302:	4885      	ldr	r0, [pc, #532]	; (8006518 <HAL_UART_MspInit+0x2e0>)
 8006304:	f005 fd58 	bl	800bdb8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = BDMA_Channel0;
 8006308:	4b84      	ldr	r3, [pc, #528]	; (800651c <HAL_UART_MspInit+0x2e4>)
 800630a:	4a85      	ldr	r2, [pc, #532]	; (8006520 <HAL_UART_MspInit+0x2e8>)
 800630c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = BDMA_REQUEST_LPUART1_RX;
 800630e:	4b83      	ldr	r3, [pc, #524]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006310:	2209      	movs	r2, #9
 8006312:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006314:	4b81      	ldr	r3, [pc, #516]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006316:	2200      	movs	r2, #0
 8006318:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800631a:	4b80      	ldr	r3, [pc, #512]	; (800651c <HAL_UART_MspInit+0x2e4>)
 800631c:	2200      	movs	r2, #0
 800631e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006320:	4b7e      	ldr	r3, [pc, #504]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006326:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006328:	4b7c      	ldr	r3, [pc, #496]	; (800651c <HAL_UART_MspInit+0x2e4>)
 800632a:	2200      	movs	r2, #0
 800632c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800632e:	4b7b      	ldr	r3, [pc, #492]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006330:	2200      	movs	r2, #0
 8006332:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8006334:	4b79      	ldr	r3, [pc, #484]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800633a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800633c:	4b77      	ldr	r3, [pc, #476]	; (800651c <HAL_UART_MspInit+0x2e4>)
 800633e:	2200      	movs	r2, #0
 8006340:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006342:	4876      	ldr	r0, [pc, #472]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006344:	f002 fefc 	bl	8009140 <HAL_DMA_Init>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <HAL_UART_MspInit+0x11a>
    {
      Error_Handler();
 800634e:	f7fb fe11 	bl	8001f74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8006352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006356:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a6f      	ldr	r2, [pc, #444]	; (800651c <HAL_UART_MspInit+0x2e4>)
 800635e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006362:	4a6e      	ldr	r2, [pc, #440]	; (800651c <HAL_UART_MspInit+0x2e4>)
 8006364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006368:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6393      	str	r3, [r2, #56]	; 0x38

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006370:	2200      	movs	r2, #0
 8006372:	2100      	movs	r1, #0
 8006374:	208e      	movs	r0, #142	; 0x8e
 8006376:	f002 feae 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800637a:	208e      	movs	r0, #142	; 0x8e
 800637c:	f002 fec5 	bl	800910a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }

}
 8006380:	e2d4      	b.n	800692c <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART4)
 8006382:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a65      	ldr	r2, [pc, #404]	; (8006524 <HAL_UART_MspInit+0x2ec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	f040 80d3 	bne.w	800653c <HAL_UART_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006396:	f04f 0202 	mov.w	r2, #2
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063ac:	4618      	mov	r0, r3
 80063ae:	f007 fbdb 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d001      	beq.n	80063bc <HAL_UART_MspInit+0x184>
      Error_Handler();
 80063b8:	f7fb fddc 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80063bc:	4b55      	ldr	r3, [pc, #340]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80063be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063c2:	4a54      	ldr	r2, [pc, #336]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80063c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063cc:	4b51      	ldr	r3, [pc, #324]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80063ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80063da:	4b4e      	ldr	r3, [pc, #312]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80063dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063e0:	4a4c      	ldr	r2, [pc, #304]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80063e2:	f043 0308 	orr.w	r3, r3, #8
 80063e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063ea:	4b4a      	ldr	r3, [pc, #296]	; (8006514 <HAL_UART_MspInit+0x2dc>)
 80063ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80063f8:	2303      	movs	r3, #3
 80063fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063fe:	2302      	movs	r3, #2
 8006400:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006404:	2300      	movs	r3, #0
 8006406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800640a:	2300      	movs	r3, #0
 800640c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006410:	2308      	movs	r3, #8
 8006412:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006416:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800641a:	4619      	mov	r1, r3
 800641c:	4842      	ldr	r0, [pc, #264]	; (8006528 <HAL_UART_MspInit+0x2f0>)
 800641e:	f005 fccb 	bl	800bdb8 <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream3;
 8006422:	4b42      	ldr	r3, [pc, #264]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006424:	4a42      	ldr	r2, [pc, #264]	; (8006530 <HAL_UART_MspInit+0x2f8>)
 8006426:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8006428:	4b40      	ldr	r3, [pc, #256]	; (800652c <HAL_UART_MspInit+0x2f4>)
 800642a:	223f      	movs	r2, #63	; 0x3f
 800642c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800642e:	4b3f      	ldr	r3, [pc, #252]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006430:	2200      	movs	r2, #0
 8006432:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006434:	4b3d      	ldr	r3, [pc, #244]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006436:	2200      	movs	r2, #0
 8006438:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800643a:	4b3c      	ldr	r3, [pc, #240]	; (800652c <HAL_UART_MspInit+0x2f4>)
 800643c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006440:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006442:	4b3a      	ldr	r3, [pc, #232]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006444:	2200      	movs	r2, #0
 8006446:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006448:	4b38      	ldr	r3, [pc, #224]	; (800652c <HAL_UART_MspInit+0x2f4>)
 800644a:	2200      	movs	r2, #0
 800644c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800644e:	4b37      	ldr	r3, [pc, #220]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006450:	2200      	movs	r2, #0
 8006452:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006454:	4b35      	ldr	r3, [pc, #212]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006456:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800645a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800645c:	4b33      	ldr	r3, [pc, #204]	; (800652c <HAL_UART_MspInit+0x2f4>)
 800645e:	2200      	movs	r2, #0
 8006460:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8006462:	4832      	ldr	r0, [pc, #200]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006464:	f002 fe6c 	bl	8009140 <HAL_DMA_Init>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_UART_MspInit+0x23a>
      Error_Handler();
 800646e:	f7fb fd81 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8006472:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2b      	ldr	r2, [pc, #172]	; (800652c <HAL_UART_MspInit+0x2f4>)
 800647e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006482:	4a2a      	ldr	r2, [pc, #168]	; (800652c <HAL_UART_MspInit+0x2f4>)
 8006484:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006488:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8006490:	4b28      	ldr	r3, [pc, #160]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 8006492:	4a29      	ldr	r2, [pc, #164]	; (8006538 <HAL_UART_MspInit+0x300>)
 8006494:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8006496:	4b27      	ldr	r3, [pc, #156]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 8006498:	2240      	movs	r2, #64	; 0x40
 800649a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800649c:	4b25      	ldr	r3, [pc, #148]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 800649e:	2240      	movs	r2, #64	; 0x40
 80064a0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80064a8:	4b22      	ldr	r3, [pc, #136]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064ae:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064b6:	4b1f      	ldr	r3, [pc, #124]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80064bc:	4b1d      	ldr	r3, [pc, #116]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064be:	2200      	movs	r2, #0
 80064c0:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80064c2:	4b1c      	ldr	r3, [pc, #112]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064c8:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80064d0:	4818      	ldr	r0, [pc, #96]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064d2:	f002 fe35 	bl	8009140 <HAL_DMA_Init>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <HAL_UART_MspInit+0x2a8>
      Error_Handler();
 80064dc:	f7fb fd4a 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80064e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064e4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a12      	ldr	r2, [pc, #72]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064ec:	67da      	str	r2, [r3, #124]	; 0x7c
 80064ee:	4a11      	ldr	r2, [pc, #68]	; (8006534 <HAL_UART_MspInit+0x2fc>)
 80064f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80064f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80064fc:	2200      	movs	r2, #0
 80064fe:	2100      	movs	r1, #0
 8006500:	2034      	movs	r0, #52	; 0x34
 8006502:	f002 fde8 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006506:	2034      	movs	r0, #52	; 0x34
 8006508:	f002 fdff 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 800650c:	e20e      	b.n	800692c <HAL_UART_MspInit+0x6f4>
 800650e:	bf00      	nop
 8006510:	58000c00 	.word	0x58000c00
 8006514:	58024400 	.word	0x58024400
 8006518:	58020000 	.word	0x58020000
 800651c:	2400168c 	.word	0x2400168c
 8006520:	58025408 	.word	0x58025408
 8006524:	40004c00 	.word	0x40004c00
 8006528:	58020c00 	.word	0x58020c00
 800652c:	24001704 	.word	0x24001704
 8006530:	40020058 	.word	0x40020058
 8006534:	2400177c 	.word	0x2400177c
 8006538:	40020070 	.word	0x40020070
  else if(huart->Instance==UART5)
 800653c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006540:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a9f      	ldr	r2, [pc, #636]	; (80067c8 <HAL_UART_MspInit+0x590>)
 800654a:	4293      	cmp	r3, r2
 800654c:	f040 8087 	bne.w	800665e <HAL_UART_MspInit+0x426>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006550:	f04f 0202 	mov.w	r2, #2
 8006554:	f04f 0300 	mov.w	r3, #0
 8006558:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800655c:	2300      	movs	r3, #0
 800655e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006562:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006566:	4618      	mov	r0, r3
 8006568:	f007 fafe 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_UART_MspInit+0x33e>
      Error_Handler();
 8006572:	f7fb fcff 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006576:	4b95      	ldr	r3, [pc, #596]	; (80067cc <HAL_UART_MspInit+0x594>)
 8006578:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800657c:	4a93      	ldr	r2, [pc, #588]	; (80067cc <HAL_UART_MspInit+0x594>)
 800657e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006582:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006586:	4b91      	ldr	r3, [pc, #580]	; (80067cc <HAL_UART_MspInit+0x594>)
 8006588:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800658c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006590:	627b      	str	r3, [r7, #36]	; 0x24
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006594:	4b8d      	ldr	r3, [pc, #564]	; (80067cc <HAL_UART_MspInit+0x594>)
 8006596:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800659a:	4a8c      	ldr	r2, [pc, #560]	; (80067cc <HAL_UART_MspInit+0x594>)
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065a4:	4b89      	ldr	r3, [pc, #548]	; (80067cc <HAL_UART_MspInit+0x594>)
 80065a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80065b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80065b6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ba:	2302      	movs	r3, #2
 80065bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065c6:	2300      	movs	r3, #0
 80065c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80065cc:	230e      	movs	r3, #14
 80065ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065d2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80065d6:	4619      	mov	r1, r3
 80065d8:	487d      	ldr	r0, [pc, #500]	; (80067d0 <HAL_UART_MspInit+0x598>)
 80065da:	f005 fbed 	bl	800bdb8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream5;
 80065de:	4b7d      	ldr	r3, [pc, #500]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 80065e0:	4a7d      	ldr	r2, [pc, #500]	; (80067d8 <HAL_UART_MspInit+0x5a0>)
 80065e2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80065e4:	4b7b      	ldr	r3, [pc, #492]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 80065e6:	2241      	movs	r2, #65	; 0x41
 80065e8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065ea:	4b7a      	ldr	r3, [pc, #488]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065f0:	4b78      	ldr	r3, [pc, #480]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80065f6:	4b77      	ldr	r3, [pc, #476]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 80065f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065fc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065fe:	4b75      	ldr	r3, [pc, #468]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 8006600:	2200      	movs	r2, #0
 8006602:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006604:	4b73      	ldr	r3, [pc, #460]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 8006606:	2200      	movs	r2, #0
 8006608:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800660a:	4b72      	ldr	r3, [pc, #456]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 800660c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006610:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006612:	4b70      	ldr	r3, [pc, #448]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 8006614:	2200      	movs	r2, #0
 8006616:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006618:	4b6e      	ldr	r3, [pc, #440]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 800661a:	2200      	movs	r2, #0
 800661c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800661e:	486d      	ldr	r0, [pc, #436]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 8006620:	f002 fd8e 	bl	8009140 <HAL_DMA_Init>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_UART_MspInit+0x3f6>
      Error_Handler();
 800662a:	f7fb fca3 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800662e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006632:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a66      	ldr	r2, [pc, #408]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 800663a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800663e:	4a65      	ldr	r2, [pc, #404]	; (80067d4 <HAL_UART_MspInit+0x59c>)
 8006640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006644:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800664c:	2200      	movs	r2, #0
 800664e:	2100      	movs	r1, #0
 8006650:	2035      	movs	r0, #53	; 0x35
 8006652:	f002 fd40 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006656:	2035      	movs	r0, #53	; 0x35
 8006658:	f002 fd57 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 800665c:	e166      	b.n	800692c <HAL_UART_MspInit+0x6f4>
  else if(huart->Instance==UART7)
 800665e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006662:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a5c      	ldr	r2, [pc, #368]	; (80067dc <HAL_UART_MspInit+0x5a4>)
 800666c:	4293      	cmp	r3, r2
 800666e:	f040 80bf 	bne.w	80067f0 <HAL_UART_MspInit+0x5b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006672:	f04f 0202 	mov.w	r2, #2
 8006676:	f04f 0300 	mov.w	r3, #0
 800667a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800667e:	2300      	movs	r3, #0
 8006680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006684:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006688:	4618      	mov	r0, r3
 800668a:	f007 fa6d 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 800668e:	4603      	mov	r3, r0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d001      	beq.n	8006698 <HAL_UART_MspInit+0x460>
      Error_Handler();
 8006694:	f7fb fc6e 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006698:	4b4c      	ldr	r3, [pc, #304]	; (80067cc <HAL_UART_MspInit+0x594>)
 800669a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800669e:	4a4b      	ldr	r2, [pc, #300]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066a8:	4b48      	ldr	r3, [pc, #288]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80066b6:	4b45      	ldr	r3, [pc, #276]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066bc:	4a43      	ldr	r2, [pc, #268]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066be:	f043 0310 	orr.w	r3, r3, #16
 80066c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066c6:	4b41      	ldr	r3, [pc, #260]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	61bb      	str	r3, [r7, #24]
 80066d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066d4:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066da:	4a3c      	ldr	r2, [pc, #240]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80066e4:	4b39      	ldr	r3, [pc, #228]	; (80067cc <HAL_UART_MspInit+0x594>)
 80066e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80066f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066fa:	2302      	movs	r3, #2
 80066fc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006700:	2300      	movs	r3, #0
 8006702:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006706:	2300      	movs	r3, #0
 8006708:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800670c:	2307      	movs	r3, #7
 800670e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006712:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006716:	4619      	mov	r1, r3
 8006718:	4831      	ldr	r0, [pc, #196]	; (80067e0 <HAL_UART_MspInit+0x5a8>)
 800671a:	f005 fb4d 	bl	800bdb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800671e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006722:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006726:	2302      	movs	r3, #2
 8006728:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672c:	2300      	movs	r3, #0
 800672e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006732:	2300      	movs	r3, #0
 8006734:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF11_UART7;
 8006738:	230b      	movs	r3, #11
 800673a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800673e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8006742:	4619      	mov	r1, r3
 8006744:	4827      	ldr	r0, [pc, #156]	; (80067e4 <HAL_UART_MspInit+0x5ac>)
 8006746:	f005 fb37 	bl	800bdb8 <HAL_GPIO_Init>
    hdma_uart7_rx.Instance = DMA1_Stream2;
 800674a:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 800674c:	4a27      	ldr	r2, [pc, #156]	; (80067ec <HAL_UART_MspInit+0x5b4>)
 800674e:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Request = DMA_REQUEST_UART7_RX;
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 8006752:	224f      	movs	r2, #79	; 0x4f
 8006754:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 8006758:	2200      	movs	r2, #0
 800675a:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800675c:	4b22      	ldr	r3, [pc, #136]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 800675e:	2200      	movs	r2, #0
 8006760:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006762:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 8006764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006768:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800676a:	4b1f      	ldr	r3, [pc, #124]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 800676c:	2200      	movs	r2, #0
 800676e:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006770:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 8006772:	2200      	movs	r2, #0
 8006774:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8006776:	4b1c      	ldr	r3, [pc, #112]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 8006778:	2200      	movs	r2, #0
 800677a:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 800677c:	4b1a      	ldr	r3, [pc, #104]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 800677e:	2200      	movs	r2, #0
 8006780:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006782:	4b19      	ldr	r3, [pc, #100]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 8006784:	2200      	movs	r2, #0
 8006786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8006788:	4817      	ldr	r0, [pc, #92]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 800678a:	f002 fcd9 	bl	8009140 <HAL_DMA_Init>
 800678e:	4603      	mov	r3, r0
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_UART_MspInit+0x560>
      Error_Handler();
 8006794:	f7fb fbee 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8006798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800679c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a11      	ldr	r2, [pc, #68]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 80067a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80067a8:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <HAL_UART_MspInit+0x5b0>)
 80067aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	2052      	movs	r0, #82	; 0x52
 80067bc:	f002 fc8b 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80067c0:	2052      	movs	r0, #82	; 0x52
 80067c2:	f002 fca2 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 80067c6:	e0b1      	b.n	800692c <HAL_UART_MspInit+0x6f4>
 80067c8:	40005000 	.word	0x40005000
 80067cc:	58024400 	.word	0x58024400
 80067d0:	58020400 	.word	0x58020400
 80067d4:	240017f4 	.word	0x240017f4
 80067d8:	40020088 	.word	0x40020088
 80067dc:	40007800 	.word	0x40007800
 80067e0:	58021000 	.word	0x58021000
 80067e4:	58020000 	.word	0x58020000
 80067e8:	2400186c 	.word	0x2400186c
 80067ec:	40020040 	.word	0x40020040
  else if(huart->Instance==UART8)
 80067f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a4e      	ldr	r2, [pc, #312]	; (8006938 <HAL_UART_MspInit+0x700>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	f040 8094 	bne.w	800692c <HAL_UART_MspInit+0x6f4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8006804:	f04f 0202 	mov.w	r2, #2
 8006808:	f04f 0300 	mov.w	r3, #0
 800680c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800681a:	4618      	mov	r0, r3
 800681c:	f007 f9a4 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_UART_MspInit+0x5f2>
      Error_Handler();
 8006826:	f7fb fba5 	bl	8001f74 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800682a:	4b44      	ldr	r3, [pc, #272]	; (800693c <HAL_UART_MspInit+0x704>)
 800682c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006830:	4a42      	ldr	r2, [pc, #264]	; (800693c <HAL_UART_MspInit+0x704>)
 8006832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006836:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800683a:	4b40      	ldr	r3, [pc, #256]	; (800693c <HAL_UART_MspInit+0x704>)
 800683c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006840:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006844:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006848:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006852:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006856:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006858:	4b38      	ldr	r3, [pc, #224]	; (800693c <HAL_UART_MspInit+0x704>)
 800685a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800685e:	4a37      	ldr	r2, [pc, #220]	; (800693c <HAL_UART_MspInit+0x704>)
 8006860:	f043 0310 	orr.w	r3, r3, #16
 8006864:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006868:	4b34      	ldr	r3, [pc, #208]	; (800693c <HAL_UART_MspInit+0x704>)
 800686a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800686e:	f003 0210 	and.w	r2, r3, #16
 8006872:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800687a:	601a      	str	r2, [r3, #0]
 800687c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006884:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006886:	2303      	movs	r3, #3
 8006888:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800688c:	2302      	movs	r3, #2
 800688e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006892:	2300      	movs	r3, #0
 8006894:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006898:	2300      	movs	r3, #0
 800689a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800689e:	2308      	movs	r3, #8
 80068a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80068a8:	4619      	mov	r1, r3
 80068aa:	4825      	ldr	r0, [pc, #148]	; (8006940 <HAL_UART_MspInit+0x708>)
 80068ac:	f005 fa84 	bl	800bdb8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream0;
 80068b0:	4b24      	ldr	r3, [pc, #144]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068b2:	4a25      	ldr	r2, [pc, #148]	; (8006948 <HAL_UART_MspInit+0x710>)
 80068b4:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80068b6:	4b23      	ldr	r3, [pc, #140]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068b8:	2251      	movs	r2, #81	; 0x51
 80068ba:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068bc:	4b21      	ldr	r3, [pc, #132]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068be:	2200      	movs	r2, #0
 80068c0:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068c2:	4b20      	ldr	r3, [pc, #128]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068c8:	4b1e      	ldr	r3, [pc, #120]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068ce:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068d0:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068d2:	2200      	movs	r2, #0
 80068d4:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068d6:	4b1b      	ldr	r3, [pc, #108]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068d8:	2200      	movs	r2, #0
 80068da:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068de:	2200      	movs	r2, #0
 80068e0:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068e2:	4b18      	ldr	r3, [pc, #96]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068e8:	4b16      	ldr	r3, [pc, #88]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80068ee:	4815      	ldr	r0, [pc, #84]	; (8006944 <HAL_UART_MspInit+0x70c>)
 80068f0:	f002 fc26 	bl	8009140 <HAL_DMA_Init>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_UART_MspInit+0x6c6>
      Error_Handler();
 80068fa:	f7fb fb3b 	bl	8001f74 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 80068fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006902:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a0e      	ldr	r2, [pc, #56]	; (8006944 <HAL_UART_MspInit+0x70c>)
 800690a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800690e:	4a0d      	ldr	r2, [pc, #52]	; (8006944 <HAL_UART_MspInit+0x70c>)
 8006910:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006914:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800691c:	2200      	movs	r2, #0
 800691e:	2100      	movs	r1, #0
 8006920:	2053      	movs	r0, #83	; 0x53
 8006922:	f002 fbd8 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8006926:	2053      	movs	r0, #83	; 0x53
 8006928:	f002 fbef 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 800692c:	bf00      	nop
 800692e:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40007c00 	.word	0x40007c00
 800693c:	58024400 	.word	0x58024400
 8006940:	58021000 	.word	0x58021000
 8006944:	240018e4 	.word	0x240018e4
 8006948:	40020010 	.word	0x40020010

0800694c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b0bc      	sub	sp, #240	; 0xf0
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006954:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006958:	2200      	movs	r2, #0
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	609a      	str	r2, [r3, #8]
 8006960:	60da      	str	r2, [r3, #12]
 8006962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006964:	f107 0318 	add.w	r3, r7, #24
 8006968:	22c0      	movs	r2, #192	; 0xc0
 800696a:	2100      	movs	r1, #0
 800696c:	4618      	mov	r0, r3
 800696e:	f00e fe85 	bl	801567c <memset>
  if(hqspi->Instance==QUADSPI)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a55      	ldr	r2, [pc, #340]	; (8006acc <HAL_QSPI_MspInit+0x180>)
 8006978:	4293      	cmp	r3, r2
 800697a:	f040 80a3 	bne.w	8006ac4 <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800697e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 800698a:	2300      	movs	r3, #0
 800698c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800698e:	f107 0318 	add.w	r3, r7, #24
 8006992:	4618      	mov	r0, r3
 8006994:	f007 f8e8 	bl	800db68 <HAL_RCCEx_PeriphCLKConfig>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800699e:	f7fb fae9 	bl	8001f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80069a2:	4b4b      	ldr	r3, [pc, #300]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80069a8:	4a49      	ldr	r2, [pc, #292]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069ae:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80069b2:	4b47      	ldr	r3, [pc, #284]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80069b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069bc:	617b      	str	r3, [r7, #20]
 80069be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069c0:	4b43      	ldr	r3, [pc, #268]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c6:	4a42      	ldr	r2, [pc, #264]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069c8:	f043 0310 	orr.w	r3, r3, #16
 80069cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069d0:	4b3f      	ldr	r3, [pc, #252]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d6:	f003 0310 	and.w	r3, r3, #16
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069de:	4b3c      	ldr	r3, [pc, #240]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e4:	4a3a      	ldr	r2, [pc, #232]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069ee:	4b38      	ldr	r3, [pc, #224]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069fc:	4b34      	ldr	r3, [pc, #208]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 80069fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a02:	4a33      	ldr	r2, [pc, #204]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 8006a04:	f043 0308 	orr.w	r3, r3, #8
 8006a08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a0c:	4b30      	ldr	r3, [pc, #192]	; (8006ad0 <HAL_QSPI_MspInit+0x184>)
 8006a0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	60bb      	str	r3, [r7, #8]
 8006a18:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a1a:	2304      	movs	r3, #4
 8006a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a20:	2302      	movs	r3, #2
 8006a22:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006a32:	2309      	movs	r3, #9
 8006a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a38:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4825      	ldr	r0, [pc, #148]	; (8006ad4 <HAL_QSPI_MspInit+0x188>)
 8006a40:	f005 f9ba 	bl	800bdb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a44:	2304      	movs	r3, #4
 8006a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a50:	2300      	movs	r3, #0
 8006a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006a5c:	2309      	movs	r3, #9
 8006a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a66:	4619      	mov	r1, r3
 8006a68:	481b      	ldr	r0, [pc, #108]	; (8006ad8 <HAL_QSPI_MspInit+0x18c>)
 8006a6a:	f005 f9a5 	bl	800bdb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8006a6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8006a72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a76:	2302      	movs	r3, #2
 8006a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a82:	2300      	movs	r3, #0
 8006a84:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8006a88:	2309      	movs	r3, #9
 8006a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a8e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006a92:	4619      	mov	r1, r3
 8006a94:	4811      	ldr	r0, [pc, #68]	; (8006adc <HAL_QSPI_MspInit+0x190>)
 8006a96:	f005 f98f 	bl	800bdb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a9a:	2340      	movs	r3, #64	; 0x40
 8006a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ab8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006abc:	4619      	mov	r1, r3
 8006abe:	4806      	ldr	r0, [pc, #24]	; (8006ad8 <HAL_QSPI_MspInit+0x18c>)
 8006ac0:	f005 f97a 	bl	800bdb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8006ac4:	bf00      	nop
 8006ac6:	37f0      	adds	r7, #240	; 0xf0
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	52005000 	.word	0x52005000
 8006ad0:	58024400 	.word	0x58024400
 8006ad4:	58021000 	.word	0x58021000
 8006ad8:	58020400 	.word	0x58020400
 8006adc:	58020c00 	.word	0x58020c00

08006ae0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b090      	sub	sp, #64	; 0x40
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006aec:	2200      	movs	r2, #0
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	605a      	str	r2, [r3, #4]
 8006af2:	609a      	str	r2, [r3, #8]
 8006af4:	60da      	str	r2, [r3, #12]
 8006af6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b00:	d10f      	bne.n	8006b22 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006b02:	4b6d      	ldr	r3, [pc, #436]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b08:	4a6b      	ldr	r2, [pc, #428]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b0a:	f043 0301 	orr.w	r3, r3, #1
 8006b0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b12:	4b69      	ldr	r3, [pc, #420]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8006b20:	e0c5      	b.n	8006cae <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM3)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a65      	ldr	r2, [pc, #404]	; (8006cbc <HAL_TIM_Base_MspInit+0x1dc>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d10f      	bne.n	8006b4c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b2c:	4b62      	ldr	r3, [pc, #392]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b32:	4a61      	ldr	r2, [pc, #388]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b34:	f043 0302 	orr.w	r3, r3, #2
 8006b38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b3c:	4b5e      	ldr	r3, [pc, #376]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b4a:	e0b0      	b.n	8006cae <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM5)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a5b      	ldr	r2, [pc, #364]	; (8006cc0 <HAL_TIM_Base_MspInit+0x1e0>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d136      	bne.n	8006bc4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b56:	4b58      	ldr	r3, [pc, #352]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b5c:	4a56      	ldr	r2, [pc, #344]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b5e:	f043 0308 	orr.w	r3, r3, #8
 8006b62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b66:	4b54      	ldr	r3, [pc, #336]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b74:	4b50      	ldr	r3, [pc, #320]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b7a:	4a4f      	ldr	r2, [pc, #316]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b7c:	f043 0301 	orr.w	r3, r3, #1
 8006b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b84:	4b4c      	ldr	r3, [pc, #304]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006b92:	2301      	movs	r3, #1
 8006b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b96:	2302      	movs	r3, #2
 8006b98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006baa:	4619      	mov	r1, r3
 8006bac:	4845      	ldr	r0, [pc, #276]	; (8006cc4 <HAL_TIM_Base_MspInit+0x1e4>)
 8006bae:	f005 f903 	bl	800bdb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2100      	movs	r1, #0
 8006bb6:	2032      	movs	r0, #50	; 0x32
 8006bb8:	f002 fa8d 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006bbc:	2032      	movs	r0, #50	; 0x32
 8006bbe:	f002 faa4 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 8006bc2:	e074      	b.n	8006cae <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM6)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a3f      	ldr	r2, [pc, #252]	; (8006cc8 <HAL_TIM_Base_MspInit+0x1e8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d117      	bne.n	8006bfe <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006bce:	4b3a      	ldr	r3, [pc, #232]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bd4:	4a38      	ldr	r2, [pc, #224]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006bd6:	f043 0310 	orr.w	r3, r3, #16
 8006bda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bde:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006be4:	f003 0310 	and.w	r3, r3, #16
 8006be8:	61bb      	str	r3, [r7, #24]
 8006bea:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8006bec:	2200      	movs	r2, #0
 8006bee:	2100      	movs	r1, #0
 8006bf0:	2036      	movs	r0, #54	; 0x36
 8006bf2:	f002 fa70 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006bf6:	2036      	movs	r0, #54	; 0x36
 8006bf8:	f002 fa87 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 8006bfc:	e057      	b.n	8006cae <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM15)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a32      	ldr	r2, [pc, #200]	; (8006ccc <HAL_TIM_Base_MspInit+0x1ec>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d136      	bne.n	8006c76 <HAL_TIM_Base_MspInit+0x196>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006c08:	4b2b      	ldr	r3, [pc, #172]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c0e:	4a2a      	ldr	r2, [pc, #168]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c14:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c18:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c22:	617b      	str	r3, [r7, #20]
 8006c24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c26:	4b24      	ldr	r3, [pc, #144]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c2c:	4a22      	ldr	r2, [pc, #136]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c2e:	f043 0310 	orr.w	r3, r3, #16
 8006c32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006c36:	4b20      	ldr	r3, [pc, #128]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c3c:	f003 0310 	and.w	r3, r3, #16
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006c44:	2320      	movs	r3, #32
 8006c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c50:	2300      	movs	r3, #0
 8006c52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006c54:	2304      	movs	r3, #4
 8006c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	481c      	ldr	r0, [pc, #112]	; (8006cd0 <HAL_TIM_Base_MspInit+0x1f0>)
 8006c60:	f005 f8aa 	bl	800bdb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8006c64:	2200      	movs	r2, #0
 8006c66:	2100      	movs	r1, #0
 8006c68:	2074      	movs	r0, #116	; 0x74
 8006c6a:	f002 fa34 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8006c6e:	2074      	movs	r0, #116	; 0x74
 8006c70:	f002 fa4b 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 8006c74:	e01b      	b.n	8006cae <HAL_TIM_Base_MspInit+0x1ce>
  else if(htim_base->Instance==TIM16)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <HAL_TIM_Base_MspInit+0x1f4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d116      	bne.n	8006cae <HAL_TIM_Base_MspInit+0x1ce>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c80:	4b0d      	ldr	r3, [pc, #52]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c86:	4a0c      	ldr	r2, [pc, #48]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c90:	4b09      	ldr	r3, [pc, #36]	; (8006cb8 <HAL_TIM_Base_MspInit+0x1d8>)
 8006c92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9a:	60fb      	str	r3, [r7, #12]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	2075      	movs	r0, #117	; 0x75
 8006ca4:	f002 fa17 	bl	80090d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8006ca8:	2075      	movs	r0, #117	; 0x75
 8006caa:	f002 fa2e 	bl	800910a <HAL_NVIC_EnableIRQ>
}
 8006cae:	bf00      	nop
 8006cb0:	3740      	adds	r7, #64	; 0x40
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	58024400 	.word	0x58024400
 8006cbc:	40000400 	.word	0x40000400
 8006cc0:	40000c00 	.word	0x40000c00
 8006cc4:	58020000 	.word	0x58020000
 8006cc8:	40001000 	.word	0x40001000
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	58021000 	.word	0x58021000
 8006cd4:	40014400 	.word	0x40014400

08006cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	; 0x28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ce0:	f107 0314 	add.w	r3, r7, #20
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
 8006ce8:	605a      	str	r2, [r3, #4]
 8006cea:	609a      	str	r2, [r3, #8]
 8006cec:	60da      	str	r2, [r3, #12]
 8006cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf8:	d120      	bne.n	8006d3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006cfa:	4b24      	ldr	r3, [pc, #144]	; (8006d8c <HAL_TIM_MspPostInit+0xb4>)
 8006cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d00:	4a22      	ldr	r2, [pc, #136]	; (8006d8c <HAL_TIM_MspPostInit+0xb4>)
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d0a:	4b20      	ldr	r3, [pc, #128]	; (8006d8c <HAL_TIM_MspPostInit+0xb4>)
 8006d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d10:	f003 0301 	and.w	r3, r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15 (JTDI)     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8006d18:	f248 030e 	movw	r3, #32782	; 0x800e
 8006d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d1e:	2302      	movs	r3, #2
 8006d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d22:	2300      	movs	r3, #0
 8006d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d26:	2300      	movs	r3, #0
 8006d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d2e:	f107 0314 	add.w	r3, r7, #20
 8006d32:	4619      	mov	r1, r3
 8006d34:	4816      	ldr	r0, [pc, #88]	; (8006d90 <HAL_TIM_MspPostInit+0xb8>)
 8006d36:	f005 f83f 	bl	800bdb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006d3a:	e023      	b.n	8006d84 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM3)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a14      	ldr	r2, [pc, #80]	; (8006d94 <HAL_TIM_MspPostInit+0xbc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d11e      	bne.n	8006d84 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d46:	4b11      	ldr	r3, [pc, #68]	; (8006d8c <HAL_TIM_MspPostInit+0xb4>)
 8006d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d4c:	4a0f      	ldr	r2, [pc, #60]	; (8006d8c <HAL_TIM_MspPostInit+0xb4>)
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d56:	4b0d      	ldr	r3, [pc, #52]	; (8006d8c <HAL_TIM_MspPostInit+0xb4>)
 8006d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d5c:	f003 0304 	and.w	r3, r3, #4
 8006d60:	60fb      	str	r3, [r7, #12]
 8006d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d64:	23c0      	movs	r3, #192	; 0xc0
 8006d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d68:	2302      	movs	r3, #2
 8006d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d70:	2300      	movs	r3, #0
 8006d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d74:	2302      	movs	r3, #2
 8006d76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d78:	f107 0314 	add.w	r3, r7, #20
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	4806      	ldr	r0, [pc, #24]	; (8006d98 <HAL_TIM_MspPostInit+0xc0>)
 8006d80:	f005 f81a 	bl	800bdb8 <HAL_GPIO_Init>
}
 8006d84:	bf00      	nop
 8006d86:	3728      	adds	r7, #40	; 0x28
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	58020000 	.word	0x58020000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	58020800 	.word	0x58020800

08006d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006da0:	e7fe      	b.n	8006da0 <NMI_Handler+0x4>

08006da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006da2:	b480      	push	{r7}
 8006da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006da6:	e7fe      	b.n	8006da6 <HardFault_Handler+0x4>

08006da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dac:	e7fe      	b.n	8006dac <MemManage_Handler+0x4>

08006dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dae:	b480      	push	{r7}
 8006db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006db2:	e7fe      	b.n	8006db2 <BusFault_Handler+0x4>

08006db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006db8:	e7fe      	b.n	8006db8 <UsageFault_Handler+0x4>

08006dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006dbe:	bf00      	nop
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006dcc:	bf00      	nop
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006dda:	bf00      	nop
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006de8:	f000 faca 	bl	8007380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006dec:	bf00      	nop
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8006df4:	4802      	ldr	r0, [pc, #8]	; (8006e00 <DMA1_Stream0_IRQHandler+0x10>)
 8006df6:	f003 fccd 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8006dfa:	bf00      	nop
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	240018e4 	.word	0x240018e4

08006e04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006e08:	4802      	ldr	r0, [pc, #8]	; (8006e14 <DMA1_Stream1_IRQHandler+0x10>)
 8006e0a:	f003 fcc3 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006e0e:	bf00      	nop
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	24001320 	.word	0x24001320

08006e18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 8006e1c:	4802      	ldr	r0, [pc, #8]	; (8006e28 <DMA1_Stream2_IRQHandler+0x10>)
 8006e1e:	f003 fcb9 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	2400186c 	.word	0x2400186c

08006e2c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8006e30:	4802      	ldr	r0, [pc, #8]	; (8006e3c <DMA1_Stream3_IRQHandler+0x10>)
 8006e32:	f003 fcaf 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	24001704 	.word	0x24001704

08006e40 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006e44:	4802      	ldr	r0, [pc, #8]	; (8006e50 <DMA1_Stream4_IRQHandler+0x10>)
 8006e46:	f003 fca5 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006e4a:	bf00      	nop
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	2400177c 	.word	0x2400177c

08006e54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006e58:	4802      	ldr	r0, [pc, #8]	; (8006e64 <DMA1_Stream5_IRQHandler+0x10>)
 8006e5a:	f003 fc9b 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8006e5e:	bf00      	nop
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	240017f4 	.word	0x240017f4

08006e68 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006e6c:	4802      	ldr	r0, [pc, #8]	; (8006e78 <ADC_IRQHandler+0x10>)
 8006e6e:	f000 ff45 	bl	8007cfc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006e72:	bf00      	nop
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	240012bc 	.word	0x240012bc

08006e7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PID_MODE_INPUT_Pin);
 8006e80:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006e84:	f005 f993 	bl	800c1ae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8006e88:	bf00      	nop
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006e90:	4802      	ldr	r0, [pc, #8]	; (8006e9c <TIM5_IRQHandler+0x10>)
 8006e92:	f00a f85d 	bl	8010f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8006e96:	bf00      	nop
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	24001a40 	.word	0x24001a40

08006ea0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8006ea4:	4802      	ldr	r0, [pc, #8]	; (8006eb0 <UART4_IRQHandler+0x10>)
 8006ea6:	f00b fd5d 	bl	8012964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006eaa:	bf00      	nop
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	2400143c 	.word	0x2400143c

08006eb4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006eb8:	4802      	ldr	r0, [pc, #8]	; (8006ec4 <UART5_IRQHandler+0x10>)
 8006eba:	f00b fd53 	bl	8012964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006ebe:	bf00      	nop
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	240014d0 	.word	0x240014d0

08006ec8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006ecc:	4802      	ldr	r0, [pc, #8]	; (8006ed8 <TIM6_DAC_IRQHandler+0x10>)
 8006ece:	f00a f83f 	bl	8010f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006ed2:	bf00      	nop
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	24001a8c 	.word	0x24001a8c

08006edc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8006ee0:	4802      	ldr	r0, [pc, #8]	; (8006eec <UART7_IRQHandler+0x10>)
 8006ee2:	f00b fd3f 	bl	8012964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8006ee6:	bf00      	nop
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	24001564 	.word	0x24001564

08006ef0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006ef4:	4802      	ldr	r0, [pc, #8]	; (8006f00 <UART8_IRQHandler+0x10>)
 8006ef6:	f00b fd35 	bl	8012964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	240015f8 	.word	0x240015f8

08006f04 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8006f08:	4802      	ldr	r0, [pc, #8]	; (8006f14 <TIM15_IRQHandler+0x10>)
 8006f0a:	f00a f821 	bl	8010f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	24001ad8 	.word	0x24001ad8

08006f18 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8006f1c:	4802      	ldr	r0, [pc, #8]	; (8006f28 <TIM16_IRQHandler+0x10>)
 8006f1e:	f00a f817 	bl	8010f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8006f22:	bf00      	nop
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	24001b24 	.word	0x24001b24

08006f2c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8006f30:	4802      	ldr	r0, [pc, #8]	; (8006f3c <BDMA_Channel0_IRQHandler+0x10>)
 8006f32:	f003 fc2f 	bl	800a794 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8006f36:	bf00      	nop
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	2400168c 	.word	0x2400168c

08006f40 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8006f44:	4802      	ldr	r0, [pc, #8]	; (8006f50 <LPUART1_IRQHandler+0x10>)
 8006f46:	f00b fd0d 	bl	8012964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006f4a:	bf00      	nop
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	240013a8 	.word	0x240013a8

08006f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  return 1;
 8006f58:	2301      	movs	r3, #1
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <_kill>:

int _kill(int pid, int sig)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006f6e:	f00e fc2b 	bl	80157c8 <__errno>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2216      	movs	r2, #22
 8006f76:	601a      	str	r2, [r3, #0]
  return -1;
 8006f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <_exit>:

void _exit (int status)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7ff ffe7 	bl	8006f64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006f96:	e7fe      	b.n	8006f96 <_exit+0x12>

08006f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]
 8006fa8:	e00a      	b.n	8006fc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006faa:	f3af 8000 	nop.w
 8006fae:	4601      	mov	r1, r0
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	1c5a      	adds	r2, r3, #1
 8006fb4:	60ba      	str	r2, [r7, #8]
 8006fb6:	b2ca      	uxtb	r2, r1
 8006fb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	dbf0      	blt.n	8006faa <_read+0x12>
  }

  return len;
 8006fc8:	687b      	ldr	r3, [r7, #4]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	60b9      	str	r1, [r7, #8]
 8006fdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e009      	b.n	8006ff8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	1c5a      	adds	r2, r3, #1
 8006fe8:	60ba      	str	r2, [r7, #8]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fa f867 	bl	80010c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	617b      	str	r3, [r7, #20]
 8006ff8:	697a      	ldr	r2, [r7, #20]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	dbf1      	blt.n	8006fe4 <_write+0x12>
  }
  return len;
 8007000:	687b      	ldr	r3, [r7, #4]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}

0800700a <_close>:

int _close(int file)
{
 800700a:	b480      	push	{r7}
 800700c:	b083      	sub	sp, #12
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007016:	4618      	mov	r0, r3
 8007018:	370c      	adds	r7, #12
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007022:	b480      	push	{r7}
 8007024:	b083      	sub	sp, #12
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007032:	605a      	str	r2, [r3, #4]
  return 0;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <_isatty>:

int _isatty(int file)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800704a:	2301      	movs	r3, #1
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
	...

08007074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800707c:	4a14      	ldr	r2, [pc, #80]	; (80070d0 <_sbrk+0x5c>)
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <_sbrk+0x60>)
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007088:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <_sbrk+0x64>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007090:	4b11      	ldr	r3, [pc, #68]	; (80070d8 <_sbrk+0x64>)
 8007092:	4a12      	ldr	r2, [pc, #72]	; (80070dc <_sbrk+0x68>)
 8007094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007096:	4b10      	ldr	r3, [pc, #64]	; (80070d8 <_sbrk+0x64>)
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d207      	bcs.n	80070b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80070a4:	f00e fb90 	bl	80157c8 <__errno>
 80070a8:	4603      	mov	r3, r0
 80070aa:	220c      	movs	r2, #12
 80070ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070b2:	e009      	b.n	80070c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80070b4:	4b08      	ldr	r3, [pc, #32]	; (80070d8 <_sbrk+0x64>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80070ba:	4b07      	ldr	r3, [pc, #28]	; (80070d8 <_sbrk+0x64>)
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4413      	add	r3, r2
 80070c2:	4a05      	ldr	r2, [pc, #20]	; (80070d8 <_sbrk+0x64>)
 80070c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	24080000 	.word	0x24080000
 80070d4:	00000400 	.word	0x00000400
 80070d8:	24004644 	.word	0x24004644
 80070dc:	240047a0 	.word	0x240047a0

080070e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80070e0:	b480      	push	{r7}
 80070e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80070e4:	4b37      	ldr	r3, [pc, #220]	; (80071c4 <SystemInit+0xe4>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	4a36      	ldr	r2, [pc, #216]	; (80071c4 <SystemInit+0xe4>)
 80070ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80070f4:	4b34      	ldr	r3, [pc, #208]	; (80071c8 <SystemInit+0xe8>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	2b06      	cmp	r3, #6
 80070fe:	d807      	bhi.n	8007110 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007100:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <SystemInit+0xe8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f023 030f 	bic.w	r3, r3, #15
 8007108:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <SystemInit+0xe8>)
 800710a:	f043 0307 	orr.w	r3, r3, #7
 800710e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007110:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <SystemInit+0xec>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2d      	ldr	r2, [pc, #180]	; (80071cc <SystemInit+0xec>)
 8007116:	f043 0301 	orr.w	r3, r3, #1
 800711a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800711c:	4b2b      	ldr	r3, [pc, #172]	; (80071cc <SystemInit+0xec>)
 800711e:	2200      	movs	r2, #0
 8007120:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007122:	4b2a      	ldr	r3, [pc, #168]	; (80071cc <SystemInit+0xec>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4929      	ldr	r1, [pc, #164]	; (80071cc <SystemInit+0xec>)
 8007128:	4b29      	ldr	r3, [pc, #164]	; (80071d0 <SystemInit+0xf0>)
 800712a:	4013      	ands	r3, r2
 800712c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <SystemInit+0xe8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0308 	and.w	r3, r3, #8
 8007136:	2b00      	cmp	r3, #0
 8007138:	d007      	beq.n	800714a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <SystemInit+0xe8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 030f 	bic.w	r3, r3, #15
 8007142:	4a21      	ldr	r2, [pc, #132]	; (80071c8 <SystemInit+0xe8>)
 8007144:	f043 0307 	orr.w	r3, r3, #7
 8007148:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800714a:	4b20      	ldr	r3, [pc, #128]	; (80071cc <SystemInit+0xec>)
 800714c:	2200      	movs	r2, #0
 800714e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8007150:	4b1e      	ldr	r3, [pc, #120]	; (80071cc <SystemInit+0xec>)
 8007152:	2200      	movs	r2, #0
 8007154:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8007156:	4b1d      	ldr	r3, [pc, #116]	; (80071cc <SystemInit+0xec>)
 8007158:	2200      	movs	r2, #0
 800715a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800715c:	4b1b      	ldr	r3, [pc, #108]	; (80071cc <SystemInit+0xec>)
 800715e:	4a1d      	ldr	r2, [pc, #116]	; (80071d4 <SystemInit+0xf4>)
 8007160:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8007162:	4b1a      	ldr	r3, [pc, #104]	; (80071cc <SystemInit+0xec>)
 8007164:	4a1c      	ldr	r2, [pc, #112]	; (80071d8 <SystemInit+0xf8>)
 8007166:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8007168:	4b18      	ldr	r3, [pc, #96]	; (80071cc <SystemInit+0xec>)
 800716a:	4a1c      	ldr	r2, [pc, #112]	; (80071dc <SystemInit+0xfc>)
 800716c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800716e:	4b17      	ldr	r3, [pc, #92]	; (80071cc <SystemInit+0xec>)
 8007170:	2200      	movs	r2, #0
 8007172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007174:	4b15      	ldr	r3, [pc, #84]	; (80071cc <SystemInit+0xec>)
 8007176:	4a19      	ldr	r2, [pc, #100]	; (80071dc <SystemInit+0xfc>)
 8007178:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800717a:	4b14      	ldr	r3, [pc, #80]	; (80071cc <SystemInit+0xec>)
 800717c:	2200      	movs	r2, #0
 800717e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007180:	4b12      	ldr	r3, [pc, #72]	; (80071cc <SystemInit+0xec>)
 8007182:	4a16      	ldr	r2, [pc, #88]	; (80071dc <SystemInit+0xfc>)
 8007184:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007186:	4b11      	ldr	r3, [pc, #68]	; (80071cc <SystemInit+0xec>)
 8007188:	2200      	movs	r2, #0
 800718a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <SystemInit+0xec>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a0e      	ldr	r2, [pc, #56]	; (80071cc <SystemInit+0xec>)
 8007192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007196:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007198:	4b0c      	ldr	r3, [pc, #48]	; (80071cc <SystemInit+0xec>)
 800719a:	2200      	movs	r2, #0
 800719c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800719e:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <SystemInit+0x100>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	4b10      	ldr	r3, [pc, #64]	; (80071e4 <SystemInit+0x104>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071aa:	d202      	bcs.n	80071b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80071ac:	4b0e      	ldr	r3, [pc, #56]	; (80071e8 <SystemInit+0x108>)
 80071ae:	2201      	movs	r2, #1
 80071b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80071b2:	4b0e      	ldr	r3, [pc, #56]	; (80071ec <SystemInit+0x10c>)
 80071b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80071b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	e000ed00 	.word	0xe000ed00
 80071c8:	52002000 	.word	0x52002000
 80071cc:	58024400 	.word	0x58024400
 80071d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80071d4:	02020200 	.word	0x02020200
 80071d8:	01ff0000 	.word	0x01ff0000
 80071dc:	01010280 	.word	0x01010280
 80071e0:	5c001000 	.word	0x5c001000
 80071e4:	ffff0000 	.word	0xffff0000
 80071e8:	51008108 	.word	0x51008108
 80071ec:	52004000 	.word	0x52004000

080071f0 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	0a5a      	lsrs	r2, r3, #9
 8007200:	490f      	ldr	r1, [pc, #60]	; (8007240 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8007202:	fba1 1202 	umull	r1, r2, r1, r2
 8007206:	09d2      	lsrs	r2, r2, #7
 8007208:	490e      	ldr	r1, [pc, #56]	; (8007244 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800720a:	fb01 f202 	mul.w	r2, r1, r2
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	0a5b      	lsrs	r3, r3, #9
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800721a:	fba2 2303 	umull	r2, r3, r2, r3
 800721e:	09db      	lsrs	r3, r3, #7
 8007220:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	441a      	add	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	00044b83 	.word	0x00044b83
 8007244:	3b9aca00 	.word	0x3b9aca00

08007248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007280 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800724c:	f7ff ff48 	bl	80070e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007250:	480c      	ldr	r0, [pc, #48]	; (8007284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007252:	490d      	ldr	r1, [pc, #52]	; (8007288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007254:	4a0d      	ldr	r2, [pc, #52]	; (800728c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007258:	e002      	b.n	8007260 <LoopCopyDataInit>

0800725a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800725a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800725c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800725e:	3304      	adds	r3, #4

08007260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007264:	d3f9      	bcc.n	800725a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007266:	4a0a      	ldr	r2, [pc, #40]	; (8007290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007268:	4c0a      	ldr	r4, [pc, #40]	; (8007294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800726a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800726c:	e001      	b.n	8007272 <LoopFillZerobss>

0800726e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800726e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007270:	3204      	adds	r2, #4

08007272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007274:	d3fb      	bcc.n	800726e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007276:	f00e faad 	bl	80157d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800727a:	f7f9 ff33 	bl	80010e4 <main>
  bx  lr
 800727e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007280:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007284:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007288:	2400021c 	.word	0x2400021c
  ldr r2, =_sidata
 800728c:	08017a94 	.word	0x08017a94
  ldr r2, =_sbss
 8007290:	2400021c 	.word	0x2400021c
  ldr r4, =_ebss
 8007294:	2400479c 	.word	0x2400479c

08007298 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007298:	e7fe      	b.n	8007298 <ADC3_IRQHandler>
	...

0800729c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072a2:	2003      	movs	r0, #3
 80072a4:	f001 ff0c 	bl	80090c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80072a8:	f006 fa88 	bl	800d7bc <HAL_RCC_GetSysClockFreq>
 80072ac:	4602      	mov	r2, r0
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <HAL_Init+0x68>)
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	0a1b      	lsrs	r3, r3, #8
 80072b4:	f003 030f 	and.w	r3, r3, #15
 80072b8:	4913      	ldr	r1, [pc, #76]	; (8007308 <HAL_Init+0x6c>)
 80072ba:	5ccb      	ldrb	r3, [r1, r3]
 80072bc:	f003 031f 	and.w	r3, r3, #31
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
 80072c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <HAL_Init+0x68>)
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	4a0e      	ldr	r2, [pc, #56]	; (8007308 <HAL_Init+0x6c>)
 80072d0:	5cd3      	ldrb	r3, [r2, r3]
 80072d2:	f003 031f 	and.w	r3, r3, #31
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	fa22 f303 	lsr.w	r3, r2, r3
 80072dc:	4a0b      	ldr	r2, [pc, #44]	; (800730c <HAL_Init+0x70>)
 80072de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072e0:	4a0b      	ldr	r2, [pc, #44]	; (8007310 <HAL_Init+0x74>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80072e6:	200f      	movs	r0, #15
 80072e8:	f000 f814 	bl	8007314 <HAL_InitTick>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e002      	b.n	80072fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80072f6:	f7fe fe93 	bl	8006020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	58024400 	.word	0x58024400
 8007308:	080176c8 	.word	0x080176c8
 800730c:	24000048 	.word	0x24000048
 8007310:	24000044 	.word	0x24000044

08007314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b082      	sub	sp, #8
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800731c:	4b15      	ldr	r3, [pc, #84]	; (8007374 <HAL_InitTick+0x60>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e021      	b.n	800736c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007328:	4b13      	ldr	r3, [pc, #76]	; (8007378 <HAL_InitTick+0x64>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <HAL_InitTick+0x60>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	4619      	mov	r1, r3
 8007332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007336:	fbb3 f3f1 	udiv	r3, r3, r1
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fef1 	bl	8009126 <HAL_SYSTICK_Config>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e00e      	b.n	800736c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b0f      	cmp	r3, #15
 8007352:	d80a      	bhi.n	800736a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007354:	2200      	movs	r2, #0
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800735c:	f001 febb 	bl	80090d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007360:	4a06      	ldr	r2, [pc, #24]	; (800737c <HAL_InitTick+0x68>)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	e000      	b.n	800736c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
}
 800736c:	4618      	mov	r0, r3
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	24000050 	.word	0x24000050
 8007378:	24000044 	.word	0x24000044
 800737c:	2400004c 	.word	0x2400004c

08007380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <HAL_IncTick+0x20>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	461a      	mov	r2, r3
 800738a:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <HAL_IncTick+0x24>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4413      	add	r3, r2
 8007390:	4a04      	ldr	r2, [pc, #16]	; (80073a4 <HAL_IncTick+0x24>)
 8007392:	6013      	str	r3, [r2, #0]
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	24000050 	.word	0x24000050
 80073a4:	24004648 	.word	0x24004648

080073a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  return uwTick;
 80073ac:	4b03      	ldr	r3, [pc, #12]	; (80073bc <HAL_GetTick+0x14>)
 80073ae:	681b      	ldr	r3, [r3, #0]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	24004648 	.word	0x24004648

080073c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80073c8:	f7ff ffee 	bl	80073a8 <HAL_GetTick>
 80073cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073d8:	d005      	beq.n	80073e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80073da:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <HAL_Delay+0x44>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80073e6:	bf00      	nop
 80073e8:	f7ff ffde 	bl	80073a8 <HAL_GetTick>
 80073ec:	4602      	mov	r2, r0
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d8f7      	bhi.n	80073e8 <HAL_Delay+0x28>
  {
  }
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	24000050 	.word	0x24000050

08007408 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800740c:	4b03      	ldr	r3, [pc, #12]	; (800741c <HAL_GetREVID+0x14>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	0c1b      	lsrs	r3, r3, #16
}
 8007412:	4618      	mov	r0, r3
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	5c001000 	.word	0x5c001000

08007420 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	609a      	str	r2, [r3, #8]
}
 800743a:	bf00      	nop
 800743c:	370c      	adds	r7, #12
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	609a      	str	r2, [r3, #8]
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800747c:	4618      	mov	r0, r3
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007488:	b480      	push	{r7}
 800748a:	b087      	sub	sp, #28
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3360      	adds	r3, #96	; 0x60
 800749a:	461a      	mov	r2, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	430b      	orrs	r3, r1
 80074b6:	431a      	orrs	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80074bc:	bf00      	nop
 80074be:	371c      	adds	r7, #28
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	f003 031f 	and.w	r3, r3, #31
 80074e2:	6879      	ldr	r1, [r7, #4]
 80074e4:	fa01 f303 	lsl.w	r3, r1, r3
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	611a      	str	r2, [r3, #16]
}
 80074ee:	bf00      	nop
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b087      	sub	sp, #28
 80074fe:	af00      	add	r7, sp, #0
 8007500:	60f8      	str	r0, [r7, #12]
 8007502:	60b9      	str	r1, [r7, #8]
 8007504:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3360      	adds	r3, #96	; 0x60
 800750a:	461a      	mov	r2, r3
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	431a      	orrs	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	601a      	str	r2, [r3, #0]
  }
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007544:	2301      	movs	r3, #1
 8007546:	e000      	b.n	800754a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	370c      	adds	r7, #12
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr

08007556 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007556:	b480      	push	{r7}
 8007558:	b087      	sub	sp, #28
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	3330      	adds	r3, #48	; 0x30
 8007566:	461a      	mov	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	f003 030c 	and.w	r3, r3, #12
 8007572:	4413      	add	r3, r2
 8007574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	f003 031f 	and.w	r3, r3, #31
 8007580:	211f      	movs	r1, #31
 8007582:	fa01 f303 	lsl.w	r3, r1, r3
 8007586:	43db      	mvns	r3, r3
 8007588:	401a      	ands	r2, r3
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	0e9b      	lsrs	r3, r3, #26
 800758e:	f003 011f 	and.w	r1, r3, #31
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f003 031f 	and.w	r3, r3, #31
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	431a      	orrs	r2, r3
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80075a2:	bf00      	nop
 80075a4:	371c      	adds	r7, #28
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	f023 0203 	bic.w	r2, r3, #3
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	431a      	orrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	60da      	str	r2, [r3, #12]
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e0:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d101      	bne.n	80075ec <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e000      	b.n	80075ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	370c      	adds	r7, #12
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b087      	sub	sp, #28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3314      	adds	r3, #20
 800760a:	461a      	mov	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	0e5b      	lsrs	r3, r3, #25
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	f003 0304 	and.w	r3, r3, #4
 8007616:	4413      	add	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	0d1b      	lsrs	r3, r3, #20
 8007622:	f003 031f 	and.w	r3, r3, #31
 8007626:	2107      	movs	r1, #7
 8007628:	fa01 f303 	lsl.w	r3, r1, r3
 800762c:	43db      	mvns	r3, r3
 800762e:	401a      	ands	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	0d1b      	lsrs	r3, r3, #20
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	fa01 f303 	lsl.w	r3, r1, r3
 800763e:	431a      	orrs	r2, r3
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007644:	bf00      	nop
 8007646:	371c      	adds	r7, #28
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007668:	43db      	mvns	r3, r3
 800766a:	401a      	ands	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f003 0318 	and.w	r3, r3, #24
 8007672:	4908      	ldr	r1, [pc, #32]	; (8007694 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007674:	40d9      	lsrs	r1, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	400b      	ands	r3, r1
 800767a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800767e:	431a      	orrs	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	000fffff 	.word	0x000fffff

08007698 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 031f 	and.w	r3, r3, #31
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80076de:	4013      	ands	r3, r2
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	6093      	str	r3, [r2, #8]
}
 80076e4:	bf00      	nop
 80076e6:	370c      	adds	r7, #12
 80076e8:	46bd      	mov	sp, r7
 80076ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ee:	4770      	bx	lr
 80076f0:	5fffffc0 	.word	0x5fffffc0

080076f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007708:	d101      	bne.n	800770e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800770a:	2301      	movs	r3, #1
 800770c:	e000      	b.n	8007710 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	4b05      	ldr	r3, [pc, #20]	; (8007740 <LL_ADC_EnableInternalRegulator+0x24>)
 800772a:	4013      	ands	r3, r2
 800772c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	6fffffc0 	.word	0x6fffffc0

08007744 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007758:	d101      	bne.n	800775e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800776c:	b480      	push	{r7}
 800776e:	b083      	sub	sp, #12
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689a      	ldr	r2, [r3, #8]
 8007778:	4b05      	ldr	r3, [pc, #20]	; (8007790 <LL_ADC_Enable+0x24>)
 800777a:	4013      	ands	r3, r2
 800777c:	f043 0201 	orr.w	r2, r3, #1
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	7fffffc0 	.word	0x7fffffc0

08007794 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007794:	b480      	push	{r7}
 8007796:	b083      	sub	sp, #12
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <LL_ADC_IsEnabled+0x18>
 80077a8:	2301      	movs	r3, #1
 80077aa:	e000      	b.n	80077ae <LL_ADC_IsEnabled+0x1a>
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr
	...

080077bc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <LL_ADC_REG_StartConversion+0x24>)
 80077ca:	4013      	ands	r3, r2
 80077cc:	f043 0204 	orr.w	r2, r3, #4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr
 80077e0:	7fffffc0 	.word	0x7fffffc0

080077e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	f003 0304 	and.w	r3, r3, #4
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d101      	bne.n	80077fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800780a:	b480      	push	{r7}
 800780c:	b083      	sub	sp, #12
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 0308 	and.w	r3, r3, #8
 800781a:	2b08      	cmp	r3, #8
 800781c:	d101      	bne.n	8007822 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007830:	b590      	push	{r4, r7, lr}
 8007832:	b089      	sub	sp, #36	; 0x24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800783c:	2300      	movs	r3, #0
 800783e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007846:	2301      	movs	r3, #1
 8007848:	e18f      	b.n	8007b6a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f7fe fbfb 	bl	8006054 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4618      	mov	r0, r3
 8007872:	f7ff ff3f 	bl	80076f4 <LL_ADC_IsDeepPowerDownEnabled>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff ff25 	bl	80076d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff ff5a 	bl	8007744 <LL_ADC_IsInternalRegulatorEnabled>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d114      	bne.n	80078c0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff ff3e 	bl	800771c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80078a0:	4b87      	ldr	r3, [pc, #540]	; (8007ac0 <HAL_ADC_Init+0x290>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	099b      	lsrs	r3, r3, #6
 80078a6:	4a87      	ldr	r2, [pc, #540]	; (8007ac4 <HAL_ADC_Init+0x294>)
 80078a8:	fba2 2303 	umull	r2, r3, r2, r3
 80078ac:	099b      	lsrs	r3, r3, #6
 80078ae:	3301      	adds	r3, #1
 80078b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80078b2:	e002      	b.n	80078ba <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f9      	bne.n	80078b4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff ff3d 	bl	8007744 <LL_ADC_IsInternalRegulatorEnabled>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10d      	bne.n	80078ec <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	f043 0210 	orr.w	r2, r3, #16
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e0:	f043 0201 	orr.w	r2, r3, #1
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff ff77 	bl	80077e4 <LL_ADC_REG_IsConversionOngoing>
 80078f6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	f040 8129 	bne.w	8007b58 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	f040 8125 	bne.w	8007b58 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007912:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007916:	f043 0202 	orr.w	r2, r3, #2
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4618      	mov	r0, r3
 8007924:	f7ff ff36 	bl	8007794 <LL_ADC_IsEnabled>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d136      	bne.n	800799c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a65      	ldr	r2, [pc, #404]	; (8007ac8 <HAL_ADC_Init+0x298>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d004      	beq.n	8007942 <HAL_ADC_Init+0x112>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a63      	ldr	r2, [pc, #396]	; (8007acc <HAL_ADC_Init+0x29c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d10e      	bne.n	8007960 <HAL_ADC_Init+0x130>
 8007942:	4861      	ldr	r0, [pc, #388]	; (8007ac8 <HAL_ADC_Init+0x298>)
 8007944:	f7ff ff26 	bl	8007794 <LL_ADC_IsEnabled>
 8007948:	4604      	mov	r4, r0
 800794a:	4860      	ldr	r0, [pc, #384]	; (8007acc <HAL_ADC_Init+0x29c>)
 800794c:	f7ff ff22 	bl	8007794 <LL_ADC_IsEnabled>
 8007950:	4603      	mov	r3, r0
 8007952:	4323      	orrs	r3, r4
 8007954:	2b00      	cmp	r3, #0
 8007956:	bf0c      	ite	eq
 8007958:	2301      	moveq	r3, #1
 800795a:	2300      	movne	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	e008      	b.n	8007972 <HAL_ADC_Init+0x142>
 8007960:	485b      	ldr	r0, [pc, #364]	; (8007ad0 <HAL_ADC_Init+0x2a0>)
 8007962:	f7ff ff17 	bl	8007794 <LL_ADC_IsEnabled>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	bf0c      	ite	eq
 800796c:	2301      	moveq	r3, #1
 800796e:	2300      	movne	r3, #0
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a53      	ldr	r2, [pc, #332]	; (8007ac8 <HAL_ADC_Init+0x298>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d004      	beq.n	800798a <HAL_ADC_Init+0x15a>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a51      	ldr	r2, [pc, #324]	; (8007acc <HAL_ADC_Init+0x29c>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d101      	bne.n	800798e <HAL_ADC_Init+0x15e>
 800798a:	4a52      	ldr	r2, [pc, #328]	; (8007ad4 <HAL_ADC_Init+0x2a4>)
 800798c:	e000      	b.n	8007990 <HAL_ADC_Init+0x160>
 800798e:	4a52      	ldr	r2, [pc, #328]	; (8007ad8 <HAL_ADC_Init+0x2a8>)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7ff fd42 	bl	8007420 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800799c:	f7ff fd34 	bl	8007408 <HAL_GetREVID>
 80079a0:	4603      	mov	r3, r0
 80079a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d914      	bls.n	80079d4 <HAL_ADC_Init+0x1a4>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	2b10      	cmp	r3, #16
 80079b0:	d110      	bne.n	80079d4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	7d5b      	ldrb	r3, [r3, #21]
 80079b6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079bc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80079c2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7f1b      	ldrb	r3, [r3, #28]
 80079c8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80079ca:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079cc:	f043 030c 	orr.w	r3, r3, #12
 80079d0:	61bb      	str	r3, [r7, #24]
 80079d2:	e00d      	b.n	80079f0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	7d5b      	ldrb	r3, [r3, #21]
 80079d8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079de:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80079e4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	7f1b      	ldrb	r3, [r3, #28]
 80079ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80079ec:	4313      	orrs	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7f1b      	ldrb	r3, [r3, #28]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d106      	bne.n	8007a06 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	3b01      	subs	r3, #1
 80079fe:	045b      	lsls	r3, r3, #17
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a12:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007a1c:	69ba      	ldr	r2, [r7, #24]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68da      	ldr	r2, [r3, #12]
 8007a28:	4b2c      	ldr	r3, [pc, #176]	; (8007adc <HAL_ADC_Init+0x2ac>)
 8007a2a:	4013      	ands	r3, r2
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	69b9      	ldr	r1, [r7, #24]
 8007a32:	430b      	orrs	r3, r1
 8007a34:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff fed2 	bl	80077e4 <LL_ADC_REG_IsConversionOngoing>
 8007a40:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fedf 	bl	800780a <LL_ADC_INJ_IsConversionOngoing>
 8007a4c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d15f      	bne.n	8007b14 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d15c      	bne.n	8007b14 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	7d1b      	ldrb	r3, [r3, #20]
 8007a5e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8007a64:	4313      	orrs	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ae0 <HAL_ADC_Init+0x2b0>)
 8007a70:	4013      	ands	r3, r2
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	6812      	ldr	r2, [r2, #0]
 8007a76:	69b9      	ldr	r1, [r7, #24]
 8007a78:	430b      	orrs	r3, r1
 8007a7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d130      	bne.n	8007ae8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691a      	ldr	r2, [r3, #16]
 8007a92:	4b14      	ldr	r3, [pc, #80]	; (8007ae4 <HAL_ADC_Init+0x2b4>)
 8007a94:	4013      	ands	r3, r2
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007a9a:	3a01      	subs	r2, #1
 8007a9c:	0411      	lsls	r1, r2, #16
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007aa2:	4311      	orrs	r1, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007aa8:	4311      	orrs	r1, r2
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	431a      	orrs	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f042 0201 	orr.w	r2, r2, #1
 8007aba:	611a      	str	r2, [r3, #16]
 8007abc:	e01c      	b.n	8007af8 <HAL_ADC_Init+0x2c8>
 8007abe:	bf00      	nop
 8007ac0:	24000044 	.word	0x24000044
 8007ac4:	053e2d63 	.word	0x053e2d63
 8007ac8:	40022000 	.word	0x40022000
 8007acc:	40022100 	.word	0x40022100
 8007ad0:	58026000 	.word	0x58026000
 8007ad4:	40022300 	.word	0x40022300
 8007ad8:	58026300 	.word	0x58026300
 8007adc:	fff0c003 	.word	0xfff0c003
 8007ae0:	ffffbffc 	.word	0xffffbffc
 8007ae4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	691a      	ldr	r2, [r3, #16]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0201 	bic.w	r2, r2, #1
 8007af6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 ffc4 	bl	8008a9c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d10c      	bne.n	8007b36 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b22:	f023 010f 	bic.w	r1, r3, #15
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	1e5a      	subs	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	430a      	orrs	r2, r1
 8007b32:	631a      	str	r2, [r3, #48]	; 0x30
 8007b34:	e007      	b.n	8007b46 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 020f 	bic.w	r2, r2, #15
 8007b44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	f043 0201 	orr.w	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	655a      	str	r2, [r3, #84]	; 0x54
 8007b56:	e007      	b.n	8007b68 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	f043 0210 	orr.w	r2, r3, #16
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007b68:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3724      	adds	r7, #36	; 0x24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd90      	pop	{r4, r7, pc}
 8007b72:	bf00      	nop

08007b74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a55      	ldr	r2, [pc, #340]	; (8007cdc <HAL_ADC_Start_DMA+0x168>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_ADC_Start_DMA+0x20>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a54      	ldr	r2, [pc, #336]	; (8007ce0 <HAL_ADC_Start_DMA+0x16c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <HAL_ADC_Start_DMA+0x24>
 8007b94:	4b53      	ldr	r3, [pc, #332]	; (8007ce4 <HAL_ADC_Start_DMA+0x170>)
 8007b96:	e000      	b.n	8007b9a <HAL_ADC_Start_DMA+0x26>
 8007b98:	4b53      	ldr	r3, [pc, #332]	; (8007ce8 <HAL_ADC_Start_DMA+0x174>)
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7ff fd7c 	bl	8007698 <LL_ADC_GetMultimode>
 8007ba0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff fe1c 	bl	80077e4 <LL_ADC_REG_IsConversionOngoing>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 808c 	bne.w	8007ccc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_ADC_Start_DMA+0x4e>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e087      	b.n	8007cd2 <HAL_ADC_Start_DMA+0x15e>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2b05      	cmp	r3, #5
 8007bd4:	d002      	beq.n	8007bdc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b09      	cmp	r3, #9
 8007bda:	d170      	bne.n	8007cbe <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f000 fe3f 	bl	8008860 <ADC_Enable>
 8007be2:	4603      	mov	r3, r0
 8007be4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d163      	bne.n	8007cb4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bf0:	4b3e      	ldr	r3, [pc, #248]	; (8007cec <HAL_ADC_Start_DMA+0x178>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a37      	ldr	r2, [pc, #220]	; (8007ce0 <HAL_ADC_Start_DMA+0x16c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d002      	beq.n	8007c0c <HAL_ADC_Start_DMA+0x98>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	e000      	b.n	8007c0e <HAL_ADC_Start_DMA+0x9a>
 8007c0c:	4b33      	ldr	r3, [pc, #204]	; (8007cdc <HAL_ADC_Start_DMA+0x168>)
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	6812      	ldr	r2, [r2, #0]
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d002      	beq.n	8007c1c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d105      	bne.n	8007c28 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c38:	f023 0206 	bic.w	r2, r3, #6
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	659a      	str	r2, [r3, #88]	; 0x58
 8007c40:	e002      	b.n	8007c48 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4c:	4a28      	ldr	r2, [pc, #160]	; (8007cf0 <HAL_ADC_Start_DMA+0x17c>)
 8007c4e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c54:	4a27      	ldr	r2, [pc, #156]	; (8007cf4 <HAL_ADC_Start_DMA+0x180>)
 8007c56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c5c:	4a26      	ldr	r2, [pc, #152]	; (8007cf8 <HAL_ADC_Start_DMA+0x184>)
 8007c5e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	221c      	movs	r2, #28
 8007c66:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0210 	orr.w	r2, r2, #16
 8007c7e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4610      	mov	r0, r2
 8007c8c:	f7ff fc8f 	bl	80075ae <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3340      	adds	r3, #64	; 0x40
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f001 fdaa 	bl	80097f8 <HAL_DMA_Start_IT>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7ff fd85 	bl	80077bc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007cb2:	e00d      	b.n	8007cd0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8007cbc:	e008      	b.n	8007cd0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8007cca:	e001      	b.n	8007cd0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007ccc:	2302      	movs	r3, #2
 8007cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40022000 	.word	0x40022000
 8007ce0:	40022100 	.word	0x40022100
 8007ce4:	40022300 	.word	0x40022300
 8007ce8:	58026300 	.word	0x58026300
 8007cec:	fffff0fe 	.word	0xfffff0fe
 8007cf0:	08008975 	.word	0x08008975
 8007cf4:	08008a4d 	.word	0x08008a4d
 8007cf8:	08008a69 	.word	0x08008a69

08007cfc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08a      	sub	sp, #40	; 0x28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8007d04:	2300      	movs	r3, #0
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a87      	ldr	r2, [pc, #540]	; (8007f3c <HAL_ADC_IRQHandler+0x240>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d004      	beq.n	8007d2c <HAL_ADC_IRQHandler+0x30>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a86      	ldr	r2, [pc, #536]	; (8007f40 <HAL_ADC_IRQHandler+0x244>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d101      	bne.n	8007d30 <HAL_ADC_IRQHandler+0x34>
 8007d2c:	4b85      	ldr	r3, [pc, #532]	; (8007f44 <HAL_ADC_IRQHandler+0x248>)
 8007d2e:	e000      	b.n	8007d32 <HAL_ADC_IRQHandler+0x36>
 8007d30:	4b85      	ldr	r3, [pc, #532]	; (8007f48 <HAL_ADC_IRQHandler+0x24c>)
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fcb0 	bl	8007698 <LL_ADC_GetMultimode>
 8007d38:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	f003 0302 	and.w	r3, r3, #2
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d017      	beq.n	8007d74 <HAL_ADC_IRQHandler+0x78>
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	f003 0302 	and.w	r3, r3, #2
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d012      	beq.n	8007d74 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d52:	f003 0310 	and.w	r3, r3, #16
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fff2 	bl	8008d50 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2202      	movs	r2, #2
 8007d72:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	f003 0304 	and.w	r3, r3, #4
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <HAL_ADC_IRQHandler+0x8c>
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10a      	bne.n	8007d9e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f000 8083 	beq.w	8007e9a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d07d      	beq.n	8007e9a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d105      	bne.n	8007db6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4618      	mov	r0, r3
 8007dbc:	f7ff fbb8 	bl	8007530 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d062      	beq.n	8007e8c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a5d      	ldr	r2, [pc, #372]	; (8007f40 <HAL_ADC_IRQHandler+0x244>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d002      	beq.n	8007dd6 <HAL_ADC_IRQHandler+0xda>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	e000      	b.n	8007dd8 <HAL_ADC_IRQHandler+0xdc>
 8007dd6:	4b59      	ldr	r3, [pc, #356]	; (8007f3c <HAL_ADC_IRQHandler+0x240>)
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d008      	beq.n	8007df2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d005      	beq.n	8007df2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	2b05      	cmp	r3, #5
 8007dea:	d002      	beq.n	8007df2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	2b09      	cmp	r3, #9
 8007df0:	d104      	bne.n	8007dfc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	623b      	str	r3, [r7, #32]
 8007dfa:	e00c      	b.n	8007e16 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a4f      	ldr	r2, [pc, #316]	; (8007f40 <HAL_ADC_IRQHandler+0x244>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d002      	beq.n	8007e0c <HAL_ADC_IRQHandler+0x110>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	e000      	b.n	8007e0e <HAL_ADC_IRQHandler+0x112>
 8007e0c:	4b4b      	ldr	r3, [pc, #300]	; (8007f3c <HAL_ADC_IRQHandler+0x240>)
 8007e0e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d135      	bne.n	8007e8c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f003 0308 	and.w	r3, r3, #8
 8007e2a:	2b08      	cmp	r3, #8
 8007e2c:	d12e      	bne.n	8007e8c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff fcd6 	bl	80077e4 <LL_ADC_REG_IsConversionOngoing>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d11a      	bne.n	8007e74 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	685a      	ldr	r2, [r3, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f022 020c 	bic.w	r2, r2, #12
 8007e4c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d112      	bne.n	8007e8c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e6a:	f043 0201 	orr.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	655a      	str	r2, [r3, #84]	; 0x54
 8007e72:	e00b      	b.n	8007e8c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e78:	f043 0210 	orr.w	r2, r3, #16
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e84:	f043 0201 	orr.w	r2, r3, #1
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f96f 	bl	8008170 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	220c      	movs	r2, #12
 8007e98:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <HAL_ADC_IRQHandler+0x1b2>
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f000 80a0 	beq.w	8007ffa <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 809a 	beq.w	8007ffa <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eca:	f003 0310 	and.w	r3, r3, #16
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ed6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fb76 	bl	80075d4 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8007ee8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f7ff fb1e 	bl	8007530 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ef4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a11      	ldr	r2, [pc, #68]	; (8007f40 <HAL_ADC_IRQHandler+0x244>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d002      	beq.n	8007f06 <HAL_ADC_IRQHandler+0x20a>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	e000      	b.n	8007f08 <HAL_ADC_IRQHandler+0x20c>
 8007f06:	4b0d      	ldr	r3, [pc, #52]	; (8007f3c <HAL_ADC_IRQHandler+0x240>)
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d008      	beq.n	8007f22 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b06      	cmp	r3, #6
 8007f1a:	d002      	beq.n	8007f22 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b07      	cmp	r3, #7
 8007f20:	d104      	bne.n	8007f2c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	623b      	str	r3, [r7, #32]
 8007f2a:	e014      	b.n	8007f56 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a03      	ldr	r2, [pc, #12]	; (8007f40 <HAL_ADC_IRQHandler+0x244>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00a      	beq.n	8007f4c <HAL_ADC_IRQHandler+0x250>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	e008      	b.n	8007f4e <HAL_ADC_IRQHandler+0x252>
 8007f3c:	40022000 	.word	0x40022000
 8007f40:	40022100 	.word	0x40022100
 8007f44:	40022300 	.word	0x40022300
 8007f48:	58026300 	.word	0x58026300
 8007f4c:	4b84      	ldr	r3, [pc, #528]	; (8008160 <HAL_ADC_IRQHandler+0x464>)
 8007f4e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d047      	beq.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d007      	beq.n	8007f76 <HAL_ADC_IRQHandler+0x27a>
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d03f      	beq.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d13a      	bne.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d133      	bne.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d12e      	bne.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fc39 	bl	800780a <LL_ADC_INJ_IsConversionOngoing>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d11a      	bne.n	8007fd4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	685a      	ldr	r2, [r3, #4]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007fac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d112      	bne.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fca:	f043 0201 	orr.w	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	655a      	str	r2, [r3, #84]	; 0x54
 8007fd2:	e00b      	b.n	8007fec <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd8:	f043 0210 	orr.w	r2, r3, #16
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe4:	f043 0201 	orr.w	r2, r3, #1
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fe87 	bl	8008d00 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2260      	movs	r2, #96	; 0x60
 8007ff8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008000:	2b00      	cmp	r3, #0
 8008002:	d011      	beq.n	8008028 <HAL_ADC_IRQHandler+0x32c>
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00c      	beq.n	8008028 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f8bc 	bl	8008198 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2280      	movs	r2, #128	; 0x80
 8008026:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800802e:	2b00      	cmp	r3, #0
 8008030:	d012      	beq.n	8008058 <HAL_ADC_IRQHandler+0x35c>
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00d      	beq.n	8008058 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008040:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fe6d 	bl	8008d28 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008056:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805e:	2b00      	cmp	r3, #0
 8008060:	d012      	beq.n	8008088 <HAL_ADC_IRQHandler+0x38c>
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00d      	beq.n	8008088 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fe5f 	bl	8008d3c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008086:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	f003 0310 	and.w	r3, r3, #16
 800808e:	2b00      	cmp	r3, #0
 8008090:	d043      	beq.n	800811a <HAL_ADC_IRQHandler+0x41e>
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d03e      	beq.n	800811a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80080a4:	2301      	movs	r3, #1
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
 80080a8:	e021      	b.n	80080ee <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d015      	beq.n	80080dc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a2a      	ldr	r2, [pc, #168]	; (8008160 <HAL_ADC_IRQHandler+0x464>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <HAL_ADC_IRQHandler+0x3c8>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a29      	ldr	r2, [pc, #164]	; (8008164 <HAL_ADC_IRQHandler+0x468>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <HAL_ADC_IRQHandler+0x3cc>
 80080c4:	4b28      	ldr	r3, [pc, #160]	; (8008168 <HAL_ADC_IRQHandler+0x46c>)
 80080c6:	e000      	b.n	80080ca <HAL_ADC_IRQHandler+0x3ce>
 80080c8:	4b28      	ldr	r3, [pc, #160]	; (800816c <HAL_ADC_IRQHandler+0x470>)
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff faf2 	bl	80076b4 <LL_ADC_GetMultiDMATransfer>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00b      	beq.n	80080ee <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80080d6:	2301      	movs	r3, #1
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	e008      	b.n	80080ee <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0303 	and.w	r3, r3, #3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80080ea:	2301      	movs	r3, #1
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d10e      	bne.n	8008112 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	f043 0202 	orr.w	r2, r3, #2
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f84d 	bl	80081ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2210      	movs	r2, #16
 8008118:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008120:	2b00      	cmp	r3, #0
 8008122:	d018      	beq.n	8008156 <HAL_ADC_IRQHandler+0x45a>
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800812a:	2b00      	cmp	r3, #0
 800812c:	d013      	beq.n	8008156 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008132:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	f043 0208 	orr.w	r2, r3, #8
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800814e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fddf 	bl	8008d14 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008156:	bf00      	nop
 8008158:	3728      	adds	r7, #40	; 0x28
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	40022000 	.word	0x40022000
 8008164:	40022100 	.word	0x40022100
 8008168:	40022300 	.word	0x40022300
 800816c:	58026300 	.word	0x58026300

08008170 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b0a1      	sub	sp, #132	; 0x84
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80081d0:	2300      	movs	r3, #0
 80081d2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4a9d      	ldr	r2, [pc, #628]	; (8008450 <HAL_ADC_ConfigChannel+0x290>)
 80081da:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <HAL_ADC_ConfigChannel+0x2a>
 80081e6:	2302      	movs	r3, #2
 80081e8:	e321      	b.n	800882e <HAL_ADC_ConfigChannel+0x66e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7ff faf4 	bl	80077e4 <LL_ADC_REG_IsConversionOngoing>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f040 8306 	bne.w	8008810 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800820c:	2b00      	cmp	r3, #0
 800820e:	d108      	bne.n	8008222 <HAL_ADC_ConfigChannel+0x62>
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	0e9b      	lsrs	r3, r3, #26
 8008216:	f003 031f 	and.w	r3, r3, #31
 800821a:	2201      	movs	r2, #1
 800821c:	fa02 f303 	lsl.w	r3, r2, r3
 8008220:	e016      	b.n	8008250 <HAL_ADC_ConfigChannel+0x90>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008228:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800822a:	fa93 f3a3 	rbit	r3, r3
 800822e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008232:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800823a:	2320      	movs	r3, #32
 800823c:	e003      	b.n	8008246 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800823e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008240:	fab3 f383 	clz	r3, r3
 8008244:	b2db      	uxtb	r3, r3
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2201      	movs	r2, #1
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	6812      	ldr	r2, [r2, #0]
 8008254:	69d1      	ldr	r1, [r2, #28]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6812      	ldr	r2, [r2, #0]
 800825a:	430b      	orrs	r3, r1
 800825c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6859      	ldr	r1, [r3, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	f7ff f973 	bl	8007556 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fab5 	bl	80077e4 <LL_ADC_REG_IsConversionOngoing>
 800827a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4618      	mov	r0, r3
 8008282:	f7ff fac2 	bl	800780a <LL_ADC_INJ_IsConversionOngoing>
 8008286:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800828a:	2b00      	cmp	r3, #0
 800828c:	f040 80b3 	bne.w	80083f6 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008290:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008292:	2b00      	cmp	r3, #0
 8008294:	f040 80af 	bne.w	80083f6 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	6819      	ldr	r1, [r3, #0]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	461a      	mov	r2, r3
 80082a6:	f7ff f9a8 	bl	80075fa <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80082aa:	4b6a      	ldr	r3, [pc, #424]	; (8008454 <HAL_ADC_ConfigChannel+0x294>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80082b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082b6:	d10b      	bne.n	80082d0 <HAL_ADC_ConfigChannel+0x110>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	695a      	ldr	r2, [r3, #20]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	089b      	lsrs	r3, r3, #2
 80082c4:	f003 0307 	and.w	r3, r3, #7
 80082c8:	005b      	lsls	r3, r3, #1
 80082ca:	fa02 f303 	lsl.w	r3, r2, r3
 80082ce:	e01d      	b.n	800830c <HAL_ADC_ConfigChannel+0x14c>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	f003 0310 	and.w	r3, r3, #16
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <HAL_ADC_ConfigChannel+0x136>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695a      	ldr	r2, [r3, #20]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	089b      	lsrs	r3, r3, #2
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	fa02 f303 	lsl.w	r3, r2, r3
 80082f4:	e00a      	b.n	800830c <HAL_ADC_ConfigChannel+0x14c>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695a      	ldr	r2, [r3, #20]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	089b      	lsrs	r3, r3, #2
 8008302:	f003 0304 	and.w	r3, r3, #4
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	fa02 f303 	lsl.w	r3, r2, r3
 800830c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	691b      	ldr	r3, [r3, #16]
 8008312:	2b04      	cmp	r3, #4
 8008314:	d027      	beq.n	8008366 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	6919      	ldr	r1, [r3, #16]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008324:	f7ff f8b0 	bl	8007488 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6818      	ldr	r0, [r3, #0]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	6919      	ldr	r1, [r3, #16]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	7e5b      	ldrb	r3, [r3, #25]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d102      	bne.n	800833e <HAL_ADC_ConfigChannel+0x17e>
 8008338:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800833c:	e000      	b.n	8008340 <HAL_ADC_ConfigChannel+0x180>
 800833e:	2300      	movs	r3, #0
 8008340:	461a      	mov	r2, r3
 8008342:	f7ff f8da 	bl	80074fa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6818      	ldr	r0, [r3, #0]
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	6919      	ldr	r1, [r3, #16]
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	7e1b      	ldrb	r3, [r3, #24]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d102      	bne.n	800835c <HAL_ADC_ConfigChannel+0x19c>
 8008356:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800835a:	e000      	b.n	800835e <HAL_ADC_ConfigChannel+0x19e>
 800835c:	2300      	movs	r3, #0
 800835e:	461a      	mov	r2, r3
 8008360:	f7ff f8b2 	bl	80074c8 <LL_ADC_SetDataRightShift>
 8008364:	e047      	b.n	80083f6 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	069b      	lsls	r3, r3, #26
 8008376:	429a      	cmp	r2, r3
 8008378:	d107      	bne.n	800838a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008388:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	069b      	lsls	r3, r3, #26
 800839a:	429a      	cmp	r2, r3
 800839c:	d107      	bne.n	80083ae <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083ac:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	069b      	lsls	r3, r3, #26
 80083be:	429a      	cmp	r2, r3
 80083c0:	d107      	bne.n	80083d2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083d0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	069b      	lsls	r3, r3, #26
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d107      	bne.n	80083f6 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80083f4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7ff f9ca 	bl	8007794 <LL_ADC_IsEnabled>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	f040 820d 	bne.w	8008822 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6818      	ldr	r0, [r3, #0]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	6819      	ldr	r1, [r3, #0]
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	461a      	mov	r2, r3
 8008416:	f7ff f91b 	bl	8007650 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	68db      	ldr	r3, [r3, #12]
 800841e:	4a0c      	ldr	r2, [pc, #48]	; (8008450 <HAL_ADC_ConfigChannel+0x290>)
 8008420:	4293      	cmp	r3, r2
 8008422:	f040 8133 	bne.w	800868c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008432:	2b00      	cmp	r3, #0
 8008434:	d110      	bne.n	8008458 <HAL_ADC_ConfigChannel+0x298>
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	0e9b      	lsrs	r3, r3, #26
 800843c:	3301      	adds	r3, #1
 800843e:	f003 031f 	and.w	r3, r3, #31
 8008442:	2b09      	cmp	r3, #9
 8008444:	bf94      	ite	ls
 8008446:	2301      	movls	r3, #1
 8008448:	2300      	movhi	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	e01e      	b.n	800848c <HAL_ADC_ConfigChannel+0x2cc>
 800844e:	bf00      	nop
 8008450:	47ff0000 	.word	0x47ff0000
 8008454:	5c001000 	.word	0x5c001000
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008460:	fa93 f3a3 	rbit	r3, r3
 8008464:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008466:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008468:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800846a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800846c:	2b00      	cmp	r3, #0
 800846e:	d101      	bne.n	8008474 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8008470:	2320      	movs	r3, #32
 8008472:	e003      	b.n	800847c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008476:	fab3 f383 	clz	r3, r3
 800847a:	b2db      	uxtb	r3, r3
 800847c:	3301      	adds	r3, #1
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	2b09      	cmp	r3, #9
 8008484:	bf94      	ite	ls
 8008486:	2301      	movls	r3, #1
 8008488:	2300      	movhi	r3, #0
 800848a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800848c:	2b00      	cmp	r3, #0
 800848e:	d079      	beq.n	8008584 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008498:	2b00      	cmp	r3, #0
 800849a:	d107      	bne.n	80084ac <HAL_ADC_ConfigChannel+0x2ec>
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	0e9b      	lsrs	r3, r3, #26
 80084a2:	3301      	adds	r3, #1
 80084a4:	069b      	lsls	r3, r3, #26
 80084a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80084aa:	e015      	b.n	80084d8 <HAL_ADC_ConfigChannel+0x318>
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084b4:	fa93 f3a3 	rbit	r3, r3
 80084b8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80084ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084bc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80084be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80084c4:	2320      	movs	r3, #32
 80084c6:	e003      	b.n	80084d0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80084c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084ca:	fab3 f383 	clz	r3, r3
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	3301      	adds	r3, #1
 80084d2:	069b      	lsls	r3, r3, #26
 80084d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d109      	bne.n	80084f8 <HAL_ADC_ConfigChannel+0x338>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	0e9b      	lsrs	r3, r3, #26
 80084ea:	3301      	adds	r3, #1
 80084ec:	f003 031f 	and.w	r3, r3, #31
 80084f0:	2101      	movs	r1, #1
 80084f2:	fa01 f303 	lsl.w	r3, r1, r3
 80084f6:	e017      	b.n	8008528 <HAL_ADC_ConfigChannel+0x368>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008500:	fa93 f3a3 	rbit	r3, r3
 8008504:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008508:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800850a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800850c:	2b00      	cmp	r3, #0
 800850e:	d101      	bne.n	8008514 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8008510:	2320      	movs	r3, #32
 8008512:	e003      	b.n	800851c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8008514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008516:	fab3 f383 	clz	r3, r3
 800851a:	b2db      	uxtb	r3, r3
 800851c:	3301      	adds	r3, #1
 800851e:	f003 031f 	and.w	r3, r3, #31
 8008522:	2101      	movs	r1, #1
 8008524:	fa01 f303 	lsl.w	r3, r1, r3
 8008528:	ea42 0103 	orr.w	r1, r2, r3
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10a      	bne.n	800854e <HAL_ADC_ConfigChannel+0x38e>
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	0e9b      	lsrs	r3, r3, #26
 800853e:	3301      	adds	r3, #1
 8008540:	f003 021f 	and.w	r2, r3, #31
 8008544:	4613      	mov	r3, r2
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	4413      	add	r3, r2
 800854a:	051b      	lsls	r3, r3, #20
 800854c:	e018      	b.n	8008580 <HAL_ADC_ConfigChannel+0x3c0>
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008556:	fa93 f3a3 	rbit	r3, r3
 800855a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800855c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8008566:	2320      	movs	r3, #32
 8008568:	e003      	b.n	8008572 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	fab3 f383 	clz	r3, r3
 8008570:	b2db      	uxtb	r3, r3
 8008572:	3301      	adds	r3, #1
 8008574:	f003 021f 	and.w	r2, r3, #31
 8008578:	4613      	mov	r3, r2
 800857a:	005b      	lsls	r3, r3, #1
 800857c:	4413      	add	r3, r2
 800857e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008580:	430b      	orrs	r3, r1
 8008582:	e07e      	b.n	8008682 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800858c:	2b00      	cmp	r3, #0
 800858e:	d107      	bne.n	80085a0 <HAL_ADC_ConfigChannel+0x3e0>
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	0e9b      	lsrs	r3, r3, #26
 8008596:	3301      	adds	r3, #1
 8008598:	069b      	lsls	r3, r3, #26
 800859a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800859e:	e015      	b.n	80085cc <HAL_ADC_ConfigChannel+0x40c>
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a8:	fa93 f3a3 	rbit	r3, r3
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80085b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80085b8:	2320      	movs	r3, #32
 80085ba:	e003      	b.n	80085c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80085bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085be:	fab3 f383 	clz	r3, r3
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	3301      	adds	r3, #1
 80085c6:	069b      	lsls	r3, r3, #26
 80085c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d109      	bne.n	80085ec <HAL_ADC_ConfigChannel+0x42c>
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	0e9b      	lsrs	r3, r3, #26
 80085de:	3301      	adds	r3, #1
 80085e0:	f003 031f 	and.w	r3, r3, #31
 80085e4:	2101      	movs	r1, #1
 80085e6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ea:	e017      	b.n	800861c <HAL_ADC_ConfigChannel+0x45c>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	61bb      	str	r3, [r7, #24]
  return result;
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8008604:	2320      	movs	r3, #32
 8008606:	e003      	b.n	8008610 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	fab3 f383 	clz	r3, r3
 800860e:	b2db      	uxtb	r3, r3
 8008610:	3301      	adds	r3, #1
 8008612:	f003 031f 	and.w	r3, r3, #31
 8008616:	2101      	movs	r1, #1
 8008618:	fa01 f303 	lsl.w	r3, r1, r3
 800861c:	ea42 0103 	orr.w	r1, r2, r3
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10d      	bne.n	8008648 <HAL_ADC_ConfigChannel+0x488>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	0e9b      	lsrs	r3, r3, #26
 8008632:	3301      	adds	r3, #1
 8008634:	f003 021f 	and.w	r2, r3, #31
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	3b1e      	subs	r3, #30
 8008640:	051b      	lsls	r3, r3, #20
 8008642:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008646:	e01b      	b.n	8008680 <HAL_ADC_ConfigChannel+0x4c0>
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	fa93 f3a3 	rbit	r3, r3
 8008654:	60fb      	str	r3, [r7, #12]
  return result;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d101      	bne.n	8008664 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8008660:	2320      	movs	r3, #32
 8008662:	e003      	b.n	800866c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	fab3 f383 	clz	r3, r3
 800866a:	b2db      	uxtb	r3, r3
 800866c:	3301      	adds	r3, #1
 800866e:	f003 021f 	and.w	r2, r3, #31
 8008672:	4613      	mov	r3, r2
 8008674:	005b      	lsls	r3, r3, #1
 8008676:	4413      	add	r3, r2
 8008678:	3b1e      	subs	r3, #30
 800867a:	051b      	lsls	r3, r3, #20
 800867c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008680:	430b      	orrs	r3, r1
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	6892      	ldr	r2, [r2, #8]
 8008686:	4619      	mov	r1, r3
 8008688:	f7fe ffb7 	bl	80075fa <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	f280 80c6 	bge.w	8008822 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a67      	ldr	r2, [pc, #412]	; (8008838 <HAL_ADC_ConfigChannel+0x678>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d004      	beq.n	80086aa <HAL_ADC_ConfigChannel+0x4ea>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a65      	ldr	r2, [pc, #404]	; (800883c <HAL_ADC_ConfigChannel+0x67c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d101      	bne.n	80086ae <HAL_ADC_ConfigChannel+0x4ee>
 80086aa:	4b65      	ldr	r3, [pc, #404]	; (8008840 <HAL_ADC_ConfigChannel+0x680>)
 80086ac:	e000      	b.n	80086b0 <HAL_ADC_ConfigChannel+0x4f0>
 80086ae:	4b65      	ldr	r3, [pc, #404]	; (8008844 <HAL_ADC_ConfigChannel+0x684>)
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fe fedb 	bl	800746c <LL_ADC_GetCommonPathInternalCh>
 80086b6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a5e      	ldr	r2, [pc, #376]	; (8008838 <HAL_ADC_ConfigChannel+0x678>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d004      	beq.n	80086cc <HAL_ADC_ConfigChannel+0x50c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a5d      	ldr	r2, [pc, #372]	; (800883c <HAL_ADC_ConfigChannel+0x67c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d10e      	bne.n	80086ea <HAL_ADC_ConfigChannel+0x52a>
 80086cc:	485a      	ldr	r0, [pc, #360]	; (8008838 <HAL_ADC_ConfigChannel+0x678>)
 80086ce:	f7ff f861 	bl	8007794 <LL_ADC_IsEnabled>
 80086d2:	4604      	mov	r4, r0
 80086d4:	4859      	ldr	r0, [pc, #356]	; (800883c <HAL_ADC_ConfigChannel+0x67c>)
 80086d6:	f7ff f85d 	bl	8007794 <LL_ADC_IsEnabled>
 80086da:	4603      	mov	r3, r0
 80086dc:	4323      	orrs	r3, r4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	bf0c      	ite	eq
 80086e2:	2301      	moveq	r3, #1
 80086e4:	2300      	movne	r3, #0
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	e008      	b.n	80086fc <HAL_ADC_ConfigChannel+0x53c>
 80086ea:	4857      	ldr	r0, [pc, #348]	; (8008848 <HAL_ADC_ConfigChannel+0x688>)
 80086ec:	f7ff f852 	bl	8007794 <LL_ADC_IsEnabled>
 80086f0:	4603      	mov	r3, r0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bf0c      	ite	eq
 80086f6:	2301      	moveq	r3, #1
 80086f8:	2300      	movne	r3, #0
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d07d      	beq.n	80087fc <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a51      	ldr	r2, [pc, #324]	; (800884c <HAL_ADC_ConfigChannel+0x68c>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d130      	bne.n	800876c <HAL_ADC_ConfigChannel+0x5ac>
 800870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d12b      	bne.n	800876c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a4b      	ldr	r2, [pc, #300]	; (8008848 <HAL_ADC_ConfigChannel+0x688>)
 800871a:	4293      	cmp	r3, r2
 800871c:	f040 8081 	bne.w	8008822 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a44      	ldr	r2, [pc, #272]	; (8008838 <HAL_ADC_ConfigChannel+0x678>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_ADC_ConfigChannel+0x574>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a43      	ldr	r2, [pc, #268]	; (800883c <HAL_ADC_ConfigChannel+0x67c>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d101      	bne.n	8008738 <HAL_ADC_ConfigChannel+0x578>
 8008734:	4a42      	ldr	r2, [pc, #264]	; (8008840 <HAL_ADC_ConfigChannel+0x680>)
 8008736:	e000      	b.n	800873a <HAL_ADC_ConfigChannel+0x57a>
 8008738:	4a42      	ldr	r2, [pc, #264]	; (8008844 <HAL_ADC_ConfigChannel+0x684>)
 800873a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800873c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7fe fe7f 	bl	8007446 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008748:	4b41      	ldr	r3, [pc, #260]	; (8008850 <HAL_ADC_ConfigChannel+0x690>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	099b      	lsrs	r3, r3, #6
 800874e:	4a41      	ldr	r2, [pc, #260]	; (8008854 <HAL_ADC_ConfigChannel+0x694>)
 8008750:	fba2 2303 	umull	r2, r3, r2, r3
 8008754:	099b      	lsrs	r3, r3, #6
 8008756:	3301      	adds	r3, #1
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800875c:	e002      	b.n	8008764 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	3b01      	subs	r3, #1
 8008762:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d1f9      	bne.n	800875e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800876a:	e05a      	b.n	8008822 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a39      	ldr	r2, [pc, #228]	; (8008858 <HAL_ADC_ConfigChannel+0x698>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d11e      	bne.n	80087b4 <HAL_ADC_ConfigChannel+0x5f4>
 8008776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d119      	bne.n	80087b4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a30      	ldr	r2, [pc, #192]	; (8008848 <HAL_ADC_ConfigChannel+0x688>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d14b      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a2a      	ldr	r2, [pc, #168]	; (8008838 <HAL_ADC_ConfigChannel+0x678>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d004      	beq.n	800879e <HAL_ADC_ConfigChannel+0x5de>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a28      	ldr	r2, [pc, #160]	; (800883c <HAL_ADC_ConfigChannel+0x67c>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d101      	bne.n	80087a2 <HAL_ADC_ConfigChannel+0x5e2>
 800879e:	4a28      	ldr	r2, [pc, #160]	; (8008840 <HAL_ADC_ConfigChannel+0x680>)
 80087a0:	e000      	b.n	80087a4 <HAL_ADC_ConfigChannel+0x5e4>
 80087a2:	4a28      	ldr	r2, [pc, #160]	; (8008844 <HAL_ADC_ConfigChannel+0x684>)
 80087a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087aa:	4619      	mov	r1, r3
 80087ac:	4610      	mov	r0, r2
 80087ae:	f7fe fe4a 	bl	8007446 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80087b2:	e036      	b.n	8008822 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a28      	ldr	r2, [pc, #160]	; (800885c <HAL_ADC_ConfigChannel+0x69c>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d131      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x662>
 80087be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d12c      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <HAL_ADC_ConfigChannel+0x688>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d127      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a18      	ldr	r2, [pc, #96]	; (8008838 <HAL_ADC_ConfigChannel+0x678>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <HAL_ADC_ConfigChannel+0x626>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a16      	ldr	r2, [pc, #88]	; (800883c <HAL_ADC_ConfigChannel+0x67c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d101      	bne.n	80087ea <HAL_ADC_ConfigChannel+0x62a>
 80087e6:	4a16      	ldr	r2, [pc, #88]	; (8008840 <HAL_ADC_ConfigChannel+0x680>)
 80087e8:	e000      	b.n	80087ec <HAL_ADC_ConfigChannel+0x62c>
 80087ea:	4a16      	ldr	r2, [pc, #88]	; (8008844 <HAL_ADC_ConfigChannel+0x684>)
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087f2:	4619      	mov	r1, r3
 80087f4:	4610      	mov	r0, r2
 80087f6:	f7fe fe26 	bl	8007446 <LL_ADC_SetCommonPathInternalCh>
 80087fa:	e012      	b.n	8008822 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008800:	f043 0220 	orr.w	r2, r3, #32
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8008808:	2301      	movs	r3, #1
 800880a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800880e:	e008      	b.n	8008822 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008814:	f043 0220 	orr.w	r2, r3, #32
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800882a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800882e:	4618      	mov	r0, r3
 8008830:	3784      	adds	r7, #132	; 0x84
 8008832:	46bd      	mov	sp, r7
 8008834:	bd90      	pop	{r4, r7, pc}
 8008836:	bf00      	nop
 8008838:	40022000 	.word	0x40022000
 800883c:	40022100 	.word	0x40022100
 8008840:	40022300 	.word	0x40022300
 8008844:	58026300 	.word	0x58026300
 8008848:	58026000 	.word	0x58026000
 800884c:	cb840000 	.word	0xcb840000
 8008850:	24000044 	.word	0x24000044
 8008854:	053e2d63 	.word	0x053e2d63
 8008858:	c7520000 	.word	0xc7520000
 800885c:	cfb80000 	.word	0xcfb80000

08008860 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe ff91 	bl	8007794 <LL_ADC_IsEnabled>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d16e      	bne.n	8008956 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689a      	ldr	r2, [r3, #8]
 800887e:	4b38      	ldr	r3, [pc, #224]	; (8008960 <ADC_Enable+0x100>)
 8008880:	4013      	ands	r3, r2
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00d      	beq.n	80088a2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888a:	f043 0210 	orr.w	r2, r3, #16
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008896:	f043 0201 	orr.w	r2, r3, #1
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e05a      	b.n	8008958 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe ff60 	bl	800776c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80088ac:	f7fe fd7c 	bl	80073a8 <HAL_GetTick>
 80088b0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a2b      	ldr	r2, [pc, #172]	; (8008964 <ADC_Enable+0x104>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d004      	beq.n	80088c6 <ADC_Enable+0x66>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a29      	ldr	r2, [pc, #164]	; (8008968 <ADC_Enable+0x108>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <ADC_Enable+0x6a>
 80088c6:	4b29      	ldr	r3, [pc, #164]	; (800896c <ADC_Enable+0x10c>)
 80088c8:	e000      	b.n	80088cc <ADC_Enable+0x6c>
 80088ca:	4b29      	ldr	r3, [pc, #164]	; (8008970 <ADC_Enable+0x110>)
 80088cc:	4618      	mov	r0, r3
 80088ce:	f7fe fee3 	bl	8007698 <LL_ADC_GetMultimode>
 80088d2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a23      	ldr	r2, [pc, #140]	; (8008968 <ADC_Enable+0x108>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d002      	beq.n	80088e4 <ADC_Enable+0x84>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	e000      	b.n	80088e6 <ADC_Enable+0x86>
 80088e4:	4b1f      	ldr	r3, [pc, #124]	; (8008964 <ADC_Enable+0x104>)
 80088e6:	687a      	ldr	r2, [r7, #4]
 80088e8:	6812      	ldr	r2, [r2, #0]
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d02c      	beq.n	8008948 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d130      	bne.n	8008956 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80088f4:	e028      	b.n	8008948 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe ff4a 	bl	8007794 <LL_ADC_IsEnabled>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe ff2e 	bl	800776c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008910:	f7fe fd4a 	bl	80073a8 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d914      	bls.n	8008948 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0301 	and.w	r3, r3, #1
 8008928:	2b01      	cmp	r3, #1
 800892a:	d00d      	beq.n	8008948 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008930:	f043 0210 	orr.w	r2, r3, #16
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800893c:	f043 0201 	orr.w	r2, r3, #1
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	e007      	b.n	8008958 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0301 	and.w	r3, r3, #1
 8008952:	2b01      	cmp	r3, #1
 8008954:	d1cf      	bne.n	80088f6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008956:	2300      	movs	r3, #0
}
 8008958:	4618      	mov	r0, r3
 800895a:	3710      	adds	r7, #16
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	8000003f 	.word	0x8000003f
 8008964:	40022000 	.word	0x40022000
 8008968:	40022100 	.word	0x40022100
 800896c:	40022300 	.word	0x40022300
 8008970:	58026300 	.word	0x58026300

08008974 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008986:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800898a:	2b00      	cmp	r3, #0
 800898c:	d14b      	bne.n	8008a26 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 0308 	and.w	r3, r3, #8
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d021      	beq.n	80089ec <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fdbf 	bl	8007530 <LL_ADC_REG_IsTriggerSourceSWStart>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d032      	beq.n	8008a1e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d12b      	bne.n	8008a1e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d11f      	bne.n	8008a1e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	655a      	str	r2, [r3, #84]	; 0x54
 80089ea:	e018      	b.n	8008a1e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d111      	bne.n	8008a1e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a16:	f043 0201 	orr.w	r2, r3, #1
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fba6 	bl	8008170 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008a24:	e00e      	b.n	8008a44 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2a:	f003 0310 	and.w	r3, r3, #16
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff fbba 	bl	80081ac <HAL_ADC_ErrorCallback>
}
 8008a38:	e004      	b.n	8008a44 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	4798      	blx	r3
}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fb92 	bl	8008184 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a60:	bf00      	nop
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a86:	f043 0204 	orr.w	r2, r3, #4
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f7ff fb8c 	bl	80081ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008a94:	bf00      	nop
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a7a      	ldr	r2, [pc, #488]	; (8008c94 <ADC_ConfigureBoostMode+0x1f8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d004      	beq.n	8008ab8 <ADC_ConfigureBoostMode+0x1c>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a79      	ldr	r2, [pc, #484]	; (8008c98 <ADC_ConfigureBoostMode+0x1fc>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d109      	bne.n	8008acc <ADC_ConfigureBoostMode+0x30>
 8008ab8:	4b78      	ldr	r3, [pc, #480]	; (8008c9c <ADC_ConfigureBoostMode+0x200>)
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	bf14      	ite	ne
 8008ac4:	2301      	movne	r3, #1
 8008ac6:	2300      	moveq	r3, #0
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	e008      	b.n	8008ade <ADC_ConfigureBoostMode+0x42>
 8008acc:	4b74      	ldr	r3, [pc, #464]	; (8008ca0 <ADC_ConfigureBoostMode+0x204>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bf14      	ite	ne
 8008ad8:	2301      	movne	r3, #1
 8008ada:	2300      	moveq	r3, #0
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d01c      	beq.n	8008b1c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8008ae2:	f004 ffe5 	bl	800dab0 <HAL_RCC_GetHCLKFreq>
 8008ae6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008af0:	d010      	beq.n	8008b14 <ADC_ConfigureBoostMode+0x78>
 8008af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008af6:	d873      	bhi.n	8008be0 <ADC_ConfigureBoostMode+0x144>
 8008af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008afc:	d002      	beq.n	8008b04 <ADC_ConfigureBoostMode+0x68>
 8008afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b02:	d16d      	bne.n	8008be0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	0c1b      	lsrs	r3, r3, #16
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b10:	60fb      	str	r3, [r7, #12]
        break;
 8008b12:	e068      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	089b      	lsrs	r3, r3, #2
 8008b18:	60fb      	str	r3, [r7, #12]
        break;
 8008b1a:	e064      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8008b1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008b20:	f04f 0100 	mov.w	r1, #0
 8008b24:	f006 fa2a 	bl	800ef7c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	685b      	ldr	r3, [r3, #4]
 8008b2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008b32:	d051      	beq.n	8008bd8 <ADC_ConfigureBoostMode+0x13c>
 8008b34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8008b38:	d854      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008b3e:	d047      	beq.n	8008bd0 <ADC_ConfigureBoostMode+0x134>
 8008b40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8008b44:	d84e      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008b4a:	d03d      	beq.n	8008bc8 <ADC_ConfigureBoostMode+0x12c>
 8008b4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8008b50:	d848      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b56:	d033      	beq.n	8008bc0 <ADC_ConfigureBoostMode+0x124>
 8008b58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b5c:	d842      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008b62:	d029      	beq.n	8008bb8 <ADC_ConfigureBoostMode+0x11c>
 8008b64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8008b68:	d83c      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008b6e:	d01a      	beq.n	8008ba6 <ADC_ConfigureBoostMode+0x10a>
 8008b70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008b74:	d836      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008b7a:	d014      	beq.n	8008ba6 <ADC_ConfigureBoostMode+0x10a>
 8008b7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008b80:	d830      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b86:	d00e      	beq.n	8008ba6 <ADC_ConfigureBoostMode+0x10a>
 8008b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b8c:	d82a      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b92:	d008      	beq.n	8008ba6 <ADC_ConfigureBoostMode+0x10a>
 8008b94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008b98:	d824      	bhi.n	8008be4 <ADC_ConfigureBoostMode+0x148>
 8008b9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b9e:	d002      	beq.n	8008ba6 <ADC_ConfigureBoostMode+0x10a>
 8008ba0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ba4:	d11e      	bne.n	8008be4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	0c9b      	lsrs	r3, r3, #18
 8008bac:	005b      	lsls	r3, r3, #1
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bb4:	60fb      	str	r3, [r7, #12]
        break;
 8008bb6:	e016      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	091b      	lsrs	r3, r3, #4
 8008bbc:	60fb      	str	r3, [r7, #12]
        break;
 8008bbe:	e012      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	095b      	lsrs	r3, r3, #5
 8008bc4:	60fb      	str	r3, [r7, #12]
        break;
 8008bc6:	e00e      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	099b      	lsrs	r3, r3, #6
 8008bcc:	60fb      	str	r3, [r7, #12]
        break;
 8008bce:	e00a      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	09db      	lsrs	r3, r3, #7
 8008bd4:	60fb      	str	r3, [r7, #12]
        break;
 8008bd6:	e006      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	0a1b      	lsrs	r3, r3, #8
 8008bdc:	60fb      	str	r3, [r7, #12]
        break;
 8008bde:	e002      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8008be0:	bf00      	nop
 8008be2:	e000      	b.n	8008be6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8008be4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8008be6:	f7fe fc0f 	bl	8007408 <HAL_GetREVID>
 8008bea:	4603      	mov	r3, r0
 8008bec:	f241 0203 	movw	r2, #4099	; 0x1003
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d815      	bhi.n	8008c20 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4a2b      	ldr	r2, [pc, #172]	; (8008ca4 <ADC_ConfigureBoostMode+0x208>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d908      	bls.n	8008c0e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689a      	ldr	r2, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8008c0c:	e03e      	b.n	8008c8c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c1c:	609a      	str	r2, [r3, #8]
}
 8008c1e:	e035      	b.n	8008c8c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	085b      	lsrs	r3, r3, #1
 8008c24:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	4a1f      	ldr	r2, [pc, #124]	; (8008ca8 <ADC_ConfigureBoostMode+0x20c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d808      	bhi.n	8008c40 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689a      	ldr	r2, [r3, #8]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008c3c:	609a      	str	r2, [r3, #8]
}
 8008c3e:	e025      	b.n	8008c8c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	4a1a      	ldr	r2, [pc, #104]	; (8008cac <ADC_ConfigureBoostMode+0x210>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d80a      	bhi.n	8008c5e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c5a:	609a      	str	r2, [r3, #8]
}
 8008c5c:	e016      	b.n	8008c8c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <ADC_ConfigureBoostMode+0x214>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d80a      	bhi.n	8008c7c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c78:	609a      	str	r2, [r3, #8]
}
 8008c7a:	e007      	b.n	8008c8c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689a      	ldr	r2, [r3, #8]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008c8a:	609a      	str	r2, [r3, #8]
}
 8008c8c:	bf00      	nop
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	40022000 	.word	0x40022000
 8008c98:	40022100 	.word	0x40022100
 8008c9c:	40022300 	.word	0x40022300
 8008ca0:	58026300 	.word	0x58026300
 8008ca4:	01312d00 	.word	0x01312d00
 8008ca8:	005f5e10 	.word	0x005f5e10
 8008cac:	00bebc20 	.word	0x00bebc20
 8008cb0:	017d7840 	.word	0x017d7840

08008cb4 <LL_ADC_IsEnabled>:
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d101      	bne.n	8008ccc <LL_ADC_IsEnabled+0x18>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e000      	b.n	8008cce <LL_ADC_IsEnabled+0x1a>
 8008ccc:	2300      	movs	r3, #0
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	370c      	adds	r7, #12
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <LL_ADC_REG_IsConversionOngoing>:
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 0304 	and.w	r3, r3, #4
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d101      	bne.n	8008cf2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e000      	b.n	8008cf4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8008d64:	b590      	push	{r4, r7, lr}
 8008d66:	b09f      	sub	sp, #124	; 0x7c
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e0be      	b.n	8008f00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a5c      	ldr	r2, [pc, #368]	; (8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d102      	bne.n	8008da2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008d9c:	4b5b      	ldr	r3, [pc, #364]	; (8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	e001      	b.n	8008da6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10b      	bne.n	8008dc4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008db0:	f043 0220 	orr.w	r2, r3, #32
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e09d      	b.n	8008f00 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff ff87 	bl	8008cda <LL_ADC_REG_IsConversionOngoing>
 8008dcc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7ff ff81 	bl	8008cda <LL_ADC_REG_IsConversionOngoing>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d17f      	bne.n	8008ede <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d17c      	bne.n	8008ede <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a47      	ldr	r2, [pc, #284]	; (8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d004      	beq.n	8008df8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a46      	ldr	r2, [pc, #280]	; (8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d101      	bne.n	8008dfc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008df8:	4b45      	ldr	r3, [pc, #276]	; (8008f10 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008dfa:	e000      	b.n	8008dfe <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008dfc:	4b45      	ldr	r3, [pc, #276]	; (8008f14 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8008dfe:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d039      	beq.n	8008e7c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	431a      	orrs	r2, r3
 8008e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e18:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a3a      	ldr	r2, [pc, #232]	; (8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d004      	beq.n	8008e2e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a38      	ldr	r2, [pc, #224]	; (8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d10e      	bne.n	8008e4c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8008e2e:	4836      	ldr	r0, [pc, #216]	; (8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e30:	f7ff ff40 	bl	8008cb4 <LL_ADC_IsEnabled>
 8008e34:	4604      	mov	r4, r0
 8008e36:	4835      	ldr	r0, [pc, #212]	; (8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e38:	f7ff ff3c 	bl	8008cb4 <LL_ADC_IsEnabled>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	4323      	orrs	r3, r4
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	bf0c      	ite	eq
 8008e44:	2301      	moveq	r3, #1
 8008e46:	2300      	movne	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	e008      	b.n	8008e5e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8008e4c:	4832      	ldr	r0, [pc, #200]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008e4e:	f7ff ff31 	bl	8008cb4 <LL_ADC_IsEnabled>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf0c      	ite	eq
 8008e58:	2301      	moveq	r3, #1
 8008e5a:	2300      	movne	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d047      	beq.n	8008ef2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	4b2d      	ldr	r3, [pc, #180]	; (8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	6811      	ldr	r1, [r2, #0]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	6892      	ldr	r2, [r2, #8]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	431a      	orrs	r2, r3
 8008e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e78:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008e7a:	e03a      	b.n	8008ef2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8008e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e86:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a1d      	ldr	r2, [pc, #116]	; (8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d10e      	bne.n	8008eba <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008e9c:	481a      	ldr	r0, [pc, #104]	; (8008f08 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008e9e:	f7ff ff09 	bl	8008cb4 <LL_ADC_IsEnabled>
 8008ea2:	4604      	mov	r4, r0
 8008ea4:	4819      	ldr	r0, [pc, #100]	; (8008f0c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008ea6:	f7ff ff05 	bl	8008cb4 <LL_ADC_IsEnabled>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	4323      	orrs	r3, r4
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bf0c      	ite	eq
 8008eb2:	2301      	moveq	r3, #1
 8008eb4:	2300      	movne	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	e008      	b.n	8008ecc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008eba:	4817      	ldr	r0, [pc, #92]	; (8008f18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008ebc:	f7ff fefa 	bl	8008cb4 <LL_ADC_IsEnabled>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bf0c      	ite	eq
 8008ec6:	2301      	moveq	r3, #1
 8008ec8:	2300      	movne	r3, #0
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d010      	beq.n	8008ef2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8008ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ed2:	689a      	ldr	r2, [r3, #8]
 8008ed4:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008ed6:	4013      	ands	r3, r2
 8008ed8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008eda:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008edc:	e009      	b.n	8008ef2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee2:	f043 0220 	orr.w	r2, r3, #32
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008ef0:	e000      	b.n	8008ef4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008ef2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008efc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	377c      	adds	r7, #124	; 0x7c
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd90      	pop	{r4, r7, pc}
 8008f08:	40022000 	.word	0x40022000
 8008f0c:	40022100 	.word	0x40022100
 8008f10:	40022300 	.word	0x40022300
 8008f14:	58026300 	.word	0x58026300
 8008f18:	58026000 	.word	0x58026000
 8008f1c:	fffff0e0 	.word	0xfffff0e0

08008f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f003 0307 	and.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <__NVIC_SetPriorityGrouping+0x40>)
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8008f48:	4b06      	ldr	r3, [pc, #24]	; (8008f64 <__NVIC_SetPriorityGrouping+0x44>)
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f4e:	4a04      	ldr	r2, [pc, #16]	; (8008f60 <__NVIC_SetPriorityGrouping+0x40>)
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	60d3      	str	r3, [r2, #12]
}
 8008f54:	bf00      	nop
 8008f56:	3714      	adds	r7, #20
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr
 8008f60:	e000ed00 	.word	0xe000ed00
 8008f64:	05fa0000 	.word	0x05fa0000

08008f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f6c:	4b04      	ldr	r3, [pc, #16]	; (8008f80 <__NVIC_GetPriorityGrouping+0x18>)
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	0a1b      	lsrs	r3, r3, #8
 8008f72:	f003 0307 	and.w	r3, r3, #7
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	e000ed00 	.word	0xe000ed00

08008f84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008f8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	db0b      	blt.n	8008fae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	f003 021f 	and.w	r2, r3, #31
 8008f9c:	4907      	ldr	r1, [pc, #28]	; (8008fbc <__NVIC_EnableIRQ+0x38>)
 8008f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fa2:	095b      	lsrs	r3, r3, #5
 8008fa4:	2001      	movs	r0, #1
 8008fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8008faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fae:	bf00      	nop
 8008fb0:	370c      	adds	r7, #12
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	e000e100 	.word	0xe000e100

08008fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	6039      	str	r1, [r7, #0]
 8008fca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008fcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	db0a      	blt.n	8008fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	490c      	ldr	r1, [pc, #48]	; (800900c <__NVIC_SetPriority+0x4c>)
 8008fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008fde:	0112      	lsls	r2, r2, #4
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	440b      	add	r3, r1
 8008fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008fe8:	e00a      	b.n	8009000 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	4908      	ldr	r1, [pc, #32]	; (8009010 <__NVIC_SetPriority+0x50>)
 8008ff0:	88fb      	ldrh	r3, [r7, #6]
 8008ff2:	f003 030f 	and.w	r3, r3, #15
 8008ff6:	3b04      	subs	r3, #4
 8008ff8:	0112      	lsls	r2, r2, #4
 8008ffa:	b2d2      	uxtb	r2, r2
 8008ffc:	440b      	add	r3, r1
 8008ffe:	761a      	strb	r2, [r3, #24]
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	e000e100 	.word	0xe000e100
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009014:	b480      	push	{r7}
 8009016:	b089      	sub	sp, #36	; 0x24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	f1c3 0307 	rsb	r3, r3, #7
 800902e:	2b04      	cmp	r3, #4
 8009030:	bf28      	it	cs
 8009032:	2304      	movcs	r3, #4
 8009034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	3304      	adds	r3, #4
 800903a:	2b06      	cmp	r3, #6
 800903c:	d902      	bls.n	8009044 <NVIC_EncodePriority+0x30>
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	3b03      	subs	r3, #3
 8009042:	e000      	b.n	8009046 <NVIC_EncodePriority+0x32>
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	fa02 f303 	lsl.w	r3, r2, r3
 8009052:	43da      	mvns	r2, r3
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	401a      	ands	r2, r3
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800905c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	fa01 f303 	lsl.w	r3, r1, r3
 8009066:	43d9      	mvns	r1, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800906c:	4313      	orrs	r3, r2
         );
}
 800906e:	4618      	mov	r0, r3
 8009070:	3724      	adds	r7, #36	; 0x24
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr
	...

0800907c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3b01      	subs	r3, #1
 8009088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800908c:	d301      	bcc.n	8009092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800908e:	2301      	movs	r3, #1
 8009090:	e00f      	b.n	80090b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009092:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <SysTick_Config+0x40>)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	3b01      	subs	r3, #1
 8009098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800909a:	210f      	movs	r1, #15
 800909c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090a0:	f7ff ff8e 	bl	8008fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <SysTick_Config+0x40>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090aa:	4b04      	ldr	r3, [pc, #16]	; (80090bc <SysTick_Config+0x40>)
 80090ac:	2207      	movs	r2, #7
 80090ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	e000e010 	.word	0xe000e010

080090c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff ff29 	bl	8008f20 <__NVIC_SetPriorityGrouping>
}
 80090ce:	bf00      	nop
 80090d0:	3708      	adds	r7, #8
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	4603      	mov	r3, r0
 80090de:	60b9      	str	r1, [r7, #8]
 80090e0:	607a      	str	r2, [r7, #4]
 80090e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80090e4:	f7ff ff40 	bl	8008f68 <__NVIC_GetPriorityGrouping>
 80090e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	6978      	ldr	r0, [r7, #20]
 80090f0:	f7ff ff90 	bl	8009014 <NVIC_EncodePriority>
 80090f4:	4602      	mov	r2, r0
 80090f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7ff ff5f 	bl	8008fc0 <__NVIC_SetPriority>
}
 8009102:	bf00      	nop
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b082      	sub	sp, #8
 800910e:	af00      	add	r7, sp, #0
 8009110:	4603      	mov	r3, r0
 8009112:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009118:	4618      	mov	r0, r3
 800911a:	f7ff ff33 	bl	8008f84 <__NVIC_EnableIRQ>
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff ffa4 	bl	800907c <SysTick_Config>
 8009134:	4603      	mov	r3, r0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b086      	sub	sp, #24
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009148:	f7fe f92e 	bl	80073a8 <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e316      	b.n	8009786 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a66      	ldr	r2, [pc, #408]	; (80092f8 <HAL_DMA_Init+0x1b8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d04a      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a65      	ldr	r2, [pc, #404]	; (80092fc <HAL_DMA_Init+0x1bc>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d045      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a63      	ldr	r2, [pc, #396]	; (8009300 <HAL_DMA_Init+0x1c0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d040      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a62      	ldr	r2, [pc, #392]	; (8009304 <HAL_DMA_Init+0x1c4>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d03b      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a60      	ldr	r2, [pc, #384]	; (8009308 <HAL_DMA_Init+0x1c8>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d036      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a5f      	ldr	r2, [pc, #380]	; (800930c <HAL_DMA_Init+0x1cc>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d031      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a5d      	ldr	r2, [pc, #372]	; (8009310 <HAL_DMA_Init+0x1d0>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d02c      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a5c      	ldr	r2, [pc, #368]	; (8009314 <HAL_DMA_Init+0x1d4>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d027      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a5a      	ldr	r2, [pc, #360]	; (8009318 <HAL_DMA_Init+0x1d8>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d022      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a59      	ldr	r2, [pc, #356]	; (800931c <HAL_DMA_Init+0x1dc>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d01d      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a57      	ldr	r2, [pc, #348]	; (8009320 <HAL_DMA_Init+0x1e0>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d018      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a56      	ldr	r2, [pc, #344]	; (8009324 <HAL_DMA_Init+0x1e4>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d013      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a54      	ldr	r2, [pc, #336]	; (8009328 <HAL_DMA_Init+0x1e8>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d00e      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a53      	ldr	r2, [pc, #332]	; (800932c <HAL_DMA_Init+0x1ec>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d009      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a51      	ldr	r2, [pc, #324]	; (8009330 <HAL_DMA_Init+0x1f0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d004      	beq.n	80091f8 <HAL_DMA_Init+0xb8>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a50      	ldr	r2, [pc, #320]	; (8009334 <HAL_DMA_Init+0x1f4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d101      	bne.n	80091fc <HAL_DMA_Init+0xbc>
 80091f8:	2301      	movs	r3, #1
 80091fa:	e000      	b.n	80091fe <HAL_DMA_Init+0xbe>
 80091fc:	2300      	movs	r3, #0
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f000 813b 	beq.w	800947a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2202      	movs	r2, #2
 8009208:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a37      	ldr	r2, [pc, #220]	; (80092f8 <HAL_DMA_Init+0x1b8>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d04a      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	4a36      	ldr	r2, [pc, #216]	; (80092fc <HAL_DMA_Init+0x1bc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d045      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a34      	ldr	r2, [pc, #208]	; (8009300 <HAL_DMA_Init+0x1c0>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d040      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a33      	ldr	r2, [pc, #204]	; (8009304 <HAL_DMA_Init+0x1c4>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d03b      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a31      	ldr	r2, [pc, #196]	; (8009308 <HAL_DMA_Init+0x1c8>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d036      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a30      	ldr	r2, [pc, #192]	; (800930c <HAL_DMA_Init+0x1cc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d031      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a2e      	ldr	r2, [pc, #184]	; (8009310 <HAL_DMA_Init+0x1d0>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d02c      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a2d      	ldr	r2, [pc, #180]	; (8009314 <HAL_DMA_Init+0x1d4>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d027      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4a2b      	ldr	r2, [pc, #172]	; (8009318 <HAL_DMA_Init+0x1d8>)
 800926a:	4293      	cmp	r3, r2
 800926c:	d022      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a2a      	ldr	r2, [pc, #168]	; (800931c <HAL_DMA_Init+0x1dc>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d01d      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a28      	ldr	r2, [pc, #160]	; (8009320 <HAL_DMA_Init+0x1e0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d018      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a27      	ldr	r2, [pc, #156]	; (8009324 <HAL_DMA_Init+0x1e4>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a25      	ldr	r2, [pc, #148]	; (8009328 <HAL_DMA_Init+0x1e8>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00e      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4a24      	ldr	r2, [pc, #144]	; (800932c <HAL_DMA_Init+0x1ec>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d009      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a22      	ldr	r2, [pc, #136]	; (8009330 <HAL_DMA_Init+0x1f0>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d004      	beq.n	80092b4 <HAL_DMA_Init+0x174>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a21      	ldr	r2, [pc, #132]	; (8009334 <HAL_DMA_Init+0x1f4>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d108      	bne.n	80092c6 <HAL_DMA_Init+0x186>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f022 0201 	bic.w	r2, r2, #1
 80092c2:	601a      	str	r2, [r3, #0]
 80092c4:	e007      	b.n	80092d6 <HAL_DMA_Init+0x196>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0201 	bic.w	r2, r2, #1
 80092d4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092d6:	e02f      	b.n	8009338 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092d8:	f7fe f866 	bl	80073a8 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b05      	cmp	r3, #5
 80092e4:	d928      	bls.n	8009338 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2220      	movs	r2, #32
 80092ea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2203      	movs	r2, #3
 80092f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e246      	b.n	8009786 <HAL_DMA_Init+0x646>
 80092f8:	40020010 	.word	0x40020010
 80092fc:	40020028 	.word	0x40020028
 8009300:	40020040 	.word	0x40020040
 8009304:	40020058 	.word	0x40020058
 8009308:	40020070 	.word	0x40020070
 800930c:	40020088 	.word	0x40020088
 8009310:	400200a0 	.word	0x400200a0
 8009314:	400200b8 	.word	0x400200b8
 8009318:	40020410 	.word	0x40020410
 800931c:	40020428 	.word	0x40020428
 8009320:	40020440 	.word	0x40020440
 8009324:	40020458 	.word	0x40020458
 8009328:	40020470 	.word	0x40020470
 800932c:	40020488 	.word	0x40020488
 8009330:	400204a0 	.word	0x400204a0
 8009334:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1c8      	bne.n	80092d8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4b83      	ldr	r3, [pc, #524]	; (8009560 <HAL_DMA_Init+0x420>)
 8009352:	4013      	ands	r3, r2
 8009354:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800935e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800936a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	699b      	ldr	r3, [r3, #24]
 8009370:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009376:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	4313      	orrs	r3, r2
 8009382:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	2b04      	cmp	r3, #4
 800938a:	d107      	bne.n	800939c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009394:	4313      	orrs	r3, r2
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	4313      	orrs	r3, r2
 800939a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800939c:	4b71      	ldr	r3, [pc, #452]	; (8009564 <HAL_DMA_Init+0x424>)
 800939e:	681a      	ldr	r2, [r3, #0]
 80093a0:	4b71      	ldr	r3, [pc, #452]	; (8009568 <HAL_DMA_Init+0x428>)
 80093a2:	4013      	ands	r3, r2
 80093a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a8:	d328      	bcc.n	80093fc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b28      	cmp	r3, #40	; 0x28
 80093b0:	d903      	bls.n	80093ba <HAL_DMA_Init+0x27a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	2b2e      	cmp	r3, #46	; 0x2e
 80093b8:	d917      	bls.n	80093ea <HAL_DMA_Init+0x2aa>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2b3e      	cmp	r3, #62	; 0x3e
 80093c0:	d903      	bls.n	80093ca <HAL_DMA_Init+0x28a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b42      	cmp	r3, #66	; 0x42
 80093c8:	d90f      	bls.n	80093ea <HAL_DMA_Init+0x2aa>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	2b46      	cmp	r3, #70	; 0x46
 80093d0:	d903      	bls.n	80093da <HAL_DMA_Init+0x29a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b48      	cmp	r3, #72	; 0x48
 80093d8:	d907      	bls.n	80093ea <HAL_DMA_Init+0x2aa>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	2b4e      	cmp	r3, #78	; 0x4e
 80093e0:	d905      	bls.n	80093ee <HAL_DMA_Init+0x2ae>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2b52      	cmp	r3, #82	; 0x52
 80093e8:	d801      	bhi.n	80093ee <HAL_DMA_Init+0x2ae>
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <HAL_DMA_Init+0x2b0>
 80093ee:	2300      	movs	r3, #0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093fa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f023 0307 	bic.w	r3, r3, #7
 8009412:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	4313      	orrs	r3, r2
 800941c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b04      	cmp	r3, #4
 8009424:	d117      	bne.n	8009456 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942a:	697a      	ldr	r2, [r7, #20]
 800942c:	4313      	orrs	r3, r2
 800942e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00e      	beq.n	8009456 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f002 fb33 	bl	800baa4 <DMA_CheckFifoParam>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2240      	movs	r2, #64	; 0x40
 8009448:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e197      	b.n	8009786 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f002 fa6e 	bl	800b940 <DMA_CalcBaseAndBitshift>
 8009464:	4603      	mov	r3, r0
 8009466:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946c:	f003 031f 	and.w	r3, r3, #31
 8009470:	223f      	movs	r2, #63	; 0x3f
 8009472:	409a      	lsls	r2, r3
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	609a      	str	r2, [r3, #8]
 8009478:	e0cd      	b.n	8009616 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a3b      	ldr	r2, [pc, #236]	; (800956c <HAL_DMA_Init+0x42c>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d022      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a39      	ldr	r2, [pc, #228]	; (8009570 <HAL_DMA_Init+0x430>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d01d      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a38      	ldr	r2, [pc, #224]	; (8009574 <HAL_DMA_Init+0x434>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d018      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a36      	ldr	r2, [pc, #216]	; (8009578 <HAL_DMA_Init+0x438>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d013      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a35      	ldr	r2, [pc, #212]	; (800957c <HAL_DMA_Init+0x43c>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d00e      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a33      	ldr	r2, [pc, #204]	; (8009580 <HAL_DMA_Init+0x440>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d009      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a32      	ldr	r2, [pc, #200]	; (8009584 <HAL_DMA_Init+0x444>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d004      	beq.n	80094ca <HAL_DMA_Init+0x38a>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a30      	ldr	r2, [pc, #192]	; (8009588 <HAL_DMA_Init+0x448>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d101      	bne.n	80094ce <HAL_DMA_Init+0x38e>
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <HAL_DMA_Init+0x390>
 80094ce:	2300      	movs	r3, #0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8097 	beq.w	8009604 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4a24      	ldr	r2, [pc, #144]	; (800956c <HAL_DMA_Init+0x42c>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d021      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a22      	ldr	r2, [pc, #136]	; (8009570 <HAL_DMA_Init+0x430>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d01c      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a21      	ldr	r2, [pc, #132]	; (8009574 <HAL_DMA_Init+0x434>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d017      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a1f      	ldr	r2, [pc, #124]	; (8009578 <HAL_DMA_Init+0x438>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d012      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1e      	ldr	r2, [pc, #120]	; (800957c <HAL_DMA_Init+0x43c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00d      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1c      	ldr	r2, [pc, #112]	; (8009580 <HAL_DMA_Init+0x440>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d008      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1b      	ldr	r2, [pc, #108]	; (8009584 <HAL_DMA_Init+0x444>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d003      	beq.n	8009524 <HAL_DMA_Init+0x3e4>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a19      	ldr	r2, [pc, #100]	; (8009588 <HAL_DMA_Init+0x448>)
 8009522:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	4b13      	ldr	r3, [pc, #76]	; (800958c <HAL_DMA_Init+0x44c>)
 8009540:	4013      	ands	r3, r2
 8009542:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	2b40      	cmp	r3, #64	; 0x40
 800954a:	d021      	beq.n	8009590 <HAL_DMA_Init+0x450>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	2b80      	cmp	r3, #128	; 0x80
 8009552:	d102      	bne.n	800955a <HAL_DMA_Init+0x41a>
 8009554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009558:	e01b      	b.n	8009592 <HAL_DMA_Init+0x452>
 800955a:	2300      	movs	r3, #0
 800955c:	e019      	b.n	8009592 <HAL_DMA_Init+0x452>
 800955e:	bf00      	nop
 8009560:	fe10803f 	.word	0xfe10803f
 8009564:	5c001000 	.word	0x5c001000
 8009568:	ffff0000 	.word	0xffff0000
 800956c:	58025408 	.word	0x58025408
 8009570:	5802541c 	.word	0x5802541c
 8009574:	58025430 	.word	0x58025430
 8009578:	58025444 	.word	0x58025444
 800957c:	58025458 	.word	0x58025458
 8009580:	5802546c 	.word	0x5802546c
 8009584:	58025480 	.word	0x58025480
 8009588:	58025494 	.word	0x58025494
 800958c:	fffe000f 	.word	0xfffe000f
 8009590:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	68d2      	ldr	r2, [r2, #12]
 8009596:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009598:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80095a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	695b      	ldr	r3, [r3, #20]
 80095a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80095a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	699b      	ldr	r3, [r3, #24]
 80095ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80095b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80095b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a1b      	ldr	r3, [r3, #32]
 80095be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80095c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	461a      	mov	r2, r3
 80095d6:	4b6e      	ldr	r3, [pc, #440]	; (8009790 <HAL_DMA_Init+0x650>)
 80095d8:	4413      	add	r3, r2
 80095da:	4a6e      	ldr	r2, [pc, #440]	; (8009794 <HAL_DMA_Init+0x654>)
 80095dc:	fba2 2303 	umull	r2, r3, r2, r3
 80095e0:	091b      	lsrs	r3, r3, #4
 80095e2:	009a      	lsls	r2, r3, #2
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f002 f9a9 	bl	800b940 <DMA_CalcBaseAndBitshift>
 80095ee:	4603      	mov	r3, r0
 80095f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80095f6:	f003 031f 	and.w	r3, r3, #31
 80095fa:	2201      	movs	r2, #1
 80095fc:	409a      	lsls	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	e008      	b.n	8009616 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2240      	movs	r2, #64	; 0x40
 8009608:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2203      	movs	r2, #3
 800960e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e0b7      	b.n	8009786 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a5f      	ldr	r2, [pc, #380]	; (8009798 <HAL_DMA_Init+0x658>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d072      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a5d      	ldr	r2, [pc, #372]	; (800979c <HAL_DMA_Init+0x65c>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d06d      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a5c      	ldr	r2, [pc, #368]	; (80097a0 <HAL_DMA_Init+0x660>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d068      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a5a      	ldr	r2, [pc, #360]	; (80097a4 <HAL_DMA_Init+0x664>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d063      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a59      	ldr	r2, [pc, #356]	; (80097a8 <HAL_DMA_Init+0x668>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d05e      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a57      	ldr	r2, [pc, #348]	; (80097ac <HAL_DMA_Init+0x66c>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d059      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a56      	ldr	r2, [pc, #344]	; (80097b0 <HAL_DMA_Init+0x670>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d054      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a54      	ldr	r2, [pc, #336]	; (80097b4 <HAL_DMA_Init+0x674>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d04f      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a53      	ldr	r2, [pc, #332]	; (80097b8 <HAL_DMA_Init+0x678>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d04a      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a51      	ldr	r2, [pc, #324]	; (80097bc <HAL_DMA_Init+0x67c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d045      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a50      	ldr	r2, [pc, #320]	; (80097c0 <HAL_DMA_Init+0x680>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d040      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a4e      	ldr	r2, [pc, #312]	; (80097c4 <HAL_DMA_Init+0x684>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d03b      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	4a4d      	ldr	r2, [pc, #308]	; (80097c8 <HAL_DMA_Init+0x688>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d036      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a4b      	ldr	r2, [pc, #300]	; (80097cc <HAL_DMA_Init+0x68c>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d031      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a4a      	ldr	r2, [pc, #296]	; (80097d0 <HAL_DMA_Init+0x690>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d02c      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a48      	ldr	r2, [pc, #288]	; (80097d4 <HAL_DMA_Init+0x694>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d027      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a47      	ldr	r2, [pc, #284]	; (80097d8 <HAL_DMA_Init+0x698>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d022      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a45      	ldr	r2, [pc, #276]	; (80097dc <HAL_DMA_Init+0x69c>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d01d      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a44      	ldr	r2, [pc, #272]	; (80097e0 <HAL_DMA_Init+0x6a0>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d018      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a42      	ldr	r2, [pc, #264]	; (80097e4 <HAL_DMA_Init+0x6a4>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d013      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a41      	ldr	r2, [pc, #260]	; (80097e8 <HAL_DMA_Init+0x6a8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d00e      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4a3f      	ldr	r2, [pc, #252]	; (80097ec <HAL_DMA_Init+0x6ac>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d009      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a3e      	ldr	r2, [pc, #248]	; (80097f0 <HAL_DMA_Init+0x6b0>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d004      	beq.n	8009706 <HAL_DMA_Init+0x5c6>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	4a3c      	ldr	r2, [pc, #240]	; (80097f4 <HAL_DMA_Init+0x6b4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d101      	bne.n	800970a <HAL_DMA_Init+0x5ca>
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <HAL_DMA_Init+0x5cc>
 800970a:	2300      	movs	r3, #0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d032      	beq.n	8009776 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f002 fa43 	bl	800bb9c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	2b80      	cmp	r3, #128	; 0x80
 800971c:	d102      	bne.n	8009724 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685a      	ldr	r2, [r3, #4]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972c:	b2d2      	uxtb	r2, r2
 800972e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009738:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d010      	beq.n	8009764 <HAL_DMA_Init+0x624>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	2b08      	cmp	r3, #8
 8009748:	d80c      	bhi.n	8009764 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f002 fac0 	bl	800bcd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009760:	605a      	str	r2, [r3, #4]
 8009762:	e008      	b.n	8009776 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	a7fdabf8 	.word	0xa7fdabf8
 8009794:	cccccccd 	.word	0xcccccccd
 8009798:	40020010 	.word	0x40020010
 800979c:	40020028 	.word	0x40020028
 80097a0:	40020040 	.word	0x40020040
 80097a4:	40020058 	.word	0x40020058
 80097a8:	40020070 	.word	0x40020070
 80097ac:	40020088 	.word	0x40020088
 80097b0:	400200a0 	.word	0x400200a0
 80097b4:	400200b8 	.word	0x400200b8
 80097b8:	40020410 	.word	0x40020410
 80097bc:	40020428 	.word	0x40020428
 80097c0:	40020440 	.word	0x40020440
 80097c4:	40020458 	.word	0x40020458
 80097c8:	40020470 	.word	0x40020470
 80097cc:	40020488 	.word	0x40020488
 80097d0:	400204a0 	.word	0x400204a0
 80097d4:	400204b8 	.word	0x400204b8
 80097d8:	58025408 	.word	0x58025408
 80097dc:	5802541c 	.word	0x5802541c
 80097e0:	58025430 	.word	0x58025430
 80097e4:	58025444 	.word	0x58025444
 80097e8:	58025458 	.word	0x58025458
 80097ec:	5802546c 	.word	0x5802546c
 80097f0:	58025480 	.word	0x58025480
 80097f4:	58025494 	.word	0x58025494

080097f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009806:	2300      	movs	r3, #0
 8009808:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e226      	b.n	8009c62 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_DMA_Start_IT+0x2a>
 800981e:	2302      	movs	r3, #2
 8009820:	e21f      	b.n	8009c62 <HAL_DMA_Start_IT+0x46a>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b01      	cmp	r3, #1
 8009834:	f040 820a 	bne.w	8009c4c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a68      	ldr	r2, [pc, #416]	; (80099ec <HAL_DMA_Start_IT+0x1f4>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d04a      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a66      	ldr	r2, [pc, #408]	; (80099f0 <HAL_DMA_Start_IT+0x1f8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d045      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a65      	ldr	r2, [pc, #404]	; (80099f4 <HAL_DMA_Start_IT+0x1fc>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d040      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a63      	ldr	r2, [pc, #396]	; (80099f8 <HAL_DMA_Start_IT+0x200>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d03b      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a62      	ldr	r2, [pc, #392]	; (80099fc <HAL_DMA_Start_IT+0x204>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d036      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a60      	ldr	r2, [pc, #384]	; (8009a00 <HAL_DMA_Start_IT+0x208>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d031      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a5f      	ldr	r2, [pc, #380]	; (8009a04 <HAL_DMA_Start_IT+0x20c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d02c      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a5d      	ldr	r2, [pc, #372]	; (8009a08 <HAL_DMA_Start_IT+0x210>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d027      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a5c      	ldr	r2, [pc, #368]	; (8009a0c <HAL_DMA_Start_IT+0x214>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d022      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a5a      	ldr	r2, [pc, #360]	; (8009a10 <HAL_DMA_Start_IT+0x218>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d01d      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a59      	ldr	r2, [pc, #356]	; (8009a14 <HAL_DMA_Start_IT+0x21c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d018      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a57      	ldr	r2, [pc, #348]	; (8009a18 <HAL_DMA_Start_IT+0x220>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d013      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a56      	ldr	r2, [pc, #344]	; (8009a1c <HAL_DMA_Start_IT+0x224>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d00e      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a54      	ldr	r2, [pc, #336]	; (8009a20 <HAL_DMA_Start_IT+0x228>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d009      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a53      	ldr	r2, [pc, #332]	; (8009a24 <HAL_DMA_Start_IT+0x22c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d004      	beq.n	80098e6 <HAL_DMA_Start_IT+0xee>
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a51      	ldr	r2, [pc, #324]	; (8009a28 <HAL_DMA_Start_IT+0x230>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d108      	bne.n	80098f8 <HAL_DMA_Start_IT+0x100>
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0201 	bic.w	r2, r2, #1
 80098f4:	601a      	str	r2, [r3, #0]
 80098f6:	e007      	b.n	8009908 <HAL_DMA_Start_IT+0x110>
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	68b9      	ldr	r1, [r7, #8]
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f001 fe6a 	bl	800b5e8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a34      	ldr	r2, [pc, #208]	; (80099ec <HAL_DMA_Start_IT+0x1f4>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d04a      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a33      	ldr	r2, [pc, #204]	; (80099f0 <HAL_DMA_Start_IT+0x1f8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d045      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a31      	ldr	r2, [pc, #196]	; (80099f4 <HAL_DMA_Start_IT+0x1fc>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d040      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a30      	ldr	r2, [pc, #192]	; (80099f8 <HAL_DMA_Start_IT+0x200>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d03b      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a2e      	ldr	r2, [pc, #184]	; (80099fc <HAL_DMA_Start_IT+0x204>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d036      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a2d      	ldr	r2, [pc, #180]	; (8009a00 <HAL_DMA_Start_IT+0x208>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d031      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a2b      	ldr	r2, [pc, #172]	; (8009a04 <HAL_DMA_Start_IT+0x20c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d02c      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <HAL_DMA_Start_IT+0x210>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d027      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a28      	ldr	r2, [pc, #160]	; (8009a0c <HAL_DMA_Start_IT+0x214>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d022      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a27      	ldr	r2, [pc, #156]	; (8009a10 <HAL_DMA_Start_IT+0x218>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d01d      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a25      	ldr	r2, [pc, #148]	; (8009a14 <HAL_DMA_Start_IT+0x21c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d018      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a24      	ldr	r2, [pc, #144]	; (8009a18 <HAL_DMA_Start_IT+0x220>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d013      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <HAL_DMA_Start_IT+0x224>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d00e      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a21      	ldr	r2, [pc, #132]	; (8009a20 <HAL_DMA_Start_IT+0x228>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d009      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a1f      	ldr	r2, [pc, #124]	; (8009a24 <HAL_DMA_Start_IT+0x22c>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d004      	beq.n	80099b4 <HAL_DMA_Start_IT+0x1bc>
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a1e      	ldr	r2, [pc, #120]	; (8009a28 <HAL_DMA_Start_IT+0x230>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d101      	bne.n	80099b8 <HAL_DMA_Start_IT+0x1c0>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e000      	b.n	80099ba <HAL_DMA_Start_IT+0x1c2>
 80099b8:	2300      	movs	r3, #0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d036      	beq.n	8009a2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f023 021e 	bic.w	r2, r3, #30
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f042 0216 	orr.w	r2, r2, #22
 80099d0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d03e      	beq.n	8009a58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f042 0208 	orr.w	r2, r2, #8
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	e035      	b.n	8009a58 <HAL_DMA_Start_IT+0x260>
 80099ec:	40020010 	.word	0x40020010
 80099f0:	40020028 	.word	0x40020028
 80099f4:	40020040 	.word	0x40020040
 80099f8:	40020058 	.word	0x40020058
 80099fc:	40020070 	.word	0x40020070
 8009a00:	40020088 	.word	0x40020088
 8009a04:	400200a0 	.word	0x400200a0
 8009a08:	400200b8 	.word	0x400200b8
 8009a0c:	40020410 	.word	0x40020410
 8009a10:	40020428 	.word	0x40020428
 8009a14:	40020440 	.word	0x40020440
 8009a18:	40020458 	.word	0x40020458
 8009a1c:	40020470 	.word	0x40020470
 8009a20:	40020488 	.word	0x40020488
 8009a24:	400204a0 	.word	0x400204a0
 8009a28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f023 020e 	bic.w	r2, r3, #14
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 020a 	orr.w	r2, r2, #10
 8009a3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d007      	beq.n	8009a58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0204 	orr.w	r2, r2, #4
 8009a56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a83      	ldr	r2, [pc, #524]	; (8009c6c <HAL_DMA_Start_IT+0x474>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d072      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a82      	ldr	r2, [pc, #520]	; (8009c70 <HAL_DMA_Start_IT+0x478>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d06d      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a80      	ldr	r2, [pc, #512]	; (8009c74 <HAL_DMA_Start_IT+0x47c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d068      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a7f      	ldr	r2, [pc, #508]	; (8009c78 <HAL_DMA_Start_IT+0x480>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d063      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a7d      	ldr	r2, [pc, #500]	; (8009c7c <HAL_DMA_Start_IT+0x484>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d05e      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a7c      	ldr	r2, [pc, #496]	; (8009c80 <HAL_DMA_Start_IT+0x488>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d059      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a7a      	ldr	r2, [pc, #488]	; (8009c84 <HAL_DMA_Start_IT+0x48c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d054      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a79      	ldr	r2, [pc, #484]	; (8009c88 <HAL_DMA_Start_IT+0x490>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d04f      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a77      	ldr	r2, [pc, #476]	; (8009c8c <HAL_DMA_Start_IT+0x494>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d04a      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a76      	ldr	r2, [pc, #472]	; (8009c90 <HAL_DMA_Start_IT+0x498>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d045      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a74      	ldr	r2, [pc, #464]	; (8009c94 <HAL_DMA_Start_IT+0x49c>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d040      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a73      	ldr	r2, [pc, #460]	; (8009c98 <HAL_DMA_Start_IT+0x4a0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d03b      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a71      	ldr	r2, [pc, #452]	; (8009c9c <HAL_DMA_Start_IT+0x4a4>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d036      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a70      	ldr	r2, [pc, #448]	; (8009ca0 <HAL_DMA_Start_IT+0x4a8>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d031      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4a6e      	ldr	r2, [pc, #440]	; (8009ca4 <HAL_DMA_Start_IT+0x4ac>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d02c      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a6d      	ldr	r2, [pc, #436]	; (8009ca8 <HAL_DMA_Start_IT+0x4b0>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d027      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a6b      	ldr	r2, [pc, #428]	; (8009cac <HAL_DMA_Start_IT+0x4b4>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d022      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	4a6a      	ldr	r2, [pc, #424]	; (8009cb0 <HAL_DMA_Start_IT+0x4b8>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d01d      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a68      	ldr	r2, [pc, #416]	; (8009cb4 <HAL_DMA_Start_IT+0x4bc>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d018      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a67      	ldr	r2, [pc, #412]	; (8009cb8 <HAL_DMA_Start_IT+0x4c0>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d013      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a65      	ldr	r2, [pc, #404]	; (8009cbc <HAL_DMA_Start_IT+0x4c4>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d00e      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4a64      	ldr	r2, [pc, #400]	; (8009cc0 <HAL_DMA_Start_IT+0x4c8>)
 8009b30:	4293      	cmp	r3, r2
 8009b32:	d009      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a62      	ldr	r2, [pc, #392]	; (8009cc4 <HAL_DMA_Start_IT+0x4cc>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d004      	beq.n	8009b48 <HAL_DMA_Start_IT+0x350>
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	4a61      	ldr	r2, [pc, #388]	; (8009cc8 <HAL_DMA_Start_IT+0x4d0>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d101      	bne.n	8009b4c <HAL_DMA_Start_IT+0x354>
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e000      	b.n	8009b4e <HAL_DMA_Start_IT+0x356>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d01a      	beq.n	8009b88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d007      	beq.n	8009b88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a37      	ldr	r2, [pc, #220]	; (8009c6c <HAL_DMA_Start_IT+0x474>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d04a      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a36      	ldr	r2, [pc, #216]	; (8009c70 <HAL_DMA_Start_IT+0x478>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d045      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a34      	ldr	r2, [pc, #208]	; (8009c74 <HAL_DMA_Start_IT+0x47c>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d040      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a33      	ldr	r2, [pc, #204]	; (8009c78 <HAL_DMA_Start_IT+0x480>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d03b      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a31      	ldr	r2, [pc, #196]	; (8009c7c <HAL_DMA_Start_IT+0x484>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d036      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a30      	ldr	r2, [pc, #192]	; (8009c80 <HAL_DMA_Start_IT+0x488>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d031      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a2e      	ldr	r2, [pc, #184]	; (8009c84 <HAL_DMA_Start_IT+0x48c>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d02c      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a2d      	ldr	r2, [pc, #180]	; (8009c88 <HAL_DMA_Start_IT+0x490>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d027      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a2b      	ldr	r2, [pc, #172]	; (8009c8c <HAL_DMA_Start_IT+0x494>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d022      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a2a      	ldr	r2, [pc, #168]	; (8009c90 <HAL_DMA_Start_IT+0x498>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d01d      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a28      	ldr	r2, [pc, #160]	; (8009c94 <HAL_DMA_Start_IT+0x49c>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d018      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a27      	ldr	r2, [pc, #156]	; (8009c98 <HAL_DMA_Start_IT+0x4a0>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d013      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a25      	ldr	r2, [pc, #148]	; (8009c9c <HAL_DMA_Start_IT+0x4a4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00e      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a24      	ldr	r2, [pc, #144]	; (8009ca0 <HAL_DMA_Start_IT+0x4a8>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d009      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a22      	ldr	r2, [pc, #136]	; (8009ca4 <HAL_DMA_Start_IT+0x4ac>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d004      	beq.n	8009c28 <HAL_DMA_Start_IT+0x430>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a21      	ldr	r2, [pc, #132]	; (8009ca8 <HAL_DMA_Start_IT+0x4b0>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d108      	bne.n	8009c3a <HAL_DMA_Start_IT+0x442>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0201 	orr.w	r2, r2, #1
 8009c36:	601a      	str	r2, [r3, #0]
 8009c38:	e012      	b.n	8009c60 <HAL_DMA_Start_IT+0x468>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f042 0201 	orr.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]
 8009c4a:	e009      	b.n	8009c60 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3718      	adds	r7, #24
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	40020010 	.word	0x40020010
 8009c70:	40020028 	.word	0x40020028
 8009c74:	40020040 	.word	0x40020040
 8009c78:	40020058 	.word	0x40020058
 8009c7c:	40020070 	.word	0x40020070
 8009c80:	40020088 	.word	0x40020088
 8009c84:	400200a0 	.word	0x400200a0
 8009c88:	400200b8 	.word	0x400200b8
 8009c8c:	40020410 	.word	0x40020410
 8009c90:	40020428 	.word	0x40020428
 8009c94:	40020440 	.word	0x40020440
 8009c98:	40020458 	.word	0x40020458
 8009c9c:	40020470 	.word	0x40020470
 8009ca0:	40020488 	.word	0x40020488
 8009ca4:	400204a0 	.word	0x400204a0
 8009ca8:	400204b8 	.word	0x400204b8
 8009cac:	58025408 	.word	0x58025408
 8009cb0:	5802541c 	.word	0x5802541c
 8009cb4:	58025430 	.word	0x58025430
 8009cb8:	58025444 	.word	0x58025444
 8009cbc:	58025458 	.word	0x58025458
 8009cc0:	5802546c 	.word	0x5802546c
 8009cc4:	58025480 	.word	0x58025480
 8009cc8:	58025494 	.word	0x58025494

08009ccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b086      	sub	sp, #24
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8009cd4:	f7fd fb68 	bl	80073a8 <HAL_GetTick>
 8009cd8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e2dc      	b.n	800a29e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d008      	beq.n	8009d02 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2280      	movs	r2, #128	; 0x80
 8009cf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e2cd      	b.n	800a29e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a76      	ldr	r2, [pc, #472]	; (8009ee0 <HAL_DMA_Abort+0x214>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d04a      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a74      	ldr	r2, [pc, #464]	; (8009ee4 <HAL_DMA_Abort+0x218>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d045      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a73      	ldr	r2, [pc, #460]	; (8009ee8 <HAL_DMA_Abort+0x21c>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d040      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a71      	ldr	r2, [pc, #452]	; (8009eec <HAL_DMA_Abort+0x220>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d03b      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a70      	ldr	r2, [pc, #448]	; (8009ef0 <HAL_DMA_Abort+0x224>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d036      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a6e      	ldr	r2, [pc, #440]	; (8009ef4 <HAL_DMA_Abort+0x228>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d031      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a6d      	ldr	r2, [pc, #436]	; (8009ef8 <HAL_DMA_Abort+0x22c>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d02c      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a6b      	ldr	r2, [pc, #428]	; (8009efc <HAL_DMA_Abort+0x230>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d027      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a6a      	ldr	r2, [pc, #424]	; (8009f00 <HAL_DMA_Abort+0x234>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d022      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a68      	ldr	r2, [pc, #416]	; (8009f04 <HAL_DMA_Abort+0x238>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01d      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a67      	ldr	r2, [pc, #412]	; (8009f08 <HAL_DMA_Abort+0x23c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d018      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a65      	ldr	r2, [pc, #404]	; (8009f0c <HAL_DMA_Abort+0x240>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d013      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a64      	ldr	r2, [pc, #400]	; (8009f10 <HAL_DMA_Abort+0x244>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00e      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a62      	ldr	r2, [pc, #392]	; (8009f14 <HAL_DMA_Abort+0x248>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d009      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a61      	ldr	r2, [pc, #388]	; (8009f18 <HAL_DMA_Abort+0x24c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d004      	beq.n	8009da2 <HAL_DMA_Abort+0xd6>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a5f      	ldr	r2, [pc, #380]	; (8009f1c <HAL_DMA_Abort+0x250>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d101      	bne.n	8009da6 <HAL_DMA_Abort+0xda>
 8009da2:	2301      	movs	r3, #1
 8009da4:	e000      	b.n	8009da8 <HAL_DMA_Abort+0xdc>
 8009da6:	2300      	movs	r3, #0
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d013      	beq.n	8009dd4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 021e 	bic.w	r2, r2, #30
 8009dba:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	695a      	ldr	r2, [r3, #20]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dca:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	617b      	str	r3, [r7, #20]
 8009dd2:	e00a      	b.n	8009dea <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 020e 	bic.w	r2, r2, #14
 8009de2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a3c      	ldr	r2, [pc, #240]	; (8009ee0 <HAL_DMA_Abort+0x214>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d072      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a3a      	ldr	r2, [pc, #232]	; (8009ee4 <HAL_DMA_Abort+0x218>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d06d      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a39      	ldr	r2, [pc, #228]	; (8009ee8 <HAL_DMA_Abort+0x21c>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d068      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a37      	ldr	r2, [pc, #220]	; (8009eec <HAL_DMA_Abort+0x220>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d063      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a36      	ldr	r2, [pc, #216]	; (8009ef0 <HAL_DMA_Abort+0x224>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d05e      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a34      	ldr	r2, [pc, #208]	; (8009ef4 <HAL_DMA_Abort+0x228>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d059      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a33      	ldr	r2, [pc, #204]	; (8009ef8 <HAL_DMA_Abort+0x22c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d054      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a31      	ldr	r2, [pc, #196]	; (8009efc <HAL_DMA_Abort+0x230>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d04f      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a30      	ldr	r2, [pc, #192]	; (8009f00 <HAL_DMA_Abort+0x234>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d04a      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a2e      	ldr	r2, [pc, #184]	; (8009f04 <HAL_DMA_Abort+0x238>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d045      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a2d      	ldr	r2, [pc, #180]	; (8009f08 <HAL_DMA_Abort+0x23c>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d040      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a2b      	ldr	r2, [pc, #172]	; (8009f0c <HAL_DMA_Abort+0x240>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d03b      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a2a      	ldr	r2, [pc, #168]	; (8009f10 <HAL_DMA_Abort+0x244>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d036      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a28      	ldr	r2, [pc, #160]	; (8009f14 <HAL_DMA_Abort+0x248>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d031      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a27      	ldr	r2, [pc, #156]	; (8009f18 <HAL_DMA_Abort+0x24c>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d02c      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a25      	ldr	r2, [pc, #148]	; (8009f1c <HAL_DMA_Abort+0x250>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d027      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a24      	ldr	r2, [pc, #144]	; (8009f20 <HAL_DMA_Abort+0x254>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d022      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a22      	ldr	r2, [pc, #136]	; (8009f24 <HAL_DMA_Abort+0x258>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d01d      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a21      	ldr	r2, [pc, #132]	; (8009f28 <HAL_DMA_Abort+0x25c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d018      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a1f      	ldr	r2, [pc, #124]	; (8009f2c <HAL_DMA_Abort+0x260>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d013      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a1e      	ldr	r2, [pc, #120]	; (8009f30 <HAL_DMA_Abort+0x264>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d00e      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a1c      	ldr	r2, [pc, #112]	; (8009f34 <HAL_DMA_Abort+0x268>)
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	d009      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	4a1b      	ldr	r2, [pc, #108]	; (8009f38 <HAL_DMA_Abort+0x26c>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d004      	beq.n	8009eda <HAL_DMA_Abort+0x20e>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4a19      	ldr	r2, [pc, #100]	; (8009f3c <HAL_DMA_Abort+0x270>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d132      	bne.n	8009f40 <HAL_DMA_Abort+0x274>
 8009eda:	2301      	movs	r3, #1
 8009edc:	e031      	b.n	8009f42 <HAL_DMA_Abort+0x276>
 8009ede:	bf00      	nop
 8009ee0:	40020010 	.word	0x40020010
 8009ee4:	40020028 	.word	0x40020028
 8009ee8:	40020040 	.word	0x40020040
 8009eec:	40020058 	.word	0x40020058
 8009ef0:	40020070 	.word	0x40020070
 8009ef4:	40020088 	.word	0x40020088
 8009ef8:	400200a0 	.word	0x400200a0
 8009efc:	400200b8 	.word	0x400200b8
 8009f00:	40020410 	.word	0x40020410
 8009f04:	40020428 	.word	0x40020428
 8009f08:	40020440 	.word	0x40020440
 8009f0c:	40020458 	.word	0x40020458
 8009f10:	40020470 	.word	0x40020470
 8009f14:	40020488 	.word	0x40020488
 8009f18:	400204a0 	.word	0x400204a0
 8009f1c:	400204b8 	.word	0x400204b8
 8009f20:	58025408 	.word	0x58025408
 8009f24:	5802541c 	.word	0x5802541c
 8009f28:	58025430 	.word	0x58025430
 8009f2c:	58025444 	.word	0x58025444
 8009f30:	58025458 	.word	0x58025458
 8009f34:	5802546c 	.word	0x5802546c
 8009f38:	58025480 	.word	0x58025480
 8009f3c:	58025494 	.word	0x58025494
 8009f40:	2300      	movs	r3, #0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d007      	beq.n	8009f56 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f54:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a6d      	ldr	r2, [pc, #436]	; (800a110 <HAL_DMA_Abort+0x444>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d04a      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a6b      	ldr	r2, [pc, #428]	; (800a114 <HAL_DMA_Abort+0x448>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d045      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a6a      	ldr	r2, [pc, #424]	; (800a118 <HAL_DMA_Abort+0x44c>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d040      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a68      	ldr	r2, [pc, #416]	; (800a11c <HAL_DMA_Abort+0x450>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d03b      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a67      	ldr	r2, [pc, #412]	; (800a120 <HAL_DMA_Abort+0x454>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d036      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a65      	ldr	r2, [pc, #404]	; (800a124 <HAL_DMA_Abort+0x458>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d031      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a64      	ldr	r2, [pc, #400]	; (800a128 <HAL_DMA_Abort+0x45c>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d02c      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a62      	ldr	r2, [pc, #392]	; (800a12c <HAL_DMA_Abort+0x460>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d027      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a61      	ldr	r2, [pc, #388]	; (800a130 <HAL_DMA_Abort+0x464>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d022      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a5f      	ldr	r2, [pc, #380]	; (800a134 <HAL_DMA_Abort+0x468>)
 8009fb6:	4293      	cmp	r3, r2
 8009fb8:	d01d      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a5e      	ldr	r2, [pc, #376]	; (800a138 <HAL_DMA_Abort+0x46c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d018      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a5c      	ldr	r2, [pc, #368]	; (800a13c <HAL_DMA_Abort+0x470>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d013      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a5b      	ldr	r2, [pc, #364]	; (800a140 <HAL_DMA_Abort+0x474>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00e      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a59      	ldr	r2, [pc, #356]	; (800a144 <HAL_DMA_Abort+0x478>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d009      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a58      	ldr	r2, [pc, #352]	; (800a148 <HAL_DMA_Abort+0x47c>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d004      	beq.n	8009ff6 <HAL_DMA_Abort+0x32a>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a56      	ldr	r2, [pc, #344]	; (800a14c <HAL_DMA_Abort+0x480>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d108      	bne.n	800a008 <HAL_DMA_Abort+0x33c>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	e007      	b.n	800a018 <HAL_DMA_Abort+0x34c>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f022 0201 	bic.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a018:	e013      	b.n	800a042 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a01a:	f7fd f9c5 	bl	80073a8 <HAL_GetTick>
 800a01e:	4602      	mov	r2, r0
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	2b05      	cmp	r3, #5
 800a026:	d90c      	bls.n	800a042 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2203      	movs	r2, #3
 800a032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e12d      	b.n	800a29e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1e5      	bne.n	800a01a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a2f      	ldr	r2, [pc, #188]	; (800a110 <HAL_DMA_Abort+0x444>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d04a      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a2d      	ldr	r2, [pc, #180]	; (800a114 <HAL_DMA_Abort+0x448>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	d045      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a2c      	ldr	r2, [pc, #176]	; (800a118 <HAL_DMA_Abort+0x44c>)
 800a068:	4293      	cmp	r3, r2
 800a06a:	d040      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a2a      	ldr	r2, [pc, #168]	; (800a11c <HAL_DMA_Abort+0x450>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d03b      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a29      	ldr	r2, [pc, #164]	; (800a120 <HAL_DMA_Abort+0x454>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d036      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a27      	ldr	r2, [pc, #156]	; (800a124 <HAL_DMA_Abort+0x458>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d031      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a26      	ldr	r2, [pc, #152]	; (800a128 <HAL_DMA_Abort+0x45c>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d02c      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a24      	ldr	r2, [pc, #144]	; (800a12c <HAL_DMA_Abort+0x460>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d027      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a23      	ldr	r2, [pc, #140]	; (800a130 <HAL_DMA_Abort+0x464>)
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d022      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4a21      	ldr	r2, [pc, #132]	; (800a134 <HAL_DMA_Abort+0x468>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d01d      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a20      	ldr	r2, [pc, #128]	; (800a138 <HAL_DMA_Abort+0x46c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d018      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a1e      	ldr	r2, [pc, #120]	; (800a13c <HAL_DMA_Abort+0x470>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d013      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a1d      	ldr	r2, [pc, #116]	; (800a140 <HAL_DMA_Abort+0x474>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d00e      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a1b      	ldr	r2, [pc, #108]	; (800a144 <HAL_DMA_Abort+0x478>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d009      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a1a      	ldr	r2, [pc, #104]	; (800a148 <HAL_DMA_Abort+0x47c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d004      	beq.n	800a0ee <HAL_DMA_Abort+0x422>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a18      	ldr	r2, [pc, #96]	; (800a14c <HAL_DMA_Abort+0x480>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d101      	bne.n	800a0f2 <HAL_DMA_Abort+0x426>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e000      	b.n	800a0f4 <HAL_DMA_Abort+0x428>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d02b      	beq.n	800a150 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0fc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a102:	f003 031f 	and.w	r3, r3, #31
 800a106:	223f      	movs	r2, #63	; 0x3f
 800a108:	409a      	lsls	r2, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	609a      	str	r2, [r3, #8]
 800a10e:	e02a      	b.n	800a166 <HAL_DMA_Abort+0x49a>
 800a110:	40020010 	.word	0x40020010
 800a114:	40020028 	.word	0x40020028
 800a118:	40020040 	.word	0x40020040
 800a11c:	40020058 	.word	0x40020058
 800a120:	40020070 	.word	0x40020070
 800a124:	40020088 	.word	0x40020088
 800a128:	400200a0 	.word	0x400200a0
 800a12c:	400200b8 	.word	0x400200b8
 800a130:	40020410 	.word	0x40020410
 800a134:	40020428 	.word	0x40020428
 800a138:	40020440 	.word	0x40020440
 800a13c:	40020458 	.word	0x40020458
 800a140:	40020470 	.word	0x40020470
 800a144:	40020488 	.word	0x40020488
 800a148:	400204a0 	.word	0x400204a0
 800a14c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a154:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a15a:	f003 031f 	and.w	r3, r3, #31
 800a15e:	2201      	movs	r2, #1
 800a160:	409a      	lsls	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a4f      	ldr	r2, [pc, #316]	; (800a2a8 <HAL_DMA_Abort+0x5dc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d072      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a4d      	ldr	r2, [pc, #308]	; (800a2ac <HAL_DMA_Abort+0x5e0>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d06d      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a4c      	ldr	r2, [pc, #304]	; (800a2b0 <HAL_DMA_Abort+0x5e4>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d068      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a4a      	ldr	r2, [pc, #296]	; (800a2b4 <HAL_DMA_Abort+0x5e8>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d063      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a49      	ldr	r2, [pc, #292]	; (800a2b8 <HAL_DMA_Abort+0x5ec>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d05e      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a47      	ldr	r2, [pc, #284]	; (800a2bc <HAL_DMA_Abort+0x5f0>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d059      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a46      	ldr	r2, [pc, #280]	; (800a2c0 <HAL_DMA_Abort+0x5f4>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d054      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a44      	ldr	r2, [pc, #272]	; (800a2c4 <HAL_DMA_Abort+0x5f8>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d04f      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a43      	ldr	r2, [pc, #268]	; (800a2c8 <HAL_DMA_Abort+0x5fc>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d04a      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a41      	ldr	r2, [pc, #260]	; (800a2cc <HAL_DMA_Abort+0x600>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d045      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a40      	ldr	r2, [pc, #256]	; (800a2d0 <HAL_DMA_Abort+0x604>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d040      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a3e      	ldr	r2, [pc, #248]	; (800a2d4 <HAL_DMA_Abort+0x608>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d03b      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a3d      	ldr	r2, [pc, #244]	; (800a2d8 <HAL_DMA_Abort+0x60c>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d036      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4a3b      	ldr	r2, [pc, #236]	; (800a2dc <HAL_DMA_Abort+0x610>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d031      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a3a      	ldr	r2, [pc, #232]	; (800a2e0 <HAL_DMA_Abort+0x614>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d02c      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a38      	ldr	r2, [pc, #224]	; (800a2e4 <HAL_DMA_Abort+0x618>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d027      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4a37      	ldr	r2, [pc, #220]	; (800a2e8 <HAL_DMA_Abort+0x61c>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d022      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a35      	ldr	r2, [pc, #212]	; (800a2ec <HAL_DMA_Abort+0x620>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d01d      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a34      	ldr	r2, [pc, #208]	; (800a2f0 <HAL_DMA_Abort+0x624>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d018      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a32      	ldr	r2, [pc, #200]	; (800a2f4 <HAL_DMA_Abort+0x628>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d013      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a31      	ldr	r2, [pc, #196]	; (800a2f8 <HAL_DMA_Abort+0x62c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d00e      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a2f      	ldr	r2, [pc, #188]	; (800a2fc <HAL_DMA_Abort+0x630>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d009      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a2e      	ldr	r2, [pc, #184]	; (800a300 <HAL_DMA_Abort+0x634>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d004      	beq.n	800a256 <HAL_DMA_Abort+0x58a>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a2c      	ldr	r2, [pc, #176]	; (800a304 <HAL_DMA_Abort+0x638>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d101      	bne.n	800a25a <HAL_DMA_Abort+0x58e>
 800a256:	2301      	movs	r3, #1
 800a258:	e000      	b.n	800a25c <HAL_DMA_Abort+0x590>
 800a25a:	2300      	movs	r3, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d015      	beq.n	800a28c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a268:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00c      	beq.n	800a28c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a27c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a280:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	687a      	ldr	r2, [r7, #4]
 800a288:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a28a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	40020010 	.word	0x40020010
 800a2ac:	40020028 	.word	0x40020028
 800a2b0:	40020040 	.word	0x40020040
 800a2b4:	40020058 	.word	0x40020058
 800a2b8:	40020070 	.word	0x40020070
 800a2bc:	40020088 	.word	0x40020088
 800a2c0:	400200a0 	.word	0x400200a0
 800a2c4:	400200b8 	.word	0x400200b8
 800a2c8:	40020410 	.word	0x40020410
 800a2cc:	40020428 	.word	0x40020428
 800a2d0:	40020440 	.word	0x40020440
 800a2d4:	40020458 	.word	0x40020458
 800a2d8:	40020470 	.word	0x40020470
 800a2dc:	40020488 	.word	0x40020488
 800a2e0:	400204a0 	.word	0x400204a0
 800a2e4:	400204b8 	.word	0x400204b8
 800a2e8:	58025408 	.word	0x58025408
 800a2ec:	5802541c 	.word	0x5802541c
 800a2f0:	58025430 	.word	0x58025430
 800a2f4:	58025444 	.word	0x58025444
 800a2f8:	58025458 	.word	0x58025458
 800a2fc:	5802546c 	.word	0x5802546c
 800a300:	58025480 	.word	0x58025480
 800a304:	58025494 	.word	0x58025494

0800a308 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e237      	b.n	800a78a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b02      	cmp	r3, #2
 800a324:	d004      	beq.n	800a330 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2280      	movs	r2, #128	; 0x80
 800a32a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a32c:	2301      	movs	r3, #1
 800a32e:	e22c      	b.n	800a78a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a5c      	ldr	r2, [pc, #368]	; (800a4a8 <HAL_DMA_Abort_IT+0x1a0>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d04a      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a5b      	ldr	r2, [pc, #364]	; (800a4ac <HAL_DMA_Abort_IT+0x1a4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d045      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a59      	ldr	r2, [pc, #356]	; (800a4b0 <HAL_DMA_Abort_IT+0x1a8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d040      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a58      	ldr	r2, [pc, #352]	; (800a4b4 <HAL_DMA_Abort_IT+0x1ac>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d03b      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a56      	ldr	r2, [pc, #344]	; (800a4b8 <HAL_DMA_Abort_IT+0x1b0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d036      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a55      	ldr	r2, [pc, #340]	; (800a4bc <HAL_DMA_Abort_IT+0x1b4>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d031      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a53      	ldr	r2, [pc, #332]	; (800a4c0 <HAL_DMA_Abort_IT+0x1b8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d02c      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a52      	ldr	r2, [pc, #328]	; (800a4c4 <HAL_DMA_Abort_IT+0x1bc>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d027      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a50      	ldr	r2, [pc, #320]	; (800a4c8 <HAL_DMA_Abort_IT+0x1c0>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d022      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a4f      	ldr	r2, [pc, #316]	; (800a4cc <HAL_DMA_Abort_IT+0x1c4>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d01d      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a4d      	ldr	r2, [pc, #308]	; (800a4d0 <HAL_DMA_Abort_IT+0x1c8>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d018      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a4c      	ldr	r2, [pc, #304]	; (800a4d4 <HAL_DMA_Abort_IT+0x1cc>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d013      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a4a      	ldr	r2, [pc, #296]	; (800a4d8 <HAL_DMA_Abort_IT+0x1d0>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d00e      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a49      	ldr	r2, [pc, #292]	; (800a4dc <HAL_DMA_Abort_IT+0x1d4>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d009      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a47      	ldr	r2, [pc, #284]	; (800a4e0 <HAL_DMA_Abort_IT+0x1d8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d004      	beq.n	800a3d0 <HAL_DMA_Abort_IT+0xc8>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a46      	ldr	r2, [pc, #280]	; (800a4e4 <HAL_DMA_Abort_IT+0x1dc>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d101      	bne.n	800a3d4 <HAL_DMA_Abort_IT+0xcc>
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	e000      	b.n	800a3d6 <HAL_DMA_Abort_IT+0xce>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 8086 	beq.w	800a4e8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2204      	movs	r2, #4
 800a3e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a2f      	ldr	r2, [pc, #188]	; (800a4a8 <HAL_DMA_Abort_IT+0x1a0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d04a      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a2e      	ldr	r2, [pc, #184]	; (800a4ac <HAL_DMA_Abort_IT+0x1a4>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d045      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a2c      	ldr	r2, [pc, #176]	; (800a4b0 <HAL_DMA_Abort_IT+0x1a8>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d040      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a2b      	ldr	r2, [pc, #172]	; (800a4b4 <HAL_DMA_Abort_IT+0x1ac>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d03b      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a29      	ldr	r2, [pc, #164]	; (800a4b8 <HAL_DMA_Abort_IT+0x1b0>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d036      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a28      	ldr	r2, [pc, #160]	; (800a4bc <HAL_DMA_Abort_IT+0x1b4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d031      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a26      	ldr	r2, [pc, #152]	; (800a4c0 <HAL_DMA_Abort_IT+0x1b8>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d02c      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a25      	ldr	r2, [pc, #148]	; (800a4c4 <HAL_DMA_Abort_IT+0x1bc>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d027      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a23      	ldr	r2, [pc, #140]	; (800a4c8 <HAL_DMA_Abort_IT+0x1c0>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d022      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a22      	ldr	r2, [pc, #136]	; (800a4cc <HAL_DMA_Abort_IT+0x1c4>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d01d      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a20      	ldr	r2, [pc, #128]	; (800a4d0 <HAL_DMA_Abort_IT+0x1c8>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d018      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a1f      	ldr	r2, [pc, #124]	; (800a4d4 <HAL_DMA_Abort_IT+0x1cc>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d013      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a1d      	ldr	r2, [pc, #116]	; (800a4d8 <HAL_DMA_Abort_IT+0x1d0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00e      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4a1c      	ldr	r2, [pc, #112]	; (800a4dc <HAL_DMA_Abort_IT+0x1d4>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d009      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a1a      	ldr	r2, [pc, #104]	; (800a4e0 <HAL_DMA_Abort_IT+0x1d8>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d004      	beq.n	800a484 <HAL_DMA_Abort_IT+0x17c>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a19      	ldr	r2, [pc, #100]	; (800a4e4 <HAL_DMA_Abort_IT+0x1dc>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d108      	bne.n	800a496 <HAL_DMA_Abort_IT+0x18e>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	681a      	ldr	r2, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f022 0201 	bic.w	r2, r2, #1
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	e178      	b.n	800a788 <HAL_DMA_Abort_IT+0x480>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f022 0201 	bic.w	r2, r2, #1
 800a4a4:	601a      	str	r2, [r3, #0]
 800a4a6:	e16f      	b.n	800a788 <HAL_DMA_Abort_IT+0x480>
 800a4a8:	40020010 	.word	0x40020010
 800a4ac:	40020028 	.word	0x40020028
 800a4b0:	40020040 	.word	0x40020040
 800a4b4:	40020058 	.word	0x40020058
 800a4b8:	40020070 	.word	0x40020070
 800a4bc:	40020088 	.word	0x40020088
 800a4c0:	400200a0 	.word	0x400200a0
 800a4c4:	400200b8 	.word	0x400200b8
 800a4c8:	40020410 	.word	0x40020410
 800a4cc:	40020428 	.word	0x40020428
 800a4d0:	40020440 	.word	0x40020440
 800a4d4:	40020458 	.word	0x40020458
 800a4d8:	40020470 	.word	0x40020470
 800a4dc:	40020488 	.word	0x40020488
 800a4e0:	400204a0 	.word	0x400204a0
 800a4e4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f022 020e 	bic.w	r2, r2, #14
 800a4f6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a6c      	ldr	r2, [pc, #432]	; (800a6b0 <HAL_DMA_Abort_IT+0x3a8>)
 800a4fe:	4293      	cmp	r3, r2
 800a500:	d04a      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a6b      	ldr	r2, [pc, #428]	; (800a6b4 <HAL_DMA_Abort_IT+0x3ac>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d045      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a69      	ldr	r2, [pc, #420]	; (800a6b8 <HAL_DMA_Abort_IT+0x3b0>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d040      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a68      	ldr	r2, [pc, #416]	; (800a6bc <HAL_DMA_Abort_IT+0x3b4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d03b      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a66      	ldr	r2, [pc, #408]	; (800a6c0 <HAL_DMA_Abort_IT+0x3b8>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d036      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4a65      	ldr	r2, [pc, #404]	; (800a6c4 <HAL_DMA_Abort_IT+0x3bc>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d031      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a63      	ldr	r2, [pc, #396]	; (800a6c8 <HAL_DMA_Abort_IT+0x3c0>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d02c      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a62      	ldr	r2, [pc, #392]	; (800a6cc <HAL_DMA_Abort_IT+0x3c4>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d027      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a60      	ldr	r2, [pc, #384]	; (800a6d0 <HAL_DMA_Abort_IT+0x3c8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d022      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a5f      	ldr	r2, [pc, #380]	; (800a6d4 <HAL_DMA_Abort_IT+0x3cc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d01d      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a5d      	ldr	r2, [pc, #372]	; (800a6d8 <HAL_DMA_Abort_IT+0x3d0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d018      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a5c      	ldr	r2, [pc, #368]	; (800a6dc <HAL_DMA_Abort_IT+0x3d4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d013      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a5a      	ldr	r2, [pc, #360]	; (800a6e0 <HAL_DMA_Abort_IT+0x3d8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00e      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a59      	ldr	r2, [pc, #356]	; (800a6e4 <HAL_DMA_Abort_IT+0x3dc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d009      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a57      	ldr	r2, [pc, #348]	; (800a6e8 <HAL_DMA_Abort_IT+0x3e0>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d004      	beq.n	800a598 <HAL_DMA_Abort_IT+0x290>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a56      	ldr	r2, [pc, #344]	; (800a6ec <HAL_DMA_Abort_IT+0x3e4>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d108      	bne.n	800a5aa <HAL_DMA_Abort_IT+0x2a2>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0201 	bic.w	r2, r2, #1
 800a5a6:	601a      	str	r2, [r3, #0]
 800a5a8:	e007      	b.n	800a5ba <HAL_DMA_Abort_IT+0x2b2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0201 	bic.w	r2, r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a3c      	ldr	r2, [pc, #240]	; (800a6b0 <HAL_DMA_Abort_IT+0x3a8>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d072      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a3a      	ldr	r2, [pc, #232]	; (800a6b4 <HAL_DMA_Abort_IT+0x3ac>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d06d      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a39      	ldr	r2, [pc, #228]	; (800a6b8 <HAL_DMA_Abort_IT+0x3b0>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d068      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a37      	ldr	r2, [pc, #220]	; (800a6bc <HAL_DMA_Abort_IT+0x3b4>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d063      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a36      	ldr	r2, [pc, #216]	; (800a6c0 <HAL_DMA_Abort_IT+0x3b8>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d05e      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a34      	ldr	r2, [pc, #208]	; (800a6c4 <HAL_DMA_Abort_IT+0x3bc>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d059      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a33      	ldr	r2, [pc, #204]	; (800a6c8 <HAL_DMA_Abort_IT+0x3c0>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d054      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a31      	ldr	r2, [pc, #196]	; (800a6cc <HAL_DMA_Abort_IT+0x3c4>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d04f      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a30      	ldr	r2, [pc, #192]	; (800a6d0 <HAL_DMA_Abort_IT+0x3c8>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d04a      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a2e      	ldr	r2, [pc, #184]	; (800a6d4 <HAL_DMA_Abort_IT+0x3cc>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d045      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a2d      	ldr	r2, [pc, #180]	; (800a6d8 <HAL_DMA_Abort_IT+0x3d0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d040      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a2b      	ldr	r2, [pc, #172]	; (800a6dc <HAL_DMA_Abort_IT+0x3d4>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d03b      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a2a      	ldr	r2, [pc, #168]	; (800a6e0 <HAL_DMA_Abort_IT+0x3d8>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d036      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a28      	ldr	r2, [pc, #160]	; (800a6e4 <HAL_DMA_Abort_IT+0x3dc>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d031      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a27      	ldr	r2, [pc, #156]	; (800a6e8 <HAL_DMA_Abort_IT+0x3e0>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d02c      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a25      	ldr	r2, [pc, #148]	; (800a6ec <HAL_DMA_Abort_IT+0x3e4>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d027      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	4a24      	ldr	r2, [pc, #144]	; (800a6f0 <HAL_DMA_Abort_IT+0x3e8>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d022      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a22      	ldr	r2, [pc, #136]	; (800a6f4 <HAL_DMA_Abort_IT+0x3ec>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d01d      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a21      	ldr	r2, [pc, #132]	; (800a6f8 <HAL_DMA_Abort_IT+0x3f0>)
 800a674:	4293      	cmp	r3, r2
 800a676:	d018      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a1f      	ldr	r2, [pc, #124]	; (800a6fc <HAL_DMA_Abort_IT+0x3f4>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d013      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	4a1e      	ldr	r2, [pc, #120]	; (800a700 <HAL_DMA_Abort_IT+0x3f8>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d00e      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a1c      	ldr	r2, [pc, #112]	; (800a704 <HAL_DMA_Abort_IT+0x3fc>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d009      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a1b      	ldr	r2, [pc, #108]	; (800a708 <HAL_DMA_Abort_IT+0x400>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d004      	beq.n	800a6aa <HAL_DMA_Abort_IT+0x3a2>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a19      	ldr	r2, [pc, #100]	; (800a70c <HAL_DMA_Abort_IT+0x404>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d132      	bne.n	800a710 <HAL_DMA_Abort_IT+0x408>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e031      	b.n	800a712 <HAL_DMA_Abort_IT+0x40a>
 800a6ae:	bf00      	nop
 800a6b0:	40020010 	.word	0x40020010
 800a6b4:	40020028 	.word	0x40020028
 800a6b8:	40020040 	.word	0x40020040
 800a6bc:	40020058 	.word	0x40020058
 800a6c0:	40020070 	.word	0x40020070
 800a6c4:	40020088 	.word	0x40020088
 800a6c8:	400200a0 	.word	0x400200a0
 800a6cc:	400200b8 	.word	0x400200b8
 800a6d0:	40020410 	.word	0x40020410
 800a6d4:	40020428 	.word	0x40020428
 800a6d8:	40020440 	.word	0x40020440
 800a6dc:	40020458 	.word	0x40020458
 800a6e0:	40020470 	.word	0x40020470
 800a6e4:	40020488 	.word	0x40020488
 800a6e8:	400204a0 	.word	0x400204a0
 800a6ec:	400204b8 	.word	0x400204b8
 800a6f0:	58025408 	.word	0x58025408
 800a6f4:	5802541c 	.word	0x5802541c
 800a6f8:	58025430 	.word	0x58025430
 800a6fc:	58025444 	.word	0x58025444
 800a700:	58025458 	.word	0x58025458
 800a704:	5802546c 	.word	0x5802546c
 800a708:	58025480 	.word	0x58025480
 800a70c:	58025494 	.word	0x58025494
 800a710:	2300      	movs	r3, #0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d028      	beq.n	800a768 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a724:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a72a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a730:	f003 031f 	and.w	r3, r3, #31
 800a734:	2201      	movs	r2, #1
 800a736:	409a      	lsls	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a744:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a75c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a766:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a788:	2300      	movs	r3, #0
}
 800a78a:	4618      	mov	r0, r3
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop

0800a794 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b08a      	sub	sp, #40	; 0x28
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a79c:	2300      	movs	r3, #0
 800a79e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a7a0:	4b67      	ldr	r3, [pc, #412]	; (800a940 <HAL_DMA_IRQHandler+0x1ac>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	4a67      	ldr	r2, [pc, #412]	; (800a944 <HAL_DMA_IRQHandler+0x1b0>)
 800a7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7aa:	0a9b      	lsrs	r3, r3, #10
 800a7ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a7c0:	69fb      	ldr	r3, [r7, #28]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a5f      	ldr	r2, [pc, #380]	; (800a948 <HAL_DMA_IRQHandler+0x1b4>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d04a      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4a5d      	ldr	r2, [pc, #372]	; (800a94c <HAL_DMA_IRQHandler+0x1b8>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d045      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a5c      	ldr	r2, [pc, #368]	; (800a950 <HAL_DMA_IRQHandler+0x1bc>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d040      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	4a5a      	ldr	r2, [pc, #360]	; (800a954 <HAL_DMA_IRQHandler+0x1c0>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d03b      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4a59      	ldr	r2, [pc, #356]	; (800a958 <HAL_DMA_IRQHandler+0x1c4>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d036      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	4a57      	ldr	r2, [pc, #348]	; (800a95c <HAL_DMA_IRQHandler+0x1c8>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d031      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	4a56      	ldr	r2, [pc, #344]	; (800a960 <HAL_DMA_IRQHandler+0x1cc>)
 800a808:	4293      	cmp	r3, r2
 800a80a:	d02c      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a54      	ldr	r2, [pc, #336]	; (800a964 <HAL_DMA_IRQHandler+0x1d0>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d027      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a53      	ldr	r2, [pc, #332]	; (800a968 <HAL_DMA_IRQHandler+0x1d4>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d022      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a51      	ldr	r2, [pc, #324]	; (800a96c <HAL_DMA_IRQHandler+0x1d8>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d01d      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	4a50      	ldr	r2, [pc, #320]	; (800a970 <HAL_DMA_IRQHandler+0x1dc>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d018      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a4e      	ldr	r2, [pc, #312]	; (800a974 <HAL_DMA_IRQHandler+0x1e0>)
 800a83a:	4293      	cmp	r3, r2
 800a83c:	d013      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a4d      	ldr	r2, [pc, #308]	; (800a978 <HAL_DMA_IRQHandler+0x1e4>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00e      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	4a4b      	ldr	r2, [pc, #300]	; (800a97c <HAL_DMA_IRQHandler+0x1e8>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d009      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4a4a      	ldr	r2, [pc, #296]	; (800a980 <HAL_DMA_IRQHandler+0x1ec>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	d004      	beq.n	800a866 <HAL_DMA_IRQHandler+0xd2>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	4a48      	ldr	r2, [pc, #288]	; (800a984 <HAL_DMA_IRQHandler+0x1f0>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d101      	bne.n	800a86a <HAL_DMA_IRQHandler+0xd6>
 800a866:	2301      	movs	r3, #1
 800a868:	e000      	b.n	800a86c <HAL_DMA_IRQHandler+0xd8>
 800a86a:	2300      	movs	r3, #0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	f000 842b 	beq.w	800b0c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a876:	f003 031f 	and.w	r3, r3, #31
 800a87a:	2208      	movs	r2, #8
 800a87c:	409a      	lsls	r2, r3
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	4013      	ands	r3, r2
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 80a2 	beq.w	800a9cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a2e      	ldr	r2, [pc, #184]	; (800a948 <HAL_DMA_IRQHandler+0x1b4>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d04a      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a2d      	ldr	r2, [pc, #180]	; (800a94c <HAL_DMA_IRQHandler+0x1b8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d045      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a2b      	ldr	r2, [pc, #172]	; (800a950 <HAL_DMA_IRQHandler+0x1bc>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d040      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a2a      	ldr	r2, [pc, #168]	; (800a954 <HAL_DMA_IRQHandler+0x1c0>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d03b      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a28      	ldr	r2, [pc, #160]	; (800a958 <HAL_DMA_IRQHandler+0x1c4>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d036      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a27      	ldr	r2, [pc, #156]	; (800a95c <HAL_DMA_IRQHandler+0x1c8>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d031      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a25      	ldr	r2, [pc, #148]	; (800a960 <HAL_DMA_IRQHandler+0x1cc>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d02c      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a24      	ldr	r2, [pc, #144]	; (800a964 <HAL_DMA_IRQHandler+0x1d0>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d027      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a22      	ldr	r2, [pc, #136]	; (800a968 <HAL_DMA_IRQHandler+0x1d4>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d022      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a21      	ldr	r2, [pc, #132]	; (800a96c <HAL_DMA_IRQHandler+0x1d8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d01d      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a1f      	ldr	r2, [pc, #124]	; (800a970 <HAL_DMA_IRQHandler+0x1dc>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d018      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a1e      	ldr	r2, [pc, #120]	; (800a974 <HAL_DMA_IRQHandler+0x1e0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d013      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a1c      	ldr	r2, [pc, #112]	; (800a978 <HAL_DMA_IRQHandler+0x1e4>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d00e      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a1b      	ldr	r2, [pc, #108]	; (800a97c <HAL_DMA_IRQHandler+0x1e8>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d009      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a19      	ldr	r2, [pc, #100]	; (800a980 <HAL_DMA_IRQHandler+0x1ec>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d004      	beq.n	800a928 <HAL_DMA_IRQHandler+0x194>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a18      	ldr	r2, [pc, #96]	; (800a984 <HAL_DMA_IRQHandler+0x1f0>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d12f      	bne.n	800a988 <HAL_DMA_IRQHandler+0x1f4>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0304 	and.w	r3, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	bf14      	ite	ne
 800a936:	2301      	movne	r3, #1
 800a938:	2300      	moveq	r3, #0
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	e02e      	b.n	800a99c <HAL_DMA_IRQHandler+0x208>
 800a93e:	bf00      	nop
 800a940:	24000044 	.word	0x24000044
 800a944:	1b4e81b5 	.word	0x1b4e81b5
 800a948:	40020010 	.word	0x40020010
 800a94c:	40020028 	.word	0x40020028
 800a950:	40020040 	.word	0x40020040
 800a954:	40020058 	.word	0x40020058
 800a958:	40020070 	.word	0x40020070
 800a95c:	40020088 	.word	0x40020088
 800a960:	400200a0 	.word	0x400200a0
 800a964:	400200b8 	.word	0x400200b8
 800a968:	40020410 	.word	0x40020410
 800a96c:	40020428 	.word	0x40020428
 800a970:	40020440 	.word	0x40020440
 800a974:	40020458 	.word	0x40020458
 800a978:	40020470 	.word	0x40020470
 800a97c:	40020488 	.word	0x40020488
 800a980:	400204a0 	.word	0x400204a0
 800a984:	400204b8 	.word	0x400204b8
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b00      	cmp	r3, #0
 800a994:	bf14      	ite	ne
 800a996:	2301      	movne	r3, #1
 800a998:	2300      	moveq	r3, #0
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d015      	beq.n	800a9cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0204 	bic.w	r2, r2, #4
 800a9ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	409a      	lsls	r2, r3
 800a9bc:	6a3b      	ldr	r3, [r7, #32]
 800a9be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c4:	f043 0201 	orr.w	r2, r3, #1
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d0:	f003 031f 	and.w	r3, r3, #31
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9da:	f003 0301 	and.w	r3, r3, #1
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d06e      	beq.n	800aac0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a69      	ldr	r2, [pc, #420]	; (800ab8c <HAL_DMA_IRQHandler+0x3f8>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d04a      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a67      	ldr	r2, [pc, #412]	; (800ab90 <HAL_DMA_IRQHandler+0x3fc>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d045      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a66      	ldr	r2, [pc, #408]	; (800ab94 <HAL_DMA_IRQHandler+0x400>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d040      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a64      	ldr	r2, [pc, #400]	; (800ab98 <HAL_DMA_IRQHandler+0x404>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d03b      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	4a63      	ldr	r2, [pc, #396]	; (800ab9c <HAL_DMA_IRQHandler+0x408>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d036      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a61      	ldr	r2, [pc, #388]	; (800aba0 <HAL_DMA_IRQHandler+0x40c>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d031      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a60      	ldr	r2, [pc, #384]	; (800aba4 <HAL_DMA_IRQHandler+0x410>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d02c      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a5e      	ldr	r2, [pc, #376]	; (800aba8 <HAL_DMA_IRQHandler+0x414>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d027      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a5d      	ldr	r2, [pc, #372]	; (800abac <HAL_DMA_IRQHandler+0x418>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d022      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a5b      	ldr	r2, [pc, #364]	; (800abb0 <HAL_DMA_IRQHandler+0x41c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d01d      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a5a      	ldr	r2, [pc, #360]	; (800abb4 <HAL_DMA_IRQHandler+0x420>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d018      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a58      	ldr	r2, [pc, #352]	; (800abb8 <HAL_DMA_IRQHandler+0x424>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d013      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a57      	ldr	r2, [pc, #348]	; (800abbc <HAL_DMA_IRQHandler+0x428>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d00e      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a55      	ldr	r2, [pc, #340]	; (800abc0 <HAL_DMA_IRQHandler+0x42c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d009      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a54      	ldr	r2, [pc, #336]	; (800abc4 <HAL_DMA_IRQHandler+0x430>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d004      	beq.n	800aa82 <HAL_DMA_IRQHandler+0x2ee>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a52      	ldr	r2, [pc, #328]	; (800abc8 <HAL_DMA_IRQHandler+0x434>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d10a      	bne.n	800aa98 <HAL_DMA_IRQHandler+0x304>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	e003      	b.n	800aaa0 <HAL_DMA_IRQHandler+0x30c>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00d      	beq.n	800aac0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa8:	f003 031f 	and.w	r3, r3, #31
 800aaac:	2201      	movs	r2, #1
 800aaae:	409a      	lsls	r2, r3
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab8:	f043 0202 	orr.w	r2, r3, #2
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aac4:	f003 031f 	and.w	r3, r3, #31
 800aac8:	2204      	movs	r2, #4
 800aaca:	409a      	lsls	r2, r3
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	4013      	ands	r3, r2
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 808f 	beq.w	800abf4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a2c      	ldr	r2, [pc, #176]	; (800ab8c <HAL_DMA_IRQHandler+0x3f8>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d04a      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a2a      	ldr	r2, [pc, #168]	; (800ab90 <HAL_DMA_IRQHandler+0x3fc>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d045      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a29      	ldr	r2, [pc, #164]	; (800ab94 <HAL_DMA_IRQHandler+0x400>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d040      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a27      	ldr	r2, [pc, #156]	; (800ab98 <HAL_DMA_IRQHandler+0x404>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d03b      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a26      	ldr	r2, [pc, #152]	; (800ab9c <HAL_DMA_IRQHandler+0x408>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d036      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a24      	ldr	r2, [pc, #144]	; (800aba0 <HAL_DMA_IRQHandler+0x40c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d031      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a23      	ldr	r2, [pc, #140]	; (800aba4 <HAL_DMA_IRQHandler+0x410>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d02c      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a21      	ldr	r2, [pc, #132]	; (800aba8 <HAL_DMA_IRQHandler+0x414>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d027      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a20      	ldr	r2, [pc, #128]	; (800abac <HAL_DMA_IRQHandler+0x418>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d022      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1e      	ldr	r2, [pc, #120]	; (800abb0 <HAL_DMA_IRQHandler+0x41c>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d01d      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <HAL_DMA_IRQHandler+0x420>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d018      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4a1b      	ldr	r2, [pc, #108]	; (800abb8 <HAL_DMA_IRQHandler+0x424>)
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d013      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a1a      	ldr	r2, [pc, #104]	; (800abbc <HAL_DMA_IRQHandler+0x428>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d00e      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a18      	ldr	r2, [pc, #96]	; (800abc0 <HAL_DMA_IRQHandler+0x42c>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d009      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a17      	ldr	r2, [pc, #92]	; (800abc4 <HAL_DMA_IRQHandler+0x430>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d004      	beq.n	800ab76 <HAL_DMA_IRQHandler+0x3e2>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a15      	ldr	r2, [pc, #84]	; (800abc8 <HAL_DMA_IRQHandler+0x434>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d12a      	bne.n	800abcc <HAL_DMA_IRQHandler+0x438>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bf14      	ite	ne
 800ab84:	2301      	movne	r3, #1
 800ab86:	2300      	moveq	r3, #0
 800ab88:	b2db      	uxtb	r3, r3
 800ab8a:	e023      	b.n	800abd4 <HAL_DMA_IRQHandler+0x440>
 800ab8c:	40020010 	.word	0x40020010
 800ab90:	40020028 	.word	0x40020028
 800ab94:	40020040 	.word	0x40020040
 800ab98:	40020058 	.word	0x40020058
 800ab9c:	40020070 	.word	0x40020070
 800aba0:	40020088 	.word	0x40020088
 800aba4:	400200a0 	.word	0x400200a0
 800aba8:	400200b8 	.word	0x400200b8
 800abac:	40020410 	.word	0x40020410
 800abb0:	40020428 	.word	0x40020428
 800abb4:	40020440 	.word	0x40020440
 800abb8:	40020458 	.word	0x40020458
 800abbc:	40020470 	.word	0x40020470
 800abc0:	40020488 	.word	0x40020488
 800abc4:	400204a0 	.word	0x400204a0
 800abc8:	400204b8 	.word	0x400204b8
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2300      	movs	r3, #0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00d      	beq.n	800abf4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abdc:	f003 031f 	and.w	r3, r3, #31
 800abe0:	2204      	movs	r2, #4
 800abe2:	409a      	lsls	r2, r3
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abec:	f043 0204 	orr.w	r2, r3, #4
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf8:	f003 031f 	and.w	r3, r3, #31
 800abfc:	2210      	movs	r2, #16
 800abfe:	409a      	lsls	r2, r3
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	4013      	ands	r3, r2
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f000 80a6 	beq.w	800ad56 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a85      	ldr	r2, [pc, #532]	; (800ae24 <HAL_DMA_IRQHandler+0x690>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d04a      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a83      	ldr	r2, [pc, #524]	; (800ae28 <HAL_DMA_IRQHandler+0x694>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d045      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a82      	ldr	r2, [pc, #520]	; (800ae2c <HAL_DMA_IRQHandler+0x698>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d040      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a80      	ldr	r2, [pc, #512]	; (800ae30 <HAL_DMA_IRQHandler+0x69c>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d03b      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4a7f      	ldr	r2, [pc, #508]	; (800ae34 <HAL_DMA_IRQHandler+0x6a0>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d036      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a7d      	ldr	r2, [pc, #500]	; (800ae38 <HAL_DMA_IRQHandler+0x6a4>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d031      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a7c      	ldr	r2, [pc, #496]	; (800ae3c <HAL_DMA_IRQHandler+0x6a8>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d02c      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	4a7a      	ldr	r2, [pc, #488]	; (800ae40 <HAL_DMA_IRQHandler+0x6ac>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d027      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a79      	ldr	r2, [pc, #484]	; (800ae44 <HAL_DMA_IRQHandler+0x6b0>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d022      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a77      	ldr	r2, [pc, #476]	; (800ae48 <HAL_DMA_IRQHandler+0x6b4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d01d      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a76      	ldr	r2, [pc, #472]	; (800ae4c <HAL_DMA_IRQHandler+0x6b8>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d018      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a74      	ldr	r2, [pc, #464]	; (800ae50 <HAL_DMA_IRQHandler+0x6bc>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d013      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a73      	ldr	r2, [pc, #460]	; (800ae54 <HAL_DMA_IRQHandler+0x6c0>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d00e      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a71      	ldr	r2, [pc, #452]	; (800ae58 <HAL_DMA_IRQHandler+0x6c4>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d009      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a70      	ldr	r2, [pc, #448]	; (800ae5c <HAL_DMA_IRQHandler+0x6c8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d004      	beq.n	800acaa <HAL_DMA_IRQHandler+0x516>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a6e      	ldr	r2, [pc, #440]	; (800ae60 <HAL_DMA_IRQHandler+0x6cc>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d10a      	bne.n	800acc0 <HAL_DMA_IRQHandler+0x52c>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 0308 	and.w	r3, r3, #8
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bf14      	ite	ne
 800acb8:	2301      	movne	r3, #1
 800acba:	2300      	moveq	r3, #0
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	e009      	b.n	800acd4 <HAL_DMA_IRQHandler+0x540>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f003 0304 	and.w	r3, r3, #4
 800acca:	2b00      	cmp	r3, #0
 800accc:	bf14      	ite	ne
 800acce:	2301      	movne	r3, #1
 800acd0:	2300      	moveq	r3, #0
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d03e      	beq.n	800ad56 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acdc:	f003 031f 	and.w	r3, r3, #31
 800ace0:	2210      	movs	r2, #16
 800ace2:	409a      	lsls	r2, r3
 800ace4:	6a3b      	ldr	r3, [r7, #32]
 800ace6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d018      	beq.n	800ad28 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d108      	bne.n	800ad16 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d024      	beq.n	800ad56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	4798      	blx	r3
 800ad14:	e01f      	b.n	800ad56 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d01b      	beq.n	800ad56 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	4798      	blx	r3
 800ad26:	e016      	b.n	800ad56 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d107      	bne.n	800ad46 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f022 0208 	bic.w	r2, r2, #8
 800ad44:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad5a:	f003 031f 	and.w	r3, r3, #31
 800ad5e:	2220      	movs	r2, #32
 800ad60:	409a      	lsls	r2, r3
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	4013      	ands	r3, r2
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 8110 	beq.w	800af8c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4a2c      	ldr	r2, [pc, #176]	; (800ae24 <HAL_DMA_IRQHandler+0x690>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d04a      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a2b      	ldr	r2, [pc, #172]	; (800ae28 <HAL_DMA_IRQHandler+0x694>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d045      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a29      	ldr	r2, [pc, #164]	; (800ae2c <HAL_DMA_IRQHandler+0x698>)
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d040      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4a28      	ldr	r2, [pc, #160]	; (800ae30 <HAL_DMA_IRQHandler+0x69c>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d03b      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a26      	ldr	r2, [pc, #152]	; (800ae34 <HAL_DMA_IRQHandler+0x6a0>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d036      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4a25      	ldr	r2, [pc, #148]	; (800ae38 <HAL_DMA_IRQHandler+0x6a4>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d031      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a23      	ldr	r2, [pc, #140]	; (800ae3c <HAL_DMA_IRQHandler+0x6a8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d02c      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a22      	ldr	r2, [pc, #136]	; (800ae40 <HAL_DMA_IRQHandler+0x6ac>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d027      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a20      	ldr	r2, [pc, #128]	; (800ae44 <HAL_DMA_IRQHandler+0x6b0>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d022      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a1f      	ldr	r2, [pc, #124]	; (800ae48 <HAL_DMA_IRQHandler+0x6b4>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d01d      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a1d      	ldr	r2, [pc, #116]	; (800ae4c <HAL_DMA_IRQHandler+0x6b8>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d018      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a1c      	ldr	r2, [pc, #112]	; (800ae50 <HAL_DMA_IRQHandler+0x6bc>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d013      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a1a      	ldr	r2, [pc, #104]	; (800ae54 <HAL_DMA_IRQHandler+0x6c0>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d00e      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a19      	ldr	r2, [pc, #100]	; (800ae58 <HAL_DMA_IRQHandler+0x6c4>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d009      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a17      	ldr	r2, [pc, #92]	; (800ae5c <HAL_DMA_IRQHandler+0x6c8>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d004      	beq.n	800ae0c <HAL_DMA_IRQHandler+0x678>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a16      	ldr	r2, [pc, #88]	; (800ae60 <HAL_DMA_IRQHandler+0x6cc>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d12b      	bne.n	800ae64 <HAL_DMA_IRQHandler+0x6d0>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 0310 	and.w	r3, r3, #16
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	bf14      	ite	ne
 800ae1a:	2301      	movne	r3, #1
 800ae1c:	2300      	moveq	r3, #0
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	e02a      	b.n	800ae78 <HAL_DMA_IRQHandler+0x6e4>
 800ae22:	bf00      	nop
 800ae24:	40020010 	.word	0x40020010
 800ae28:	40020028 	.word	0x40020028
 800ae2c:	40020040 	.word	0x40020040
 800ae30:	40020058 	.word	0x40020058
 800ae34:	40020070 	.word	0x40020070
 800ae38:	40020088 	.word	0x40020088
 800ae3c:	400200a0 	.word	0x400200a0
 800ae40:	400200b8 	.word	0x400200b8
 800ae44:	40020410 	.word	0x40020410
 800ae48:	40020428 	.word	0x40020428
 800ae4c:	40020440 	.word	0x40020440
 800ae50:	40020458 	.word	0x40020458
 800ae54:	40020470 	.word	0x40020470
 800ae58:	40020488 	.word	0x40020488
 800ae5c:	400204a0 	.word	0x400204a0
 800ae60:	400204b8 	.word	0x400204b8
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0302 	and.w	r3, r3, #2
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bf14      	ite	ne
 800ae72:	2301      	movne	r3, #1
 800ae74:	2300      	moveq	r3, #0
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 8087 	beq.w	800af8c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae82:	f003 031f 	and.w	r3, r3, #31
 800ae86:	2220      	movs	r2, #32
 800ae88:	409a      	lsls	r2, r3
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	2b04      	cmp	r3, #4
 800ae98:	d139      	bne.n	800af0e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f022 0216 	bic.w	r2, r2, #22
 800aea8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	695a      	ldr	r2, [r3, #20]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aeb8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d103      	bne.n	800aeca <HAL_DMA_IRQHandler+0x736>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d007      	beq.n	800aeda <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f022 0208 	bic.w	r2, r2, #8
 800aed8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aede:	f003 031f 	and.w	r3, r3, #31
 800aee2:	223f      	movs	r2, #63	; 0x3f
 800aee4:	409a      	lsls	r2, r3
 800aee6:	6a3b      	ldr	r3, [r7, #32]
 800aee8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 834a 	beq.w	800b598 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	4798      	blx	r3
          }
          return;
 800af0c:	e344      	b.n	800b598 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d018      	beq.n	800af4e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d108      	bne.n	800af3c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d02c      	beq.n	800af8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
 800af3a:	e027      	b.n	800af8c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d023      	beq.n	800af8c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	4798      	blx	r3
 800af4c:	e01e      	b.n	800af8c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10f      	bne.n	800af7c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f022 0210 	bic.w	r2, r2, #16
 800af6a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2201      	movs	r2, #1
 800af70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af80:	2b00      	cmp	r3, #0
 800af82:	d003      	beq.n	800af8c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af90:	2b00      	cmp	r3, #0
 800af92:	f000 8306 	beq.w	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8088 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2204      	movs	r2, #4
 800afa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a7a      	ldr	r2, [pc, #488]	; (800b19c <HAL_DMA_IRQHandler+0xa08>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d04a      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a79      	ldr	r2, [pc, #484]	; (800b1a0 <HAL_DMA_IRQHandler+0xa0c>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d045      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a77      	ldr	r2, [pc, #476]	; (800b1a4 <HAL_DMA_IRQHandler+0xa10>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d040      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a76      	ldr	r2, [pc, #472]	; (800b1a8 <HAL_DMA_IRQHandler+0xa14>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d03b      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a74      	ldr	r2, [pc, #464]	; (800b1ac <HAL_DMA_IRQHandler+0xa18>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d036      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a73      	ldr	r2, [pc, #460]	; (800b1b0 <HAL_DMA_IRQHandler+0xa1c>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d031      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a71      	ldr	r2, [pc, #452]	; (800b1b4 <HAL_DMA_IRQHandler+0xa20>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d02c      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a70      	ldr	r2, [pc, #448]	; (800b1b8 <HAL_DMA_IRQHandler+0xa24>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d027      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a6e      	ldr	r2, [pc, #440]	; (800b1bc <HAL_DMA_IRQHandler+0xa28>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d022      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a6d      	ldr	r2, [pc, #436]	; (800b1c0 <HAL_DMA_IRQHandler+0xa2c>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d01d      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a6b      	ldr	r2, [pc, #428]	; (800b1c4 <HAL_DMA_IRQHandler+0xa30>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d018      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a6a      	ldr	r2, [pc, #424]	; (800b1c8 <HAL_DMA_IRQHandler+0xa34>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d013      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a68      	ldr	r2, [pc, #416]	; (800b1cc <HAL_DMA_IRQHandler+0xa38>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00e      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a67      	ldr	r2, [pc, #412]	; (800b1d0 <HAL_DMA_IRQHandler+0xa3c>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d009      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a65      	ldr	r2, [pc, #404]	; (800b1d4 <HAL_DMA_IRQHandler+0xa40>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d004      	beq.n	800b04c <HAL_DMA_IRQHandler+0x8b8>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a64      	ldr	r2, [pc, #400]	; (800b1d8 <HAL_DMA_IRQHandler+0xa44>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d108      	bne.n	800b05e <HAL_DMA_IRQHandler+0x8ca>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f022 0201 	bic.w	r2, r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	e007      	b.n	800b06e <HAL_DMA_IRQHandler+0x8da>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f022 0201 	bic.w	r2, r2, #1
 800b06c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	3301      	adds	r3, #1
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b076:	429a      	cmp	r2, r3
 800b078:	d307      	bcc.n	800b08a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d1f2      	bne.n	800b06e <HAL_DMA_IRQHandler+0x8da>
 800b088:	e000      	b.n	800b08c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b08a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d004      	beq.n	800b0a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2203      	movs	r2, #3
 800b09e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800b0a2:	e003      	b.n	800b0ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f000 8272 	beq.w	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	4798      	blx	r3
 800b0c6:	e26c      	b.n	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a43      	ldr	r2, [pc, #268]	; (800b1dc <HAL_DMA_IRQHandler+0xa48>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d022      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	4a42      	ldr	r2, [pc, #264]	; (800b1e0 <HAL_DMA_IRQHandler+0xa4c>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d01d      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a40      	ldr	r2, [pc, #256]	; (800b1e4 <HAL_DMA_IRQHandler+0xa50>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d018      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a3f      	ldr	r2, [pc, #252]	; (800b1e8 <HAL_DMA_IRQHandler+0xa54>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d013      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a3d      	ldr	r2, [pc, #244]	; (800b1ec <HAL_DMA_IRQHandler+0xa58>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d00e      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a3c      	ldr	r2, [pc, #240]	; (800b1f0 <HAL_DMA_IRQHandler+0xa5c>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d009      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4a3a      	ldr	r2, [pc, #232]	; (800b1f4 <HAL_DMA_IRQHandler+0xa60>)
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d004      	beq.n	800b118 <HAL_DMA_IRQHandler+0x984>
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	4a39      	ldr	r2, [pc, #228]	; (800b1f8 <HAL_DMA_IRQHandler+0xa64>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d101      	bne.n	800b11c <HAL_DMA_IRQHandler+0x988>
 800b118:	2301      	movs	r3, #1
 800b11a:	e000      	b.n	800b11e <HAL_DMA_IRQHandler+0x98a>
 800b11c:	2300      	movs	r3, #0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f000 823f 	beq.w	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b130:	f003 031f 	and.w	r3, r3, #31
 800b134:	2204      	movs	r2, #4
 800b136:	409a      	lsls	r2, r3
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	4013      	ands	r3, r2
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 80cd 	beq.w	800b2dc <HAL_DMA_IRQHandler+0xb48>
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	f003 0304 	and.w	r3, r3, #4
 800b148:	2b00      	cmp	r3, #0
 800b14a:	f000 80c7 	beq.w	800b2dc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b152:	f003 031f 	and.w	r3, r3, #31
 800b156:	2204      	movs	r2, #4
 800b158:	409a      	lsls	r2, r3
 800b15a:	69fb      	ldr	r3, [r7, #28]
 800b15c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d049      	beq.n	800b1fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d109      	bne.n	800b186 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 8210 	beq.w	800b59c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b184:	e20a      	b.n	800b59c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 8206 	beq.w	800b59c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b198:	e200      	b.n	800b59c <HAL_DMA_IRQHandler+0xe08>
 800b19a:	bf00      	nop
 800b19c:	40020010 	.word	0x40020010
 800b1a0:	40020028 	.word	0x40020028
 800b1a4:	40020040 	.word	0x40020040
 800b1a8:	40020058 	.word	0x40020058
 800b1ac:	40020070 	.word	0x40020070
 800b1b0:	40020088 	.word	0x40020088
 800b1b4:	400200a0 	.word	0x400200a0
 800b1b8:	400200b8 	.word	0x400200b8
 800b1bc:	40020410 	.word	0x40020410
 800b1c0:	40020428 	.word	0x40020428
 800b1c4:	40020440 	.word	0x40020440
 800b1c8:	40020458 	.word	0x40020458
 800b1cc:	40020470 	.word	0x40020470
 800b1d0:	40020488 	.word	0x40020488
 800b1d4:	400204a0 	.word	0x400204a0
 800b1d8:	400204b8 	.word	0x400204b8
 800b1dc:	58025408 	.word	0x58025408
 800b1e0:	5802541c 	.word	0x5802541c
 800b1e4:	58025430 	.word	0x58025430
 800b1e8:	58025444 	.word	0x58025444
 800b1ec:	58025458 	.word	0x58025458
 800b1f0:	5802546c 	.word	0x5802546c
 800b1f4:	58025480 	.word	0x58025480
 800b1f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	d160      	bne.n	800b2c8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a7f      	ldr	r2, [pc, #508]	; (800b408 <HAL_DMA_IRQHandler+0xc74>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d04a      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a7d      	ldr	r2, [pc, #500]	; (800b40c <HAL_DMA_IRQHandler+0xc78>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d045      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a7c      	ldr	r2, [pc, #496]	; (800b410 <HAL_DMA_IRQHandler+0xc7c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d040      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a7a      	ldr	r2, [pc, #488]	; (800b414 <HAL_DMA_IRQHandler+0xc80>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d03b      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a79      	ldr	r2, [pc, #484]	; (800b418 <HAL_DMA_IRQHandler+0xc84>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d036      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a77      	ldr	r2, [pc, #476]	; (800b41c <HAL_DMA_IRQHandler+0xc88>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d031      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a76      	ldr	r2, [pc, #472]	; (800b420 <HAL_DMA_IRQHandler+0xc8c>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d02c      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a74      	ldr	r2, [pc, #464]	; (800b424 <HAL_DMA_IRQHandler+0xc90>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d027      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a73      	ldr	r2, [pc, #460]	; (800b428 <HAL_DMA_IRQHandler+0xc94>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d022      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a71      	ldr	r2, [pc, #452]	; (800b42c <HAL_DMA_IRQHandler+0xc98>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d01d      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a70      	ldr	r2, [pc, #448]	; (800b430 <HAL_DMA_IRQHandler+0xc9c>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d018      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a6e      	ldr	r2, [pc, #440]	; (800b434 <HAL_DMA_IRQHandler+0xca0>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d013      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a6d      	ldr	r2, [pc, #436]	; (800b438 <HAL_DMA_IRQHandler+0xca4>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d00e      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a6b      	ldr	r2, [pc, #428]	; (800b43c <HAL_DMA_IRQHandler+0xca8>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d009      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a6a      	ldr	r2, [pc, #424]	; (800b440 <HAL_DMA_IRQHandler+0xcac>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d004      	beq.n	800b2a6 <HAL_DMA_IRQHandler+0xb12>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a68      	ldr	r2, [pc, #416]	; (800b444 <HAL_DMA_IRQHandler+0xcb0>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d108      	bne.n	800b2b8 <HAL_DMA_IRQHandler+0xb24>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f022 0208 	bic.w	r2, r2, #8
 800b2b4:	601a      	str	r2, [r3, #0]
 800b2b6:	e007      	b.n	800b2c8 <HAL_DMA_IRQHandler+0xb34>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 0204 	bic.w	r2, r2, #4
 800b2c6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 8165 	beq.w	800b59c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b2da:	e15f      	b.n	800b59c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2e0:	f003 031f 	and.w	r3, r3, #31
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	409a      	lsls	r2, r3
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f000 80c5 	beq.w	800b47c <HAL_DMA_IRQHandler+0xce8>
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	f000 80bf 	beq.w	800b47c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b302:	f003 031f 	and.w	r3, r3, #31
 800b306:	2202      	movs	r2, #2
 800b308:	409a      	lsls	r2, r3
 800b30a:	69fb      	ldr	r3, [r7, #28]
 800b30c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d018      	beq.n	800b34a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d109      	bne.n	800b336 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b326:	2b00      	cmp	r3, #0
 800b328:	f000 813a 	beq.w	800b5a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b334:	e134      	b.n	800b5a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 8130 	beq.w	800b5a0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b348:	e12a      	b.n	800b5a0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f003 0320 	and.w	r3, r3, #32
 800b350:	2b00      	cmp	r3, #0
 800b352:	f040 8089 	bne.w	800b468 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a2b      	ldr	r2, [pc, #172]	; (800b408 <HAL_DMA_IRQHandler+0xc74>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d04a      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4a29      	ldr	r2, [pc, #164]	; (800b40c <HAL_DMA_IRQHandler+0xc78>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d045      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	4a28      	ldr	r2, [pc, #160]	; (800b410 <HAL_DMA_IRQHandler+0xc7c>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d040      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a26      	ldr	r2, [pc, #152]	; (800b414 <HAL_DMA_IRQHandler+0xc80>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d03b      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a25      	ldr	r2, [pc, #148]	; (800b418 <HAL_DMA_IRQHandler+0xc84>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d036      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a23      	ldr	r2, [pc, #140]	; (800b41c <HAL_DMA_IRQHandler+0xc88>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d031      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a22      	ldr	r2, [pc, #136]	; (800b420 <HAL_DMA_IRQHandler+0xc8c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d02c      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a20      	ldr	r2, [pc, #128]	; (800b424 <HAL_DMA_IRQHandler+0xc90>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d027      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a1f      	ldr	r2, [pc, #124]	; (800b428 <HAL_DMA_IRQHandler+0xc94>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d022      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a1d      	ldr	r2, [pc, #116]	; (800b42c <HAL_DMA_IRQHandler+0xc98>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d01d      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a1c      	ldr	r2, [pc, #112]	; (800b430 <HAL_DMA_IRQHandler+0xc9c>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d018      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a1a      	ldr	r2, [pc, #104]	; (800b434 <HAL_DMA_IRQHandler+0xca0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d013      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a19      	ldr	r2, [pc, #100]	; (800b438 <HAL_DMA_IRQHandler+0xca4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00e      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a17      	ldr	r2, [pc, #92]	; (800b43c <HAL_DMA_IRQHandler+0xca8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d009      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a16      	ldr	r2, [pc, #88]	; (800b440 <HAL_DMA_IRQHandler+0xcac>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d004      	beq.n	800b3f6 <HAL_DMA_IRQHandler+0xc62>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a14      	ldr	r2, [pc, #80]	; (800b444 <HAL_DMA_IRQHandler+0xcb0>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d128      	bne.n	800b448 <HAL_DMA_IRQHandler+0xcb4>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0214 	bic.w	r2, r2, #20
 800b404:	601a      	str	r2, [r3, #0]
 800b406:	e027      	b.n	800b458 <HAL_DMA_IRQHandler+0xcc4>
 800b408:	40020010 	.word	0x40020010
 800b40c:	40020028 	.word	0x40020028
 800b410:	40020040 	.word	0x40020040
 800b414:	40020058 	.word	0x40020058
 800b418:	40020070 	.word	0x40020070
 800b41c:	40020088 	.word	0x40020088
 800b420:	400200a0 	.word	0x400200a0
 800b424:	400200b8 	.word	0x400200b8
 800b428:	40020410 	.word	0x40020410
 800b42c:	40020428 	.word	0x40020428
 800b430:	40020440 	.word	0x40020440
 800b434:	40020458 	.word	0x40020458
 800b438:	40020470 	.word	0x40020470
 800b43c:	40020488 	.word	0x40020488
 800b440:	400204a0 	.word	0x400204a0
 800b444:	400204b8 	.word	0x400204b8
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 020a 	bic.w	r2, r2, #10
 800b456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f000 8097 	beq.w	800b5a0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b47a:	e091      	b.n	800b5a0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b480:	f003 031f 	and.w	r3, r3, #31
 800b484:	2208      	movs	r2, #8
 800b486:	409a      	lsls	r2, r3
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	4013      	ands	r3, r2
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 8088 	beq.w	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	f003 0308 	and.w	r3, r3, #8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f000 8082 	beq.w	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a41      	ldr	r2, [pc, #260]	; (800b5a8 <HAL_DMA_IRQHandler+0xe14>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d04a      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a3f      	ldr	r2, [pc, #252]	; (800b5ac <HAL_DMA_IRQHandler+0xe18>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d045      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a3e      	ldr	r2, [pc, #248]	; (800b5b0 <HAL_DMA_IRQHandler+0xe1c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d040      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a3c      	ldr	r2, [pc, #240]	; (800b5b4 <HAL_DMA_IRQHandler+0xe20>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d03b      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a3b      	ldr	r2, [pc, #236]	; (800b5b8 <HAL_DMA_IRQHandler+0xe24>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d036      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a39      	ldr	r2, [pc, #228]	; (800b5bc <HAL_DMA_IRQHandler+0xe28>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d031      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a38      	ldr	r2, [pc, #224]	; (800b5c0 <HAL_DMA_IRQHandler+0xe2c>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d02c      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a36      	ldr	r2, [pc, #216]	; (800b5c4 <HAL_DMA_IRQHandler+0xe30>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d027      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a35      	ldr	r2, [pc, #212]	; (800b5c8 <HAL_DMA_IRQHandler+0xe34>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d022      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a33      	ldr	r2, [pc, #204]	; (800b5cc <HAL_DMA_IRQHandler+0xe38>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d01d      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a32      	ldr	r2, [pc, #200]	; (800b5d0 <HAL_DMA_IRQHandler+0xe3c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d018      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a30      	ldr	r2, [pc, #192]	; (800b5d4 <HAL_DMA_IRQHandler+0xe40>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d013      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a2f      	ldr	r2, [pc, #188]	; (800b5d8 <HAL_DMA_IRQHandler+0xe44>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d00e      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a2d      	ldr	r2, [pc, #180]	; (800b5dc <HAL_DMA_IRQHandler+0xe48>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d009      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a2c      	ldr	r2, [pc, #176]	; (800b5e0 <HAL_DMA_IRQHandler+0xe4c>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d004      	beq.n	800b53e <HAL_DMA_IRQHandler+0xdaa>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a2a      	ldr	r2, [pc, #168]	; (800b5e4 <HAL_DMA_IRQHandler+0xe50>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d108      	bne.n	800b550 <HAL_DMA_IRQHandler+0xdbc>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f022 021c 	bic.w	r2, r2, #28
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	e007      	b.n	800b560 <HAL_DMA_IRQHandler+0xdcc>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f022 020e 	bic.w	r2, r2, #14
 800b55e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b564:	f003 031f 	and.w	r3, r3, #31
 800b568:	2201      	movs	r2, #1
 800b56a:	409a      	lsls	r2, r3
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2201      	movs	r2, #1
 800b574:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2201      	movs	r2, #1
 800b57a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d009      	beq.n	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
 800b596:	e004      	b.n	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b598:	bf00      	nop
 800b59a:	e002      	b.n	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b59c:	bf00      	nop
 800b59e:	e000      	b.n	800b5a2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b5a0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b5a2:	3728      	adds	r7, #40	; 0x28
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}
 800b5a8:	40020010 	.word	0x40020010
 800b5ac:	40020028 	.word	0x40020028
 800b5b0:	40020040 	.word	0x40020040
 800b5b4:	40020058 	.word	0x40020058
 800b5b8:	40020070 	.word	0x40020070
 800b5bc:	40020088 	.word	0x40020088
 800b5c0:	400200a0 	.word	0x400200a0
 800b5c4:	400200b8 	.word	0x400200b8
 800b5c8:	40020410 	.word	0x40020410
 800b5cc:	40020428 	.word	0x40020428
 800b5d0:	40020440 	.word	0x40020440
 800b5d4:	40020458 	.word	0x40020458
 800b5d8:	40020470 	.word	0x40020470
 800b5dc:	40020488 	.word	0x40020488
 800b5e0:	400204a0 	.word	0x400204a0
 800b5e4:	400204b8 	.word	0x400204b8

0800b5e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	607a      	str	r2, [r7, #4]
 800b5f4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5fa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b600:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a7f      	ldr	r2, [pc, #508]	; (800b804 <DMA_SetConfig+0x21c>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d072      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a7d      	ldr	r2, [pc, #500]	; (800b808 <DMA_SetConfig+0x220>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d06d      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a7c      	ldr	r2, [pc, #496]	; (800b80c <DMA_SetConfig+0x224>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d068      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a7a      	ldr	r2, [pc, #488]	; (800b810 <DMA_SetConfig+0x228>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d063      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4a79      	ldr	r2, [pc, #484]	; (800b814 <DMA_SetConfig+0x22c>)
 800b630:	4293      	cmp	r3, r2
 800b632:	d05e      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a77      	ldr	r2, [pc, #476]	; (800b818 <DMA_SetConfig+0x230>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d059      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a76      	ldr	r2, [pc, #472]	; (800b81c <DMA_SetConfig+0x234>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d054      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a74      	ldr	r2, [pc, #464]	; (800b820 <DMA_SetConfig+0x238>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d04f      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a73      	ldr	r2, [pc, #460]	; (800b824 <DMA_SetConfig+0x23c>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d04a      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a71      	ldr	r2, [pc, #452]	; (800b828 <DMA_SetConfig+0x240>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d045      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a70      	ldr	r2, [pc, #448]	; (800b82c <DMA_SetConfig+0x244>)
 800b66c:	4293      	cmp	r3, r2
 800b66e:	d040      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a6e      	ldr	r2, [pc, #440]	; (800b830 <DMA_SetConfig+0x248>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d03b      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4a6d      	ldr	r2, [pc, #436]	; (800b834 <DMA_SetConfig+0x24c>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d036      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a6b      	ldr	r2, [pc, #428]	; (800b838 <DMA_SetConfig+0x250>)
 800b68a:	4293      	cmp	r3, r2
 800b68c:	d031      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	4a6a      	ldr	r2, [pc, #424]	; (800b83c <DMA_SetConfig+0x254>)
 800b694:	4293      	cmp	r3, r2
 800b696:	d02c      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a68      	ldr	r2, [pc, #416]	; (800b840 <DMA_SetConfig+0x258>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d027      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	4a67      	ldr	r2, [pc, #412]	; (800b844 <DMA_SetConfig+0x25c>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d022      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a65      	ldr	r2, [pc, #404]	; (800b848 <DMA_SetConfig+0x260>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d01d      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a64      	ldr	r2, [pc, #400]	; (800b84c <DMA_SetConfig+0x264>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d018      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a62      	ldr	r2, [pc, #392]	; (800b850 <DMA_SetConfig+0x268>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d013      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a61      	ldr	r2, [pc, #388]	; (800b854 <DMA_SetConfig+0x26c>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d00e      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a5f      	ldr	r2, [pc, #380]	; (800b858 <DMA_SetConfig+0x270>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d009      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a5e      	ldr	r2, [pc, #376]	; (800b85c <DMA_SetConfig+0x274>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d004      	beq.n	800b6f2 <DMA_SetConfig+0x10a>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a5c      	ldr	r2, [pc, #368]	; (800b860 <DMA_SetConfig+0x278>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d101      	bne.n	800b6f6 <DMA_SetConfig+0x10e>
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e000      	b.n	800b6f8 <DMA_SetConfig+0x110>
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00d      	beq.n	800b718 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b704:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d004      	beq.n	800b718 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b716:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a39      	ldr	r2, [pc, #228]	; (800b804 <DMA_SetConfig+0x21c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d04a      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a38      	ldr	r2, [pc, #224]	; (800b808 <DMA_SetConfig+0x220>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d045      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a36      	ldr	r2, [pc, #216]	; (800b80c <DMA_SetConfig+0x224>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d040      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a35      	ldr	r2, [pc, #212]	; (800b810 <DMA_SetConfig+0x228>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d03b      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a33      	ldr	r2, [pc, #204]	; (800b814 <DMA_SetConfig+0x22c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d036      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a32      	ldr	r2, [pc, #200]	; (800b818 <DMA_SetConfig+0x230>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d031      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a30      	ldr	r2, [pc, #192]	; (800b81c <DMA_SetConfig+0x234>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d02c      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a2f      	ldr	r2, [pc, #188]	; (800b820 <DMA_SetConfig+0x238>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d027      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a2d      	ldr	r2, [pc, #180]	; (800b824 <DMA_SetConfig+0x23c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d022      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a2c      	ldr	r2, [pc, #176]	; (800b828 <DMA_SetConfig+0x240>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d01d      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a2a      	ldr	r2, [pc, #168]	; (800b82c <DMA_SetConfig+0x244>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d018      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4a29      	ldr	r2, [pc, #164]	; (800b830 <DMA_SetConfig+0x248>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d013      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a27      	ldr	r2, [pc, #156]	; (800b834 <DMA_SetConfig+0x24c>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d00e      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a26      	ldr	r2, [pc, #152]	; (800b838 <DMA_SetConfig+0x250>)
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d009      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	4a24      	ldr	r2, [pc, #144]	; (800b83c <DMA_SetConfig+0x254>)
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d004      	beq.n	800b7b8 <DMA_SetConfig+0x1d0>
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4a23      	ldr	r2, [pc, #140]	; (800b840 <DMA_SetConfig+0x258>)
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d101      	bne.n	800b7bc <DMA_SetConfig+0x1d4>
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e000      	b.n	800b7be <DMA_SetConfig+0x1d6>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d059      	beq.n	800b876 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c6:	f003 031f 	and.w	r3, r3, #31
 800b7ca:	223f      	movs	r2, #63	; 0x3f
 800b7cc:	409a      	lsls	r2, r3
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b7e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	683a      	ldr	r2, [r7, #0]
 800b7e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	2b40      	cmp	r3, #64	; 0x40
 800b7f0:	d138      	bne.n	800b864 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68ba      	ldr	r2, [r7, #8]
 800b800:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b802:	e086      	b.n	800b912 <DMA_SetConfig+0x32a>
 800b804:	40020010 	.word	0x40020010
 800b808:	40020028 	.word	0x40020028
 800b80c:	40020040 	.word	0x40020040
 800b810:	40020058 	.word	0x40020058
 800b814:	40020070 	.word	0x40020070
 800b818:	40020088 	.word	0x40020088
 800b81c:	400200a0 	.word	0x400200a0
 800b820:	400200b8 	.word	0x400200b8
 800b824:	40020410 	.word	0x40020410
 800b828:	40020428 	.word	0x40020428
 800b82c:	40020440 	.word	0x40020440
 800b830:	40020458 	.word	0x40020458
 800b834:	40020470 	.word	0x40020470
 800b838:	40020488 	.word	0x40020488
 800b83c:	400204a0 	.word	0x400204a0
 800b840:	400204b8 	.word	0x400204b8
 800b844:	58025408 	.word	0x58025408
 800b848:	5802541c 	.word	0x5802541c
 800b84c:	58025430 	.word	0x58025430
 800b850:	58025444 	.word	0x58025444
 800b854:	58025458 	.word	0x58025458
 800b858:	5802546c 	.word	0x5802546c
 800b85c:	58025480 	.word	0x58025480
 800b860:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	60da      	str	r2, [r3, #12]
}
 800b874:	e04d      	b.n	800b912 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a29      	ldr	r2, [pc, #164]	; (800b920 <DMA_SetConfig+0x338>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d022      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a27      	ldr	r2, [pc, #156]	; (800b924 <DMA_SetConfig+0x33c>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d01d      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a26      	ldr	r2, [pc, #152]	; (800b928 <DMA_SetConfig+0x340>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d018      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	4a24      	ldr	r2, [pc, #144]	; (800b92c <DMA_SetConfig+0x344>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	d013      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a23      	ldr	r2, [pc, #140]	; (800b930 <DMA_SetConfig+0x348>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d00e      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a21      	ldr	r2, [pc, #132]	; (800b934 <DMA_SetConfig+0x34c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d009      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a20      	ldr	r2, [pc, #128]	; (800b938 <DMA_SetConfig+0x350>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d004      	beq.n	800b8c6 <DMA_SetConfig+0x2de>
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a1e      	ldr	r2, [pc, #120]	; (800b93c <DMA_SetConfig+0x354>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d101      	bne.n	800b8ca <DMA_SetConfig+0x2e2>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e000      	b.n	800b8cc <DMA_SetConfig+0x2e4>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d020      	beq.n	800b912 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8d4:	f003 031f 	and.w	r3, r3, #31
 800b8d8:	2201      	movs	r2, #1
 800b8da:	409a      	lsls	r2, r3
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	2b40      	cmp	r3, #64	; 0x40
 800b8ee:	d108      	bne.n	800b902 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	687a      	ldr	r2, [r7, #4]
 800b8f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	60da      	str	r2, [r3, #12]
}
 800b900:	e007      	b.n	800b912 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68ba      	ldr	r2, [r7, #8]
 800b908:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	60da      	str	r2, [r3, #12]
}
 800b912:	bf00      	nop
 800b914:	371c      	adds	r7, #28
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop
 800b920:	58025408 	.word	0x58025408
 800b924:	5802541c 	.word	0x5802541c
 800b928:	58025430 	.word	0x58025430
 800b92c:	58025444 	.word	0x58025444
 800b930:	58025458 	.word	0x58025458
 800b934:	5802546c 	.word	0x5802546c
 800b938:	58025480 	.word	0x58025480
 800b93c:	58025494 	.word	0x58025494

0800b940 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b940:	b480      	push	{r7}
 800b942:	b085      	sub	sp, #20
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	4a42      	ldr	r2, [pc, #264]	; (800ba58 <DMA_CalcBaseAndBitshift+0x118>)
 800b94e:	4293      	cmp	r3, r2
 800b950:	d04a      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a41      	ldr	r2, [pc, #260]	; (800ba5c <DMA_CalcBaseAndBitshift+0x11c>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	d045      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	4a3f      	ldr	r2, [pc, #252]	; (800ba60 <DMA_CalcBaseAndBitshift+0x120>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d040      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4a3e      	ldr	r2, [pc, #248]	; (800ba64 <DMA_CalcBaseAndBitshift+0x124>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d03b      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a3c      	ldr	r2, [pc, #240]	; (800ba68 <DMA_CalcBaseAndBitshift+0x128>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d036      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	4a3b      	ldr	r2, [pc, #236]	; (800ba6c <DMA_CalcBaseAndBitshift+0x12c>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d031      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a39      	ldr	r2, [pc, #228]	; (800ba70 <DMA_CalcBaseAndBitshift+0x130>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d02c      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a38      	ldr	r2, [pc, #224]	; (800ba74 <DMA_CalcBaseAndBitshift+0x134>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d027      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a36      	ldr	r2, [pc, #216]	; (800ba78 <DMA_CalcBaseAndBitshift+0x138>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d022      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4a35      	ldr	r2, [pc, #212]	; (800ba7c <DMA_CalcBaseAndBitshift+0x13c>)
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	d01d      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a33      	ldr	r2, [pc, #204]	; (800ba80 <DMA_CalcBaseAndBitshift+0x140>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d018      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a32      	ldr	r2, [pc, #200]	; (800ba84 <DMA_CalcBaseAndBitshift+0x144>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d013      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a30      	ldr	r2, [pc, #192]	; (800ba88 <DMA_CalcBaseAndBitshift+0x148>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d00e      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a2f      	ldr	r2, [pc, #188]	; (800ba8c <DMA_CalcBaseAndBitshift+0x14c>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d009      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a2d      	ldr	r2, [pc, #180]	; (800ba90 <DMA_CalcBaseAndBitshift+0x150>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d004      	beq.n	800b9e8 <DMA_CalcBaseAndBitshift+0xa8>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a2c      	ldr	r2, [pc, #176]	; (800ba94 <DMA_CalcBaseAndBitshift+0x154>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d101      	bne.n	800b9ec <DMA_CalcBaseAndBitshift+0xac>
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e000      	b.n	800b9ee <DMA_CalcBaseAndBitshift+0xae>
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d024      	beq.n	800ba3c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	3b10      	subs	r3, #16
 800b9fa:	4a27      	ldr	r2, [pc, #156]	; (800ba98 <DMA_CalcBaseAndBitshift+0x158>)
 800b9fc:	fba2 2303 	umull	r2, r3, r2, r3
 800ba00:	091b      	lsrs	r3, r3, #4
 800ba02:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	f003 0307 	and.w	r3, r3, #7
 800ba0a:	4a24      	ldr	r2, [pc, #144]	; (800ba9c <DMA_CalcBaseAndBitshift+0x15c>)
 800ba0c:	5cd3      	ldrb	r3, [r2, r3]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d908      	bls.n	800ba2c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	461a      	mov	r2, r3
 800ba20:	4b1f      	ldr	r3, [pc, #124]	; (800baa0 <DMA_CalcBaseAndBitshift+0x160>)
 800ba22:	4013      	ands	r3, r2
 800ba24:	1d1a      	adds	r2, r3, #4
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	659a      	str	r2, [r3, #88]	; 0x58
 800ba2a:	e00d      	b.n	800ba48 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	461a      	mov	r2, r3
 800ba32:	4b1b      	ldr	r3, [pc, #108]	; (800baa0 <DMA_CalcBaseAndBitshift+0x160>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	6593      	str	r3, [r2, #88]	; 0x58
 800ba3a:	e005      	b.n	800ba48 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	40020010 	.word	0x40020010
 800ba5c:	40020028 	.word	0x40020028
 800ba60:	40020040 	.word	0x40020040
 800ba64:	40020058 	.word	0x40020058
 800ba68:	40020070 	.word	0x40020070
 800ba6c:	40020088 	.word	0x40020088
 800ba70:	400200a0 	.word	0x400200a0
 800ba74:	400200b8 	.word	0x400200b8
 800ba78:	40020410 	.word	0x40020410
 800ba7c:	40020428 	.word	0x40020428
 800ba80:	40020440 	.word	0x40020440
 800ba84:	40020458 	.word	0x40020458
 800ba88:	40020470 	.word	0x40020470
 800ba8c:	40020488 	.word	0x40020488
 800ba90:	400204a0 	.word	0x400204a0
 800ba94:	400204b8 	.word	0x400204b8
 800ba98:	aaaaaaab 	.word	0xaaaaaaab
 800ba9c:	080176d8 	.word	0x080176d8
 800baa0:	fffffc00 	.word	0xfffffc00

0800baa4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800baac:	2300      	movs	r3, #0
 800baae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d120      	bne.n	800bafa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babc:	2b03      	cmp	r3, #3
 800babe:	d858      	bhi.n	800bb72 <DMA_CheckFifoParam+0xce>
 800bac0:	a201      	add	r2, pc, #4	; (adr r2, 800bac8 <DMA_CheckFifoParam+0x24>)
 800bac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac6:	bf00      	nop
 800bac8:	0800bad9 	.word	0x0800bad9
 800bacc:	0800baeb 	.word	0x0800baeb
 800bad0:	0800bad9 	.word	0x0800bad9
 800bad4:	0800bb73 	.word	0x0800bb73
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d048      	beq.n	800bb76 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bae8:	e045      	b.n	800bb76 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800baf2:	d142      	bne.n	800bb7a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800baf8:	e03f      	b.n	800bb7a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb02:	d123      	bne.n	800bb4c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb08:	2b03      	cmp	r3, #3
 800bb0a:	d838      	bhi.n	800bb7e <DMA_CheckFifoParam+0xda>
 800bb0c:	a201      	add	r2, pc, #4	; (adr r2, 800bb14 <DMA_CheckFifoParam+0x70>)
 800bb0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb12:	bf00      	nop
 800bb14:	0800bb25 	.word	0x0800bb25
 800bb18:	0800bb2b 	.word	0x0800bb2b
 800bb1c:	0800bb25 	.word	0x0800bb25
 800bb20:	0800bb3d 	.word	0x0800bb3d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	73fb      	strb	r3, [r7, #15]
        break;
 800bb28:	e030      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d025      	beq.n	800bb82 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800bb36:	2301      	movs	r3, #1
 800bb38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bb3a:	e022      	b.n	800bb82 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bb44:	d11f      	bne.n	800bb86 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800bb4a:	e01c      	b.n	800bb86 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d902      	bls.n	800bb5a <DMA_CheckFifoParam+0xb6>
 800bb54:	2b03      	cmp	r3, #3
 800bb56:	d003      	beq.n	800bb60 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800bb58:	e018      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	73fb      	strb	r3, [r7, #15]
        break;
 800bb5e:	e015      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00e      	beq.n	800bb8a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb70:	e00b      	b.n	800bb8a <DMA_CheckFifoParam+0xe6>
        break;
 800bb72:	bf00      	nop
 800bb74:	e00a      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        break;
 800bb76:	bf00      	nop
 800bb78:	e008      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        break;
 800bb7a:	bf00      	nop
 800bb7c:	e006      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        break;
 800bb7e:	bf00      	nop
 800bb80:	e004      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        break;
 800bb82:	bf00      	nop
 800bb84:	e002      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
        break;
 800bb86:	bf00      	nop
 800bb88:	e000      	b.n	800bb8c <DMA_CheckFifoParam+0xe8>
    break;
 800bb8a:	bf00      	nop
    }
  }

  return status;
 800bb8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop

0800bb9c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a38      	ldr	r2, [pc, #224]	; (800bc90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800bbb0:	4293      	cmp	r3, r2
 800bbb2:	d022      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	4a36      	ldr	r2, [pc, #216]	; (800bc94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d01d      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	4a35      	ldr	r2, [pc, #212]	; (800bc98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d018      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	4a33      	ldr	r2, [pc, #204]	; (800bc9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800bbce:	4293      	cmp	r3, r2
 800bbd0:	d013      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4a32      	ldr	r2, [pc, #200]	; (800bca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	d00e      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a30      	ldr	r2, [pc, #192]	; (800bca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d009      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	4a2f      	ldr	r2, [pc, #188]	; (800bca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800bbec:	4293      	cmp	r3, r2
 800bbee:	d004      	beq.n	800bbfa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a2d      	ldr	r2, [pc, #180]	; (800bcac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d101      	bne.n	800bbfe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01a      	beq.n	800bc3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	b2db      	uxtb	r3, r3
 800bc0a:	3b08      	subs	r3, #8
 800bc0c:	4a28      	ldr	r2, [pc, #160]	; (800bcb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800bc0e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4b26      	ldr	r3, [pc, #152]	; (800bcb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800bc1a:	4413      	add	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	461a      	mov	r2, r3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	4a24      	ldr	r2, [pc, #144]	; (800bcb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800bc28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	f003 031f 	and.w	r3, r3, #31
 800bc30:	2201      	movs	r2, #1
 800bc32:	409a      	lsls	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800bc38:	e024      	b.n	800bc84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	b2db      	uxtb	r3, r3
 800bc40:	3b10      	subs	r3, #16
 800bc42:	4a1e      	ldr	r2, [pc, #120]	; (800bcbc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800bc44:	fba2 2303 	umull	r2, r3, r2, r3
 800bc48:	091b      	lsrs	r3, r3, #4
 800bc4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	4a1c      	ldr	r2, [pc, #112]	; (800bcc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d806      	bhi.n	800bc62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	4a1b      	ldr	r2, [pc, #108]	; (800bcc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d902      	bls.n	800bc62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3308      	adds	r3, #8
 800bc60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4b18      	ldr	r3, [pc, #96]	; (800bcc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800bc66:	4413      	add	r3, r2
 800bc68:	009b      	lsls	r3, r3, #2
 800bc6a:	461a      	mov	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	4a16      	ldr	r2, [pc, #88]	; (800bccc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800bc74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f003 031f 	and.w	r3, r3, #31
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	409a      	lsls	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	669a      	str	r2, [r3, #104]	; 0x68
}
 800bc84:	bf00      	nop
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr
 800bc90:	58025408 	.word	0x58025408
 800bc94:	5802541c 	.word	0x5802541c
 800bc98:	58025430 	.word	0x58025430
 800bc9c:	58025444 	.word	0x58025444
 800bca0:	58025458 	.word	0x58025458
 800bca4:	5802546c 	.word	0x5802546c
 800bca8:	58025480 	.word	0x58025480
 800bcac:	58025494 	.word	0x58025494
 800bcb0:	cccccccd 	.word	0xcccccccd
 800bcb4:	16009600 	.word	0x16009600
 800bcb8:	58025880 	.word	0x58025880
 800bcbc:	aaaaaaab 	.word	0xaaaaaaab
 800bcc0:	400204b8 	.word	0x400204b8
 800bcc4:	4002040f 	.word	0x4002040f
 800bcc8:	10008200 	.word	0x10008200
 800bccc:	40020880 	.word	0x40020880

0800bcd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	685b      	ldr	r3, [r3, #4]
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d04a      	beq.n	800bd7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d847      	bhi.n	800bd7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a25      	ldr	r2, [pc, #148]	; (800bd88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d022      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a24      	ldr	r2, [pc, #144]	; (800bd8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d01d      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a22      	ldr	r2, [pc, #136]	; (800bd90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d018      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a21      	ldr	r2, [pc, #132]	; (800bd94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d013      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a1f      	ldr	r2, [pc, #124]	; (800bd98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d00e      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a1e      	ldr	r2, [pc, #120]	; (800bd9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d009      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a1c      	ldr	r2, [pc, #112]	; (800bda0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d004      	beq.n	800bd3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a1b      	ldr	r2, [pc, #108]	; (800bda4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d101      	bne.n	800bd40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e000      	b.n	800bd42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800bd40:	2300      	movs	r3, #0
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00a      	beq.n	800bd5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	4b17      	ldr	r3, [pc, #92]	; (800bda8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800bd4a:	4413      	add	r3, r2
 800bd4c:	009b      	lsls	r3, r3, #2
 800bd4e:	461a      	mov	r2, r3
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a15      	ldr	r2, [pc, #84]	; (800bdac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800bd58:	671a      	str	r2, [r3, #112]	; 0x70
 800bd5a:	e009      	b.n	800bd70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bd5c:	68fa      	ldr	r2, [r7, #12]
 800bd5e:	4b14      	ldr	r3, [pc, #80]	; (800bdb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800bd60:	4413      	add	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	461a      	mov	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a11      	ldr	r2, [pc, #68]	; (800bdb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800bd6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	2201      	movs	r2, #1
 800bd76:	409a      	lsls	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	58025408 	.word	0x58025408
 800bd8c:	5802541c 	.word	0x5802541c
 800bd90:	58025430 	.word	0x58025430
 800bd94:	58025444 	.word	0x58025444
 800bd98:	58025458 	.word	0x58025458
 800bd9c:	5802546c 	.word	0x5802546c
 800bda0:	58025480 	.word	0x58025480
 800bda4:	58025494 	.word	0x58025494
 800bda8:	1600963f 	.word	0x1600963f
 800bdac:	58025940 	.word	0x58025940
 800bdb0:	1000823f 	.word	0x1000823f
 800bdb4:	40020940 	.word	0x40020940

0800bdb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b089      	sub	sp, #36	; 0x24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800bdc6:	4b89      	ldr	r3, [pc, #548]	; (800bfec <HAL_GPIO_Init+0x234>)
 800bdc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800bdca:	e194      	b.n	800c0f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd8:	4013      	ands	r3, r2
 800bdda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	f000 8186 	beq.w	800c0f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	f003 0303 	and.w	r3, r3, #3
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d005      	beq.n	800bdfc <HAL_GPIO_Init+0x44>
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f003 0303 	and.w	r3, r3, #3
 800bdf8:	2b02      	cmp	r3, #2
 800bdfa:	d130      	bne.n	800be5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	689b      	ldr	r3, [r3, #8]
 800be00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	2203      	movs	r2, #3
 800be08:	fa02 f303 	lsl.w	r3, r2, r3
 800be0c:	43db      	mvns	r3, r3
 800be0e:	69ba      	ldr	r2, [r7, #24]
 800be10:	4013      	ands	r3, r2
 800be12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	68da      	ldr	r2, [r3, #12]
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	fa02 f303 	lsl.w	r3, r2, r3
 800be20:	69ba      	ldr	r2, [r7, #24]
 800be22:	4313      	orrs	r3, r2
 800be24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	69ba      	ldr	r2, [r7, #24]
 800be2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800be32:	2201      	movs	r2, #1
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	fa02 f303 	lsl.w	r3, r2, r3
 800be3a:	43db      	mvns	r3, r3
 800be3c:	69ba      	ldr	r2, [r7, #24]
 800be3e:	4013      	ands	r3, r2
 800be40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	091b      	lsrs	r3, r3, #4
 800be48:	f003 0201 	and.w	r2, r3, #1
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	69ba      	ldr	r2, [r7, #24]
 800be54:	4313      	orrs	r3, r2
 800be56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	69ba      	ldr	r2, [r7, #24]
 800be5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	f003 0303 	and.w	r3, r3, #3
 800be66:	2b03      	cmp	r3, #3
 800be68:	d017      	beq.n	800be9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	005b      	lsls	r3, r3, #1
 800be74:	2203      	movs	r2, #3
 800be76:	fa02 f303 	lsl.w	r3, r2, r3
 800be7a:	43db      	mvns	r3, r3
 800be7c:	69ba      	ldr	r2, [r7, #24]
 800be7e:	4013      	ands	r3, r2
 800be80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	69fb      	ldr	r3, [r7, #28]
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	fa02 f303 	lsl.w	r3, r2, r3
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	4313      	orrs	r3, r2
 800be92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	69ba      	ldr	r2, [r7, #24]
 800be98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f003 0303 	and.w	r3, r3, #3
 800bea2:	2b02      	cmp	r3, #2
 800bea4:	d123      	bne.n	800beee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	08da      	lsrs	r2, r3, #3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	3208      	adds	r2, #8
 800beae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f003 0307 	and.w	r3, r3, #7
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	220f      	movs	r2, #15
 800bebe:	fa02 f303 	lsl.w	r3, r2, r3
 800bec2:	43db      	mvns	r3, r3
 800bec4:	69ba      	ldr	r2, [r7, #24]
 800bec6:	4013      	ands	r3, r2
 800bec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	691a      	ldr	r2, [r3, #16]
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	f003 0307 	and.w	r3, r3, #7
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	fa02 f303 	lsl.w	r3, r2, r3
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	4313      	orrs	r3, r2
 800bede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	08da      	lsrs	r2, r3, #3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	3208      	adds	r2, #8
 800bee8:	69b9      	ldr	r1, [r7, #24]
 800beea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bef4:	69fb      	ldr	r3, [r7, #28]
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	2203      	movs	r2, #3
 800befa:	fa02 f303 	lsl.w	r3, r2, r3
 800befe:	43db      	mvns	r3, r3
 800bf00:	69ba      	ldr	r2, [r7, #24]
 800bf02:	4013      	ands	r3, r2
 800bf04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f003 0203 	and.w	r2, r3, #3
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	fa02 f303 	lsl.w	r3, r2, r3
 800bf16:	69ba      	ldr	r2, [r7, #24]
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	69ba      	ldr	r2, [r7, #24]
 800bf20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	f000 80e0 	beq.w	800c0f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bf30:	4b2f      	ldr	r3, [pc, #188]	; (800bff0 <HAL_GPIO_Init+0x238>)
 800bf32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf36:	4a2e      	ldr	r2, [pc, #184]	; (800bff0 <HAL_GPIO_Init+0x238>)
 800bf38:	f043 0302 	orr.w	r3, r3, #2
 800bf3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800bf40:	4b2b      	ldr	r3, [pc, #172]	; (800bff0 <HAL_GPIO_Init+0x238>)
 800bf42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	60fb      	str	r3, [r7, #12]
 800bf4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bf4e:	4a29      	ldr	r2, [pc, #164]	; (800bff4 <HAL_GPIO_Init+0x23c>)
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	089b      	lsrs	r3, r3, #2
 800bf54:	3302      	adds	r3, #2
 800bf56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800bf5c:	69fb      	ldr	r3, [r7, #28]
 800bf5e:	f003 0303 	and.w	r3, r3, #3
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	220f      	movs	r2, #15
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	69ba      	ldr	r2, [r7, #24]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a20      	ldr	r2, [pc, #128]	; (800bff8 <HAL_GPIO_Init+0x240>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d052      	beq.n	800c020 <HAL_GPIO_Init+0x268>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4a1f      	ldr	r2, [pc, #124]	; (800bffc <HAL_GPIO_Init+0x244>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d031      	beq.n	800bfe6 <HAL_GPIO_Init+0x22e>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	4a1e      	ldr	r2, [pc, #120]	; (800c000 <HAL_GPIO_Init+0x248>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d02b      	beq.n	800bfe2 <HAL_GPIO_Init+0x22a>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a1d      	ldr	r2, [pc, #116]	; (800c004 <HAL_GPIO_Init+0x24c>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d025      	beq.n	800bfde <HAL_GPIO_Init+0x226>
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a1c      	ldr	r2, [pc, #112]	; (800c008 <HAL_GPIO_Init+0x250>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d01f      	beq.n	800bfda <HAL_GPIO_Init+0x222>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a1b      	ldr	r2, [pc, #108]	; (800c00c <HAL_GPIO_Init+0x254>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d019      	beq.n	800bfd6 <HAL_GPIO_Init+0x21e>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	4a1a      	ldr	r2, [pc, #104]	; (800c010 <HAL_GPIO_Init+0x258>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d013      	beq.n	800bfd2 <HAL_GPIO_Init+0x21a>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a19      	ldr	r2, [pc, #100]	; (800c014 <HAL_GPIO_Init+0x25c>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d00d      	beq.n	800bfce <HAL_GPIO_Init+0x216>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a18      	ldr	r2, [pc, #96]	; (800c018 <HAL_GPIO_Init+0x260>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d007      	beq.n	800bfca <HAL_GPIO_Init+0x212>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a17      	ldr	r2, [pc, #92]	; (800c01c <HAL_GPIO_Init+0x264>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d101      	bne.n	800bfc6 <HAL_GPIO_Init+0x20e>
 800bfc2:	2309      	movs	r3, #9
 800bfc4:	e02d      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfc6:	230a      	movs	r3, #10
 800bfc8:	e02b      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfca:	2308      	movs	r3, #8
 800bfcc:	e029      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfce:	2307      	movs	r3, #7
 800bfd0:	e027      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfd2:	2306      	movs	r3, #6
 800bfd4:	e025      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfd6:	2305      	movs	r3, #5
 800bfd8:	e023      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfda:	2304      	movs	r3, #4
 800bfdc:	e021      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfde:	2303      	movs	r3, #3
 800bfe0:	e01f      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	e01d      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfe6:	2301      	movs	r3, #1
 800bfe8:	e01b      	b.n	800c022 <HAL_GPIO_Init+0x26a>
 800bfea:	bf00      	nop
 800bfec:	58000080 	.word	0x58000080
 800bff0:	58024400 	.word	0x58024400
 800bff4:	58000400 	.word	0x58000400
 800bff8:	58020000 	.word	0x58020000
 800bffc:	58020400 	.word	0x58020400
 800c000:	58020800 	.word	0x58020800
 800c004:	58020c00 	.word	0x58020c00
 800c008:	58021000 	.word	0x58021000
 800c00c:	58021400 	.word	0x58021400
 800c010:	58021800 	.word	0x58021800
 800c014:	58021c00 	.word	0x58021c00
 800c018:	58022000 	.word	0x58022000
 800c01c:	58022400 	.word	0x58022400
 800c020:	2300      	movs	r3, #0
 800c022:	69fa      	ldr	r2, [r7, #28]
 800c024:	f002 0203 	and.w	r2, r2, #3
 800c028:	0092      	lsls	r2, r2, #2
 800c02a:	4093      	lsls	r3, r2
 800c02c:	69ba      	ldr	r2, [r7, #24]
 800c02e:	4313      	orrs	r3, r2
 800c030:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c032:	4938      	ldr	r1, [pc, #224]	; (800c114 <HAL_GPIO_Init+0x35c>)
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	089b      	lsrs	r3, r3, #2
 800c038:	3302      	adds	r3, #2
 800c03a:	69ba      	ldr	r2, [r7, #24]
 800c03c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	43db      	mvns	r3, r3
 800c04c:	69ba      	ldr	r2, [r7, #24]
 800c04e:	4013      	ands	r3, r2
 800c050:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c05e:	69ba      	ldr	r2, [r7, #24]
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	4313      	orrs	r3, r2
 800c064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c06a:	69bb      	ldr	r3, [r7, #24]
 800c06c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c06e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	43db      	mvns	r3, r3
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	4013      	ands	r3, r2
 800c07e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d003      	beq.n	800c094 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c08c:	69ba      	ldr	r2, [r7, #24]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	4313      	orrs	r3, r2
 800c092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c094:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	43db      	mvns	r3, r3
 800c0a6:	69ba      	ldr	r2, [r7, #24]
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d003      	beq.n	800c0c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c0b8:	69ba      	ldr	r2, [r7, #24]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	43db      	mvns	r3, r3
 800c0d0:	69ba      	ldr	r2, [r7, #24]
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c0e2:	69ba      	ldr	r2, [r7, #24]
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4313      	orrs	r3, r2
 800c0e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	69ba      	ldr	r2, [r7, #24]
 800c0ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c0f0:	69fb      	ldr	r3, [r7, #28]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	fa22 f303 	lsr.w	r3, r2, r3
 800c100:	2b00      	cmp	r3, #0
 800c102:	f47f ae63 	bne.w	800bdcc <HAL_GPIO_Init+0x14>
  }
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	3724      	adds	r7, #36	; 0x24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c112:	4770      	bx	lr
 800c114:	58000400 	.word	0x58000400

0800c118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	691a      	ldr	r2, [r3, #16]
 800c128:	887b      	ldrh	r3, [r7, #2]
 800c12a:	4013      	ands	r3, r2
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d002      	beq.n	800c136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c130:	2301      	movs	r3, #1
 800c132:	73fb      	strb	r3, [r7, #15]
 800c134:	e001      	b.n	800c13a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c136:	2300      	movs	r3, #0
 800c138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3714      	adds	r7, #20
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
 800c150:	460b      	mov	r3, r1
 800c152:	807b      	strh	r3, [r7, #2]
 800c154:	4613      	mov	r3, r2
 800c156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c158:	787b      	ldrb	r3, [r7, #1]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c15e:	887a      	ldrh	r2, [r7, #2]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c164:	e003      	b.n	800c16e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c166:	887b      	ldrh	r3, [r7, #2]
 800c168:	041a      	lsls	r2, r3, #16
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	619a      	str	r2, [r3, #24]
}
 800c16e:	bf00      	nop
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c17a:	b480      	push	{r7}
 800c17c:	b085      	sub	sp, #20
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	460b      	mov	r3, r1
 800c184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c18c:	887a      	ldrh	r2, [r7, #2]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	4013      	ands	r3, r2
 800c192:	041a      	lsls	r2, r3, #16
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	43d9      	mvns	r1, r3
 800c198:	887b      	ldrh	r3, [r7, #2]
 800c19a:	400b      	ands	r3, r1
 800c19c:	431a      	orrs	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	619a      	str	r2, [r3, #24]
}
 800c1a2:	bf00      	nop
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800c1b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c1bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800c1c0:	88fb      	ldrh	r3, [r7, #6]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d008      	beq.n	800c1da <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c1c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c1cc:	88fb      	ldrh	r3, [r7, #6]
 800c1ce:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c1d2:	88fb      	ldrh	r3, [r7, #6]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f8 fc71 	bl	8004abc <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b084      	sub	sp, #16
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	e041      	b.n	800c278 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c1fc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f245 5255 	movw	r2, #21845	; 0x5555
 800c206:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	6852      	ldr	r2, [r2, #4]
 800c210:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	6892      	ldr	r2, [r2, #8]
 800c21a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c21c:	f7fb f8c4 	bl	80073a8 <HAL_GetTick>
 800c220:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c222:	e00f      	b.n	800c244 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c224:	f7fb f8c0 	bl	80073a8 <HAL_GetTick>
 800c228:	4602      	mov	r2, r0
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	1ad3      	subs	r3, r2, r3
 800c22e:	2b31      	cmp	r3, #49	; 0x31
 800c230:	d908      	bls.n	800c244 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	68db      	ldr	r3, [r3, #12]
 800c238:	f003 0307 	and.w	r3, r3, #7
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d001      	beq.n	800c244 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800c240:	2303      	movs	r3, #3
 800c242:	e019      	b.n	800c278 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	68db      	ldr	r3, [r3, #12]
 800c24a:	f003 0307 	and.w	r3, r3, #7
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d1e8      	bne.n	800c224 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	691a      	ldr	r2, [r3, #16]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d005      	beq.n	800c26c <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	68d2      	ldr	r2, [r2, #12]
 800c268:	611a      	str	r2, [r3, #16]
 800c26a:	e004      	b.n	800c276 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c276:	2300      	movs	r3, #0
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c280:	b480      	push	{r7}
 800c282:	b083      	sub	sp, #12
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c290:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	370c      	adds	r7, #12
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr

0800c2a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c2a8:	4b19      	ldr	r3, [pc, #100]	; (800c310 <HAL_PWREx_ConfigSupply+0x70>)
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	f003 0304 	and.w	r3, r3, #4
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d00a      	beq.n	800c2ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c2b4:	4b16      	ldr	r3, [pc, #88]	; (800c310 <HAL_PWREx_ConfigSupply+0x70>)
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	f003 0307 	and.w	r3, r3, #7
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d001      	beq.n	800c2c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e01f      	b.n	800c306 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e01d      	b.n	800c306 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c2ca:	4b11      	ldr	r3, [pc, #68]	; (800c310 <HAL_PWREx_ConfigSupply+0x70>)
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	f023 0207 	bic.w	r2, r3, #7
 800c2d2:	490f      	ldr	r1, [pc, #60]	; (800c310 <HAL_PWREx_ConfigSupply+0x70>)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c2da:	f7fb f865 	bl	80073a8 <HAL_GetTick>
 800c2de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c2e0:	e009      	b.n	800c2f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c2e2:	f7fb f861 	bl	80073a8 <HAL_GetTick>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2f0:	d901      	bls.n	800c2f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e007      	b.n	800c306 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c2f6:	4b06      	ldr	r3, [pc, #24]	; (800c310 <HAL_PWREx_ConfigSupply+0x70>)
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c302:	d1ee      	bne.n	800c2e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	58024800 	.word	0x58024800

0800c314 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af02      	add	r7, sp, #8
 800c31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c31c:	f7fb f844 	bl	80073a8 <HAL_GetTick>
 800c320:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	e05f      	b.n	800c3ec <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d107      	bne.n	800c348 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f7fa fb07 	bl	800694c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800c33e:	f241 3188 	movw	r1, #5000	; 0x1388
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fa5e 	bl	800c804 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	3b01      	subs	r3, #1
 800c358:	021a      	lsls	r2, r3, #8
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c366:	9300      	str	r3, [sp, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2200      	movs	r2, #0
 800c36c:	2120      	movs	r1, #32
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa56 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c374:	4603      	mov	r3, r0
 800c376:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800c378:	7afb      	ldrb	r3, [r7, #11]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d135      	bne.n	800c3ea <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	4b1b      	ldr	r3, [pc, #108]	; (800c3f4 <HAL_QSPI_Init+0xe0>)
 800c386:	4013      	ands	r3, r2
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	6852      	ldr	r2, [r2, #4]
 800c38c:	0611      	lsls	r1, r2, #24
 800c38e:	687a      	ldr	r2, [r7, #4]
 800c390:	68d2      	ldr	r2, [r2, #12]
 800c392:	4311      	orrs	r1, r2
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	69d2      	ldr	r2, [r2, #28]
 800c398:	4311      	orrs	r1, r2
 800c39a:	687a      	ldr	r2, [r7, #4]
 800c39c:	6a12      	ldr	r2, [r2, #32]
 800c39e:	4311      	orrs	r1, r2
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	6812      	ldr	r2, [r2, #0]
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685a      	ldr	r2, [r3, #4]
 800c3ae:	4b12      	ldr	r3, [pc, #72]	; (800c3f8 <HAL_QSPI_Init+0xe4>)
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	6912      	ldr	r2, [r2, #16]
 800c3b6:	0411      	lsls	r1, r2, #16
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	6952      	ldr	r2, [r2, #20]
 800c3bc:	4311      	orrs	r1, r2
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	6992      	ldr	r2, [r2, #24]
 800c3c2:	4311      	orrs	r1, r2
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	6812      	ldr	r2, [r2, #0]
 800c3c8:	430b      	orrs	r3, r1
 800c3ca:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681a      	ldr	r2, [r3, #0]
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f042 0201 	orr.w	r2, r2, #1
 800c3da:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800c3ea:	7afb      	ldrb	r3, [r7, #11]
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3710      	adds	r7, #16
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}
 800c3f4:	00ffff2f 	.word	0x00ffff2f
 800c3f8:	ffe0f8fe 	.word	0xffe0f8fe

0800c3fc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b088      	sub	sp, #32
 800c400:	af02      	add	r7, sp, #8
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c408:	f7fa ffce 	bl	80073a8 <HAL_GetTick>
 800c40c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b01      	cmp	r3, #1
 800c418:	d101      	bne.n	800c41e <HAL_QSPI_Command+0x22>
 800c41a:	2302      	movs	r3, #2
 800c41c:	e048      	b.n	800c4b0 <HAL_QSPI_Command+0xb4>
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	2b01      	cmp	r3, #1
 800c430:	d137      	bne.n	800c4a2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2200      	movs	r2, #0
 800c436:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2202      	movs	r2, #2
 800c43c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	2200      	movs	r2, #0
 800c448:	2120      	movs	r1, #32
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f000 f9e8 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c450:	4603      	mov	r3, r0
 800c452:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c454:	7dfb      	ldrb	r3, [r7, #23]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d125      	bne.n	800c4a6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c45a:	2200      	movs	r2, #0
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 fa15 	bl	800c88e <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d115      	bne.n	800c498 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	693b      	ldr	r3, [r7, #16]
 800c472:	2201      	movs	r2, #1
 800c474:	2102      	movs	r1, #2
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	f000 f9d2 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c47c:	4603      	mov	r3, r0
 800c47e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800c480:	7dfb      	ldrb	r3, [r7, #23]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10f      	bne.n	800c4a6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2202      	movs	r2, #2
 800c48c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c496:	e006      	b.n	800c4a6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c4a0:	e001      	b.n	800c4a6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c4a2:	2302      	movs	r3, #2
 800c4a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c4ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3718      	adds	r7, #24
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b08a      	sub	sp, #40	; 0x28
 800c4bc:	af02      	add	r7, sp, #8
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c4c8:	f7fa ff6e 	bl	80073a8 <HAL_GetTick>
 800c4cc:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	3320      	adds	r3, #32
 800c4d4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4dc:	b2db      	uxtb	r3, r3
 800c4de:	2b01      	cmp	r3, #1
 800c4e0:	d101      	bne.n	800c4e6 <HAL_QSPI_Transmit+0x2e>
 800c4e2:	2302      	movs	r3, #2
 800c4e4:	e076      	b.n	800c5d4 <HAL_QSPI_Transmit+0x11c>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d165      	bne.n	800c5c6 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d056      	beq.n	800c5b4 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2212      	movs	r2, #18
 800c50a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	1c5a      	adds	r2, r3, #1
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	695a      	ldr	r2, [r3, #20]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800c53a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800c53c:	e01b      	b.n	800c576 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	2201      	movs	r2, #1
 800c546:	2104      	movs	r1, #4
 800c548:	68f8      	ldr	r0, [r7, #12]
 800c54a:	f000 f969 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c54e:	4603      	mov	r3, r0
 800c550:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800c552:	7ffb      	ldrb	r3, [r7, #31]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d113      	bne.n	800c580 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c55c:	781a      	ldrb	r2, [r3, #0]
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c566:	1c5a      	adds	r2, r3, #1
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	1e5a      	subs	r2, r3, #1
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1df      	bne.n	800c53e <HAL_QSPI_Transmit+0x86>
 800c57e:	e000      	b.n	800c582 <HAL_QSPI_Transmit+0xca>
          break;
 800c580:	bf00      	nop
      }

      if (status == HAL_OK)
 800c582:	7ffb      	ldrb	r3, [r7, #31]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d110      	bne.n	800c5aa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	9300      	str	r3, [sp, #0]
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	2201      	movs	r2, #1
 800c590:	2102      	movs	r1, #2
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f000 f944 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c598:	4603      	mov	r3, r0
 800c59a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800c59c:	7ffb      	ldrb	r3, [r7, #31]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d103      	bne.n	800c5aa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2201      	movs	r2, #1
 800c5ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c5b2:	e00a      	b.n	800c5ca <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5b8:	f043 0208 	orr.w	r2, r3, #8
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	77fb      	strb	r3, [r7, #31]
 800c5c4:	e001      	b.n	800c5ca <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c5c6:	2302      	movs	r3, #2
 800c5c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c5d2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3720      	adds	r7, #32
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}

0800c5dc <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	; 0x28
 800c5e0:	af02      	add	r7, sp, #8
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800c5ec:	f7fa fedc 	bl	80073a8 <HAL_GetTick>
 800c5f0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	699b      	ldr	r3, [r3, #24]
 800c5f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	3320      	adds	r3, #32
 800c600:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d101      	bne.n	800c612 <HAL_QSPI_Receive+0x36>
 800c60e:	2302      	movs	r3, #2
 800c610:	e07d      	b.n	800c70e <HAL_QSPI_Receive+0x132>
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c620:	b2db      	uxtb	r3, r3
 800c622:	2b01      	cmp	r3, #1
 800c624:	d16c      	bne.n	800c700 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2200      	movs	r2, #0
 800c62a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d05d      	beq.n	800c6ee <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2222      	movs	r2, #34	; 0x22
 800c636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	691b      	ldr	r3, [r3, #16]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c66a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800c674:	e01c      	b.n	800c6b0 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	9300      	str	r3, [sp, #0]
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	2201      	movs	r2, #1
 800c67e:	2106      	movs	r1, #6
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 f8cd 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c686:	4603      	mov	r3, r0
 800c688:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800c68a:	7ffb      	ldrb	r3, [r7, #31]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d114      	bne.n	800c6ba <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c694:	693a      	ldr	r2, [r7, #16]
 800c696:	7812      	ldrb	r2, [r2, #0]
 800c698:	b2d2      	uxtb	r2, r2
 800c69a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6a0:	1c5a      	adds	r2, r3, #1
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6aa:	1e5a      	subs	r2, r3, #1
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1de      	bne.n	800c676 <HAL_QSPI_Receive+0x9a>
 800c6b8:	e000      	b.n	800c6bc <HAL_QSPI_Receive+0xe0>
          break;
 800c6ba:	bf00      	nop
      }

      if (status == HAL_OK)
 800c6bc:	7ffb      	ldrb	r3, [r7, #31]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d110      	bne.n	800c6e4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	9300      	str	r3, [sp, #0]
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	2102      	movs	r1, #2
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 f8a7 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800c6d6:	7ffb      	ldrb	r3, [r7, #31]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d103      	bne.n	800c6e4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	2202      	movs	r2, #2
 800c6e2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c6ec:	e00a      	b.n	800c704 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6f2:	f043 0208 	orr.w	r2, r3, #8
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	77fb      	strb	r3, [r7, #31]
 800c6fe:	e001      	b.n	800c704 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800c700:	2302      	movs	r3, #2
 800c702:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800c70c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3720      	adds	r7, #32
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800c716:	b580      	push	{r7, lr}
 800c718:	b088      	sub	sp, #32
 800c71a:	af02      	add	r7, sp, #8
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
 800c722:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800c724:	f7fa fe40 	bl	80073a8 <HAL_GetTick>
 800c728:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b01      	cmp	r3, #1
 800c734:	d101      	bne.n	800c73a <HAL_QSPI_AutoPolling+0x24>
 800c736:	2302      	movs	r3, #2
 800c738:	e060      	b.n	800c7fc <HAL_QSPI_AutoPolling+0xe6>
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2201      	movs	r2, #1
 800c73e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c748:	b2db      	uxtb	r3, r3
 800c74a:	2b01      	cmp	r3, #1
 800c74c:	d14f      	bne.n	800c7ee <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2200      	movs	r2, #0
 800c752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2242      	movs	r2, #66	; 0x42
 800c758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	2200      	movs	r2, #0
 800c764:	2120      	movs	r1, #32
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 f85a 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c76c:	4603      	mov	r3, r0
 800c76e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800c770:	7dfb      	ldrb	r3, [r7, #23]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d13d      	bne.n	800c7f2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	6812      	ldr	r2, [r2, #0]
 800c77e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	6852      	ldr	r2, [r2, #4]
 800c788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	6892      	ldr	r2, [r2, #8]
 800c792:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800c7ac:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800c7b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c7ba:	68b9      	ldr	r1, [r7, #8]
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f000 f866 	bl	800c88e <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	2108      	movs	r1, #8
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f000 f827 	bl	800c820 <QSPI_WaitFlagStateUntilTimeout>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800c7d6:	7dfb      	ldrb	r3, [r7, #23]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10a      	bne.n	800c7f2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c7ec:	e001      	b.n	800c7f2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800c7ee:	2302      	movs	r3, #2
 800c7f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800c7fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3718      	adds	r7, #24
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	683a      	ldr	r2, [r7, #0]
 800c812:	649a      	str	r2, [r3, #72]	; 0x48
}
 800c814:	bf00      	nop
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b084      	sub	sp, #16
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	603b      	str	r3, [r7, #0]
 800c82c:	4613      	mov	r3, r2
 800c82e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c830:	e01a      	b.n	800c868 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c838:	d016      	beq.n	800c868 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c83a:	f7fa fdb5 	bl	80073a8 <HAL_GetTick>
 800c83e:	4602      	mov	r2, r0
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	69ba      	ldr	r2, [r7, #24]
 800c846:	429a      	cmp	r2, r3
 800c848:	d302      	bcc.n	800c850 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800c84a:	69bb      	ldr	r3, [r7, #24]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2204      	movs	r2, #4
 800c854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c85c:	f043 0201 	orr.w	r2, r3, #1
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e00e      	b.n	800c886 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	689a      	ldr	r2, [r3, #8]
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	4013      	ands	r3, r2
 800c872:	2b00      	cmp	r3, #0
 800c874:	bf14      	ite	ne
 800c876:	2301      	movne	r3, #1
 800c878:	2300      	moveq	r3, #0
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	79fb      	ldrb	r3, [r7, #7]
 800c880:	429a      	cmp	r2, r3
 800c882:	d1d6      	bne.n	800c832 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800c88e:	b480      	push	{r7}
 800c890:	b085      	sub	sp, #20
 800c892:	af00      	add	r7, sp, #0
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d009      	beq.n	800c8b6 <QSPI_Config+0x28>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c8a8:	d005      	beq.n	800c8b6 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3a01      	subs	r2, #1
 800c8b4:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	f000 80b9 	beq.w	800ca32 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800c8c0:	68bb      	ldr	r3, [r7, #8]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d05f      	beq.n	800c988 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	6892      	ldr	r2, [r2, #8]
 800c8d0:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d031      	beq.n	800c93e <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	68bb      	ldr	r3, [r7, #8]
 800c8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	049b      	lsls	r3, r3, #18
 800c8f6:	431a      	orrs	r2, r3
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	431a      	orrs	r2, r3
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	431a      	orrs	r2, r3
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	68db      	ldr	r3, [r3, #12]
 800c908:	431a      	orrs	r2, r3
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	431a      	orrs	r2, r3
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	699b      	ldr	r3, [r3, #24]
 800c914:	431a      	orrs	r2, r3
 800c916:	68bb      	ldr	r3, [r7, #8]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	ea42 0103 	orr.w	r1, r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	430a      	orrs	r2, r1
 800c926:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c92e:	f000 812e 	beq.w	800cb8e <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	6852      	ldr	r2, [r2, #4]
 800c93a:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800c93c:	e127      	b.n	800cb8e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c942:	68bb      	ldr	r3, [r7, #8]
 800c944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c946:	431a      	orrs	r2, r3
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c94c:	431a      	orrs	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c952:	431a      	orrs	r2, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	695b      	ldr	r3, [r3, #20]
 800c958:	049b      	lsls	r3, r3, #18
 800c95a:	431a      	orrs	r2, r3
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	431a      	orrs	r2, r3
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	431a      	orrs	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	69db      	ldr	r3, [r3, #28]
 800c96c:	431a      	orrs	r2, r3
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	699b      	ldr	r3, [r3, #24]
 800c972:	431a      	orrs	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	ea42 0103 	orr.w	r1, r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	687a      	ldr	r2, [r7, #4]
 800c982:	430a      	orrs	r2, r1
 800c984:	615a      	str	r2, [r3, #20]
}
 800c986:	e102      	b.n	800cb8e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	69db      	ldr	r3, [r3, #28]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d02e      	beq.n	800c9ee <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c998:	431a      	orrs	r2, r3
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c99e:	431a      	orrs	r2, r3
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a4:	431a      	orrs	r2, r3
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	049b      	lsls	r3, r3, #18
 800c9ac:	431a      	orrs	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	431a      	orrs	r2, r3
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	69db      	ldr	r3, [r3, #28]
 800c9be:	431a      	orrs	r2, r3
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	431a      	orrs	r2, r3
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	ea42 0103 	orr.w	r1, r2, r3
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800c9de:	f000 80d6 	beq.w	800cb8e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	6852      	ldr	r2, [r2, #4]
 800c9ea:	619a      	str	r2, [r3, #24]
}
 800c9ec:	e0cf      	b.n	800cb8e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca02:	431a      	orrs	r2, r3
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	695b      	ldr	r3, [r3, #20]
 800ca08:	049b      	lsls	r3, r3, #18
 800ca0a:	431a      	orrs	r2, r3
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	6a1b      	ldr	r3, [r3, #32]
 800ca10:	431a      	orrs	r2, r3
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	69db      	ldr	r3, [r3, #28]
 800ca16:	431a      	orrs	r2, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	699b      	ldr	r3, [r3, #24]
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	ea42 0103 	orr.w	r1, r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	430a      	orrs	r2, r1
 800ca2e:	615a      	str	r2, [r3, #20]
}
 800ca30:	e0ad      	b.n	800cb8e <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800ca32:	68bb      	ldr	r3, [r7, #8]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d058      	beq.n	800caec <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68ba      	ldr	r2, [r7, #8]
 800ca40:	6892      	ldr	r2, [r2, #8]
 800ca42:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	69db      	ldr	r3, [r3, #28]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d02d      	beq.n	800caa8 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca54:	431a      	orrs	r2, r3
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca5a:	431a      	orrs	r2, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca60:	431a      	orrs	r2, r3
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	695b      	ldr	r3, [r3, #20]
 800ca66:	049b      	lsls	r3, r3, #18
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	431a      	orrs	r2, r3
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	6a1b      	ldr	r3, [r3, #32]
 800ca74:	431a      	orrs	r2, r3
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	69db      	ldr	r3, [r3, #28]
 800ca80:	431a      	orrs	r2, r3
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	699b      	ldr	r3, [r3, #24]
 800ca86:	ea42 0103 	orr.w	r1, r2, r3
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	687a      	ldr	r2, [r7, #4]
 800ca90:	430a      	orrs	r2, r1
 800ca92:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800ca9a:	d078      	beq.n	800cb8e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	6852      	ldr	r2, [r2, #4]
 800caa4:	619a      	str	r2, [r3, #24]
}
 800caa6:	e072      	b.n	800cb8e <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cab0:	431a      	orrs	r2, r3
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab6:	431a      	orrs	r2, r3
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cabc:	431a      	orrs	r2, r3
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	695b      	ldr	r3, [r3, #20]
 800cac2:	049b      	lsls	r3, r3, #18
 800cac4:	431a      	orrs	r2, r3
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	691b      	ldr	r3, [r3, #16]
 800caca:	431a      	orrs	r2, r3
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	431a      	orrs	r2, r3
 800cad2:	68bb      	ldr	r3, [r7, #8]
 800cad4:	69db      	ldr	r3, [r3, #28]
 800cad6:	431a      	orrs	r2, r3
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	ea42 0103 	orr.w	r1, r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	430a      	orrs	r2, r1
 800cae8:	615a      	str	r2, [r3, #20]
}
 800caea:	e050      	b.n	800cb8e <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	69db      	ldr	r3, [r3, #28]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d02a      	beq.n	800cb4a <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafc:	431a      	orrs	r2, r3
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb02:	431a      	orrs	r2, r3
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb08:	431a      	orrs	r2, r3
 800cb0a:	68bb      	ldr	r3, [r7, #8]
 800cb0c:	695b      	ldr	r3, [r3, #20]
 800cb0e:	049b      	lsls	r3, r3, #18
 800cb10:	431a      	orrs	r2, r3
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	431a      	orrs	r2, r3
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	68db      	ldr	r3, [r3, #12]
 800cb1c:	431a      	orrs	r2, r3
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	431a      	orrs	r2, r3
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	ea42 0103 	orr.w	r1, r2, r3
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	430a      	orrs	r2, r1
 800cb34:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800cb3c:	d027      	beq.n	800cb8e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	6852      	ldr	r2, [r2, #4]
 800cb46:	619a      	str	r2, [r3, #24]
}
 800cb48:	e021      	b.n	800cb8e <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d01d      	beq.n	800cb8e <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb5a:	431a      	orrs	r2, r3
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb60:	431a      	orrs	r2, r3
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb66:	431a      	orrs	r2, r3
 800cb68:	68bb      	ldr	r3, [r7, #8]
 800cb6a:	695b      	ldr	r3, [r3, #20]
 800cb6c:	049b      	lsls	r3, r3, #18
 800cb6e:	431a      	orrs	r2, r3
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	6a1b      	ldr	r3, [r3, #32]
 800cb74:	431a      	orrs	r2, r3
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	431a      	orrs	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	ea42 0103 	orr.w	r1, r2, r3
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	430a      	orrs	r2, r1
 800cb8c:	615a      	str	r2, [r3, #20]
}
 800cb8e:	bf00      	nop
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
	...

0800cb9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08c      	sub	sp, #48	; 0x30
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d102      	bne.n	800cbb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	f000 bc48 	b.w	800d440 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f003 0301 	and.w	r3, r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	f000 8088 	beq.w	800ccce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cbbe:	4b99      	ldr	r3, [pc, #612]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cbc8:	4b96      	ldr	r3, [pc, #600]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbcc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cbce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd0:	2b10      	cmp	r3, #16
 800cbd2:	d007      	beq.n	800cbe4 <HAL_RCC_OscConfig+0x48>
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	2b18      	cmp	r3, #24
 800cbd8:	d111      	bne.n	800cbfe <HAL_RCC_OscConfig+0x62>
 800cbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbdc:	f003 0303 	and.w	r3, r3, #3
 800cbe0:	2b02      	cmp	r3, #2
 800cbe2:	d10c      	bne.n	800cbfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbe4:	4b8f      	ldr	r3, [pc, #572]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d06d      	beq.n	800cccc <HAL_RCC_OscConfig+0x130>
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	685b      	ldr	r3, [r3, #4]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d169      	bne.n	800cccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	f000 bc21 	b.w	800d440 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc06:	d106      	bne.n	800cc16 <HAL_RCC_OscConfig+0x7a>
 800cc08:	4b86      	ldr	r3, [pc, #536]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a85      	ldr	r2, [pc, #532]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	e02e      	b.n	800cc74 <HAL_RCC_OscConfig+0xd8>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10c      	bne.n	800cc38 <HAL_RCC_OscConfig+0x9c>
 800cc1e:	4b81      	ldr	r3, [pc, #516]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	4a80      	ldr	r2, [pc, #512]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc28:	6013      	str	r3, [r2, #0]
 800cc2a:	4b7e      	ldr	r3, [pc, #504]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a7d      	ldr	r2, [pc, #500]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc34:	6013      	str	r3, [r2, #0]
 800cc36:	e01d      	b.n	800cc74 <HAL_RCC_OscConfig+0xd8>
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc40:	d10c      	bne.n	800cc5c <HAL_RCC_OscConfig+0xc0>
 800cc42:	4b78      	ldr	r3, [pc, #480]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4a77      	ldr	r2, [pc, #476]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	4b75      	ldr	r3, [pc, #468]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a74      	ldr	r2, [pc, #464]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	e00b      	b.n	800cc74 <HAL_RCC_OscConfig+0xd8>
 800cc5c:	4b71      	ldr	r3, [pc, #452]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a70      	ldr	r2, [pc, #448]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc66:	6013      	str	r3, [r2, #0]
 800cc68:	4b6e      	ldr	r3, [pc, #440]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a6d      	ldr	r2, [pc, #436]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d013      	beq.n	800cca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc7c:	f7fa fb94 	bl	80073a8 <HAL_GetTick>
 800cc80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc82:	e008      	b.n	800cc96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc84:	f7fa fb90 	bl	80073a8 <HAL_GetTick>
 800cc88:	4602      	mov	r2, r0
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	2b64      	cmp	r3, #100	; 0x64
 800cc90:	d901      	bls.n	800cc96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800cc92:	2303      	movs	r3, #3
 800cc94:	e3d4      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cc96:	4b63      	ldr	r3, [pc, #396]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d0f0      	beq.n	800cc84 <HAL_RCC_OscConfig+0xe8>
 800cca2:	e014      	b.n	800ccce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cca4:	f7fa fb80 	bl	80073a8 <HAL_GetTick>
 800cca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ccaa:	e008      	b.n	800ccbe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ccac:	f7fa fb7c 	bl	80073a8 <HAL_GetTick>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	2b64      	cmp	r3, #100	; 0x64
 800ccb8:	d901      	bls.n	800ccbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e3c0      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ccbe:	4b59      	ldr	r3, [pc, #356]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1f0      	bne.n	800ccac <HAL_RCC_OscConfig+0x110>
 800ccca:	e000      	b.n	800ccce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 80ca 	beq.w	800ce70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ccdc:	4b51      	ldr	r3, [pc, #324]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cce4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cce6:	4b4f      	ldr	r3, [pc, #316]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ccec:	6a3b      	ldr	r3, [r7, #32]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d007      	beq.n	800cd02 <HAL_RCC_OscConfig+0x166>
 800ccf2:	6a3b      	ldr	r3, [r7, #32]
 800ccf4:	2b18      	cmp	r3, #24
 800ccf6:	d156      	bne.n	800cda6 <HAL_RCC_OscConfig+0x20a>
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	f003 0303 	and.w	r3, r3, #3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d151      	bne.n	800cda6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd02:	4b48      	ldr	r3, [pc, #288]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 0304 	and.w	r3, r3, #4
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d005      	beq.n	800cd1a <HAL_RCC_OscConfig+0x17e>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68db      	ldr	r3, [r3, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e392      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cd1a:	4b42      	ldr	r3, [pc, #264]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	f023 0219 	bic.w	r2, r3, #25
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	68db      	ldr	r3, [r3, #12]
 800cd26:	493f      	ldr	r1, [pc, #252]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd2c:	f7fa fb3c 	bl	80073a8 <HAL_GetTick>
 800cd30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd32:	e008      	b.n	800cd46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cd34:	f7fa fb38 	bl	80073a8 <HAL_GetTick>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d901      	bls.n	800cd46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800cd42:	2303      	movs	r3, #3
 800cd44:	e37c      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cd46:	4b37      	ldr	r3, [pc, #220]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 0304 	and.w	r3, r3, #4
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d0f0      	beq.n	800cd34 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd52:	f7fa fb59 	bl	8007408 <HAL_GetREVID>
 800cd56:	4603      	mov	r3, r0
 800cd58:	f241 0203 	movw	r2, #4099	; 0x1003
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d817      	bhi.n	800cd90 <HAL_RCC_OscConfig+0x1f4>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	2b40      	cmp	r3, #64	; 0x40
 800cd66:	d108      	bne.n	800cd7a <HAL_RCC_OscConfig+0x1de>
 800cd68:	4b2e      	ldr	r3, [pc, #184]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800cd70:	4a2c      	ldr	r2, [pc, #176]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd76:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd78:	e07a      	b.n	800ce70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd7a:	4b2a      	ldr	r3, [pc, #168]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	031b      	lsls	r3, r3, #12
 800cd88:	4926      	ldr	r1, [pc, #152]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cd8e:	e06f      	b.n	800ce70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd90:	4b24      	ldr	r3, [pc, #144]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	691b      	ldr	r3, [r3, #16]
 800cd9c:	061b      	lsls	r3, r3, #24
 800cd9e:	4921      	ldr	r1, [pc, #132]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cda0:	4313      	orrs	r3, r2
 800cda2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cda4:	e064      	b.n	800ce70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d047      	beq.n	800ce3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cdae:	4b1d      	ldr	r3, [pc, #116]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f023 0219 	bic.w	r2, r3, #25
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	491a      	ldr	r1, [pc, #104]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdc0:	f7fa faf2 	bl	80073a8 <HAL_GetTick>
 800cdc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cdc6:	e008      	b.n	800cdda <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdc8:	f7fa faee 	bl	80073a8 <HAL_GetTick>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	1ad3      	subs	r3, r2, r3
 800cdd2:	2b02      	cmp	r3, #2
 800cdd4:	d901      	bls.n	800cdda <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800cdd6:	2303      	movs	r3, #3
 800cdd8:	e332      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cdda:	4b12      	ldr	r3, [pc, #72]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f003 0304 	and.w	r3, r3, #4
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d0f0      	beq.n	800cdc8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cde6:	f7fa fb0f 	bl	8007408 <HAL_GetREVID>
 800cdea:	4603      	mov	r3, r0
 800cdec:	f241 0203 	movw	r2, #4099	; 0x1003
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d819      	bhi.n	800ce28 <HAL_RCC_OscConfig+0x28c>
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	2b40      	cmp	r3, #64	; 0x40
 800cdfa:	d108      	bne.n	800ce0e <HAL_RCC_OscConfig+0x272>
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ce04:	4a07      	ldr	r2, [pc, #28]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800ce06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce0a:	6053      	str	r3, [r2, #4]
 800ce0c:	e030      	b.n	800ce70 <HAL_RCC_OscConfig+0x2d4>
 800ce0e:	4b05      	ldr	r3, [pc, #20]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	691b      	ldr	r3, [r3, #16]
 800ce1a:	031b      	lsls	r3, r3, #12
 800ce1c:	4901      	ldr	r1, [pc, #4]	; (800ce24 <HAL_RCC_OscConfig+0x288>)
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	604b      	str	r3, [r1, #4]
 800ce22:	e025      	b.n	800ce70 <HAL_RCC_OscConfig+0x2d4>
 800ce24:	58024400 	.word	0x58024400
 800ce28:	4b9a      	ldr	r3, [pc, #616]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	691b      	ldr	r3, [r3, #16]
 800ce34:	061b      	lsls	r3, r3, #24
 800ce36:	4997      	ldr	r1, [pc, #604]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	604b      	str	r3, [r1, #4]
 800ce3c:	e018      	b.n	800ce70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce3e:	4b95      	ldr	r3, [pc, #596]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4a94      	ldr	r2, [pc, #592]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce44:	f023 0301 	bic.w	r3, r3, #1
 800ce48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce4a:	f7fa faad 	bl	80073a8 <HAL_GetTick>
 800ce4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce50:	e008      	b.n	800ce64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce52:	f7fa faa9 	bl	80073a8 <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d901      	bls.n	800ce64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e2ed      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ce64:	4b8b      	ldr	r3, [pc, #556]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0304 	and.w	r3, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1f0      	bne.n	800ce52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0310 	and.w	r3, r3, #16
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f000 80a9 	beq.w	800cfd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ce7e:	4b85      	ldr	r3, [pc, #532]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ce88:	4b82      	ldr	r3, [pc, #520]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	2b08      	cmp	r3, #8
 800ce92:	d007      	beq.n	800cea4 <HAL_RCC_OscConfig+0x308>
 800ce94:	69bb      	ldr	r3, [r7, #24]
 800ce96:	2b18      	cmp	r3, #24
 800ce98:	d13a      	bne.n	800cf10 <HAL_RCC_OscConfig+0x374>
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f003 0303 	and.w	r3, r3, #3
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d135      	bne.n	800cf10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cea4:	4b7b      	ldr	r3, [pc, #492]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d005      	beq.n	800cebc <HAL_RCC_OscConfig+0x320>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	69db      	ldr	r3, [r3, #28]
 800ceb4:	2b80      	cmp	r3, #128	; 0x80
 800ceb6:	d001      	beq.n	800cebc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	e2c1      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cebc:	f7fa faa4 	bl	8007408 <HAL_GetREVID>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f241 0203 	movw	r2, #4099	; 0x1003
 800cec6:	4293      	cmp	r3, r2
 800cec8:	d817      	bhi.n	800cefa <HAL_RCC_OscConfig+0x35e>
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6a1b      	ldr	r3, [r3, #32]
 800cece:	2b20      	cmp	r3, #32
 800ced0:	d108      	bne.n	800cee4 <HAL_RCC_OscConfig+0x348>
 800ced2:	4b70      	ldr	r3, [pc, #448]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800ceda:	4a6e      	ldr	r2, [pc, #440]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cedc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cee0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cee2:	e075      	b.n	800cfd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cee4:	4b6b      	ldr	r3, [pc, #428]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6a1b      	ldr	r3, [r3, #32]
 800cef0:	069b      	lsls	r3, r3, #26
 800cef2:	4968      	ldr	r1, [pc, #416]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cef4:	4313      	orrs	r3, r2
 800cef6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cef8:	e06a      	b.n	800cfd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cefa:	4b66      	ldr	r3, [pc, #408]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cefc:	68db      	ldr	r3, [r3, #12]
 800cefe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	061b      	lsls	r3, r3, #24
 800cf08:	4962      	ldr	r1, [pc, #392]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800cf0e:	e05f      	b.n	800cfd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	69db      	ldr	r3, [r3, #28]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d042      	beq.n	800cf9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800cf18:	4b5e      	ldr	r3, [pc, #376]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a5d      	ldr	r2, [pc, #372]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf24:	f7fa fa40 	bl	80073a8 <HAL_GetTick>
 800cf28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf2a:	e008      	b.n	800cf3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cf2c:	f7fa fa3c 	bl	80073a8 <HAL_GetTick>
 800cf30:	4602      	mov	r2, r0
 800cf32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d901      	bls.n	800cf3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	e280      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cf3e:	4b55      	ldr	r3, [pc, #340]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d0f0      	beq.n	800cf2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800cf4a:	f7fa fa5d 	bl	8007408 <HAL_GetREVID>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	f241 0203 	movw	r2, #4099	; 0x1003
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d817      	bhi.n	800cf88 <HAL_RCC_OscConfig+0x3ec>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6a1b      	ldr	r3, [r3, #32]
 800cf5c:	2b20      	cmp	r3, #32
 800cf5e:	d108      	bne.n	800cf72 <HAL_RCC_OscConfig+0x3d6>
 800cf60:	4b4c      	ldr	r3, [pc, #304]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800cf68:	4a4a      	ldr	r2, [pc, #296]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cf6e:	6053      	str	r3, [r2, #4]
 800cf70:	e02e      	b.n	800cfd0 <HAL_RCC_OscConfig+0x434>
 800cf72:	4b48      	ldr	r3, [pc, #288]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	6a1b      	ldr	r3, [r3, #32]
 800cf7e:	069b      	lsls	r3, r3, #26
 800cf80:	4944      	ldr	r1, [pc, #272]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf82:	4313      	orrs	r3, r2
 800cf84:	604b      	str	r3, [r1, #4]
 800cf86:	e023      	b.n	800cfd0 <HAL_RCC_OscConfig+0x434>
 800cf88:	4b42      	ldr	r3, [pc, #264]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6a1b      	ldr	r3, [r3, #32]
 800cf94:	061b      	lsls	r3, r3, #24
 800cf96:	493f      	ldr	r1, [pc, #252]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	60cb      	str	r3, [r1, #12]
 800cf9c:	e018      	b.n	800cfd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800cf9e:	4b3d      	ldr	r3, [pc, #244]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4a3c      	ldr	r2, [pc, #240]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cfa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cfa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfaa:	f7fa f9fd 	bl	80073a8 <HAL_GetTick>
 800cfae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cfb0:	e008      	b.n	800cfc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800cfb2:	f7fa f9f9 	bl	80073a8 <HAL_GetTick>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfba:	1ad3      	subs	r3, r2, r3
 800cfbc:	2b02      	cmp	r3, #2
 800cfbe:	d901      	bls.n	800cfc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	e23d      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800cfc4:	4b33      	ldr	r3, [pc, #204]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d1f0      	bne.n	800cfb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f003 0308 	and.w	r3, r3, #8
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d036      	beq.n	800d04a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	695b      	ldr	r3, [r3, #20]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d019      	beq.n	800d018 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cfe4:	4b2b      	ldr	r3, [pc, #172]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cfe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfe8:	4a2a      	ldr	r2, [pc, #168]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800cfea:	f043 0301 	orr.w	r3, r3, #1
 800cfee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cff0:	f7fa f9da 	bl	80073a8 <HAL_GetTick>
 800cff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800cff6:	e008      	b.n	800d00a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cff8:	f7fa f9d6 	bl	80073a8 <HAL_GetTick>
 800cffc:	4602      	mov	r2, r0
 800cffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	2b02      	cmp	r3, #2
 800d004:	d901      	bls.n	800d00a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800d006:	2303      	movs	r3, #3
 800d008:	e21a      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d00a:	4b22      	ldr	r3, [pc, #136]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d00e:	f003 0302 	and.w	r3, r3, #2
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0f0      	beq.n	800cff8 <HAL_RCC_OscConfig+0x45c>
 800d016:	e018      	b.n	800d04a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d018:	4b1e      	ldr	r3, [pc, #120]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d01a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d01c:	4a1d      	ldr	r2, [pc, #116]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d01e:	f023 0301 	bic.w	r3, r3, #1
 800d022:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d024:	f7fa f9c0 	bl	80073a8 <HAL_GetTick>
 800d028:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d02a:	e008      	b.n	800d03e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d02c:	f7fa f9bc 	bl	80073a8 <HAL_GetTick>
 800d030:	4602      	mov	r2, r0
 800d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d034:	1ad3      	subs	r3, r2, r3
 800d036:	2b02      	cmp	r3, #2
 800d038:	d901      	bls.n	800d03e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800d03a:	2303      	movs	r3, #3
 800d03c:	e200      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d03e:	4b15      	ldr	r3, [pc, #84]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d042:	f003 0302 	and.w	r3, r3, #2
 800d046:	2b00      	cmp	r3, #0
 800d048:	d1f0      	bne.n	800d02c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 0320 	and.w	r3, r3, #32
 800d052:	2b00      	cmp	r3, #0
 800d054:	d039      	beq.n	800d0ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d01c      	beq.n	800d098 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d05e:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	4a0c      	ldr	r2, [pc, #48]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d068:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d06a:	f7fa f99d 	bl	80073a8 <HAL_GetTick>
 800d06e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d070:	e008      	b.n	800d084 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d072:	f7fa f999 	bl	80073a8 <HAL_GetTick>
 800d076:	4602      	mov	r2, r0
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d901      	bls.n	800d084 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	e1dd      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d084:	4b03      	ldr	r3, [pc, #12]	; (800d094 <HAL_RCC_OscConfig+0x4f8>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0f0      	beq.n	800d072 <HAL_RCC_OscConfig+0x4d6>
 800d090:	e01b      	b.n	800d0ca <HAL_RCC_OscConfig+0x52e>
 800d092:	bf00      	nop
 800d094:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d098:	4b9b      	ldr	r3, [pc, #620]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a9a      	ldr	r2, [pc, #616]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d09e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d0a4:	f7fa f980 	bl	80073a8 <HAL_GetTick>
 800d0a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0aa:	e008      	b.n	800d0be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d0ac:	f7fa f97c 	bl	80073a8 <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	2b02      	cmp	r3, #2
 800d0b8:	d901      	bls.n	800d0be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800d0ba:	2303      	movs	r3, #3
 800d0bc:	e1c0      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d0be:	4b92      	ldr	r3, [pc, #584]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1f0      	bne.n	800d0ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f003 0304 	and.w	r3, r3, #4
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f000 8081 	beq.w	800d1da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d0d8:	4b8c      	ldr	r3, [pc, #560]	; (800d30c <HAL_RCC_OscConfig+0x770>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a8b      	ldr	r2, [pc, #556]	; (800d30c <HAL_RCC_OscConfig+0x770>)
 800d0de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d0e4:	f7fa f960 	bl	80073a8 <HAL_GetTick>
 800d0e8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0ea:	e008      	b.n	800d0fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d0ec:	f7fa f95c 	bl	80073a8 <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	2b64      	cmp	r3, #100	; 0x64
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e1a0      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d0fe:	4b83      	ldr	r3, [pc, #524]	; (800d30c <HAL_RCC_OscConfig+0x770>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0f0      	beq.n	800d0ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	689b      	ldr	r3, [r3, #8]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d106      	bne.n	800d120 <HAL_RCC_OscConfig+0x584>
 800d112:	4b7d      	ldr	r3, [pc, #500]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d116:	4a7c      	ldr	r2, [pc, #496]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d118:	f043 0301 	orr.w	r3, r3, #1
 800d11c:	6713      	str	r3, [r2, #112]	; 0x70
 800d11e:	e02d      	b.n	800d17c <HAL_RCC_OscConfig+0x5e0>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689b      	ldr	r3, [r3, #8]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d10c      	bne.n	800d142 <HAL_RCC_OscConfig+0x5a6>
 800d128:	4b77      	ldr	r3, [pc, #476]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12c:	4a76      	ldr	r2, [pc, #472]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d12e:	f023 0301 	bic.w	r3, r3, #1
 800d132:	6713      	str	r3, [r2, #112]	; 0x70
 800d134:	4b74      	ldr	r3, [pc, #464]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d138:	4a73      	ldr	r2, [pc, #460]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d13a:	f023 0304 	bic.w	r3, r3, #4
 800d13e:	6713      	str	r3, [r2, #112]	; 0x70
 800d140:	e01c      	b.n	800d17c <HAL_RCC_OscConfig+0x5e0>
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	689b      	ldr	r3, [r3, #8]
 800d146:	2b05      	cmp	r3, #5
 800d148:	d10c      	bne.n	800d164 <HAL_RCC_OscConfig+0x5c8>
 800d14a:	4b6f      	ldr	r3, [pc, #444]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d14e:	4a6e      	ldr	r2, [pc, #440]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d150:	f043 0304 	orr.w	r3, r3, #4
 800d154:	6713      	str	r3, [r2, #112]	; 0x70
 800d156:	4b6c      	ldr	r3, [pc, #432]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d15a:	4a6b      	ldr	r2, [pc, #428]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d15c:	f043 0301 	orr.w	r3, r3, #1
 800d160:	6713      	str	r3, [r2, #112]	; 0x70
 800d162:	e00b      	b.n	800d17c <HAL_RCC_OscConfig+0x5e0>
 800d164:	4b68      	ldr	r3, [pc, #416]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d168:	4a67      	ldr	r2, [pc, #412]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d16a:	f023 0301 	bic.w	r3, r3, #1
 800d16e:	6713      	str	r3, [r2, #112]	; 0x70
 800d170:	4b65      	ldr	r3, [pc, #404]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d174:	4a64      	ldr	r2, [pc, #400]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d176:	f023 0304 	bic.w	r3, r3, #4
 800d17a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d015      	beq.n	800d1b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d184:	f7fa f910 	bl	80073a8 <HAL_GetTick>
 800d188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d18a:	e00a      	b.n	800d1a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d18c:	f7fa f90c 	bl	80073a8 <HAL_GetTick>
 800d190:	4602      	mov	r2, r0
 800d192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d194:	1ad3      	subs	r3, r2, r3
 800d196:	f241 3288 	movw	r2, #5000	; 0x1388
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d901      	bls.n	800d1a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800d19e:	2303      	movs	r3, #3
 800d1a0:	e14e      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d1a2:	4b59      	ldr	r3, [pc, #356]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d0ee      	beq.n	800d18c <HAL_RCC_OscConfig+0x5f0>
 800d1ae:	e014      	b.n	800d1da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d1b0:	f7fa f8fa 	bl	80073a8 <HAL_GetTick>
 800d1b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d1b6:	e00a      	b.n	800d1ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d1b8:	f7fa f8f6 	bl	80073a8 <HAL_GetTick>
 800d1bc:	4602      	mov	r2, r0
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d901      	bls.n	800d1ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800d1ca:	2303      	movs	r3, #3
 800d1cc:	e138      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d1ce:	4b4e      	ldr	r3, [pc, #312]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1d2:	f003 0302 	and.w	r3, r3, #2
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1ee      	bne.n	800d1b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f000 812d 	beq.w	800d43e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d1e4:	4b48      	ldr	r3, [pc, #288]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d1ec:	2b18      	cmp	r3, #24
 800d1ee:	f000 80bd 	beq.w	800d36c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	f040 809e 	bne.w	800d338 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1fc:	4b42      	ldr	r3, [pc, #264]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a41      	ldr	r2, [pc, #260]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d208:	f7fa f8ce 	bl	80073a8 <HAL_GetTick>
 800d20c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d20e:	e008      	b.n	800d222 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d210:	f7fa f8ca 	bl	80073a8 <HAL_GetTick>
 800d214:	4602      	mov	r2, r0
 800d216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	2b02      	cmp	r3, #2
 800d21c:	d901      	bls.n	800d222 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800d21e:	2303      	movs	r3, #3
 800d220:	e10e      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d222:	4b39      	ldr	r3, [pc, #228]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1f0      	bne.n	800d210 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d22e:	4b36      	ldr	r3, [pc, #216]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d232:	4b37      	ldr	r3, [pc, #220]	; (800d310 <HAL_RCC_OscConfig+0x774>)
 800d234:	4013      	ands	r3, r2
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d23a:	687a      	ldr	r2, [r7, #4]
 800d23c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d23e:	0112      	lsls	r2, r2, #4
 800d240:	430a      	orrs	r2, r1
 800d242:	4931      	ldr	r1, [pc, #196]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d244:	4313      	orrs	r3, r2
 800d246:	628b      	str	r3, [r1, #40]	; 0x28
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d24c:	3b01      	subs	r3, #1
 800d24e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d256:	3b01      	subs	r3, #1
 800d258:	025b      	lsls	r3, r3, #9
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	431a      	orrs	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d262:	3b01      	subs	r3, #1
 800d264:	041b      	lsls	r3, r3, #16
 800d266:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d26a:	431a      	orrs	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d270:	3b01      	subs	r3, #1
 800d272:	061b      	lsls	r3, r3, #24
 800d274:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d278:	4923      	ldr	r1, [pc, #140]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d27a:	4313      	orrs	r3, r2
 800d27c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800d27e:	4b22      	ldr	r3, [pc, #136]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	4a21      	ldr	r2, [pc, #132]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d284:	f023 0301 	bic.w	r3, r3, #1
 800d288:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d28a:	4b1f      	ldr	r3, [pc, #124]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d28c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d28e:	4b21      	ldr	r3, [pc, #132]	; (800d314 <HAL_RCC_OscConfig+0x778>)
 800d290:	4013      	ands	r3, r2
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d296:	00d2      	lsls	r2, r2, #3
 800d298:	491b      	ldr	r1, [pc, #108]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d29a:	4313      	orrs	r3, r2
 800d29c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d29e:	4b1a      	ldr	r3, [pc, #104]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a2:	f023 020c 	bic.w	r2, r3, #12
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	4917      	ldr	r1, [pc, #92]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d2b0:	4b15      	ldr	r3, [pc, #84]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b4:	f023 0202 	bic.w	r2, r3, #2
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2bc:	4912      	ldr	r1, [pc, #72]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d2c2:	4b11      	ldr	r3, [pc, #68]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c6:	4a10      	ldr	r2, [pc, #64]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d2ce:	4b0e      	ldr	r3, [pc, #56]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d2:	4a0d      	ldr	r2, [pc, #52]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d2d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d2da:	4b0b      	ldr	r3, [pc, #44]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2de:	4a0a      	ldr	r2, [pc, #40]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d2e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800d2e6:	4b08      	ldr	r3, [pc, #32]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ea:	4a07      	ldr	r2, [pc, #28]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2ec:	f043 0301 	orr.w	r3, r3, #1
 800d2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d2f2:	4b05      	ldr	r3, [pc, #20]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	4a04      	ldr	r2, [pc, #16]	; (800d308 <HAL_RCC_OscConfig+0x76c>)
 800d2f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d2fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2fe:	f7fa f853 	bl	80073a8 <HAL_GetTick>
 800d302:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d304:	e011      	b.n	800d32a <HAL_RCC_OscConfig+0x78e>
 800d306:	bf00      	nop
 800d308:	58024400 	.word	0x58024400
 800d30c:	58024800 	.word	0x58024800
 800d310:	fffffc0c 	.word	0xfffffc0c
 800d314:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d318:	f7fa f846 	bl	80073a8 <HAL_GetTick>
 800d31c:	4602      	mov	r2, r0
 800d31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d320:	1ad3      	subs	r3, r2, r3
 800d322:	2b02      	cmp	r3, #2
 800d324:	d901      	bls.n	800d32a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800d326:	2303      	movs	r3, #3
 800d328:	e08a      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d32a:	4b47      	ldr	r3, [pc, #284]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0f0      	beq.n	800d318 <HAL_RCC_OscConfig+0x77c>
 800d336:	e082      	b.n	800d43e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d338:	4b43      	ldr	r3, [pc, #268]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	4a42      	ldr	r2, [pc, #264]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d33e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d342:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d344:	f7fa f830 	bl	80073a8 <HAL_GetTick>
 800d348:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d34a:	e008      	b.n	800d35e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d34c:	f7fa f82c 	bl	80073a8 <HAL_GetTick>
 800d350:	4602      	mov	r2, r0
 800d352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d354:	1ad3      	subs	r3, r2, r3
 800d356:	2b02      	cmp	r3, #2
 800d358:	d901      	bls.n	800d35e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e070      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d35e:	4b3a      	ldr	r3, [pc, #232]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d366:	2b00      	cmp	r3, #0
 800d368:	d1f0      	bne.n	800d34c <HAL_RCC_OscConfig+0x7b0>
 800d36a:	e068      	b.n	800d43e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d36c:	4b36      	ldr	r3, [pc, #216]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d36e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d370:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d372:	4b35      	ldr	r3, [pc, #212]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d376:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	d031      	beq.n	800d3e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	f003 0203 	and.w	r2, r3, #3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d12a      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	091b      	lsrs	r3, r3, #4
 800d392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d122      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d3aa:	429a      	cmp	r2, r3
 800d3ac:	d11a      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	0a5b      	lsrs	r3, r3, #9
 800d3b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d111      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	0c1b      	lsrs	r3, r3, #16
 800d3c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d108      	bne.n	800d3e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	0e1b      	lsrs	r3, r3, #24
 800d3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d3e0:	429a      	cmp	r2, r3
 800d3e2:	d001      	beq.n	800d3e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800d3e4:	2301      	movs	r3, #1
 800d3e6:	e02b      	b.n	800d440 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800d3e8:	4b17      	ldr	r3, [pc, #92]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ec:	08db      	lsrs	r3, r3, #3
 800d3ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3f8:	693a      	ldr	r2, [r7, #16]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d01f      	beq.n	800d43e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800d3fe:	4b12      	ldr	r3, [pc, #72]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d402:	4a11      	ldr	r2, [pc, #68]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d404:	f023 0301 	bic.w	r3, r3, #1
 800d408:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d40a:	f7f9 ffcd 	bl	80073a8 <HAL_GetTick>
 800d40e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800d410:	bf00      	nop
 800d412:	f7f9 ffc9 	bl	80073a8 <HAL_GetTick>
 800d416:	4602      	mov	r2, r0
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d0f9      	beq.n	800d412 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d41e:	4b0a      	ldr	r3, [pc, #40]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d420:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d422:	4b0a      	ldr	r3, [pc, #40]	; (800d44c <HAL_RCC_OscConfig+0x8b0>)
 800d424:	4013      	ands	r3, r2
 800d426:	687a      	ldr	r2, [r7, #4]
 800d428:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d42a:	00d2      	lsls	r2, r2, #3
 800d42c:	4906      	ldr	r1, [pc, #24]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d42e:	4313      	orrs	r3, r2
 800d430:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800d432:	4b05      	ldr	r3, [pc, #20]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d436:	4a04      	ldr	r2, [pc, #16]	; (800d448 <HAL_RCC_OscConfig+0x8ac>)
 800d438:	f043 0301 	orr.w	r3, r3, #1
 800d43c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3730      	adds	r7, #48	; 0x30
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	58024400 	.word	0x58024400
 800d44c:	ffff0007 	.word	0xffff0007

0800d450 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b086      	sub	sp, #24
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d101      	bne.n	800d464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	e19c      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d464:	4b8a      	ldr	r3, [pc, #552]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 030f 	and.w	r3, r3, #15
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	429a      	cmp	r2, r3
 800d470:	d910      	bls.n	800d494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d472:	4b87      	ldr	r3, [pc, #540]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f023 020f 	bic.w	r2, r3, #15
 800d47a:	4985      	ldr	r1, [pc, #532]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	4313      	orrs	r3, r2
 800d480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d482:	4b83      	ldr	r3, [pc, #524]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f003 030f 	and.w	r3, r3, #15
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d001      	beq.n	800d494 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e184      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 0304 	and.w	r3, r3, #4
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d010      	beq.n	800d4c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	691a      	ldr	r2, [r3, #16]
 800d4a4:	4b7b      	ldr	r3, [pc, #492]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d4a6:	699b      	ldr	r3, [r3, #24]
 800d4a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d908      	bls.n	800d4c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d4b0:	4b78      	ldr	r3, [pc, #480]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	691b      	ldr	r3, [r3, #16]
 800d4bc:	4975      	ldr	r1, [pc, #468]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d4be:	4313      	orrs	r3, r2
 800d4c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	f003 0308 	and.w	r3, r3, #8
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d010      	beq.n	800d4f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	695a      	ldr	r2, [r3, #20]
 800d4d2:	4b70      	ldr	r3, [pc, #448]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d4d4:	69db      	ldr	r3, [r3, #28]
 800d4d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d908      	bls.n	800d4f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d4de:	4b6d      	ldr	r3, [pc, #436]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	695b      	ldr	r3, [r3, #20]
 800d4ea:	496a      	ldr	r1, [pc, #424]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d4ec:	4313      	orrs	r3, r2
 800d4ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f003 0310 	and.w	r3, r3, #16
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d010      	beq.n	800d51e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	699a      	ldr	r2, [r3, #24]
 800d500:	4b64      	ldr	r3, [pc, #400]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d502:	69db      	ldr	r3, [r3, #28]
 800d504:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d508:	429a      	cmp	r2, r3
 800d50a:	d908      	bls.n	800d51e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d50c:	4b61      	ldr	r3, [pc, #388]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	495e      	ldr	r1, [pc, #376]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d51a:	4313      	orrs	r3, r2
 800d51c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f003 0320 	and.w	r3, r3, #32
 800d526:	2b00      	cmp	r3, #0
 800d528:	d010      	beq.n	800d54c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69da      	ldr	r2, [r3, #28]
 800d52e:	4b59      	ldr	r3, [pc, #356]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d536:	429a      	cmp	r2, r3
 800d538:	d908      	bls.n	800d54c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d53a:	4b56      	ldr	r3, [pc, #344]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d53c:	6a1b      	ldr	r3, [r3, #32]
 800d53e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	69db      	ldr	r3, [r3, #28]
 800d546:	4953      	ldr	r1, [pc, #332]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d548:	4313      	orrs	r3, r2
 800d54a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	f003 0302 	and.w	r3, r3, #2
 800d554:	2b00      	cmp	r3, #0
 800d556:	d010      	beq.n	800d57a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	68da      	ldr	r2, [r3, #12]
 800d55c:	4b4d      	ldr	r3, [pc, #308]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d55e:	699b      	ldr	r3, [r3, #24]
 800d560:	f003 030f 	and.w	r3, r3, #15
 800d564:	429a      	cmp	r2, r3
 800d566:	d908      	bls.n	800d57a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d568:	4b4a      	ldr	r3, [pc, #296]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	f023 020f 	bic.w	r2, r3, #15
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	4947      	ldr	r1, [pc, #284]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d576:	4313      	orrs	r3, r2
 800d578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	2b00      	cmp	r3, #0
 800d584:	d055      	beq.n	800d632 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d586:	4b43      	ldr	r3, [pc, #268]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d588:	699b      	ldr	r3, [r3, #24]
 800d58a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	689b      	ldr	r3, [r3, #8]
 800d592:	4940      	ldr	r1, [pc, #256]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d594:	4313      	orrs	r3, r2
 800d596:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	2b02      	cmp	r3, #2
 800d59e:	d107      	bne.n	800d5b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d5a0:	4b3c      	ldr	r3, [pc, #240]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d121      	bne.n	800d5f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	e0f6      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	685b      	ldr	r3, [r3, #4]
 800d5b4:	2b03      	cmp	r3, #3
 800d5b6:	d107      	bne.n	800d5c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d5b8:	4b36      	ldr	r3, [pc, #216]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d115      	bne.n	800d5f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	e0ea      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	685b      	ldr	r3, [r3, #4]
 800d5cc:	2b01      	cmp	r3, #1
 800d5ce:	d107      	bne.n	800d5e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d5d0:	4b30      	ldr	r3, [pc, #192]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d109      	bne.n	800d5f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e0de      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d5e0:	4b2c      	ldr	r3, [pc, #176]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f003 0304 	and.w	r3, r3, #4
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d101      	bne.n	800d5f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800d5ec:	2301      	movs	r3, #1
 800d5ee:	e0d6      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d5f0:	4b28      	ldr	r3, [pc, #160]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	f023 0207 	bic.w	r2, r3, #7
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	685b      	ldr	r3, [r3, #4]
 800d5fc:	4925      	ldr	r1, [pc, #148]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d5fe:	4313      	orrs	r3, r2
 800d600:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d602:	f7f9 fed1 	bl	80073a8 <HAL_GetTick>
 800d606:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d608:	e00a      	b.n	800d620 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d60a:	f7f9 fecd 	bl	80073a8 <HAL_GetTick>
 800d60e:	4602      	mov	r2, r0
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	f241 3288 	movw	r2, #5000	; 0x1388
 800d618:	4293      	cmp	r3, r2
 800d61a:	d901      	bls.n	800d620 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800d61c:	2303      	movs	r3, #3
 800d61e:	e0be      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d620:	4b1c      	ldr	r3, [pc, #112]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d622:	691b      	ldr	r3, [r3, #16]
 800d624:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	00db      	lsls	r3, r3, #3
 800d62e:	429a      	cmp	r2, r3
 800d630:	d1eb      	bne.n	800d60a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0302 	and.w	r3, r3, #2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d010      	beq.n	800d660 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68da      	ldr	r2, [r3, #12]
 800d642:	4b14      	ldr	r3, [pc, #80]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d644:	699b      	ldr	r3, [r3, #24]
 800d646:	f003 030f 	and.w	r3, r3, #15
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d208      	bcs.n	800d660 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d64e:	4b11      	ldr	r3, [pc, #68]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	f023 020f 	bic.w	r2, r3, #15
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	490e      	ldr	r1, [pc, #56]	; (800d694 <HAL_RCC_ClockConfig+0x244>)
 800d65c:	4313      	orrs	r3, r2
 800d65e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d660:	4b0b      	ldr	r3, [pc, #44]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f003 030f 	and.w	r3, r3, #15
 800d668:	683a      	ldr	r2, [r7, #0]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d214      	bcs.n	800d698 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d66e:	4b08      	ldr	r3, [pc, #32]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f023 020f 	bic.w	r2, r3, #15
 800d676:	4906      	ldr	r1, [pc, #24]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	4313      	orrs	r3, r2
 800d67c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d67e:	4b04      	ldr	r3, [pc, #16]	; (800d690 <HAL_RCC_ClockConfig+0x240>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f003 030f 	and.w	r3, r3, #15
 800d686:	683a      	ldr	r2, [r7, #0]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d005      	beq.n	800d698 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d68c:	2301      	movs	r3, #1
 800d68e:	e086      	b.n	800d79e <HAL_RCC_ClockConfig+0x34e>
 800d690:	52002000 	.word	0x52002000
 800d694:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f003 0304 	and.w	r3, r3, #4
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d010      	beq.n	800d6c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	691a      	ldr	r2, [r3, #16]
 800d6a8:	4b3f      	ldr	r3, [pc, #252]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d6aa:	699b      	ldr	r3, [r3, #24]
 800d6ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d208      	bcs.n	800d6c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d6b4:	4b3c      	ldr	r3, [pc, #240]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d6b6:	699b      	ldr	r3, [r3, #24]
 800d6b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	691b      	ldr	r3, [r3, #16]
 800d6c0:	4939      	ldr	r1, [pc, #228]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f003 0308 	and.w	r3, r3, #8
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d010      	beq.n	800d6f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	695a      	ldr	r2, [r3, #20]
 800d6d6:	4b34      	ldr	r3, [pc, #208]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d6d8:	69db      	ldr	r3, [r3, #28]
 800d6da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d208      	bcs.n	800d6f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d6e2:	4b31      	ldr	r3, [pc, #196]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	695b      	ldr	r3, [r3, #20]
 800d6ee:	492e      	ldr	r1, [pc, #184]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d6f0:	4313      	orrs	r3, r2
 800d6f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f003 0310 	and.w	r3, r3, #16
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d010      	beq.n	800d722 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	699a      	ldr	r2, [r3, #24]
 800d704:	4b28      	ldr	r3, [pc, #160]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d706:	69db      	ldr	r3, [r3, #28]
 800d708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d208      	bcs.n	800d722 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d710:	4b25      	ldr	r3, [pc, #148]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d712:	69db      	ldr	r3, [r3, #28]
 800d714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	4922      	ldr	r1, [pc, #136]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d71e:	4313      	orrs	r3, r2
 800d720:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f003 0320 	and.w	r3, r3, #32
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d010      	beq.n	800d750 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	69da      	ldr	r2, [r3, #28]
 800d732:	4b1d      	ldr	r3, [pc, #116]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d208      	bcs.n	800d750 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800d73e:	4b1a      	ldr	r3, [pc, #104]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	4917      	ldr	r1, [pc, #92]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d74c:	4313      	orrs	r3, r2
 800d74e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d750:	f000 f834 	bl	800d7bc <HAL_RCC_GetSysClockFreq>
 800d754:	4602      	mov	r2, r0
 800d756:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d758:	699b      	ldr	r3, [r3, #24]
 800d75a:	0a1b      	lsrs	r3, r3, #8
 800d75c:	f003 030f 	and.w	r3, r3, #15
 800d760:	4912      	ldr	r1, [pc, #72]	; (800d7ac <HAL_RCC_ClockConfig+0x35c>)
 800d762:	5ccb      	ldrb	r3, [r1, r3]
 800d764:	f003 031f 	and.w	r3, r3, #31
 800d768:	fa22 f303 	lsr.w	r3, r2, r3
 800d76c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d76e:	4b0e      	ldr	r3, [pc, #56]	; (800d7a8 <HAL_RCC_ClockConfig+0x358>)
 800d770:	699b      	ldr	r3, [r3, #24]
 800d772:	f003 030f 	and.w	r3, r3, #15
 800d776:	4a0d      	ldr	r2, [pc, #52]	; (800d7ac <HAL_RCC_ClockConfig+0x35c>)
 800d778:	5cd3      	ldrb	r3, [r2, r3]
 800d77a:	f003 031f 	and.w	r3, r3, #31
 800d77e:	693a      	ldr	r2, [r7, #16]
 800d780:	fa22 f303 	lsr.w	r3, r2, r3
 800d784:	4a0a      	ldr	r2, [pc, #40]	; (800d7b0 <HAL_RCC_ClockConfig+0x360>)
 800d786:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d788:	4a0a      	ldr	r2, [pc, #40]	; (800d7b4 <HAL_RCC_ClockConfig+0x364>)
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800d78e:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <HAL_RCC_ClockConfig+0x368>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4618      	mov	r0, r3
 800d794:	f7f9 fdbe 	bl	8007314 <HAL_InitTick>
 800d798:	4603      	mov	r3, r0
 800d79a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	58024400 	.word	0x58024400
 800d7ac:	080176c8 	.word	0x080176c8
 800d7b0:	24000048 	.word	0x24000048
 800d7b4:	24000044 	.word	0x24000044
 800d7b8:	2400004c 	.word	0x2400004c

0800d7bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b089      	sub	sp, #36	; 0x24
 800d7c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d7c2:	4bb3      	ldr	r3, [pc, #716]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d7c4:	691b      	ldr	r3, [r3, #16]
 800d7c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7ca:	2b18      	cmp	r3, #24
 800d7cc:	f200 8155 	bhi.w	800da7a <HAL_RCC_GetSysClockFreq+0x2be>
 800d7d0:	a201      	add	r2, pc, #4	; (adr r2, 800d7d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d7d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d6:	bf00      	nop
 800d7d8:	0800d83d 	.word	0x0800d83d
 800d7dc:	0800da7b 	.word	0x0800da7b
 800d7e0:	0800da7b 	.word	0x0800da7b
 800d7e4:	0800da7b 	.word	0x0800da7b
 800d7e8:	0800da7b 	.word	0x0800da7b
 800d7ec:	0800da7b 	.word	0x0800da7b
 800d7f0:	0800da7b 	.word	0x0800da7b
 800d7f4:	0800da7b 	.word	0x0800da7b
 800d7f8:	0800d863 	.word	0x0800d863
 800d7fc:	0800da7b 	.word	0x0800da7b
 800d800:	0800da7b 	.word	0x0800da7b
 800d804:	0800da7b 	.word	0x0800da7b
 800d808:	0800da7b 	.word	0x0800da7b
 800d80c:	0800da7b 	.word	0x0800da7b
 800d810:	0800da7b 	.word	0x0800da7b
 800d814:	0800da7b 	.word	0x0800da7b
 800d818:	0800d869 	.word	0x0800d869
 800d81c:	0800da7b 	.word	0x0800da7b
 800d820:	0800da7b 	.word	0x0800da7b
 800d824:	0800da7b 	.word	0x0800da7b
 800d828:	0800da7b 	.word	0x0800da7b
 800d82c:	0800da7b 	.word	0x0800da7b
 800d830:	0800da7b 	.word	0x0800da7b
 800d834:	0800da7b 	.word	0x0800da7b
 800d838:	0800d86f 	.word	0x0800d86f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d83c:	4b94      	ldr	r3, [pc, #592]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0320 	and.w	r3, r3, #32
 800d844:	2b00      	cmp	r3, #0
 800d846:	d009      	beq.n	800d85c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d848:	4b91      	ldr	r3, [pc, #580]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	08db      	lsrs	r3, r3, #3
 800d84e:	f003 0303 	and.w	r3, r3, #3
 800d852:	4a90      	ldr	r2, [pc, #576]	; (800da94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d854:	fa22 f303 	lsr.w	r3, r2, r3
 800d858:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800d85a:	e111      	b.n	800da80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d85c:	4b8d      	ldr	r3, [pc, #564]	; (800da94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d85e:	61bb      	str	r3, [r7, #24]
      break;
 800d860:	e10e      	b.n	800da80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800d862:	4b8d      	ldr	r3, [pc, #564]	; (800da98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d864:	61bb      	str	r3, [r7, #24]
      break;
 800d866:	e10b      	b.n	800da80 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800d868:	4b8c      	ldr	r3, [pc, #560]	; (800da9c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d86a:	61bb      	str	r3, [r7, #24]
      break;
 800d86c:	e108      	b.n	800da80 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d86e:	4b88      	ldr	r3, [pc, #544]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d872:	f003 0303 	and.w	r3, r3, #3
 800d876:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800d878:	4b85      	ldr	r3, [pc, #532]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87c:	091b      	lsrs	r3, r3, #4
 800d87e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d882:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d884:	4b82      	ldr	r3, [pc, #520]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	f003 0301 	and.w	r3, r3, #1
 800d88c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d88e:	4b80      	ldr	r3, [pc, #512]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d892:	08db      	lsrs	r3, r3, #3
 800d894:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d898:	68fa      	ldr	r2, [r7, #12]
 800d89a:	fb02 f303 	mul.w	r3, r2, r3
 800d89e:	ee07 3a90 	vmov	s15, r3
 800d8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800d8aa:	693b      	ldr	r3, [r7, #16]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f000 80e1 	beq.w	800da74 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	2b02      	cmp	r3, #2
 800d8b6:	f000 8083 	beq.w	800d9c0 <HAL_RCC_GetSysClockFreq+0x204>
 800d8ba:	697b      	ldr	r3, [r7, #20]
 800d8bc:	2b02      	cmp	r3, #2
 800d8be:	f200 80a1 	bhi.w	800da04 <HAL_RCC_GetSysClockFreq+0x248>
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d003      	beq.n	800d8d0 <HAL_RCC_GetSysClockFreq+0x114>
 800d8c8:	697b      	ldr	r3, [r7, #20]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d056      	beq.n	800d97c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d8ce:	e099      	b.n	800da04 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8d0:	4b6f      	ldr	r3, [pc, #444]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	f003 0320 	and.w	r3, r3, #32
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d02d      	beq.n	800d938 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8dc:	4b6c      	ldr	r3, [pc, #432]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	08db      	lsrs	r3, r3, #3
 800d8e2:	f003 0303 	and.w	r3, r3, #3
 800d8e6:	4a6b      	ldr	r2, [pc, #428]	; (800da94 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d8e8:	fa22 f303 	lsr.w	r3, r2, r3
 800d8ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	ee07 3a90 	vmov	s15, r3
 800d8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d906:	4b62      	ldr	r3, [pc, #392]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d90a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d90e:	ee07 3a90 	vmov	s15, r3
 800d912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d916:	ed97 6a02 	vldr	s12, [r7, #8]
 800d91a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800daa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d91e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d92a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d92e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d932:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800d936:	e087      	b.n	800da48 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	ee07 3a90 	vmov	s15, r3
 800d93e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d942:	eddf 6a58 	vldr	s13, [pc, #352]	; 800daa4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800d946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d94a:	4b51      	ldr	r3, [pc, #324]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d952:	ee07 3a90 	vmov	s15, r3
 800d956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d95a:	ed97 6a02 	vldr	s12, [r7, #8]
 800d95e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800daa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d96a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d96e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d972:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d976:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d97a:	e065      	b.n	800da48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d97c:	693b      	ldr	r3, [r7, #16]
 800d97e:	ee07 3a90 	vmov	s15, r3
 800d982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d986:	eddf 6a48 	vldr	s13, [pc, #288]	; 800daa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800d98a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d98e:	4b40      	ldr	r3, [pc, #256]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d996:	ee07 3a90 	vmov	s15, r3
 800d99a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d99e:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800daa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d9be:	e043      	b.n	800da48 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	ee07 3a90 	vmov	s15, r3
 800d9c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 800daac <HAL_RCC_GetSysClockFreq+0x2f0>
 800d9ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d2:	4b2f      	ldr	r3, [pc, #188]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9da:	ee07 3a90 	vmov	s15, r3
 800d9de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800daa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800da02:	e021      	b.n	800da48 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	ee07 3a90 	vmov	s15, r3
 800da0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da0e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800daa8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800da12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da16:	4b1e      	ldr	r3, [pc, #120]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da1e:	ee07 3a90 	vmov	s15, r3
 800da22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da26:	ed97 6a02 	vldr	s12, [r7, #8]
 800da2a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800daa0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800da46:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800da48:	4b11      	ldr	r3, [pc, #68]	; (800da90 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da4c:	0a5b      	lsrs	r3, r3, #9
 800da4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da52:	3301      	adds	r3, #1
 800da54:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	ee07 3a90 	vmov	s15, r3
 800da5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800da60:	edd7 6a07 	vldr	s13, [r7, #28]
 800da64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da6c:	ee17 3a90 	vmov	r3, s15
 800da70:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800da72:	e005      	b.n	800da80 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800da74:	2300      	movs	r3, #0
 800da76:	61bb      	str	r3, [r7, #24]
      break;
 800da78:	e002      	b.n	800da80 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800da7a:	4b07      	ldr	r3, [pc, #28]	; (800da98 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800da7c:	61bb      	str	r3, [r7, #24]
      break;
 800da7e:	bf00      	nop
  }

  return sysclockfreq;
 800da80:	69bb      	ldr	r3, [r7, #24]
}
 800da82:	4618      	mov	r0, r3
 800da84:	3724      	adds	r7, #36	; 0x24
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	58024400 	.word	0x58024400
 800da94:	03d09000 	.word	0x03d09000
 800da98:	003d0900 	.word	0x003d0900
 800da9c:	017d7840 	.word	0x017d7840
 800daa0:	46000000 	.word	0x46000000
 800daa4:	4c742400 	.word	0x4c742400
 800daa8:	4a742400 	.word	0x4a742400
 800daac:	4bbebc20 	.word	0x4bbebc20

0800dab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dab6:	f7ff fe81 	bl	800d7bc <HAL_RCC_GetSysClockFreq>
 800daba:	4602      	mov	r2, r0
 800dabc:	4b10      	ldr	r3, [pc, #64]	; (800db00 <HAL_RCC_GetHCLKFreq+0x50>)
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	0a1b      	lsrs	r3, r3, #8
 800dac2:	f003 030f 	and.w	r3, r3, #15
 800dac6:	490f      	ldr	r1, [pc, #60]	; (800db04 <HAL_RCC_GetHCLKFreq+0x54>)
 800dac8:	5ccb      	ldrb	r3, [r1, r3]
 800daca:	f003 031f 	and.w	r3, r3, #31
 800dace:	fa22 f303 	lsr.w	r3, r2, r3
 800dad2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dad4:	4b0a      	ldr	r3, [pc, #40]	; (800db00 <HAL_RCC_GetHCLKFreq+0x50>)
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	f003 030f 	and.w	r3, r3, #15
 800dadc:	4a09      	ldr	r2, [pc, #36]	; (800db04 <HAL_RCC_GetHCLKFreq+0x54>)
 800dade:	5cd3      	ldrb	r3, [r2, r3]
 800dae0:	f003 031f 	and.w	r3, r3, #31
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	fa22 f303 	lsr.w	r3, r2, r3
 800daea:	4a07      	ldr	r2, [pc, #28]	; (800db08 <HAL_RCC_GetHCLKFreq+0x58>)
 800daec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800daee:	4a07      	ldr	r2, [pc, #28]	; (800db0c <HAL_RCC_GetHCLKFreq+0x5c>)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800daf4:	4b04      	ldr	r3, [pc, #16]	; (800db08 <HAL_RCC_GetHCLKFreq+0x58>)
 800daf6:	681b      	ldr	r3, [r3, #0]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	58024400 	.word	0x58024400
 800db04:	080176c8 	.word	0x080176c8
 800db08:	24000048 	.word	0x24000048
 800db0c:	24000044 	.word	0x24000044

0800db10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800db14:	f7ff ffcc 	bl	800dab0 <HAL_RCC_GetHCLKFreq>
 800db18:	4602      	mov	r2, r0
 800db1a:	4b06      	ldr	r3, [pc, #24]	; (800db34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800db1c:	69db      	ldr	r3, [r3, #28]
 800db1e:	091b      	lsrs	r3, r3, #4
 800db20:	f003 0307 	and.w	r3, r3, #7
 800db24:	4904      	ldr	r1, [pc, #16]	; (800db38 <HAL_RCC_GetPCLK1Freq+0x28>)
 800db26:	5ccb      	ldrb	r3, [r1, r3]
 800db28:	f003 031f 	and.w	r3, r3, #31
 800db2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800db30:	4618      	mov	r0, r3
 800db32:	bd80      	pop	{r7, pc}
 800db34:	58024400 	.word	0x58024400
 800db38:	080176c8 	.word	0x080176c8

0800db3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800db40:	f7ff ffb6 	bl	800dab0 <HAL_RCC_GetHCLKFreq>
 800db44:	4602      	mov	r2, r0
 800db46:	4b06      	ldr	r3, [pc, #24]	; (800db60 <HAL_RCC_GetPCLK2Freq+0x24>)
 800db48:	69db      	ldr	r3, [r3, #28]
 800db4a:	0a1b      	lsrs	r3, r3, #8
 800db4c:	f003 0307 	and.w	r3, r3, #7
 800db50:	4904      	ldr	r1, [pc, #16]	; (800db64 <HAL_RCC_GetPCLK2Freq+0x28>)
 800db52:	5ccb      	ldrb	r3, [r1, r3]
 800db54:	f003 031f 	and.w	r3, r3, #31
 800db58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	58024400 	.word	0x58024400
 800db64:	080176c8 	.word	0x080176c8

0800db68 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800db68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db6c:	b0ca      	sub	sp, #296	; 0x128
 800db6e:	af00      	add	r7, sp, #0
 800db70:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800db74:	2300      	movs	r3, #0
 800db76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800db7a:	2300      	movs	r3, #0
 800db7c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800db80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db88:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800db8c:	2500      	movs	r5, #0
 800db8e:	ea54 0305 	orrs.w	r3, r4, r5
 800db92:	d049      	beq.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800db94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800db98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800db9e:	d02f      	beq.n	800dc00 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800dba0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dba4:	d828      	bhi.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dba6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbaa:	d01a      	beq.n	800dbe2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800dbac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dbb0:	d822      	bhi.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d003      	beq.n	800dbbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800dbb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dbba:	d007      	beq.n	800dbcc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dbbc:	e01c      	b.n	800dbf8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dbbe:	4bb8      	ldr	r3, [pc, #736]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc2:	4ab7      	ldr	r2, [pc, #732]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dbc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dbca:	e01a      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbd0:	3308      	adds	r3, #8
 800dbd2:	2102      	movs	r1, #2
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f002 fb61 	bl	801029c <RCCEx_PLL2_Config>
 800dbda:	4603      	mov	r3, r0
 800dbdc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dbe0:	e00f      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dbe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dbe6:	3328      	adds	r3, #40	; 0x28
 800dbe8:	2102      	movs	r1, #2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f002 fc08 	bl	8010400 <RCCEx_PLL3_Config>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800dbf6:	e004      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dbfe:	e000      	b.n	800dc02 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800dc00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10a      	bne.n	800dc20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dc0a:	4ba5      	ldr	r3, [pc, #660]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc0e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800dc12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc18:	4aa1      	ldr	r2, [pc, #644]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc1a:	430b      	orrs	r3, r1
 800dc1c:	6513      	str	r3, [r2, #80]	; 0x50
 800dc1e:	e003      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dc24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dc28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc30:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800dc34:	f04f 0900 	mov.w	r9, #0
 800dc38:	ea58 0309 	orrs.w	r3, r8, r9
 800dc3c:	d047      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800dc3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d82a      	bhi.n	800dc9e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800dc48:	a201      	add	r2, pc, #4	; (adr r2, 800dc50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800dc4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc4e:	bf00      	nop
 800dc50:	0800dc65 	.word	0x0800dc65
 800dc54:	0800dc73 	.word	0x0800dc73
 800dc58:	0800dc89 	.word	0x0800dc89
 800dc5c:	0800dca7 	.word	0x0800dca7
 800dc60:	0800dca7 	.word	0x0800dca7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc64:	4b8e      	ldr	r3, [pc, #568]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc68:	4a8d      	ldr	r2, [pc, #564]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dc6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dc6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc70:	e01a      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc76:	3308      	adds	r3, #8
 800dc78:	2100      	movs	r1, #0
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f002 fb0e 	bl	801029c <RCCEx_PLL2_Config>
 800dc80:	4603      	mov	r3, r0
 800dc82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc86:	e00f      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dc8c:	3328      	adds	r3, #40	; 0x28
 800dc8e:	2100      	movs	r1, #0
 800dc90:	4618      	mov	r0, r3
 800dc92:	f002 fbb5 	bl	8010400 <RCCEx_PLL3_Config>
 800dc96:	4603      	mov	r3, r0
 800dc98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dc9c:	e004      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dca4:	e000      	b.n	800dca8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800dca6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10a      	bne.n	800dcc6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dcb0:	4b7b      	ldr	r3, [pc, #492]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcb4:	f023 0107 	bic.w	r1, r3, #7
 800dcb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcbe:	4a78      	ldr	r2, [pc, #480]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dcc0:	430b      	orrs	r3, r1
 800dcc2:	6513      	str	r3, [r2, #80]	; 0x50
 800dcc4:	e003      	b.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dcc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dcca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800dcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800dcda:	f04f 0b00 	mov.w	fp, #0
 800dcde:	ea5a 030b 	orrs.w	r3, sl, fp
 800dce2:	d04c      	beq.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800dce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcee:	d030      	beq.n	800dd52 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800dcf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dcf4:	d829      	bhi.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcf6:	2bc0      	cmp	r3, #192	; 0xc0
 800dcf8:	d02d      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800dcfa:	2bc0      	cmp	r3, #192	; 0xc0
 800dcfc:	d825      	bhi.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dcfe:	2b80      	cmp	r3, #128	; 0x80
 800dd00:	d018      	beq.n	800dd34 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800dd02:	2b80      	cmp	r3, #128	; 0x80
 800dd04:	d821      	bhi.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d002      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800dd0a:	2b40      	cmp	r3, #64	; 0x40
 800dd0c:	d007      	beq.n	800dd1e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800dd0e:	e01c      	b.n	800dd4a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd10:	4b63      	ldr	r3, [pc, #396]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd14:	4a62      	ldr	r2, [pc, #392]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dd1c:	e01c      	b.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dd1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd22:	3308      	adds	r3, #8
 800dd24:	2100      	movs	r1, #0
 800dd26:	4618      	mov	r0, r3
 800dd28:	f002 fab8 	bl	801029c <RCCEx_PLL2_Config>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dd32:	e011      	b.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dd34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd38:	3328      	adds	r3, #40	; 0x28
 800dd3a:	2100      	movs	r1, #0
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	f002 fb5f 	bl	8010400 <RCCEx_PLL3_Config>
 800dd42:	4603      	mov	r3, r0
 800dd44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800dd48:	e006      	b.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dd50:	e002      	b.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dd52:	bf00      	nop
 800dd54:	e000      	b.n	800dd58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800dd56:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10a      	bne.n	800dd76 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800dd60:	4b4f      	ldr	r3, [pc, #316]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd64:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800dd68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd6e:	4a4c      	ldr	r2, [pc, #304]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dd70:	430b      	orrs	r3, r1
 800dd72:	6513      	str	r3, [r2, #80]	; 0x50
 800dd74:	e003      	b.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dd7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800dd8a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800dd94:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800dd98:	460b      	mov	r3, r1
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	d053      	beq.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800dd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dda2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800dda6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ddaa:	d035      	beq.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ddac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ddb0:	d82e      	bhi.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ddb2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ddb6:	d031      	beq.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ddb8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ddbc:	d828      	bhi.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ddbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddc2:	d01a      	beq.n	800ddfa <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ddc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddc8:	d822      	bhi.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d003      	beq.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ddce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddd2:	d007      	beq.n	800dde4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ddd4:	e01c      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddd6:	4b32      	ldr	r3, [pc, #200]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ddd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddda:	4a31      	ldr	r2, [pc, #196]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800dddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dde0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dde2:	e01c      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dde4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dde8:	3308      	adds	r3, #8
 800ddea:	2100      	movs	r1, #0
 800ddec:	4618      	mov	r0, r3
 800ddee:	f002 fa55 	bl	801029c <RCCEx_PLL2_Config>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ddf8:	e011      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ddfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ddfe:	3328      	adds	r3, #40	; 0x28
 800de00:	2100      	movs	r1, #0
 800de02:	4618      	mov	r0, r3
 800de04:	f002 fafc 	bl	8010400 <RCCEx_PLL3_Config>
 800de08:	4603      	mov	r3, r0
 800de0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800de0e:	e006      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800de10:	2301      	movs	r3, #1
 800de12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800de16:	e002      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800de18:	bf00      	nop
 800de1a:	e000      	b.n	800de1e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800de1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800de1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de22:	2b00      	cmp	r3, #0
 800de24:	d10b      	bne.n	800de3e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800de26:	4b1e      	ldr	r3, [pc, #120]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800de28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de2a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800de2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800de36:	4a1a      	ldr	r2, [pc, #104]	; (800dea0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800de38:	430b      	orrs	r3, r1
 800de3a:	6593      	str	r3, [r2, #88]	; 0x58
 800de3c:	e003      	b.n	800de46 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800de42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800de46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800de52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800de56:	2300      	movs	r3, #0
 800de58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800de5c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800de60:	460b      	mov	r3, r1
 800de62:	4313      	orrs	r3, r2
 800de64:	d056      	beq.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800de66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800de6a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800de6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de72:	d038      	beq.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800de74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de78:	d831      	bhi.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de7e:	d034      	beq.n	800deea <HAL_RCCEx_PeriphCLKConfig+0x382>
 800de80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de84:	d82b      	bhi.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de8a:	d01d      	beq.n	800dec8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800de8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de90:	d825      	bhi.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de92:	2b00      	cmp	r3, #0
 800de94:	d006      	beq.n	800dea4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800de96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de9a:	d00a      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800de9c:	e01f      	b.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x376>
 800de9e:	bf00      	nop
 800dea0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dea4:	4ba2      	ldr	r3, [pc, #648]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800dea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea8:	4aa1      	ldr	r2, [pc, #644]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800deaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800deae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800deb0:	e01c      	b.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800deb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800deb6:	3308      	adds	r3, #8
 800deb8:	2100      	movs	r1, #0
 800deba:	4618      	mov	r0, r3
 800debc:	f002 f9ee 	bl	801029c <RCCEx_PLL2_Config>
 800dec0:	4603      	mov	r3, r0
 800dec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800dec6:	e011      	b.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800decc:	3328      	adds	r3, #40	; 0x28
 800dece:	2100      	movs	r1, #0
 800ded0:	4618      	mov	r0, r3
 800ded2:	f002 fa95 	bl	8010400 <RCCEx_PLL3_Config>
 800ded6:	4603      	mov	r3, r0
 800ded8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800dedc:	e006      	b.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800dee4:	e002      	b.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800dee6:	bf00      	nop
 800dee8:	e000      	b.n	800deec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800deea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800deec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800def0:	2b00      	cmp	r3, #0
 800def2:	d10b      	bne.n	800df0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800def4:	4b8e      	ldr	r3, [pc, #568]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800def6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800def8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800defc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df00:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800df04:	4a8a      	ldr	r2, [pc, #552]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df06:	430b      	orrs	r3, r1
 800df08:	6593      	str	r3, [r2, #88]	; 0x58
 800df0a:	e003      	b.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df10:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800df14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800df20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800df24:	2300      	movs	r3, #0
 800df26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800df2a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800df2e:	460b      	mov	r3, r1
 800df30:	4313      	orrs	r3, r2
 800df32:	d03a      	beq.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800df34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df3a:	2b30      	cmp	r3, #48	; 0x30
 800df3c:	d01f      	beq.n	800df7e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800df3e:	2b30      	cmp	r3, #48	; 0x30
 800df40:	d819      	bhi.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800df42:	2b20      	cmp	r3, #32
 800df44:	d00c      	beq.n	800df60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800df46:	2b20      	cmp	r3, #32
 800df48:	d815      	bhi.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d019      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800df4e:	2b10      	cmp	r3, #16
 800df50:	d111      	bne.n	800df76 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df52:	4b77      	ldr	r3, [pc, #476]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df56:	4a76      	ldr	r2, [pc, #472]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800df5e:	e011      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800df60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df64:	3308      	adds	r3, #8
 800df66:	2102      	movs	r1, #2
 800df68:	4618      	mov	r0, r3
 800df6a:	f002 f997 	bl	801029c <RCCEx_PLL2_Config>
 800df6e:	4603      	mov	r3, r0
 800df70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800df74:	e006      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800df76:	2301      	movs	r3, #1
 800df78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800df7c:	e002      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df7e:	bf00      	nop
 800df80:	e000      	b.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800df82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800df84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d10a      	bne.n	800dfa2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800df8c:	4b68      	ldr	r3, [pc, #416]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df90:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800df94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800df98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df9a:	4a65      	ldr	r2, [pc, #404]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800df9c:	430b      	orrs	r3, r1
 800df9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dfa0:	e003      	b.n	800dfaa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfa2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800dfa6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800dfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800dfb6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800dfba:	2300      	movs	r3, #0
 800dfbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800dfc0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	4313      	orrs	r3, r2
 800dfc8:	d051      	beq.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800dfca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800dfce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfd4:	d035      	beq.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800dfd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dfda:	d82e      	bhi.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dfdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfe0:	d031      	beq.n	800e046 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dfe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfe6:	d828      	bhi.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dfe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfec:	d01a      	beq.n	800e024 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800dfee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dff2:	d822      	bhi.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d003      	beq.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800dff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dffc:	d007      	beq.n	800e00e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800dffe:	e01c      	b.n	800e03a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e000:	4b4b      	ldr	r3, [pc, #300]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e004:	4a4a      	ldr	r2, [pc, #296]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e00a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e00c:	e01c      	b.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e012:	3308      	adds	r3, #8
 800e014:	2100      	movs	r1, #0
 800e016:	4618      	mov	r0, r3
 800e018:	f002 f940 	bl	801029c <RCCEx_PLL2_Config>
 800e01c:	4603      	mov	r3, r0
 800e01e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e022:	e011      	b.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e028:	3328      	adds	r3, #40	; 0x28
 800e02a:	2100      	movs	r1, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 f9e7 	bl	8010400 <RCCEx_PLL3_Config>
 800e032:	4603      	mov	r3, r0
 800e034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800e038:	e006      	b.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e03a:	2301      	movs	r3, #1
 800e03c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e040:	e002      	b.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e042:	bf00      	nop
 800e044:	e000      	b.n	800e048 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800e046:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d10a      	bne.n	800e066 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e050:	4b37      	ldr	r3, [pc, #220]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e054:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800e058:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e05c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e05e:	4a34      	ldr	r2, [pc, #208]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e060:	430b      	orrs	r3, r1
 800e062:	6513      	str	r3, [r2, #80]	; 0x50
 800e064:	e003      	b.n	800e06e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e066:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e06a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e06e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e076:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800e07a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e07e:	2300      	movs	r3, #0
 800e080:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e084:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e088:	460b      	mov	r3, r1
 800e08a:	4313      	orrs	r3, r2
 800e08c:	d056      	beq.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800e08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e098:	d033      	beq.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800e09a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e09e:	d82c      	bhi.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e0a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0a4:	d02f      	beq.n	800e106 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800e0a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e0aa:	d826      	bhi.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e0ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e0b0:	d02b      	beq.n	800e10a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800e0b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e0b6:	d820      	bhi.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e0b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0bc:	d012      	beq.n	800e0e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800e0be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0c2:	d81a      	bhi.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d022      	beq.n	800e10e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800e0c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0cc:	d115      	bne.n	800e0fa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e0ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0d2:	3308      	adds	r3, #8
 800e0d4:	2101      	movs	r1, #1
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f002 f8e0 	bl	801029c <RCCEx_PLL2_Config>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0e2:	e015      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e0e8:	3328      	adds	r3, #40	; 0x28
 800e0ea:	2101      	movs	r1, #1
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f002 f987 	bl	8010400 <RCCEx_PLL3_Config>
 800e0f2:	4603      	mov	r3, r0
 800e0f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800e0f8:	e00a      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e100:	e006      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e102:	bf00      	nop
 800e104:	e004      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e106:	bf00      	nop
 800e108:	e002      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e10a:	bf00      	nop
 800e10c:	e000      	b.n	800e110 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800e10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e110:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e114:	2b00      	cmp	r3, #0
 800e116:	d10d      	bne.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e118:	4b05      	ldr	r3, [pc, #20]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e11c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800e120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e126:	4a02      	ldr	r2, [pc, #8]	; (800e130 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800e128:	430b      	orrs	r3, r1
 800e12a:	6513      	str	r3, [r2, #80]	; 0x50
 800e12c:	e006      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800e12e:	bf00      	nop
 800e130:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e134:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e138:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e144:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800e148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e14c:	2300      	movs	r3, #0
 800e14e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e152:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800e156:	460b      	mov	r3, r1
 800e158:	4313      	orrs	r3, r2
 800e15a:	d055      	beq.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800e15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e168:	d033      	beq.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800e16a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e16e:	d82c      	bhi.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e174:	d02f      	beq.n	800e1d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800e176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e17a:	d826      	bhi.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e17c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e180:	d02b      	beq.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0x672>
 800e182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e186:	d820      	bhi.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e18c:	d012      	beq.n	800e1b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800e18e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e192:	d81a      	bhi.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800e194:	2b00      	cmp	r3, #0
 800e196:	d022      	beq.n	800e1de <HAL_RCCEx_PeriphCLKConfig+0x676>
 800e198:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e19c:	d115      	bne.n	800e1ca <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e19e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	f002 f878 	bl	801029c <RCCEx_PLL2_Config>
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e1b2:	e015      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e1b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1b8:	3328      	adds	r3, #40	; 0x28
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f002 f91f 	bl	8010400 <RCCEx_PLL3_Config>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800e1c8:	e00a      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e1d0:	e006      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1d2:	bf00      	nop
 800e1d4:	e004      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1d6:	bf00      	nop
 800e1d8:	e002      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1da:	bf00      	nop
 800e1dc:	e000      	b.n	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800e1de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10b      	bne.n	800e200 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e1e8:	4ba3      	ldr	r3, [pc, #652]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1ec:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e1f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800e1f8:	4a9f      	ldr	r2, [pc, #636]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e1fa:	430b      	orrs	r3, r1
 800e1fc:	6593      	str	r3, [r2, #88]	; 0x58
 800e1fe:	e003      	b.n	800e208 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e200:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e204:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e210:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800e214:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e218:	2300      	movs	r3, #0
 800e21a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800e21e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e222:	460b      	mov	r3, r1
 800e224:	4313      	orrs	r3, r2
 800e226:	d037      	beq.n	800e298 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800e228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e22c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e22e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e232:	d00e      	beq.n	800e252 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800e234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e238:	d816      	bhi.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d018      	beq.n	800e270 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800e23e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e242:	d111      	bne.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e244:	4b8c      	ldr	r3, [pc, #560]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e248:	4a8b      	ldr	r2, [pc, #556]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e24a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e24e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e250:	e00f      	b.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e256:	3308      	adds	r3, #8
 800e258:	2101      	movs	r1, #1
 800e25a:	4618      	mov	r0, r3
 800e25c:	f002 f81e 	bl	801029c <RCCEx_PLL2_Config>
 800e260:	4603      	mov	r3, r0
 800e262:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800e266:	e004      	b.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e268:	2301      	movs	r3, #1
 800e26a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e26e:	e000      	b.n	800e272 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800e270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e272:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e276:	2b00      	cmp	r3, #0
 800e278:	d10a      	bne.n	800e290 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e27a:	4b7f      	ldr	r3, [pc, #508]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e27c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e27e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e288:	4a7b      	ldr	r2, [pc, #492]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e28a:	430b      	orrs	r3, r1
 800e28c:	6513      	str	r3, [r2, #80]	; 0x50
 800e28e:	e003      	b.n	800e298 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e290:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e294:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800e2a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800e2ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	d039      	beq.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800e2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	d81c      	bhi.n	800e2fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 800e2c2:	a201      	add	r2, pc, #4	; (adr r2, 800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800e2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2c8:	0800e305 	.word	0x0800e305
 800e2cc:	0800e2d9 	.word	0x0800e2d9
 800e2d0:	0800e2e7 	.word	0x0800e2e7
 800e2d4:	0800e305 	.word	0x0800e305
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e2d8:	4b67      	ldr	r3, [pc, #412]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2dc:	4a66      	ldr	r2, [pc, #408]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e2de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e2e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2e4:	e00f      	b.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e2ea:	3308      	adds	r3, #8
 800e2ec:	2102      	movs	r1, #2
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f001 ffd4 	bl	801029c <RCCEx_PLL2_Config>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800e2fa:	e004      	b.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e302:	e000      	b.n	800e306 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800e304:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d10a      	bne.n	800e324 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e30e:	4b5a      	ldr	r3, [pc, #360]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e312:	f023 0103 	bic.w	r1, r3, #3
 800e316:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e31c:	4a56      	ldr	r2, [pc, #344]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e31e:	430b      	orrs	r3, r1
 800e320:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e322:	e003      	b.n	800e32c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e324:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e328:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e32c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e334:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800e338:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e33c:	2300      	movs	r3, #0
 800e33e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e342:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e346:	460b      	mov	r3, r1
 800e348:	4313      	orrs	r3, r2
 800e34a:	f000 809f 	beq.w	800e48c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e34e:	4b4b      	ldr	r3, [pc, #300]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a4a      	ldr	r2, [pc, #296]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e35a:	f7f9 f825 	bl	80073a8 <HAL_GetTick>
 800e35e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e362:	e00b      	b.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e364:	f7f9 f820 	bl	80073a8 <HAL_GetTick>
 800e368:	4602      	mov	r2, r0
 800e36a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e36e:	1ad3      	subs	r3, r2, r3
 800e370:	2b64      	cmp	r3, #100	; 0x64
 800e372:	d903      	bls.n	800e37c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800e374:	2303      	movs	r3, #3
 800e376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e37a:	e005      	b.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e37c:	4b3f      	ldr	r3, [pc, #252]	; (800e47c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e384:	2b00      	cmp	r3, #0
 800e386:	d0ed      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800e388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d179      	bne.n	800e484 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e390:	4b39      	ldr	r3, [pc, #228]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e392:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e394:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e398:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e39c:	4053      	eors	r3, r2
 800e39e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d015      	beq.n	800e3d2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e3a6:	4b34      	ldr	r3, [pc, #208]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e3b2:	4b31      	ldr	r3, [pc, #196]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b6:	4a30      	ldr	r2, [pc, #192]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e3bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e3be:	4b2e      	ldr	r3, [pc, #184]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3c2:	4a2d      	ldr	r2, [pc, #180]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e3c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e3ca:	4a2b      	ldr	r2, [pc, #172]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e3cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800e3d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e3d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e3d6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e3da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3de:	d118      	bne.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e3e0:	f7f8 ffe2 	bl	80073a8 <HAL_GetTick>
 800e3e4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e3e8:	e00d      	b.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e3ea:	f7f8 ffdd 	bl	80073a8 <HAL_GetTick>
 800e3ee:	4602      	mov	r2, r0
 800e3f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e3f4:	1ad2      	subs	r2, r2, r3
 800e3f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800e3fa:	429a      	cmp	r2, r3
 800e3fc:	d903      	bls.n	800e406 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800e3fe:	2303      	movs	r3, #3
 800e400:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800e404:	e005      	b.n	800e412 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e406:	4b1c      	ldr	r3, [pc, #112]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e40a:	f003 0302 	and.w	r3, r3, #2
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0eb      	beq.n	800e3ea <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800e412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e416:	2b00      	cmp	r3, #0
 800e418:	d129      	bne.n	800e46e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e41e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e42a:	d10e      	bne.n	800e44a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800e42c:	4b12      	ldr	r3, [pc, #72]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800e434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e438:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e43c:	091a      	lsrs	r2, r3, #4
 800e43e:	4b10      	ldr	r3, [pc, #64]	; (800e480 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800e440:	4013      	ands	r3, r2
 800e442:	4a0d      	ldr	r2, [pc, #52]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e444:	430b      	orrs	r3, r1
 800e446:	6113      	str	r3, [r2, #16]
 800e448:	e005      	b.n	800e456 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800e44a:	4b0b      	ldr	r3, [pc, #44]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e44c:	691b      	ldr	r3, [r3, #16]
 800e44e:	4a0a      	ldr	r2, [pc, #40]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e450:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e454:	6113      	str	r3, [r2, #16]
 800e456:	4b08      	ldr	r3, [pc, #32]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e458:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e45a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e45e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800e462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e466:	4a04      	ldr	r2, [pc, #16]	; (800e478 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800e468:	430b      	orrs	r3, r1
 800e46a:	6713      	str	r3, [r2, #112]	; 0x70
 800e46c:	e00e      	b.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e46e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800e476:	e009      	b.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800e478:	58024400 	.word	0x58024400
 800e47c:	58024800 	.word	0x58024800
 800e480:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e48c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	f002 0301 	and.w	r3, r2, #1
 800e498:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e49c:	2300      	movs	r3, #0
 800e49e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e4a2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	4313      	orrs	r3, r2
 800e4aa:	f000 8089 	beq.w	800e5c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800e4ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e4b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e4b4:	2b28      	cmp	r3, #40	; 0x28
 800e4b6:	d86b      	bhi.n	800e590 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800e4b8:	a201      	add	r2, pc, #4	; (adr r2, 800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800e4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4be:	bf00      	nop
 800e4c0:	0800e599 	.word	0x0800e599
 800e4c4:	0800e591 	.word	0x0800e591
 800e4c8:	0800e591 	.word	0x0800e591
 800e4cc:	0800e591 	.word	0x0800e591
 800e4d0:	0800e591 	.word	0x0800e591
 800e4d4:	0800e591 	.word	0x0800e591
 800e4d8:	0800e591 	.word	0x0800e591
 800e4dc:	0800e591 	.word	0x0800e591
 800e4e0:	0800e565 	.word	0x0800e565
 800e4e4:	0800e591 	.word	0x0800e591
 800e4e8:	0800e591 	.word	0x0800e591
 800e4ec:	0800e591 	.word	0x0800e591
 800e4f0:	0800e591 	.word	0x0800e591
 800e4f4:	0800e591 	.word	0x0800e591
 800e4f8:	0800e591 	.word	0x0800e591
 800e4fc:	0800e591 	.word	0x0800e591
 800e500:	0800e57b 	.word	0x0800e57b
 800e504:	0800e591 	.word	0x0800e591
 800e508:	0800e591 	.word	0x0800e591
 800e50c:	0800e591 	.word	0x0800e591
 800e510:	0800e591 	.word	0x0800e591
 800e514:	0800e591 	.word	0x0800e591
 800e518:	0800e591 	.word	0x0800e591
 800e51c:	0800e591 	.word	0x0800e591
 800e520:	0800e599 	.word	0x0800e599
 800e524:	0800e591 	.word	0x0800e591
 800e528:	0800e591 	.word	0x0800e591
 800e52c:	0800e591 	.word	0x0800e591
 800e530:	0800e591 	.word	0x0800e591
 800e534:	0800e591 	.word	0x0800e591
 800e538:	0800e591 	.word	0x0800e591
 800e53c:	0800e591 	.word	0x0800e591
 800e540:	0800e599 	.word	0x0800e599
 800e544:	0800e591 	.word	0x0800e591
 800e548:	0800e591 	.word	0x0800e591
 800e54c:	0800e591 	.word	0x0800e591
 800e550:	0800e591 	.word	0x0800e591
 800e554:	0800e591 	.word	0x0800e591
 800e558:	0800e591 	.word	0x0800e591
 800e55c:	0800e591 	.word	0x0800e591
 800e560:	0800e599 	.word	0x0800e599
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e568:	3308      	adds	r3, #8
 800e56a:	2101      	movs	r1, #1
 800e56c:	4618      	mov	r0, r3
 800e56e:	f001 fe95 	bl	801029c <RCCEx_PLL2_Config>
 800e572:	4603      	mov	r3, r0
 800e574:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e578:	e00f      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e57a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e57e:	3328      	adds	r3, #40	; 0x28
 800e580:	2101      	movs	r1, #1
 800e582:	4618      	mov	r0, r3
 800e584:	f001 ff3c 	bl	8010400 <RCCEx_PLL3_Config>
 800e588:	4603      	mov	r3, r0
 800e58a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800e58e:	e004      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e596:	e000      	b.n	800e59a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800e598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e59a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10a      	bne.n	800e5b8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e5a2:	4bbf      	ldr	r3, [pc, #764]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800e5aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b0:	4abb      	ldr	r2, [pc, #748]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e5b2:	430b      	orrs	r3, r1
 800e5b4:	6553      	str	r3, [r2, #84]	; 0x54
 800e5b6:	e003      	b.n	800e5c0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e5bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5c8:	f002 0302 	and.w	r3, r2, #2
 800e5cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800e5d6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4313      	orrs	r3, r2
 800e5de:	d041      	beq.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800e5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e5e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5e6:	2b05      	cmp	r3, #5
 800e5e8:	d824      	bhi.n	800e634 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800e5ea:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800e5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5f0:	0800e63d 	.word	0x0800e63d
 800e5f4:	0800e609 	.word	0x0800e609
 800e5f8:	0800e61f 	.word	0x0800e61f
 800e5fc:	0800e63d 	.word	0x0800e63d
 800e600:	0800e63d 	.word	0x0800e63d
 800e604:	0800e63d 	.word	0x0800e63d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e60c:	3308      	adds	r3, #8
 800e60e:	2101      	movs	r1, #1
 800e610:	4618      	mov	r0, r3
 800e612:	f001 fe43 	bl	801029c <RCCEx_PLL2_Config>
 800e616:	4603      	mov	r3, r0
 800e618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e61c:	e00f      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e61e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e622:	3328      	adds	r3, #40	; 0x28
 800e624:	2101      	movs	r1, #1
 800e626:	4618      	mov	r0, r3
 800e628:	f001 feea 	bl	8010400 <RCCEx_PLL3_Config>
 800e62c:	4603      	mov	r3, r0
 800e62e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800e632:	e004      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e634:	2301      	movs	r3, #1
 800e636:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e63a:	e000      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800e63c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e63e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e642:	2b00      	cmp	r3, #0
 800e644:	d10a      	bne.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e646:	4b96      	ldr	r3, [pc, #600]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64a:	f023 0107 	bic.w	r1, r3, #7
 800e64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e654:	4a92      	ldr	r2, [pc, #584]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e656:	430b      	orrs	r3, r1
 800e658:	6553      	str	r3, [r2, #84]	; 0x54
 800e65a:	e003      	b.n	800e664 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e65c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e660:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66c:	f002 0304 	and.w	r3, r2, #4
 800e670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e674:	2300      	movs	r3, #0
 800e676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e67a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800e67e:	460b      	mov	r3, r1
 800e680:	4313      	orrs	r3, r2
 800e682:	d044      	beq.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800e684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e68c:	2b05      	cmp	r3, #5
 800e68e:	d825      	bhi.n	800e6dc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800e690:	a201      	add	r2, pc, #4	; (adr r2, 800e698 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800e692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e696:	bf00      	nop
 800e698:	0800e6e5 	.word	0x0800e6e5
 800e69c:	0800e6b1 	.word	0x0800e6b1
 800e6a0:	0800e6c7 	.word	0x0800e6c7
 800e6a4:	0800e6e5 	.word	0x0800e6e5
 800e6a8:	0800e6e5 	.word	0x0800e6e5
 800e6ac:	0800e6e5 	.word	0x0800e6e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e6b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f001 fdef 	bl	801029c <RCCEx_PLL2_Config>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e6c4:	e00f      	b.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e6c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6ca:	3328      	adds	r3, #40	; 0x28
 800e6cc:	2101      	movs	r1, #1
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f001 fe96 	bl	8010400 <RCCEx_PLL3_Config>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800e6da:	e004      	b.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e6dc:	2301      	movs	r3, #1
 800e6de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e6e2:	e000      	b.n	800e6e6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800e6e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e6e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10b      	bne.n	800e706 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e6ee:	4b6c      	ldr	r3, [pc, #432]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6f2:	f023 0107 	bic.w	r1, r3, #7
 800e6f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e6fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6fe:	4a68      	ldr	r2, [pc, #416]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e700:	430b      	orrs	r3, r1
 800e702:	6593      	str	r3, [r2, #88]	; 0x58
 800e704:	e003      	b.n	800e70e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e70a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e716:	f002 0320 	and.w	r3, r2, #32
 800e71a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e71e:	2300      	movs	r3, #0
 800e720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e724:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e728:	460b      	mov	r3, r1
 800e72a:	4313      	orrs	r3, r2
 800e72c:	d055      	beq.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800e72e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e736:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e73a:	d033      	beq.n	800e7a4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800e73c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e740:	d82c      	bhi.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e746:	d02f      	beq.n	800e7a8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800e748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e74c:	d826      	bhi.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e74e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e752:	d02b      	beq.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800e754:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e758:	d820      	bhi.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e75a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e75e:	d012      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e760:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e764:	d81a      	bhi.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800e766:	2b00      	cmp	r3, #0
 800e768:	d022      	beq.n	800e7b0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800e76a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e76e:	d115      	bne.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e770:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e774:	3308      	adds	r3, #8
 800e776:	2100      	movs	r1, #0
 800e778:	4618      	mov	r0, r3
 800e77a:	f001 fd8f 	bl	801029c <RCCEx_PLL2_Config>
 800e77e:	4603      	mov	r3, r0
 800e780:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e784:	e015      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e78a:	3328      	adds	r3, #40	; 0x28
 800e78c:	2102      	movs	r1, #2
 800e78e:	4618      	mov	r0, r3
 800e790:	f001 fe36 	bl	8010400 <RCCEx_PLL3_Config>
 800e794:	4603      	mov	r3, r0
 800e796:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800e79a:	e00a      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e7a2:	e006      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e7a4:	bf00      	nop
 800e7a6:	e004      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e7a8:	bf00      	nop
 800e7aa:	e002      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e7ac:	bf00      	nop
 800e7ae:	e000      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800e7b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e7b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d10b      	bne.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e7ba:	4b39      	ldr	r3, [pc, #228]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7be:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800e7c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ca:	4a35      	ldr	r2, [pc, #212]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e7cc:	430b      	orrs	r3, r1
 800e7ce:	6553      	str	r3, [r2, #84]	; 0x54
 800e7d0:	e003      	b.n	800e7da <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e7d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800e7e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800e7f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	d058      	beq.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800e7fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e7fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e802:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e806:	d033      	beq.n	800e870 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800e808:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e80c:	d82c      	bhi.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e80e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e812:	d02f      	beq.n	800e874 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800e814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e818:	d826      	bhi.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e81a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e81e:	d02b      	beq.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800e820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e824:	d820      	bhi.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e826:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e82a:	d012      	beq.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800e82c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e830:	d81a      	bhi.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800e832:	2b00      	cmp	r3, #0
 800e834:	d022      	beq.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e83a:	d115      	bne.n	800e868 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e840:	3308      	adds	r3, #8
 800e842:	2100      	movs	r1, #0
 800e844:	4618      	mov	r0, r3
 800e846:	f001 fd29 	bl	801029c <RCCEx_PLL2_Config>
 800e84a:	4603      	mov	r3, r0
 800e84c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e850:	e015      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e856:	3328      	adds	r3, #40	; 0x28
 800e858:	2102      	movs	r1, #2
 800e85a:	4618      	mov	r0, r3
 800e85c:	f001 fdd0 	bl	8010400 <RCCEx_PLL3_Config>
 800e860:	4603      	mov	r3, r0
 800e862:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800e866:	e00a      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e868:	2301      	movs	r3, #1
 800e86a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e86e:	e006      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e870:	bf00      	nop
 800e872:	e004      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e874:	bf00      	nop
 800e876:	e002      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e878:	bf00      	nop
 800e87a:	e000      	b.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800e87c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e87e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e882:	2b00      	cmp	r3, #0
 800e884:	d10e      	bne.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e886:	4b06      	ldr	r3, [pc, #24]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e88a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800e88e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e892:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e896:	4a02      	ldr	r2, [pc, #8]	; (800e8a0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800e898:	430b      	orrs	r3, r1
 800e89a:	6593      	str	r3, [r2, #88]	; 0x58
 800e89c:	e006      	b.n	800e8ac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800e89e:	bf00      	nop
 800e8a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e8a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e8ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800e8b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e8c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	4313      	orrs	r3, r2
 800e8ca:	d055      	beq.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800e8cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e8d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e8d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e8d8:	d033      	beq.n	800e942 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800e8da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e8de:	d82c      	bhi.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8e4:	d02f      	beq.n	800e946 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800e8e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8ea:	d826      	bhi.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e8f0:	d02b      	beq.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800e8f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e8f6:	d820      	bhi.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e8f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e8fc:	d012      	beq.n	800e924 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800e8fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e902:	d81a      	bhi.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800e904:	2b00      	cmp	r3, #0
 800e906:	d022      	beq.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800e908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e90c:	d115      	bne.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e90e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e912:	3308      	adds	r3, #8
 800e914:	2100      	movs	r1, #0
 800e916:	4618      	mov	r0, r3
 800e918:	f001 fcc0 	bl	801029c <RCCEx_PLL2_Config>
 800e91c:	4603      	mov	r3, r0
 800e91e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e922:	e015      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e928:	3328      	adds	r3, #40	; 0x28
 800e92a:	2102      	movs	r1, #2
 800e92c:	4618      	mov	r0, r3
 800e92e:	f001 fd67 	bl	8010400 <RCCEx_PLL3_Config>
 800e932:	4603      	mov	r3, r0
 800e934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800e938:	e00a      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e93a:	2301      	movs	r3, #1
 800e93c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800e940:	e006      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e942:	bf00      	nop
 800e944:	e004      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e946:	bf00      	nop
 800e948:	e002      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e94a:	bf00      	nop
 800e94c:	e000      	b.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800e94e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e950:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e954:	2b00      	cmp	r3, #0
 800e956:	d10b      	bne.n	800e970 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e958:	4ba1      	ldr	r3, [pc, #644]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e95c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800e960:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e964:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e968:	4a9d      	ldr	r2, [pc, #628]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e96a:	430b      	orrs	r3, r1
 800e96c:	6593      	str	r3, [r2, #88]	; 0x58
 800e96e:	e003      	b.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e970:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800e974:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800e978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e980:	f002 0308 	and.w	r3, r2, #8
 800e984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e988:	2300      	movs	r3, #0
 800e98a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e98e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800e992:	460b      	mov	r3, r1
 800e994:	4313      	orrs	r3, r2
 800e996:	d01e      	beq.n	800e9d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800e998:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e99c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9a4:	d10c      	bne.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800e9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9aa:	3328      	adds	r3, #40	; 0x28
 800e9ac:	2102      	movs	r1, #2
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f001 fd26 	bl	8010400 <RCCEx_PLL3_Config>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d002      	beq.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800e9c0:	4b87      	ldr	r3, [pc, #540]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9d0:	4a83      	ldr	r2, [pc, #524]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800e9d2:	430b      	orrs	r3, r1
 800e9d4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	f002 0310 	and.w	r3, r2, #16
 800e9e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e9ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	d01e      	beq.n	800ea34 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800e9f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800e9fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea02:	d10c      	bne.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ea04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea08:	3328      	adds	r3, #40	; 0x28
 800ea0a:	2102      	movs	r1, #2
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f001 fcf7 	bl	8010400 <RCCEx_PLL3_Config>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d002      	beq.n	800ea1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ea1e:	4b70      	ldr	r3, [pc, #448]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ea26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ea2e:	4a6c      	ldr	r2, [pc, #432]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ea30:	430b      	orrs	r3, r1
 800ea32:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ea34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea3c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ea40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea44:	2300      	movs	r3, #0
 800ea46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ea4e:	460b      	mov	r3, r1
 800ea50:	4313      	orrs	r3, r2
 800ea52:	d03e      	beq.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ea54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ea5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea60:	d022      	beq.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800ea62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea66:	d81b      	bhi.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800ea6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea70:	d00b      	beq.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800ea72:	e015      	b.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ea74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea78:	3308      	adds	r3, #8
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f001 fc0d 	bl	801029c <RCCEx_PLL2_Config>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea88:	e00f      	b.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ea8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ea8e:	3328      	adds	r3, #40	; 0x28
 800ea90:	2102      	movs	r1, #2
 800ea92:	4618      	mov	r0, r3
 800ea94:	f001 fcb4 	bl	8010400 <RCCEx_PLL3_Config>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ea9e:	e004      	b.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eaa6:	e000      	b.n	800eaaa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800eaa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eaaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d10b      	bne.n	800eaca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eab2:	4b4b      	ldr	r3, [pc, #300]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eab6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800eaba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eabe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800eac2:	4a47      	ldr	r2, [pc, #284]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eac4:	430b      	orrs	r3, r1
 800eac6:	6593      	str	r3, [r2, #88]	; 0x58
 800eac8:	e003      	b.n	800ead2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ead2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ead6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eada:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800eade:	67bb      	str	r3, [r7, #120]	; 0x78
 800eae0:	2300      	movs	r3, #0
 800eae2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eae4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800eae8:	460b      	mov	r3, r1
 800eaea:	4313      	orrs	r3, r2
 800eaec:	d03b      	beq.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800eaee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eaf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eafa:	d01f      	beq.n	800eb3c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800eafc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eb00:	d818      	bhi.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800eb02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb06:	d003      	beq.n	800eb10 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800eb08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb0c:	d007      	beq.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800eb0e:	e011      	b.n	800eb34 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb10:	4b33      	ldr	r3, [pc, #204]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb14:	4a32      	ldr	r2, [pc, #200]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800eb1c:	e00f      	b.n	800eb3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb22:	3328      	adds	r3, #40	; 0x28
 800eb24:	2101      	movs	r1, #1
 800eb26:	4618      	mov	r0, r3
 800eb28:	f001 fc6a 	bl	8010400 <RCCEx_PLL3_Config>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800eb32:	e004      	b.n	800eb3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800eb34:	2301      	movs	r3, #1
 800eb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800eb3a:	e000      	b.n	800eb3e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800eb3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800eb3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d10b      	bne.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eb46:	4b26      	ldr	r3, [pc, #152]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb4a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800eb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb56:	4a22      	ldr	r2, [pc, #136]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb58:	430b      	orrs	r3, r1
 800eb5a:	6553      	str	r3, [r2, #84]	; 0x54
 800eb5c:	e003      	b.n	800eb66 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eb62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb6e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800eb72:	673b      	str	r3, [r7, #112]	; 0x70
 800eb74:	2300      	movs	r3, #0
 800eb76:	677b      	str	r3, [r7, #116]	; 0x74
 800eb78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	d034      	beq.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800eb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d003      	beq.n	800eb94 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800eb8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb90:	d007      	beq.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800eb92:	e011      	b.n	800ebb8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb94:	4b12      	ldr	r3, [pc, #72]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb98:	4a11      	ldr	r2, [pc, #68]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800eb9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800eba0:	e00e      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800eba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eba6:	3308      	adds	r3, #8
 800eba8:	2102      	movs	r1, #2
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f001 fb76 	bl	801029c <RCCEx_PLL2_Config>
 800ebb0:	4603      	mov	r3, r0
 800ebb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ebb6:	e003      	b.n	800ebc0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ebbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ebc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d10d      	bne.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ebc8:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ebca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ebcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ebd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ebd6:	4a02      	ldr	r2, [pc, #8]	; (800ebe0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ebd8:	430b      	orrs	r3, r1
 800ebda:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ebdc:	e006      	b.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ebde:	bf00      	nop
 800ebe0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebe4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ebe8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ebec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ebf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ebf8:	66bb      	str	r3, [r7, #104]	; 0x68
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ebfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ec02:	460b      	mov	r3, r1
 800ec04:	4313      	orrs	r3, r2
 800ec06:	d00c      	beq.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ec08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec0c:	3328      	adds	r3, #40	; 0x28
 800ec0e:	2102      	movs	r1, #2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 fbf5 	bl	8010400 <RCCEx_PLL3_Config>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d002      	beq.n	800ec22 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ec22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec2a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ec2e:	663b      	str	r3, [r7, #96]	; 0x60
 800ec30:	2300      	movs	r3, #0
 800ec32:	667b      	str	r3, [r7, #100]	; 0x64
 800ec34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ec38:	460b      	mov	r3, r1
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	d038      	beq.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ec3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ec46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec4a:	d018      	beq.n	800ec7e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ec4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ec50:	d811      	bhi.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ec52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec56:	d014      	beq.n	800ec82 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ec58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ec5c:	d80b      	bhi.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d011      	beq.n	800ec86 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ec62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec66:	d106      	bne.n	800ec76 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ec68:	4bc3      	ldr	r3, [pc, #780]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec6c:	4ac2      	ldr	r2, [pc, #776]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ec72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ec74:	e008      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ec76:	2301      	movs	r3, #1
 800ec78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ec7c:	e004      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec7e:	bf00      	nop
 800ec80:	e002      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec82:	bf00      	nop
 800ec84:	e000      	b.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800ec86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ec88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d10b      	bne.n	800eca8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ec90:	4bb9      	ldr	r3, [pc, #740]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ec92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec94:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ec98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ec9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eca0:	4ab5      	ldr	r2, [pc, #724]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eca2:	430b      	orrs	r3, r1
 800eca4:	6553      	str	r3, [r2, #84]	; 0x54
 800eca6:	e003      	b.n	800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eca8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ecac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ecb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800ecbc:	65bb      	str	r3, [r7, #88]	; 0x58
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	4313      	orrs	r3, r2
 800ecca:	d009      	beq.n	800ece0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800eccc:	4baa      	ldr	r3, [pc, #680]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ecd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ecd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecda:	4aa7      	ldr	r2, [pc, #668]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecdc:	430b      	orrs	r3, r1
 800ecde:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ece0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ece4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800ecec:	653b      	str	r3, [r7, #80]	; 0x50
 800ecee:	2300      	movs	r3, #0
 800ecf0:	657b      	str	r3, [r7, #84]	; 0x54
 800ecf2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	4313      	orrs	r3, r2
 800ecfa:	d00a      	beq.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ecfc:	4b9e      	ldr	r3, [pc, #632]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800ed04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ed0c:	4a9a      	ldr	r2, [pc, #616]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed0e:	430b      	orrs	r3, r1
 800ed10:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ed12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ed1e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ed20:	2300      	movs	r3, #0
 800ed22:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ed24:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	d009      	beq.n	800ed42 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ed2e:	4b92      	ldr	r3, [pc, #584]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed32:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ed36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed3c:	4a8e      	ldr	r2, [pc, #568]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed3e:	430b      	orrs	r3, r1
 800ed40:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ed42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ed4e:	643b      	str	r3, [r7, #64]	; 0x40
 800ed50:	2300      	movs	r3, #0
 800ed52:	647b      	str	r3, [r7, #68]	; 0x44
 800ed54:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ed58:	460b      	mov	r3, r1
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	d00e      	beq.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ed5e:	4b86      	ldr	r3, [pc, #536]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	4a85      	ldr	r2, [pc, #532]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed64:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ed68:	6113      	str	r3, [r2, #16]
 800ed6a:	4b83      	ldr	r3, [pc, #524]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed6c:	6919      	ldr	r1, [r3, #16]
 800ed6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ed76:	4a80      	ldr	r2, [pc, #512]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed78:	430b      	orrs	r3, r1
 800ed7a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ed7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ed80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed84:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ed88:	63bb      	str	r3, [r7, #56]	; 0x38
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed8e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ed92:	460b      	mov	r3, r1
 800ed94:	4313      	orrs	r3, r2
 800ed96:	d009      	beq.n	800edac <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ed98:	4b77      	ldr	r3, [pc, #476]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ed9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed9c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800eda0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda6:	4a74      	ldr	r2, [pc, #464]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800eda8:	430b      	orrs	r3, r1
 800edaa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800edac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edb4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800edb8:	633b      	str	r3, [r7, #48]	; 0x30
 800edba:	2300      	movs	r3, #0
 800edbc:	637b      	str	r3, [r7, #52]	; 0x34
 800edbe:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800edc2:	460b      	mov	r3, r1
 800edc4:	4313      	orrs	r3, r2
 800edc6:	d00a      	beq.n	800edde <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800edc8:	4b6b      	ldr	r3, [pc, #428]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800edca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edcc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800edd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800edd8:	4a67      	ldr	r2, [pc, #412]	; (800ef78 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800edda:	430b      	orrs	r3, r1
 800eddc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800edde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ede2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ede6:	2100      	movs	r1, #0
 800ede8:	62b9      	str	r1, [r7, #40]	; 0x28
 800edea:	f003 0301 	and.w	r3, r3, #1
 800edee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edf0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800edf4:	460b      	mov	r3, r1
 800edf6:	4313      	orrs	r3, r2
 800edf8:	d011      	beq.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800edfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800edfe:	3308      	adds	r3, #8
 800ee00:	2100      	movs	r1, #0
 800ee02:	4618      	mov	r0, r3
 800ee04:	f001 fa4a 	bl	801029c <RCCEx_PLL2_Config>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d003      	beq.n	800ee1e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ee1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee26:	2100      	movs	r1, #0
 800ee28:	6239      	str	r1, [r7, #32]
 800ee2a:	f003 0302 	and.w	r3, r3, #2
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ee30:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ee34:	460b      	mov	r3, r1
 800ee36:	4313      	orrs	r3, r2
 800ee38:	d011      	beq.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ee3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee3e:	3308      	adds	r3, #8
 800ee40:	2101      	movs	r1, #1
 800ee42:	4618      	mov	r0, r3
 800ee44:	f001 fa2a 	bl	801029c <RCCEx_PLL2_Config>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d003      	beq.n	800ee5e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ee5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	2100      	movs	r1, #0
 800ee68:	61b9      	str	r1, [r7, #24]
 800ee6a:	f003 0304 	and.w	r3, r3, #4
 800ee6e:	61fb      	str	r3, [r7, #28]
 800ee70:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ee74:	460b      	mov	r3, r1
 800ee76:	4313      	orrs	r3, r2
 800ee78:	d011      	beq.n	800ee9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ee7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ee7e:	3308      	adds	r3, #8
 800ee80:	2102      	movs	r1, #2
 800ee82:	4618      	mov	r0, r3
 800ee84:	f001 fa0a 	bl	801029c <RCCEx_PLL2_Config>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ee8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d003      	beq.n	800ee9e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee96:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ee9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ee9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea6:	2100      	movs	r1, #0
 800eea8:	6139      	str	r1, [r7, #16]
 800eeaa:	f003 0308 	and.w	r3, r3, #8
 800eeae:	617b      	str	r3, [r7, #20]
 800eeb0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	4313      	orrs	r3, r2
 800eeb8:	d011      	beq.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800eeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eebe:	3328      	adds	r3, #40	; 0x28
 800eec0:	2100      	movs	r1, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f001 fa9c 	bl	8010400 <RCCEx_PLL3_Config>
 800eec8:	4603      	mov	r3, r0
 800eeca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800eece:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d003      	beq.n	800eede <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800eeda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800eede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	2100      	movs	r1, #0
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	f003 0310 	and.w	r3, r3, #16
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800eef4:	460b      	mov	r3, r1
 800eef6:	4313      	orrs	r3, r2
 800eef8:	d011      	beq.n	800ef1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800eefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800eefe:	3328      	adds	r3, #40	; 0x28
 800ef00:	2101      	movs	r1, #1
 800ef02:	4618      	mov	r0, r3
 800ef04:	f001 fa7c 	bl	8010400 <RCCEx_PLL3_Config>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ef0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d003      	beq.n	800ef1e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ef1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef26:	2100      	movs	r1, #0
 800ef28:	6039      	str	r1, [r7, #0]
 800ef2a:	f003 0320 	and.w	r3, r3, #32
 800ef2e:	607b      	str	r3, [r7, #4]
 800ef30:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ef34:	460b      	mov	r3, r1
 800ef36:	4313      	orrs	r3, r2
 800ef38:	d011      	beq.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ef3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ef3e:	3328      	adds	r3, #40	; 0x28
 800ef40:	2102      	movs	r1, #2
 800ef42:	4618      	mov	r0, r3
 800ef44:	f001 fa5c 	bl	8010400 <RCCEx_PLL3_Config>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ef4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d003      	beq.n	800ef5e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ef56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ef5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ef5e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d101      	bne.n	800ef6a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ef66:	2300      	movs	r3, #0
 800ef68:	e000      	b.n	800ef6c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
}
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ef72:	46bd      	mov	sp, r7
 800ef74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef78:	58024400 	.word	0x58024400

0800ef7c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b090      	sub	sp, #64	; 0x40
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ef86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef8a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ef8e:	430b      	orrs	r3, r1
 800ef90:	f040 8094 	bne.w	800f0bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ef94:	4b9e      	ldr	r3, [pc, #632]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ef96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef98:	f003 0307 	and.w	r3, r3, #7
 800ef9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ef9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa0:	2b04      	cmp	r3, #4
 800efa2:	f200 8087 	bhi.w	800f0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800efa6:	a201      	add	r2, pc, #4	; (adr r2, 800efac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800efa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efac:	0800efc1 	.word	0x0800efc1
 800efb0:	0800efe9 	.word	0x0800efe9
 800efb4:	0800f011 	.word	0x0800f011
 800efb8:	0800f0ad 	.word	0x0800f0ad
 800efbc:	0800f039 	.word	0x0800f039
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800efc0:	4b93      	ldr	r3, [pc, #588]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efcc:	d108      	bne.n	800efe0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800efce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efd2:	4618      	mov	r0, r3
 800efd4:	f001 f810 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800efdc:	f000 bd45 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800efe0:	2300      	movs	r3, #0
 800efe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800efe4:	f000 bd41 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efe8:	4b89      	ldr	r3, [pc, #548]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eff0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eff4:	d108      	bne.n	800f008 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eff6:	f107 0318 	add.w	r3, r7, #24
 800effa:	4618      	mov	r0, r3
 800effc:	f000 fd54 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f000:	69bb      	ldr	r3, [r7, #24]
 800f002:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f004:	f000 bd31 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f008:	2300      	movs	r3, #0
 800f00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f00c:	f000 bd2d 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f010:	4b7f      	ldr	r3, [pc, #508]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f01c:	d108      	bne.n	800f030 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f01e:	f107 030c 	add.w	r3, r7, #12
 800f022:	4618      	mov	r0, r3
 800f024:	f000 fe94 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f02c:	f000 bd1d 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f030:	2300      	movs	r3, #0
 800f032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f034:	f000 bd19 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f038:	4b75      	ldr	r3, [pc, #468]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f03a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f03c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f040:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f042:	4b73      	ldr	r3, [pc, #460]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f003 0304 	and.w	r3, r3, #4
 800f04a:	2b04      	cmp	r3, #4
 800f04c:	d10c      	bne.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800f04e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f050:	2b00      	cmp	r3, #0
 800f052:	d109      	bne.n	800f068 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f054:	4b6e      	ldr	r3, [pc, #440]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	08db      	lsrs	r3, r3, #3
 800f05a:	f003 0303 	and.w	r3, r3, #3
 800f05e:	4a6d      	ldr	r2, [pc, #436]	; (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f060:	fa22 f303 	lsr.w	r3, r2, r3
 800f064:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f066:	e01f      	b.n	800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f068:	4b69      	ldr	r3, [pc, #420]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f074:	d106      	bne.n	800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800f076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f078:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f07c:	d102      	bne.n	800f084 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f07e:	4b66      	ldr	r3, [pc, #408]	; (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f080:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f082:	e011      	b.n	800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f084:	4b62      	ldr	r3, [pc, #392]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f08c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f090:	d106      	bne.n	800f0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800f092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f098:	d102      	bne.n	800f0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f09a:	4b60      	ldr	r3, [pc, #384]	; (800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f09c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f09e:	e003      	b.n	800f0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f0a4:	f000 bce1 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f0a8:	f000 bcdf 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f0ac:	4b5c      	ldr	r3, [pc, #368]	; (800f220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f0ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b0:	f000 bcdb 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f0b8:	f000 bcd7 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800f0bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f0c0:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800f0c4:	430b      	orrs	r3, r1
 800f0c6:	f040 80ad 	bne.w	800f224 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800f0ca:	4b51      	ldr	r3, [pc, #324]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0ce:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800f0d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0da:	d056      	beq.n	800f18a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0e2:	f200 8090 	bhi.w	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0e8:	2bc0      	cmp	r3, #192	; 0xc0
 800f0ea:	f000 8088 	beq.w	800f1fe <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800f0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f0:	2bc0      	cmp	r3, #192	; 0xc0
 800f0f2:	f200 8088 	bhi.w	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f8:	2b80      	cmp	r3, #128	; 0x80
 800f0fa:	d032      	beq.n	800f162 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800f0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0fe:	2b80      	cmp	r3, #128	; 0x80
 800f100:	f200 8081 	bhi.w	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800f104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f106:	2b00      	cmp	r3, #0
 800f108:	d003      	beq.n	800f112 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800f10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f10c:	2b40      	cmp	r3, #64	; 0x40
 800f10e:	d014      	beq.n	800f13a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800f110:	e079      	b.n	800f206 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f112:	4b3f      	ldr	r3, [pc, #252]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f11a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f11e:	d108      	bne.n	800f132 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f124:	4618      	mov	r0, r3
 800f126:	f000 ff67 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f12e:	f000 bc9c 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f132:	2300      	movs	r3, #0
 800f134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f136:	f000 bc98 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f13a:	4b35      	ldr	r3, [pc, #212]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f142:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f146:	d108      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f148:	f107 0318 	add.w	r3, r7, #24
 800f14c:	4618      	mov	r0, r3
 800f14e:	f000 fcab 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f152:	69bb      	ldr	r3, [r7, #24]
 800f154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f156:	f000 bc88 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f15e:	f000 bc84 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f162:	4b2b      	ldr	r3, [pc, #172]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f16e:	d108      	bne.n	800f182 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f170:	f107 030c 	add.w	r3, r7, #12
 800f174:	4618      	mov	r0, r3
 800f176:	f000 fdeb 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f17e:	f000 bc74 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f186:	f000 bc70 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f18a:	4b21      	ldr	r3, [pc, #132]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f18c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f18e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f192:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f194:	4b1e      	ldr	r3, [pc, #120]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f003 0304 	and.w	r3, r3, #4
 800f19c:	2b04      	cmp	r3, #4
 800f19e:	d10c      	bne.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800f1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d109      	bne.n	800f1ba <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f1a6:	4b1a      	ldr	r3, [pc, #104]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	08db      	lsrs	r3, r3, #3
 800f1ac:	f003 0303 	and.w	r3, r3, #3
 800f1b0:	4a18      	ldr	r2, [pc, #96]	; (800f214 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800f1b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f1b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1b8:	e01f      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f1ba:	4b15      	ldr	r3, [pc, #84]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1c6:	d106      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f1c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f1ce:	d102      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f1d0:	4b11      	ldr	r3, [pc, #68]	; (800f218 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800f1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1d4:	e011      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f1d6:	4b0e      	ldr	r3, [pc, #56]	; (800f210 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1e2:	d106      	bne.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1ea:	d102      	bne.n	800f1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f1ec:	4b0b      	ldr	r3, [pc, #44]	; (800f21c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800f1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1f0:	e003      	b.n	800f1fa <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f1f6:	f000 bc38 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f1fa:	f000 bc36 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f1fe:	4b08      	ldr	r3, [pc, #32]	; (800f220 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800f200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f202:	f000 bc32 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f20a:	f000 bc2e 	b.w	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f20e:	bf00      	nop
 800f210:	58024400 	.word	0x58024400
 800f214:	03d09000 	.word	0x03d09000
 800f218:	003d0900 	.word	0x003d0900
 800f21c:	017d7840 	.word	0x017d7840
 800f220:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f224:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f228:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800f22c:	430b      	orrs	r3, r1
 800f22e:	f040 809c 	bne.w	800f36a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800f232:	4b9e      	ldr	r3, [pc, #632]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f236:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f23a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f242:	d054      	beq.n	800f2ee <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f24a:	f200 808b 	bhi.w	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f250:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f254:	f000 8083 	beq.w	800f35e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800f258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f25a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f25e:	f200 8081 	bhi.w	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f264:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f268:	d02f      	beq.n	800f2ca <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800f26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f270:	d878      	bhi.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800f272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f274:	2b00      	cmp	r3, #0
 800f276:	d004      	beq.n	800f282 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800f278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f27a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f27e:	d012      	beq.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800f280:	e070      	b.n	800f364 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f282:	4b8a      	ldr	r3, [pc, #552]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f28a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f28e:	d107      	bne.n	800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f294:	4618      	mov	r0, r3
 800f296:	f000 feaf 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f29e:	e3e4      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2a4:	e3e1      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f2a6:	4b81      	ldr	r3, [pc, #516]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f2ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f2b2:	d107      	bne.n	800f2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f2b4:	f107 0318 	add.w	r3, r7, #24
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 fbf5 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f2be:	69bb      	ldr	r3, [r7, #24]
 800f2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2c2:	e3d2      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2c8:	e3cf      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f2ca:	4b78      	ldr	r3, [pc, #480]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f2d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2d6:	d107      	bne.n	800f2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f2d8:	f107 030c 	add.w	r3, r7, #12
 800f2dc:	4618      	mov	r0, r3
 800f2de:	f000 fd37 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f2e6:	e3c0      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f2ec:	e3bd      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f2ee:	4b6f      	ldr	r3, [pc, #444]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f2f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f2f8:	4b6c      	ldr	r3, [pc, #432]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f003 0304 	and.w	r3, r3, #4
 800f300:	2b04      	cmp	r3, #4
 800f302:	d10c      	bne.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800f304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f306:	2b00      	cmp	r3, #0
 800f308:	d109      	bne.n	800f31e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f30a:	4b68      	ldr	r3, [pc, #416]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	08db      	lsrs	r3, r3, #3
 800f310:	f003 0303 	and.w	r3, r3, #3
 800f314:	4a66      	ldr	r2, [pc, #408]	; (800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f316:	fa22 f303 	lsr.w	r3, r2, r3
 800f31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f31c:	e01e      	b.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f31e:	4b63      	ldr	r3, [pc, #396]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f32a:	d106      	bne.n	800f33a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800f32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f32e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f332:	d102      	bne.n	800f33a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f334:	4b5f      	ldr	r3, [pc, #380]	; (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f336:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f338:	e010      	b.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f33a:	4b5c      	ldr	r3, [pc, #368]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f346:	d106      	bne.n	800f356 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800f348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f34a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f34e:	d102      	bne.n	800f356 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f350:	4b59      	ldr	r3, [pc, #356]	; (800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f354:	e002      	b.n	800f35c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f356:	2300      	movs	r3, #0
 800f358:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f35a:	e386      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f35c:	e385      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f35e:	4b57      	ldr	r3, [pc, #348]	; (800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f360:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f362:	e382      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f364:	2300      	movs	r3, #0
 800f366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f368:	e37f      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f36a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f36e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800f372:	430b      	orrs	r3, r1
 800f374:	f040 80a7 	bne.w	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800f378:	4b4c      	ldr	r3, [pc, #304]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f37a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f37c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f380:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f388:	d055      	beq.n	800f436 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800f38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f38c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f390:	f200 8096 	bhi.w	800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f396:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f39a:	f000 8084 	beq.w	800f4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f3a4:	f200 808c 	bhi.w	800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3ae:	d030      	beq.n	800f412 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3b6:	f200 8083 	bhi.w	800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800f3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f3c6:	d012      	beq.n	800f3ee <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800f3c8:	e07a      	b.n	800f4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f3ca:	4b38      	ldr	r3, [pc, #224]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f3d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f3d6:	d107      	bne.n	800f3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f3d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f000 fe0b 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f3e6:	e340      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f3ec:	e33d      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3ee:	4b2f      	ldr	r3, [pc, #188]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3fa:	d107      	bne.n	800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3fc:	f107 0318 	add.w	r3, r7, #24
 800f400:	4618      	mov	r0, r3
 800f402:	f000 fb51 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f406:	69bb      	ldr	r3, [r7, #24]
 800f408:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f40a:	e32e      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f410:	e32b      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f412:	4b26      	ldr	r3, [pc, #152]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f41e:	d107      	bne.n	800f430 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f420:	f107 030c 	add.w	r3, r7, #12
 800f424:	4618      	mov	r0, r3
 800f426:	f000 fc93 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f42e:	e31c      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f434:	e319      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f436:	4b1d      	ldr	r3, [pc, #116]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f43a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f43e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f440:	4b1a      	ldr	r3, [pc, #104]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	f003 0304 	and.w	r3, r3, #4
 800f448:	2b04      	cmp	r3, #4
 800f44a:	d10c      	bne.n	800f466 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800f44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d109      	bne.n	800f466 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f452:	4b16      	ldr	r3, [pc, #88]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	08db      	lsrs	r3, r3, #3
 800f458:	f003 0303 	and.w	r3, r3, #3
 800f45c:	4a14      	ldr	r2, [pc, #80]	; (800f4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800f45e:	fa22 f303 	lsr.w	r3, r2, r3
 800f462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f464:	e01e      	b.n	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f466:	4b11      	ldr	r3, [pc, #68]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f472:	d106      	bne.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800f474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f476:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f47a:	d102      	bne.n	800f482 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f47c:	4b0d      	ldr	r3, [pc, #52]	; (800f4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800f47e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f480:	e010      	b.n	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f482:	4b0a      	ldr	r3, [pc, #40]	; (800f4ac <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f48a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f48e:	d106      	bne.n	800f49e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800f490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f496:	d102      	bne.n	800f49e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f498:	4b07      	ldr	r3, [pc, #28]	; (800f4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800f49a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f49c:	e002      	b.n	800f4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f4a2:	e2e2      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f4a4:	e2e1      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f4a6:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800f4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4aa:	e2de      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f4ac:	58024400 	.word	0x58024400
 800f4b0:	03d09000 	.word	0x03d09000
 800f4b4:	003d0900 	.word	0x003d0900
 800f4b8:	017d7840 	.word	0x017d7840
 800f4bc:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4c4:	e2d1      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f4c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4ca:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800f4ce:	430b      	orrs	r3, r1
 800f4d0:	f040 809c 	bne.w	800f60c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800f4d4:	4b93      	ldr	r3, [pc, #588]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f4d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f4d8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f4dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4e4:	d054      	beq.n	800f590 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f4ec:	f200 808b 	bhi.w	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f4f6:	f000 8083 	beq.w	800f600 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f500:	f200 8081 	bhi.w	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f50a:	d02f      	beq.n	800f56c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800f50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f512:	d878      	bhi.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800f514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f516:	2b00      	cmp	r3, #0
 800f518:	d004      	beq.n	800f524 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800f51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f520:	d012      	beq.n	800f548 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800f522:	e070      	b.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f524:	4b7f      	ldr	r3, [pc, #508]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f52c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f530:	d107      	bne.n	800f542 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f536:	4618      	mov	r0, r3
 800f538:	f000 fd5e 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f540:	e293      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f542:	2300      	movs	r3, #0
 800f544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f546:	e290      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f548:	4b76      	ldr	r3, [pc, #472]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f550:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f554:	d107      	bne.n	800f566 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f556:	f107 0318 	add.w	r3, r7, #24
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 faa4 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f564:	e281      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f56a:	e27e      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f56c:	4b6d      	ldr	r3, [pc, #436]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f578:	d107      	bne.n	800f58a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f57a:	f107 030c 	add.w	r3, r7, #12
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 fbe6 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f588:	e26f      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f58a:	2300      	movs	r3, #0
 800f58c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f58e:	e26c      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f590:	4b64      	ldr	r3, [pc, #400]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f594:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f598:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f59a:	4b62      	ldr	r3, [pc, #392]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	f003 0304 	and.w	r3, r3, #4
 800f5a2:	2b04      	cmp	r3, #4
 800f5a4:	d10c      	bne.n	800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800f5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d109      	bne.n	800f5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f5ac:	4b5d      	ldr	r3, [pc, #372]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	08db      	lsrs	r3, r3, #3
 800f5b2:	f003 0303 	and.w	r3, r3, #3
 800f5b6:	4a5c      	ldr	r2, [pc, #368]	; (800f728 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f5b8:	fa22 f303 	lsr.w	r3, r2, r3
 800f5bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5be:	e01e      	b.n	800f5fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f5c0:	4b58      	ldr	r3, [pc, #352]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5cc:	d106      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800f5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5d4:	d102      	bne.n	800f5dc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f5d6:	4b55      	ldr	r3, [pc, #340]	; (800f72c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5da:	e010      	b.n	800f5fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f5dc:	4b51      	ldr	r3, [pc, #324]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f5e8:	d106      	bne.n	800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800f5ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5f0:	d102      	bne.n	800f5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f5f2:	4b4f      	ldr	r3, [pc, #316]	; (800f730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5f6:	e002      	b.n	800f5fe <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f5fc:	e235      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f5fe:	e234      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800f600:	4b4c      	ldr	r3, [pc, #304]	; (800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800f602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f604:	e231      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f60a:	e22e      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800f60c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f610:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800f614:	430b      	orrs	r3, r1
 800f616:	f040 808f 	bne.w	800f738 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800f61a:	4b42      	ldr	r3, [pc, #264]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f61c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f61e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800f622:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800f624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f62a:	d06b      	beq.n	800f704 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800f62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f632:	d874      	bhi.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f636:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f63a:	d056      	beq.n	800f6ea <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800f63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f642:	d86c      	bhi.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f64a:	d03b      	beq.n	800f6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800f64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f652:	d864      	bhi.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f65a:	d021      	beq.n	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800f65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f662:	d85c      	bhi.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	2b00      	cmp	r3, #0
 800f668:	d004      	beq.n	800f674 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f670:	d004      	beq.n	800f67c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800f672:	e054      	b.n	800f71e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800f674:	f7fe fa4c 	bl	800db10 <HAL_RCC_GetPCLK1Freq>
 800f678:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f67a:	e1f6      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f67c:	4b29      	ldr	r3, [pc, #164]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f688:	d107      	bne.n	800f69a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f68a:	f107 0318 	add.w	r3, r7, #24
 800f68e:	4618      	mov	r0, r3
 800f690:	f000 fa0a 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f694:	69fb      	ldr	r3, [r7, #28]
 800f696:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f698:	e1e7      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f69e:	e1e4      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f6a0:	4b20      	ldr	r3, [pc, #128]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f6a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6ac:	d107      	bne.n	800f6be <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f6ae:	f107 030c 	add.w	r3, r7, #12
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	f000 fb4c 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6bc:	e1d5      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6c2:	e1d2      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f6c4:	4b17      	ldr	r3, [pc, #92]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	f003 0304 	and.w	r3, r3, #4
 800f6cc:	2b04      	cmp	r3, #4
 800f6ce:	d109      	bne.n	800f6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f6d0:	4b14      	ldr	r3, [pc, #80]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	08db      	lsrs	r3, r3, #3
 800f6d6:	f003 0303 	and.w	r3, r3, #3
 800f6da:	4a13      	ldr	r2, [pc, #76]	; (800f728 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800f6dc:	fa22 f303 	lsr.w	r3, r2, r3
 800f6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6e2:	e1c2      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f6e8:	e1bf      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f6ea:	4b0e      	ldr	r3, [pc, #56]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6f6:	d102      	bne.n	800f6fe <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800f6f8:	4b0c      	ldr	r3, [pc, #48]	; (800f72c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f6fc:	e1b5      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f702:	e1b2      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f704:	4b07      	ldr	r3, [pc, #28]	; (800f724 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f710:	d102      	bne.n	800f718 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800f712:	4b07      	ldr	r3, [pc, #28]	; (800f730 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800f714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f716:	e1a8      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f718:	2300      	movs	r3, #0
 800f71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f71c:	e1a5      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800f71e:	2300      	movs	r3, #0
 800f720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f722:	e1a2      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f724:	58024400 	.word	0x58024400
 800f728:	03d09000 	.word	0x03d09000
 800f72c:	003d0900 	.word	0x003d0900
 800f730:	017d7840 	.word	0x017d7840
 800f734:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f73c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800f740:	430b      	orrs	r3, r1
 800f742:	d173      	bne.n	800f82c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800f744:	4b9c      	ldr	r3, [pc, #624]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f748:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f74c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f74e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f750:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f754:	d02f      	beq.n	800f7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800f756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f758:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f75c:	d863      	bhi.n	800f826 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800f75e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f760:	2b00      	cmp	r3, #0
 800f762:	d004      	beq.n	800f76e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800f764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f76a:	d012      	beq.n	800f792 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800f76c:	e05b      	b.n	800f826 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f76e:	4b92      	ldr	r3, [pc, #584]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f77a:	d107      	bne.n	800f78c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f77c:	f107 0318 	add.w	r3, r7, #24
 800f780:	4618      	mov	r0, r3
 800f782:	f000 f991 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f78a:	e16e      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f790:	e16b      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f792:	4b89      	ldr	r3, [pc, #548]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f79a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f79e:	d107      	bne.n	800f7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f7a0:	f107 030c 	add.w	r3, r7, #12
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f000 fad3 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f7ae:	e15c      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f7b4:	e159      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800f7b6:	4b80      	ldr	r3, [pc, #512]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f7ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f7be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f7c0:	4b7d      	ldr	r3, [pc, #500]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	f003 0304 	and.w	r3, r3, #4
 800f7c8:	2b04      	cmp	r3, #4
 800f7ca:	d10c      	bne.n	800f7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800f7cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d109      	bne.n	800f7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f7d2:	4b79      	ldr	r3, [pc, #484]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	08db      	lsrs	r3, r3, #3
 800f7d8:	f003 0303 	and.w	r3, r3, #3
 800f7dc:	4a77      	ldr	r2, [pc, #476]	; (800f9bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f7de:	fa22 f303 	lsr.w	r3, r2, r3
 800f7e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f7e4:	e01e      	b.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f7e6:	4b74      	ldr	r3, [pc, #464]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7f2:	d106      	bne.n	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800f7f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f7fa:	d102      	bne.n	800f802 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800f7fc:	4b70      	ldr	r3, [pc, #448]	; (800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f800:	e010      	b.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f802:	4b6d      	ldr	r3, [pc, #436]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f80a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f80e:	d106      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800f810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f816:	d102      	bne.n	800f81e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800f818:	4b6a      	ldr	r3, [pc, #424]	; (800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f81a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f81c:	e002      	b.n	800f824 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800f822:	e122      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f824:	e121      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f826:	2300      	movs	r3, #0
 800f828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f82a:	e11e      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f82c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f830:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800f834:	430b      	orrs	r3, r1
 800f836:	d133      	bne.n	800f8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800f838:	4b5f      	ldr	r3, [pc, #380]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f83c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f840:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f844:	2b00      	cmp	r3, #0
 800f846:	d004      	beq.n	800f852 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800f848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f84e:	d012      	beq.n	800f876 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800f850:	e023      	b.n	800f89a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f852:	4b59      	ldr	r3, [pc, #356]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f85a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f85e:	d107      	bne.n	800f870 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f860:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f864:	4618      	mov	r0, r3
 800f866:	f000 fbc7 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f86e:	e0fc      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f870:	2300      	movs	r3, #0
 800f872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f874:	e0f9      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f876:	4b50      	ldr	r3, [pc, #320]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f87e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f882:	d107      	bne.n	800f894 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f884:	f107 0318 	add.w	r3, r7, #24
 800f888:	4618      	mov	r0, r3
 800f88a:	f000 f90d 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f88e:	6a3b      	ldr	r3, [r7, #32]
 800f890:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f892:	e0ea      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f898:	e0e7      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800f89a:	2300      	movs	r3, #0
 800f89c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f89e:	e0e4      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8a4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800f8a8:	430b      	orrs	r3, r1
 800f8aa:	f040 808d 	bne.w	800f9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800f8ae:	4b42      	ldr	r3, [pc, #264]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f8b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f8b6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8be:	d06b      	beq.n	800f998 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f8c6:	d874      	bhi.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8ce:	d056      	beq.n	800f97e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8d6:	d86c      	bhi.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f8de:	d03b      	beq.n	800f958 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f8e6:	d864      	bhi.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8ee:	d021      	beq.n	800f934 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f8f6:	d85c      	bhi.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800f8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d004      	beq.n	800f908 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800f8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f904:	d004      	beq.n	800f910 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800f906:	e054      	b.n	800f9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f908:	f000 f8b8 	bl	800fa7c <HAL_RCCEx_GetD3PCLK1Freq>
 800f90c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f90e:	e0ac      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f910:	4b29      	ldr	r3, [pc, #164]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f918:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f91c:	d107      	bne.n	800f92e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f91e:	f107 0318 	add.w	r3, r7, #24
 800f922:	4618      	mov	r0, r3
 800f924:	f000 f8c0 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f92c:	e09d      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f92e:	2300      	movs	r3, #0
 800f930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f932:	e09a      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f934:	4b20      	ldr	r3, [pc, #128]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f93c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f940:	d107      	bne.n	800f952 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f942:	f107 030c 	add.w	r3, r7, #12
 800f946:	4618      	mov	r0, r3
 800f948:	f000 fa02 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f950:	e08b      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f952:	2300      	movs	r3, #0
 800f954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f956:	e088      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f958:	4b17      	ldr	r3, [pc, #92]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f003 0304 	and.w	r3, r3, #4
 800f960:	2b04      	cmp	r3, #4
 800f962:	d109      	bne.n	800f978 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f964:	4b14      	ldr	r3, [pc, #80]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	08db      	lsrs	r3, r3, #3
 800f96a:	f003 0303 	and.w	r3, r3, #3
 800f96e:	4a13      	ldr	r2, [pc, #76]	; (800f9bc <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800f970:	fa22 f303 	lsr.w	r3, r2, r3
 800f974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f976:	e078      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f97c:	e075      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f97e:	4b0e      	ldr	r3, [pc, #56]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f98a:	d102      	bne.n	800f992 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800f98c:	4b0c      	ldr	r3, [pc, #48]	; (800f9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800f98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f990:	e06b      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f992:	2300      	movs	r3, #0
 800f994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f996:	e068      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f998:	4b07      	ldr	r3, [pc, #28]	; (800f9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f9a4:	d102      	bne.n	800f9ac <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800f9a6:	4b07      	ldr	r3, [pc, #28]	; (800f9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800f9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800f9aa:	e05e      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9b0:	e05b      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9b6:	e058      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800f9b8:	58024400 	.word	0x58024400
 800f9bc:	03d09000 	.word	0x03d09000
 800f9c0:	003d0900 	.word	0x003d0900
 800f9c4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f9cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800f9d0:	430b      	orrs	r3, r1
 800f9d2:	d148      	bne.n	800fa66 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800f9d4:	4b27      	ldr	r3, [pc, #156]	; (800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800f9d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f9d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f9dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9e4:	d02a      	beq.n	800fa3c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800f9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9ec:	d838      	bhi.n	800fa60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800f9ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d004      	beq.n	800f9fe <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800f9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f9fa:	d00d      	beq.n	800fa18 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800f9fc:	e030      	b.n	800fa60 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f9fe:	4b1d      	ldr	r3, [pc, #116]	; (800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800fa0a:	d102      	bne.n	800fa12 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800fa0c:	4b1a      	ldr	r3, [pc, #104]	; (800fa78 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800fa0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa10:	e02b      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa16:	e028      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800fa18:	4b16      	ldr	r3, [pc, #88]	; (800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fa20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800fa24:	d107      	bne.n	800fa36 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800fa26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f000 fae4 	bl	800fff8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800fa30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa34:	e019      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa36:	2300      	movs	r3, #0
 800fa38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa3a:	e016      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800fa3c:	4b0d      	ldr	r3, [pc, #52]	; (800fa74 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fa48:	d107      	bne.n	800fa5a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fa4a:	f107 0318 	add.w	r3, r7, #24
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f000 f82a 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800fa54:	69fb      	ldr	r3, [r7, #28]
 800fa56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800fa58:	e007      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa5e:	e004      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa64:	e001      	b.n	800fa6a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800fa6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3740      	adds	r7, #64	; 0x40
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	58024400 	.word	0x58024400
 800fa78:	017d7840 	.word	0x017d7840

0800fa7c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800fa80:	f7fe f816 	bl	800dab0 <HAL_RCC_GetHCLKFreq>
 800fa84:	4602      	mov	r2, r0
 800fa86:	4b06      	ldr	r3, [pc, #24]	; (800faa0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800fa88:	6a1b      	ldr	r3, [r3, #32]
 800fa8a:	091b      	lsrs	r3, r3, #4
 800fa8c:	f003 0307 	and.w	r3, r3, #7
 800fa90:	4904      	ldr	r1, [pc, #16]	; (800faa4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800fa92:	5ccb      	ldrb	r3, [r1, r3]
 800fa94:	f003 031f 	and.w	r3, r3, #31
 800fa98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	bd80      	pop	{r7, pc}
 800faa0:	58024400 	.word	0x58024400
 800faa4:	080176c8 	.word	0x080176c8

0800faa8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b089      	sub	sp, #36	; 0x24
 800faac:	af00      	add	r7, sp, #0
 800faae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fab0:	4ba1      	ldr	r3, [pc, #644]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fab4:	f003 0303 	and.w	r3, r3, #3
 800fab8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800faba:	4b9f      	ldr	r3, [pc, #636]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fabc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fabe:	0b1b      	lsrs	r3, r3, #12
 800fac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fac4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800fac6:	4b9c      	ldr	r3, [pc, #624]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faca:	091b      	lsrs	r3, r3, #4
 800facc:	f003 0301 	and.w	r3, r3, #1
 800fad0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800fad2:	4b99      	ldr	r3, [pc, #612]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fad6:	08db      	lsrs	r3, r3, #3
 800fad8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fadc:	693a      	ldr	r2, [r7, #16]
 800fade:	fb02 f303 	mul.w	r3, r2, r3
 800fae2:	ee07 3a90 	vmov	s15, r3
 800fae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800faea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	f000 8111 	beq.w	800fd18 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	2b02      	cmp	r3, #2
 800fafa:	f000 8083 	beq.w	800fc04 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800fafe:	69bb      	ldr	r3, [r7, #24]
 800fb00:	2b02      	cmp	r3, #2
 800fb02:	f200 80a1 	bhi.w	800fc48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800fb06:	69bb      	ldr	r3, [r7, #24]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d003      	beq.n	800fb14 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800fb0c:	69bb      	ldr	r3, [r7, #24]
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d056      	beq.n	800fbc0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800fb12:	e099      	b.n	800fc48 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb14:	4b88      	ldr	r3, [pc, #544]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f003 0320 	and.w	r3, r3, #32
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d02d      	beq.n	800fb7c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fb20:	4b85      	ldr	r3, [pc, #532]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	08db      	lsrs	r3, r3, #3
 800fb26:	f003 0303 	and.w	r3, r3, #3
 800fb2a:	4a84      	ldr	r2, [pc, #528]	; (800fd3c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800fb2c:	fa22 f303 	lsr.w	r3, r2, r3
 800fb30:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	ee07 3a90 	vmov	s15, r3
 800fb38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	ee07 3a90 	vmov	s15, r3
 800fb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb4a:	4b7b      	ldr	r3, [pc, #492]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb52:	ee07 3a90 	vmov	s15, r3
 800fb56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb5e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fb62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fb7a:	e087      	b.n	800fc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fb7c:	697b      	ldr	r3, [r7, #20]
 800fb7e:	ee07 3a90 	vmov	s15, r3
 800fb82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb86:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fd44 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800fb8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb8e:	4b6a      	ldr	r3, [pc, #424]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fb90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb96:	ee07 3a90 	vmov	s15, r3
 800fb9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fba2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fbbe:	e065      	b.n	800fc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fbc0:	697b      	ldr	r3, [r7, #20]
 800fbc2:	ee07 3a90 	vmov	s15, r3
 800fbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fd48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fbce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbd2:	4b59      	ldr	r3, [pc, #356]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbda:	ee07 3a90 	vmov	s15, r3
 800fbde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbe2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbe6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fbea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc02:	e043      	b.n	800fc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	ee07 3a90 	vmov	s15, r3
 800fc0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc0e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fd4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800fc12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc16:	4b48      	ldr	r3, [pc, #288]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc1e:	ee07 3a90 	vmov	s15, r3
 800fc22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc26:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc2a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc46:	e021      	b.n	800fc8c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800fc48:	697b      	ldr	r3, [r7, #20]
 800fc4a:	ee07 3a90 	vmov	s15, r3
 800fc4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc52:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fd48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800fc56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc5a:	4b37      	ldr	r3, [pc, #220]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc62:	ee07 3a90 	vmov	s15, r3
 800fc66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc6e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fd40 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800fc72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fc8a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800fc8c:	4b2a      	ldr	r3, [pc, #168]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fc8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc90:	0a5b      	lsrs	r3, r3, #9
 800fc92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc96:	ee07 3a90 	vmov	s15, r3
 800fc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fca2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fca6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcb2:	ee17 2a90 	vmov	r2, s15
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800fcba:	4b1f      	ldr	r3, [pc, #124]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcbe:	0c1b      	lsrs	r3, r3, #16
 800fcc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcc4:	ee07 3a90 	vmov	s15, r3
 800fcc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fccc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fce0:	ee17 2a90 	vmov	r2, s15
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800fce8:	4b13      	ldr	r3, [pc, #76]	; (800fd38 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800fcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcec:	0e1b      	lsrs	r3, r3, #24
 800fcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcf2:	ee07 3a90 	vmov	s15, r3
 800fcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd02:	edd7 6a07 	vldr	s13, [r7, #28]
 800fd06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fd0e:	ee17 2a90 	vmov	r2, s15
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800fd16:	e008      	b.n	800fd2a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2200      	movs	r2, #0
 800fd22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	609a      	str	r2, [r3, #8]
}
 800fd2a:	bf00      	nop
 800fd2c:	3724      	adds	r7, #36	; 0x24
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	58024400 	.word	0x58024400
 800fd3c:	03d09000 	.word	0x03d09000
 800fd40:	46000000 	.word	0x46000000
 800fd44:	4c742400 	.word	0x4c742400
 800fd48:	4a742400 	.word	0x4a742400
 800fd4c:	4bbebc20 	.word	0x4bbebc20

0800fd50 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b089      	sub	sp, #36	; 0x24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fd58:	4ba1      	ldr	r3, [pc, #644]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5c:	f003 0303 	and.w	r3, r3, #3
 800fd60:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800fd62:	4b9f      	ldr	r3, [pc, #636]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd66:	0d1b      	lsrs	r3, r3, #20
 800fd68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fd6c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fd6e:	4b9c      	ldr	r3, [pc, #624]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd72:	0a1b      	lsrs	r3, r3, #8
 800fd74:	f003 0301 	and.w	r3, r3, #1
 800fd78:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800fd7a:	4b99      	ldr	r3, [pc, #612]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fd7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd7e:	08db      	lsrs	r3, r3, #3
 800fd80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fd84:	693a      	ldr	r2, [r7, #16]
 800fd86:	fb02 f303 	mul.w	r3, r2, r3
 800fd8a:	ee07 3a90 	vmov	s15, r3
 800fd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f000 8111 	beq.w	800ffc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	2b02      	cmp	r3, #2
 800fda2:	f000 8083 	beq.w	800feac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fda6:	69bb      	ldr	r3, [r7, #24]
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	f200 80a1 	bhi.w	800fef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d003      	beq.n	800fdbc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fdb4:	69bb      	ldr	r3, [r7, #24]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d056      	beq.n	800fe68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fdba:	e099      	b.n	800fef0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fdbc:	4b88      	ldr	r3, [pc, #544]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	f003 0320 	and.w	r3, r3, #32
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d02d      	beq.n	800fe24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fdc8:	4b85      	ldr	r3, [pc, #532]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	08db      	lsrs	r3, r3, #3
 800fdce:	f003 0303 	and.w	r3, r3, #3
 800fdd2:	4a84      	ldr	r2, [pc, #528]	; (800ffe4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800fdd4:	fa22 f303 	lsr.w	r3, r2, r3
 800fdd8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fdda:	68bb      	ldr	r3, [r7, #8]
 800fddc:	ee07 3a90 	vmov	s15, r3
 800fde0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	ee07 3a90 	vmov	s15, r3
 800fdea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdf2:	4b7b      	ldr	r3, [pc, #492]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdfa:	ee07 3a90 	vmov	s15, r3
 800fdfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe02:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe06:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ffe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800fe22:	e087      	b.n	800ff34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	ee07 3a90 	vmov	s15, r3
 800fe2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe2e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ffec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fe32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe36:	4b6a      	ldr	r3, [pc, #424]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe3e:	ee07 3a90 	vmov	s15, r3
 800fe42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe46:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe4a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ffe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800fe66:	e065      	b.n	800ff34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	ee07 3a90 	vmov	s15, r3
 800fe6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe72:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fe76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe7a:	4b59      	ldr	r3, [pc, #356]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fe7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe82:	ee07 3a90 	vmov	s15, r3
 800fe86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe8e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ffe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fe92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feaa:	e043      	b.n	800ff34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	ee07 3a90 	vmov	s15, r3
 800feb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feb6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800feba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800febe:	4b48      	ldr	r3, [pc, #288]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec6:	ee07 3a90 	vmov	s15, r3
 800feca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fece:	ed97 6a03 	vldr	s12, [r7, #12]
 800fed2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ffe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800feda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800feee:	e021      	b.n	800ff34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800fef0:	697b      	ldr	r3, [r7, #20]
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fefa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fefe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff02:	4b37      	ldr	r3, [pc, #220]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff0a:	ee07 3a90 	vmov	s15, r3
 800ff0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ff16:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ffe8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ff1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ff32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ff34:	4b2a      	ldr	r3, [pc, #168]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff38:	0a5b      	lsrs	r3, r3, #9
 800ff3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff3e:	ee07 3a90 	vmov	s15, r3
 800ff42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff4e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff5a:	ee17 2a90 	vmov	r2, s15
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ff62:	4b1f      	ldr	r3, [pc, #124]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff66:	0c1b      	lsrs	r3, r3, #16
 800ff68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff6c:	ee07 3a90 	vmov	s15, r3
 800ff70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff88:	ee17 2a90 	vmov	r2, s15
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ff90:	4b13      	ldr	r3, [pc, #76]	; (800ffe0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ff92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff94:	0e1b      	lsrs	r3, r3, #24
 800ff96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff9a:	ee07 3a90 	vmov	s15, r3
 800ff9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ffa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ffaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffb6:	ee17 2a90 	vmov	r2, s15
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ffbe:	e008      	b.n	800ffd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2200      	movs	r2, #0
 800ffd0:	609a      	str	r2, [r3, #8]
}
 800ffd2:	bf00      	nop
 800ffd4:	3724      	adds	r7, #36	; 0x24
 800ffd6:	46bd      	mov	sp, r7
 800ffd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffdc:	4770      	bx	lr
 800ffde:	bf00      	nop
 800ffe0:	58024400 	.word	0x58024400
 800ffe4:	03d09000 	.word	0x03d09000
 800ffe8:	46000000 	.word	0x46000000
 800ffec:	4c742400 	.word	0x4c742400
 800fff0:	4a742400 	.word	0x4a742400
 800fff4:	4bbebc20 	.word	0x4bbebc20

0800fff8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800fff8:	b480      	push	{r7}
 800fffa:	b089      	sub	sp, #36	; 0x24
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010000:	4ba0      	ldr	r3, [pc, #640]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010004:	f003 0303 	and.w	r3, r3, #3
 8010008:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801000a:	4b9e      	ldr	r3, [pc, #632]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801000c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801000e:	091b      	lsrs	r3, r3, #4
 8010010:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010014:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8010016:	4b9b      	ldr	r3, [pc, #620]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801001a:	f003 0301 	and.w	r3, r3, #1
 801001e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010020:	4b98      	ldr	r3, [pc, #608]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010024:	08db      	lsrs	r3, r3, #3
 8010026:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801002a:	693a      	ldr	r2, [r7, #16]
 801002c:	fb02 f303 	mul.w	r3, r2, r3
 8010030:	ee07 3a90 	vmov	s15, r3
 8010034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010038:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	2b00      	cmp	r3, #0
 8010040:	f000 8111 	beq.w	8010266 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	2b02      	cmp	r3, #2
 8010048:	f000 8083 	beq.w	8010152 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	2b02      	cmp	r3, #2
 8010050:	f200 80a1 	bhi.w	8010196 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8010054:	69bb      	ldr	r3, [r7, #24]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d003      	beq.n	8010062 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	2b01      	cmp	r3, #1
 801005e:	d056      	beq.n	801010e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8010060:	e099      	b.n	8010196 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010062:	4b88      	ldr	r3, [pc, #544]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	f003 0320 	and.w	r3, r3, #32
 801006a:	2b00      	cmp	r3, #0
 801006c:	d02d      	beq.n	80100ca <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801006e:	4b85      	ldr	r3, [pc, #532]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	08db      	lsrs	r3, r3, #3
 8010074:	f003 0303 	and.w	r3, r3, #3
 8010078:	4a83      	ldr	r2, [pc, #524]	; (8010288 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801007a:	fa22 f303 	lsr.w	r3, r2, r3
 801007e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	ee07 3a90 	vmov	s15, r3
 8010086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	ee07 3a90 	vmov	s15, r3
 8010090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010094:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010098:	4b7a      	ldr	r3, [pc, #488]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801009a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801009c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100a0:	ee07 3a90 	vmov	s15, r3
 80100a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80100ac:	eddf 5a77 	vldr	s11, [pc, #476]	; 801028c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80100bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100c4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80100c8:	e087      	b.n	80101da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	ee07 3a90 	vmov	s15, r3
 80100d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80100d4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8010290 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80100d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100dc:	4b69      	ldr	r3, [pc, #420]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80100de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80100e4:	ee07 3a90 	vmov	s15, r3
 80100e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80100ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80100f0:	eddf 5a66 	vldr	s11, [pc, #408]	; 801028c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80100f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80100f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010100:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010108:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801010c:	e065      	b.n	80101da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	ee07 3a90 	vmov	s15, r3
 8010114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010118:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8010294 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801011c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010120:	4b58      	ldr	r3, [pc, #352]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010128:	ee07 3a90 	vmov	s15, r3
 801012c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010130:	ed97 6a03 	vldr	s12, [r7, #12]
 8010134:	eddf 5a55 	vldr	s11, [pc, #340]	; 801028c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8010138:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801013c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010140:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010144:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010148:	ee67 7a27 	vmul.f32	s15, s14, s15
 801014c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010150:	e043      	b.n	80101da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	ee07 3a90 	vmov	s15, r3
 8010158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801015c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8010298 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8010160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010164:	4b47      	ldr	r3, [pc, #284]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801016c:	ee07 3a90 	vmov	s15, r3
 8010170:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010174:	ed97 6a03 	vldr	s12, [r7, #12]
 8010178:	eddf 5a44 	vldr	s11, [pc, #272]	; 801028c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801017c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010180:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010188:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801018c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010190:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8010194:	e021      	b.n	80101da <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010196:	697b      	ldr	r3, [r7, #20]
 8010198:	ee07 3a90 	vmov	s15, r3
 801019c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101a0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8010290 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80101a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101a8:	4b36      	ldr	r3, [pc, #216]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101b0:	ee07 3a90 	vmov	s15, r3
 80101b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80101b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80101bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 801028c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80101c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80101c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80101cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80101d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80101d8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80101da:	4b2a      	ldr	r3, [pc, #168]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80101dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101de:	0a5b      	lsrs	r3, r3, #9
 80101e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101e4:	ee07 3a90 	vmov	s15, r3
 80101e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80101f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010200:	ee17 2a90 	vmov	r2, s15
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8010208:	4b1e      	ldr	r3, [pc, #120]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801020c:	0c1b      	lsrs	r3, r3, #16
 801020e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010212:	ee07 3a90 	vmov	s15, r3
 8010216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801021a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801021e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010222:	edd7 6a07 	vldr	s13, [r7, #28]
 8010226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801022a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801022e:	ee17 2a90 	vmov	r2, s15
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8010236:	4b13      	ldr	r3, [pc, #76]	; (8010284 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8010238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801023a:	0e1b      	lsrs	r3, r3, #24
 801023c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010240:	ee07 3a90 	vmov	s15, r3
 8010244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801024c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010250:	edd7 6a07 	vldr	s13, [r7, #28]
 8010254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801025c:	ee17 2a90 	vmov	r2, s15
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8010264:	e008      	b.n	8010278 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	2200      	movs	r2, #0
 801026a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2200      	movs	r2, #0
 8010276:	609a      	str	r2, [r3, #8]
}
 8010278:	bf00      	nop
 801027a:	3724      	adds	r7, #36	; 0x24
 801027c:	46bd      	mov	sp, r7
 801027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010282:	4770      	bx	lr
 8010284:	58024400 	.word	0x58024400
 8010288:	03d09000 	.word	0x03d09000
 801028c:	46000000 	.word	0x46000000
 8010290:	4c742400 	.word	0x4c742400
 8010294:	4a742400 	.word	0x4a742400
 8010298:	4bbebc20 	.word	0x4bbebc20

0801029c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80102a6:	2300      	movs	r3, #0
 80102a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80102aa:	4b53      	ldr	r3, [pc, #332]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80102ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ae:	f003 0303 	and.w	r3, r3, #3
 80102b2:	2b03      	cmp	r3, #3
 80102b4:	d101      	bne.n	80102ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80102b6:	2301      	movs	r3, #1
 80102b8:	e099      	b.n	80103ee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80102ba:	4b4f      	ldr	r3, [pc, #316]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a4e      	ldr	r2, [pc, #312]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80102c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80102c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80102c6:	f7f7 f86f 	bl	80073a8 <HAL_GetTick>
 80102ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80102cc:	e008      	b.n	80102e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80102ce:	f7f7 f86b 	bl	80073a8 <HAL_GetTick>
 80102d2:	4602      	mov	r2, r0
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	2b02      	cmp	r3, #2
 80102da:	d901      	bls.n	80102e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80102dc:	2303      	movs	r3, #3
 80102de:	e086      	b.n	80103ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80102e0:	4b45      	ldr	r3, [pc, #276]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d1f0      	bne.n	80102ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80102ec:	4b42      	ldr	r3, [pc, #264]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80102ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	031b      	lsls	r3, r3, #12
 80102fa:	493f      	ldr	r1, [pc, #252]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80102fc:	4313      	orrs	r3, r2
 80102fe:	628b      	str	r3, [r1, #40]	; 0x28
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	3b01      	subs	r3, #1
 8010306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	3b01      	subs	r3, #1
 8010310:	025b      	lsls	r3, r3, #9
 8010312:	b29b      	uxth	r3, r3
 8010314:	431a      	orrs	r2, r3
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	68db      	ldr	r3, [r3, #12]
 801031a:	3b01      	subs	r3, #1
 801031c:	041b      	lsls	r3, r3, #16
 801031e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010322:	431a      	orrs	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	691b      	ldr	r3, [r3, #16]
 8010328:	3b01      	subs	r3, #1
 801032a:	061b      	lsls	r3, r3, #24
 801032c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010330:	4931      	ldr	r1, [pc, #196]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010332:	4313      	orrs	r3, r2
 8010334:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8010336:	4b30      	ldr	r3, [pc, #192]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	695b      	ldr	r3, [r3, #20]
 8010342:	492d      	ldr	r1, [pc, #180]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010344:	4313      	orrs	r3, r2
 8010346:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8010348:	4b2b      	ldr	r3, [pc, #172]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 801034a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801034c:	f023 0220 	bic.w	r2, r3, #32
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	699b      	ldr	r3, [r3, #24]
 8010354:	4928      	ldr	r1, [pc, #160]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010356:	4313      	orrs	r3, r2
 8010358:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801035a:	4b27      	ldr	r3, [pc, #156]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 801035c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801035e:	4a26      	ldr	r2, [pc, #152]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010360:	f023 0310 	bic.w	r3, r3, #16
 8010364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8010366:	4b24      	ldr	r3, [pc, #144]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801036a:	4b24      	ldr	r3, [pc, #144]	; (80103fc <RCCEx_PLL2_Config+0x160>)
 801036c:	4013      	ands	r3, r2
 801036e:	687a      	ldr	r2, [r7, #4]
 8010370:	69d2      	ldr	r2, [r2, #28]
 8010372:	00d2      	lsls	r2, r2, #3
 8010374:	4920      	ldr	r1, [pc, #128]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010376:	4313      	orrs	r3, r2
 8010378:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801037a:	4b1f      	ldr	r3, [pc, #124]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 801037c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801037e:	4a1e      	ldr	r2, [pc, #120]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010380:	f043 0310 	orr.w	r3, r3, #16
 8010384:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8010386:	683b      	ldr	r3, [r7, #0]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d106      	bne.n	801039a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801038c:	4b1a      	ldr	r3, [pc, #104]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 801038e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010390:	4a19      	ldr	r2, [pc, #100]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 8010392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010398:	e00f      	b.n	80103ba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	2b01      	cmp	r3, #1
 801039e:	d106      	bne.n	80103ae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80103a0:	4b15      	ldr	r3, [pc, #84]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a4:	4a14      	ldr	r2, [pc, #80]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80103aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80103ac:	e005      	b.n	80103ba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80103ae:	4b12      	ldr	r3, [pc, #72]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b2:	4a11      	ldr	r2, [pc, #68]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80103b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80103ba:	4b0f      	ldr	r3, [pc, #60]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a0e      	ldr	r2, [pc, #56]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80103c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80103c6:	f7f6 ffef 	bl	80073a8 <HAL_GetTick>
 80103ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103cc:	e008      	b.n	80103e0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80103ce:	f7f6 ffeb 	bl	80073a8 <HAL_GetTick>
 80103d2:	4602      	mov	r2, r0
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d901      	bls.n	80103e0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80103dc:	2303      	movs	r3, #3
 80103de:	e006      	b.n	80103ee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80103e0:	4b05      	ldr	r3, [pc, #20]	; (80103f8 <RCCEx_PLL2_Config+0x15c>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d0f0      	beq.n	80103ce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80103ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3710      	adds	r7, #16
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}
 80103f6:	bf00      	nop
 80103f8:	58024400 	.word	0x58024400
 80103fc:	ffff0007 	.word	0xffff0007

08010400 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801040a:	2300      	movs	r3, #0
 801040c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801040e:	4b53      	ldr	r3, [pc, #332]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010412:	f003 0303 	and.w	r3, r3, #3
 8010416:	2b03      	cmp	r3, #3
 8010418:	d101      	bne.n	801041e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801041a:	2301      	movs	r3, #1
 801041c:	e099      	b.n	8010552 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801041e:	4b4f      	ldr	r3, [pc, #316]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4a4e      	ldr	r2, [pc, #312]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010428:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801042a:	f7f6 ffbd 	bl	80073a8 <HAL_GetTick>
 801042e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010430:	e008      	b.n	8010444 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010432:	f7f6 ffb9 	bl	80073a8 <HAL_GetTick>
 8010436:	4602      	mov	r2, r0
 8010438:	68bb      	ldr	r3, [r7, #8]
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	2b02      	cmp	r3, #2
 801043e:	d901      	bls.n	8010444 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010440:	2303      	movs	r3, #3
 8010442:	e086      	b.n	8010552 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010444:	4b45      	ldr	r3, [pc, #276]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801044c:	2b00      	cmp	r3, #0
 801044e:	d1f0      	bne.n	8010432 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010450:	4b42      	ldr	r3, [pc, #264]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010454:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	051b      	lsls	r3, r3, #20
 801045e:	493f      	ldr	r1, [pc, #252]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010460:	4313      	orrs	r3, r2
 8010462:	628b      	str	r3, [r1, #40]	; 0x28
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	685b      	ldr	r3, [r3, #4]
 8010468:	3b01      	subs	r3, #1
 801046a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	689b      	ldr	r3, [r3, #8]
 8010472:	3b01      	subs	r3, #1
 8010474:	025b      	lsls	r3, r3, #9
 8010476:	b29b      	uxth	r3, r3
 8010478:	431a      	orrs	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	3b01      	subs	r3, #1
 8010480:	041b      	lsls	r3, r3, #16
 8010482:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010486:	431a      	orrs	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	691b      	ldr	r3, [r3, #16]
 801048c:	3b01      	subs	r3, #1
 801048e:	061b      	lsls	r3, r3, #24
 8010490:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010494:	4931      	ldr	r1, [pc, #196]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010496:	4313      	orrs	r3, r2
 8010498:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801049a:	4b30      	ldr	r3, [pc, #192]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 801049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	695b      	ldr	r3, [r3, #20]
 80104a6:	492d      	ldr	r1, [pc, #180]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104a8:	4313      	orrs	r3, r2
 80104aa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80104ac:	4b2b      	ldr	r3, [pc, #172]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	699b      	ldr	r3, [r3, #24]
 80104b8:	4928      	ldr	r1, [pc, #160]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104ba:	4313      	orrs	r3, r2
 80104bc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80104be:	4b27      	ldr	r3, [pc, #156]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104c2:	4a26      	ldr	r2, [pc, #152]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80104ca:	4b24      	ldr	r3, [pc, #144]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104ce:	4b24      	ldr	r3, [pc, #144]	; (8010560 <RCCEx_PLL3_Config+0x160>)
 80104d0:	4013      	ands	r3, r2
 80104d2:	687a      	ldr	r2, [r7, #4]
 80104d4:	69d2      	ldr	r2, [r2, #28]
 80104d6:	00d2      	lsls	r2, r2, #3
 80104d8:	4920      	ldr	r1, [pc, #128]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104da:	4313      	orrs	r3, r2
 80104dc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80104de:	4b1f      	ldr	r3, [pc, #124]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104e2:	4a1e      	ldr	r2, [pc, #120]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104e8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d106      	bne.n	80104fe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80104f0:	4b1a      	ldr	r3, [pc, #104]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f4:	4a19      	ldr	r2, [pc, #100]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 80104f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80104fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80104fc:	e00f      	b.n	801051e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d106      	bne.n	8010512 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8010504:	4b15      	ldr	r3, [pc, #84]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010508:	4a14      	ldr	r2, [pc, #80]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 801050a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801050e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010510:	e005      	b.n	801051e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8010512:	4b12      	ldr	r3, [pc, #72]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010516:	4a11      	ldr	r2, [pc, #68]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010518:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801051c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801051e:	4b0f      	ldr	r3, [pc, #60]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a0e      	ldr	r2, [pc, #56]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801052a:	f7f6 ff3d 	bl	80073a8 <HAL_GetTick>
 801052e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010530:	e008      	b.n	8010544 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8010532:	f7f6 ff39 	bl	80073a8 <HAL_GetTick>
 8010536:	4602      	mov	r2, r0
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	2b02      	cmp	r3, #2
 801053e:	d901      	bls.n	8010544 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010540:	2303      	movs	r3, #3
 8010542:	e006      	b.n	8010552 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010544:	4b05      	ldr	r3, [pc, #20]	; (801055c <RCCEx_PLL3_Config+0x15c>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801054c:	2b00      	cmp	r3, #0
 801054e:	d0f0      	beq.n	8010532 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010550:	7bfb      	ldrb	r3, [r7, #15]
}
 8010552:	4618      	mov	r0, r3
 8010554:	3710      	adds	r7, #16
 8010556:	46bd      	mov	sp, r7
 8010558:	bd80      	pop	{r7, pc}
 801055a:	bf00      	nop
 801055c:	58024400 	.word	0x58024400
 8010560:	ffff0007 	.word	0xffff0007

08010564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d101      	bne.n	8010576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010572:	2301      	movs	r3, #1
 8010574:	e049      	b.n	801060a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801057c:	b2db      	uxtb	r3, r3
 801057e:	2b00      	cmp	r3, #0
 8010580:	d106      	bne.n	8010590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2200      	movs	r2, #0
 8010586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7f6 faa8 	bl	8006ae0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2202      	movs	r2, #2
 8010594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681a      	ldr	r2, [r3, #0]
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	3304      	adds	r3, #4
 80105a0:	4619      	mov	r1, r3
 80105a2:	4610      	mov	r0, r2
 80105a4:	f001 f940 	bl	8011828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	2201      	movs	r2, #1
 80105ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2201      	movs	r2, #1
 80105b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2201      	movs	r2, #1
 80105bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	2201      	movs	r2, #1
 80105c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2201      	movs	r2, #1
 80105cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	2201      	movs	r2, #1
 80105dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2201      	movs	r2, #1
 80105ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2201      	movs	r2, #1
 80105f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	2201      	movs	r2, #1
 80105fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2201      	movs	r2, #1
 8010604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010608:	2300      	movs	r3, #0
}
 801060a:	4618      	mov	r0, r3
 801060c:	3708      	adds	r7, #8
 801060e:	46bd      	mov	sp, r7
 8010610:	bd80      	pop	{r7, pc}
	...

08010614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010614:	b480      	push	{r7}
 8010616:	b085      	sub	sp, #20
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010622:	b2db      	uxtb	r3, r3
 8010624:	2b01      	cmp	r3, #1
 8010626:	d001      	beq.n	801062c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010628:	2301      	movs	r3, #1
 801062a:	e054      	b.n	80106d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2202      	movs	r2, #2
 8010630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	68da      	ldr	r2, [r3, #12]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	f042 0201 	orr.w	r2, r2, #1
 8010642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	4a26      	ldr	r2, [pc, #152]	; (80106e4 <HAL_TIM_Base_Start_IT+0xd0>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d022      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010656:	d01d      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4a22      	ldr	r2, [pc, #136]	; (80106e8 <HAL_TIM_Base_Start_IT+0xd4>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d018      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	4a21      	ldr	r2, [pc, #132]	; (80106ec <HAL_TIM_Base_Start_IT+0xd8>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d013      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	4a1f      	ldr	r2, [pc, #124]	; (80106f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8010672:	4293      	cmp	r3, r2
 8010674:	d00e      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	4a1e      	ldr	r2, [pc, #120]	; (80106f4 <HAL_TIM_Base_Start_IT+0xe0>)
 801067c:	4293      	cmp	r3, r2
 801067e:	d009      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	4a1c      	ldr	r2, [pc, #112]	; (80106f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8010686:	4293      	cmp	r3, r2
 8010688:	d004      	beq.n	8010694 <HAL_TIM_Base_Start_IT+0x80>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a1b      	ldr	r2, [pc, #108]	; (80106fc <HAL_TIM_Base_Start_IT+0xe8>)
 8010690:	4293      	cmp	r3, r2
 8010692:	d115      	bne.n	80106c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	689a      	ldr	r2, [r3, #8]
 801069a:	4b19      	ldr	r3, [pc, #100]	; (8010700 <HAL_TIM_Base_Start_IT+0xec>)
 801069c:	4013      	ands	r3, r2
 801069e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	2b06      	cmp	r3, #6
 80106a4:	d015      	beq.n	80106d2 <HAL_TIM_Base_Start_IT+0xbe>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106ac:	d011      	beq.n	80106d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	681a      	ldr	r2, [r3, #0]
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f042 0201 	orr.w	r2, r2, #1
 80106bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106be:	e008      	b.n	80106d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	f042 0201 	orr.w	r2, r2, #1
 80106ce:	601a      	str	r2, [r3, #0]
 80106d0:	e000      	b.n	80106d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	3714      	adds	r7, #20
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	40010000 	.word	0x40010000
 80106e8:	40000400 	.word	0x40000400
 80106ec:	40000800 	.word	0x40000800
 80106f0:	40000c00 	.word	0x40000c00
 80106f4:	40010400 	.word	0x40010400
 80106f8:	40001800 	.word	0x40001800
 80106fc:	40014000 	.word	0x40014000
 8010700:	00010007 	.word	0x00010007

08010704 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d101      	bne.n	8010716 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010712:	2301      	movs	r3, #1
 8010714:	e049      	b.n	80107aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801071c:	b2db      	uxtb	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d106      	bne.n	8010730 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801072a:	6878      	ldr	r0, [r7, #4]
 801072c:	f000 f841 	bl	80107b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2202      	movs	r2, #2
 8010734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	3304      	adds	r3, #4
 8010740:	4619      	mov	r1, r3
 8010742:	4610      	mov	r0, r2
 8010744:	f001 f870 	bl	8011828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2201      	movs	r2, #1
 801074c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	2201      	movs	r2, #1
 8010754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	2201      	movs	r2, #1
 801075c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	2201      	movs	r2, #1
 8010764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	2201      	movs	r2, #1
 801076c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2201      	movs	r2, #1
 8010774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	2201      	movs	r2, #1
 801077c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2201      	movs	r2, #1
 8010784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2201      	movs	r2, #1
 801078c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2201      	movs	r2, #1
 8010794:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2201      	movs	r2, #1
 80107a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80107a8:	2300      	movs	r3, #0
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3708      	adds	r7, #8
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}

080107b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80107b2:	b480      	push	{r7}
 80107b4:	b083      	sub	sp, #12
 80107b6:	af00      	add	r7, sp, #0
 80107b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80107ba:	bf00      	nop
 80107bc:	370c      	adds	r7, #12
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr
	...

080107c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d109      	bne.n	80107ec <HAL_TIM_PWM_Start+0x24>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	bf14      	ite	ne
 80107e4:	2301      	movne	r3, #1
 80107e6:	2300      	moveq	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	e03c      	b.n	8010866 <HAL_TIM_PWM_Start+0x9e>
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	2b04      	cmp	r3, #4
 80107f0:	d109      	bne.n	8010806 <HAL_TIM_PWM_Start+0x3e>
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	2b01      	cmp	r3, #1
 80107fc:	bf14      	ite	ne
 80107fe:	2301      	movne	r3, #1
 8010800:	2300      	moveq	r3, #0
 8010802:	b2db      	uxtb	r3, r3
 8010804:	e02f      	b.n	8010866 <HAL_TIM_PWM_Start+0x9e>
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	2b08      	cmp	r3, #8
 801080a:	d109      	bne.n	8010820 <HAL_TIM_PWM_Start+0x58>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010812:	b2db      	uxtb	r3, r3
 8010814:	2b01      	cmp	r3, #1
 8010816:	bf14      	ite	ne
 8010818:	2301      	movne	r3, #1
 801081a:	2300      	moveq	r3, #0
 801081c:	b2db      	uxtb	r3, r3
 801081e:	e022      	b.n	8010866 <HAL_TIM_PWM_Start+0x9e>
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	2b0c      	cmp	r3, #12
 8010824:	d109      	bne.n	801083a <HAL_TIM_PWM_Start+0x72>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801082c:	b2db      	uxtb	r3, r3
 801082e:	2b01      	cmp	r3, #1
 8010830:	bf14      	ite	ne
 8010832:	2301      	movne	r3, #1
 8010834:	2300      	moveq	r3, #0
 8010836:	b2db      	uxtb	r3, r3
 8010838:	e015      	b.n	8010866 <HAL_TIM_PWM_Start+0x9e>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	2b10      	cmp	r3, #16
 801083e:	d109      	bne.n	8010854 <HAL_TIM_PWM_Start+0x8c>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010846:	b2db      	uxtb	r3, r3
 8010848:	2b01      	cmp	r3, #1
 801084a:	bf14      	ite	ne
 801084c:	2301      	movne	r3, #1
 801084e:	2300      	moveq	r3, #0
 8010850:	b2db      	uxtb	r3, r3
 8010852:	e008      	b.n	8010866 <HAL_TIM_PWM_Start+0x9e>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801085a:	b2db      	uxtb	r3, r3
 801085c:	2b01      	cmp	r3, #1
 801085e:	bf14      	ite	ne
 8010860:	2301      	movne	r3, #1
 8010862:	2300      	moveq	r3, #0
 8010864:	b2db      	uxtb	r3, r3
 8010866:	2b00      	cmp	r3, #0
 8010868:	d001      	beq.n	801086e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801086a:	2301      	movs	r3, #1
 801086c:	e0a1      	b.n	80109b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801086e:	683b      	ldr	r3, [r7, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d104      	bne.n	801087e <HAL_TIM_PWM_Start+0xb6>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2202      	movs	r2, #2
 8010878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801087c:	e023      	b.n	80108c6 <HAL_TIM_PWM_Start+0xfe>
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	2b04      	cmp	r3, #4
 8010882:	d104      	bne.n	801088e <HAL_TIM_PWM_Start+0xc6>
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	2202      	movs	r2, #2
 8010888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801088c:	e01b      	b.n	80108c6 <HAL_TIM_PWM_Start+0xfe>
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	2b08      	cmp	r3, #8
 8010892:	d104      	bne.n	801089e <HAL_TIM_PWM_Start+0xd6>
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2202      	movs	r2, #2
 8010898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801089c:	e013      	b.n	80108c6 <HAL_TIM_PWM_Start+0xfe>
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	2b0c      	cmp	r3, #12
 80108a2:	d104      	bne.n	80108ae <HAL_TIM_PWM_Start+0xe6>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2202      	movs	r2, #2
 80108a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80108ac:	e00b      	b.n	80108c6 <HAL_TIM_PWM_Start+0xfe>
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	2b10      	cmp	r3, #16
 80108b2:	d104      	bne.n	80108be <HAL_TIM_PWM_Start+0xf6>
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2202      	movs	r2, #2
 80108b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80108bc:	e003      	b.n	80108c6 <HAL_TIM_PWM_Start+0xfe>
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2202      	movs	r2, #2
 80108c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	2201      	movs	r2, #1
 80108cc:	6839      	ldr	r1, [r7, #0]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f001 fdcc 	bl	801246c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	4a38      	ldr	r2, [pc, #224]	; (80109bc <HAL_TIM_PWM_Start+0x1f4>)
 80108da:	4293      	cmp	r3, r2
 80108dc:	d013      	beq.n	8010906 <HAL_TIM_PWM_Start+0x13e>
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	4a37      	ldr	r2, [pc, #220]	; (80109c0 <HAL_TIM_PWM_Start+0x1f8>)
 80108e4:	4293      	cmp	r3, r2
 80108e6:	d00e      	beq.n	8010906 <HAL_TIM_PWM_Start+0x13e>
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a35      	ldr	r2, [pc, #212]	; (80109c4 <HAL_TIM_PWM_Start+0x1fc>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d009      	beq.n	8010906 <HAL_TIM_PWM_Start+0x13e>
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	4a34      	ldr	r2, [pc, #208]	; (80109c8 <HAL_TIM_PWM_Start+0x200>)
 80108f8:	4293      	cmp	r3, r2
 80108fa:	d004      	beq.n	8010906 <HAL_TIM_PWM_Start+0x13e>
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	4a32      	ldr	r2, [pc, #200]	; (80109cc <HAL_TIM_PWM_Start+0x204>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d101      	bne.n	801090a <HAL_TIM_PWM_Start+0x142>
 8010906:	2301      	movs	r3, #1
 8010908:	e000      	b.n	801090c <HAL_TIM_PWM_Start+0x144>
 801090a:	2300      	movs	r3, #0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d007      	beq.n	8010920 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801091e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4a25      	ldr	r2, [pc, #148]	; (80109bc <HAL_TIM_PWM_Start+0x1f4>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d022      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010932:	d01d      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a25      	ldr	r2, [pc, #148]	; (80109d0 <HAL_TIM_PWM_Start+0x208>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d018      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4a24      	ldr	r2, [pc, #144]	; (80109d4 <HAL_TIM_PWM_Start+0x20c>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d013      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	4a22      	ldr	r2, [pc, #136]	; (80109d8 <HAL_TIM_PWM_Start+0x210>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d00e      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	4a1a      	ldr	r2, [pc, #104]	; (80109c0 <HAL_TIM_PWM_Start+0x1f8>)
 8010958:	4293      	cmp	r3, r2
 801095a:	d009      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	4a1e      	ldr	r2, [pc, #120]	; (80109dc <HAL_TIM_PWM_Start+0x214>)
 8010962:	4293      	cmp	r3, r2
 8010964:	d004      	beq.n	8010970 <HAL_TIM_PWM_Start+0x1a8>
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	4a16      	ldr	r2, [pc, #88]	; (80109c4 <HAL_TIM_PWM_Start+0x1fc>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d115      	bne.n	801099c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	689a      	ldr	r2, [r3, #8]
 8010976:	4b1a      	ldr	r3, [pc, #104]	; (80109e0 <HAL_TIM_PWM_Start+0x218>)
 8010978:	4013      	ands	r3, r2
 801097a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	2b06      	cmp	r3, #6
 8010980:	d015      	beq.n	80109ae <HAL_TIM_PWM_Start+0x1e6>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010988:	d011      	beq.n	80109ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f042 0201 	orr.w	r2, r2, #1
 8010998:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801099a:	e008      	b.n	80109ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	681a      	ldr	r2, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	f042 0201 	orr.w	r2, r2, #1
 80109aa:	601a      	str	r2, [r3, #0]
 80109ac:	e000      	b.n	80109b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80109b0:	2300      	movs	r3, #0
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3710      	adds	r7, #16
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	40010000 	.word	0x40010000
 80109c0:	40010400 	.word	0x40010400
 80109c4:	40014000 	.word	0x40014000
 80109c8:	40014400 	.word	0x40014400
 80109cc:	40014800 	.word	0x40014800
 80109d0:	40000400 	.word	0x40000400
 80109d4:	40000800 	.word	0x40000800
 80109d8:	40000c00 	.word	0x40000c00
 80109dc:	40001800 	.word	0x40001800
 80109e0:	00010007 	.word	0x00010007

080109e4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d101      	bne.n	80109f6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80109f2:	2301      	movs	r3, #1
 80109f4:	e049      	b.n	8010a8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 f841 	bl	8010a92 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2202      	movs	r2, #2
 8010a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681a      	ldr	r2, [r3, #0]
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	3304      	adds	r3, #4
 8010a20:	4619      	mov	r1, r3
 8010a22:	4610      	mov	r0, r2
 8010a24:	f000 ff00 	bl	8011828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2201      	movs	r2, #1
 8010a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	2201      	movs	r2, #1
 8010a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2201      	movs	r2, #1
 8010a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2201      	movs	r2, #1
 8010a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2201      	movs	r2, #1
 8010a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	2201      	movs	r2, #1
 8010a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2201      	movs	r2, #1
 8010a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2201      	movs	r2, #1
 8010a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2201      	movs	r2, #1
 8010a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010a88:	2300      	movs	r3, #0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3708      	adds	r7, #8
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8010a9a:	bf00      	nop
 8010a9c:	370c      	adds	r7, #12
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa4:	4770      	bx	lr
	...

08010aa8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d104      	bne.n	8010ac2 <HAL_TIM_IC_Start+0x1a>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010abe:	b2db      	uxtb	r3, r3
 8010ac0:	e023      	b.n	8010b0a <HAL_TIM_IC_Start+0x62>
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	2b04      	cmp	r3, #4
 8010ac6:	d104      	bne.n	8010ad2 <HAL_TIM_IC_Start+0x2a>
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	e01b      	b.n	8010b0a <HAL_TIM_IC_Start+0x62>
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2b08      	cmp	r3, #8
 8010ad6:	d104      	bne.n	8010ae2 <HAL_TIM_IC_Start+0x3a>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	e013      	b.n	8010b0a <HAL_TIM_IC_Start+0x62>
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	2b0c      	cmp	r3, #12
 8010ae6:	d104      	bne.n	8010af2 <HAL_TIM_IC_Start+0x4a>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	e00b      	b.n	8010b0a <HAL_TIM_IC_Start+0x62>
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	2b10      	cmp	r3, #16
 8010af6:	d104      	bne.n	8010b02 <HAL_TIM_IC_Start+0x5a>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	e003      	b.n	8010b0a <HAL_TIM_IC_Start+0x62>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010b08:	b2db      	uxtb	r3, r3
 8010b0a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010b0c:	683b      	ldr	r3, [r7, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d104      	bne.n	8010b1c <HAL_TIM_IC_Start+0x74>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b18:	b2db      	uxtb	r3, r3
 8010b1a:	e013      	b.n	8010b44 <HAL_TIM_IC_Start+0x9c>
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	2b04      	cmp	r3, #4
 8010b20:	d104      	bne.n	8010b2c <HAL_TIM_IC_Start+0x84>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	e00b      	b.n	8010b44 <HAL_TIM_IC_Start+0x9c>
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	2b08      	cmp	r3, #8
 8010b30:	d104      	bne.n	8010b3c <HAL_TIM_IC_Start+0x94>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010b38:	b2db      	uxtb	r3, r3
 8010b3a:	e003      	b.n	8010b44 <HAL_TIM_IC_Start+0x9c>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010b46:	7bfb      	ldrb	r3, [r7, #15]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d102      	bne.n	8010b52 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010b4c:	7bbb      	ldrb	r3, [r7, #14]
 8010b4e:	2b01      	cmp	r3, #1
 8010b50:	d001      	beq.n	8010b56 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8010b52:	2301      	movs	r3, #1
 8010b54:	e097      	b.n	8010c86 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d104      	bne.n	8010b66 <HAL_TIM_IC_Start+0xbe>
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	2202      	movs	r2, #2
 8010b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010b64:	e023      	b.n	8010bae <HAL_TIM_IC_Start+0x106>
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	2b04      	cmp	r3, #4
 8010b6a:	d104      	bne.n	8010b76 <HAL_TIM_IC_Start+0xce>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2202      	movs	r2, #2
 8010b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010b74:	e01b      	b.n	8010bae <HAL_TIM_IC_Start+0x106>
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	2b08      	cmp	r3, #8
 8010b7a:	d104      	bne.n	8010b86 <HAL_TIM_IC_Start+0xde>
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	2202      	movs	r2, #2
 8010b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010b84:	e013      	b.n	8010bae <HAL_TIM_IC_Start+0x106>
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	2b0c      	cmp	r3, #12
 8010b8a:	d104      	bne.n	8010b96 <HAL_TIM_IC_Start+0xee>
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2202      	movs	r2, #2
 8010b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010b94:	e00b      	b.n	8010bae <HAL_TIM_IC_Start+0x106>
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	2b10      	cmp	r3, #16
 8010b9a:	d104      	bne.n	8010ba6 <HAL_TIM_IC_Start+0xfe>
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010ba4:	e003      	b.n	8010bae <HAL_TIM_IC_Start+0x106>
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2202      	movs	r2, #2
 8010baa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d104      	bne.n	8010bbe <HAL_TIM_IC_Start+0x116>
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	2202      	movs	r2, #2
 8010bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bbc:	e013      	b.n	8010be6 <HAL_TIM_IC_Start+0x13e>
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	2b04      	cmp	r3, #4
 8010bc2:	d104      	bne.n	8010bce <HAL_TIM_IC_Start+0x126>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2202      	movs	r2, #2
 8010bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bcc:	e00b      	b.n	8010be6 <HAL_TIM_IC_Start+0x13e>
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	2b08      	cmp	r3, #8
 8010bd2:	d104      	bne.n	8010bde <HAL_TIM_IC_Start+0x136>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2202      	movs	r2, #2
 8010bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010bdc:	e003      	b.n	8010be6 <HAL_TIM_IC_Start+0x13e>
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	2202      	movs	r2, #2
 8010be2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	2201      	movs	r2, #1
 8010bec:	6839      	ldr	r1, [r7, #0]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f001 fc3c 	bl	801246c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4a25      	ldr	r2, [pc, #148]	; (8010c90 <HAL_TIM_IC_Start+0x1e8>)
 8010bfa:	4293      	cmp	r3, r2
 8010bfc:	d022      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c06:	d01d      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a21      	ldr	r2, [pc, #132]	; (8010c94 <HAL_TIM_IC_Start+0x1ec>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d018      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a20      	ldr	r2, [pc, #128]	; (8010c98 <HAL_TIM_IC_Start+0x1f0>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d013      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	4a1e      	ldr	r2, [pc, #120]	; (8010c9c <HAL_TIM_IC_Start+0x1f4>)
 8010c22:	4293      	cmp	r3, r2
 8010c24:	d00e      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	4a1d      	ldr	r2, [pc, #116]	; (8010ca0 <HAL_TIM_IC_Start+0x1f8>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d009      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	4a1b      	ldr	r2, [pc, #108]	; (8010ca4 <HAL_TIM_IC_Start+0x1fc>)
 8010c36:	4293      	cmp	r3, r2
 8010c38:	d004      	beq.n	8010c44 <HAL_TIM_IC_Start+0x19c>
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	4a1a      	ldr	r2, [pc, #104]	; (8010ca8 <HAL_TIM_IC_Start+0x200>)
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d115      	bne.n	8010c70 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	689a      	ldr	r2, [r3, #8]
 8010c4a:	4b18      	ldr	r3, [pc, #96]	; (8010cac <HAL_TIM_IC_Start+0x204>)
 8010c4c:	4013      	ands	r3, r2
 8010c4e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	2b06      	cmp	r3, #6
 8010c54:	d015      	beq.n	8010c82 <HAL_TIM_IC_Start+0x1da>
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010c5c:	d011      	beq.n	8010c82 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	f042 0201 	orr.w	r2, r2, #1
 8010c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c6e:	e008      	b.n	8010c82 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f042 0201 	orr.w	r2, r2, #1
 8010c7e:	601a      	str	r2, [r3, #0]
 8010c80:	e000      	b.n	8010c84 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010c84:	2300      	movs	r3, #0
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	40010000 	.word	0x40010000
 8010c94:	40000400 	.word	0x40000400
 8010c98:	40000800 	.word	0x40000800
 8010c9c:	40000c00 	.word	0x40000c00
 8010ca0:	40010400 	.word	0x40010400
 8010ca4:	40001800 	.word	0x40001800
 8010ca8:	40014000 	.word	0x40014000
 8010cac:	00010007 	.word	0x00010007

08010cb0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b084      	sub	sp, #16
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
 8010cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d104      	bne.n	8010cce <HAL_TIM_IC_Start_IT+0x1e>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	e023      	b.n	8010d16 <HAL_TIM_IC_Start_IT+0x66>
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	2b04      	cmp	r3, #4
 8010cd2:	d104      	bne.n	8010cde <HAL_TIM_IC_Start_IT+0x2e>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	e01b      	b.n	8010d16 <HAL_TIM_IC_Start_IT+0x66>
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	2b08      	cmp	r3, #8
 8010ce2:	d104      	bne.n	8010cee <HAL_TIM_IC_Start_IT+0x3e>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	e013      	b.n	8010d16 <HAL_TIM_IC_Start_IT+0x66>
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	2b0c      	cmp	r3, #12
 8010cf2:	d104      	bne.n	8010cfe <HAL_TIM_IC_Start_IT+0x4e>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	e00b      	b.n	8010d16 <HAL_TIM_IC_Start_IT+0x66>
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2b10      	cmp	r3, #16
 8010d02:	d104      	bne.n	8010d0e <HAL_TIM_IC_Start_IT+0x5e>
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	e003      	b.n	8010d16 <HAL_TIM_IC_Start_IT+0x66>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d104      	bne.n	8010d28 <HAL_TIM_IC_Start_IT+0x78>
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	e013      	b.n	8010d50 <HAL_TIM_IC_Start_IT+0xa0>
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	2b04      	cmp	r3, #4
 8010d2c:	d104      	bne.n	8010d38 <HAL_TIM_IC_Start_IT+0x88>
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	e00b      	b.n	8010d50 <HAL_TIM_IC_Start_IT+0xa0>
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2b08      	cmp	r3, #8
 8010d3c:	d104      	bne.n	8010d48 <HAL_TIM_IC_Start_IT+0x98>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010d44:	b2db      	uxtb	r3, r3
 8010d46:	e003      	b.n	8010d50 <HAL_TIM_IC_Start_IT+0xa0>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8010d4e:	b2db      	uxtb	r3, r3
 8010d50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8010d52:	7bbb      	ldrb	r3, [r7, #14]
 8010d54:	2b01      	cmp	r3, #1
 8010d56:	d102      	bne.n	8010d5e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8010d58:	7b7b      	ldrb	r3, [r7, #13]
 8010d5a:	2b01      	cmp	r3, #1
 8010d5c:	d001      	beq.n	8010d62 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	e0e2      	b.n	8010f28 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d104      	bne.n	8010d72 <HAL_TIM_IC_Start_IT+0xc2>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2202      	movs	r2, #2
 8010d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d70:	e023      	b.n	8010dba <HAL_TIM_IC_Start_IT+0x10a>
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	2b04      	cmp	r3, #4
 8010d76:	d104      	bne.n	8010d82 <HAL_TIM_IC_Start_IT+0xd2>
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2202      	movs	r2, #2
 8010d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d80:	e01b      	b.n	8010dba <HAL_TIM_IC_Start_IT+0x10a>
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2b08      	cmp	r3, #8
 8010d86:	d104      	bne.n	8010d92 <HAL_TIM_IC_Start_IT+0xe2>
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	2202      	movs	r2, #2
 8010d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d90:	e013      	b.n	8010dba <HAL_TIM_IC_Start_IT+0x10a>
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	2b0c      	cmp	r3, #12
 8010d96:	d104      	bne.n	8010da2 <HAL_TIM_IC_Start_IT+0xf2>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2202      	movs	r2, #2
 8010d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010da0:	e00b      	b.n	8010dba <HAL_TIM_IC_Start_IT+0x10a>
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	2b10      	cmp	r3, #16
 8010da6:	d104      	bne.n	8010db2 <HAL_TIM_IC_Start_IT+0x102>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	2202      	movs	r2, #2
 8010dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010db0:	e003      	b.n	8010dba <HAL_TIM_IC_Start_IT+0x10a>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2202      	movs	r2, #2
 8010db6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d104      	bne.n	8010dca <HAL_TIM_IC_Start_IT+0x11a>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	2202      	movs	r2, #2
 8010dc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dc8:	e013      	b.n	8010df2 <HAL_TIM_IC_Start_IT+0x142>
 8010dca:	683b      	ldr	r3, [r7, #0]
 8010dcc:	2b04      	cmp	r3, #4
 8010dce:	d104      	bne.n	8010dda <HAL_TIM_IC_Start_IT+0x12a>
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2202      	movs	r2, #2
 8010dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dd8:	e00b      	b.n	8010df2 <HAL_TIM_IC_Start_IT+0x142>
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	2b08      	cmp	r3, #8
 8010dde:	d104      	bne.n	8010dea <HAL_TIM_IC_Start_IT+0x13a>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	2202      	movs	r2, #2
 8010de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010de8:	e003      	b.n	8010df2 <HAL_TIM_IC_Start_IT+0x142>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2202      	movs	r2, #2
 8010dee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b0c      	cmp	r3, #12
 8010df6:	d841      	bhi.n	8010e7c <HAL_TIM_IC_Start_IT+0x1cc>
 8010df8:	a201      	add	r2, pc, #4	; (adr r2, 8010e00 <HAL_TIM_IC_Start_IT+0x150>)
 8010dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfe:	bf00      	nop
 8010e00:	08010e35 	.word	0x08010e35
 8010e04:	08010e7d 	.word	0x08010e7d
 8010e08:	08010e7d 	.word	0x08010e7d
 8010e0c:	08010e7d 	.word	0x08010e7d
 8010e10:	08010e47 	.word	0x08010e47
 8010e14:	08010e7d 	.word	0x08010e7d
 8010e18:	08010e7d 	.word	0x08010e7d
 8010e1c:	08010e7d 	.word	0x08010e7d
 8010e20:	08010e59 	.word	0x08010e59
 8010e24:	08010e7d 	.word	0x08010e7d
 8010e28:	08010e7d 	.word	0x08010e7d
 8010e2c:	08010e7d 	.word	0x08010e7d
 8010e30:	08010e6b 	.word	0x08010e6b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68da      	ldr	r2, [r3, #12]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f042 0202 	orr.w	r2, r2, #2
 8010e42:	60da      	str	r2, [r3, #12]
      break;
 8010e44:	e01d      	b.n	8010e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	68da      	ldr	r2, [r3, #12]
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	f042 0204 	orr.w	r2, r2, #4
 8010e54:	60da      	str	r2, [r3, #12]
      break;
 8010e56:	e014      	b.n	8010e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	68da      	ldr	r2, [r3, #12]
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	f042 0208 	orr.w	r2, r2, #8
 8010e66:	60da      	str	r2, [r3, #12]
      break;
 8010e68:	e00b      	b.n	8010e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	68da      	ldr	r2, [r3, #12]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	f042 0210 	orr.w	r2, r2, #16
 8010e78:	60da      	str	r2, [r3, #12]
      break;
 8010e7a:	e002      	b.n	8010e82 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8010e80:	bf00      	nop
  }

  if (status == HAL_OK)
 8010e82:	7bfb      	ldrb	r3, [r7, #15]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d14e      	bne.n	8010f26 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	2201      	movs	r2, #1
 8010e8e:	6839      	ldr	r1, [r7, #0]
 8010e90:	4618      	mov	r0, r3
 8010e92:	f001 faeb 	bl	801246c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	4a25      	ldr	r2, [pc, #148]	; (8010f30 <HAL_TIM_IC_Start_IT+0x280>)
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d022      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010ea8:	d01d      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	4a21      	ldr	r2, [pc, #132]	; (8010f34 <HAL_TIM_IC_Start_IT+0x284>)
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	d018      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a1f      	ldr	r2, [pc, #124]	; (8010f38 <HAL_TIM_IC_Start_IT+0x288>)
 8010eba:	4293      	cmp	r3, r2
 8010ebc:	d013      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a1e      	ldr	r2, [pc, #120]	; (8010f3c <HAL_TIM_IC_Start_IT+0x28c>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d00e      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a1c      	ldr	r2, [pc, #112]	; (8010f40 <HAL_TIM_IC_Start_IT+0x290>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d009      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a1b      	ldr	r2, [pc, #108]	; (8010f44 <HAL_TIM_IC_Start_IT+0x294>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d004      	beq.n	8010ee6 <HAL_TIM_IC_Start_IT+0x236>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	4a19      	ldr	r2, [pc, #100]	; (8010f48 <HAL_TIM_IC_Start_IT+0x298>)
 8010ee2:	4293      	cmp	r3, r2
 8010ee4:	d115      	bne.n	8010f12 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	689a      	ldr	r2, [r3, #8]
 8010eec:	4b17      	ldr	r3, [pc, #92]	; (8010f4c <HAL_TIM_IC_Start_IT+0x29c>)
 8010eee:	4013      	ands	r3, r2
 8010ef0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2b06      	cmp	r3, #6
 8010ef6:	d015      	beq.n	8010f24 <HAL_TIM_IC_Start_IT+0x274>
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010efe:	d011      	beq.n	8010f24 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	681a      	ldr	r2, [r3, #0]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	f042 0201 	orr.w	r2, r2, #1
 8010f0e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f10:	e008      	b.n	8010f24 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	f042 0201 	orr.w	r2, r2, #1
 8010f20:	601a      	str	r2, [r3, #0]
 8010f22:	e000      	b.n	8010f26 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010f24:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3710      	adds	r7, #16
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}
 8010f30:	40010000 	.word	0x40010000
 8010f34:	40000400 	.word	0x40000400
 8010f38:	40000800 	.word	0x40000800
 8010f3c:	40000c00 	.word	0x40000c00
 8010f40:	40010400 	.word	0x40010400
 8010f44:	40001800 	.word	0x40001800
 8010f48:	40014000 	.word	0x40014000
 8010f4c:	00010007 	.word	0x00010007

08010f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b082      	sub	sp, #8
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	f003 0302 	and.w	r3, r3, #2
 8010f62:	2b02      	cmp	r3, #2
 8010f64:	d122      	bne.n	8010fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	68db      	ldr	r3, [r3, #12]
 8010f6c:	f003 0302 	and.w	r3, r3, #2
 8010f70:	2b02      	cmp	r3, #2
 8010f72:	d11b      	bne.n	8010fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f06f 0202 	mvn.w	r2, #2
 8010f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	699b      	ldr	r3, [r3, #24]
 8010f8a:	f003 0303 	and.w	r3, r3, #3
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d003      	beq.n	8010f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f7f3 fa5e 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 8010f98:	e005      	b.n	8010fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f9a:	6878      	ldr	r0, [r7, #4]
 8010f9c:	f000 fc26 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f000 fc2d 	bl	8011800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2200      	movs	r2, #0
 8010faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	691b      	ldr	r3, [r3, #16]
 8010fb2:	f003 0304 	and.w	r3, r3, #4
 8010fb6:	2b04      	cmp	r3, #4
 8010fb8:	d122      	bne.n	8011000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	68db      	ldr	r3, [r3, #12]
 8010fc0:	f003 0304 	and.w	r3, r3, #4
 8010fc4:	2b04      	cmp	r3, #4
 8010fc6:	d11b      	bne.n	8011000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	f06f 0204 	mvn.w	r2, #4
 8010fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2202      	movs	r2, #2
 8010fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	699b      	ldr	r3, [r3, #24]
 8010fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d003      	beq.n	8010fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7f3 fa34 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 8010fec:	e005      	b.n	8010ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 fbfc 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 fc03 	bl	8011800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2200      	movs	r2, #0
 8010ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	f003 0308 	and.w	r3, r3, #8
 801100a:	2b08      	cmp	r3, #8
 801100c:	d122      	bne.n	8011054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	68db      	ldr	r3, [r3, #12]
 8011014:	f003 0308 	and.w	r3, r3, #8
 8011018:	2b08      	cmp	r3, #8
 801101a:	d11b      	bne.n	8011054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	f06f 0208 	mvn.w	r2, #8
 8011024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	2204      	movs	r2, #4
 801102a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	69db      	ldr	r3, [r3, #28]
 8011032:	f003 0303 	and.w	r3, r3, #3
 8011036:	2b00      	cmp	r3, #0
 8011038:	d003      	beq.n	8011042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f7f3 fa0a 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 8011040:	e005      	b.n	801104e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 fbd2 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f000 fbd9 	bl	8011800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	691b      	ldr	r3, [r3, #16]
 801105a:	f003 0310 	and.w	r3, r3, #16
 801105e:	2b10      	cmp	r3, #16
 8011060:	d122      	bne.n	80110a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	f003 0310 	and.w	r3, r3, #16
 801106c:	2b10      	cmp	r3, #16
 801106e:	d11b      	bne.n	80110a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	f06f 0210 	mvn.w	r2, #16
 8011078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	2208      	movs	r2, #8
 801107e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	69db      	ldr	r3, [r3, #28]
 8011086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801108a:	2b00      	cmp	r3, #0
 801108c:	d003      	beq.n	8011096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f7f3 f9e0 	bl	8004454 <HAL_TIM_IC_CaptureCallback>
 8011094:	e005      	b.n	80110a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 fba8 	bl	80117ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801109c:	6878      	ldr	r0, [r7, #4]
 801109e:	f000 fbaf 	bl	8011800 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	2200      	movs	r2, #0
 80110a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	691b      	ldr	r3, [r3, #16]
 80110ae:	f003 0301 	and.w	r3, r3, #1
 80110b2:	2b01      	cmp	r3, #1
 80110b4:	d10e      	bne.n	80110d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	f003 0301 	and.w	r3, r3, #1
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d107      	bne.n	80110d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	f06f 0201 	mvn.w	r2, #1
 80110cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	f7f3 fa7a 	bl	80045c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	691b      	ldr	r3, [r3, #16]
 80110da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110de:	2b80      	cmp	r3, #128	; 0x80
 80110e0:	d10e      	bne.n	8011100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	681b      	ldr	r3, [r3, #0]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110ec:	2b80      	cmp	r3, #128	; 0x80
 80110ee:	d107      	bne.n	8011100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80110f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f001 fa74 	bl	80125e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801110a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801110e:	d10e      	bne.n	801112e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801111a:	2b80      	cmp	r3, #128	; 0x80
 801111c:	d107      	bne.n	801112e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f001 fa67 	bl	80125fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	691b      	ldr	r3, [r3, #16]
 8011134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011138:	2b40      	cmp	r3, #64	; 0x40
 801113a:	d10e      	bne.n	801115a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011146:	2b40      	cmp	r3, #64	; 0x40
 8011148:	d107      	bne.n	801115a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 fb5d 	bl	8011814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	f003 0320 	and.w	r3, r3, #32
 8011164:	2b20      	cmp	r3, #32
 8011166:	d10e      	bne.n	8011186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68db      	ldr	r3, [r3, #12]
 801116e:	f003 0320 	and.w	r3, r3, #32
 8011172:	2b20      	cmp	r3, #32
 8011174:	d107      	bne.n	8011186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	f06f 0220 	mvn.w	r2, #32
 801117e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f001 fa27 	bl	80125d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8011186:	bf00      	nop
 8011188:	3708      	adds	r7, #8
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}

0801118e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801118e:	b580      	push	{r7, lr}
 8011190:	b086      	sub	sp, #24
 8011192:	af00      	add	r7, sp, #0
 8011194:	60f8      	str	r0, [r7, #12]
 8011196:	60b9      	str	r1, [r7, #8]
 8011198:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801119a:	2300      	movs	r3, #0
 801119c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d101      	bne.n	80111ac <HAL_TIM_IC_ConfigChannel+0x1e>
 80111a8:	2302      	movs	r3, #2
 80111aa:	e088      	b.n	80112be <HAL_TIM_IC_ConfigChannel+0x130>
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	2201      	movs	r2, #1
 80111b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d11b      	bne.n	80111f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80111be:	68bb      	ldr	r3, [r7, #8]
 80111c0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80111ca:	f000 ff87 	bl	80120dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	699a      	ldr	r2, [r3, #24]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	f022 020c 	bic.w	r2, r2, #12
 80111dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	6999      	ldr	r1, [r3, #24]
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	689a      	ldr	r2, [r3, #8]
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	430a      	orrs	r2, r1
 80111ee:	619a      	str	r2, [r3, #24]
 80111f0:	e060      	b.n	80112b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b04      	cmp	r3, #4
 80111f6:	d11c      	bne.n	8011232 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8011208:	f001 f80b 	bl	8012222 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	699a      	ldr	r2, [r3, #24]
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801121a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	6999      	ldr	r1, [r3, #24]
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	689b      	ldr	r3, [r3, #8]
 8011226:	021a      	lsls	r2, r3, #8
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	430a      	orrs	r2, r1
 801122e:	619a      	str	r2, [r3, #24]
 8011230:	e040      	b.n	80112b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b08      	cmp	r3, #8
 8011236:	d11b      	bne.n	8011270 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801123c:	68bb      	ldr	r3, [r7, #8]
 801123e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8011240:	68bb      	ldr	r3, [r7, #8]
 8011242:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8011248:	f001 f858 	bl	80122fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	69da      	ldr	r2, [r3, #28]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f022 020c 	bic.w	r2, r2, #12
 801125a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	69d9      	ldr	r1, [r3, #28]
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	689a      	ldr	r2, [r3, #8]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	61da      	str	r2, [r3, #28]
 801126e:	e021      	b.n	80112b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b0c      	cmp	r3, #12
 8011274:	d11c      	bne.n	80112b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8011286:	f001 f875 	bl	8012374 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	69da      	ldr	r2, [r3, #28]
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8011298:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	69d9      	ldr	r1, [r3, #28]
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	021a      	lsls	r2, r3, #8
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	430a      	orrs	r2, r1
 80112ac:	61da      	str	r2, [r3, #28]
 80112ae:	e001      	b.n	80112b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80112b0:	2301      	movs	r3, #1
 80112b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80112bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3718      	adds	r7, #24
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
	...

080112c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b086      	sub	sp, #24
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112de:	2b01      	cmp	r3, #1
 80112e0:	d101      	bne.n	80112e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80112e2:	2302      	movs	r3, #2
 80112e4:	e0ff      	b.n	80114e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2201      	movs	r2, #1
 80112ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b14      	cmp	r3, #20
 80112f2:	f200 80f0 	bhi.w	80114d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80112f6:	a201      	add	r2, pc, #4	; (adr r2, 80112fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80112f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112fc:	08011351 	.word	0x08011351
 8011300:	080114d7 	.word	0x080114d7
 8011304:	080114d7 	.word	0x080114d7
 8011308:	080114d7 	.word	0x080114d7
 801130c:	08011391 	.word	0x08011391
 8011310:	080114d7 	.word	0x080114d7
 8011314:	080114d7 	.word	0x080114d7
 8011318:	080114d7 	.word	0x080114d7
 801131c:	080113d3 	.word	0x080113d3
 8011320:	080114d7 	.word	0x080114d7
 8011324:	080114d7 	.word	0x080114d7
 8011328:	080114d7 	.word	0x080114d7
 801132c:	08011413 	.word	0x08011413
 8011330:	080114d7 	.word	0x080114d7
 8011334:	080114d7 	.word	0x080114d7
 8011338:	080114d7 	.word	0x080114d7
 801133c:	08011455 	.word	0x08011455
 8011340:	080114d7 	.word	0x080114d7
 8011344:	080114d7 	.word	0x080114d7
 8011348:	080114d7 	.word	0x080114d7
 801134c:	08011495 	.word	0x08011495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	68b9      	ldr	r1, [r7, #8]
 8011356:	4618      	mov	r0, r3
 8011358:	f000 fb00 	bl	801195c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	699a      	ldr	r2, [r3, #24]
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	f042 0208 	orr.w	r2, r2, #8
 801136a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	699a      	ldr	r2, [r3, #24]
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	f022 0204 	bic.w	r2, r2, #4
 801137a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	6999      	ldr	r1, [r3, #24]
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	691a      	ldr	r2, [r3, #16]
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	430a      	orrs	r2, r1
 801138c:	619a      	str	r2, [r3, #24]
      break;
 801138e:	e0a5      	b.n	80114dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	68b9      	ldr	r1, [r7, #8]
 8011396:	4618      	mov	r0, r3
 8011398:	f000 fb70 	bl	8011a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	699a      	ldr	r2, [r3, #24]
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80113aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	699a      	ldr	r2, [r3, #24]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80113ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	6999      	ldr	r1, [r3, #24]
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	691b      	ldr	r3, [r3, #16]
 80113c6:	021a      	lsls	r2, r3, #8
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	430a      	orrs	r2, r1
 80113ce:	619a      	str	r2, [r3, #24]
      break;
 80113d0:	e084      	b.n	80114dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	68b9      	ldr	r1, [r7, #8]
 80113d8:	4618      	mov	r0, r3
 80113da:	f000 fbd9 	bl	8011b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	69da      	ldr	r2, [r3, #28]
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	f042 0208 	orr.w	r2, r2, #8
 80113ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	69da      	ldr	r2, [r3, #28]
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	f022 0204 	bic.w	r2, r2, #4
 80113fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	69d9      	ldr	r1, [r3, #28]
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	691a      	ldr	r2, [r3, #16]
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	430a      	orrs	r2, r1
 801140e:	61da      	str	r2, [r3, #28]
      break;
 8011410:	e064      	b.n	80114dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	4618      	mov	r0, r3
 801141a:	f000 fc41 	bl	8011ca0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69da      	ldr	r2, [r3, #28]
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801142c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	681b      	ldr	r3, [r3, #0]
 8011432:	69da      	ldr	r2, [r3, #28]
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801143c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	69d9      	ldr	r1, [r3, #28]
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	691b      	ldr	r3, [r3, #16]
 8011448:	021a      	lsls	r2, r3, #8
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	430a      	orrs	r2, r1
 8011450:	61da      	str	r2, [r3, #28]
      break;
 8011452:	e043      	b.n	80114dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	68b9      	ldr	r1, [r7, #8]
 801145a:	4618      	mov	r0, r3
 801145c:	f000 fc8a 	bl	8011d74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	f042 0208 	orr.w	r2, r2, #8
 801146e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	681b      	ldr	r3, [r3, #0]
 8011474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	681b      	ldr	r3, [r3, #0]
 801147a:	f022 0204 	bic.w	r2, r2, #4
 801147e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	691a      	ldr	r2, [r3, #16]
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	430a      	orrs	r2, r1
 8011490:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011492:	e023      	b.n	80114dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	68b9      	ldr	r1, [r7, #8]
 801149a:	4618      	mov	r0, r3
 801149c:	f000 fcce 	bl	8011e3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80114ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80114be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80114c6:	68bb      	ldr	r3, [r7, #8]
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	021a      	lsls	r2, r3, #8
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	430a      	orrs	r2, r1
 80114d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80114d4:	e002      	b.n	80114dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80114d6:	2301      	movs	r3, #1
 80114d8:	75fb      	strb	r3, [r7, #23]
      break;
 80114da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2200      	movs	r2, #0
 80114e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80114e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3718      	adds	r7, #24
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop

080114f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
 80114f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011504:	2b01      	cmp	r3, #1
 8011506:	d101      	bne.n	801150c <HAL_TIM_ConfigClockSource+0x1c>
 8011508:	2302      	movs	r3, #2
 801150a:	e0dc      	b.n	80116c6 <HAL_TIM_ConfigClockSource+0x1d6>
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2201      	movs	r2, #1
 8011510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	2202      	movs	r2, #2
 8011518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	4b6a      	ldr	r3, [pc, #424]	; (80116d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8011528:	4013      	ands	r3, r2
 801152a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	68ba      	ldr	r2, [r7, #8]
 801153a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a64      	ldr	r2, [pc, #400]	; (80116d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8011542:	4293      	cmp	r3, r2
 8011544:	f000 80a9 	beq.w	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 8011548:	4a62      	ldr	r2, [pc, #392]	; (80116d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801154a:	4293      	cmp	r3, r2
 801154c:	f200 80ae 	bhi.w	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 8011550:	4a61      	ldr	r2, [pc, #388]	; (80116d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8011552:	4293      	cmp	r3, r2
 8011554:	f000 80a1 	beq.w	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 8011558:	4a5f      	ldr	r2, [pc, #380]	; (80116d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801155a:	4293      	cmp	r3, r2
 801155c:	f200 80a6 	bhi.w	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 8011560:	4a5e      	ldr	r2, [pc, #376]	; (80116dc <HAL_TIM_ConfigClockSource+0x1ec>)
 8011562:	4293      	cmp	r3, r2
 8011564:	f000 8099 	beq.w	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 8011568:	4a5c      	ldr	r2, [pc, #368]	; (80116dc <HAL_TIM_ConfigClockSource+0x1ec>)
 801156a:	4293      	cmp	r3, r2
 801156c:	f200 809e 	bhi.w	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 8011570:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011574:	f000 8091 	beq.w	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 8011578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801157c:	f200 8096 	bhi.w	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 8011580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011584:	f000 8089 	beq.w	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 8011588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801158c:	f200 808e 	bhi.w	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 8011590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011594:	d03e      	beq.n	8011614 <HAL_TIM_ConfigClockSource+0x124>
 8011596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801159a:	f200 8087 	bhi.w	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 801159e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115a2:	f000 8086 	beq.w	80116b2 <HAL_TIM_ConfigClockSource+0x1c2>
 80115a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115aa:	d87f      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115ac:	2b70      	cmp	r3, #112	; 0x70
 80115ae:	d01a      	beq.n	80115e6 <HAL_TIM_ConfigClockSource+0xf6>
 80115b0:	2b70      	cmp	r3, #112	; 0x70
 80115b2:	d87b      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115b4:	2b60      	cmp	r3, #96	; 0x60
 80115b6:	d050      	beq.n	801165a <HAL_TIM_ConfigClockSource+0x16a>
 80115b8:	2b60      	cmp	r3, #96	; 0x60
 80115ba:	d877      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115bc:	2b50      	cmp	r3, #80	; 0x50
 80115be:	d03c      	beq.n	801163a <HAL_TIM_ConfigClockSource+0x14a>
 80115c0:	2b50      	cmp	r3, #80	; 0x50
 80115c2:	d873      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115c4:	2b40      	cmp	r3, #64	; 0x40
 80115c6:	d058      	beq.n	801167a <HAL_TIM_ConfigClockSource+0x18a>
 80115c8:	2b40      	cmp	r3, #64	; 0x40
 80115ca:	d86f      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115cc:	2b30      	cmp	r3, #48	; 0x30
 80115ce:	d064      	beq.n	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 80115d0:	2b30      	cmp	r3, #48	; 0x30
 80115d2:	d86b      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115d4:	2b20      	cmp	r3, #32
 80115d6:	d060      	beq.n	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 80115d8:	2b20      	cmp	r3, #32
 80115da:	d867      	bhi.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d05c      	beq.n	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 80115e0:	2b10      	cmp	r3, #16
 80115e2:	d05a      	beq.n	801169a <HAL_TIM_ConfigClockSource+0x1aa>
 80115e4:	e062      	b.n	80116ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80115f2:	683b      	ldr	r3, [r7, #0]
 80115f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80115f6:	f000 ff19 	bl	801242c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	681b      	ldr	r3, [r3, #0]
 801160e:	68ba      	ldr	r2, [r7, #8]
 8011610:	609a      	str	r2, [r3, #8]
      break;
 8011612:	e04f      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8011624:	f000 ff02 	bl	801242c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	689a      	ldr	r2, [r3, #8]
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011636:	609a      	str	r2, [r3, #8]
      break;
 8011638:	e03c      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011642:	683b      	ldr	r3, [r7, #0]
 8011644:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011646:	461a      	mov	r2, r3
 8011648:	f000 fdbc 	bl	80121c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	2150      	movs	r1, #80	; 0x50
 8011652:	4618      	mov	r0, r3
 8011654:	f000 fecc 	bl	80123f0 <TIM_ITRx_SetConfig>
      break;
 8011658:	e02c      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8011666:	461a      	mov	r2, r3
 8011668:	f000 fe18 	bl	801229c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2160      	movs	r1, #96	; 0x60
 8011672:	4618      	mov	r0, r3
 8011674:	f000 febc 	bl	80123f0 <TIM_ITRx_SetConfig>
      break;
 8011678:	e01c      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8011686:	461a      	mov	r2, r3
 8011688:	f000 fd9c 	bl	80121c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	2140      	movs	r1, #64	; 0x40
 8011692:	4618      	mov	r0, r3
 8011694:	f000 feac 	bl	80123f0 <TIM_ITRx_SetConfig>
      break;
 8011698:	e00c      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	4619      	mov	r1, r3
 80116a4:	4610      	mov	r0, r2
 80116a6:	f000 fea3 	bl	80123f0 <TIM_ITRx_SetConfig>
      break;
 80116aa:	e003      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80116ac:	2301      	movs	r3, #1
 80116ae:	73fb      	strb	r3, [r7, #15]
      break;
 80116b0:	e000      	b.n	80116b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80116b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2201      	movs	r2, #1
 80116b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2200      	movs	r2, #0
 80116c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80116c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3710      	adds	r7, #16
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	ffceff88 	.word	0xffceff88
 80116d4:	00100040 	.word	0x00100040
 80116d8:	00100030 	.word	0x00100030
 80116dc:	00100020 	.word	0x00100020

080116e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80116f0:	2b01      	cmp	r3, #1
 80116f2:	d101      	bne.n	80116f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80116f4:	2302      	movs	r3, #2
 80116f6:	e031      	b.n	801175c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2201      	movs	r2, #1
 80116fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2202      	movs	r2, #2
 8011704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8011708:	6839      	ldr	r1, [r7, #0]
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	f000 fbfc 	bl	8011f08 <TIM_SlaveTimer_SetConfig>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d009      	beq.n	801172a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2201      	movs	r2, #1
 801171a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2200      	movs	r2, #0
 8011722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	e018      	b.n	801175c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	68da      	ldr	r2, [r3, #12]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011738:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	68da      	ldr	r2, [r3, #12]
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011748:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	2201      	movs	r2, #1
 801174e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	6078      	str	r0, [r7, #4]
 801176c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801176e:	2300      	movs	r3, #0
 8011770:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	2b0c      	cmp	r3, #12
 8011776:	d831      	bhi.n	80117dc <HAL_TIM_ReadCapturedValue+0x78>
 8011778:	a201      	add	r2, pc, #4	; (adr r2, 8011780 <HAL_TIM_ReadCapturedValue+0x1c>)
 801177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801177e:	bf00      	nop
 8011780:	080117b5 	.word	0x080117b5
 8011784:	080117dd 	.word	0x080117dd
 8011788:	080117dd 	.word	0x080117dd
 801178c:	080117dd 	.word	0x080117dd
 8011790:	080117bf 	.word	0x080117bf
 8011794:	080117dd 	.word	0x080117dd
 8011798:	080117dd 	.word	0x080117dd
 801179c:	080117dd 	.word	0x080117dd
 80117a0:	080117c9 	.word	0x080117c9
 80117a4:	080117dd 	.word	0x080117dd
 80117a8:	080117dd 	.word	0x080117dd
 80117ac:	080117dd 	.word	0x080117dd
 80117b0:	080117d3 	.word	0x080117d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80117ba:	60fb      	str	r3, [r7, #12]

      break;
 80117bc:	e00f      	b.n	80117de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117c4:	60fb      	str	r3, [r7, #12]

      break;
 80117c6:	e00a      	b.n	80117de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117ce:	60fb      	str	r3, [r7, #12]

      break;
 80117d0:	e005      	b.n	80117de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80117d8:	60fb      	str	r3, [r7, #12]

      break;
 80117da:	e000      	b.n	80117de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80117dc:	bf00      	nop
  }

  return tmpreg;
 80117de:	68fb      	ldr	r3, [r7, #12]
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3714      	adds	r7, #20
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr

080117ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b083      	sub	sp, #12
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80117f4:	bf00      	nop
 80117f6:	370c      	adds	r7, #12
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011808:	bf00      	nop
 801180a:	370c      	adds	r7, #12
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr

08011814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr

08011828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011828:	b480      	push	{r7}
 801182a:	b085      	sub	sp, #20
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4a40      	ldr	r2, [pc, #256]	; (801193c <TIM_Base_SetConfig+0x114>)
 801183c:	4293      	cmp	r3, r2
 801183e:	d013      	beq.n	8011868 <TIM_Base_SetConfig+0x40>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011846:	d00f      	beq.n	8011868 <TIM_Base_SetConfig+0x40>
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	4a3d      	ldr	r2, [pc, #244]	; (8011940 <TIM_Base_SetConfig+0x118>)
 801184c:	4293      	cmp	r3, r2
 801184e:	d00b      	beq.n	8011868 <TIM_Base_SetConfig+0x40>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	4a3c      	ldr	r2, [pc, #240]	; (8011944 <TIM_Base_SetConfig+0x11c>)
 8011854:	4293      	cmp	r3, r2
 8011856:	d007      	beq.n	8011868 <TIM_Base_SetConfig+0x40>
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	4a3b      	ldr	r2, [pc, #236]	; (8011948 <TIM_Base_SetConfig+0x120>)
 801185c:	4293      	cmp	r3, r2
 801185e:	d003      	beq.n	8011868 <TIM_Base_SetConfig+0x40>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	4a3a      	ldr	r2, [pc, #232]	; (801194c <TIM_Base_SetConfig+0x124>)
 8011864:	4293      	cmp	r3, r2
 8011866:	d108      	bne.n	801187a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801186e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	685b      	ldr	r3, [r3, #4]
 8011874:	68fa      	ldr	r2, [r7, #12]
 8011876:	4313      	orrs	r3, r2
 8011878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	4a2f      	ldr	r2, [pc, #188]	; (801193c <TIM_Base_SetConfig+0x114>)
 801187e:	4293      	cmp	r3, r2
 8011880:	d01f      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011888:	d01b      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4a2c      	ldr	r2, [pc, #176]	; (8011940 <TIM_Base_SetConfig+0x118>)
 801188e:	4293      	cmp	r3, r2
 8011890:	d017      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	4a2b      	ldr	r2, [pc, #172]	; (8011944 <TIM_Base_SetConfig+0x11c>)
 8011896:	4293      	cmp	r3, r2
 8011898:	d013      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4a2a      	ldr	r2, [pc, #168]	; (8011948 <TIM_Base_SetConfig+0x120>)
 801189e:	4293      	cmp	r3, r2
 80118a0:	d00f      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	4a29      	ldr	r2, [pc, #164]	; (801194c <TIM_Base_SetConfig+0x124>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d00b      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	4a28      	ldr	r2, [pc, #160]	; (8011950 <TIM_Base_SetConfig+0x128>)
 80118ae:	4293      	cmp	r3, r2
 80118b0:	d007      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	4a27      	ldr	r2, [pc, #156]	; (8011954 <TIM_Base_SetConfig+0x12c>)
 80118b6:	4293      	cmp	r3, r2
 80118b8:	d003      	beq.n	80118c2 <TIM_Base_SetConfig+0x9a>
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	4a26      	ldr	r2, [pc, #152]	; (8011958 <TIM_Base_SetConfig+0x130>)
 80118be:	4293      	cmp	r3, r2
 80118c0:	d108      	bne.n	80118d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80118c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	68db      	ldr	r3, [r3, #12]
 80118ce:	68fa      	ldr	r2, [r7, #12]
 80118d0:	4313      	orrs	r3, r2
 80118d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	695b      	ldr	r3, [r3, #20]
 80118de:	4313      	orrs	r3, r2
 80118e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	689a      	ldr	r2, [r3, #8]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	681a      	ldr	r2, [r3, #0]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	4a10      	ldr	r2, [pc, #64]	; (801193c <TIM_Base_SetConfig+0x114>)
 80118fc:	4293      	cmp	r3, r2
 80118fe:	d00f      	beq.n	8011920 <TIM_Base_SetConfig+0xf8>
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	4a12      	ldr	r2, [pc, #72]	; (801194c <TIM_Base_SetConfig+0x124>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d00b      	beq.n	8011920 <TIM_Base_SetConfig+0xf8>
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	4a11      	ldr	r2, [pc, #68]	; (8011950 <TIM_Base_SetConfig+0x128>)
 801190c:	4293      	cmp	r3, r2
 801190e:	d007      	beq.n	8011920 <TIM_Base_SetConfig+0xf8>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	4a10      	ldr	r2, [pc, #64]	; (8011954 <TIM_Base_SetConfig+0x12c>)
 8011914:	4293      	cmp	r3, r2
 8011916:	d003      	beq.n	8011920 <TIM_Base_SetConfig+0xf8>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	4a0f      	ldr	r2, [pc, #60]	; (8011958 <TIM_Base_SetConfig+0x130>)
 801191c:	4293      	cmp	r3, r2
 801191e:	d103      	bne.n	8011928 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011920:	683b      	ldr	r3, [r7, #0]
 8011922:	691a      	ldr	r2, [r3, #16]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2201      	movs	r2, #1
 801192c:	615a      	str	r2, [r3, #20]
}
 801192e:	bf00      	nop
 8011930:	3714      	adds	r7, #20
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr
 801193a:	bf00      	nop
 801193c:	40010000 	.word	0x40010000
 8011940:	40000400 	.word	0x40000400
 8011944:	40000800 	.word	0x40000800
 8011948:	40000c00 	.word	0x40000c00
 801194c:	40010400 	.word	0x40010400
 8011950:	40014000 	.word	0x40014000
 8011954:	40014400 	.word	0x40014400
 8011958:	40014800 	.word	0x40014800

0801195c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801195c:	b480      	push	{r7}
 801195e:	b087      	sub	sp, #28
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
 8011964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a1b      	ldr	r3, [r3, #32]
 801196a:	f023 0201 	bic.w	r2, r3, #1
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6a1b      	ldr	r3, [r3, #32]
 8011976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	699b      	ldr	r3, [r3, #24]
 8011982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011984:	68fa      	ldr	r2, [r7, #12]
 8011986:	4b37      	ldr	r3, [pc, #220]	; (8011a64 <TIM_OC1_SetConfig+0x108>)
 8011988:	4013      	ands	r3, r2
 801198a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	f023 0303 	bic.w	r3, r3, #3
 8011992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011994:	683b      	ldr	r3, [r7, #0]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	68fa      	ldr	r2, [r7, #12]
 801199a:	4313      	orrs	r3, r2
 801199c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	f023 0302 	bic.w	r3, r3, #2
 80119a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80119a6:	683b      	ldr	r3, [r7, #0]
 80119a8:	689b      	ldr	r3, [r3, #8]
 80119aa:	697a      	ldr	r2, [r7, #20]
 80119ac:	4313      	orrs	r3, r2
 80119ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	4a2d      	ldr	r2, [pc, #180]	; (8011a68 <TIM_OC1_SetConfig+0x10c>)
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d00f      	beq.n	80119d8 <TIM_OC1_SetConfig+0x7c>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	4a2c      	ldr	r2, [pc, #176]	; (8011a6c <TIM_OC1_SetConfig+0x110>)
 80119bc:	4293      	cmp	r3, r2
 80119be:	d00b      	beq.n	80119d8 <TIM_OC1_SetConfig+0x7c>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	4a2b      	ldr	r2, [pc, #172]	; (8011a70 <TIM_OC1_SetConfig+0x114>)
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d007      	beq.n	80119d8 <TIM_OC1_SetConfig+0x7c>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	4a2a      	ldr	r2, [pc, #168]	; (8011a74 <TIM_OC1_SetConfig+0x118>)
 80119cc:	4293      	cmp	r3, r2
 80119ce:	d003      	beq.n	80119d8 <TIM_OC1_SetConfig+0x7c>
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	4a29      	ldr	r2, [pc, #164]	; (8011a78 <TIM_OC1_SetConfig+0x11c>)
 80119d4:	4293      	cmp	r3, r2
 80119d6:	d10c      	bne.n	80119f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	f023 0308 	bic.w	r3, r3, #8
 80119de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	697a      	ldr	r2, [r7, #20]
 80119e6:	4313      	orrs	r3, r2
 80119e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	f023 0304 	bic.w	r3, r3, #4
 80119f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4a1c      	ldr	r2, [pc, #112]	; (8011a68 <TIM_OC1_SetConfig+0x10c>)
 80119f6:	4293      	cmp	r3, r2
 80119f8:	d00f      	beq.n	8011a1a <TIM_OC1_SetConfig+0xbe>
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4a1b      	ldr	r2, [pc, #108]	; (8011a6c <TIM_OC1_SetConfig+0x110>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d00b      	beq.n	8011a1a <TIM_OC1_SetConfig+0xbe>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	4a1a      	ldr	r2, [pc, #104]	; (8011a70 <TIM_OC1_SetConfig+0x114>)
 8011a06:	4293      	cmp	r3, r2
 8011a08:	d007      	beq.n	8011a1a <TIM_OC1_SetConfig+0xbe>
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	4a19      	ldr	r2, [pc, #100]	; (8011a74 <TIM_OC1_SetConfig+0x118>)
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d003      	beq.n	8011a1a <TIM_OC1_SetConfig+0xbe>
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	4a18      	ldr	r2, [pc, #96]	; (8011a78 <TIM_OC1_SetConfig+0x11c>)
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d111      	bne.n	8011a3e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	695b      	ldr	r3, [r3, #20]
 8011a2e:	693a      	ldr	r2, [r7, #16]
 8011a30:	4313      	orrs	r3, r2
 8011a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011a34:	683b      	ldr	r3, [r7, #0]
 8011a36:	699b      	ldr	r3, [r3, #24]
 8011a38:	693a      	ldr	r2, [r7, #16]
 8011a3a:	4313      	orrs	r3, r2
 8011a3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	693a      	ldr	r2, [r7, #16]
 8011a42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	68fa      	ldr	r2, [r7, #12]
 8011a48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	685a      	ldr	r2, [r3, #4]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	697a      	ldr	r2, [r7, #20]
 8011a56:	621a      	str	r2, [r3, #32]
}
 8011a58:	bf00      	nop
 8011a5a:	371c      	adds	r7, #28
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr
 8011a64:	fffeff8f 	.word	0xfffeff8f
 8011a68:	40010000 	.word	0x40010000
 8011a6c:	40010400 	.word	0x40010400
 8011a70:	40014000 	.word	0x40014000
 8011a74:	40014400 	.word	0x40014400
 8011a78:	40014800 	.word	0x40014800

08011a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b087      	sub	sp, #28
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6a1b      	ldr	r3, [r3, #32]
 8011a8a:	f023 0210 	bic.w	r2, r3, #16
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6a1b      	ldr	r3, [r3, #32]
 8011a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	685b      	ldr	r3, [r3, #4]
 8011a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	699b      	ldr	r3, [r3, #24]
 8011aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011aa4:	68fa      	ldr	r2, [r7, #12]
 8011aa6:	4b34      	ldr	r3, [pc, #208]	; (8011b78 <TIM_OC2_SetConfig+0xfc>)
 8011aa8:	4013      	ands	r3, r2
 8011aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	021b      	lsls	r3, r3, #8
 8011aba:	68fa      	ldr	r2, [r7, #12]
 8011abc:	4313      	orrs	r3, r2
 8011abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011ac0:	697b      	ldr	r3, [r7, #20]
 8011ac2:	f023 0320 	bic.w	r3, r3, #32
 8011ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	011b      	lsls	r3, r3, #4
 8011ace:	697a      	ldr	r2, [r7, #20]
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	4a29      	ldr	r2, [pc, #164]	; (8011b7c <TIM_OC2_SetConfig+0x100>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d003      	beq.n	8011ae4 <TIM_OC2_SetConfig+0x68>
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4a28      	ldr	r2, [pc, #160]	; (8011b80 <TIM_OC2_SetConfig+0x104>)
 8011ae0:	4293      	cmp	r3, r2
 8011ae2:	d10d      	bne.n	8011b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	68db      	ldr	r3, [r3, #12]
 8011af0:	011b      	lsls	r3, r3, #4
 8011af2:	697a      	ldr	r2, [r7, #20]
 8011af4:	4313      	orrs	r3, r2
 8011af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	4a1e      	ldr	r2, [pc, #120]	; (8011b7c <TIM_OC2_SetConfig+0x100>)
 8011b04:	4293      	cmp	r3, r2
 8011b06:	d00f      	beq.n	8011b28 <TIM_OC2_SetConfig+0xac>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	4a1d      	ldr	r2, [pc, #116]	; (8011b80 <TIM_OC2_SetConfig+0x104>)
 8011b0c:	4293      	cmp	r3, r2
 8011b0e:	d00b      	beq.n	8011b28 <TIM_OC2_SetConfig+0xac>
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4a1c      	ldr	r2, [pc, #112]	; (8011b84 <TIM_OC2_SetConfig+0x108>)
 8011b14:	4293      	cmp	r3, r2
 8011b16:	d007      	beq.n	8011b28 <TIM_OC2_SetConfig+0xac>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	4a1b      	ldr	r2, [pc, #108]	; (8011b88 <TIM_OC2_SetConfig+0x10c>)
 8011b1c:	4293      	cmp	r3, r2
 8011b1e:	d003      	beq.n	8011b28 <TIM_OC2_SetConfig+0xac>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	4a1a      	ldr	r2, [pc, #104]	; (8011b8c <TIM_OC2_SetConfig+0x110>)
 8011b24:	4293      	cmp	r3, r2
 8011b26:	d113      	bne.n	8011b50 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	695b      	ldr	r3, [r3, #20]
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	693a      	ldr	r2, [r7, #16]
 8011b40:	4313      	orrs	r3, r2
 8011b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011b44:	683b      	ldr	r3, [r7, #0]
 8011b46:	699b      	ldr	r3, [r3, #24]
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	693a      	ldr	r2, [r7, #16]
 8011b4c:	4313      	orrs	r3, r2
 8011b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	693a      	ldr	r2, [r7, #16]
 8011b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	68fa      	ldr	r2, [r7, #12]
 8011b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	685a      	ldr	r2, [r3, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	697a      	ldr	r2, [r7, #20]
 8011b68:	621a      	str	r2, [r3, #32]
}
 8011b6a:	bf00      	nop
 8011b6c:	371c      	adds	r7, #28
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	feff8fff 	.word	0xfeff8fff
 8011b7c:	40010000 	.word	0x40010000
 8011b80:	40010400 	.word	0x40010400
 8011b84:	40014000 	.word	0x40014000
 8011b88:	40014400 	.word	0x40014400
 8011b8c:	40014800 	.word	0x40014800

08011b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011b90:	b480      	push	{r7}
 8011b92:	b087      	sub	sp, #28
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a1b      	ldr	r3, [r3, #32]
 8011b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a1b      	ldr	r3, [r3, #32]
 8011baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	69db      	ldr	r3, [r3, #28]
 8011bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8011bb8:	68fa      	ldr	r2, [r7, #12]
 8011bba:	4b33      	ldr	r3, [pc, #204]	; (8011c88 <TIM_OC3_SetConfig+0xf8>)
 8011bbc:	4013      	ands	r3, r2
 8011bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	f023 0303 	bic.w	r3, r3, #3
 8011bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011bc8:	683b      	ldr	r3, [r7, #0]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	68fa      	ldr	r2, [r7, #12]
 8011bce:	4313      	orrs	r3, r2
 8011bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	689b      	ldr	r3, [r3, #8]
 8011bde:	021b      	lsls	r3, r3, #8
 8011be0:	697a      	ldr	r2, [r7, #20]
 8011be2:	4313      	orrs	r3, r2
 8011be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	4a28      	ldr	r2, [pc, #160]	; (8011c8c <TIM_OC3_SetConfig+0xfc>)
 8011bea:	4293      	cmp	r3, r2
 8011bec:	d003      	beq.n	8011bf6 <TIM_OC3_SetConfig+0x66>
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	4a27      	ldr	r2, [pc, #156]	; (8011c90 <TIM_OC3_SetConfig+0x100>)
 8011bf2:	4293      	cmp	r3, r2
 8011bf4:	d10d      	bne.n	8011c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	021b      	lsls	r3, r3, #8
 8011c04:	697a      	ldr	r2, [r7, #20]
 8011c06:	4313      	orrs	r3, r2
 8011c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011c0a:	697b      	ldr	r3, [r7, #20]
 8011c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	4a1d      	ldr	r2, [pc, #116]	; (8011c8c <TIM_OC3_SetConfig+0xfc>)
 8011c16:	4293      	cmp	r3, r2
 8011c18:	d00f      	beq.n	8011c3a <TIM_OC3_SetConfig+0xaa>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	4a1c      	ldr	r2, [pc, #112]	; (8011c90 <TIM_OC3_SetConfig+0x100>)
 8011c1e:	4293      	cmp	r3, r2
 8011c20:	d00b      	beq.n	8011c3a <TIM_OC3_SetConfig+0xaa>
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	4a1b      	ldr	r2, [pc, #108]	; (8011c94 <TIM_OC3_SetConfig+0x104>)
 8011c26:	4293      	cmp	r3, r2
 8011c28:	d007      	beq.n	8011c3a <TIM_OC3_SetConfig+0xaa>
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	4a1a      	ldr	r2, [pc, #104]	; (8011c98 <TIM_OC3_SetConfig+0x108>)
 8011c2e:	4293      	cmp	r3, r2
 8011c30:	d003      	beq.n	8011c3a <TIM_OC3_SetConfig+0xaa>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	4a19      	ldr	r2, [pc, #100]	; (8011c9c <TIM_OC3_SetConfig+0x10c>)
 8011c36:	4293      	cmp	r3, r2
 8011c38:	d113      	bne.n	8011c62 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	695b      	ldr	r3, [r3, #20]
 8011c4e:	011b      	lsls	r3, r3, #4
 8011c50:	693a      	ldr	r2, [r7, #16]
 8011c52:	4313      	orrs	r3, r2
 8011c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	699b      	ldr	r3, [r3, #24]
 8011c5a:	011b      	lsls	r3, r3, #4
 8011c5c:	693a      	ldr	r2, [r7, #16]
 8011c5e:	4313      	orrs	r3, r2
 8011c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	693a      	ldr	r2, [r7, #16]
 8011c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	68fa      	ldr	r2, [r7, #12]
 8011c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	685a      	ldr	r2, [r3, #4]
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	697a      	ldr	r2, [r7, #20]
 8011c7a:	621a      	str	r2, [r3, #32]
}
 8011c7c:	bf00      	nop
 8011c7e:	371c      	adds	r7, #28
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr
 8011c88:	fffeff8f 	.word	0xfffeff8f
 8011c8c:	40010000 	.word	0x40010000
 8011c90:	40010400 	.word	0x40010400
 8011c94:	40014000 	.word	0x40014000
 8011c98:	40014400 	.word	0x40014400
 8011c9c:	40014800 	.word	0x40014800

08011ca0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b087      	sub	sp, #28
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a1b      	ldr	r3, [r3, #32]
 8011cae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	6a1b      	ldr	r3, [r3, #32]
 8011cba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	69db      	ldr	r3, [r3, #28]
 8011cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8011cc8:	68fa      	ldr	r2, [r7, #12]
 8011cca:	4b24      	ldr	r3, [pc, #144]	; (8011d5c <TIM_OC4_SetConfig+0xbc>)
 8011ccc:	4013      	ands	r3, r2
 8011cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	021b      	lsls	r3, r3, #8
 8011cde:	68fa      	ldr	r2, [r7, #12]
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011cea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	031b      	lsls	r3, r3, #12
 8011cf2:	693a      	ldr	r2, [r7, #16]
 8011cf4:	4313      	orrs	r3, r2
 8011cf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4a19      	ldr	r2, [pc, #100]	; (8011d60 <TIM_OC4_SetConfig+0xc0>)
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d00f      	beq.n	8011d20 <TIM_OC4_SetConfig+0x80>
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4a18      	ldr	r2, [pc, #96]	; (8011d64 <TIM_OC4_SetConfig+0xc4>)
 8011d04:	4293      	cmp	r3, r2
 8011d06:	d00b      	beq.n	8011d20 <TIM_OC4_SetConfig+0x80>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	4a17      	ldr	r2, [pc, #92]	; (8011d68 <TIM_OC4_SetConfig+0xc8>)
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d007      	beq.n	8011d20 <TIM_OC4_SetConfig+0x80>
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	4a16      	ldr	r2, [pc, #88]	; (8011d6c <TIM_OC4_SetConfig+0xcc>)
 8011d14:	4293      	cmp	r3, r2
 8011d16:	d003      	beq.n	8011d20 <TIM_OC4_SetConfig+0x80>
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	4a15      	ldr	r2, [pc, #84]	; (8011d70 <TIM_OC4_SetConfig+0xd0>)
 8011d1c:	4293      	cmp	r3, r2
 8011d1e:	d109      	bne.n	8011d34 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	695b      	ldr	r3, [r3, #20]
 8011d2c:	019b      	lsls	r3, r3, #6
 8011d2e:	697a      	ldr	r2, [r7, #20]
 8011d30:	4313      	orrs	r3, r2
 8011d32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	697a      	ldr	r2, [r7, #20]
 8011d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	68fa      	ldr	r2, [r7, #12]
 8011d3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	685a      	ldr	r2, [r3, #4]
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	693a      	ldr	r2, [r7, #16]
 8011d4c:	621a      	str	r2, [r3, #32]
}
 8011d4e:	bf00      	nop
 8011d50:	371c      	adds	r7, #28
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	feff8fff 	.word	0xfeff8fff
 8011d60:	40010000 	.word	0x40010000
 8011d64:	40010400 	.word	0x40010400
 8011d68:	40014000 	.word	0x40014000
 8011d6c:	40014400 	.word	0x40014400
 8011d70:	40014800 	.word	0x40014800

08011d74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b087      	sub	sp, #28
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6a1b      	ldr	r3, [r3, #32]
 8011d82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6a1b      	ldr	r3, [r3, #32]
 8011d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011d9c:	68fa      	ldr	r2, [r7, #12]
 8011d9e:	4b21      	ldr	r3, [pc, #132]	; (8011e24 <TIM_OC5_SetConfig+0xb0>)
 8011da0:	4013      	ands	r3, r2
 8011da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	4313      	orrs	r3, r2
 8011dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	689b      	ldr	r3, [r3, #8]
 8011dba:	041b      	lsls	r3, r3, #16
 8011dbc:	693a      	ldr	r2, [r7, #16]
 8011dbe:	4313      	orrs	r3, r2
 8011dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	4a18      	ldr	r2, [pc, #96]	; (8011e28 <TIM_OC5_SetConfig+0xb4>)
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	d00f      	beq.n	8011dea <TIM_OC5_SetConfig+0x76>
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	4a17      	ldr	r2, [pc, #92]	; (8011e2c <TIM_OC5_SetConfig+0xb8>)
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d00b      	beq.n	8011dea <TIM_OC5_SetConfig+0x76>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	4a16      	ldr	r2, [pc, #88]	; (8011e30 <TIM_OC5_SetConfig+0xbc>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d007      	beq.n	8011dea <TIM_OC5_SetConfig+0x76>
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	4a15      	ldr	r2, [pc, #84]	; (8011e34 <TIM_OC5_SetConfig+0xc0>)
 8011dde:	4293      	cmp	r3, r2
 8011de0:	d003      	beq.n	8011dea <TIM_OC5_SetConfig+0x76>
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	4a14      	ldr	r2, [pc, #80]	; (8011e38 <TIM_OC5_SetConfig+0xc4>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d109      	bne.n	8011dfe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011dea:	697b      	ldr	r3, [r7, #20]
 8011dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011df0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	695b      	ldr	r3, [r3, #20]
 8011df6:	021b      	lsls	r3, r3, #8
 8011df8:	697a      	ldr	r2, [r7, #20]
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	697a      	ldr	r2, [r7, #20]
 8011e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	68fa      	ldr	r2, [r7, #12]
 8011e08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011e0a:	683b      	ldr	r3, [r7, #0]
 8011e0c:	685a      	ldr	r2, [r3, #4]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	693a      	ldr	r2, [r7, #16]
 8011e16:	621a      	str	r2, [r3, #32]
}
 8011e18:	bf00      	nop
 8011e1a:	371c      	adds	r7, #28
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr
 8011e24:	fffeff8f 	.word	0xfffeff8f
 8011e28:	40010000 	.word	0x40010000
 8011e2c:	40010400 	.word	0x40010400
 8011e30:	40014000 	.word	0x40014000
 8011e34:	40014400 	.word	0x40014400
 8011e38:	40014800 	.word	0x40014800

08011e3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b087      	sub	sp, #28
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	6a1b      	ldr	r3, [r3, #32]
 8011e4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6a1b      	ldr	r3, [r3, #32]
 8011e56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011e64:	68fa      	ldr	r2, [r7, #12]
 8011e66:	4b22      	ldr	r3, [pc, #136]	; (8011ef0 <TIM_OC6_SetConfig+0xb4>)
 8011e68:	4013      	ands	r3, r2
 8011e6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	021b      	lsls	r3, r3, #8
 8011e72:	68fa      	ldr	r2, [r7, #12]
 8011e74:	4313      	orrs	r3, r2
 8011e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011e7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	051b      	lsls	r3, r3, #20
 8011e86:	693a      	ldr	r2, [r7, #16]
 8011e88:	4313      	orrs	r3, r2
 8011e8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	4a19      	ldr	r2, [pc, #100]	; (8011ef4 <TIM_OC6_SetConfig+0xb8>)
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d00f      	beq.n	8011eb4 <TIM_OC6_SetConfig+0x78>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	4a18      	ldr	r2, [pc, #96]	; (8011ef8 <TIM_OC6_SetConfig+0xbc>)
 8011e98:	4293      	cmp	r3, r2
 8011e9a:	d00b      	beq.n	8011eb4 <TIM_OC6_SetConfig+0x78>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a17      	ldr	r2, [pc, #92]	; (8011efc <TIM_OC6_SetConfig+0xc0>)
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	d007      	beq.n	8011eb4 <TIM_OC6_SetConfig+0x78>
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	4a16      	ldr	r2, [pc, #88]	; (8011f00 <TIM_OC6_SetConfig+0xc4>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d003      	beq.n	8011eb4 <TIM_OC6_SetConfig+0x78>
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	4a15      	ldr	r2, [pc, #84]	; (8011f04 <TIM_OC6_SetConfig+0xc8>)
 8011eb0:	4293      	cmp	r3, r2
 8011eb2:	d109      	bne.n	8011ec8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011eb4:	697b      	ldr	r3, [r7, #20]
 8011eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	695b      	ldr	r3, [r3, #20]
 8011ec0:	029b      	lsls	r3, r3, #10
 8011ec2:	697a      	ldr	r2, [r7, #20]
 8011ec4:	4313      	orrs	r3, r2
 8011ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	697a      	ldr	r2, [r7, #20]
 8011ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	68fa      	ldr	r2, [r7, #12]
 8011ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	685a      	ldr	r2, [r3, #4]
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	693a      	ldr	r2, [r7, #16]
 8011ee0:	621a      	str	r2, [r3, #32]
}
 8011ee2:	bf00      	nop
 8011ee4:	371c      	adds	r7, #28
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	feff8fff 	.word	0xfeff8fff
 8011ef4:	40010000 	.word	0x40010000
 8011ef8:	40010400 	.word	0x40010400
 8011efc:	40014000 	.word	0x40014000
 8011f00:	40014400 	.word	0x40014400
 8011f04:	40014800 	.word	0x40014800

08011f08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b086      	sub	sp, #24
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	689b      	ldr	r3, [r3, #8]
 8011f1c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011f1e:	693a      	ldr	r2, [r7, #16]
 8011f20:	4b65      	ldr	r3, [pc, #404]	; (80120b8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8011f22:	4013      	ands	r3, r2
 8011f24:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	685b      	ldr	r3, [r3, #4]
 8011f2a:	693a      	ldr	r2, [r7, #16]
 8011f2c:	4313      	orrs	r3, r2
 8011f2e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8011f30:	693a      	ldr	r2, [r7, #16]
 8011f32:	4b62      	ldr	r3, [pc, #392]	; (80120bc <TIM_SlaveTimer_SetConfig+0x1b4>)
 8011f34:	4013      	ands	r3, r2
 8011f36:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	693a      	ldr	r2, [r7, #16]
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	693a      	ldr	r2, [r7, #16]
 8011f48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	685b      	ldr	r3, [r3, #4]
 8011f4e:	4a5c      	ldr	r2, [pc, #368]	; (80120c0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011f50:	4293      	cmp	r3, r2
 8011f52:	f000 80ab 	beq.w	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f56:	4a5a      	ldr	r2, [pc, #360]	; (80120c0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8011f58:	4293      	cmp	r3, r2
 8011f5a:	f200 80a4 	bhi.w	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f62:	f000 80a3 	beq.w	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011f6a:	f200 809c 	bhi.w	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f6e:	4a55      	ldr	r2, [pc, #340]	; (80120c4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011f70:	4293      	cmp	r3, r2
 8011f72:	f000 809b 	beq.w	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f76:	4a53      	ldr	r2, [pc, #332]	; (80120c4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	f200 8094 	bhi.w	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f7e:	4a52      	ldr	r2, [pc, #328]	; (80120c8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011f80:	4293      	cmp	r3, r2
 8011f82:	f000 8093 	beq.w	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f86:	4a50      	ldr	r2, [pc, #320]	; (80120c8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	f200 808c 	bhi.w	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f8e:	4a4f      	ldr	r2, [pc, #316]	; (80120cc <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011f90:	4293      	cmp	r3, r2
 8011f92:	f000 808b 	beq.w	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011f96:	4a4d      	ldr	r2, [pc, #308]	; (80120cc <TIM_SlaveTimer_SetConfig+0x1c4>)
 8011f98:	4293      	cmp	r3, r2
 8011f9a:	f200 8084 	bhi.w	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011f9e:	4a4c      	ldr	r2, [pc, #304]	; (80120d0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	f000 8083 	beq.w	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fa6:	4a4a      	ldr	r2, [pc, #296]	; (80120d0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8011fa8:	4293      	cmp	r3, r2
 8011faa:	d87c      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fac:	4a49      	ldr	r2, [pc, #292]	; (80120d4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011fae:	4293      	cmp	r3, r2
 8011fb0:	d07c      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fb2:	4a48      	ldr	r2, [pc, #288]	; (80120d4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8011fb4:	4293      	cmp	r3, r2
 8011fb6:	d876      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fb8:	4a47      	ldr	r2, [pc, #284]	; (80120d8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d076      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fbe:	4a46      	ldr	r2, [pc, #280]	; (80120d8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8011fc0:	4293      	cmp	r3, r2
 8011fc2:	d870      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011fc8:	d070      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fca:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8011fce:	d86a      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fd4:	d06a      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8011fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fda:	d864      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fdc:	2b70      	cmp	r3, #112	; 0x70
 8011fde:	d01a      	beq.n	8012016 <TIM_SlaveTimer_SetConfig+0x10e>
 8011fe0:	2b70      	cmp	r3, #112	; 0x70
 8011fe2:	d860      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fe4:	2b60      	cmp	r3, #96	; 0x60
 8011fe6:	d054      	beq.n	8012092 <TIM_SlaveTimer_SetConfig+0x18a>
 8011fe8:	2b60      	cmp	r3, #96	; 0x60
 8011fea:	d85c      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011fec:	2b50      	cmp	r3, #80	; 0x50
 8011fee:	d046      	beq.n	801207e <TIM_SlaveTimer_SetConfig+0x176>
 8011ff0:	2b50      	cmp	r3, #80	; 0x50
 8011ff2:	d858      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011ff4:	2b40      	cmp	r3, #64	; 0x40
 8011ff6:	d019      	beq.n	801202c <TIM_SlaveTimer_SetConfig+0x124>
 8011ff8:	2b40      	cmp	r3, #64	; 0x40
 8011ffa:	d854      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8011ffc:	2b30      	cmp	r3, #48	; 0x30
 8011ffe:	d055      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8012000:	2b30      	cmp	r3, #48	; 0x30
 8012002:	d850      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 8012004:	2b20      	cmp	r3, #32
 8012006:	d051      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8012008:	2b20      	cmp	r3, #32
 801200a:	d84c      	bhi.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
 801200c:	2b00      	cmp	r3, #0
 801200e:	d04d      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8012010:	2b10      	cmp	r3, #16
 8012012:	d04b      	beq.n	80120ac <TIM_SlaveTimer_SetConfig+0x1a4>
 8012014:	e047      	b.n	80120a6 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8012022:	683b      	ldr	r3, [r7, #0]
 8012024:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8012026:	f000 fa01 	bl	801242c <TIM_ETR_SetConfig>
      break;
 801202a:	e040      	b.n	80120ae <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	2b05      	cmp	r3, #5
 8012032:	d101      	bne.n	8012038 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8012034:	2301      	movs	r3, #1
 8012036:	e03b      	b.n	80120b0 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	6a1b      	ldr	r3, [r3, #32]
 801203e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	6a1a      	ldr	r2, [r3, #32]
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f022 0201 	bic.w	r2, r2, #1
 801204e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	699b      	ldr	r3, [r3, #24]
 8012056:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801205e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	691b      	ldr	r3, [r3, #16]
 8012064:	011b      	lsls	r3, r3, #4
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	4313      	orrs	r3, r2
 801206a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	68ba      	ldr	r2, [r7, #8]
 8012072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	621a      	str	r2, [r3, #32]
      break;
 801207c:	e017      	b.n	80120ae <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8012086:	683b      	ldr	r3, [r7, #0]
 8012088:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801208a:	461a      	mov	r2, r3
 801208c:	f000 f89a 	bl	80121c4 <TIM_TI1_ConfigInputStage>
      break;
 8012090:	e00d      	b.n	80120ae <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801209e:	461a      	mov	r2, r3
 80120a0:	f000 f8fc 	bl	801229c <TIM_TI2_ConfigInputStage>
      break;
 80120a4:	e003      	b.n	80120ae <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80120a6:	2301      	movs	r3, #1
 80120a8:	75fb      	strb	r3, [r7, #23]
      break;
 80120aa:	e000      	b.n	80120ae <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80120ac:	bf00      	nop
  }

  return status;
 80120ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3718      	adds	r7, #24
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	ffcfff8f 	.word	0xffcfff8f
 80120bc:	fffefff8 	.word	0xfffefff8
 80120c0:	00200010 	.word	0x00200010
 80120c4:	00100070 	.word	0x00100070
 80120c8:	00100060 	.word	0x00100060
 80120cc:	00100050 	.word	0x00100050
 80120d0:	00100040 	.word	0x00100040
 80120d4:	00100030 	.word	0x00100030
 80120d8:	00100020 	.word	0x00100020

080120dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80120dc:	b480      	push	{r7}
 80120de:	b087      	sub	sp, #28
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
 80120e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	6a1b      	ldr	r3, [r3, #32]
 80120ee:	f023 0201 	bic.w	r2, r3, #1
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	699b      	ldr	r3, [r3, #24]
 80120fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6a1b      	ldr	r3, [r3, #32]
 8012100:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	4a28      	ldr	r2, [pc, #160]	; (80121a8 <TIM_TI1_SetConfig+0xcc>)
 8012106:	4293      	cmp	r3, r2
 8012108:	d01b      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012110:	d017      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	4a25      	ldr	r2, [pc, #148]	; (80121ac <TIM_TI1_SetConfig+0xd0>)
 8012116:	4293      	cmp	r3, r2
 8012118:	d013      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	4a24      	ldr	r2, [pc, #144]	; (80121b0 <TIM_TI1_SetConfig+0xd4>)
 801211e:	4293      	cmp	r3, r2
 8012120:	d00f      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	4a23      	ldr	r2, [pc, #140]	; (80121b4 <TIM_TI1_SetConfig+0xd8>)
 8012126:	4293      	cmp	r3, r2
 8012128:	d00b      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	4a22      	ldr	r2, [pc, #136]	; (80121b8 <TIM_TI1_SetConfig+0xdc>)
 801212e:	4293      	cmp	r3, r2
 8012130:	d007      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	4a21      	ldr	r2, [pc, #132]	; (80121bc <TIM_TI1_SetConfig+0xe0>)
 8012136:	4293      	cmp	r3, r2
 8012138:	d003      	beq.n	8012142 <TIM_TI1_SetConfig+0x66>
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	4a20      	ldr	r2, [pc, #128]	; (80121c0 <TIM_TI1_SetConfig+0xe4>)
 801213e:	4293      	cmp	r3, r2
 8012140:	d101      	bne.n	8012146 <TIM_TI1_SetConfig+0x6a>
 8012142:	2301      	movs	r3, #1
 8012144:	e000      	b.n	8012148 <TIM_TI1_SetConfig+0x6c>
 8012146:	2300      	movs	r3, #0
 8012148:	2b00      	cmp	r3, #0
 801214a:	d008      	beq.n	801215e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801214c:	697b      	ldr	r3, [r7, #20]
 801214e:	f023 0303 	bic.w	r3, r3, #3
 8012152:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8012154:	697a      	ldr	r2, [r7, #20]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	4313      	orrs	r3, r2
 801215a:	617b      	str	r3, [r7, #20]
 801215c:	e003      	b.n	8012166 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	f043 0301 	orr.w	r3, r3, #1
 8012164:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801216c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	011b      	lsls	r3, r3, #4
 8012172:	b2db      	uxtb	r3, r3
 8012174:	697a      	ldr	r2, [r7, #20]
 8012176:	4313      	orrs	r3, r2
 8012178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	f023 030a 	bic.w	r3, r3, #10
 8012180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	f003 030a 	and.w	r3, r3, #10
 8012188:	693a      	ldr	r2, [r7, #16]
 801218a:	4313      	orrs	r3, r2
 801218c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	697a      	ldr	r2, [r7, #20]
 8012192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	693a      	ldr	r2, [r7, #16]
 8012198:	621a      	str	r2, [r3, #32]
}
 801219a:	bf00      	nop
 801219c:	371c      	adds	r7, #28
 801219e:	46bd      	mov	sp, r7
 80121a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121a4:	4770      	bx	lr
 80121a6:	bf00      	nop
 80121a8:	40010000 	.word	0x40010000
 80121ac:	40000400 	.word	0x40000400
 80121b0:	40000800 	.word	0x40000800
 80121b4:	40000c00 	.word	0x40000c00
 80121b8:	40010400 	.word	0x40010400
 80121bc:	40001800 	.word	0x40001800
 80121c0:	40014000 	.word	0x40014000

080121c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80121c4:	b480      	push	{r7}
 80121c6:	b087      	sub	sp, #28
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	6a1b      	ldr	r3, [r3, #32]
 80121d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6a1b      	ldr	r3, [r3, #32]
 80121da:	f023 0201 	bic.w	r2, r3, #1
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	699b      	ldr	r3, [r3, #24]
 80121e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80121ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	011b      	lsls	r3, r3, #4
 80121f4:	693a      	ldr	r2, [r7, #16]
 80121f6:	4313      	orrs	r3, r2
 80121f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	f023 030a 	bic.w	r3, r3, #10
 8012200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012202:	697a      	ldr	r2, [r7, #20]
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	4313      	orrs	r3, r2
 8012208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	693a      	ldr	r2, [r7, #16]
 801220e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	697a      	ldr	r2, [r7, #20]
 8012214:	621a      	str	r2, [r3, #32]
}
 8012216:	bf00      	nop
 8012218:	371c      	adds	r7, #28
 801221a:	46bd      	mov	sp, r7
 801221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012220:	4770      	bx	lr

08012222 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012222:	b480      	push	{r7}
 8012224:	b087      	sub	sp, #28
 8012226:	af00      	add	r7, sp, #0
 8012228:	60f8      	str	r0, [r7, #12]
 801222a:	60b9      	str	r1, [r7, #8]
 801222c:	607a      	str	r2, [r7, #4]
 801222e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	6a1b      	ldr	r3, [r3, #32]
 8012234:	f023 0210 	bic.w	r2, r3, #16
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	699b      	ldr	r3, [r3, #24]
 8012240:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	6a1b      	ldr	r3, [r3, #32]
 8012246:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801224e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	021b      	lsls	r3, r3, #8
 8012254:	697a      	ldr	r2, [r7, #20]
 8012256:	4313      	orrs	r3, r2
 8012258:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	031b      	lsls	r3, r3, #12
 8012266:	b29b      	uxth	r3, r3
 8012268:	697a      	ldr	r2, [r7, #20]
 801226a:	4313      	orrs	r3, r2
 801226c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012274:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	011b      	lsls	r3, r3, #4
 801227a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801227e:	693a      	ldr	r2, [r7, #16]
 8012280:	4313      	orrs	r3, r2
 8012282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	697a      	ldr	r2, [r7, #20]
 8012288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	693a      	ldr	r2, [r7, #16]
 801228e:	621a      	str	r2, [r3, #32]
}
 8012290:	bf00      	nop
 8012292:	371c      	adds	r7, #28
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr

0801229c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801229c:	b480      	push	{r7}
 801229e:	b087      	sub	sp, #28
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	6a1b      	ldr	r3, [r3, #32]
 80122ac:	f023 0210 	bic.w	r2, r3, #16
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	699b      	ldr	r3, [r3, #24]
 80122b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6a1b      	ldr	r3, [r3, #32]
 80122be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80122c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	031b      	lsls	r3, r3, #12
 80122cc:	697a      	ldr	r2, [r7, #20]
 80122ce:	4313      	orrs	r3, r2
 80122d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80122d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	011b      	lsls	r3, r3, #4
 80122de:	693a      	ldr	r2, [r7, #16]
 80122e0:	4313      	orrs	r3, r2
 80122e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	697a      	ldr	r2, [r7, #20]
 80122e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	693a      	ldr	r2, [r7, #16]
 80122ee:	621a      	str	r2, [r3, #32]
}
 80122f0:	bf00      	nop
 80122f2:	371c      	adds	r7, #28
 80122f4:	46bd      	mov	sp, r7
 80122f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fa:	4770      	bx	lr

080122fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b087      	sub	sp, #28
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	60b9      	str	r1, [r7, #8]
 8012306:	607a      	str	r2, [r7, #4]
 8012308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	6a1b      	ldr	r3, [r3, #32]
 801230e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	69db      	ldr	r3, [r3, #28]
 801231a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	6a1b      	ldr	r3, [r3, #32]
 8012320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	f023 0303 	bic.w	r3, r3, #3
 8012328:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 801232a:	697a      	ldr	r2, [r7, #20]
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	4313      	orrs	r3, r2
 8012330:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012338:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 801233a:	683b      	ldr	r3, [r7, #0]
 801233c:	011b      	lsls	r3, r3, #4
 801233e:	b2db      	uxtb	r3, r3
 8012340:	697a      	ldr	r2, [r7, #20]
 8012342:	4313      	orrs	r3, r2
 8012344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801234c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	021b      	lsls	r3, r3, #8
 8012352:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8012356:	693a      	ldr	r2, [r7, #16]
 8012358:	4313      	orrs	r3, r2
 801235a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	697a      	ldr	r2, [r7, #20]
 8012360:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	693a      	ldr	r2, [r7, #16]
 8012366:	621a      	str	r2, [r3, #32]
}
 8012368:	bf00      	nop
 801236a:	371c      	adds	r7, #28
 801236c:	46bd      	mov	sp, r7
 801236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012372:	4770      	bx	lr

08012374 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8012374:	b480      	push	{r7}
 8012376:	b087      	sub	sp, #28
 8012378:	af00      	add	r7, sp, #0
 801237a:	60f8      	str	r0, [r7, #12]
 801237c:	60b9      	str	r1, [r7, #8]
 801237e:	607a      	str	r2, [r7, #4]
 8012380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	6a1b      	ldr	r3, [r3, #32]
 8012386:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	69db      	ldr	r3, [r3, #28]
 8012392:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	6a1b      	ldr	r3, [r3, #32]
 8012398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	021b      	lsls	r3, r3, #8
 80123a6:	697a      	ldr	r2, [r7, #20]
 80123a8:	4313      	orrs	r3, r2
 80123aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80123b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	031b      	lsls	r3, r3, #12
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	697a      	ldr	r2, [r7, #20]
 80123bc:	4313      	orrs	r3, r2
 80123be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80123c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	031b      	lsls	r3, r3, #12
 80123cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80123d0:	693a      	ldr	r2, [r7, #16]
 80123d2:	4313      	orrs	r3, r2
 80123d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	697a      	ldr	r2, [r7, #20]
 80123da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	693a      	ldr	r2, [r7, #16]
 80123e0:	621a      	str	r2, [r3, #32]
}
 80123e2:	bf00      	nop
 80123e4:	371c      	adds	r7, #28
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr
	...

080123f0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80123f0:	b480      	push	{r7}
 80123f2:	b085      	sub	sp, #20
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
 80123f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	689b      	ldr	r3, [r3, #8]
 80123fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012400:	68fa      	ldr	r2, [r7, #12]
 8012402:	4b09      	ldr	r3, [pc, #36]	; (8012428 <TIM_ITRx_SetConfig+0x38>)
 8012404:	4013      	ands	r3, r2
 8012406:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012408:	683a      	ldr	r2, [r7, #0]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	4313      	orrs	r3, r2
 801240e:	f043 0307 	orr.w	r3, r3, #7
 8012412:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	609a      	str	r2, [r3, #8]
}
 801241a:	bf00      	nop
 801241c:	3714      	adds	r7, #20
 801241e:	46bd      	mov	sp, r7
 8012420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012424:	4770      	bx	lr
 8012426:	bf00      	nop
 8012428:	ffcfff8f 	.word	0xffcfff8f

0801242c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801242c:	b480      	push	{r7}
 801242e:	b087      	sub	sp, #28
 8012430:	af00      	add	r7, sp, #0
 8012432:	60f8      	str	r0, [r7, #12]
 8012434:	60b9      	str	r1, [r7, #8]
 8012436:	607a      	str	r2, [r7, #4]
 8012438:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012446:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	021a      	lsls	r2, r3, #8
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	431a      	orrs	r2, r3
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	4313      	orrs	r3, r2
 8012454:	697a      	ldr	r2, [r7, #20]
 8012456:	4313      	orrs	r3, r2
 8012458:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	697a      	ldr	r2, [r7, #20]
 801245e:	609a      	str	r2, [r3, #8]
}
 8012460:	bf00      	nop
 8012462:	371c      	adds	r7, #28
 8012464:	46bd      	mov	sp, r7
 8012466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246a:	4770      	bx	lr

0801246c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801246c:	b480      	push	{r7}
 801246e:	b087      	sub	sp, #28
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8012478:	68bb      	ldr	r3, [r7, #8]
 801247a:	f003 031f 	and.w	r3, r3, #31
 801247e:	2201      	movs	r2, #1
 8012480:	fa02 f303 	lsl.w	r3, r2, r3
 8012484:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	6a1a      	ldr	r2, [r3, #32]
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	43db      	mvns	r3, r3
 801248e:	401a      	ands	r2, r3
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	6a1a      	ldr	r2, [r3, #32]
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	f003 031f 	and.w	r3, r3, #31
 801249e:	6879      	ldr	r1, [r7, #4]
 80124a0:	fa01 f303 	lsl.w	r3, r1, r3
 80124a4:	431a      	orrs	r2, r3
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	621a      	str	r2, [r3, #32]
}
 80124aa:	bf00      	nop
 80124ac:	371c      	adds	r7, #28
 80124ae:	46bd      	mov	sp, r7
 80124b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b4:	4770      	bx	lr
	...

080124b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80124b8:	b480      	push	{r7}
 80124ba:	b085      	sub	sp, #20
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124c8:	2b01      	cmp	r3, #1
 80124ca:	d101      	bne.n	80124d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80124cc:	2302      	movs	r3, #2
 80124ce:	e06d      	b.n	80125ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	2201      	movs	r2, #1
 80124d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2202      	movs	r2, #2
 80124dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	689b      	ldr	r3, [r3, #8]
 80124ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4a30      	ldr	r2, [pc, #192]	; (80125b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d004      	beq.n	8012504 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	4a2f      	ldr	r2, [pc, #188]	; (80125bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012500:	4293      	cmp	r3, r2
 8012502:	d108      	bne.n	8012516 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801250a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	685b      	ldr	r3, [r3, #4]
 8012510:	68fa      	ldr	r2, [r7, #12]
 8012512:	4313      	orrs	r3, r2
 8012514:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801251c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	68fa      	ldr	r2, [r7, #12]
 8012524:	4313      	orrs	r3, r2
 8012526:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	4a20      	ldr	r2, [pc, #128]	; (80125b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8012536:	4293      	cmp	r3, r2
 8012538:	d022      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012542:	d01d      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	4a1d      	ldr	r2, [pc, #116]	; (80125c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801254a:	4293      	cmp	r3, r2
 801254c:	d018      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	4a1c      	ldr	r2, [pc, #112]	; (80125c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8012554:	4293      	cmp	r3, r2
 8012556:	d013      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	4a1a      	ldr	r2, [pc, #104]	; (80125c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801255e:	4293      	cmp	r3, r2
 8012560:	d00e      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	4a15      	ldr	r2, [pc, #84]	; (80125bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d009      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	4a16      	ldr	r2, [pc, #88]	; (80125cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8012572:	4293      	cmp	r3, r2
 8012574:	d004      	beq.n	8012580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	4a15      	ldr	r2, [pc, #84]	; (80125d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801257c:	4293      	cmp	r3, r2
 801257e:	d10c      	bne.n	801259a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012586:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	689b      	ldr	r3, [r3, #8]
 801258c:	68ba      	ldr	r2, [r7, #8]
 801258e:	4313      	orrs	r3, r2
 8012590:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	68ba      	ldr	r2, [r7, #8]
 8012598:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	2201      	movs	r2, #1
 801259e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2200      	movs	r2, #0
 80125a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80125aa:	2300      	movs	r3, #0
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr
 80125b8:	40010000 	.word	0x40010000
 80125bc:	40010400 	.word	0x40010400
 80125c0:	40000400 	.word	0x40000400
 80125c4:	40000800 	.word	0x40000800
 80125c8:	40000c00 	.word	0x40000c00
 80125cc:	40001800 	.word	0x40001800
 80125d0:	40014000 	.word	0x40014000

080125d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b083      	sub	sp, #12
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80125dc:	bf00      	nop
 80125de:	370c      	adds	r7, #12
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr

080125e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80125e8:	b480      	push	{r7}
 80125ea:	b083      	sub	sp, #12
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80125f0:	bf00      	nop
 80125f2:	370c      	adds	r7, #12
 80125f4:	46bd      	mov	sp, r7
 80125f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125fa:	4770      	bx	lr

080125fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
 8012602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8012604:	bf00      	nop
 8012606:	370c      	adds	r7, #12
 8012608:	46bd      	mov	sp, r7
 801260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260e:	4770      	bx	lr

08012610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b082      	sub	sp, #8
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d101      	bne.n	8012622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801261e:	2301      	movs	r3, #1
 8012620:	e042      	b.n	80126a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012628:	2b00      	cmp	r3, #0
 801262a:	d106      	bne.n	801263a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	2200      	movs	r2, #0
 8012630:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f7f3 fdff 	bl	8006238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2224      	movs	r2, #36	; 0x24
 801263e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	681a      	ldr	r2, [r3, #0]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	f022 0201 	bic.w	r2, r2, #1
 8012650:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 fd54 	bl	8013100 <UART_SetConfig>
 8012658:	4603      	mov	r3, r0
 801265a:	2b01      	cmp	r3, #1
 801265c:	d101      	bne.n	8012662 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801265e:	2301      	movs	r3, #1
 8012660:	e022      	b.n	80126a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012666:	2b00      	cmp	r3, #0
 8012668:	d002      	beq.n	8012670 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801266a:	6878      	ldr	r0, [r7, #4]
 801266c:	f001 fab0 	bl	8013bd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	685a      	ldr	r2, [r3, #4]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801267e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	689a      	ldr	r2, [r3, #8]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801268e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	681a      	ldr	r2, [r3, #0]
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f042 0201 	orr.w	r2, r2, #1
 801269e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f001 fb37 	bl	8013d14 <UART_CheckIdleState>
 80126a6:	4603      	mov	r3, r0
}
 80126a8:	4618      	mov	r0, r3
 80126aa:	3708      	adds	r7, #8
 80126ac:	46bd      	mov	sp, r7
 80126ae:	bd80      	pop	{r7, pc}

080126b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b08a      	sub	sp, #40	; 0x28
 80126b4:	af02      	add	r7, sp, #8
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	603b      	str	r3, [r7, #0]
 80126bc:	4613      	mov	r3, r2
 80126be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80126c6:	2b20      	cmp	r3, #32
 80126c8:	d17b      	bne.n	80127c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <HAL_UART_Transmit+0x26>
 80126d0:	88fb      	ldrh	r3, [r7, #6]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d101      	bne.n	80126da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80126d6:	2301      	movs	r3, #1
 80126d8:	e074      	b.n	80127c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	2200      	movs	r2, #0
 80126de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2221      	movs	r2, #33	; 0x21
 80126e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80126ea:	f7f4 fe5d 	bl	80073a8 <HAL_GetTick>
 80126ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	88fa      	ldrh	r2, [r7, #6]
 80126f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	88fa      	ldrh	r2, [r7, #6]
 80126fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	689b      	ldr	r3, [r3, #8]
 8012704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012708:	d108      	bne.n	801271c <HAL_UART_Transmit+0x6c>
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	691b      	ldr	r3, [r3, #16]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d104      	bne.n	801271c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012712:	2300      	movs	r3, #0
 8012714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	61bb      	str	r3, [r7, #24]
 801271a:	e003      	b.n	8012724 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012720:	2300      	movs	r3, #0
 8012722:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012724:	e030      	b.n	8012788 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	9300      	str	r3, [sp, #0]
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	2200      	movs	r2, #0
 801272e:	2180      	movs	r1, #128	; 0x80
 8012730:	68f8      	ldr	r0, [r7, #12]
 8012732:	f001 fb99 	bl	8013e68 <UART_WaitOnFlagUntilTimeout>
 8012736:	4603      	mov	r3, r0
 8012738:	2b00      	cmp	r3, #0
 801273a:	d005      	beq.n	8012748 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2220      	movs	r2, #32
 8012740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012744:	2303      	movs	r3, #3
 8012746:	e03d      	b.n	80127c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d10b      	bne.n	8012766 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	881b      	ldrh	r3, [r3, #0]
 8012752:	461a      	mov	r2, r3
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801275c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	3302      	adds	r3, #2
 8012762:	61bb      	str	r3, [r7, #24]
 8012764:	e007      	b.n	8012776 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012766:	69fb      	ldr	r3, [r7, #28]
 8012768:	781a      	ldrb	r2, [r3, #0]
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	3301      	adds	r3, #1
 8012774:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801277c:	b29b      	uxth	r3, r3
 801277e:	3b01      	subs	r3, #1
 8012780:	b29a      	uxth	r2, r3
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801278e:	b29b      	uxth	r3, r3
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1c8      	bne.n	8012726 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	697b      	ldr	r3, [r7, #20]
 801279a:	2200      	movs	r2, #0
 801279c:	2140      	movs	r1, #64	; 0x40
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f001 fb62 	bl	8013e68 <UART_WaitOnFlagUntilTimeout>
 80127a4:	4603      	mov	r3, r0
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d005      	beq.n	80127b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	2220      	movs	r2, #32
 80127ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80127b2:	2303      	movs	r3, #3
 80127b4:	e006      	b.n	80127c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	2220      	movs	r2, #32
 80127ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80127be:	2300      	movs	r3, #0
 80127c0:	e000      	b.n	80127c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80127c2:	2302      	movs	r3, #2
  }
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	3720      	adds	r7, #32
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}

080127cc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b08a      	sub	sp, #40	; 0x28
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	60b9      	str	r1, [r7, #8]
 80127d6:	4613      	mov	r3, r2
 80127d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80127e0:	2b20      	cmp	r3, #32
 80127e2:	d167      	bne.n	80128b4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80127e4:	68bb      	ldr	r3, [r7, #8]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d002      	beq.n	80127f0 <HAL_UART_Transmit_DMA+0x24>
 80127ea:	88fb      	ldrh	r3, [r7, #6]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d101      	bne.n	80127f4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80127f0:	2301      	movs	r3, #1
 80127f2:	e060      	b.n	80128b6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	68ba      	ldr	r2, [r7, #8]
 80127f8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	88fa      	ldrh	r2, [r7, #6]
 80127fe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	88fa      	ldrh	r2, [r7, #6]
 8012806:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	2200      	movs	r2, #0
 801280e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2221      	movs	r2, #33	; 0x21
 8012816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801281e:	2b00      	cmp	r3, #0
 8012820:	d028      	beq.n	8012874 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8012822:	68fb      	ldr	r3, [r7, #12]
 8012824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012826:	4a26      	ldr	r2, [pc, #152]	; (80128c0 <HAL_UART_Transmit_DMA+0xf4>)
 8012828:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801282e:	4a25      	ldr	r2, [pc, #148]	; (80128c4 <HAL_UART_Transmit_DMA+0xf8>)
 8012830:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012836:	4a24      	ldr	r2, [pc, #144]	; (80128c8 <HAL_UART_Transmit_DMA+0xfc>)
 8012838:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801283e:	2200      	movs	r2, #0
 8012840:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801284a:	4619      	mov	r1, r3
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	3328      	adds	r3, #40	; 0x28
 8012852:	461a      	mov	r2, r3
 8012854:	88fb      	ldrh	r3, [r7, #6]
 8012856:	f7f6 ffcf 	bl	80097f8 <HAL_DMA_Start_IT>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d009      	beq.n	8012874 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2210      	movs	r2, #16
 8012864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2220      	movs	r2, #32
 801286c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8012870:	2301      	movs	r3, #1
 8012872:	e020      	b.n	80128b6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2240      	movs	r2, #64	; 0x40
 801287a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	3308      	adds	r3, #8
 8012882:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012884:	697b      	ldr	r3, [r7, #20]
 8012886:	e853 3f00 	ldrex	r3, [r3]
 801288a:	613b      	str	r3, [r7, #16]
   return(result);
 801288c:	693b      	ldr	r3, [r7, #16]
 801288e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012892:	627b      	str	r3, [r7, #36]	; 0x24
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	3308      	adds	r3, #8
 801289a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801289c:	623a      	str	r2, [r7, #32]
 801289e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a0:	69f9      	ldr	r1, [r7, #28]
 80128a2:	6a3a      	ldr	r2, [r7, #32]
 80128a4:	e841 2300 	strex	r3, r2, [r1]
 80128a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80128aa:	69bb      	ldr	r3, [r7, #24]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d1e5      	bne.n	801287c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80128b0:	2300      	movs	r3, #0
 80128b2:	e000      	b.n	80128b6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80128b4:	2302      	movs	r3, #2
  }
}
 80128b6:	4618      	mov	r0, r3
 80128b8:	3728      	adds	r7, #40	; 0x28
 80128ba:	46bd      	mov	sp, r7
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	080141d5 	.word	0x080141d5
 80128c4:	0801426b 	.word	0x0801426b
 80128c8:	080143ed 	.word	0x080143ed

080128cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b08a      	sub	sp, #40	; 0x28
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	4613      	mov	r3, r2
 80128d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80128e0:	2b20      	cmp	r3, #32
 80128e2:	d137      	bne.n	8012954 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d002      	beq.n	80128f0 <HAL_UART_Receive_DMA+0x24>
 80128ea:	88fb      	ldrh	r3, [r7, #6]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d101      	bne.n	80128f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80128f0:	2301      	movs	r3, #1
 80128f2:	e030      	b.n	8012956 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2200      	movs	r2, #0
 80128f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4a18      	ldr	r2, [pc, #96]	; (8012960 <HAL_UART_Receive_DMA+0x94>)
 8012900:	4293      	cmp	r3, r2
 8012902:	d01f      	beq.n	8012944 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	685b      	ldr	r3, [r3, #4]
 801290a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801290e:	2b00      	cmp	r3, #0
 8012910:	d018      	beq.n	8012944 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	e853 3f00 	ldrex	r3, [r3]
 801291e:	613b      	str	r3, [r7, #16]
   return(result);
 8012920:	693b      	ldr	r3, [r7, #16]
 8012922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012926:	627b      	str	r3, [r7, #36]	; 0x24
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	461a      	mov	r2, r3
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	623b      	str	r3, [r7, #32]
 8012932:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012934:	69f9      	ldr	r1, [r7, #28]
 8012936:	6a3a      	ldr	r2, [r7, #32]
 8012938:	e841 2300 	strex	r3, r2, [r1]
 801293c:	61bb      	str	r3, [r7, #24]
   return(result);
 801293e:	69bb      	ldr	r3, [r7, #24]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d1e6      	bne.n	8012912 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012944:	88fb      	ldrh	r3, [r7, #6]
 8012946:	461a      	mov	r2, r3
 8012948:	68b9      	ldr	r1, [r7, #8]
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f001 faf4 	bl	8013f38 <UART_Start_Receive_DMA>
 8012950:	4603      	mov	r3, r0
 8012952:	e000      	b.n	8012956 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8012954:	2302      	movs	r3, #2
  }
}
 8012956:	4618      	mov	r0, r3
 8012958:	3728      	adds	r7, #40	; 0x28
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	58000c00 	.word	0x58000c00

08012964 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b0ba      	sub	sp, #232	; 0xe8
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	69db      	ldr	r3, [r3, #28]
 8012972:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	689b      	ldr	r3, [r3, #8]
 8012986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801298a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801298e:	f640 030f 	movw	r3, #2063	; 0x80f
 8012992:	4013      	ands	r3, r2
 8012994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8012998:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801299c:	2b00      	cmp	r3, #0
 801299e:	d11b      	bne.n	80129d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80129a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80129a4:	f003 0320 	and.w	r3, r3, #32
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d015      	beq.n	80129d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80129ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80129b0:	f003 0320 	and.w	r3, r3, #32
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d105      	bne.n	80129c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80129b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80129bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d009      	beq.n	80129d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	f000 8377 	beq.w	80130bc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	4798      	blx	r3
      }
      return;
 80129d6:	e371      	b.n	80130bc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80129d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80129dc:	2b00      	cmp	r3, #0
 80129de:	f000 8123 	beq.w	8012c28 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80129e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80129e6:	4b8d      	ldr	r3, [pc, #564]	; (8012c1c <HAL_UART_IRQHandler+0x2b8>)
 80129e8:	4013      	ands	r3, r2
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d106      	bne.n	80129fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80129ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80129f2:	4b8b      	ldr	r3, [pc, #556]	; (8012c20 <HAL_UART_IRQHandler+0x2bc>)
 80129f4:	4013      	ands	r3, r2
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	f000 8116 	beq.w	8012c28 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80129fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a00:	f003 0301 	and.w	r3, r3, #1
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d011      	beq.n	8012a2c <HAL_UART_IRQHandler+0xc8>
 8012a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d00b      	beq.n	8012a2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2201      	movs	r2, #1
 8012a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a22:	f043 0201 	orr.w	r2, r3, #1
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a30:	f003 0302 	and.w	r3, r3, #2
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d011      	beq.n	8012a5c <HAL_UART_IRQHandler+0xf8>
 8012a38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a3c:	f003 0301 	and.w	r3, r3, #1
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d00b      	beq.n	8012a5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2202      	movs	r2, #2
 8012a4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a52:	f043 0204 	orr.w	r2, r3, #4
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a60:	f003 0304 	and.w	r3, r3, #4
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d011      	beq.n	8012a8c <HAL_UART_IRQHandler+0x128>
 8012a68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012a6c:	f003 0301 	and.w	r3, r3, #1
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d00b      	beq.n	8012a8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	2204      	movs	r2, #4
 8012a7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a82:	f043 0202 	orr.w	r2, r3, #2
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012a90:	f003 0308 	and.w	r3, r3, #8
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d017      	beq.n	8012ac8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012a9c:	f003 0320 	and.w	r3, r3, #32
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d105      	bne.n	8012ab0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8012aa4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8012aa8:	4b5c      	ldr	r3, [pc, #368]	; (8012c1c <HAL_UART_IRQHandler+0x2b8>)
 8012aaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d00b      	beq.n	8012ac8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2208      	movs	r2, #8
 8012ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012abe:	f043 0208 	orr.w	r2, r3, #8
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012ac8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d012      	beq.n	8012afa <HAL_UART_IRQHandler+0x196>
 8012ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012ad8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d00c      	beq.n	8012afa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012ae8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012af0:	f043 0220 	orr.w	r2, r3, #32
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	f000 82dd 	beq.w	80130c0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012b0a:	f003 0320 	and.w	r3, r3, #32
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d013      	beq.n	8012b3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012b16:	f003 0320 	and.w	r3, r3, #32
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d105      	bne.n	8012b2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8012b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d007      	beq.n	8012b3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d003      	beq.n	8012b3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b36:	6878      	ldr	r0, [r7, #4]
 8012b38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012b40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	689b      	ldr	r3, [r3, #8]
 8012b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b4e:	2b40      	cmp	r3, #64	; 0x40
 8012b50:	d005      	beq.n	8012b5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012b52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012b56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d054      	beq.n	8012c08 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f001 fad2 	bl	8014108 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	689b      	ldr	r3, [r3, #8]
 8012b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b6e:	2b40      	cmp	r3, #64	; 0x40
 8012b70:	d146      	bne.n	8012c00 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	3308      	adds	r3, #8
 8012b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012b7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012b80:	e853 3f00 	ldrex	r3, [r3]
 8012b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012b88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	3308      	adds	r3, #8
 8012b9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8012b9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8012ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ba6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8012baa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8012bae:	e841 2300 	strex	r3, r2, [r1]
 8012bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8012bb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1d9      	bne.n	8012b72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d017      	beq.n	8012bf8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bce:	4a15      	ldr	r2, [pc, #84]	; (8012c24 <HAL_UART_IRQHandler+0x2c0>)
 8012bd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f7f7 fb95 	bl	800a308 <HAL_DMA_Abort_IT>
 8012bde:	4603      	mov	r3, r0
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d019      	beq.n	8012c18 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bec:	687a      	ldr	r2, [r7, #4]
 8012bee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012bf2:	4610      	mov	r0, r2
 8012bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bf6:	e00f      	b.n	8012c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7f1 fb5f 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012bfe:	e00b      	b.n	8012c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012c00:	6878      	ldr	r0, [r7, #4]
 8012c02:	f7f1 fb5b 	bl	80042bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c06:	e007      	b.n	8012c18 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012c08:	6878      	ldr	r0, [r7, #4]
 8012c0a:	f7f1 fb57 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2200      	movs	r2, #0
 8012c12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8012c16:	e253      	b.n	80130c0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c18:	bf00      	nop
    return;
 8012c1a:	e251      	b.n	80130c0 <HAL_UART_IRQHandler+0x75c>
 8012c1c:	10000001 	.word	0x10000001
 8012c20:	04000120 	.word	0x04000120
 8012c24:	0801446d 	.word	0x0801446d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c2c:	2b01      	cmp	r3, #1
 8012c2e:	f040 81e7 	bne.w	8013000 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012c36:	f003 0310 	and.w	r3, r3, #16
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	f000 81e0 	beq.w	8013000 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012c40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012c44:	f003 0310 	and.w	r3, r3, #16
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f000 81d9 	beq.w	8013000 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2210      	movs	r2, #16
 8012c54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	689b      	ldr	r3, [r3, #8]
 8012c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c60:	2b40      	cmp	r3, #64	; 0x40
 8012c62:	f040 8151 	bne.w	8012f08 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	4a96      	ldr	r2, [pc, #600]	; (8012ec8 <HAL_UART_IRQHandler+0x564>)
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d068      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	4a93      	ldr	r2, [pc, #588]	; (8012ecc <HAL_UART_IRQHandler+0x568>)
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d061      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4a91      	ldr	r2, [pc, #580]	; (8012ed0 <HAL_UART_IRQHandler+0x56c>)
 8012c8c:	4293      	cmp	r3, r2
 8012c8e:	d05a      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	4a8e      	ldr	r2, [pc, #568]	; (8012ed4 <HAL_UART_IRQHandler+0x570>)
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	d053      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	4a8c      	ldr	r2, [pc, #560]	; (8012ed8 <HAL_UART_IRQHandler+0x574>)
 8012ca8:	4293      	cmp	r3, r2
 8012caa:	d04c      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	4a89      	ldr	r2, [pc, #548]	; (8012edc <HAL_UART_IRQHandler+0x578>)
 8012cb6:	4293      	cmp	r3, r2
 8012cb8:	d045      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	4a87      	ldr	r2, [pc, #540]	; (8012ee0 <HAL_UART_IRQHandler+0x57c>)
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d03e      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4a84      	ldr	r2, [pc, #528]	; (8012ee4 <HAL_UART_IRQHandler+0x580>)
 8012cd2:	4293      	cmp	r3, r2
 8012cd4:	d037      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	4a82      	ldr	r2, [pc, #520]	; (8012ee8 <HAL_UART_IRQHandler+0x584>)
 8012ce0:	4293      	cmp	r3, r2
 8012ce2:	d030      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	4a7f      	ldr	r2, [pc, #508]	; (8012eec <HAL_UART_IRQHandler+0x588>)
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	d029      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	4a7d      	ldr	r2, [pc, #500]	; (8012ef0 <HAL_UART_IRQHandler+0x58c>)
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	d022      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d06:	681b      	ldr	r3, [r3, #0]
 8012d08:	4a7a      	ldr	r2, [pc, #488]	; (8012ef4 <HAL_UART_IRQHandler+0x590>)
 8012d0a:	4293      	cmp	r3, r2
 8012d0c:	d01b      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4a78      	ldr	r2, [pc, #480]	; (8012ef8 <HAL_UART_IRQHandler+0x594>)
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	d014      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	4a75      	ldr	r2, [pc, #468]	; (8012efc <HAL_UART_IRQHandler+0x598>)
 8012d26:	4293      	cmp	r3, r2
 8012d28:	d00d      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	4a73      	ldr	r2, [pc, #460]	; (8012f00 <HAL_UART_IRQHandler+0x59c>)
 8012d34:	4293      	cmp	r3, r2
 8012d36:	d006      	beq.n	8012d46 <HAL_UART_IRQHandler+0x3e2>
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	4a70      	ldr	r2, [pc, #448]	; (8012f04 <HAL_UART_IRQHandler+0x5a0>)
 8012d42:	4293      	cmp	r3, r2
 8012d44:	d106      	bne.n	8012d54 <HAL_UART_IRQHandler+0x3f0>
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	e005      	b.n	8012d60 <HAL_UART_IRQHandler+0x3fc>
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d5a:	681b      	ldr	r3, [r3, #0]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012d64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	f000 81ab 	beq.w	80130c4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012d74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012d78:	429a      	cmp	r2, r3
 8012d7a:	f080 81a3 	bcs.w	80130c4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012d84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d8e:	69db      	ldr	r3, [r3, #28]
 8012d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012d94:	f000 8087 	beq.w	8012ea6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012da4:	e853 3f00 	ldrex	r3, [r3]
 8012da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8012dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8012dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012dd2:	e841 2300 	strex	r3, r2, [r1]
 8012dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d1da      	bne.n	8012d98 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	3308      	adds	r3, #8
 8012de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012dec:	e853 3f00 	ldrex	r3, [r3]
 8012df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012df4:	f023 0301 	bic.w	r3, r3, #1
 8012df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	3308      	adds	r3, #8
 8012e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012e12:	e841 2300 	strex	r3, r2, [r1]
 8012e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d1e1      	bne.n	8012de2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	3308      	adds	r3, #8
 8012e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012e28:	e853 3f00 	ldrex	r3, [r3]
 8012e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	3308      	adds	r3, #8
 8012e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012e4a:	e841 2300 	strex	r3, r2, [r1]
 8012e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d1e3      	bne.n	8012e1e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2220      	movs	r2, #32
 8012e5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2200      	movs	r2, #0
 8012e62:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e6c:	e853 3f00 	ldrex	r3, [r3]
 8012e70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012e74:	f023 0310 	bic.w	r3, r3, #16
 8012e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	461a      	mov	r2, r3
 8012e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012e8e:	e841 2300 	strex	r3, r2, [r1]
 8012e92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d1e4      	bne.n	8012e64 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7f6 ff13 	bl	8009ccc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	2202      	movs	r2, #2
 8012eaa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012eb8:	b29b      	uxth	r3, r3
 8012eba:	1ad3      	subs	r3, r2, r3
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	4619      	mov	r1, r3
 8012ec0:	6878      	ldr	r0, [r7, #4]
 8012ec2:	f7f1 f8f3 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012ec6:	e0fd      	b.n	80130c4 <HAL_UART_IRQHandler+0x760>
 8012ec8:	40020010 	.word	0x40020010
 8012ecc:	40020028 	.word	0x40020028
 8012ed0:	40020040 	.word	0x40020040
 8012ed4:	40020058 	.word	0x40020058
 8012ed8:	40020070 	.word	0x40020070
 8012edc:	40020088 	.word	0x40020088
 8012ee0:	400200a0 	.word	0x400200a0
 8012ee4:	400200b8 	.word	0x400200b8
 8012ee8:	40020410 	.word	0x40020410
 8012eec:	40020428 	.word	0x40020428
 8012ef0:	40020440 	.word	0x40020440
 8012ef4:	40020458 	.word	0x40020458
 8012ef8:	40020470 	.word	0x40020470
 8012efc:	40020488 	.word	0x40020488
 8012f00:	400204a0 	.word	0x400204a0
 8012f04:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	1ad3      	subs	r3, r2, r3
 8012f18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f000 80cf 	beq.w	80130c8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8012f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f000 80ca 	beq.w	80130c8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3c:	e853 3f00 	ldrex	r3, [r3]
 8012f40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012f44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	461a      	mov	r2, r3
 8012f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012f56:	647b      	str	r3, [r7, #68]	; 0x44
 8012f58:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012f5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012f5e:	e841 2300 	strex	r3, r2, [r1]
 8012f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d1e4      	bne.n	8012f34 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	3308      	adds	r3, #8
 8012f70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	e853 3f00 	ldrex	r3, [r3]
 8012f78:	623b      	str	r3, [r7, #32]
   return(result);
 8012f7a:	6a3a      	ldr	r2, [r7, #32]
 8012f7c:	4b55      	ldr	r3, [pc, #340]	; (80130d4 <HAL_UART_IRQHandler+0x770>)
 8012f7e:	4013      	ands	r3, r2
 8012f80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	3308      	adds	r3, #8
 8012f8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012f8e:	633a      	str	r2, [r7, #48]	; 0x30
 8012f90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f96:	e841 2300 	strex	r3, r2, [r1]
 8012f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1e3      	bne.n	8012f6a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2220      	movs	r2, #32
 8012fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	2200      	movs	r2, #0
 8012fae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	e853 3f00 	ldrex	r3, [r3]
 8012fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f023 0310 	bic.w	r3, r3, #16
 8012fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	461a      	mov	r2, r3
 8012fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012fd8:	61fb      	str	r3, [r7, #28]
 8012fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fdc:	69b9      	ldr	r1, [r7, #24]
 8012fde:	69fa      	ldr	r2, [r7, #28]
 8012fe0:	e841 2300 	strex	r3, r2, [r1]
 8012fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8012fe6:	697b      	ldr	r3, [r7, #20]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1e4      	bne.n	8012fb6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	2202      	movs	r2, #2
 8012ff0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012ff6:	4619      	mov	r1, r3
 8012ff8:	6878      	ldr	r0, [r7, #4]
 8012ffa:	f7f1 f857 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012ffe:	e063      	b.n	80130c8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00e      	beq.n	801302a <HAL_UART_IRQHandler+0x6c6>
 801300c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013014:	2b00      	cmp	r3, #0
 8013016:	d008      	beq.n	801302a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8013020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f001 fa63 	bl	80144ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013028:	e051      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801302a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013032:	2b00      	cmp	r3, #0
 8013034:	d014      	beq.n	8013060 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8013036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801303a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801303e:	2b00      	cmp	r3, #0
 8013040:	d105      	bne.n	801304e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8013042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8013046:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801304a:	2b00      	cmp	r3, #0
 801304c:	d008      	beq.n	8013060 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013052:	2b00      	cmp	r3, #0
 8013054:	d03a      	beq.n	80130cc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	4798      	blx	r3
    }
    return;
 801305e:	e035      	b.n	80130cc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013068:	2b00      	cmp	r3, #0
 801306a:	d009      	beq.n	8013080 <HAL_UART_IRQHandler+0x71c>
 801306c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013074:	2b00      	cmp	r3, #0
 8013076:	d003      	beq.n	8013080 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8013078:	6878      	ldr	r0, [r7, #4]
 801307a:	f001 fa0d 	bl	8014498 <UART_EndTransmit_IT>
    return;
 801307e:	e026      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8013080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8013084:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013088:	2b00      	cmp	r3, #0
 801308a:	d009      	beq.n	80130a0 <HAL_UART_IRQHandler+0x73c>
 801308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8013090:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013094:	2b00      	cmp	r3, #0
 8013096:	d003      	beq.n	80130a0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8013098:	6878      	ldr	r0, [r7, #4]
 801309a:	f001 fa3c 	bl	8014516 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801309e:	e016      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80130a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80130a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d010      	beq.n	80130ce <HAL_UART_IRQHandler+0x76a>
 80130ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	da0c      	bge.n	80130ce <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f001 fa24 	bl	8014502 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80130ba:	e008      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
      return;
 80130bc:	bf00      	nop
 80130be:	e006      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
    return;
 80130c0:	bf00      	nop
 80130c2:	e004      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
      return;
 80130c4:	bf00      	nop
 80130c6:	e002      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
      return;
 80130c8:	bf00      	nop
 80130ca:	e000      	b.n	80130ce <HAL_UART_IRQHandler+0x76a>
    return;
 80130cc:	bf00      	nop
  }
}
 80130ce:	37e8      	adds	r7, #232	; 0xe8
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	effffffe 	.word	0xeffffffe

080130d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80130e0:	bf00      	nop
 80130e2:	370c      	adds	r7, #12
 80130e4:	46bd      	mov	sp, r7
 80130e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ea:	4770      	bx	lr

080130ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80130f4:	bf00      	nop
 80130f6:	370c      	adds	r7, #12
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr

08013100 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013104:	b092      	sub	sp, #72	; 0x48
 8013106:	af00      	add	r7, sp, #0
 8013108:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801310a:	2300      	movs	r3, #0
 801310c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013110:	697b      	ldr	r3, [r7, #20]
 8013112:	689a      	ldr	r2, [r3, #8]
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	691b      	ldr	r3, [r3, #16]
 8013118:	431a      	orrs	r2, r3
 801311a:	697b      	ldr	r3, [r7, #20]
 801311c:	695b      	ldr	r3, [r3, #20]
 801311e:	431a      	orrs	r2, r3
 8013120:	697b      	ldr	r3, [r7, #20]
 8013122:	69db      	ldr	r3, [r3, #28]
 8013124:	4313      	orrs	r3, r2
 8013126:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013128:	697b      	ldr	r3, [r7, #20]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	4bbe      	ldr	r3, [pc, #760]	; (8013428 <UART_SetConfig+0x328>)
 8013130:	4013      	ands	r3, r2
 8013132:	697a      	ldr	r2, [r7, #20]
 8013134:	6812      	ldr	r2, [r2, #0]
 8013136:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013138:	430b      	orrs	r3, r1
 801313a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801313c:	697b      	ldr	r3, [r7, #20]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	68da      	ldr	r2, [r3, #12]
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	430a      	orrs	r2, r1
 8013150:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013152:	697b      	ldr	r3, [r7, #20]
 8013154:	699b      	ldr	r3, [r3, #24]
 8013156:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4ab3      	ldr	r2, [pc, #716]	; (801342c <UART_SetConfig+0x32c>)
 801315e:	4293      	cmp	r3, r2
 8013160:	d004      	beq.n	801316c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013162:	697b      	ldr	r3, [r7, #20]
 8013164:	6a1b      	ldr	r3, [r3, #32]
 8013166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013168:	4313      	orrs	r3, r2
 801316a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	689a      	ldr	r2, [r3, #8]
 8013172:	4baf      	ldr	r3, [pc, #700]	; (8013430 <UART_SetConfig+0x330>)
 8013174:	4013      	ands	r3, r2
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	6812      	ldr	r2, [r2, #0]
 801317a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801317c:	430b      	orrs	r3, r1
 801317e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013180:	697b      	ldr	r3, [r7, #20]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013186:	f023 010f 	bic.w	r1, r3, #15
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801318e:	697b      	ldr	r3, [r7, #20]
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	430a      	orrs	r2, r1
 8013194:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4aa6      	ldr	r2, [pc, #664]	; (8013434 <UART_SetConfig+0x334>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d177      	bne.n	8013290 <UART_SetConfig+0x190>
 80131a0:	4ba5      	ldr	r3, [pc, #660]	; (8013438 <UART_SetConfig+0x338>)
 80131a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80131a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80131a8:	2b28      	cmp	r3, #40	; 0x28
 80131aa:	d86d      	bhi.n	8013288 <UART_SetConfig+0x188>
 80131ac:	a201      	add	r2, pc, #4	; (adr r2, 80131b4 <UART_SetConfig+0xb4>)
 80131ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b2:	bf00      	nop
 80131b4:	08013259 	.word	0x08013259
 80131b8:	08013289 	.word	0x08013289
 80131bc:	08013289 	.word	0x08013289
 80131c0:	08013289 	.word	0x08013289
 80131c4:	08013289 	.word	0x08013289
 80131c8:	08013289 	.word	0x08013289
 80131cc:	08013289 	.word	0x08013289
 80131d0:	08013289 	.word	0x08013289
 80131d4:	08013261 	.word	0x08013261
 80131d8:	08013289 	.word	0x08013289
 80131dc:	08013289 	.word	0x08013289
 80131e0:	08013289 	.word	0x08013289
 80131e4:	08013289 	.word	0x08013289
 80131e8:	08013289 	.word	0x08013289
 80131ec:	08013289 	.word	0x08013289
 80131f0:	08013289 	.word	0x08013289
 80131f4:	08013269 	.word	0x08013269
 80131f8:	08013289 	.word	0x08013289
 80131fc:	08013289 	.word	0x08013289
 8013200:	08013289 	.word	0x08013289
 8013204:	08013289 	.word	0x08013289
 8013208:	08013289 	.word	0x08013289
 801320c:	08013289 	.word	0x08013289
 8013210:	08013289 	.word	0x08013289
 8013214:	08013271 	.word	0x08013271
 8013218:	08013289 	.word	0x08013289
 801321c:	08013289 	.word	0x08013289
 8013220:	08013289 	.word	0x08013289
 8013224:	08013289 	.word	0x08013289
 8013228:	08013289 	.word	0x08013289
 801322c:	08013289 	.word	0x08013289
 8013230:	08013289 	.word	0x08013289
 8013234:	08013279 	.word	0x08013279
 8013238:	08013289 	.word	0x08013289
 801323c:	08013289 	.word	0x08013289
 8013240:	08013289 	.word	0x08013289
 8013244:	08013289 	.word	0x08013289
 8013248:	08013289 	.word	0x08013289
 801324c:	08013289 	.word	0x08013289
 8013250:	08013289 	.word	0x08013289
 8013254:	08013281 	.word	0x08013281
 8013258:	2301      	movs	r3, #1
 801325a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801325e:	e222      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013260:	2304      	movs	r3, #4
 8013262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013266:	e21e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013268:	2308      	movs	r3, #8
 801326a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801326e:	e21a      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013270:	2310      	movs	r3, #16
 8013272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013276:	e216      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013278:	2320      	movs	r3, #32
 801327a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801327e:	e212      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013280:	2340      	movs	r3, #64	; 0x40
 8013282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013286:	e20e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013288:	2380      	movs	r3, #128	; 0x80
 801328a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801328e:	e20a      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	4a69      	ldr	r2, [pc, #420]	; (801343c <UART_SetConfig+0x33c>)
 8013296:	4293      	cmp	r3, r2
 8013298:	d130      	bne.n	80132fc <UART_SetConfig+0x1fc>
 801329a:	4b67      	ldr	r3, [pc, #412]	; (8013438 <UART_SetConfig+0x338>)
 801329c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801329e:	f003 0307 	and.w	r3, r3, #7
 80132a2:	2b05      	cmp	r3, #5
 80132a4:	d826      	bhi.n	80132f4 <UART_SetConfig+0x1f4>
 80132a6:	a201      	add	r2, pc, #4	; (adr r2, 80132ac <UART_SetConfig+0x1ac>)
 80132a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132ac:	080132c5 	.word	0x080132c5
 80132b0:	080132cd 	.word	0x080132cd
 80132b4:	080132d5 	.word	0x080132d5
 80132b8:	080132dd 	.word	0x080132dd
 80132bc:	080132e5 	.word	0x080132e5
 80132c0:	080132ed 	.word	0x080132ed
 80132c4:	2300      	movs	r3, #0
 80132c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ca:	e1ec      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132cc:	2304      	movs	r3, #4
 80132ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132d2:	e1e8      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132d4:	2308      	movs	r3, #8
 80132d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132da:	e1e4      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132dc:	2310      	movs	r3, #16
 80132de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132e2:	e1e0      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132e4:	2320      	movs	r3, #32
 80132e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132ea:	e1dc      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132ec:	2340      	movs	r3, #64	; 0x40
 80132ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132f2:	e1d8      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132f4:	2380      	movs	r3, #128	; 0x80
 80132f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132fa:	e1d4      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	4a4f      	ldr	r2, [pc, #316]	; (8013440 <UART_SetConfig+0x340>)
 8013302:	4293      	cmp	r3, r2
 8013304:	d130      	bne.n	8013368 <UART_SetConfig+0x268>
 8013306:	4b4c      	ldr	r3, [pc, #304]	; (8013438 <UART_SetConfig+0x338>)
 8013308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801330a:	f003 0307 	and.w	r3, r3, #7
 801330e:	2b05      	cmp	r3, #5
 8013310:	d826      	bhi.n	8013360 <UART_SetConfig+0x260>
 8013312:	a201      	add	r2, pc, #4	; (adr r2, 8013318 <UART_SetConfig+0x218>)
 8013314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013318:	08013331 	.word	0x08013331
 801331c:	08013339 	.word	0x08013339
 8013320:	08013341 	.word	0x08013341
 8013324:	08013349 	.word	0x08013349
 8013328:	08013351 	.word	0x08013351
 801332c:	08013359 	.word	0x08013359
 8013330:	2300      	movs	r3, #0
 8013332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013336:	e1b6      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013338:	2304      	movs	r3, #4
 801333a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801333e:	e1b2      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013340:	2308      	movs	r3, #8
 8013342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013346:	e1ae      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013348:	2310      	movs	r3, #16
 801334a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801334e:	e1aa      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013350:	2320      	movs	r3, #32
 8013352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013356:	e1a6      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013358:	2340      	movs	r3, #64	; 0x40
 801335a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801335e:	e1a2      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013360:	2380      	movs	r3, #128	; 0x80
 8013362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013366:	e19e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013368:	697b      	ldr	r3, [r7, #20]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	4a35      	ldr	r2, [pc, #212]	; (8013444 <UART_SetConfig+0x344>)
 801336e:	4293      	cmp	r3, r2
 8013370:	d130      	bne.n	80133d4 <UART_SetConfig+0x2d4>
 8013372:	4b31      	ldr	r3, [pc, #196]	; (8013438 <UART_SetConfig+0x338>)
 8013374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013376:	f003 0307 	and.w	r3, r3, #7
 801337a:	2b05      	cmp	r3, #5
 801337c:	d826      	bhi.n	80133cc <UART_SetConfig+0x2cc>
 801337e:	a201      	add	r2, pc, #4	; (adr r2, 8013384 <UART_SetConfig+0x284>)
 8013380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013384:	0801339d 	.word	0x0801339d
 8013388:	080133a5 	.word	0x080133a5
 801338c:	080133ad 	.word	0x080133ad
 8013390:	080133b5 	.word	0x080133b5
 8013394:	080133bd 	.word	0x080133bd
 8013398:	080133c5 	.word	0x080133c5
 801339c:	2300      	movs	r3, #0
 801339e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133a2:	e180      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133a4:	2304      	movs	r3, #4
 80133a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133aa:	e17c      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133ac:	2308      	movs	r3, #8
 80133ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133b2:	e178      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133b4:	2310      	movs	r3, #16
 80133b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ba:	e174      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133bc:	2320      	movs	r3, #32
 80133be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133c2:	e170      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133c4:	2340      	movs	r3, #64	; 0x40
 80133c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133ca:	e16c      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133cc:	2380      	movs	r3, #128	; 0x80
 80133ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80133d2:	e168      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	4a1b      	ldr	r2, [pc, #108]	; (8013448 <UART_SetConfig+0x348>)
 80133da:	4293      	cmp	r3, r2
 80133dc:	d142      	bne.n	8013464 <UART_SetConfig+0x364>
 80133de:	4b16      	ldr	r3, [pc, #88]	; (8013438 <UART_SetConfig+0x338>)
 80133e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133e2:	f003 0307 	and.w	r3, r3, #7
 80133e6:	2b05      	cmp	r3, #5
 80133e8:	d838      	bhi.n	801345c <UART_SetConfig+0x35c>
 80133ea:	a201      	add	r2, pc, #4	; (adr r2, 80133f0 <UART_SetConfig+0x2f0>)
 80133ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f0:	08013409 	.word	0x08013409
 80133f4:	08013411 	.word	0x08013411
 80133f8:	08013419 	.word	0x08013419
 80133fc:	08013421 	.word	0x08013421
 8013400:	0801344d 	.word	0x0801344d
 8013404:	08013455 	.word	0x08013455
 8013408:	2300      	movs	r3, #0
 801340a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801340e:	e14a      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013410:	2304      	movs	r3, #4
 8013412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013416:	e146      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013418:	2308      	movs	r3, #8
 801341a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801341e:	e142      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013420:	2310      	movs	r3, #16
 8013422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013426:	e13e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013428:	cfff69f3 	.word	0xcfff69f3
 801342c:	58000c00 	.word	0x58000c00
 8013430:	11fff4ff 	.word	0x11fff4ff
 8013434:	40011000 	.word	0x40011000
 8013438:	58024400 	.word	0x58024400
 801343c:	40004400 	.word	0x40004400
 8013440:	40004800 	.word	0x40004800
 8013444:	40004c00 	.word	0x40004c00
 8013448:	40005000 	.word	0x40005000
 801344c:	2320      	movs	r3, #32
 801344e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013452:	e128      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013454:	2340      	movs	r3, #64	; 0x40
 8013456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801345a:	e124      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801345c:	2380      	movs	r3, #128	; 0x80
 801345e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013462:	e120      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4acb      	ldr	r2, [pc, #812]	; (8013798 <UART_SetConfig+0x698>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d176      	bne.n	801355c <UART_SetConfig+0x45c>
 801346e:	4bcb      	ldr	r3, [pc, #812]	; (801379c <UART_SetConfig+0x69c>)
 8013470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013476:	2b28      	cmp	r3, #40	; 0x28
 8013478:	d86c      	bhi.n	8013554 <UART_SetConfig+0x454>
 801347a:	a201      	add	r2, pc, #4	; (adr r2, 8013480 <UART_SetConfig+0x380>)
 801347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013480:	08013525 	.word	0x08013525
 8013484:	08013555 	.word	0x08013555
 8013488:	08013555 	.word	0x08013555
 801348c:	08013555 	.word	0x08013555
 8013490:	08013555 	.word	0x08013555
 8013494:	08013555 	.word	0x08013555
 8013498:	08013555 	.word	0x08013555
 801349c:	08013555 	.word	0x08013555
 80134a0:	0801352d 	.word	0x0801352d
 80134a4:	08013555 	.word	0x08013555
 80134a8:	08013555 	.word	0x08013555
 80134ac:	08013555 	.word	0x08013555
 80134b0:	08013555 	.word	0x08013555
 80134b4:	08013555 	.word	0x08013555
 80134b8:	08013555 	.word	0x08013555
 80134bc:	08013555 	.word	0x08013555
 80134c0:	08013535 	.word	0x08013535
 80134c4:	08013555 	.word	0x08013555
 80134c8:	08013555 	.word	0x08013555
 80134cc:	08013555 	.word	0x08013555
 80134d0:	08013555 	.word	0x08013555
 80134d4:	08013555 	.word	0x08013555
 80134d8:	08013555 	.word	0x08013555
 80134dc:	08013555 	.word	0x08013555
 80134e0:	0801353d 	.word	0x0801353d
 80134e4:	08013555 	.word	0x08013555
 80134e8:	08013555 	.word	0x08013555
 80134ec:	08013555 	.word	0x08013555
 80134f0:	08013555 	.word	0x08013555
 80134f4:	08013555 	.word	0x08013555
 80134f8:	08013555 	.word	0x08013555
 80134fc:	08013555 	.word	0x08013555
 8013500:	08013545 	.word	0x08013545
 8013504:	08013555 	.word	0x08013555
 8013508:	08013555 	.word	0x08013555
 801350c:	08013555 	.word	0x08013555
 8013510:	08013555 	.word	0x08013555
 8013514:	08013555 	.word	0x08013555
 8013518:	08013555 	.word	0x08013555
 801351c:	08013555 	.word	0x08013555
 8013520:	0801354d 	.word	0x0801354d
 8013524:	2301      	movs	r3, #1
 8013526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801352a:	e0bc      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801352c:	2304      	movs	r3, #4
 801352e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013532:	e0b8      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013534:	2308      	movs	r3, #8
 8013536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801353a:	e0b4      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801353c:	2310      	movs	r3, #16
 801353e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013542:	e0b0      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013544:	2320      	movs	r3, #32
 8013546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801354a:	e0ac      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801354c:	2340      	movs	r3, #64	; 0x40
 801354e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013552:	e0a8      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013554:	2380      	movs	r3, #128	; 0x80
 8013556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801355a:	e0a4      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801355c:	697b      	ldr	r3, [r7, #20]
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a8f      	ldr	r2, [pc, #572]	; (80137a0 <UART_SetConfig+0x6a0>)
 8013562:	4293      	cmp	r3, r2
 8013564:	d130      	bne.n	80135c8 <UART_SetConfig+0x4c8>
 8013566:	4b8d      	ldr	r3, [pc, #564]	; (801379c <UART_SetConfig+0x69c>)
 8013568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801356a:	f003 0307 	and.w	r3, r3, #7
 801356e:	2b05      	cmp	r3, #5
 8013570:	d826      	bhi.n	80135c0 <UART_SetConfig+0x4c0>
 8013572:	a201      	add	r2, pc, #4	; (adr r2, 8013578 <UART_SetConfig+0x478>)
 8013574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013578:	08013591 	.word	0x08013591
 801357c:	08013599 	.word	0x08013599
 8013580:	080135a1 	.word	0x080135a1
 8013584:	080135a9 	.word	0x080135a9
 8013588:	080135b1 	.word	0x080135b1
 801358c:	080135b9 	.word	0x080135b9
 8013590:	2300      	movs	r3, #0
 8013592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013596:	e086      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013598:	2304      	movs	r3, #4
 801359a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801359e:	e082      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80135a0:	2308      	movs	r3, #8
 80135a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135a6:	e07e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80135a8:	2310      	movs	r3, #16
 80135aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135ae:	e07a      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80135b0:	2320      	movs	r3, #32
 80135b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135b6:	e076      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80135b8:	2340      	movs	r3, #64	; 0x40
 80135ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135be:	e072      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80135c0:	2380      	movs	r3, #128	; 0x80
 80135c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80135c6:	e06e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80135c8:	697b      	ldr	r3, [r7, #20]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	4a75      	ldr	r2, [pc, #468]	; (80137a4 <UART_SetConfig+0x6a4>)
 80135ce:	4293      	cmp	r3, r2
 80135d0:	d130      	bne.n	8013634 <UART_SetConfig+0x534>
 80135d2:	4b72      	ldr	r3, [pc, #456]	; (801379c <UART_SetConfig+0x69c>)
 80135d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80135d6:	f003 0307 	and.w	r3, r3, #7
 80135da:	2b05      	cmp	r3, #5
 80135dc:	d826      	bhi.n	801362c <UART_SetConfig+0x52c>
 80135de:	a201      	add	r2, pc, #4	; (adr r2, 80135e4 <UART_SetConfig+0x4e4>)
 80135e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135e4:	080135fd 	.word	0x080135fd
 80135e8:	08013605 	.word	0x08013605
 80135ec:	0801360d 	.word	0x0801360d
 80135f0:	08013615 	.word	0x08013615
 80135f4:	0801361d 	.word	0x0801361d
 80135f8:	08013625 	.word	0x08013625
 80135fc:	2300      	movs	r3, #0
 80135fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013602:	e050      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013604:	2304      	movs	r3, #4
 8013606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801360a:	e04c      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801360c:	2308      	movs	r3, #8
 801360e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013612:	e048      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013614:	2310      	movs	r3, #16
 8013616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801361a:	e044      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801361c:	2320      	movs	r3, #32
 801361e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013622:	e040      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013624:	2340      	movs	r3, #64	; 0x40
 8013626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801362a:	e03c      	b.n	80136a6 <UART_SetConfig+0x5a6>
 801362c:	2380      	movs	r3, #128	; 0x80
 801362e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013632:	e038      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	4a5b      	ldr	r2, [pc, #364]	; (80137a8 <UART_SetConfig+0x6a8>)
 801363a:	4293      	cmp	r3, r2
 801363c:	d130      	bne.n	80136a0 <UART_SetConfig+0x5a0>
 801363e:	4b57      	ldr	r3, [pc, #348]	; (801379c <UART_SetConfig+0x69c>)
 8013640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013642:	f003 0307 	and.w	r3, r3, #7
 8013646:	2b05      	cmp	r3, #5
 8013648:	d826      	bhi.n	8013698 <UART_SetConfig+0x598>
 801364a:	a201      	add	r2, pc, #4	; (adr r2, 8013650 <UART_SetConfig+0x550>)
 801364c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013650:	08013669 	.word	0x08013669
 8013654:	08013671 	.word	0x08013671
 8013658:	08013679 	.word	0x08013679
 801365c:	08013681 	.word	0x08013681
 8013660:	08013689 	.word	0x08013689
 8013664:	08013691 	.word	0x08013691
 8013668:	2302      	movs	r3, #2
 801366a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801366e:	e01a      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013670:	2304      	movs	r3, #4
 8013672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013676:	e016      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013678:	2308      	movs	r3, #8
 801367a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801367e:	e012      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013680:	2310      	movs	r3, #16
 8013682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013686:	e00e      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013688:	2320      	movs	r3, #32
 801368a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801368e:	e00a      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013690:	2340      	movs	r3, #64	; 0x40
 8013692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013696:	e006      	b.n	80136a6 <UART_SetConfig+0x5a6>
 8013698:	2380      	movs	r3, #128	; 0x80
 801369a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801369e:	e002      	b.n	80136a6 <UART_SetConfig+0x5a6>
 80136a0:	2380      	movs	r3, #128	; 0x80
 80136a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	4a3f      	ldr	r2, [pc, #252]	; (80137a8 <UART_SetConfig+0x6a8>)
 80136ac:	4293      	cmp	r3, r2
 80136ae:	f040 80f8 	bne.w	80138a2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80136b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80136b6:	2b20      	cmp	r3, #32
 80136b8:	dc46      	bgt.n	8013748 <UART_SetConfig+0x648>
 80136ba:	2b02      	cmp	r3, #2
 80136bc:	f2c0 8082 	blt.w	80137c4 <UART_SetConfig+0x6c4>
 80136c0:	3b02      	subs	r3, #2
 80136c2:	2b1e      	cmp	r3, #30
 80136c4:	d87e      	bhi.n	80137c4 <UART_SetConfig+0x6c4>
 80136c6:	a201      	add	r2, pc, #4	; (adr r2, 80136cc <UART_SetConfig+0x5cc>)
 80136c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136cc:	0801374f 	.word	0x0801374f
 80136d0:	080137c5 	.word	0x080137c5
 80136d4:	08013757 	.word	0x08013757
 80136d8:	080137c5 	.word	0x080137c5
 80136dc:	080137c5 	.word	0x080137c5
 80136e0:	080137c5 	.word	0x080137c5
 80136e4:	08013767 	.word	0x08013767
 80136e8:	080137c5 	.word	0x080137c5
 80136ec:	080137c5 	.word	0x080137c5
 80136f0:	080137c5 	.word	0x080137c5
 80136f4:	080137c5 	.word	0x080137c5
 80136f8:	080137c5 	.word	0x080137c5
 80136fc:	080137c5 	.word	0x080137c5
 8013700:	080137c5 	.word	0x080137c5
 8013704:	08013777 	.word	0x08013777
 8013708:	080137c5 	.word	0x080137c5
 801370c:	080137c5 	.word	0x080137c5
 8013710:	080137c5 	.word	0x080137c5
 8013714:	080137c5 	.word	0x080137c5
 8013718:	080137c5 	.word	0x080137c5
 801371c:	080137c5 	.word	0x080137c5
 8013720:	080137c5 	.word	0x080137c5
 8013724:	080137c5 	.word	0x080137c5
 8013728:	080137c5 	.word	0x080137c5
 801372c:	080137c5 	.word	0x080137c5
 8013730:	080137c5 	.word	0x080137c5
 8013734:	080137c5 	.word	0x080137c5
 8013738:	080137c5 	.word	0x080137c5
 801373c:	080137c5 	.word	0x080137c5
 8013740:	080137c5 	.word	0x080137c5
 8013744:	080137b7 	.word	0x080137b7
 8013748:	2b40      	cmp	r3, #64	; 0x40
 801374a:	d037      	beq.n	80137bc <UART_SetConfig+0x6bc>
 801374c:	e03a      	b.n	80137c4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801374e:	f7fc f995 	bl	800fa7c <HAL_RCCEx_GetD3PCLK1Freq>
 8013752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013754:	e03c      	b.n	80137d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801375a:	4618      	mov	r0, r3
 801375c:	f7fc f9a4 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013764:	e034      	b.n	80137d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013766:	f107 0318 	add.w	r3, r7, #24
 801376a:	4618      	mov	r0, r3
 801376c:	f7fc faf0 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013774:	e02c      	b.n	80137d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013776:	4b09      	ldr	r3, [pc, #36]	; (801379c <UART_SetConfig+0x69c>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	f003 0320 	and.w	r3, r3, #32
 801377e:	2b00      	cmp	r3, #0
 8013780:	d016      	beq.n	80137b0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013782:	4b06      	ldr	r3, [pc, #24]	; (801379c <UART_SetConfig+0x69c>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	08db      	lsrs	r3, r3, #3
 8013788:	f003 0303 	and.w	r3, r3, #3
 801378c:	4a07      	ldr	r2, [pc, #28]	; (80137ac <UART_SetConfig+0x6ac>)
 801378e:	fa22 f303 	lsr.w	r3, r2, r3
 8013792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013794:	e01c      	b.n	80137d0 <UART_SetConfig+0x6d0>
 8013796:	bf00      	nop
 8013798:	40011400 	.word	0x40011400
 801379c:	58024400 	.word	0x58024400
 80137a0:	40007800 	.word	0x40007800
 80137a4:	40007c00 	.word	0x40007c00
 80137a8:	58000c00 	.word	0x58000c00
 80137ac:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80137b0:	4b9d      	ldr	r3, [pc, #628]	; (8013a28 <UART_SetConfig+0x928>)
 80137b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137b4:	e00c      	b.n	80137d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80137b6:	4b9d      	ldr	r3, [pc, #628]	; (8013a2c <UART_SetConfig+0x92c>)
 80137b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137ba:	e009      	b.n	80137d0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80137bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137c2:	e005      	b.n	80137d0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80137c4:	2300      	movs	r3, #0
 80137c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80137c8:	2301      	movs	r3, #1
 80137ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80137ce:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80137d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f000 81de 	beq.w	8013b94 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137dc:	4a94      	ldr	r2, [pc, #592]	; (8013a30 <UART_SetConfig+0x930>)
 80137de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80137e2:	461a      	mov	r2, r3
 80137e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80137ea:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80137ec:	697b      	ldr	r3, [r7, #20]
 80137ee:	685a      	ldr	r2, [r3, #4]
 80137f0:	4613      	mov	r3, r2
 80137f2:	005b      	lsls	r3, r3, #1
 80137f4:	4413      	add	r3, r2
 80137f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137f8:	429a      	cmp	r2, r3
 80137fa:	d305      	bcc.n	8013808 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8013802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013804:	429a      	cmp	r2, r3
 8013806:	d903      	bls.n	8013810 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8013808:	2301      	movs	r3, #1
 801380a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801380e:	e1c1      	b.n	8013b94 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013812:	2200      	movs	r2, #0
 8013814:	60bb      	str	r3, [r7, #8]
 8013816:	60fa      	str	r2, [r7, #12]
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801381c:	4a84      	ldr	r2, [pc, #528]	; (8013a30 <UART_SetConfig+0x930>)
 801381e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013822:	b29b      	uxth	r3, r3
 8013824:	2200      	movs	r2, #0
 8013826:	603b      	str	r3, [r7, #0]
 8013828:	607a      	str	r2, [r7, #4]
 801382a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801382e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013832:	f7ec fdad 	bl	8000390 <__aeabi_uldivmod>
 8013836:	4602      	mov	r2, r0
 8013838:	460b      	mov	r3, r1
 801383a:	4610      	mov	r0, r2
 801383c:	4619      	mov	r1, r3
 801383e:	f04f 0200 	mov.w	r2, #0
 8013842:	f04f 0300 	mov.w	r3, #0
 8013846:	020b      	lsls	r3, r1, #8
 8013848:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801384c:	0202      	lsls	r2, r0, #8
 801384e:	6979      	ldr	r1, [r7, #20]
 8013850:	6849      	ldr	r1, [r1, #4]
 8013852:	0849      	lsrs	r1, r1, #1
 8013854:	2000      	movs	r0, #0
 8013856:	460c      	mov	r4, r1
 8013858:	4605      	mov	r5, r0
 801385a:	eb12 0804 	adds.w	r8, r2, r4
 801385e:	eb43 0905 	adc.w	r9, r3, r5
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	2200      	movs	r2, #0
 8013868:	469a      	mov	sl, r3
 801386a:	4693      	mov	fp, r2
 801386c:	4652      	mov	r2, sl
 801386e:	465b      	mov	r3, fp
 8013870:	4640      	mov	r0, r8
 8013872:	4649      	mov	r1, r9
 8013874:	f7ec fd8c 	bl	8000390 <__aeabi_uldivmod>
 8013878:	4602      	mov	r2, r0
 801387a:	460b      	mov	r3, r1
 801387c:	4613      	mov	r3, r2
 801387e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013882:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013886:	d308      	bcc.n	801389a <UART_SetConfig+0x79a>
 8013888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801388e:	d204      	bcs.n	801389a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8013890:	697b      	ldr	r3, [r7, #20]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013896:	60da      	str	r2, [r3, #12]
 8013898:	e17c      	b.n	8013b94 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801389a:	2301      	movs	r3, #1
 801389c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80138a0:	e178      	b.n	8013b94 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	69db      	ldr	r3, [r3, #28]
 80138a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80138aa:	f040 80c5 	bne.w	8013a38 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80138ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80138b2:	2b20      	cmp	r3, #32
 80138b4:	dc48      	bgt.n	8013948 <UART_SetConfig+0x848>
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	db7b      	blt.n	80139b2 <UART_SetConfig+0x8b2>
 80138ba:	2b20      	cmp	r3, #32
 80138bc:	d879      	bhi.n	80139b2 <UART_SetConfig+0x8b2>
 80138be:	a201      	add	r2, pc, #4	; (adr r2, 80138c4 <UART_SetConfig+0x7c4>)
 80138c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80138c4:	0801394f 	.word	0x0801394f
 80138c8:	08013957 	.word	0x08013957
 80138cc:	080139b3 	.word	0x080139b3
 80138d0:	080139b3 	.word	0x080139b3
 80138d4:	0801395f 	.word	0x0801395f
 80138d8:	080139b3 	.word	0x080139b3
 80138dc:	080139b3 	.word	0x080139b3
 80138e0:	080139b3 	.word	0x080139b3
 80138e4:	0801396f 	.word	0x0801396f
 80138e8:	080139b3 	.word	0x080139b3
 80138ec:	080139b3 	.word	0x080139b3
 80138f0:	080139b3 	.word	0x080139b3
 80138f4:	080139b3 	.word	0x080139b3
 80138f8:	080139b3 	.word	0x080139b3
 80138fc:	080139b3 	.word	0x080139b3
 8013900:	080139b3 	.word	0x080139b3
 8013904:	0801397f 	.word	0x0801397f
 8013908:	080139b3 	.word	0x080139b3
 801390c:	080139b3 	.word	0x080139b3
 8013910:	080139b3 	.word	0x080139b3
 8013914:	080139b3 	.word	0x080139b3
 8013918:	080139b3 	.word	0x080139b3
 801391c:	080139b3 	.word	0x080139b3
 8013920:	080139b3 	.word	0x080139b3
 8013924:	080139b3 	.word	0x080139b3
 8013928:	080139b3 	.word	0x080139b3
 801392c:	080139b3 	.word	0x080139b3
 8013930:	080139b3 	.word	0x080139b3
 8013934:	080139b3 	.word	0x080139b3
 8013938:	080139b3 	.word	0x080139b3
 801393c:	080139b3 	.word	0x080139b3
 8013940:	080139b3 	.word	0x080139b3
 8013944:	080139a5 	.word	0x080139a5
 8013948:	2b40      	cmp	r3, #64	; 0x40
 801394a:	d02e      	beq.n	80139aa <UART_SetConfig+0x8aa>
 801394c:	e031      	b.n	80139b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801394e:	f7fa f8df 	bl	800db10 <HAL_RCC_GetPCLK1Freq>
 8013952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013954:	e033      	b.n	80139be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013956:	f7fa f8f1 	bl	800db3c <HAL_RCC_GetPCLK2Freq>
 801395a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801395c:	e02f      	b.n	80139be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801395e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013962:	4618      	mov	r0, r3
 8013964:	f7fc f8a0 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801396a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801396c:	e027      	b.n	80139be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801396e:	f107 0318 	add.w	r3, r7, #24
 8013972:	4618      	mov	r0, r3
 8013974:	f7fc f9ec 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801397c:	e01f      	b.n	80139be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801397e:	4b2d      	ldr	r3, [pc, #180]	; (8013a34 <UART_SetConfig+0x934>)
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 0320 	and.w	r3, r3, #32
 8013986:	2b00      	cmp	r3, #0
 8013988:	d009      	beq.n	801399e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801398a:	4b2a      	ldr	r3, [pc, #168]	; (8013a34 <UART_SetConfig+0x934>)
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	08db      	lsrs	r3, r3, #3
 8013990:	f003 0303 	and.w	r3, r3, #3
 8013994:	4a24      	ldr	r2, [pc, #144]	; (8013a28 <UART_SetConfig+0x928>)
 8013996:	fa22 f303 	lsr.w	r3, r2, r3
 801399a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801399c:	e00f      	b.n	80139be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801399e:	4b22      	ldr	r3, [pc, #136]	; (8013a28 <UART_SetConfig+0x928>)
 80139a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139a2:	e00c      	b.n	80139be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80139a4:	4b21      	ldr	r3, [pc, #132]	; (8013a2c <UART_SetConfig+0x92c>)
 80139a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139a8:	e009      	b.n	80139be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80139aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80139ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80139b0:	e005      	b.n	80139be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80139b2:	2300      	movs	r3, #0
 80139b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80139b6:	2301      	movs	r3, #1
 80139b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80139bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80139be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f000 80e7 	beq.w	8013b94 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80139c6:	697b      	ldr	r3, [r7, #20]
 80139c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139ca:	4a19      	ldr	r2, [pc, #100]	; (8013a30 <UART_SetConfig+0x930>)
 80139cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80139d0:	461a      	mov	r2, r3
 80139d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80139d8:	005a      	lsls	r2, r3, #1
 80139da:	697b      	ldr	r3, [r7, #20]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	085b      	lsrs	r3, r3, #1
 80139e0:	441a      	add	r2, r3
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	685b      	ldr	r3, [r3, #4]
 80139e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80139ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80139ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ee:	2b0f      	cmp	r3, #15
 80139f0:	d916      	bls.n	8013a20 <UART_SetConfig+0x920>
 80139f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80139f8:	d212      	bcs.n	8013a20 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80139fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	f023 030f 	bic.w	r3, r3, #15
 8013a02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a06:	085b      	lsrs	r3, r3, #1
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	f003 0307 	and.w	r3, r3, #7
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013a12:	4313      	orrs	r3, r2
 8013a14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8013a16:	697b      	ldr	r3, [r7, #20]
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013a1c:	60da      	str	r2, [r3, #12]
 8013a1e:	e0b9      	b.n	8013b94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013a20:	2301      	movs	r3, #1
 8013a22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013a26:	e0b5      	b.n	8013b94 <UART_SetConfig+0xa94>
 8013a28:	03d09000 	.word	0x03d09000
 8013a2c:	003d0900 	.word	0x003d0900
 8013a30:	080176e0 	.word	0x080176e0
 8013a34:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8013a38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013a3c:	2b20      	cmp	r3, #32
 8013a3e:	dc49      	bgt.n	8013ad4 <UART_SetConfig+0x9d4>
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	db7c      	blt.n	8013b3e <UART_SetConfig+0xa3e>
 8013a44:	2b20      	cmp	r3, #32
 8013a46:	d87a      	bhi.n	8013b3e <UART_SetConfig+0xa3e>
 8013a48:	a201      	add	r2, pc, #4	; (adr r2, 8013a50 <UART_SetConfig+0x950>)
 8013a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a4e:	bf00      	nop
 8013a50:	08013adb 	.word	0x08013adb
 8013a54:	08013ae3 	.word	0x08013ae3
 8013a58:	08013b3f 	.word	0x08013b3f
 8013a5c:	08013b3f 	.word	0x08013b3f
 8013a60:	08013aeb 	.word	0x08013aeb
 8013a64:	08013b3f 	.word	0x08013b3f
 8013a68:	08013b3f 	.word	0x08013b3f
 8013a6c:	08013b3f 	.word	0x08013b3f
 8013a70:	08013afb 	.word	0x08013afb
 8013a74:	08013b3f 	.word	0x08013b3f
 8013a78:	08013b3f 	.word	0x08013b3f
 8013a7c:	08013b3f 	.word	0x08013b3f
 8013a80:	08013b3f 	.word	0x08013b3f
 8013a84:	08013b3f 	.word	0x08013b3f
 8013a88:	08013b3f 	.word	0x08013b3f
 8013a8c:	08013b3f 	.word	0x08013b3f
 8013a90:	08013b0b 	.word	0x08013b0b
 8013a94:	08013b3f 	.word	0x08013b3f
 8013a98:	08013b3f 	.word	0x08013b3f
 8013a9c:	08013b3f 	.word	0x08013b3f
 8013aa0:	08013b3f 	.word	0x08013b3f
 8013aa4:	08013b3f 	.word	0x08013b3f
 8013aa8:	08013b3f 	.word	0x08013b3f
 8013aac:	08013b3f 	.word	0x08013b3f
 8013ab0:	08013b3f 	.word	0x08013b3f
 8013ab4:	08013b3f 	.word	0x08013b3f
 8013ab8:	08013b3f 	.word	0x08013b3f
 8013abc:	08013b3f 	.word	0x08013b3f
 8013ac0:	08013b3f 	.word	0x08013b3f
 8013ac4:	08013b3f 	.word	0x08013b3f
 8013ac8:	08013b3f 	.word	0x08013b3f
 8013acc:	08013b3f 	.word	0x08013b3f
 8013ad0:	08013b31 	.word	0x08013b31
 8013ad4:	2b40      	cmp	r3, #64	; 0x40
 8013ad6:	d02e      	beq.n	8013b36 <UART_SetConfig+0xa36>
 8013ad8:	e031      	b.n	8013b3e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ada:	f7fa f819 	bl	800db10 <HAL_RCC_GetPCLK1Freq>
 8013ade:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013ae0:	e033      	b.n	8013b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013ae2:	f7fa f82b 	bl	800db3c <HAL_RCC_GetPCLK2Freq>
 8013ae6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013ae8:	e02f      	b.n	8013b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013aee:	4618      	mov	r0, r3
 8013af0:	f7fb ffda 	bl	800faa8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013af8:	e027      	b.n	8013b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013afa:	f107 0318 	add.w	r3, r7, #24
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7fc f926 	bl	800fd50 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013b08:	e01f      	b.n	8013b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013b0a:	4b2d      	ldr	r3, [pc, #180]	; (8013bc0 <UART_SetConfig+0xac0>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	f003 0320 	and.w	r3, r3, #32
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d009      	beq.n	8013b2a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013b16:	4b2a      	ldr	r3, [pc, #168]	; (8013bc0 <UART_SetConfig+0xac0>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	08db      	lsrs	r3, r3, #3
 8013b1c:	f003 0303 	and.w	r3, r3, #3
 8013b20:	4a28      	ldr	r2, [pc, #160]	; (8013bc4 <UART_SetConfig+0xac4>)
 8013b22:	fa22 f303 	lsr.w	r3, r2, r3
 8013b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013b28:	e00f      	b.n	8013b4a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8013b2a:	4b26      	ldr	r3, [pc, #152]	; (8013bc4 <UART_SetConfig+0xac4>)
 8013b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013b2e:	e00c      	b.n	8013b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013b30:	4b25      	ldr	r3, [pc, #148]	; (8013bc8 <UART_SetConfig+0xac8>)
 8013b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013b34:	e009      	b.n	8013b4a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013b3c:	e005      	b.n	8013b4a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8013b3e:	2300      	movs	r3, #0
 8013b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013b42:	2301      	movs	r3, #1
 8013b44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8013b48:	bf00      	nop
    }

    if (pclk != 0U)
 8013b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d021      	beq.n	8013b94 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b54:	4a1d      	ldr	r2, [pc, #116]	; (8013bcc <UART_SetConfig+0xacc>)
 8013b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	085b      	lsrs	r3, r3, #1
 8013b68:	441a      	add	r2, r3
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	685b      	ldr	r3, [r3, #4]
 8013b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013b72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b76:	2b0f      	cmp	r3, #15
 8013b78:	d909      	bls.n	8013b8e <UART_SetConfig+0xa8e>
 8013b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b80:	d205      	bcs.n	8013b8e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	60da      	str	r2, [r3, #12]
 8013b8c:	e002      	b.n	8013b94 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8013b8e:	2301      	movs	r3, #1
 8013b90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	2201      	movs	r2, #1
 8013b98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013b9c:	697b      	ldr	r3, [r7, #20]
 8013b9e:	2201      	movs	r2, #1
 8013ba0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	2200      	movs	r2, #0
 8013ba8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	2200      	movs	r2, #0
 8013bae:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8013bb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3748      	adds	r7, #72	; 0x48
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8013bbe:	bf00      	nop
 8013bc0:	58024400 	.word	0x58024400
 8013bc4:	03d09000 	.word	0x03d09000
 8013bc8:	003d0900 	.word	0x003d0900
 8013bcc:	080176e0 	.word	0x080176e0

08013bd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bdc:	f003 0301 	and.w	r3, r3, #1
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00a      	beq.n	8013bfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	685b      	ldr	r3, [r3, #4]
 8013bea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	430a      	orrs	r2, r1
 8013bf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bfe:	f003 0302 	and.w	r3, r3, #2
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d00a      	beq.n	8013c1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	430a      	orrs	r2, r1
 8013c1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c20:	f003 0304 	and.w	r3, r3, #4
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d00a      	beq.n	8013c3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	685b      	ldr	r3, [r3, #4]
 8013c2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	681b      	ldr	r3, [r3, #0]
 8013c3a:	430a      	orrs	r2, r1
 8013c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c42:	f003 0308 	and.w	r3, r3, #8
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00a      	beq.n	8013c60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	430a      	orrs	r2, r1
 8013c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c64:	f003 0310 	and.w	r3, r3, #16
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00a      	beq.n	8013c82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	689b      	ldr	r3, [r3, #8]
 8013c72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	430a      	orrs	r2, r1
 8013c80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c86:	f003 0320 	and.w	r3, r3, #32
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d00a      	beq.n	8013ca4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	689b      	ldr	r3, [r3, #8]
 8013c94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	430a      	orrs	r2, r1
 8013ca2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d01a      	beq.n	8013ce6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	685b      	ldr	r3, [r3, #4]
 8013cb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	430a      	orrs	r2, r1
 8013cc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013cce:	d10a      	bne.n	8013ce6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	430a      	orrs	r2, r1
 8013ce4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00a      	beq.n	8013d08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	685b      	ldr	r3, [r3, #4]
 8013cf8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	430a      	orrs	r2, r1
 8013d06:	605a      	str	r2, [r3, #4]
  }
}
 8013d08:	bf00      	nop
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d12:	4770      	bx	lr

08013d14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b098      	sub	sp, #96	; 0x60
 8013d18:	af02      	add	r7, sp, #8
 8013d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013d24:	f7f3 fb40 	bl	80073a8 <HAL_GetTick>
 8013d28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f003 0308 	and.w	r3, r3, #8
 8013d34:	2b08      	cmp	r3, #8
 8013d36:	d12f      	bne.n	8013d98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013d38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013d3c:	9300      	str	r3, [sp, #0]
 8013d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d40:	2200      	movs	r2, #0
 8013d42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013d46:	6878      	ldr	r0, [r7, #4]
 8013d48:	f000 f88e 	bl	8013e68 <UART_WaitOnFlagUntilTimeout>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d022      	beq.n	8013d98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5a:	e853 3f00 	ldrex	r3, [r3]
 8013d5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013d66:	653b      	str	r3, [r7, #80]	; 0x50
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	461a      	mov	r2, r3
 8013d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d70:	647b      	str	r3, [r7, #68]	; 0x44
 8013d72:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d78:	e841 2300 	strex	r3, r2, [r1]
 8013d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1e6      	bne.n	8013d52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2220      	movs	r2, #32
 8013d88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	2200      	movs	r2, #0
 8013d90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013d94:	2303      	movs	r3, #3
 8013d96:	e063      	b.n	8013e60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f003 0304 	and.w	r3, r3, #4
 8013da2:	2b04      	cmp	r3, #4
 8013da4:	d149      	bne.n	8013e3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013da6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013dae:	2200      	movs	r2, #0
 8013db0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f000 f857 	bl	8013e68 <UART_WaitOnFlagUntilTimeout>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d03c      	beq.n	8013e3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dc8:	e853 3f00 	ldrex	r3, [r3]
 8013dcc:	623b      	str	r3, [r7, #32]
   return(result);
 8013dce:	6a3b      	ldr	r3, [r7, #32]
 8013dd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dde:	633b      	str	r3, [r7, #48]	; 0x30
 8013de0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013de6:	e841 2300 	strex	r3, r2, [r1]
 8013dea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d1e6      	bne.n	8013dc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	3308      	adds	r3, #8
 8013df8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dfa:	693b      	ldr	r3, [r7, #16]
 8013dfc:	e853 3f00 	ldrex	r3, [r3]
 8013e00:	60fb      	str	r3, [r7, #12]
   return(result);
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f023 0301 	bic.w	r3, r3, #1
 8013e08:	64bb      	str	r3, [r7, #72]	; 0x48
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	3308      	adds	r3, #8
 8013e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013e12:	61fa      	str	r2, [r7, #28]
 8013e14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e16:	69b9      	ldr	r1, [r7, #24]
 8013e18:	69fa      	ldr	r2, [r7, #28]
 8013e1a:	e841 2300 	strex	r3, r2, [r1]
 8013e1e:	617b      	str	r3, [r7, #20]
   return(result);
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d1e5      	bne.n	8013df2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	2220      	movs	r2, #32
 8013e2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	2200      	movs	r2, #0
 8013e32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013e36:	2303      	movs	r3, #3
 8013e38:	e012      	b.n	8013e60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2220      	movs	r2, #32
 8013e3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2220      	movs	r2, #32
 8013e46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	2200      	movs	r2, #0
 8013e4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	2200      	movs	r2, #0
 8013e54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013e5e:	2300      	movs	r3, #0
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3758      	adds	r7, #88	; 0x58
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}

08013e68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013e68:	b580      	push	{r7, lr}
 8013e6a:	b084      	sub	sp, #16
 8013e6c:	af00      	add	r7, sp, #0
 8013e6e:	60f8      	str	r0, [r7, #12]
 8013e70:	60b9      	str	r1, [r7, #8]
 8013e72:	603b      	str	r3, [r7, #0]
 8013e74:	4613      	mov	r3, r2
 8013e76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013e78:	e049      	b.n	8013f0e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013e7a:	69bb      	ldr	r3, [r7, #24]
 8013e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e80:	d045      	beq.n	8013f0e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e82:	f7f3 fa91 	bl	80073a8 <HAL_GetTick>
 8013e86:	4602      	mov	r2, r0
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	1ad3      	subs	r3, r2, r3
 8013e8c:	69ba      	ldr	r2, [r7, #24]
 8013e8e:	429a      	cmp	r2, r3
 8013e90:	d302      	bcc.n	8013e98 <UART_WaitOnFlagUntilTimeout+0x30>
 8013e92:	69bb      	ldr	r3, [r7, #24]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d101      	bne.n	8013e9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013e98:	2303      	movs	r3, #3
 8013e9a:	e048      	b.n	8013f2e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013e9c:	68fb      	ldr	r3, [r7, #12]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f003 0304 	and.w	r3, r3, #4
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d031      	beq.n	8013f0e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	69db      	ldr	r3, [r3, #28]
 8013eb0:	f003 0308 	and.w	r3, r3, #8
 8013eb4:	2b08      	cmp	r3, #8
 8013eb6:	d110      	bne.n	8013eda <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	2208      	movs	r2, #8
 8013ebe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013ec0:	68f8      	ldr	r0, [r7, #12]
 8013ec2:	f000 f921 	bl	8014108 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2208      	movs	r2, #8
 8013eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	e029      	b.n	8013f2e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	69db      	ldr	r3, [r3, #28]
 8013ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ee8:	d111      	bne.n	8013f0e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013ef2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f000 f907 	bl	8014108 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2220      	movs	r2, #32
 8013efe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	2200      	movs	r2, #0
 8013f06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013f0a:	2303      	movs	r3, #3
 8013f0c:	e00f      	b.n	8013f2e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	69da      	ldr	r2, [r3, #28]
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	4013      	ands	r3, r2
 8013f18:	68ba      	ldr	r2, [r7, #8]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	bf0c      	ite	eq
 8013f1e:	2301      	moveq	r3, #1
 8013f20:	2300      	movne	r3, #0
 8013f22:	b2db      	uxtb	r3, r3
 8013f24:	461a      	mov	r2, r3
 8013f26:	79fb      	ldrb	r3, [r7, #7]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d0a6      	beq.n	8013e7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013f2c:	2300      	movs	r3, #0
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
	...

08013f38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b096      	sub	sp, #88	; 0x58
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	4613      	mov	r3, r2
 8013f44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013f46:	68fb      	ldr	r3, [r7, #12]
 8013f48:	68ba      	ldr	r2, [r7, #8]
 8013f4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	88fa      	ldrh	r2, [r7, #6]
 8013f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2200      	movs	r2, #0
 8013f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	2222      	movs	r2, #34	; 0x22
 8013f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d02d      	beq.n	8013fca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f74:	4a40      	ldr	r2, [pc, #256]	; (8014078 <UART_Start_Receive_DMA+0x140>)
 8013f76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f7e:	4a3f      	ldr	r2, [pc, #252]	; (801407c <UART_Start_Receive_DMA+0x144>)
 8013f80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f88:	4a3d      	ldr	r2, [pc, #244]	; (8014080 <UART_Start_Receive_DMA+0x148>)
 8013f8a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013f92:	2200      	movs	r2, #0
 8013f94:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	3324      	adds	r3, #36	; 0x24
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013fa8:	461a      	mov	r2, r3
 8013faa:	88fb      	ldrh	r3, [r7, #6]
 8013fac:	f7f5 fc24 	bl	80097f8 <HAL_DMA_Start_IT>
 8013fb0:	4603      	mov	r3, r0
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d009      	beq.n	8013fca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	2210      	movs	r2, #16
 8013fba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2220      	movs	r2, #32
 8013fc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 8013fc6:	2301      	movs	r3, #1
 8013fc8:	e051      	b.n	801406e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	691b      	ldr	r3, [r3, #16]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d018      	beq.n	8014004 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	681b      	ldr	r3, [r3, #0]
 8013fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fda:	e853 3f00 	ldrex	r3, [r3]
 8013fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fe6:	657b      	str	r3, [r7, #84]	; 0x54
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	461a      	mov	r2, r3
 8013fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8013ff2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ff4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ff8:	e841 2300 	strex	r3, r2, [r1]
 8013ffc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014000:	2b00      	cmp	r3, #0
 8014002:	d1e6      	bne.n	8013fd2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	3308      	adds	r3, #8
 801400a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400e:	e853 3f00 	ldrex	r3, [r3]
 8014012:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014016:	f043 0301 	orr.w	r3, r3, #1
 801401a:	653b      	str	r3, [r7, #80]	; 0x50
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	3308      	adds	r3, #8
 8014022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014024:	637a      	str	r2, [r7, #52]	; 0x34
 8014026:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014028:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801402a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801402c:	e841 2300 	strex	r3, r2, [r1]
 8014030:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014034:	2b00      	cmp	r3, #0
 8014036:	d1e5      	bne.n	8014004 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	3308      	adds	r3, #8
 801403e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	e853 3f00 	ldrex	r3, [r3]
 8014046:	613b      	str	r3, [r7, #16]
   return(result);
 8014048:	693b      	ldr	r3, [r7, #16]
 801404a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801404e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	3308      	adds	r3, #8
 8014056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014058:	623a      	str	r2, [r7, #32]
 801405a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801405c:	69f9      	ldr	r1, [r7, #28]
 801405e:	6a3a      	ldr	r2, [r7, #32]
 8014060:	e841 2300 	strex	r3, r2, [r1]
 8014064:	61bb      	str	r3, [r7, #24]
   return(result);
 8014066:	69bb      	ldr	r3, [r7, #24]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d1e5      	bne.n	8014038 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801406c:	2300      	movs	r3, #0
}
 801406e:	4618      	mov	r0, r3
 8014070:	3758      	adds	r7, #88	; 0x58
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	08014287 	.word	0x08014287
 801407c:	080143af 	.word	0x080143af
 8014080:	080143ed 	.word	0x080143ed

08014084 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014084:	b480      	push	{r7}
 8014086:	b08f      	sub	sp, #60	; 0x3c
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014092:	6a3b      	ldr	r3, [r7, #32]
 8014094:	e853 3f00 	ldrex	r3, [r3]
 8014098:	61fb      	str	r3, [r7, #28]
   return(result);
 801409a:	69fb      	ldr	r3, [r7, #28]
 801409c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80140a0:	637b      	str	r3, [r7, #52]	; 0x34
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80140b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80140b2:	e841 2300 	strex	r3, r2, [r1]
 80140b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80140b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d1e6      	bne.n	801408c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	3308      	adds	r3, #8
 80140c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	e853 3f00 	ldrex	r3, [r3]
 80140cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80140d4:	633b      	str	r3, [r7, #48]	; 0x30
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	3308      	adds	r3, #8
 80140dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140de:	61ba      	str	r2, [r7, #24]
 80140e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140e2:	6979      	ldr	r1, [r7, #20]
 80140e4:	69ba      	ldr	r2, [r7, #24]
 80140e6:	e841 2300 	strex	r3, r2, [r1]
 80140ea:	613b      	str	r3, [r7, #16]
   return(result);
 80140ec:	693b      	ldr	r3, [r7, #16]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d1e5      	bne.n	80140be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2220      	movs	r2, #32
 80140f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80140fa:	bf00      	nop
 80140fc:	373c      	adds	r7, #60	; 0x3c
 80140fe:	46bd      	mov	sp, r7
 8014100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014104:	4770      	bx	lr
	...

08014108 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014108:	b480      	push	{r7}
 801410a:	b095      	sub	sp, #84	; 0x54
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014118:	e853 3f00 	ldrex	r3, [r3]
 801411c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014124:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	461a      	mov	r2, r3
 801412c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801412e:	643b      	str	r3, [r7, #64]	; 0x40
 8014130:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014132:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014134:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014136:	e841 2300 	strex	r3, r2, [r1]
 801413a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801413e:	2b00      	cmp	r3, #0
 8014140:	d1e6      	bne.n	8014110 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	681b      	ldr	r3, [r3, #0]
 8014146:	3308      	adds	r3, #8
 8014148:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801414a:	6a3b      	ldr	r3, [r7, #32]
 801414c:	e853 3f00 	ldrex	r3, [r3]
 8014150:	61fb      	str	r3, [r7, #28]
   return(result);
 8014152:	69fa      	ldr	r2, [r7, #28]
 8014154:	4b1e      	ldr	r3, [pc, #120]	; (80141d0 <UART_EndRxTransfer+0xc8>)
 8014156:	4013      	ands	r3, r2
 8014158:	64bb      	str	r3, [r7, #72]	; 0x48
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	3308      	adds	r3, #8
 8014160:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014162:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014164:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014166:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801416a:	e841 2300 	strex	r3, r2, [r1]
 801416e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014172:	2b00      	cmp	r3, #0
 8014174:	d1e5      	bne.n	8014142 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801417a:	2b01      	cmp	r3, #1
 801417c:	d118      	bne.n	80141b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	e853 3f00 	ldrex	r3, [r3]
 801418a:	60bb      	str	r3, [r7, #8]
   return(result);
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	f023 0310 	bic.w	r3, r3, #16
 8014192:	647b      	str	r3, [r7, #68]	; 0x44
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	461a      	mov	r2, r3
 801419a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801419c:	61bb      	str	r3, [r7, #24]
 801419e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141a0:	6979      	ldr	r1, [r7, #20]
 80141a2:	69ba      	ldr	r2, [r7, #24]
 80141a4:	e841 2300 	strex	r3, r2, [r1]
 80141a8:	613b      	str	r3, [r7, #16]
   return(result);
 80141aa:	693b      	ldr	r3, [r7, #16]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d1e6      	bne.n	801417e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	2220      	movs	r2, #32
 80141b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	2200      	movs	r2, #0
 80141bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2200      	movs	r2, #0
 80141c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80141c4:	bf00      	nop
 80141c6:	3754      	adds	r7, #84	; 0x54
 80141c8:	46bd      	mov	sp, r7
 80141ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ce:	4770      	bx	lr
 80141d0:	effffffe 	.word	0xeffffffe

080141d4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b090      	sub	sp, #64	; 0x40
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141e0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	69db      	ldr	r3, [r3, #28]
 80141e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80141ea:	d037      	beq.n	801425c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80141ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ee:	2200      	movs	r2, #0
 80141f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80141f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	3308      	adds	r3, #8
 80141fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fe:	e853 3f00 	ldrex	r3, [r3]
 8014202:	623b      	str	r3, [r7, #32]
   return(result);
 8014204:	6a3b      	ldr	r3, [r7, #32]
 8014206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801420a:	63bb      	str	r3, [r7, #56]	; 0x38
 801420c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	3308      	adds	r3, #8
 8014212:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014214:	633a      	str	r2, [r7, #48]	; 0x30
 8014216:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014218:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801421a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801421c:	e841 2300 	strex	r3, r2, [r1]
 8014220:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014224:	2b00      	cmp	r3, #0
 8014226:	d1e5      	bne.n	80141f4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801422e:	693b      	ldr	r3, [r7, #16]
 8014230:	e853 3f00 	ldrex	r3, [r3]
 8014234:	60fb      	str	r3, [r7, #12]
   return(result);
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801423c:	637b      	str	r3, [r7, #52]	; 0x34
 801423e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	461a      	mov	r2, r3
 8014244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014246:	61fb      	str	r3, [r7, #28]
 8014248:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801424a:	69b9      	ldr	r1, [r7, #24]
 801424c:	69fa      	ldr	r2, [r7, #28]
 801424e:	e841 2300 	strex	r3, r2, [r1]
 8014252:	617b      	str	r3, [r7, #20]
   return(result);
 8014254:	697b      	ldr	r3, [r7, #20]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d1e6      	bne.n	8014228 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801425a:	e002      	b.n	8014262 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 801425c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801425e:	f7ef fe89 	bl	8003f74 <HAL_UART_TxCpltCallback>
}
 8014262:	bf00      	nop
 8014264:	3740      	adds	r7, #64	; 0x40
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b084      	sub	sp, #16
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014276:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8014278:	68f8      	ldr	r0, [r7, #12]
 801427a:	f7fe ff2d 	bl	80130d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801427e:	bf00      	nop
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}

08014286 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014286:	b580      	push	{r7, lr}
 8014288:	b09c      	sub	sp, #112	; 0x70
 801428a:	af00      	add	r7, sp, #0
 801428c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014292:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	69db      	ldr	r3, [r3, #28]
 8014298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801429c:	d071      	beq.n	8014382 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801429e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142a0:	2200      	movs	r2, #0
 80142a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80142a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142ae:	e853 3f00 	ldrex	r3, [r3]
 80142b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80142b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80142ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80142bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	461a      	mov	r2, r3
 80142c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80142c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80142c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80142ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80142cc:	e841 2300 	strex	r3, r2, [r1]
 80142d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80142d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d1e6      	bne.n	80142a6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80142d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	3308      	adds	r3, #8
 80142de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e2:	e853 3f00 	ldrex	r3, [r3]
 80142e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80142e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142ea:	f023 0301 	bic.w	r3, r3, #1
 80142ee:	667b      	str	r3, [r7, #100]	; 0x64
 80142f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	3308      	adds	r3, #8
 80142f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80142f8:	647a      	str	r2, [r7, #68]	; 0x44
 80142fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80142fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014300:	e841 2300 	strex	r3, r2, [r1]
 8014304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014308:	2b00      	cmp	r3, #0
 801430a:	d1e5      	bne.n	80142d8 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	3308      	adds	r3, #8
 8014312:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014316:	e853 3f00 	ldrex	r3, [r3]
 801431a:	623b      	str	r3, [r7, #32]
   return(result);
 801431c:	6a3b      	ldr	r3, [r7, #32]
 801431e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014322:	663b      	str	r3, [r7, #96]	; 0x60
 8014324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	3308      	adds	r3, #8
 801432a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801432c:	633a      	str	r2, [r7, #48]	; 0x30
 801432e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014330:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014334:	e841 2300 	strex	r3, r2, [r1]
 8014338:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1e5      	bne.n	801430c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014342:	2220      	movs	r2, #32
 8014344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801434a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801434c:	2b01      	cmp	r3, #1
 801434e:	d118      	bne.n	8014382 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	e853 3f00 	ldrex	r3, [r3]
 801435c:	60fb      	str	r3, [r7, #12]
   return(result);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	f023 0310 	bic.w	r3, r3, #16
 8014364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	461a      	mov	r2, r3
 801436c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801436e:	61fb      	str	r3, [r7, #28]
 8014370:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014372:	69b9      	ldr	r1, [r7, #24]
 8014374:	69fa      	ldr	r2, [r7, #28]
 8014376:	e841 2300 	strex	r3, r2, [r1]
 801437a:	617b      	str	r3, [r7, #20]
   return(result);
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d1e6      	bne.n	8014350 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014384:	2200      	movs	r2, #0
 8014386:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801438a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801438c:	2b01      	cmp	r3, #1
 801438e:	d107      	bne.n	80143a0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014392:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014396:	4619      	mov	r1, r3
 8014398:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801439a:	f7ef fe87 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801439e:	e002      	b.n	80143a6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80143a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80143a2:	f7ef fdff 	bl	8003fa4 <HAL_UART_RxCpltCallback>
}
 80143a6:	bf00      	nop
 80143a8:	3770      	adds	r7, #112	; 0x70
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}

080143ae <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b084      	sub	sp, #16
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143ba:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80143bc:	68fb      	ldr	r3, [r7, #12]
 80143be:	2201      	movs	r2, #1
 80143c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143c6:	2b01      	cmp	r3, #1
 80143c8:	d109      	bne.n	80143de <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80143d0:	085b      	lsrs	r3, r3, #1
 80143d2:	b29b      	uxth	r3, r3
 80143d4:	4619      	mov	r1, r3
 80143d6:	68f8      	ldr	r0, [r7, #12]
 80143d8:	f7ef fe68 	bl	80040ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80143dc:	e002      	b.n	80143e4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f7fe fe84 	bl	80130ec <HAL_UART_RxHalfCpltCallback>
}
 80143e4:	bf00      	nop
 80143e6:	3710      	adds	r7, #16
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}

080143ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b086      	sub	sp, #24
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80143f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80143fa:	697b      	ldr	r3, [r7, #20]
 80143fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014400:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014408:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	689b      	ldr	r3, [r3, #8]
 8014410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014414:	2b80      	cmp	r3, #128	; 0x80
 8014416:	d109      	bne.n	801442c <UART_DMAError+0x40>
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	2b21      	cmp	r3, #33	; 0x21
 801441c:	d106      	bne.n	801442c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	2200      	movs	r2, #0
 8014422:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8014426:	6978      	ldr	r0, [r7, #20]
 8014428:	f7ff fe2c 	bl	8014084 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	689b      	ldr	r3, [r3, #8]
 8014432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014436:	2b40      	cmp	r3, #64	; 0x40
 8014438:	d109      	bne.n	801444e <UART_DMAError+0x62>
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	2b22      	cmp	r3, #34	; 0x22
 801443e:	d106      	bne.n	801444e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	2200      	movs	r2, #0
 8014444:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8014448:	6978      	ldr	r0, [r7, #20]
 801444a:	f7ff fe5d 	bl	8014108 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014454:	f043 0210 	orr.w	r2, r3, #16
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801445e:	6978      	ldr	r0, [r7, #20]
 8014460:	f7ef ff2c 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014464:	bf00      	nop
 8014466:	3718      	adds	r7, #24
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b084      	sub	sp, #16
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014478:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	2200      	movs	r2, #0
 801447e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	2200      	movs	r2, #0
 8014486:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801448a:	68f8      	ldr	r0, [r7, #12]
 801448c:	f7ef ff16 	bl	80042bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014490:	bf00      	nop
 8014492:	3710      	adds	r7, #16
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b088      	sub	sp, #32
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	e853 3f00 	ldrex	r3, [r3]
 80144ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80144b4:	61fb      	str	r3, [r7, #28]
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	461a      	mov	r2, r3
 80144bc:	69fb      	ldr	r3, [r7, #28]
 80144be:	61bb      	str	r3, [r7, #24]
 80144c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80144c2:	6979      	ldr	r1, [r7, #20]
 80144c4:	69ba      	ldr	r2, [r7, #24]
 80144c6:	e841 2300 	strex	r3, r2, [r1]
 80144ca:	613b      	str	r3, [r7, #16]
   return(result);
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d1e6      	bne.n	80144a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2220      	movs	r2, #32
 80144d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	2200      	movs	r2, #0
 80144de:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7ef fd47 	bl	8003f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80144e6:	bf00      	nop
 80144e8:	3720      	adds	r7, #32
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80144ee:	b480      	push	{r7}
 80144f0:	b083      	sub	sp, #12
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80144f6:	bf00      	nop
 80144f8:	370c      	adds	r7, #12
 80144fa:	46bd      	mov	sp, r7
 80144fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014500:	4770      	bx	lr

08014502 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014502:	b480      	push	{r7}
 8014504:	b083      	sub	sp, #12
 8014506:	af00      	add	r7, sp, #0
 8014508:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801450a:	bf00      	nop
 801450c:	370c      	adds	r7, #12
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr

08014516 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8014516:	b480      	push	{r7}
 8014518:	b083      	sub	sp, #12
 801451a:	af00      	add	r7, sp, #0
 801451c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801451e:	bf00      	nop
 8014520:	370c      	adds	r7, #12
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801452a:	b480      	push	{r7}
 801452c:	b085      	sub	sp, #20
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014538:	2b01      	cmp	r3, #1
 801453a:	d101      	bne.n	8014540 <HAL_UARTEx_DisableFifoMode+0x16>
 801453c:	2302      	movs	r3, #2
 801453e:	e027      	b.n	8014590 <HAL_UARTEx_DisableFifoMode+0x66>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	2201      	movs	r2, #1
 8014544:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2224      	movs	r2, #36	; 0x24
 801454c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	681a      	ldr	r2, [r3, #0]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	f022 0201 	bic.w	r2, r2, #1
 8014566:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801456e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	68fa      	ldr	r2, [r7, #12]
 801457c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	2220      	movs	r2, #32
 8014582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2200      	movs	r2, #0
 801458a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801458e:	2300      	movs	r3, #0
}
 8014590:	4618      	mov	r0, r3
 8014592:	3714      	adds	r7, #20
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr

0801459c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b084      	sub	sp, #16
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d101      	bne.n	80145b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80145b0:	2302      	movs	r3, #2
 80145b2:	e02d      	b.n	8014610 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2201      	movs	r2, #1
 80145b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2224      	movs	r2, #36	; 0x24
 80145c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	681a      	ldr	r2, [r3, #0]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	f022 0201 	bic.w	r2, r2, #1
 80145da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	689b      	ldr	r3, [r3, #8]
 80145e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	683a      	ldr	r2, [r7, #0]
 80145ec:	430a      	orrs	r2, r1
 80145ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80145f0:	6878      	ldr	r0, [r7, #4]
 80145f2:	f000 f8a3 	bl	801473c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	681b      	ldr	r3, [r3, #0]
 80145fa:	68fa      	ldr	r2, [r7, #12]
 80145fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	2220      	movs	r2, #32
 8014602:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2200      	movs	r2, #0
 801460a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801460e:	2300      	movs	r3, #0
}
 8014610:	4618      	mov	r0, r3
 8014612:	3710      	adds	r7, #16
 8014614:	46bd      	mov	sp, r7
 8014616:	bd80      	pop	{r7, pc}

08014618 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
 8014620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014628:	2b01      	cmp	r3, #1
 801462a:	d101      	bne.n	8014630 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801462c:	2302      	movs	r3, #2
 801462e:	e02d      	b.n	801468c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2201      	movs	r2, #1
 8014634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	2224      	movs	r2, #36	; 0x24
 801463c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	681b      	ldr	r3, [r3, #0]
 8014646:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	681b      	ldr	r3, [r3, #0]
 8014652:	f022 0201 	bic.w	r2, r2, #1
 8014656:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	681b      	ldr	r3, [r3, #0]
 801465c:	689b      	ldr	r3, [r3, #8]
 801465e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	683a      	ldr	r2, [r7, #0]
 8014668:	430a      	orrs	r2, r1
 801466a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801466c:	6878      	ldr	r0, [r7, #4]
 801466e:	f000 f865 	bl	801473c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	68fa      	ldr	r2, [r7, #12]
 8014678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2220      	movs	r2, #32
 801467e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2200      	movs	r2, #0
 8014686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801468a:	2300      	movs	r3, #0
}
 801468c:	4618      	mov	r0, r3
 801468e:	3710      	adds	r7, #16
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b08c      	sub	sp, #48	; 0x30
 8014698:	af00      	add	r7, sp, #0
 801469a:	60f8      	str	r0, [r7, #12]
 801469c:	60b9      	str	r1, [r7, #8]
 801469e:	4613      	mov	r3, r2
 80146a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146a8:	2b20      	cmp	r3, #32
 80146aa:	d142      	bne.n	8014732 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d002      	beq.n	80146b8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80146b2:	88fb      	ldrh	r3, [r7, #6]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d101      	bne.n	80146bc <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80146b8:	2301      	movs	r3, #1
 80146ba:	e03b      	b.n	8014734 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	2201      	movs	r2, #1
 80146c0:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	2200      	movs	r2, #0
 80146c6:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80146c8:	88fb      	ldrh	r3, [r7, #6]
 80146ca:	461a      	mov	r2, r3
 80146cc:	68b9      	ldr	r1, [r7, #8]
 80146ce:	68f8      	ldr	r0, [r7, #12]
 80146d0:	f7ff fc32 	bl	8013f38 <UART_Start_Receive_DMA>
 80146d4:	4603      	mov	r3, r0
 80146d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80146da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d124      	bne.n	801472c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d11d      	bne.n	8014726 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2210      	movs	r2, #16
 80146f0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80146f8:	69bb      	ldr	r3, [r7, #24]
 80146fa:	e853 3f00 	ldrex	r3, [r3]
 80146fe:	617b      	str	r3, [r7, #20]
   return(result);
 8014700:	697b      	ldr	r3, [r7, #20]
 8014702:	f043 0310 	orr.w	r3, r3, #16
 8014706:	62bb      	str	r3, [r7, #40]	; 0x28
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	461a      	mov	r2, r3
 801470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014710:	627b      	str	r3, [r7, #36]	; 0x24
 8014712:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014714:	6a39      	ldr	r1, [r7, #32]
 8014716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014718:	e841 2300 	strex	r3, r2, [r1]
 801471c:	61fb      	str	r3, [r7, #28]
   return(result);
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d1e6      	bne.n	80146f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8014724:	e002      	b.n	801472c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8014726:	2301      	movs	r3, #1
 8014728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801472c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014730:	e000      	b.n	8014734 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014732:	2302      	movs	r3, #2
  }
}
 8014734:	4618      	mov	r0, r3
 8014736:	3730      	adds	r7, #48	; 0x30
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801473c:	b480      	push	{r7}
 801473e:	b085      	sub	sp, #20
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014748:	2b00      	cmp	r3, #0
 801474a:	d108      	bne.n	801475e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2201      	movs	r2, #1
 8014750:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2201      	movs	r2, #1
 8014758:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801475c:	e031      	b.n	80147c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801475e:	2310      	movs	r3, #16
 8014760:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014762:	2310      	movs	r3, #16
 8014764:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	689b      	ldr	r3, [r3, #8]
 801476c:	0e5b      	lsrs	r3, r3, #25
 801476e:	b2db      	uxtb	r3, r3
 8014770:	f003 0307 	and.w	r3, r3, #7
 8014774:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	689b      	ldr	r3, [r3, #8]
 801477c:	0f5b      	lsrs	r3, r3, #29
 801477e:	b2db      	uxtb	r3, r3
 8014780:	f003 0307 	and.w	r3, r3, #7
 8014784:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014786:	7bbb      	ldrb	r3, [r7, #14]
 8014788:	7b3a      	ldrb	r2, [r7, #12]
 801478a:	4911      	ldr	r1, [pc, #68]	; (80147d0 <UARTEx_SetNbDataToProcess+0x94>)
 801478c:	5c8a      	ldrb	r2, [r1, r2]
 801478e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014792:	7b3a      	ldrb	r2, [r7, #12]
 8014794:	490f      	ldr	r1, [pc, #60]	; (80147d4 <UARTEx_SetNbDataToProcess+0x98>)
 8014796:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014798:	fb93 f3f2 	sdiv	r3, r3, r2
 801479c:	b29a      	uxth	r2, r3
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80147a4:	7bfb      	ldrb	r3, [r7, #15]
 80147a6:	7b7a      	ldrb	r2, [r7, #13]
 80147a8:	4909      	ldr	r1, [pc, #36]	; (80147d0 <UARTEx_SetNbDataToProcess+0x94>)
 80147aa:	5c8a      	ldrb	r2, [r1, r2]
 80147ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80147b0:	7b7a      	ldrb	r2, [r7, #13]
 80147b2:	4908      	ldr	r1, [pc, #32]	; (80147d4 <UARTEx_SetNbDataToProcess+0x98>)
 80147b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80147b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80147ba:	b29a      	uxth	r2, r3
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80147c2:	bf00      	nop
 80147c4:	3714      	adds	r7, #20
 80147c6:	46bd      	mov	sp, r7
 80147c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147cc:	4770      	bx	lr
 80147ce:	bf00      	nop
 80147d0:	080176f8 	.word	0x080176f8
 80147d4:	08017700 	.word	0x08017700

080147d8 <_Znaj>:
 80147d8:	f000 b800 	b.w	80147dc <_Znwj>

080147dc <_Znwj>:
 80147dc:	2801      	cmp	r0, #1
 80147de:	bf38      	it	cc
 80147e0:	2001      	movcc	r0, #1
 80147e2:	b510      	push	{r4, lr}
 80147e4:	4604      	mov	r4, r0
 80147e6:	4620      	mov	r0, r4
 80147e8:	f000 f81a 	bl	8014820 <malloc>
 80147ec:	b100      	cbz	r0, 80147f0 <_Znwj+0x14>
 80147ee:	bd10      	pop	{r4, pc}
 80147f0:	f000 f806 	bl	8014800 <_ZSt15get_new_handlerv>
 80147f4:	b908      	cbnz	r0, 80147fa <_Znwj+0x1e>
 80147f6:	f000 f80b 	bl	8014810 <abort>
 80147fa:	4780      	blx	r0
 80147fc:	e7f3      	b.n	80147e6 <_Znwj+0xa>
	...

08014800 <_ZSt15get_new_handlerv>:
 8014800:	4b02      	ldr	r3, [pc, #8]	; (801480c <_ZSt15get_new_handlerv+0xc>)
 8014802:	6818      	ldr	r0, [r3, #0]
 8014804:	f3bf 8f5b 	dmb	ish
 8014808:	4770      	bx	lr
 801480a:	bf00      	nop
 801480c:	2400464c 	.word	0x2400464c

08014810 <abort>:
 8014810:	b508      	push	{r3, lr}
 8014812:	2006      	movs	r0, #6
 8014814:	f000 ff62 	bl	80156dc <raise>
 8014818:	2001      	movs	r0, #1
 801481a:	f7f2 fbb3 	bl	8006f84 <_exit>
	...

08014820 <malloc>:
 8014820:	4b02      	ldr	r3, [pc, #8]	; (801482c <malloc+0xc>)
 8014822:	4601      	mov	r1, r0
 8014824:	6818      	ldr	r0, [r3, #0]
 8014826:	f000 b823 	b.w	8014870 <_malloc_r>
 801482a:	bf00      	nop
 801482c:	240000ac 	.word	0x240000ac

08014830 <sbrk_aligned>:
 8014830:	b570      	push	{r4, r5, r6, lr}
 8014832:	4e0e      	ldr	r6, [pc, #56]	; (801486c <sbrk_aligned+0x3c>)
 8014834:	460c      	mov	r4, r1
 8014836:	6831      	ldr	r1, [r6, #0]
 8014838:	4605      	mov	r5, r0
 801483a:	b911      	cbnz	r1, 8014842 <sbrk_aligned+0x12>
 801483c:	f000 ffa2 	bl	8015784 <_sbrk_r>
 8014840:	6030      	str	r0, [r6, #0]
 8014842:	4621      	mov	r1, r4
 8014844:	4628      	mov	r0, r5
 8014846:	f000 ff9d 	bl	8015784 <_sbrk_r>
 801484a:	1c43      	adds	r3, r0, #1
 801484c:	d00a      	beq.n	8014864 <sbrk_aligned+0x34>
 801484e:	1cc4      	adds	r4, r0, #3
 8014850:	f024 0403 	bic.w	r4, r4, #3
 8014854:	42a0      	cmp	r0, r4
 8014856:	d007      	beq.n	8014868 <sbrk_aligned+0x38>
 8014858:	1a21      	subs	r1, r4, r0
 801485a:	4628      	mov	r0, r5
 801485c:	f000 ff92 	bl	8015784 <_sbrk_r>
 8014860:	3001      	adds	r0, #1
 8014862:	d101      	bne.n	8014868 <sbrk_aligned+0x38>
 8014864:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014868:	4620      	mov	r0, r4
 801486a:	bd70      	pop	{r4, r5, r6, pc}
 801486c:	24004654 	.word	0x24004654

08014870 <_malloc_r>:
 8014870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014874:	1ccd      	adds	r5, r1, #3
 8014876:	f025 0503 	bic.w	r5, r5, #3
 801487a:	3508      	adds	r5, #8
 801487c:	2d0c      	cmp	r5, #12
 801487e:	bf38      	it	cc
 8014880:	250c      	movcc	r5, #12
 8014882:	2d00      	cmp	r5, #0
 8014884:	4607      	mov	r7, r0
 8014886:	db01      	blt.n	801488c <_malloc_r+0x1c>
 8014888:	42a9      	cmp	r1, r5
 801488a:	d905      	bls.n	8014898 <_malloc_r+0x28>
 801488c:	230c      	movs	r3, #12
 801488e:	603b      	str	r3, [r7, #0]
 8014890:	2600      	movs	r6, #0
 8014892:	4630      	mov	r0, r6
 8014894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801496c <_malloc_r+0xfc>
 801489c:	f000 f868 	bl	8014970 <__malloc_lock>
 80148a0:	f8d8 3000 	ldr.w	r3, [r8]
 80148a4:	461c      	mov	r4, r3
 80148a6:	bb5c      	cbnz	r4, 8014900 <_malloc_r+0x90>
 80148a8:	4629      	mov	r1, r5
 80148aa:	4638      	mov	r0, r7
 80148ac:	f7ff ffc0 	bl	8014830 <sbrk_aligned>
 80148b0:	1c43      	adds	r3, r0, #1
 80148b2:	4604      	mov	r4, r0
 80148b4:	d155      	bne.n	8014962 <_malloc_r+0xf2>
 80148b6:	f8d8 4000 	ldr.w	r4, [r8]
 80148ba:	4626      	mov	r6, r4
 80148bc:	2e00      	cmp	r6, #0
 80148be:	d145      	bne.n	801494c <_malloc_r+0xdc>
 80148c0:	2c00      	cmp	r4, #0
 80148c2:	d048      	beq.n	8014956 <_malloc_r+0xe6>
 80148c4:	6823      	ldr	r3, [r4, #0]
 80148c6:	4631      	mov	r1, r6
 80148c8:	4638      	mov	r0, r7
 80148ca:	eb04 0903 	add.w	r9, r4, r3
 80148ce:	f000 ff59 	bl	8015784 <_sbrk_r>
 80148d2:	4581      	cmp	r9, r0
 80148d4:	d13f      	bne.n	8014956 <_malloc_r+0xe6>
 80148d6:	6821      	ldr	r1, [r4, #0]
 80148d8:	1a6d      	subs	r5, r5, r1
 80148da:	4629      	mov	r1, r5
 80148dc:	4638      	mov	r0, r7
 80148de:	f7ff ffa7 	bl	8014830 <sbrk_aligned>
 80148e2:	3001      	adds	r0, #1
 80148e4:	d037      	beq.n	8014956 <_malloc_r+0xe6>
 80148e6:	6823      	ldr	r3, [r4, #0]
 80148e8:	442b      	add	r3, r5
 80148ea:	6023      	str	r3, [r4, #0]
 80148ec:	f8d8 3000 	ldr.w	r3, [r8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d038      	beq.n	8014966 <_malloc_r+0xf6>
 80148f4:	685a      	ldr	r2, [r3, #4]
 80148f6:	42a2      	cmp	r2, r4
 80148f8:	d12b      	bne.n	8014952 <_malloc_r+0xe2>
 80148fa:	2200      	movs	r2, #0
 80148fc:	605a      	str	r2, [r3, #4]
 80148fe:	e00f      	b.n	8014920 <_malloc_r+0xb0>
 8014900:	6822      	ldr	r2, [r4, #0]
 8014902:	1b52      	subs	r2, r2, r5
 8014904:	d41f      	bmi.n	8014946 <_malloc_r+0xd6>
 8014906:	2a0b      	cmp	r2, #11
 8014908:	d917      	bls.n	801493a <_malloc_r+0xca>
 801490a:	1961      	adds	r1, r4, r5
 801490c:	42a3      	cmp	r3, r4
 801490e:	6025      	str	r5, [r4, #0]
 8014910:	bf18      	it	ne
 8014912:	6059      	strne	r1, [r3, #4]
 8014914:	6863      	ldr	r3, [r4, #4]
 8014916:	bf08      	it	eq
 8014918:	f8c8 1000 	streq.w	r1, [r8]
 801491c:	5162      	str	r2, [r4, r5]
 801491e:	604b      	str	r3, [r1, #4]
 8014920:	4638      	mov	r0, r7
 8014922:	f104 060b 	add.w	r6, r4, #11
 8014926:	f000 f829 	bl	801497c <__malloc_unlock>
 801492a:	f026 0607 	bic.w	r6, r6, #7
 801492e:	1d23      	adds	r3, r4, #4
 8014930:	1af2      	subs	r2, r6, r3
 8014932:	d0ae      	beq.n	8014892 <_malloc_r+0x22>
 8014934:	1b9b      	subs	r3, r3, r6
 8014936:	50a3      	str	r3, [r4, r2]
 8014938:	e7ab      	b.n	8014892 <_malloc_r+0x22>
 801493a:	42a3      	cmp	r3, r4
 801493c:	6862      	ldr	r2, [r4, #4]
 801493e:	d1dd      	bne.n	80148fc <_malloc_r+0x8c>
 8014940:	f8c8 2000 	str.w	r2, [r8]
 8014944:	e7ec      	b.n	8014920 <_malloc_r+0xb0>
 8014946:	4623      	mov	r3, r4
 8014948:	6864      	ldr	r4, [r4, #4]
 801494a:	e7ac      	b.n	80148a6 <_malloc_r+0x36>
 801494c:	4634      	mov	r4, r6
 801494e:	6876      	ldr	r6, [r6, #4]
 8014950:	e7b4      	b.n	80148bc <_malloc_r+0x4c>
 8014952:	4613      	mov	r3, r2
 8014954:	e7cc      	b.n	80148f0 <_malloc_r+0x80>
 8014956:	230c      	movs	r3, #12
 8014958:	603b      	str	r3, [r7, #0]
 801495a:	4638      	mov	r0, r7
 801495c:	f000 f80e 	bl	801497c <__malloc_unlock>
 8014960:	e797      	b.n	8014892 <_malloc_r+0x22>
 8014962:	6025      	str	r5, [r4, #0]
 8014964:	e7dc      	b.n	8014920 <_malloc_r+0xb0>
 8014966:	605b      	str	r3, [r3, #4]
 8014968:	deff      	udf	#255	; 0xff
 801496a:	bf00      	nop
 801496c:	24004650 	.word	0x24004650

08014970 <__malloc_lock>:
 8014970:	4801      	ldr	r0, [pc, #4]	; (8014978 <__malloc_lock+0x8>)
 8014972:	f000 bf54 	b.w	801581e <__retarget_lock_acquire_recursive>
 8014976:	bf00      	nop
 8014978:	24004798 	.word	0x24004798

0801497c <__malloc_unlock>:
 801497c:	4801      	ldr	r0, [pc, #4]	; (8014984 <__malloc_unlock+0x8>)
 801497e:	f000 bf4f 	b.w	8015820 <__retarget_lock_release_recursive>
 8014982:	bf00      	nop
 8014984:	24004798 	.word	0x24004798

08014988 <realloc>:
 8014988:	4b02      	ldr	r3, [pc, #8]	; (8014994 <realloc+0xc>)
 801498a:	460a      	mov	r2, r1
 801498c:	4601      	mov	r1, r0
 801498e:	6818      	ldr	r0, [r3, #0]
 8014990:	f000 b802 	b.w	8014998 <_realloc_r>
 8014994:	240000ac 	.word	0x240000ac

08014998 <_realloc_r>:
 8014998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801499c:	4680      	mov	r8, r0
 801499e:	4614      	mov	r4, r2
 80149a0:	460e      	mov	r6, r1
 80149a2:	b921      	cbnz	r1, 80149ae <_realloc_r+0x16>
 80149a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149a8:	4611      	mov	r1, r2
 80149aa:	f7ff bf61 	b.w	8014870 <_malloc_r>
 80149ae:	b92a      	cbnz	r2, 80149bc <_realloc_r+0x24>
 80149b0:	f001 fd3a 	bl	8016428 <_free_r>
 80149b4:	4625      	mov	r5, r4
 80149b6:	4628      	mov	r0, r5
 80149b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149bc:	f002 f8fc 	bl	8016bb8 <_malloc_usable_size_r>
 80149c0:	4284      	cmp	r4, r0
 80149c2:	4607      	mov	r7, r0
 80149c4:	d802      	bhi.n	80149cc <_realloc_r+0x34>
 80149c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80149ca:	d812      	bhi.n	80149f2 <_realloc_r+0x5a>
 80149cc:	4621      	mov	r1, r4
 80149ce:	4640      	mov	r0, r8
 80149d0:	f7ff ff4e 	bl	8014870 <_malloc_r>
 80149d4:	4605      	mov	r5, r0
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d0ed      	beq.n	80149b6 <_realloc_r+0x1e>
 80149da:	42bc      	cmp	r4, r7
 80149dc:	4622      	mov	r2, r4
 80149de:	4631      	mov	r1, r6
 80149e0:	bf28      	it	cs
 80149e2:	463a      	movcs	r2, r7
 80149e4:	f000 ff1d 	bl	8015822 <memcpy>
 80149e8:	4631      	mov	r1, r6
 80149ea:	4640      	mov	r0, r8
 80149ec:	f001 fd1c 	bl	8016428 <_free_r>
 80149f0:	e7e1      	b.n	80149b6 <_realloc_r+0x1e>
 80149f2:	4635      	mov	r5, r6
 80149f4:	e7df      	b.n	80149b6 <_realloc_r+0x1e>

080149f6 <__cvt>:
 80149f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149f8:	ed2d 8b02 	vpush	{d8}
 80149fc:	eeb0 8b40 	vmov.f64	d8, d0
 8014a00:	b085      	sub	sp, #20
 8014a02:	4617      	mov	r7, r2
 8014a04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014a06:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014a08:	ee18 2a90 	vmov	r2, s17
 8014a0c:	f025 0520 	bic.w	r5, r5, #32
 8014a10:	2a00      	cmp	r2, #0
 8014a12:	bfb6      	itet	lt
 8014a14:	222d      	movlt	r2, #45	; 0x2d
 8014a16:	2200      	movge	r2, #0
 8014a18:	eeb1 8b40 	vneglt.f64	d8, d0
 8014a1c:	2d46      	cmp	r5, #70	; 0x46
 8014a1e:	460c      	mov	r4, r1
 8014a20:	701a      	strb	r2, [r3, #0]
 8014a22:	d004      	beq.n	8014a2e <__cvt+0x38>
 8014a24:	2d45      	cmp	r5, #69	; 0x45
 8014a26:	d100      	bne.n	8014a2a <__cvt+0x34>
 8014a28:	3401      	adds	r4, #1
 8014a2a:	2102      	movs	r1, #2
 8014a2c:	e000      	b.n	8014a30 <__cvt+0x3a>
 8014a2e:	2103      	movs	r1, #3
 8014a30:	ab03      	add	r3, sp, #12
 8014a32:	9301      	str	r3, [sp, #4]
 8014a34:	ab02      	add	r3, sp, #8
 8014a36:	9300      	str	r3, [sp, #0]
 8014a38:	4622      	mov	r2, r4
 8014a3a:	4633      	mov	r3, r6
 8014a3c:	eeb0 0b48 	vmov.f64	d0, d8
 8014a40:	f000 ff86 	bl	8015950 <_dtoa_r>
 8014a44:	2d47      	cmp	r5, #71	; 0x47
 8014a46:	d101      	bne.n	8014a4c <__cvt+0x56>
 8014a48:	07fb      	lsls	r3, r7, #31
 8014a4a:	d51a      	bpl.n	8014a82 <__cvt+0x8c>
 8014a4c:	2d46      	cmp	r5, #70	; 0x46
 8014a4e:	eb00 0204 	add.w	r2, r0, r4
 8014a52:	d10c      	bne.n	8014a6e <__cvt+0x78>
 8014a54:	7803      	ldrb	r3, [r0, #0]
 8014a56:	2b30      	cmp	r3, #48	; 0x30
 8014a58:	d107      	bne.n	8014a6a <__cvt+0x74>
 8014a5a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a62:	bf1c      	itt	ne
 8014a64:	f1c4 0401 	rsbne	r4, r4, #1
 8014a68:	6034      	strne	r4, [r6, #0]
 8014a6a:	6833      	ldr	r3, [r6, #0]
 8014a6c:	441a      	add	r2, r3
 8014a6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a76:	bf08      	it	eq
 8014a78:	9203      	streq	r2, [sp, #12]
 8014a7a:	2130      	movs	r1, #48	; 0x30
 8014a7c:	9b03      	ldr	r3, [sp, #12]
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d307      	bcc.n	8014a92 <__cvt+0x9c>
 8014a82:	9b03      	ldr	r3, [sp, #12]
 8014a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a86:	1a1b      	subs	r3, r3, r0
 8014a88:	6013      	str	r3, [r2, #0]
 8014a8a:	b005      	add	sp, #20
 8014a8c:	ecbd 8b02 	vpop	{d8}
 8014a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a92:	1c5c      	adds	r4, r3, #1
 8014a94:	9403      	str	r4, [sp, #12]
 8014a96:	7019      	strb	r1, [r3, #0]
 8014a98:	e7f0      	b.n	8014a7c <__cvt+0x86>

08014a9a <__exponent>:
 8014a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2900      	cmp	r1, #0
 8014aa0:	bfb8      	it	lt
 8014aa2:	4249      	neglt	r1, r1
 8014aa4:	f803 2b02 	strb.w	r2, [r3], #2
 8014aa8:	bfb4      	ite	lt
 8014aaa:	222d      	movlt	r2, #45	; 0x2d
 8014aac:	222b      	movge	r2, #43	; 0x2b
 8014aae:	2909      	cmp	r1, #9
 8014ab0:	7042      	strb	r2, [r0, #1]
 8014ab2:	dd2a      	ble.n	8014b0a <__exponent+0x70>
 8014ab4:	f10d 0207 	add.w	r2, sp, #7
 8014ab8:	4617      	mov	r7, r2
 8014aba:	260a      	movs	r6, #10
 8014abc:	4694      	mov	ip, r2
 8014abe:	fb91 f5f6 	sdiv	r5, r1, r6
 8014ac2:	fb06 1415 	mls	r4, r6, r5, r1
 8014ac6:	3430      	adds	r4, #48	; 0x30
 8014ac8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8014acc:	460c      	mov	r4, r1
 8014ace:	2c63      	cmp	r4, #99	; 0x63
 8014ad0:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8014ad4:	4629      	mov	r1, r5
 8014ad6:	dcf1      	bgt.n	8014abc <__exponent+0x22>
 8014ad8:	3130      	adds	r1, #48	; 0x30
 8014ada:	f1ac 0402 	sub.w	r4, ip, #2
 8014ade:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014ae2:	1c41      	adds	r1, r0, #1
 8014ae4:	4622      	mov	r2, r4
 8014ae6:	42ba      	cmp	r2, r7
 8014ae8:	d30a      	bcc.n	8014b00 <__exponent+0x66>
 8014aea:	f10d 0209 	add.w	r2, sp, #9
 8014aee:	eba2 020c 	sub.w	r2, r2, ip
 8014af2:	42bc      	cmp	r4, r7
 8014af4:	bf88      	it	hi
 8014af6:	2200      	movhi	r2, #0
 8014af8:	4413      	add	r3, r2
 8014afa:	1a18      	subs	r0, r3, r0
 8014afc:	b003      	add	sp, #12
 8014afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b00:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014b04:	f801 5f01 	strb.w	r5, [r1, #1]!
 8014b08:	e7ed      	b.n	8014ae6 <__exponent+0x4c>
 8014b0a:	2330      	movs	r3, #48	; 0x30
 8014b0c:	3130      	adds	r1, #48	; 0x30
 8014b0e:	7083      	strb	r3, [r0, #2]
 8014b10:	70c1      	strb	r1, [r0, #3]
 8014b12:	1d03      	adds	r3, r0, #4
 8014b14:	e7f1      	b.n	8014afa <__exponent+0x60>
	...

08014b18 <_printf_float>:
 8014b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b1c:	b08b      	sub	sp, #44	; 0x2c
 8014b1e:	460c      	mov	r4, r1
 8014b20:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014b24:	4616      	mov	r6, r2
 8014b26:	461f      	mov	r7, r3
 8014b28:	4605      	mov	r5, r0
 8014b2a:	f000 fddf 	bl	80156ec <_localeconv_r>
 8014b2e:	f8d0 b000 	ldr.w	fp, [r0]
 8014b32:	4658      	mov	r0, fp
 8014b34:	f7eb fc24 	bl	8000380 <strlen>
 8014b38:	2300      	movs	r3, #0
 8014b3a:	9308      	str	r3, [sp, #32]
 8014b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8014b40:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014b44:	6822      	ldr	r2, [r4, #0]
 8014b46:	3307      	adds	r3, #7
 8014b48:	f023 0307 	bic.w	r3, r3, #7
 8014b4c:	f103 0108 	add.w	r1, r3, #8
 8014b50:	f8c8 1000 	str.w	r1, [r8]
 8014b54:	ed93 0b00 	vldr	d0, [r3]
 8014b58:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014db8 <_printf_float+0x2a0>
 8014b5c:	eeb0 7bc0 	vabs.f64	d7, d0
 8014b60:	eeb4 7b46 	vcmp.f64	d7, d6
 8014b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b68:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8014b6c:	4682      	mov	sl, r0
 8014b6e:	dd24      	ble.n	8014bba <_printf_float+0xa2>
 8014b70:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b78:	d502      	bpl.n	8014b80 <_printf_float+0x68>
 8014b7a:	232d      	movs	r3, #45	; 0x2d
 8014b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b80:	498f      	ldr	r1, [pc, #572]	; (8014dc0 <_printf_float+0x2a8>)
 8014b82:	4b90      	ldr	r3, [pc, #576]	; (8014dc4 <_printf_float+0x2ac>)
 8014b84:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8014b88:	bf94      	ite	ls
 8014b8a:	4688      	movls	r8, r1
 8014b8c:	4698      	movhi	r8, r3
 8014b8e:	2303      	movs	r3, #3
 8014b90:	6123      	str	r3, [r4, #16]
 8014b92:	f022 0204 	bic.w	r2, r2, #4
 8014b96:	2300      	movs	r3, #0
 8014b98:	6022      	str	r2, [r4, #0]
 8014b9a:	9304      	str	r3, [sp, #16]
 8014b9c:	9700      	str	r7, [sp, #0]
 8014b9e:	4633      	mov	r3, r6
 8014ba0:	aa09      	add	r2, sp, #36	; 0x24
 8014ba2:	4621      	mov	r1, r4
 8014ba4:	4628      	mov	r0, r5
 8014ba6:	f000 f9d1 	bl	8014f4c <_printf_common>
 8014baa:	3001      	adds	r0, #1
 8014bac:	f040 808a 	bne.w	8014cc4 <_printf_float+0x1ac>
 8014bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014bb4:	b00b      	add	sp, #44	; 0x2c
 8014bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bba:	eeb4 0b40 	vcmp.f64	d0, d0
 8014bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc2:	d709      	bvc.n	8014bd8 <_printf_float+0xc0>
 8014bc4:	ee10 3a90 	vmov	r3, s1
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	bfbc      	itt	lt
 8014bcc:	232d      	movlt	r3, #45	; 0x2d
 8014bce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014bd2:	497d      	ldr	r1, [pc, #500]	; (8014dc8 <_printf_float+0x2b0>)
 8014bd4:	4b7d      	ldr	r3, [pc, #500]	; (8014dcc <_printf_float+0x2b4>)
 8014bd6:	e7d5      	b.n	8014b84 <_printf_float+0x6c>
 8014bd8:	6863      	ldr	r3, [r4, #4]
 8014bda:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014bde:	9104      	str	r1, [sp, #16]
 8014be0:	1c59      	adds	r1, r3, #1
 8014be2:	d13c      	bne.n	8014c5e <_printf_float+0x146>
 8014be4:	2306      	movs	r3, #6
 8014be6:	6063      	str	r3, [r4, #4]
 8014be8:	2300      	movs	r3, #0
 8014bea:	9303      	str	r3, [sp, #12]
 8014bec:	ab08      	add	r3, sp, #32
 8014bee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014bf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8014bf6:	ab07      	add	r3, sp, #28
 8014bf8:	6861      	ldr	r1, [r4, #4]
 8014bfa:	9300      	str	r3, [sp, #0]
 8014bfc:	6022      	str	r2, [r4, #0]
 8014bfe:	f10d 031b 	add.w	r3, sp, #27
 8014c02:	4628      	mov	r0, r5
 8014c04:	f7ff fef7 	bl	80149f6 <__cvt>
 8014c08:	9b04      	ldr	r3, [sp, #16]
 8014c0a:	9907      	ldr	r1, [sp, #28]
 8014c0c:	2b47      	cmp	r3, #71	; 0x47
 8014c0e:	4680      	mov	r8, r0
 8014c10:	d108      	bne.n	8014c24 <_printf_float+0x10c>
 8014c12:	1cc8      	adds	r0, r1, #3
 8014c14:	db02      	blt.n	8014c1c <_printf_float+0x104>
 8014c16:	6863      	ldr	r3, [r4, #4]
 8014c18:	4299      	cmp	r1, r3
 8014c1a:	dd41      	ble.n	8014ca0 <_printf_float+0x188>
 8014c1c:	f1a9 0902 	sub.w	r9, r9, #2
 8014c20:	fa5f f989 	uxtb.w	r9, r9
 8014c24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014c28:	d820      	bhi.n	8014c6c <_printf_float+0x154>
 8014c2a:	3901      	subs	r1, #1
 8014c2c:	464a      	mov	r2, r9
 8014c2e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014c32:	9107      	str	r1, [sp, #28]
 8014c34:	f7ff ff31 	bl	8014a9a <__exponent>
 8014c38:	9a08      	ldr	r2, [sp, #32]
 8014c3a:	9004      	str	r0, [sp, #16]
 8014c3c:	1813      	adds	r3, r2, r0
 8014c3e:	2a01      	cmp	r2, #1
 8014c40:	6123      	str	r3, [r4, #16]
 8014c42:	dc02      	bgt.n	8014c4a <_printf_float+0x132>
 8014c44:	6822      	ldr	r2, [r4, #0]
 8014c46:	07d2      	lsls	r2, r2, #31
 8014c48:	d501      	bpl.n	8014c4e <_printf_float+0x136>
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	6123      	str	r3, [r4, #16]
 8014c4e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d0a2      	beq.n	8014b9c <_printf_float+0x84>
 8014c56:	232d      	movs	r3, #45	; 0x2d
 8014c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c5c:	e79e      	b.n	8014b9c <_printf_float+0x84>
 8014c5e:	9904      	ldr	r1, [sp, #16]
 8014c60:	2947      	cmp	r1, #71	; 0x47
 8014c62:	d1c1      	bne.n	8014be8 <_printf_float+0xd0>
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d1bf      	bne.n	8014be8 <_printf_float+0xd0>
 8014c68:	2301      	movs	r3, #1
 8014c6a:	e7bc      	b.n	8014be6 <_printf_float+0xce>
 8014c6c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014c70:	d118      	bne.n	8014ca4 <_printf_float+0x18c>
 8014c72:	2900      	cmp	r1, #0
 8014c74:	6863      	ldr	r3, [r4, #4]
 8014c76:	dd0b      	ble.n	8014c90 <_printf_float+0x178>
 8014c78:	6121      	str	r1, [r4, #16]
 8014c7a:	b913      	cbnz	r3, 8014c82 <_printf_float+0x16a>
 8014c7c:	6822      	ldr	r2, [r4, #0]
 8014c7e:	07d0      	lsls	r0, r2, #31
 8014c80:	d502      	bpl.n	8014c88 <_printf_float+0x170>
 8014c82:	3301      	adds	r3, #1
 8014c84:	440b      	add	r3, r1
 8014c86:	6123      	str	r3, [r4, #16]
 8014c88:	2300      	movs	r3, #0
 8014c8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8014c8c:	9304      	str	r3, [sp, #16]
 8014c8e:	e7de      	b.n	8014c4e <_printf_float+0x136>
 8014c90:	b913      	cbnz	r3, 8014c98 <_printf_float+0x180>
 8014c92:	6822      	ldr	r2, [r4, #0]
 8014c94:	07d2      	lsls	r2, r2, #31
 8014c96:	d501      	bpl.n	8014c9c <_printf_float+0x184>
 8014c98:	3302      	adds	r3, #2
 8014c9a:	e7f4      	b.n	8014c86 <_printf_float+0x16e>
 8014c9c:	2301      	movs	r3, #1
 8014c9e:	e7f2      	b.n	8014c86 <_printf_float+0x16e>
 8014ca0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014ca4:	9b08      	ldr	r3, [sp, #32]
 8014ca6:	4299      	cmp	r1, r3
 8014ca8:	db05      	blt.n	8014cb6 <_printf_float+0x19e>
 8014caa:	6823      	ldr	r3, [r4, #0]
 8014cac:	6121      	str	r1, [r4, #16]
 8014cae:	07d8      	lsls	r0, r3, #31
 8014cb0:	d5ea      	bpl.n	8014c88 <_printf_float+0x170>
 8014cb2:	1c4b      	adds	r3, r1, #1
 8014cb4:	e7e7      	b.n	8014c86 <_printf_float+0x16e>
 8014cb6:	2900      	cmp	r1, #0
 8014cb8:	bfd4      	ite	le
 8014cba:	f1c1 0202 	rsble	r2, r1, #2
 8014cbe:	2201      	movgt	r2, #1
 8014cc0:	4413      	add	r3, r2
 8014cc2:	e7e0      	b.n	8014c86 <_printf_float+0x16e>
 8014cc4:	6823      	ldr	r3, [r4, #0]
 8014cc6:	055a      	lsls	r2, r3, #21
 8014cc8:	d407      	bmi.n	8014cda <_printf_float+0x1c2>
 8014cca:	6923      	ldr	r3, [r4, #16]
 8014ccc:	4642      	mov	r2, r8
 8014cce:	4631      	mov	r1, r6
 8014cd0:	4628      	mov	r0, r5
 8014cd2:	47b8      	blx	r7
 8014cd4:	3001      	adds	r0, #1
 8014cd6:	d12a      	bne.n	8014d2e <_printf_float+0x216>
 8014cd8:	e76a      	b.n	8014bb0 <_printf_float+0x98>
 8014cda:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014cde:	f240 80e0 	bls.w	8014ea2 <_printf_float+0x38a>
 8014ce2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014ce6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cee:	d133      	bne.n	8014d58 <_printf_float+0x240>
 8014cf0:	4a37      	ldr	r2, [pc, #220]	; (8014dd0 <_printf_float+0x2b8>)
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	47b8      	blx	r7
 8014cfa:	3001      	adds	r0, #1
 8014cfc:	f43f af58 	beq.w	8014bb0 <_printf_float+0x98>
 8014d00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014d04:	429a      	cmp	r2, r3
 8014d06:	db02      	blt.n	8014d0e <_printf_float+0x1f6>
 8014d08:	6823      	ldr	r3, [r4, #0]
 8014d0a:	07d8      	lsls	r0, r3, #31
 8014d0c:	d50f      	bpl.n	8014d2e <_printf_float+0x216>
 8014d0e:	4653      	mov	r3, sl
 8014d10:	465a      	mov	r2, fp
 8014d12:	4631      	mov	r1, r6
 8014d14:	4628      	mov	r0, r5
 8014d16:	47b8      	blx	r7
 8014d18:	3001      	adds	r0, #1
 8014d1a:	f43f af49 	beq.w	8014bb0 <_printf_float+0x98>
 8014d1e:	f04f 0800 	mov.w	r8, #0
 8014d22:	f104 091a 	add.w	r9, r4, #26
 8014d26:	9b08      	ldr	r3, [sp, #32]
 8014d28:	3b01      	subs	r3, #1
 8014d2a:	4543      	cmp	r3, r8
 8014d2c:	dc09      	bgt.n	8014d42 <_printf_float+0x22a>
 8014d2e:	6823      	ldr	r3, [r4, #0]
 8014d30:	079b      	lsls	r3, r3, #30
 8014d32:	f100 8106 	bmi.w	8014f42 <_printf_float+0x42a>
 8014d36:	68e0      	ldr	r0, [r4, #12]
 8014d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d3a:	4298      	cmp	r0, r3
 8014d3c:	bfb8      	it	lt
 8014d3e:	4618      	movlt	r0, r3
 8014d40:	e738      	b.n	8014bb4 <_printf_float+0x9c>
 8014d42:	2301      	movs	r3, #1
 8014d44:	464a      	mov	r2, r9
 8014d46:	4631      	mov	r1, r6
 8014d48:	4628      	mov	r0, r5
 8014d4a:	47b8      	blx	r7
 8014d4c:	3001      	adds	r0, #1
 8014d4e:	f43f af2f 	beq.w	8014bb0 <_printf_float+0x98>
 8014d52:	f108 0801 	add.w	r8, r8, #1
 8014d56:	e7e6      	b.n	8014d26 <_printf_float+0x20e>
 8014d58:	9b07      	ldr	r3, [sp, #28]
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	dc3a      	bgt.n	8014dd4 <_printf_float+0x2bc>
 8014d5e:	4a1c      	ldr	r2, [pc, #112]	; (8014dd0 <_printf_float+0x2b8>)
 8014d60:	2301      	movs	r3, #1
 8014d62:	4631      	mov	r1, r6
 8014d64:	4628      	mov	r0, r5
 8014d66:	47b8      	blx	r7
 8014d68:	3001      	adds	r0, #1
 8014d6a:	f43f af21 	beq.w	8014bb0 <_printf_float+0x98>
 8014d6e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014d72:	4313      	orrs	r3, r2
 8014d74:	d102      	bne.n	8014d7c <_printf_float+0x264>
 8014d76:	6823      	ldr	r3, [r4, #0]
 8014d78:	07d9      	lsls	r1, r3, #31
 8014d7a:	d5d8      	bpl.n	8014d2e <_printf_float+0x216>
 8014d7c:	4653      	mov	r3, sl
 8014d7e:	465a      	mov	r2, fp
 8014d80:	4631      	mov	r1, r6
 8014d82:	4628      	mov	r0, r5
 8014d84:	47b8      	blx	r7
 8014d86:	3001      	adds	r0, #1
 8014d88:	f43f af12 	beq.w	8014bb0 <_printf_float+0x98>
 8014d8c:	f04f 0900 	mov.w	r9, #0
 8014d90:	f104 0a1a 	add.w	sl, r4, #26
 8014d94:	9b07      	ldr	r3, [sp, #28]
 8014d96:	425b      	negs	r3, r3
 8014d98:	454b      	cmp	r3, r9
 8014d9a:	dc01      	bgt.n	8014da0 <_printf_float+0x288>
 8014d9c:	9b08      	ldr	r3, [sp, #32]
 8014d9e:	e795      	b.n	8014ccc <_printf_float+0x1b4>
 8014da0:	2301      	movs	r3, #1
 8014da2:	4652      	mov	r2, sl
 8014da4:	4631      	mov	r1, r6
 8014da6:	4628      	mov	r0, r5
 8014da8:	47b8      	blx	r7
 8014daa:	3001      	adds	r0, #1
 8014dac:	f43f af00 	beq.w	8014bb0 <_printf_float+0x98>
 8014db0:	f109 0901 	add.w	r9, r9, #1
 8014db4:	e7ee      	b.n	8014d94 <_printf_float+0x27c>
 8014db6:	bf00      	nop
 8014db8:	ffffffff 	.word	0xffffffff
 8014dbc:	7fefffff 	.word	0x7fefffff
 8014dc0:	08017708 	.word	0x08017708
 8014dc4:	0801770c 	.word	0x0801770c
 8014dc8:	08017710 	.word	0x08017710
 8014dcc:	08017714 	.word	0x08017714
 8014dd0:	08017718 	.word	0x08017718
 8014dd4:	9a08      	ldr	r2, [sp, #32]
 8014dd6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014dd8:	429a      	cmp	r2, r3
 8014dda:	bfa8      	it	ge
 8014ddc:	461a      	movge	r2, r3
 8014dde:	2a00      	cmp	r2, #0
 8014de0:	4691      	mov	r9, r2
 8014de2:	dc38      	bgt.n	8014e56 <_printf_float+0x33e>
 8014de4:	2300      	movs	r3, #0
 8014de6:	9305      	str	r3, [sp, #20]
 8014de8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014dec:	f104 021a 	add.w	r2, r4, #26
 8014df0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014df2:	9905      	ldr	r1, [sp, #20]
 8014df4:	9304      	str	r3, [sp, #16]
 8014df6:	eba3 0309 	sub.w	r3, r3, r9
 8014dfa:	428b      	cmp	r3, r1
 8014dfc:	dc33      	bgt.n	8014e66 <_printf_float+0x34e>
 8014dfe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	db3c      	blt.n	8014e80 <_printf_float+0x368>
 8014e06:	6823      	ldr	r3, [r4, #0]
 8014e08:	07da      	lsls	r2, r3, #31
 8014e0a:	d439      	bmi.n	8014e80 <_printf_float+0x368>
 8014e0c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014e10:	eba2 0903 	sub.w	r9, r2, r3
 8014e14:	9b04      	ldr	r3, [sp, #16]
 8014e16:	1ad2      	subs	r2, r2, r3
 8014e18:	4591      	cmp	r9, r2
 8014e1a:	bfa8      	it	ge
 8014e1c:	4691      	movge	r9, r2
 8014e1e:	f1b9 0f00 	cmp.w	r9, #0
 8014e22:	dc35      	bgt.n	8014e90 <_printf_float+0x378>
 8014e24:	f04f 0800 	mov.w	r8, #0
 8014e28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e2c:	f104 0a1a 	add.w	sl, r4, #26
 8014e30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014e34:	1a9b      	subs	r3, r3, r2
 8014e36:	eba3 0309 	sub.w	r3, r3, r9
 8014e3a:	4543      	cmp	r3, r8
 8014e3c:	f77f af77 	ble.w	8014d2e <_printf_float+0x216>
 8014e40:	2301      	movs	r3, #1
 8014e42:	4652      	mov	r2, sl
 8014e44:	4631      	mov	r1, r6
 8014e46:	4628      	mov	r0, r5
 8014e48:	47b8      	blx	r7
 8014e4a:	3001      	adds	r0, #1
 8014e4c:	f43f aeb0 	beq.w	8014bb0 <_printf_float+0x98>
 8014e50:	f108 0801 	add.w	r8, r8, #1
 8014e54:	e7ec      	b.n	8014e30 <_printf_float+0x318>
 8014e56:	4613      	mov	r3, r2
 8014e58:	4631      	mov	r1, r6
 8014e5a:	4642      	mov	r2, r8
 8014e5c:	4628      	mov	r0, r5
 8014e5e:	47b8      	blx	r7
 8014e60:	3001      	adds	r0, #1
 8014e62:	d1bf      	bne.n	8014de4 <_printf_float+0x2cc>
 8014e64:	e6a4      	b.n	8014bb0 <_printf_float+0x98>
 8014e66:	2301      	movs	r3, #1
 8014e68:	4631      	mov	r1, r6
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	9204      	str	r2, [sp, #16]
 8014e6e:	47b8      	blx	r7
 8014e70:	3001      	adds	r0, #1
 8014e72:	f43f ae9d 	beq.w	8014bb0 <_printf_float+0x98>
 8014e76:	9b05      	ldr	r3, [sp, #20]
 8014e78:	9a04      	ldr	r2, [sp, #16]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	9305      	str	r3, [sp, #20]
 8014e7e:	e7b7      	b.n	8014df0 <_printf_float+0x2d8>
 8014e80:	4653      	mov	r3, sl
 8014e82:	465a      	mov	r2, fp
 8014e84:	4631      	mov	r1, r6
 8014e86:	4628      	mov	r0, r5
 8014e88:	47b8      	blx	r7
 8014e8a:	3001      	adds	r0, #1
 8014e8c:	d1be      	bne.n	8014e0c <_printf_float+0x2f4>
 8014e8e:	e68f      	b.n	8014bb0 <_printf_float+0x98>
 8014e90:	9a04      	ldr	r2, [sp, #16]
 8014e92:	464b      	mov	r3, r9
 8014e94:	4442      	add	r2, r8
 8014e96:	4631      	mov	r1, r6
 8014e98:	4628      	mov	r0, r5
 8014e9a:	47b8      	blx	r7
 8014e9c:	3001      	adds	r0, #1
 8014e9e:	d1c1      	bne.n	8014e24 <_printf_float+0x30c>
 8014ea0:	e686      	b.n	8014bb0 <_printf_float+0x98>
 8014ea2:	9a08      	ldr	r2, [sp, #32]
 8014ea4:	2a01      	cmp	r2, #1
 8014ea6:	dc01      	bgt.n	8014eac <_printf_float+0x394>
 8014ea8:	07db      	lsls	r3, r3, #31
 8014eaa:	d537      	bpl.n	8014f1c <_printf_float+0x404>
 8014eac:	2301      	movs	r3, #1
 8014eae:	4642      	mov	r2, r8
 8014eb0:	4631      	mov	r1, r6
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	47b8      	blx	r7
 8014eb6:	3001      	adds	r0, #1
 8014eb8:	f43f ae7a 	beq.w	8014bb0 <_printf_float+0x98>
 8014ebc:	4653      	mov	r3, sl
 8014ebe:	465a      	mov	r2, fp
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	47b8      	blx	r7
 8014ec6:	3001      	adds	r0, #1
 8014ec8:	f43f ae72 	beq.w	8014bb0 <_printf_float+0x98>
 8014ecc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014ed0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed8:	9b08      	ldr	r3, [sp, #32]
 8014eda:	d01a      	beq.n	8014f12 <_printf_float+0x3fa>
 8014edc:	3b01      	subs	r3, #1
 8014ede:	f108 0201 	add.w	r2, r8, #1
 8014ee2:	4631      	mov	r1, r6
 8014ee4:	4628      	mov	r0, r5
 8014ee6:	47b8      	blx	r7
 8014ee8:	3001      	adds	r0, #1
 8014eea:	d10e      	bne.n	8014f0a <_printf_float+0x3f2>
 8014eec:	e660      	b.n	8014bb0 <_printf_float+0x98>
 8014eee:	2301      	movs	r3, #1
 8014ef0:	464a      	mov	r2, r9
 8014ef2:	4631      	mov	r1, r6
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	47b8      	blx	r7
 8014ef8:	3001      	adds	r0, #1
 8014efa:	f43f ae59 	beq.w	8014bb0 <_printf_float+0x98>
 8014efe:	f108 0801 	add.w	r8, r8, #1
 8014f02:	9b08      	ldr	r3, [sp, #32]
 8014f04:	3b01      	subs	r3, #1
 8014f06:	4543      	cmp	r3, r8
 8014f08:	dcf1      	bgt.n	8014eee <_printf_float+0x3d6>
 8014f0a:	9b04      	ldr	r3, [sp, #16]
 8014f0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f10:	e6dd      	b.n	8014cce <_printf_float+0x1b6>
 8014f12:	f04f 0800 	mov.w	r8, #0
 8014f16:	f104 091a 	add.w	r9, r4, #26
 8014f1a:	e7f2      	b.n	8014f02 <_printf_float+0x3ea>
 8014f1c:	2301      	movs	r3, #1
 8014f1e:	4642      	mov	r2, r8
 8014f20:	e7df      	b.n	8014ee2 <_printf_float+0x3ca>
 8014f22:	2301      	movs	r3, #1
 8014f24:	464a      	mov	r2, r9
 8014f26:	4631      	mov	r1, r6
 8014f28:	4628      	mov	r0, r5
 8014f2a:	47b8      	blx	r7
 8014f2c:	3001      	adds	r0, #1
 8014f2e:	f43f ae3f 	beq.w	8014bb0 <_printf_float+0x98>
 8014f32:	f108 0801 	add.w	r8, r8, #1
 8014f36:	68e3      	ldr	r3, [r4, #12]
 8014f38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014f3a:	1a5b      	subs	r3, r3, r1
 8014f3c:	4543      	cmp	r3, r8
 8014f3e:	dcf0      	bgt.n	8014f22 <_printf_float+0x40a>
 8014f40:	e6f9      	b.n	8014d36 <_printf_float+0x21e>
 8014f42:	f04f 0800 	mov.w	r8, #0
 8014f46:	f104 0919 	add.w	r9, r4, #25
 8014f4a:	e7f4      	b.n	8014f36 <_printf_float+0x41e>

08014f4c <_printf_common>:
 8014f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f50:	4616      	mov	r6, r2
 8014f52:	4699      	mov	r9, r3
 8014f54:	688a      	ldr	r2, [r1, #8]
 8014f56:	690b      	ldr	r3, [r1, #16]
 8014f58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f5c:	4293      	cmp	r3, r2
 8014f5e:	bfb8      	it	lt
 8014f60:	4613      	movlt	r3, r2
 8014f62:	6033      	str	r3, [r6, #0]
 8014f64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f68:	4607      	mov	r7, r0
 8014f6a:	460c      	mov	r4, r1
 8014f6c:	b10a      	cbz	r2, 8014f72 <_printf_common+0x26>
 8014f6e:	3301      	adds	r3, #1
 8014f70:	6033      	str	r3, [r6, #0]
 8014f72:	6823      	ldr	r3, [r4, #0]
 8014f74:	0699      	lsls	r1, r3, #26
 8014f76:	bf42      	ittt	mi
 8014f78:	6833      	ldrmi	r3, [r6, #0]
 8014f7a:	3302      	addmi	r3, #2
 8014f7c:	6033      	strmi	r3, [r6, #0]
 8014f7e:	6825      	ldr	r5, [r4, #0]
 8014f80:	f015 0506 	ands.w	r5, r5, #6
 8014f84:	d106      	bne.n	8014f94 <_printf_common+0x48>
 8014f86:	f104 0a19 	add.w	sl, r4, #25
 8014f8a:	68e3      	ldr	r3, [r4, #12]
 8014f8c:	6832      	ldr	r2, [r6, #0]
 8014f8e:	1a9b      	subs	r3, r3, r2
 8014f90:	42ab      	cmp	r3, r5
 8014f92:	dc26      	bgt.n	8014fe2 <_printf_common+0x96>
 8014f94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f98:	1e13      	subs	r3, r2, #0
 8014f9a:	6822      	ldr	r2, [r4, #0]
 8014f9c:	bf18      	it	ne
 8014f9e:	2301      	movne	r3, #1
 8014fa0:	0692      	lsls	r2, r2, #26
 8014fa2:	d42b      	bmi.n	8014ffc <_printf_common+0xb0>
 8014fa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fa8:	4649      	mov	r1, r9
 8014faa:	4638      	mov	r0, r7
 8014fac:	47c0      	blx	r8
 8014fae:	3001      	adds	r0, #1
 8014fb0:	d01e      	beq.n	8014ff0 <_printf_common+0xa4>
 8014fb2:	6823      	ldr	r3, [r4, #0]
 8014fb4:	6922      	ldr	r2, [r4, #16]
 8014fb6:	f003 0306 	and.w	r3, r3, #6
 8014fba:	2b04      	cmp	r3, #4
 8014fbc:	bf02      	ittt	eq
 8014fbe:	68e5      	ldreq	r5, [r4, #12]
 8014fc0:	6833      	ldreq	r3, [r6, #0]
 8014fc2:	1aed      	subeq	r5, r5, r3
 8014fc4:	68a3      	ldr	r3, [r4, #8]
 8014fc6:	bf0c      	ite	eq
 8014fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fcc:	2500      	movne	r5, #0
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	bfc4      	itt	gt
 8014fd2:	1a9b      	subgt	r3, r3, r2
 8014fd4:	18ed      	addgt	r5, r5, r3
 8014fd6:	2600      	movs	r6, #0
 8014fd8:	341a      	adds	r4, #26
 8014fda:	42b5      	cmp	r5, r6
 8014fdc:	d11a      	bne.n	8015014 <_printf_common+0xc8>
 8014fde:	2000      	movs	r0, #0
 8014fe0:	e008      	b.n	8014ff4 <_printf_common+0xa8>
 8014fe2:	2301      	movs	r3, #1
 8014fe4:	4652      	mov	r2, sl
 8014fe6:	4649      	mov	r1, r9
 8014fe8:	4638      	mov	r0, r7
 8014fea:	47c0      	blx	r8
 8014fec:	3001      	adds	r0, #1
 8014fee:	d103      	bne.n	8014ff8 <_printf_common+0xac>
 8014ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ff8:	3501      	adds	r5, #1
 8014ffa:	e7c6      	b.n	8014f8a <_printf_common+0x3e>
 8014ffc:	18e1      	adds	r1, r4, r3
 8014ffe:	1c5a      	adds	r2, r3, #1
 8015000:	2030      	movs	r0, #48	; 0x30
 8015002:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015006:	4422      	add	r2, r4
 8015008:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801500c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015010:	3302      	adds	r3, #2
 8015012:	e7c7      	b.n	8014fa4 <_printf_common+0x58>
 8015014:	2301      	movs	r3, #1
 8015016:	4622      	mov	r2, r4
 8015018:	4649      	mov	r1, r9
 801501a:	4638      	mov	r0, r7
 801501c:	47c0      	blx	r8
 801501e:	3001      	adds	r0, #1
 8015020:	d0e6      	beq.n	8014ff0 <_printf_common+0xa4>
 8015022:	3601      	adds	r6, #1
 8015024:	e7d9      	b.n	8014fda <_printf_common+0x8e>
	...

08015028 <_printf_i>:
 8015028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801502c:	7e0f      	ldrb	r7, [r1, #24]
 801502e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015030:	2f78      	cmp	r7, #120	; 0x78
 8015032:	4691      	mov	r9, r2
 8015034:	4680      	mov	r8, r0
 8015036:	460c      	mov	r4, r1
 8015038:	469a      	mov	sl, r3
 801503a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801503e:	d807      	bhi.n	8015050 <_printf_i+0x28>
 8015040:	2f62      	cmp	r7, #98	; 0x62
 8015042:	d80a      	bhi.n	801505a <_printf_i+0x32>
 8015044:	2f00      	cmp	r7, #0
 8015046:	f000 80d4 	beq.w	80151f2 <_printf_i+0x1ca>
 801504a:	2f58      	cmp	r7, #88	; 0x58
 801504c:	f000 80c0 	beq.w	80151d0 <_printf_i+0x1a8>
 8015050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015054:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015058:	e03a      	b.n	80150d0 <_printf_i+0xa8>
 801505a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801505e:	2b15      	cmp	r3, #21
 8015060:	d8f6      	bhi.n	8015050 <_printf_i+0x28>
 8015062:	a101      	add	r1, pc, #4	; (adr r1, 8015068 <_printf_i+0x40>)
 8015064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015068:	080150c1 	.word	0x080150c1
 801506c:	080150d5 	.word	0x080150d5
 8015070:	08015051 	.word	0x08015051
 8015074:	08015051 	.word	0x08015051
 8015078:	08015051 	.word	0x08015051
 801507c:	08015051 	.word	0x08015051
 8015080:	080150d5 	.word	0x080150d5
 8015084:	08015051 	.word	0x08015051
 8015088:	08015051 	.word	0x08015051
 801508c:	08015051 	.word	0x08015051
 8015090:	08015051 	.word	0x08015051
 8015094:	080151d9 	.word	0x080151d9
 8015098:	08015101 	.word	0x08015101
 801509c:	08015193 	.word	0x08015193
 80150a0:	08015051 	.word	0x08015051
 80150a4:	08015051 	.word	0x08015051
 80150a8:	080151fb 	.word	0x080151fb
 80150ac:	08015051 	.word	0x08015051
 80150b0:	08015101 	.word	0x08015101
 80150b4:	08015051 	.word	0x08015051
 80150b8:	08015051 	.word	0x08015051
 80150bc:	0801519b 	.word	0x0801519b
 80150c0:	682b      	ldr	r3, [r5, #0]
 80150c2:	1d1a      	adds	r2, r3, #4
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	602a      	str	r2, [r5, #0]
 80150c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150d0:	2301      	movs	r3, #1
 80150d2:	e09f      	b.n	8015214 <_printf_i+0x1ec>
 80150d4:	6820      	ldr	r0, [r4, #0]
 80150d6:	682b      	ldr	r3, [r5, #0]
 80150d8:	0607      	lsls	r7, r0, #24
 80150da:	f103 0104 	add.w	r1, r3, #4
 80150de:	6029      	str	r1, [r5, #0]
 80150e0:	d501      	bpl.n	80150e6 <_printf_i+0xbe>
 80150e2:	681e      	ldr	r6, [r3, #0]
 80150e4:	e003      	b.n	80150ee <_printf_i+0xc6>
 80150e6:	0646      	lsls	r6, r0, #25
 80150e8:	d5fb      	bpl.n	80150e2 <_printf_i+0xba>
 80150ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80150ee:	2e00      	cmp	r6, #0
 80150f0:	da03      	bge.n	80150fa <_printf_i+0xd2>
 80150f2:	232d      	movs	r3, #45	; 0x2d
 80150f4:	4276      	negs	r6, r6
 80150f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150fa:	485a      	ldr	r0, [pc, #360]	; (8015264 <_printf_i+0x23c>)
 80150fc:	230a      	movs	r3, #10
 80150fe:	e012      	b.n	8015126 <_printf_i+0xfe>
 8015100:	682b      	ldr	r3, [r5, #0]
 8015102:	6820      	ldr	r0, [r4, #0]
 8015104:	1d19      	adds	r1, r3, #4
 8015106:	6029      	str	r1, [r5, #0]
 8015108:	0605      	lsls	r5, r0, #24
 801510a:	d501      	bpl.n	8015110 <_printf_i+0xe8>
 801510c:	681e      	ldr	r6, [r3, #0]
 801510e:	e002      	b.n	8015116 <_printf_i+0xee>
 8015110:	0641      	lsls	r1, r0, #25
 8015112:	d5fb      	bpl.n	801510c <_printf_i+0xe4>
 8015114:	881e      	ldrh	r6, [r3, #0]
 8015116:	4853      	ldr	r0, [pc, #332]	; (8015264 <_printf_i+0x23c>)
 8015118:	2f6f      	cmp	r7, #111	; 0x6f
 801511a:	bf0c      	ite	eq
 801511c:	2308      	moveq	r3, #8
 801511e:	230a      	movne	r3, #10
 8015120:	2100      	movs	r1, #0
 8015122:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015126:	6865      	ldr	r5, [r4, #4]
 8015128:	60a5      	str	r5, [r4, #8]
 801512a:	2d00      	cmp	r5, #0
 801512c:	bfa2      	ittt	ge
 801512e:	6821      	ldrge	r1, [r4, #0]
 8015130:	f021 0104 	bicge.w	r1, r1, #4
 8015134:	6021      	strge	r1, [r4, #0]
 8015136:	b90e      	cbnz	r6, 801513c <_printf_i+0x114>
 8015138:	2d00      	cmp	r5, #0
 801513a:	d04b      	beq.n	80151d4 <_printf_i+0x1ac>
 801513c:	4615      	mov	r5, r2
 801513e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015142:	fb03 6711 	mls	r7, r3, r1, r6
 8015146:	5dc7      	ldrb	r7, [r0, r7]
 8015148:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801514c:	4637      	mov	r7, r6
 801514e:	42bb      	cmp	r3, r7
 8015150:	460e      	mov	r6, r1
 8015152:	d9f4      	bls.n	801513e <_printf_i+0x116>
 8015154:	2b08      	cmp	r3, #8
 8015156:	d10b      	bne.n	8015170 <_printf_i+0x148>
 8015158:	6823      	ldr	r3, [r4, #0]
 801515a:	07de      	lsls	r6, r3, #31
 801515c:	d508      	bpl.n	8015170 <_printf_i+0x148>
 801515e:	6923      	ldr	r3, [r4, #16]
 8015160:	6861      	ldr	r1, [r4, #4]
 8015162:	4299      	cmp	r1, r3
 8015164:	bfde      	ittt	le
 8015166:	2330      	movle	r3, #48	; 0x30
 8015168:	f805 3c01 	strble.w	r3, [r5, #-1]
 801516c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015170:	1b52      	subs	r2, r2, r5
 8015172:	6122      	str	r2, [r4, #16]
 8015174:	f8cd a000 	str.w	sl, [sp]
 8015178:	464b      	mov	r3, r9
 801517a:	aa03      	add	r2, sp, #12
 801517c:	4621      	mov	r1, r4
 801517e:	4640      	mov	r0, r8
 8015180:	f7ff fee4 	bl	8014f4c <_printf_common>
 8015184:	3001      	adds	r0, #1
 8015186:	d14a      	bne.n	801521e <_printf_i+0x1f6>
 8015188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801518c:	b004      	add	sp, #16
 801518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015192:	6823      	ldr	r3, [r4, #0]
 8015194:	f043 0320 	orr.w	r3, r3, #32
 8015198:	6023      	str	r3, [r4, #0]
 801519a:	4833      	ldr	r0, [pc, #204]	; (8015268 <_printf_i+0x240>)
 801519c:	2778      	movs	r7, #120	; 0x78
 801519e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80151a2:	6823      	ldr	r3, [r4, #0]
 80151a4:	6829      	ldr	r1, [r5, #0]
 80151a6:	061f      	lsls	r7, r3, #24
 80151a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80151ac:	d402      	bmi.n	80151b4 <_printf_i+0x18c>
 80151ae:	065f      	lsls	r7, r3, #25
 80151b0:	bf48      	it	mi
 80151b2:	b2b6      	uxthmi	r6, r6
 80151b4:	07df      	lsls	r7, r3, #31
 80151b6:	bf48      	it	mi
 80151b8:	f043 0320 	orrmi.w	r3, r3, #32
 80151bc:	6029      	str	r1, [r5, #0]
 80151be:	bf48      	it	mi
 80151c0:	6023      	strmi	r3, [r4, #0]
 80151c2:	b91e      	cbnz	r6, 80151cc <_printf_i+0x1a4>
 80151c4:	6823      	ldr	r3, [r4, #0]
 80151c6:	f023 0320 	bic.w	r3, r3, #32
 80151ca:	6023      	str	r3, [r4, #0]
 80151cc:	2310      	movs	r3, #16
 80151ce:	e7a7      	b.n	8015120 <_printf_i+0xf8>
 80151d0:	4824      	ldr	r0, [pc, #144]	; (8015264 <_printf_i+0x23c>)
 80151d2:	e7e4      	b.n	801519e <_printf_i+0x176>
 80151d4:	4615      	mov	r5, r2
 80151d6:	e7bd      	b.n	8015154 <_printf_i+0x12c>
 80151d8:	682b      	ldr	r3, [r5, #0]
 80151da:	6826      	ldr	r6, [r4, #0]
 80151dc:	6961      	ldr	r1, [r4, #20]
 80151de:	1d18      	adds	r0, r3, #4
 80151e0:	6028      	str	r0, [r5, #0]
 80151e2:	0635      	lsls	r5, r6, #24
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	d501      	bpl.n	80151ec <_printf_i+0x1c4>
 80151e8:	6019      	str	r1, [r3, #0]
 80151ea:	e002      	b.n	80151f2 <_printf_i+0x1ca>
 80151ec:	0670      	lsls	r0, r6, #25
 80151ee:	d5fb      	bpl.n	80151e8 <_printf_i+0x1c0>
 80151f0:	8019      	strh	r1, [r3, #0]
 80151f2:	2300      	movs	r3, #0
 80151f4:	6123      	str	r3, [r4, #16]
 80151f6:	4615      	mov	r5, r2
 80151f8:	e7bc      	b.n	8015174 <_printf_i+0x14c>
 80151fa:	682b      	ldr	r3, [r5, #0]
 80151fc:	1d1a      	adds	r2, r3, #4
 80151fe:	602a      	str	r2, [r5, #0]
 8015200:	681d      	ldr	r5, [r3, #0]
 8015202:	6862      	ldr	r2, [r4, #4]
 8015204:	2100      	movs	r1, #0
 8015206:	4628      	mov	r0, r5
 8015208:	f7eb f86a 	bl	80002e0 <memchr>
 801520c:	b108      	cbz	r0, 8015212 <_printf_i+0x1ea>
 801520e:	1b40      	subs	r0, r0, r5
 8015210:	6060      	str	r0, [r4, #4]
 8015212:	6863      	ldr	r3, [r4, #4]
 8015214:	6123      	str	r3, [r4, #16]
 8015216:	2300      	movs	r3, #0
 8015218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801521c:	e7aa      	b.n	8015174 <_printf_i+0x14c>
 801521e:	6923      	ldr	r3, [r4, #16]
 8015220:	462a      	mov	r2, r5
 8015222:	4649      	mov	r1, r9
 8015224:	4640      	mov	r0, r8
 8015226:	47d0      	blx	sl
 8015228:	3001      	adds	r0, #1
 801522a:	d0ad      	beq.n	8015188 <_printf_i+0x160>
 801522c:	6823      	ldr	r3, [r4, #0]
 801522e:	079b      	lsls	r3, r3, #30
 8015230:	d413      	bmi.n	801525a <_printf_i+0x232>
 8015232:	68e0      	ldr	r0, [r4, #12]
 8015234:	9b03      	ldr	r3, [sp, #12]
 8015236:	4298      	cmp	r0, r3
 8015238:	bfb8      	it	lt
 801523a:	4618      	movlt	r0, r3
 801523c:	e7a6      	b.n	801518c <_printf_i+0x164>
 801523e:	2301      	movs	r3, #1
 8015240:	4632      	mov	r2, r6
 8015242:	4649      	mov	r1, r9
 8015244:	4640      	mov	r0, r8
 8015246:	47d0      	blx	sl
 8015248:	3001      	adds	r0, #1
 801524a:	d09d      	beq.n	8015188 <_printf_i+0x160>
 801524c:	3501      	adds	r5, #1
 801524e:	68e3      	ldr	r3, [r4, #12]
 8015250:	9903      	ldr	r1, [sp, #12]
 8015252:	1a5b      	subs	r3, r3, r1
 8015254:	42ab      	cmp	r3, r5
 8015256:	dcf2      	bgt.n	801523e <_printf_i+0x216>
 8015258:	e7eb      	b.n	8015232 <_printf_i+0x20a>
 801525a:	2500      	movs	r5, #0
 801525c:	f104 0619 	add.w	r6, r4, #25
 8015260:	e7f5      	b.n	801524e <_printf_i+0x226>
 8015262:	bf00      	nop
 8015264:	0801771a 	.word	0x0801771a
 8015268:	0801772b 	.word	0x0801772b

0801526c <std>:
 801526c:	2300      	movs	r3, #0
 801526e:	b510      	push	{r4, lr}
 8015270:	4604      	mov	r4, r0
 8015272:	e9c0 3300 	strd	r3, r3, [r0]
 8015276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801527a:	6083      	str	r3, [r0, #8]
 801527c:	8181      	strh	r1, [r0, #12]
 801527e:	6643      	str	r3, [r0, #100]	; 0x64
 8015280:	81c2      	strh	r2, [r0, #14]
 8015282:	6183      	str	r3, [r0, #24]
 8015284:	4619      	mov	r1, r3
 8015286:	2208      	movs	r2, #8
 8015288:	305c      	adds	r0, #92	; 0x5c
 801528a:	f000 f9f7 	bl	801567c <memset>
 801528e:	4b0d      	ldr	r3, [pc, #52]	; (80152c4 <std+0x58>)
 8015290:	6263      	str	r3, [r4, #36]	; 0x24
 8015292:	4b0d      	ldr	r3, [pc, #52]	; (80152c8 <std+0x5c>)
 8015294:	62a3      	str	r3, [r4, #40]	; 0x28
 8015296:	4b0d      	ldr	r3, [pc, #52]	; (80152cc <std+0x60>)
 8015298:	62e3      	str	r3, [r4, #44]	; 0x2c
 801529a:	4b0d      	ldr	r3, [pc, #52]	; (80152d0 <std+0x64>)
 801529c:	6323      	str	r3, [r4, #48]	; 0x30
 801529e:	4b0d      	ldr	r3, [pc, #52]	; (80152d4 <std+0x68>)
 80152a0:	6224      	str	r4, [r4, #32]
 80152a2:	429c      	cmp	r4, r3
 80152a4:	d006      	beq.n	80152b4 <std+0x48>
 80152a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80152aa:	4294      	cmp	r4, r2
 80152ac:	d002      	beq.n	80152b4 <std+0x48>
 80152ae:	33d0      	adds	r3, #208	; 0xd0
 80152b0:	429c      	cmp	r4, r3
 80152b2:	d105      	bne.n	80152c0 <std+0x54>
 80152b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80152b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80152bc:	f000 baae 	b.w	801581c <__retarget_lock_init_recursive>
 80152c0:	bd10      	pop	{r4, pc}
 80152c2:	bf00      	nop
 80152c4:	080154cd 	.word	0x080154cd
 80152c8:	080154ef 	.word	0x080154ef
 80152cc:	08015527 	.word	0x08015527
 80152d0:	0801554b 	.word	0x0801554b
 80152d4:	24004658 	.word	0x24004658

080152d8 <stdio_exit_handler>:
 80152d8:	4a02      	ldr	r2, [pc, #8]	; (80152e4 <stdio_exit_handler+0xc>)
 80152da:	4903      	ldr	r1, [pc, #12]	; (80152e8 <stdio_exit_handler+0x10>)
 80152dc:	4803      	ldr	r0, [pc, #12]	; (80152ec <stdio_exit_handler+0x14>)
 80152de:	f000 b869 	b.w	80153b4 <_fwalk_sglue>
 80152e2:	bf00      	nop
 80152e4:	24000054 	.word	0x24000054
 80152e8:	08016f5d 	.word	0x08016f5d
 80152ec:	24000060 	.word	0x24000060

080152f0 <cleanup_stdio>:
 80152f0:	6841      	ldr	r1, [r0, #4]
 80152f2:	4b0c      	ldr	r3, [pc, #48]	; (8015324 <cleanup_stdio+0x34>)
 80152f4:	4299      	cmp	r1, r3
 80152f6:	b510      	push	{r4, lr}
 80152f8:	4604      	mov	r4, r0
 80152fa:	d001      	beq.n	8015300 <cleanup_stdio+0x10>
 80152fc:	f001 fe2e 	bl	8016f5c <_fflush_r>
 8015300:	68a1      	ldr	r1, [r4, #8]
 8015302:	4b09      	ldr	r3, [pc, #36]	; (8015328 <cleanup_stdio+0x38>)
 8015304:	4299      	cmp	r1, r3
 8015306:	d002      	beq.n	801530e <cleanup_stdio+0x1e>
 8015308:	4620      	mov	r0, r4
 801530a:	f001 fe27 	bl	8016f5c <_fflush_r>
 801530e:	68e1      	ldr	r1, [r4, #12]
 8015310:	4b06      	ldr	r3, [pc, #24]	; (801532c <cleanup_stdio+0x3c>)
 8015312:	4299      	cmp	r1, r3
 8015314:	d004      	beq.n	8015320 <cleanup_stdio+0x30>
 8015316:	4620      	mov	r0, r4
 8015318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801531c:	f001 be1e 	b.w	8016f5c <_fflush_r>
 8015320:	bd10      	pop	{r4, pc}
 8015322:	bf00      	nop
 8015324:	24004658 	.word	0x24004658
 8015328:	240046c0 	.word	0x240046c0
 801532c:	24004728 	.word	0x24004728

08015330 <global_stdio_init.part.0>:
 8015330:	b510      	push	{r4, lr}
 8015332:	4b0b      	ldr	r3, [pc, #44]	; (8015360 <global_stdio_init.part.0+0x30>)
 8015334:	4c0b      	ldr	r4, [pc, #44]	; (8015364 <global_stdio_init.part.0+0x34>)
 8015336:	4a0c      	ldr	r2, [pc, #48]	; (8015368 <global_stdio_init.part.0+0x38>)
 8015338:	601a      	str	r2, [r3, #0]
 801533a:	4620      	mov	r0, r4
 801533c:	2200      	movs	r2, #0
 801533e:	2104      	movs	r1, #4
 8015340:	f7ff ff94 	bl	801526c <std>
 8015344:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8015348:	2201      	movs	r2, #1
 801534a:	2109      	movs	r1, #9
 801534c:	f7ff ff8e 	bl	801526c <std>
 8015350:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015354:	2202      	movs	r2, #2
 8015356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801535a:	2112      	movs	r1, #18
 801535c:	f7ff bf86 	b.w	801526c <std>
 8015360:	24004790 	.word	0x24004790
 8015364:	24004658 	.word	0x24004658
 8015368:	080152d9 	.word	0x080152d9

0801536c <__sfp_lock_acquire>:
 801536c:	4801      	ldr	r0, [pc, #4]	; (8015374 <__sfp_lock_acquire+0x8>)
 801536e:	f000 ba56 	b.w	801581e <__retarget_lock_acquire_recursive>
 8015372:	bf00      	nop
 8015374:	24004799 	.word	0x24004799

08015378 <__sfp_lock_release>:
 8015378:	4801      	ldr	r0, [pc, #4]	; (8015380 <__sfp_lock_release+0x8>)
 801537a:	f000 ba51 	b.w	8015820 <__retarget_lock_release_recursive>
 801537e:	bf00      	nop
 8015380:	24004799 	.word	0x24004799

08015384 <__sinit>:
 8015384:	b510      	push	{r4, lr}
 8015386:	4604      	mov	r4, r0
 8015388:	f7ff fff0 	bl	801536c <__sfp_lock_acquire>
 801538c:	6a23      	ldr	r3, [r4, #32]
 801538e:	b11b      	cbz	r3, 8015398 <__sinit+0x14>
 8015390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015394:	f7ff bff0 	b.w	8015378 <__sfp_lock_release>
 8015398:	4b04      	ldr	r3, [pc, #16]	; (80153ac <__sinit+0x28>)
 801539a:	6223      	str	r3, [r4, #32]
 801539c:	4b04      	ldr	r3, [pc, #16]	; (80153b0 <__sinit+0x2c>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d1f5      	bne.n	8015390 <__sinit+0xc>
 80153a4:	f7ff ffc4 	bl	8015330 <global_stdio_init.part.0>
 80153a8:	e7f2      	b.n	8015390 <__sinit+0xc>
 80153aa:	bf00      	nop
 80153ac:	080152f1 	.word	0x080152f1
 80153b0:	24004790 	.word	0x24004790

080153b4 <_fwalk_sglue>:
 80153b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80153b8:	4607      	mov	r7, r0
 80153ba:	4688      	mov	r8, r1
 80153bc:	4614      	mov	r4, r2
 80153be:	2600      	movs	r6, #0
 80153c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80153c4:	f1b9 0901 	subs.w	r9, r9, #1
 80153c8:	d505      	bpl.n	80153d6 <_fwalk_sglue+0x22>
 80153ca:	6824      	ldr	r4, [r4, #0]
 80153cc:	2c00      	cmp	r4, #0
 80153ce:	d1f7      	bne.n	80153c0 <_fwalk_sglue+0xc>
 80153d0:	4630      	mov	r0, r6
 80153d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80153d6:	89ab      	ldrh	r3, [r5, #12]
 80153d8:	2b01      	cmp	r3, #1
 80153da:	d907      	bls.n	80153ec <_fwalk_sglue+0x38>
 80153dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80153e0:	3301      	adds	r3, #1
 80153e2:	d003      	beq.n	80153ec <_fwalk_sglue+0x38>
 80153e4:	4629      	mov	r1, r5
 80153e6:	4638      	mov	r0, r7
 80153e8:	47c0      	blx	r8
 80153ea:	4306      	orrs	r6, r0
 80153ec:	3568      	adds	r5, #104	; 0x68
 80153ee:	e7e9      	b.n	80153c4 <_fwalk_sglue+0x10>

080153f0 <iprintf>:
 80153f0:	b40f      	push	{r0, r1, r2, r3}
 80153f2:	b507      	push	{r0, r1, r2, lr}
 80153f4:	4906      	ldr	r1, [pc, #24]	; (8015410 <iprintf+0x20>)
 80153f6:	ab04      	add	r3, sp, #16
 80153f8:	6808      	ldr	r0, [r1, #0]
 80153fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80153fe:	6881      	ldr	r1, [r0, #8]
 8015400:	9301      	str	r3, [sp, #4]
 8015402:	f001 fc0b 	bl	8016c1c <_vfiprintf_r>
 8015406:	b003      	add	sp, #12
 8015408:	f85d eb04 	ldr.w	lr, [sp], #4
 801540c:	b004      	add	sp, #16
 801540e:	4770      	bx	lr
 8015410:	240000ac 	.word	0x240000ac

08015414 <_puts_r>:
 8015414:	6a03      	ldr	r3, [r0, #32]
 8015416:	b570      	push	{r4, r5, r6, lr}
 8015418:	6884      	ldr	r4, [r0, #8]
 801541a:	4605      	mov	r5, r0
 801541c:	460e      	mov	r6, r1
 801541e:	b90b      	cbnz	r3, 8015424 <_puts_r+0x10>
 8015420:	f7ff ffb0 	bl	8015384 <__sinit>
 8015424:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015426:	07db      	lsls	r3, r3, #31
 8015428:	d405      	bmi.n	8015436 <_puts_r+0x22>
 801542a:	89a3      	ldrh	r3, [r4, #12]
 801542c:	0598      	lsls	r0, r3, #22
 801542e:	d402      	bmi.n	8015436 <_puts_r+0x22>
 8015430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015432:	f000 f9f4 	bl	801581e <__retarget_lock_acquire_recursive>
 8015436:	89a3      	ldrh	r3, [r4, #12]
 8015438:	0719      	lsls	r1, r3, #28
 801543a:	d513      	bpl.n	8015464 <_puts_r+0x50>
 801543c:	6923      	ldr	r3, [r4, #16]
 801543e:	b18b      	cbz	r3, 8015464 <_puts_r+0x50>
 8015440:	3e01      	subs	r6, #1
 8015442:	68a3      	ldr	r3, [r4, #8]
 8015444:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015448:	3b01      	subs	r3, #1
 801544a:	60a3      	str	r3, [r4, #8]
 801544c:	b9e9      	cbnz	r1, 801548a <_puts_r+0x76>
 801544e:	2b00      	cmp	r3, #0
 8015450:	da2e      	bge.n	80154b0 <_puts_r+0x9c>
 8015452:	4622      	mov	r2, r4
 8015454:	210a      	movs	r1, #10
 8015456:	4628      	mov	r0, r5
 8015458:	f000 f87b 	bl	8015552 <__swbuf_r>
 801545c:	3001      	adds	r0, #1
 801545e:	d007      	beq.n	8015470 <_puts_r+0x5c>
 8015460:	250a      	movs	r5, #10
 8015462:	e007      	b.n	8015474 <_puts_r+0x60>
 8015464:	4621      	mov	r1, r4
 8015466:	4628      	mov	r0, r5
 8015468:	f000 f8b0 	bl	80155cc <__swsetup_r>
 801546c:	2800      	cmp	r0, #0
 801546e:	d0e7      	beq.n	8015440 <_puts_r+0x2c>
 8015470:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8015474:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015476:	07da      	lsls	r2, r3, #31
 8015478:	d405      	bmi.n	8015486 <_puts_r+0x72>
 801547a:	89a3      	ldrh	r3, [r4, #12]
 801547c:	059b      	lsls	r3, r3, #22
 801547e:	d402      	bmi.n	8015486 <_puts_r+0x72>
 8015480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015482:	f000 f9cd 	bl	8015820 <__retarget_lock_release_recursive>
 8015486:	4628      	mov	r0, r5
 8015488:	bd70      	pop	{r4, r5, r6, pc}
 801548a:	2b00      	cmp	r3, #0
 801548c:	da04      	bge.n	8015498 <_puts_r+0x84>
 801548e:	69a2      	ldr	r2, [r4, #24]
 8015490:	429a      	cmp	r2, r3
 8015492:	dc06      	bgt.n	80154a2 <_puts_r+0x8e>
 8015494:	290a      	cmp	r1, #10
 8015496:	d004      	beq.n	80154a2 <_puts_r+0x8e>
 8015498:	6823      	ldr	r3, [r4, #0]
 801549a:	1c5a      	adds	r2, r3, #1
 801549c:	6022      	str	r2, [r4, #0]
 801549e:	7019      	strb	r1, [r3, #0]
 80154a0:	e7cf      	b.n	8015442 <_puts_r+0x2e>
 80154a2:	4622      	mov	r2, r4
 80154a4:	4628      	mov	r0, r5
 80154a6:	f000 f854 	bl	8015552 <__swbuf_r>
 80154aa:	3001      	adds	r0, #1
 80154ac:	d1c9      	bne.n	8015442 <_puts_r+0x2e>
 80154ae:	e7df      	b.n	8015470 <_puts_r+0x5c>
 80154b0:	6823      	ldr	r3, [r4, #0]
 80154b2:	250a      	movs	r5, #10
 80154b4:	1c5a      	adds	r2, r3, #1
 80154b6:	6022      	str	r2, [r4, #0]
 80154b8:	701d      	strb	r5, [r3, #0]
 80154ba:	e7db      	b.n	8015474 <_puts_r+0x60>

080154bc <puts>:
 80154bc:	4b02      	ldr	r3, [pc, #8]	; (80154c8 <puts+0xc>)
 80154be:	4601      	mov	r1, r0
 80154c0:	6818      	ldr	r0, [r3, #0]
 80154c2:	f7ff bfa7 	b.w	8015414 <_puts_r>
 80154c6:	bf00      	nop
 80154c8:	240000ac 	.word	0x240000ac

080154cc <__sread>:
 80154cc:	b510      	push	{r4, lr}
 80154ce:	460c      	mov	r4, r1
 80154d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154d4:	f000 f930 	bl	8015738 <_read_r>
 80154d8:	2800      	cmp	r0, #0
 80154da:	bfab      	itete	ge
 80154dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80154de:	89a3      	ldrhlt	r3, [r4, #12]
 80154e0:	181b      	addge	r3, r3, r0
 80154e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80154e6:	bfac      	ite	ge
 80154e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80154ea:	81a3      	strhlt	r3, [r4, #12]
 80154ec:	bd10      	pop	{r4, pc}

080154ee <__swrite>:
 80154ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154f2:	461f      	mov	r7, r3
 80154f4:	898b      	ldrh	r3, [r1, #12]
 80154f6:	05db      	lsls	r3, r3, #23
 80154f8:	4605      	mov	r5, r0
 80154fa:	460c      	mov	r4, r1
 80154fc:	4616      	mov	r6, r2
 80154fe:	d505      	bpl.n	801550c <__swrite+0x1e>
 8015500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015504:	2302      	movs	r3, #2
 8015506:	2200      	movs	r2, #0
 8015508:	f000 f904 	bl	8015714 <_lseek_r>
 801550c:	89a3      	ldrh	r3, [r4, #12]
 801550e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015516:	81a3      	strh	r3, [r4, #12]
 8015518:	4632      	mov	r2, r6
 801551a:	463b      	mov	r3, r7
 801551c:	4628      	mov	r0, r5
 801551e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015522:	f000 b93f 	b.w	80157a4 <_write_r>

08015526 <__sseek>:
 8015526:	b510      	push	{r4, lr}
 8015528:	460c      	mov	r4, r1
 801552a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801552e:	f000 f8f1 	bl	8015714 <_lseek_r>
 8015532:	1c43      	adds	r3, r0, #1
 8015534:	89a3      	ldrh	r3, [r4, #12]
 8015536:	bf15      	itete	ne
 8015538:	6560      	strne	r0, [r4, #84]	; 0x54
 801553a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801553e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015542:	81a3      	strheq	r3, [r4, #12]
 8015544:	bf18      	it	ne
 8015546:	81a3      	strhne	r3, [r4, #12]
 8015548:	bd10      	pop	{r4, pc}

0801554a <__sclose>:
 801554a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801554e:	f000 b8d1 	b.w	80156f4 <_close_r>

08015552 <__swbuf_r>:
 8015552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015554:	460e      	mov	r6, r1
 8015556:	4614      	mov	r4, r2
 8015558:	4605      	mov	r5, r0
 801555a:	b118      	cbz	r0, 8015564 <__swbuf_r+0x12>
 801555c:	6a03      	ldr	r3, [r0, #32]
 801555e:	b90b      	cbnz	r3, 8015564 <__swbuf_r+0x12>
 8015560:	f7ff ff10 	bl	8015384 <__sinit>
 8015564:	69a3      	ldr	r3, [r4, #24]
 8015566:	60a3      	str	r3, [r4, #8]
 8015568:	89a3      	ldrh	r3, [r4, #12]
 801556a:	071a      	lsls	r2, r3, #28
 801556c:	d525      	bpl.n	80155ba <__swbuf_r+0x68>
 801556e:	6923      	ldr	r3, [r4, #16]
 8015570:	b31b      	cbz	r3, 80155ba <__swbuf_r+0x68>
 8015572:	6823      	ldr	r3, [r4, #0]
 8015574:	6922      	ldr	r2, [r4, #16]
 8015576:	1a98      	subs	r0, r3, r2
 8015578:	6963      	ldr	r3, [r4, #20]
 801557a:	b2f6      	uxtb	r6, r6
 801557c:	4283      	cmp	r3, r0
 801557e:	4637      	mov	r7, r6
 8015580:	dc04      	bgt.n	801558c <__swbuf_r+0x3a>
 8015582:	4621      	mov	r1, r4
 8015584:	4628      	mov	r0, r5
 8015586:	f001 fce9 	bl	8016f5c <_fflush_r>
 801558a:	b9e0      	cbnz	r0, 80155c6 <__swbuf_r+0x74>
 801558c:	68a3      	ldr	r3, [r4, #8]
 801558e:	3b01      	subs	r3, #1
 8015590:	60a3      	str	r3, [r4, #8]
 8015592:	6823      	ldr	r3, [r4, #0]
 8015594:	1c5a      	adds	r2, r3, #1
 8015596:	6022      	str	r2, [r4, #0]
 8015598:	701e      	strb	r6, [r3, #0]
 801559a:	6962      	ldr	r2, [r4, #20]
 801559c:	1c43      	adds	r3, r0, #1
 801559e:	429a      	cmp	r2, r3
 80155a0:	d004      	beq.n	80155ac <__swbuf_r+0x5a>
 80155a2:	89a3      	ldrh	r3, [r4, #12]
 80155a4:	07db      	lsls	r3, r3, #31
 80155a6:	d506      	bpl.n	80155b6 <__swbuf_r+0x64>
 80155a8:	2e0a      	cmp	r6, #10
 80155aa:	d104      	bne.n	80155b6 <__swbuf_r+0x64>
 80155ac:	4621      	mov	r1, r4
 80155ae:	4628      	mov	r0, r5
 80155b0:	f001 fcd4 	bl	8016f5c <_fflush_r>
 80155b4:	b938      	cbnz	r0, 80155c6 <__swbuf_r+0x74>
 80155b6:	4638      	mov	r0, r7
 80155b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155ba:	4621      	mov	r1, r4
 80155bc:	4628      	mov	r0, r5
 80155be:	f000 f805 	bl	80155cc <__swsetup_r>
 80155c2:	2800      	cmp	r0, #0
 80155c4:	d0d5      	beq.n	8015572 <__swbuf_r+0x20>
 80155c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80155ca:	e7f4      	b.n	80155b6 <__swbuf_r+0x64>

080155cc <__swsetup_r>:
 80155cc:	b538      	push	{r3, r4, r5, lr}
 80155ce:	4b2a      	ldr	r3, [pc, #168]	; (8015678 <__swsetup_r+0xac>)
 80155d0:	4605      	mov	r5, r0
 80155d2:	6818      	ldr	r0, [r3, #0]
 80155d4:	460c      	mov	r4, r1
 80155d6:	b118      	cbz	r0, 80155e0 <__swsetup_r+0x14>
 80155d8:	6a03      	ldr	r3, [r0, #32]
 80155da:	b90b      	cbnz	r3, 80155e0 <__swsetup_r+0x14>
 80155dc:	f7ff fed2 	bl	8015384 <__sinit>
 80155e0:	89a3      	ldrh	r3, [r4, #12]
 80155e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155e6:	0718      	lsls	r0, r3, #28
 80155e8:	d422      	bmi.n	8015630 <__swsetup_r+0x64>
 80155ea:	06d9      	lsls	r1, r3, #27
 80155ec:	d407      	bmi.n	80155fe <__swsetup_r+0x32>
 80155ee:	2309      	movs	r3, #9
 80155f0:	602b      	str	r3, [r5, #0]
 80155f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80155f6:	81a3      	strh	r3, [r4, #12]
 80155f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80155fc:	e034      	b.n	8015668 <__swsetup_r+0x9c>
 80155fe:	0758      	lsls	r0, r3, #29
 8015600:	d512      	bpl.n	8015628 <__swsetup_r+0x5c>
 8015602:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015604:	b141      	cbz	r1, 8015618 <__swsetup_r+0x4c>
 8015606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801560a:	4299      	cmp	r1, r3
 801560c:	d002      	beq.n	8015614 <__swsetup_r+0x48>
 801560e:	4628      	mov	r0, r5
 8015610:	f000 ff0a 	bl	8016428 <_free_r>
 8015614:	2300      	movs	r3, #0
 8015616:	6363      	str	r3, [r4, #52]	; 0x34
 8015618:	89a3      	ldrh	r3, [r4, #12]
 801561a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801561e:	81a3      	strh	r3, [r4, #12]
 8015620:	2300      	movs	r3, #0
 8015622:	6063      	str	r3, [r4, #4]
 8015624:	6923      	ldr	r3, [r4, #16]
 8015626:	6023      	str	r3, [r4, #0]
 8015628:	89a3      	ldrh	r3, [r4, #12]
 801562a:	f043 0308 	orr.w	r3, r3, #8
 801562e:	81a3      	strh	r3, [r4, #12]
 8015630:	6923      	ldr	r3, [r4, #16]
 8015632:	b94b      	cbnz	r3, 8015648 <__swsetup_r+0x7c>
 8015634:	89a3      	ldrh	r3, [r4, #12]
 8015636:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801563a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801563e:	d003      	beq.n	8015648 <__swsetup_r+0x7c>
 8015640:	4621      	mov	r1, r4
 8015642:	4628      	mov	r0, r5
 8015644:	f001 fcd8 	bl	8016ff8 <__smakebuf_r>
 8015648:	89a0      	ldrh	r0, [r4, #12]
 801564a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801564e:	f010 0301 	ands.w	r3, r0, #1
 8015652:	d00a      	beq.n	801566a <__swsetup_r+0x9e>
 8015654:	2300      	movs	r3, #0
 8015656:	60a3      	str	r3, [r4, #8]
 8015658:	6963      	ldr	r3, [r4, #20]
 801565a:	425b      	negs	r3, r3
 801565c:	61a3      	str	r3, [r4, #24]
 801565e:	6923      	ldr	r3, [r4, #16]
 8015660:	b943      	cbnz	r3, 8015674 <__swsetup_r+0xa8>
 8015662:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015666:	d1c4      	bne.n	80155f2 <__swsetup_r+0x26>
 8015668:	bd38      	pop	{r3, r4, r5, pc}
 801566a:	0781      	lsls	r1, r0, #30
 801566c:	bf58      	it	pl
 801566e:	6963      	ldrpl	r3, [r4, #20]
 8015670:	60a3      	str	r3, [r4, #8]
 8015672:	e7f4      	b.n	801565e <__swsetup_r+0x92>
 8015674:	2000      	movs	r0, #0
 8015676:	e7f7      	b.n	8015668 <__swsetup_r+0x9c>
 8015678:	240000ac 	.word	0x240000ac

0801567c <memset>:
 801567c:	4402      	add	r2, r0
 801567e:	4603      	mov	r3, r0
 8015680:	4293      	cmp	r3, r2
 8015682:	d100      	bne.n	8015686 <memset+0xa>
 8015684:	4770      	bx	lr
 8015686:	f803 1b01 	strb.w	r1, [r3], #1
 801568a:	e7f9      	b.n	8015680 <memset+0x4>

0801568c <_raise_r>:
 801568c:	291f      	cmp	r1, #31
 801568e:	b538      	push	{r3, r4, r5, lr}
 8015690:	4604      	mov	r4, r0
 8015692:	460d      	mov	r5, r1
 8015694:	d904      	bls.n	80156a0 <_raise_r+0x14>
 8015696:	2316      	movs	r3, #22
 8015698:	6003      	str	r3, [r0, #0]
 801569a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801569e:	bd38      	pop	{r3, r4, r5, pc}
 80156a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80156a2:	b112      	cbz	r2, 80156aa <_raise_r+0x1e>
 80156a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80156a8:	b94b      	cbnz	r3, 80156be <_raise_r+0x32>
 80156aa:	4620      	mov	r0, r4
 80156ac:	f000 f868 	bl	8015780 <_getpid_r>
 80156b0:	462a      	mov	r2, r5
 80156b2:	4601      	mov	r1, r0
 80156b4:	4620      	mov	r0, r4
 80156b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80156ba:	f000 b84f 	b.w	801575c <_kill_r>
 80156be:	2b01      	cmp	r3, #1
 80156c0:	d00a      	beq.n	80156d8 <_raise_r+0x4c>
 80156c2:	1c59      	adds	r1, r3, #1
 80156c4:	d103      	bne.n	80156ce <_raise_r+0x42>
 80156c6:	2316      	movs	r3, #22
 80156c8:	6003      	str	r3, [r0, #0]
 80156ca:	2001      	movs	r0, #1
 80156cc:	e7e7      	b.n	801569e <_raise_r+0x12>
 80156ce:	2400      	movs	r4, #0
 80156d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80156d4:	4628      	mov	r0, r5
 80156d6:	4798      	blx	r3
 80156d8:	2000      	movs	r0, #0
 80156da:	e7e0      	b.n	801569e <_raise_r+0x12>

080156dc <raise>:
 80156dc:	4b02      	ldr	r3, [pc, #8]	; (80156e8 <raise+0xc>)
 80156de:	4601      	mov	r1, r0
 80156e0:	6818      	ldr	r0, [r3, #0]
 80156e2:	f7ff bfd3 	b.w	801568c <_raise_r>
 80156e6:	bf00      	nop
 80156e8:	240000ac 	.word	0x240000ac

080156ec <_localeconv_r>:
 80156ec:	4800      	ldr	r0, [pc, #0]	; (80156f0 <_localeconv_r+0x4>)
 80156ee:	4770      	bx	lr
 80156f0:	240001a0 	.word	0x240001a0

080156f4 <_close_r>:
 80156f4:	b538      	push	{r3, r4, r5, lr}
 80156f6:	4d06      	ldr	r5, [pc, #24]	; (8015710 <_close_r+0x1c>)
 80156f8:	2300      	movs	r3, #0
 80156fa:	4604      	mov	r4, r0
 80156fc:	4608      	mov	r0, r1
 80156fe:	602b      	str	r3, [r5, #0]
 8015700:	f7f1 fc83 	bl	800700a <_close>
 8015704:	1c43      	adds	r3, r0, #1
 8015706:	d102      	bne.n	801570e <_close_r+0x1a>
 8015708:	682b      	ldr	r3, [r5, #0]
 801570a:	b103      	cbz	r3, 801570e <_close_r+0x1a>
 801570c:	6023      	str	r3, [r4, #0]
 801570e:	bd38      	pop	{r3, r4, r5, pc}
 8015710:	24004794 	.word	0x24004794

08015714 <_lseek_r>:
 8015714:	b538      	push	{r3, r4, r5, lr}
 8015716:	4d07      	ldr	r5, [pc, #28]	; (8015734 <_lseek_r+0x20>)
 8015718:	4604      	mov	r4, r0
 801571a:	4608      	mov	r0, r1
 801571c:	4611      	mov	r1, r2
 801571e:	2200      	movs	r2, #0
 8015720:	602a      	str	r2, [r5, #0]
 8015722:	461a      	mov	r2, r3
 8015724:	f7f1 fc98 	bl	8007058 <_lseek>
 8015728:	1c43      	adds	r3, r0, #1
 801572a:	d102      	bne.n	8015732 <_lseek_r+0x1e>
 801572c:	682b      	ldr	r3, [r5, #0]
 801572e:	b103      	cbz	r3, 8015732 <_lseek_r+0x1e>
 8015730:	6023      	str	r3, [r4, #0]
 8015732:	bd38      	pop	{r3, r4, r5, pc}
 8015734:	24004794 	.word	0x24004794

08015738 <_read_r>:
 8015738:	b538      	push	{r3, r4, r5, lr}
 801573a:	4d07      	ldr	r5, [pc, #28]	; (8015758 <_read_r+0x20>)
 801573c:	4604      	mov	r4, r0
 801573e:	4608      	mov	r0, r1
 8015740:	4611      	mov	r1, r2
 8015742:	2200      	movs	r2, #0
 8015744:	602a      	str	r2, [r5, #0]
 8015746:	461a      	mov	r2, r3
 8015748:	f7f1 fc26 	bl	8006f98 <_read>
 801574c:	1c43      	adds	r3, r0, #1
 801574e:	d102      	bne.n	8015756 <_read_r+0x1e>
 8015750:	682b      	ldr	r3, [r5, #0]
 8015752:	b103      	cbz	r3, 8015756 <_read_r+0x1e>
 8015754:	6023      	str	r3, [r4, #0]
 8015756:	bd38      	pop	{r3, r4, r5, pc}
 8015758:	24004794 	.word	0x24004794

0801575c <_kill_r>:
 801575c:	b538      	push	{r3, r4, r5, lr}
 801575e:	4d07      	ldr	r5, [pc, #28]	; (801577c <_kill_r+0x20>)
 8015760:	2300      	movs	r3, #0
 8015762:	4604      	mov	r4, r0
 8015764:	4608      	mov	r0, r1
 8015766:	4611      	mov	r1, r2
 8015768:	602b      	str	r3, [r5, #0]
 801576a:	f7f1 fbfb 	bl	8006f64 <_kill>
 801576e:	1c43      	adds	r3, r0, #1
 8015770:	d102      	bne.n	8015778 <_kill_r+0x1c>
 8015772:	682b      	ldr	r3, [r5, #0]
 8015774:	b103      	cbz	r3, 8015778 <_kill_r+0x1c>
 8015776:	6023      	str	r3, [r4, #0]
 8015778:	bd38      	pop	{r3, r4, r5, pc}
 801577a:	bf00      	nop
 801577c:	24004794 	.word	0x24004794

08015780 <_getpid_r>:
 8015780:	f7f1 bbe8 	b.w	8006f54 <_getpid>

08015784 <_sbrk_r>:
 8015784:	b538      	push	{r3, r4, r5, lr}
 8015786:	4d06      	ldr	r5, [pc, #24]	; (80157a0 <_sbrk_r+0x1c>)
 8015788:	2300      	movs	r3, #0
 801578a:	4604      	mov	r4, r0
 801578c:	4608      	mov	r0, r1
 801578e:	602b      	str	r3, [r5, #0]
 8015790:	f7f1 fc70 	bl	8007074 <_sbrk>
 8015794:	1c43      	adds	r3, r0, #1
 8015796:	d102      	bne.n	801579e <_sbrk_r+0x1a>
 8015798:	682b      	ldr	r3, [r5, #0]
 801579a:	b103      	cbz	r3, 801579e <_sbrk_r+0x1a>
 801579c:	6023      	str	r3, [r4, #0]
 801579e:	bd38      	pop	{r3, r4, r5, pc}
 80157a0:	24004794 	.word	0x24004794

080157a4 <_write_r>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	4d07      	ldr	r5, [pc, #28]	; (80157c4 <_write_r+0x20>)
 80157a8:	4604      	mov	r4, r0
 80157aa:	4608      	mov	r0, r1
 80157ac:	4611      	mov	r1, r2
 80157ae:	2200      	movs	r2, #0
 80157b0:	602a      	str	r2, [r5, #0]
 80157b2:	461a      	mov	r2, r3
 80157b4:	f7f1 fc0d 	bl	8006fd2 <_write>
 80157b8:	1c43      	adds	r3, r0, #1
 80157ba:	d102      	bne.n	80157c2 <_write_r+0x1e>
 80157bc:	682b      	ldr	r3, [r5, #0]
 80157be:	b103      	cbz	r3, 80157c2 <_write_r+0x1e>
 80157c0:	6023      	str	r3, [r4, #0]
 80157c2:	bd38      	pop	{r3, r4, r5, pc}
 80157c4:	24004794 	.word	0x24004794

080157c8 <__errno>:
 80157c8:	4b01      	ldr	r3, [pc, #4]	; (80157d0 <__errno+0x8>)
 80157ca:	6818      	ldr	r0, [r3, #0]
 80157cc:	4770      	bx	lr
 80157ce:	bf00      	nop
 80157d0:	240000ac 	.word	0x240000ac

080157d4 <__libc_init_array>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	4d0d      	ldr	r5, [pc, #52]	; (801580c <__libc_init_array+0x38>)
 80157d8:	4c0d      	ldr	r4, [pc, #52]	; (8015810 <__libc_init_array+0x3c>)
 80157da:	1b64      	subs	r4, r4, r5
 80157dc:	10a4      	asrs	r4, r4, #2
 80157de:	2600      	movs	r6, #0
 80157e0:	42a6      	cmp	r6, r4
 80157e2:	d109      	bne.n	80157f8 <__libc_init_array+0x24>
 80157e4:	4d0b      	ldr	r5, [pc, #44]	; (8015814 <__libc_init_array+0x40>)
 80157e6:	4c0c      	ldr	r4, [pc, #48]	; (8015818 <__libc_init_array+0x44>)
 80157e8:	f001 fcca 	bl	8017180 <_init>
 80157ec:	1b64      	subs	r4, r4, r5
 80157ee:	10a4      	asrs	r4, r4, #2
 80157f0:	2600      	movs	r6, #0
 80157f2:	42a6      	cmp	r6, r4
 80157f4:	d105      	bne.n	8015802 <__libc_init_array+0x2e>
 80157f6:	bd70      	pop	{r4, r5, r6, pc}
 80157f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80157fc:	4798      	blx	r3
 80157fe:	3601      	adds	r6, #1
 8015800:	e7ee      	b.n	80157e0 <__libc_init_array+0xc>
 8015802:	f855 3b04 	ldr.w	r3, [r5], #4
 8015806:	4798      	blx	r3
 8015808:	3601      	adds	r6, #1
 801580a:	e7f2      	b.n	80157f2 <__libc_init_array+0x1e>
 801580c:	08017a84 	.word	0x08017a84
 8015810:	08017a84 	.word	0x08017a84
 8015814:	08017a84 	.word	0x08017a84
 8015818:	08017a90 	.word	0x08017a90

0801581c <__retarget_lock_init_recursive>:
 801581c:	4770      	bx	lr

0801581e <__retarget_lock_acquire_recursive>:
 801581e:	4770      	bx	lr

08015820 <__retarget_lock_release_recursive>:
 8015820:	4770      	bx	lr

08015822 <memcpy>:
 8015822:	440a      	add	r2, r1
 8015824:	4291      	cmp	r1, r2
 8015826:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801582a:	d100      	bne.n	801582e <memcpy+0xc>
 801582c:	4770      	bx	lr
 801582e:	b510      	push	{r4, lr}
 8015830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015838:	4291      	cmp	r1, r2
 801583a:	d1f9      	bne.n	8015830 <memcpy+0xe>
 801583c:	bd10      	pop	{r4, pc}

0801583e <quorem>:
 801583e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015842:	6903      	ldr	r3, [r0, #16]
 8015844:	690c      	ldr	r4, [r1, #16]
 8015846:	42a3      	cmp	r3, r4
 8015848:	4607      	mov	r7, r0
 801584a:	db7e      	blt.n	801594a <quorem+0x10c>
 801584c:	3c01      	subs	r4, #1
 801584e:	f101 0814 	add.w	r8, r1, #20
 8015852:	f100 0514 	add.w	r5, r0, #20
 8015856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801585a:	9301      	str	r3, [sp, #4]
 801585c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8015860:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015864:	3301      	adds	r3, #1
 8015866:	429a      	cmp	r2, r3
 8015868:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801586c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8015870:	fbb2 f6f3 	udiv	r6, r2, r3
 8015874:	d331      	bcc.n	80158da <quorem+0x9c>
 8015876:	f04f 0e00 	mov.w	lr, #0
 801587a:	4640      	mov	r0, r8
 801587c:	46ac      	mov	ip, r5
 801587e:	46f2      	mov	sl, lr
 8015880:	f850 2b04 	ldr.w	r2, [r0], #4
 8015884:	b293      	uxth	r3, r2
 8015886:	fb06 e303 	mla	r3, r6, r3, lr
 801588a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801588e:	0c1a      	lsrs	r2, r3, #16
 8015890:	b29b      	uxth	r3, r3
 8015892:	ebaa 0303 	sub.w	r3, sl, r3
 8015896:	f8dc a000 	ldr.w	sl, [ip]
 801589a:	fa13 f38a 	uxtah	r3, r3, sl
 801589e:	fb06 220e 	mla	r2, r6, lr, r2
 80158a2:	9300      	str	r3, [sp, #0]
 80158a4:	9b00      	ldr	r3, [sp, #0]
 80158a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80158aa:	b292      	uxth	r2, r2
 80158ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80158b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80158b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80158b8:	4581      	cmp	r9, r0
 80158ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80158be:	f84c 3b04 	str.w	r3, [ip], #4
 80158c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80158c6:	d2db      	bcs.n	8015880 <quorem+0x42>
 80158c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80158cc:	b92b      	cbnz	r3, 80158da <quorem+0x9c>
 80158ce:	9b01      	ldr	r3, [sp, #4]
 80158d0:	3b04      	subs	r3, #4
 80158d2:	429d      	cmp	r5, r3
 80158d4:	461a      	mov	r2, r3
 80158d6:	d32c      	bcc.n	8015932 <quorem+0xf4>
 80158d8:	613c      	str	r4, [r7, #16]
 80158da:	4638      	mov	r0, r7
 80158dc:	f001 f86c 	bl	80169b8 <__mcmp>
 80158e0:	2800      	cmp	r0, #0
 80158e2:	db22      	blt.n	801592a <quorem+0xec>
 80158e4:	3601      	adds	r6, #1
 80158e6:	4629      	mov	r1, r5
 80158e8:	2000      	movs	r0, #0
 80158ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80158ee:	f8d1 c000 	ldr.w	ip, [r1]
 80158f2:	b293      	uxth	r3, r2
 80158f4:	1ac3      	subs	r3, r0, r3
 80158f6:	0c12      	lsrs	r2, r2, #16
 80158f8:	fa13 f38c 	uxtah	r3, r3, ip
 80158fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8015900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015904:	b29b      	uxth	r3, r3
 8015906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801590a:	45c1      	cmp	r9, r8
 801590c:	f841 3b04 	str.w	r3, [r1], #4
 8015910:	ea4f 4022 	mov.w	r0, r2, asr #16
 8015914:	d2e9      	bcs.n	80158ea <quorem+0xac>
 8015916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801591a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801591e:	b922      	cbnz	r2, 801592a <quorem+0xec>
 8015920:	3b04      	subs	r3, #4
 8015922:	429d      	cmp	r5, r3
 8015924:	461a      	mov	r2, r3
 8015926:	d30a      	bcc.n	801593e <quorem+0x100>
 8015928:	613c      	str	r4, [r7, #16]
 801592a:	4630      	mov	r0, r6
 801592c:	b003      	add	sp, #12
 801592e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015932:	6812      	ldr	r2, [r2, #0]
 8015934:	3b04      	subs	r3, #4
 8015936:	2a00      	cmp	r2, #0
 8015938:	d1ce      	bne.n	80158d8 <quorem+0x9a>
 801593a:	3c01      	subs	r4, #1
 801593c:	e7c9      	b.n	80158d2 <quorem+0x94>
 801593e:	6812      	ldr	r2, [r2, #0]
 8015940:	3b04      	subs	r3, #4
 8015942:	2a00      	cmp	r2, #0
 8015944:	d1f0      	bne.n	8015928 <quorem+0xea>
 8015946:	3c01      	subs	r4, #1
 8015948:	e7eb      	b.n	8015922 <quorem+0xe4>
 801594a:	2000      	movs	r0, #0
 801594c:	e7ee      	b.n	801592c <quorem+0xee>
	...

08015950 <_dtoa_r>:
 8015950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015954:	ed2d 8b02 	vpush	{d8}
 8015958:	69c5      	ldr	r5, [r0, #28]
 801595a:	b091      	sub	sp, #68	; 0x44
 801595c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8015960:	ec59 8b10 	vmov	r8, r9, d0
 8015964:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8015966:	9106      	str	r1, [sp, #24]
 8015968:	4606      	mov	r6, r0
 801596a:	9208      	str	r2, [sp, #32]
 801596c:	930c      	str	r3, [sp, #48]	; 0x30
 801596e:	b975      	cbnz	r5, 801598e <_dtoa_r+0x3e>
 8015970:	2010      	movs	r0, #16
 8015972:	f7fe ff55 	bl	8014820 <malloc>
 8015976:	4602      	mov	r2, r0
 8015978:	61f0      	str	r0, [r6, #28]
 801597a:	b920      	cbnz	r0, 8015986 <_dtoa_r+0x36>
 801597c:	4ba6      	ldr	r3, [pc, #664]	; (8015c18 <_dtoa_r+0x2c8>)
 801597e:	21ef      	movs	r1, #239	; 0xef
 8015980:	48a6      	ldr	r0, [pc, #664]	; (8015c1c <_dtoa_r+0x2cc>)
 8015982:	f001 fb97 	bl	80170b4 <__assert_func>
 8015986:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801598a:	6005      	str	r5, [r0, #0]
 801598c:	60c5      	str	r5, [r0, #12]
 801598e:	69f3      	ldr	r3, [r6, #28]
 8015990:	6819      	ldr	r1, [r3, #0]
 8015992:	b151      	cbz	r1, 80159aa <_dtoa_r+0x5a>
 8015994:	685a      	ldr	r2, [r3, #4]
 8015996:	604a      	str	r2, [r1, #4]
 8015998:	2301      	movs	r3, #1
 801599a:	4093      	lsls	r3, r2
 801599c:	608b      	str	r3, [r1, #8]
 801599e:	4630      	mov	r0, r6
 80159a0:	f000 fdce 	bl	8016540 <_Bfree>
 80159a4:	69f3      	ldr	r3, [r6, #28]
 80159a6:	2200      	movs	r2, #0
 80159a8:	601a      	str	r2, [r3, #0]
 80159aa:	f1b9 0300 	subs.w	r3, r9, #0
 80159ae:	bfbb      	ittet	lt
 80159b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80159b4:	9303      	strlt	r3, [sp, #12]
 80159b6:	2300      	movge	r3, #0
 80159b8:	2201      	movlt	r2, #1
 80159ba:	bfac      	ite	ge
 80159bc:	6023      	strge	r3, [r4, #0]
 80159be:	6022      	strlt	r2, [r4, #0]
 80159c0:	4b97      	ldr	r3, [pc, #604]	; (8015c20 <_dtoa_r+0x2d0>)
 80159c2:	9c03      	ldr	r4, [sp, #12]
 80159c4:	43a3      	bics	r3, r4
 80159c6:	d11c      	bne.n	8015a02 <_dtoa_r+0xb2>
 80159c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80159ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80159ce:	6013      	str	r3, [r2, #0]
 80159d0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80159d4:	ea53 0308 	orrs.w	r3, r3, r8
 80159d8:	f000 84fb 	beq.w	80163d2 <_dtoa_r+0xa82>
 80159dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80159de:	b963      	cbnz	r3, 80159fa <_dtoa_r+0xaa>
 80159e0:	4b90      	ldr	r3, [pc, #576]	; (8015c24 <_dtoa_r+0x2d4>)
 80159e2:	e020      	b.n	8015a26 <_dtoa_r+0xd6>
 80159e4:	4b90      	ldr	r3, [pc, #576]	; (8015c28 <_dtoa_r+0x2d8>)
 80159e6:	9301      	str	r3, [sp, #4]
 80159e8:	3308      	adds	r3, #8
 80159ea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80159ec:	6013      	str	r3, [r2, #0]
 80159ee:	9801      	ldr	r0, [sp, #4]
 80159f0:	b011      	add	sp, #68	; 0x44
 80159f2:	ecbd 8b02 	vpop	{d8}
 80159f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159fa:	4b8a      	ldr	r3, [pc, #552]	; (8015c24 <_dtoa_r+0x2d4>)
 80159fc:	9301      	str	r3, [sp, #4]
 80159fe:	3303      	adds	r3, #3
 8015a00:	e7f3      	b.n	80159ea <_dtoa_r+0x9a>
 8015a02:	ed9d 8b02 	vldr	d8, [sp, #8]
 8015a06:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8015a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a0e:	d10c      	bne.n	8015a2a <_dtoa_r+0xda>
 8015a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015a12:	2301      	movs	r3, #1
 8015a14:	6013      	str	r3, [r2, #0]
 8015a16:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	f000 84d7 	beq.w	80163cc <_dtoa_r+0xa7c>
 8015a1e:	4b83      	ldr	r3, [pc, #524]	; (8015c2c <_dtoa_r+0x2dc>)
 8015a20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015a22:	6013      	str	r3, [r2, #0]
 8015a24:	3b01      	subs	r3, #1
 8015a26:	9301      	str	r3, [sp, #4]
 8015a28:	e7e1      	b.n	80159ee <_dtoa_r+0x9e>
 8015a2a:	aa0e      	add	r2, sp, #56	; 0x38
 8015a2c:	a90f      	add	r1, sp, #60	; 0x3c
 8015a2e:	4630      	mov	r0, r6
 8015a30:	eeb0 0b48 	vmov.f64	d0, d8
 8015a34:	f001 f866 	bl	8016b04 <__d2b>
 8015a38:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8015a3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a3e:	4605      	mov	r5, r0
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d046      	beq.n	8015ad2 <_dtoa_r+0x182>
 8015a44:	eeb0 7b48 	vmov.f64	d7, d8
 8015a48:	ee18 1a90 	vmov	r1, s17
 8015a4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8015a50:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8015a54:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8015a58:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015a5c:	2000      	movs	r0, #0
 8015a5e:	ee07 1a90 	vmov	s15, r1
 8015a62:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8015a66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015c00 <_dtoa_r+0x2b0>
 8015a6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8015a6e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8015c08 <_dtoa_r+0x2b8>
 8015a72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015a76:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015c10 <_dtoa_r+0x2c0>
 8015a7a:	ee07 3a90 	vmov	s15, r3
 8015a7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8015a82:	eeb0 7b46 	vmov.f64	d7, d6
 8015a86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8015a8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8015a8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a96:	ee16 ba90 	vmov	fp, s13
 8015a9a:	9009      	str	r0, [sp, #36]	; 0x24
 8015a9c:	d508      	bpl.n	8015ab0 <_dtoa_r+0x160>
 8015a9e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015aa2:	eeb4 6b47 	vcmp.f64	d6, d7
 8015aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aaa:	bf18      	it	ne
 8015aac:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8015ab0:	f1bb 0f16 	cmp.w	fp, #22
 8015ab4:	d82b      	bhi.n	8015b0e <_dtoa_r+0x1be>
 8015ab6:	495e      	ldr	r1, [pc, #376]	; (8015c30 <_dtoa_r+0x2e0>)
 8015ab8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8015abc:	ed91 7b00 	vldr	d7, [r1]
 8015ac0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8015ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ac8:	d501      	bpl.n	8015ace <_dtoa_r+0x17e>
 8015aca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8015ace:	2100      	movs	r1, #0
 8015ad0:	e01e      	b.n	8015b10 <_dtoa_r+0x1c0>
 8015ad2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ad4:	4413      	add	r3, r2
 8015ad6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8015ada:	2920      	cmp	r1, #32
 8015adc:	bfc1      	itttt	gt
 8015ade:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8015ae2:	408c      	lslgt	r4, r1
 8015ae4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8015ae8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8015aec:	bfd6      	itet	le
 8015aee:	f1c1 0120 	rsble	r1, r1, #32
 8015af2:	4321      	orrgt	r1, r4
 8015af4:	fa08 f101 	lslle.w	r1, r8, r1
 8015af8:	ee07 1a90 	vmov	s15, r1
 8015afc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8015b00:	3b01      	subs	r3, #1
 8015b02:	ee17 1a90 	vmov	r1, s15
 8015b06:	2001      	movs	r0, #1
 8015b08:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8015b0c:	e7a7      	b.n	8015a5e <_dtoa_r+0x10e>
 8015b0e:	2101      	movs	r1, #1
 8015b10:	1ad2      	subs	r2, r2, r3
 8015b12:	1e53      	subs	r3, r2, #1
 8015b14:	9305      	str	r3, [sp, #20]
 8015b16:	bf45      	ittet	mi
 8015b18:	f1c2 0301 	rsbmi	r3, r2, #1
 8015b1c:	9304      	strmi	r3, [sp, #16]
 8015b1e:	2300      	movpl	r3, #0
 8015b20:	2300      	movmi	r3, #0
 8015b22:	bf4c      	ite	mi
 8015b24:	9305      	strmi	r3, [sp, #20]
 8015b26:	9304      	strpl	r3, [sp, #16]
 8015b28:	f1bb 0f00 	cmp.w	fp, #0
 8015b2c:	910b      	str	r1, [sp, #44]	; 0x2c
 8015b2e:	db18      	blt.n	8015b62 <_dtoa_r+0x212>
 8015b30:	9b05      	ldr	r3, [sp, #20]
 8015b32:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015b36:	445b      	add	r3, fp
 8015b38:	9305      	str	r3, [sp, #20]
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	9a06      	ldr	r2, [sp, #24]
 8015b3e:	2a09      	cmp	r2, #9
 8015b40:	d848      	bhi.n	8015bd4 <_dtoa_r+0x284>
 8015b42:	2a05      	cmp	r2, #5
 8015b44:	bfc4      	itt	gt
 8015b46:	3a04      	subgt	r2, #4
 8015b48:	9206      	strgt	r2, [sp, #24]
 8015b4a:	9a06      	ldr	r2, [sp, #24]
 8015b4c:	f1a2 0202 	sub.w	r2, r2, #2
 8015b50:	bfcc      	ite	gt
 8015b52:	2400      	movgt	r4, #0
 8015b54:	2401      	movle	r4, #1
 8015b56:	2a03      	cmp	r2, #3
 8015b58:	d847      	bhi.n	8015bea <_dtoa_r+0x29a>
 8015b5a:	e8df f002 	tbb	[pc, r2]
 8015b5e:	2d0b      	.short	0x2d0b
 8015b60:	392b      	.short	0x392b
 8015b62:	9b04      	ldr	r3, [sp, #16]
 8015b64:	2200      	movs	r2, #0
 8015b66:	eba3 030b 	sub.w	r3, r3, fp
 8015b6a:	9304      	str	r3, [sp, #16]
 8015b6c:	920a      	str	r2, [sp, #40]	; 0x28
 8015b6e:	f1cb 0300 	rsb	r3, fp, #0
 8015b72:	e7e3      	b.n	8015b3c <_dtoa_r+0x1ec>
 8015b74:	2200      	movs	r2, #0
 8015b76:	9207      	str	r2, [sp, #28]
 8015b78:	9a08      	ldr	r2, [sp, #32]
 8015b7a:	2a00      	cmp	r2, #0
 8015b7c:	dc38      	bgt.n	8015bf0 <_dtoa_r+0x2a0>
 8015b7e:	f04f 0a01 	mov.w	sl, #1
 8015b82:	46d1      	mov	r9, sl
 8015b84:	4652      	mov	r2, sl
 8015b86:	f8cd a020 	str.w	sl, [sp, #32]
 8015b8a:	69f7      	ldr	r7, [r6, #28]
 8015b8c:	2100      	movs	r1, #0
 8015b8e:	2004      	movs	r0, #4
 8015b90:	f100 0c14 	add.w	ip, r0, #20
 8015b94:	4594      	cmp	ip, r2
 8015b96:	d930      	bls.n	8015bfa <_dtoa_r+0x2aa>
 8015b98:	6079      	str	r1, [r7, #4]
 8015b9a:	4630      	mov	r0, r6
 8015b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8015b9e:	f000 fc8f 	bl	80164c0 <_Balloc>
 8015ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ba4:	9001      	str	r0, [sp, #4]
 8015ba6:	4602      	mov	r2, r0
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	d145      	bne.n	8015c38 <_dtoa_r+0x2e8>
 8015bac:	4b21      	ldr	r3, [pc, #132]	; (8015c34 <_dtoa_r+0x2e4>)
 8015bae:	f240 11af 	movw	r1, #431	; 0x1af
 8015bb2:	e6e5      	b.n	8015980 <_dtoa_r+0x30>
 8015bb4:	2201      	movs	r2, #1
 8015bb6:	e7de      	b.n	8015b76 <_dtoa_r+0x226>
 8015bb8:	2200      	movs	r2, #0
 8015bba:	9207      	str	r2, [sp, #28]
 8015bbc:	9a08      	ldr	r2, [sp, #32]
 8015bbe:	eb0b 0a02 	add.w	sl, fp, r2
 8015bc2:	f10a 0901 	add.w	r9, sl, #1
 8015bc6:	464a      	mov	r2, r9
 8015bc8:	2a01      	cmp	r2, #1
 8015bca:	bfb8      	it	lt
 8015bcc:	2201      	movlt	r2, #1
 8015bce:	e7dc      	b.n	8015b8a <_dtoa_r+0x23a>
 8015bd0:	2201      	movs	r2, #1
 8015bd2:	e7f2      	b.n	8015bba <_dtoa_r+0x26a>
 8015bd4:	2401      	movs	r4, #1
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8015bdc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8015be0:	2100      	movs	r1, #0
 8015be2:	46d1      	mov	r9, sl
 8015be4:	2212      	movs	r2, #18
 8015be6:	9108      	str	r1, [sp, #32]
 8015be8:	e7cf      	b.n	8015b8a <_dtoa_r+0x23a>
 8015bea:	2201      	movs	r2, #1
 8015bec:	9207      	str	r2, [sp, #28]
 8015bee:	e7f5      	b.n	8015bdc <_dtoa_r+0x28c>
 8015bf0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015bf4:	46d1      	mov	r9, sl
 8015bf6:	4652      	mov	r2, sl
 8015bf8:	e7c7      	b.n	8015b8a <_dtoa_r+0x23a>
 8015bfa:	3101      	adds	r1, #1
 8015bfc:	0040      	lsls	r0, r0, #1
 8015bfe:	e7c7      	b.n	8015b90 <_dtoa_r+0x240>
 8015c00:	636f4361 	.word	0x636f4361
 8015c04:	3fd287a7 	.word	0x3fd287a7
 8015c08:	8b60c8b3 	.word	0x8b60c8b3
 8015c0c:	3fc68a28 	.word	0x3fc68a28
 8015c10:	509f79fb 	.word	0x509f79fb
 8015c14:	3fd34413 	.word	0x3fd34413
 8015c18:	08017749 	.word	0x08017749
 8015c1c:	08017760 	.word	0x08017760
 8015c20:	7ff00000 	.word	0x7ff00000
 8015c24:	08017745 	.word	0x08017745
 8015c28:	0801773c 	.word	0x0801773c
 8015c2c:	08017719 	.word	0x08017719
 8015c30:	08017850 	.word	0x08017850
 8015c34:	080177b8 	.word	0x080177b8
 8015c38:	69f2      	ldr	r2, [r6, #28]
 8015c3a:	9901      	ldr	r1, [sp, #4]
 8015c3c:	6011      	str	r1, [r2, #0]
 8015c3e:	f1b9 0f0e 	cmp.w	r9, #14
 8015c42:	d86c      	bhi.n	8015d1e <_dtoa_r+0x3ce>
 8015c44:	2c00      	cmp	r4, #0
 8015c46:	d06a      	beq.n	8015d1e <_dtoa_r+0x3ce>
 8015c48:	f1bb 0f00 	cmp.w	fp, #0
 8015c4c:	f340 80a0 	ble.w	8015d90 <_dtoa_r+0x440>
 8015c50:	4ac1      	ldr	r2, [pc, #772]	; (8015f58 <_dtoa_r+0x608>)
 8015c52:	f00b 010f 	and.w	r1, fp, #15
 8015c56:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8015c5a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015c5e:	ed92 7b00 	vldr	d7, [r2]
 8015c62:	ea4f 122b 	mov.w	r2, fp, asr #4
 8015c66:	f000 8087 	beq.w	8015d78 <_dtoa_r+0x428>
 8015c6a:	49bc      	ldr	r1, [pc, #752]	; (8015f5c <_dtoa_r+0x60c>)
 8015c6c:	ed91 6b08 	vldr	d6, [r1, #32]
 8015c70:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015c74:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015c78:	f002 020f 	and.w	r2, r2, #15
 8015c7c:	2103      	movs	r1, #3
 8015c7e:	48b7      	ldr	r0, [pc, #732]	; (8015f5c <_dtoa_r+0x60c>)
 8015c80:	2a00      	cmp	r2, #0
 8015c82:	d17b      	bne.n	8015d7c <_dtoa_r+0x42c>
 8015c84:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015c88:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015c92:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015c96:	2a00      	cmp	r2, #0
 8015c98:	f000 80a0 	beq.w	8015ddc <_dtoa_r+0x48c>
 8015c9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015ca0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca8:	f140 8098 	bpl.w	8015ddc <_dtoa_r+0x48c>
 8015cac:	f1b9 0f00 	cmp.w	r9, #0
 8015cb0:	f000 8094 	beq.w	8015ddc <_dtoa_r+0x48c>
 8015cb4:	f1ba 0f00 	cmp.w	sl, #0
 8015cb8:	dd2f      	ble.n	8015d1a <_dtoa_r+0x3ca>
 8015cba:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8015cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015cc2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015cc6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8015cca:	3101      	adds	r1, #1
 8015ccc:	4654      	mov	r4, sl
 8015cce:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015cd2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015cd6:	ee07 1a90 	vmov	s15, r1
 8015cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8015cde:	eea7 5b06 	vfma.f64	d5, d7, d6
 8015ce2:	ee15 7a90 	vmov	r7, s11
 8015ce6:	ec51 0b15 	vmov	r0, r1, d5
 8015cea:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8015cee:	2c00      	cmp	r4, #0
 8015cf0:	d177      	bne.n	8015de2 <_dtoa_r+0x492>
 8015cf2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015cf6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8015cfa:	ec41 0b17 	vmov	d7, r0, r1
 8015cfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d06:	f300 826a 	bgt.w	80161de <_dtoa_r+0x88e>
 8015d0a:	eeb1 7b47 	vneg.f64	d7, d7
 8015d0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d16:	f100 8260 	bmi.w	80161da <_dtoa_r+0x88a>
 8015d1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8015d1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d20:	2a00      	cmp	r2, #0
 8015d22:	f2c0 811d 	blt.w	8015f60 <_dtoa_r+0x610>
 8015d26:	f1bb 0f0e 	cmp.w	fp, #14
 8015d2a:	f300 8119 	bgt.w	8015f60 <_dtoa_r+0x610>
 8015d2e:	4b8a      	ldr	r3, [pc, #552]	; (8015f58 <_dtoa_r+0x608>)
 8015d30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015d34:	ed93 6b00 	vldr	d6, [r3]
 8015d38:	9b08      	ldr	r3, [sp, #32]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	f280 80b7 	bge.w	8015eae <_dtoa_r+0x55e>
 8015d40:	f1b9 0f00 	cmp.w	r9, #0
 8015d44:	f300 80b3 	bgt.w	8015eae <_dtoa_r+0x55e>
 8015d48:	f040 8246 	bne.w	80161d8 <_dtoa_r+0x888>
 8015d4c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015d50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015d54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015d58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d60:	464c      	mov	r4, r9
 8015d62:	464f      	mov	r7, r9
 8015d64:	f280 821c 	bge.w	80161a0 <_dtoa_r+0x850>
 8015d68:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015d6c:	2331      	movs	r3, #49	; 0x31
 8015d6e:	f808 3b01 	strb.w	r3, [r8], #1
 8015d72:	f10b 0b01 	add.w	fp, fp, #1
 8015d76:	e218      	b.n	80161aa <_dtoa_r+0x85a>
 8015d78:	2102      	movs	r1, #2
 8015d7a:	e780      	b.n	8015c7e <_dtoa_r+0x32e>
 8015d7c:	07d4      	lsls	r4, r2, #31
 8015d7e:	d504      	bpl.n	8015d8a <_dtoa_r+0x43a>
 8015d80:	ed90 6b00 	vldr	d6, [r0]
 8015d84:	3101      	adds	r1, #1
 8015d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015d8a:	1052      	asrs	r2, r2, #1
 8015d8c:	3008      	adds	r0, #8
 8015d8e:	e777      	b.n	8015c80 <_dtoa_r+0x330>
 8015d90:	d022      	beq.n	8015dd8 <_dtoa_r+0x488>
 8015d92:	f1cb 0200 	rsb	r2, fp, #0
 8015d96:	4970      	ldr	r1, [pc, #448]	; (8015f58 <_dtoa_r+0x608>)
 8015d98:	f002 000f 	and.w	r0, r2, #15
 8015d9c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015da0:	ed91 7b00 	vldr	d7, [r1]
 8015da4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015dac:	486b      	ldr	r0, [pc, #428]	; (8015f5c <_dtoa_r+0x60c>)
 8015dae:	1112      	asrs	r2, r2, #4
 8015db0:	2400      	movs	r4, #0
 8015db2:	2102      	movs	r1, #2
 8015db4:	b92a      	cbnz	r2, 8015dc2 <_dtoa_r+0x472>
 8015db6:	2c00      	cmp	r4, #0
 8015db8:	f43f af6a 	beq.w	8015c90 <_dtoa_r+0x340>
 8015dbc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015dc0:	e766      	b.n	8015c90 <_dtoa_r+0x340>
 8015dc2:	07d7      	lsls	r7, r2, #31
 8015dc4:	d505      	bpl.n	8015dd2 <_dtoa_r+0x482>
 8015dc6:	ed90 6b00 	vldr	d6, [r0]
 8015dca:	3101      	adds	r1, #1
 8015dcc:	2401      	movs	r4, #1
 8015dce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015dd2:	1052      	asrs	r2, r2, #1
 8015dd4:	3008      	adds	r0, #8
 8015dd6:	e7ed      	b.n	8015db4 <_dtoa_r+0x464>
 8015dd8:	2102      	movs	r1, #2
 8015dda:	e759      	b.n	8015c90 <_dtoa_r+0x340>
 8015ddc:	465a      	mov	r2, fp
 8015dde:	464c      	mov	r4, r9
 8015de0:	e775      	b.n	8015cce <_dtoa_r+0x37e>
 8015de2:	ec41 0b17 	vmov	d7, r0, r1
 8015de6:	495c      	ldr	r1, [pc, #368]	; (8015f58 <_dtoa_r+0x608>)
 8015de8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8015dec:	ed11 4b02 	vldr	d4, [r1, #-8]
 8015df0:	9901      	ldr	r1, [sp, #4]
 8015df2:	440c      	add	r4, r1
 8015df4:	9907      	ldr	r1, [sp, #28]
 8015df6:	b351      	cbz	r1, 8015e4e <_dtoa_r+0x4fe>
 8015df8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015dfc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8015e00:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e04:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015e08:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015e0c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015e10:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015e14:	ee14 1a90 	vmov	r1, s9
 8015e18:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015e1c:	3130      	adds	r1, #48	; 0x30
 8015e1e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015e22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e2a:	f808 1b01 	strb.w	r1, [r8], #1
 8015e2e:	d439      	bmi.n	8015ea4 <_dtoa_r+0x554>
 8015e30:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015e34:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e3c:	d472      	bmi.n	8015f24 <_dtoa_r+0x5d4>
 8015e3e:	45a0      	cmp	r8, r4
 8015e40:	f43f af6b 	beq.w	8015d1a <_dtoa_r+0x3ca>
 8015e44:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015e48:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015e4c:	e7e0      	b.n	8015e10 <_dtoa_r+0x4c0>
 8015e4e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015e52:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015e56:	4620      	mov	r0, r4
 8015e58:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015e5c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015e60:	ee14 1a90 	vmov	r1, s9
 8015e64:	3130      	adds	r1, #48	; 0x30
 8015e66:	f808 1b01 	strb.w	r1, [r8], #1
 8015e6a:	45a0      	cmp	r8, r4
 8015e6c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015e70:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015e74:	d118      	bne.n	8015ea8 <_dtoa_r+0x558>
 8015e76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015e7a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8015e7e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e86:	dc4d      	bgt.n	8015f24 <_dtoa_r+0x5d4>
 8015e88:	ee35 5b47 	vsub.f64	d5, d5, d7
 8015e8c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e94:	f57f af41 	bpl.w	8015d1a <_dtoa_r+0x3ca>
 8015e98:	4680      	mov	r8, r0
 8015e9a:	3801      	subs	r0, #1
 8015e9c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015ea0:	2b30      	cmp	r3, #48	; 0x30
 8015ea2:	d0f9      	beq.n	8015e98 <_dtoa_r+0x548>
 8015ea4:	4693      	mov	fp, r2
 8015ea6:	e02a      	b.n	8015efe <_dtoa_r+0x5ae>
 8015ea8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015eac:	e7d6      	b.n	8015e5c <_dtoa_r+0x50c>
 8015eae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015eb2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015eb6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015eba:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8015ebe:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8015ec2:	ee15 3a10 	vmov	r3, s10
 8015ec6:	3330      	adds	r3, #48	; 0x30
 8015ec8:	f808 3b01 	strb.w	r3, [r8], #1
 8015ecc:	9b01      	ldr	r3, [sp, #4]
 8015ece:	eba8 0303 	sub.w	r3, r8, r3
 8015ed2:	4599      	cmp	r9, r3
 8015ed4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015ed8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015edc:	d133      	bne.n	8015f46 <_dtoa_r+0x5f6>
 8015ede:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015ee2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eea:	dc1a      	bgt.n	8015f22 <_dtoa_r+0x5d2>
 8015eec:	eeb4 7b46 	vcmp.f64	d7, d6
 8015ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ef4:	d103      	bne.n	8015efe <_dtoa_r+0x5ae>
 8015ef6:	ee15 3a10 	vmov	r3, s10
 8015efa:	07d9      	lsls	r1, r3, #31
 8015efc:	d411      	bmi.n	8015f22 <_dtoa_r+0x5d2>
 8015efe:	4629      	mov	r1, r5
 8015f00:	4630      	mov	r0, r6
 8015f02:	f000 fb1d 	bl	8016540 <_Bfree>
 8015f06:	2300      	movs	r3, #0
 8015f08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f0a:	f888 3000 	strb.w	r3, [r8]
 8015f0e:	f10b 0301 	add.w	r3, fp, #1
 8015f12:	6013      	str	r3, [r2, #0]
 8015f14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	f43f ad69 	beq.w	80159ee <_dtoa_r+0x9e>
 8015f1c:	f8c3 8000 	str.w	r8, [r3]
 8015f20:	e565      	b.n	80159ee <_dtoa_r+0x9e>
 8015f22:	465a      	mov	r2, fp
 8015f24:	4643      	mov	r3, r8
 8015f26:	4698      	mov	r8, r3
 8015f28:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8015f2c:	2939      	cmp	r1, #57	; 0x39
 8015f2e:	d106      	bne.n	8015f3e <_dtoa_r+0x5ee>
 8015f30:	9901      	ldr	r1, [sp, #4]
 8015f32:	4299      	cmp	r1, r3
 8015f34:	d1f7      	bne.n	8015f26 <_dtoa_r+0x5d6>
 8015f36:	9801      	ldr	r0, [sp, #4]
 8015f38:	2130      	movs	r1, #48	; 0x30
 8015f3a:	3201      	adds	r2, #1
 8015f3c:	7001      	strb	r1, [r0, #0]
 8015f3e:	7819      	ldrb	r1, [r3, #0]
 8015f40:	3101      	adds	r1, #1
 8015f42:	7019      	strb	r1, [r3, #0]
 8015f44:	e7ae      	b.n	8015ea4 <_dtoa_r+0x554>
 8015f46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015f4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015f52:	d1b2      	bne.n	8015eba <_dtoa_r+0x56a>
 8015f54:	e7d3      	b.n	8015efe <_dtoa_r+0x5ae>
 8015f56:	bf00      	nop
 8015f58:	08017850 	.word	0x08017850
 8015f5c:	08017828 	.word	0x08017828
 8015f60:	9907      	ldr	r1, [sp, #28]
 8015f62:	2900      	cmp	r1, #0
 8015f64:	f000 80d0 	beq.w	8016108 <_dtoa_r+0x7b8>
 8015f68:	9906      	ldr	r1, [sp, #24]
 8015f6a:	2901      	cmp	r1, #1
 8015f6c:	f300 80b4 	bgt.w	80160d8 <_dtoa_r+0x788>
 8015f70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015f72:	2900      	cmp	r1, #0
 8015f74:	f000 80ac 	beq.w	80160d0 <_dtoa_r+0x780>
 8015f78:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015f7c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015f80:	461c      	mov	r4, r3
 8015f82:	9309      	str	r3, [sp, #36]	; 0x24
 8015f84:	9b04      	ldr	r3, [sp, #16]
 8015f86:	4413      	add	r3, r2
 8015f88:	9304      	str	r3, [sp, #16]
 8015f8a:	9b05      	ldr	r3, [sp, #20]
 8015f8c:	2101      	movs	r1, #1
 8015f8e:	4413      	add	r3, r2
 8015f90:	4630      	mov	r0, r6
 8015f92:	9305      	str	r3, [sp, #20]
 8015f94:	f000 fb8a 	bl	80166ac <__i2b>
 8015f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f9a:	4607      	mov	r7, r0
 8015f9c:	f1b8 0f00 	cmp.w	r8, #0
 8015fa0:	d00d      	beq.n	8015fbe <_dtoa_r+0x66e>
 8015fa2:	9a05      	ldr	r2, [sp, #20]
 8015fa4:	2a00      	cmp	r2, #0
 8015fa6:	dd0a      	ble.n	8015fbe <_dtoa_r+0x66e>
 8015fa8:	4542      	cmp	r2, r8
 8015faa:	9904      	ldr	r1, [sp, #16]
 8015fac:	bfa8      	it	ge
 8015fae:	4642      	movge	r2, r8
 8015fb0:	1a89      	subs	r1, r1, r2
 8015fb2:	9104      	str	r1, [sp, #16]
 8015fb4:	9905      	ldr	r1, [sp, #20]
 8015fb6:	eba8 0802 	sub.w	r8, r8, r2
 8015fba:	1a8a      	subs	r2, r1, r2
 8015fbc:	9205      	str	r2, [sp, #20]
 8015fbe:	b303      	cbz	r3, 8016002 <_dtoa_r+0x6b2>
 8015fc0:	9a07      	ldr	r2, [sp, #28]
 8015fc2:	2a00      	cmp	r2, #0
 8015fc4:	f000 80a5 	beq.w	8016112 <_dtoa_r+0x7c2>
 8015fc8:	2c00      	cmp	r4, #0
 8015fca:	dd13      	ble.n	8015ff4 <_dtoa_r+0x6a4>
 8015fcc:	4639      	mov	r1, r7
 8015fce:	4622      	mov	r2, r4
 8015fd0:	4630      	mov	r0, r6
 8015fd2:	930d      	str	r3, [sp, #52]	; 0x34
 8015fd4:	f000 fc2a 	bl	801682c <__pow5mult>
 8015fd8:	462a      	mov	r2, r5
 8015fda:	4601      	mov	r1, r0
 8015fdc:	4607      	mov	r7, r0
 8015fde:	4630      	mov	r0, r6
 8015fe0:	f000 fb7a 	bl	80166d8 <__multiply>
 8015fe4:	4629      	mov	r1, r5
 8015fe6:	9009      	str	r0, [sp, #36]	; 0x24
 8015fe8:	4630      	mov	r0, r6
 8015fea:	f000 faa9 	bl	8016540 <_Bfree>
 8015fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ff0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015ff2:	4615      	mov	r5, r2
 8015ff4:	1b1a      	subs	r2, r3, r4
 8015ff6:	d004      	beq.n	8016002 <_dtoa_r+0x6b2>
 8015ff8:	4629      	mov	r1, r5
 8015ffa:	4630      	mov	r0, r6
 8015ffc:	f000 fc16 	bl	801682c <__pow5mult>
 8016000:	4605      	mov	r5, r0
 8016002:	2101      	movs	r1, #1
 8016004:	4630      	mov	r0, r6
 8016006:	f000 fb51 	bl	80166ac <__i2b>
 801600a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801600c:	2b00      	cmp	r3, #0
 801600e:	4604      	mov	r4, r0
 8016010:	f340 8081 	ble.w	8016116 <_dtoa_r+0x7c6>
 8016014:	461a      	mov	r2, r3
 8016016:	4601      	mov	r1, r0
 8016018:	4630      	mov	r0, r6
 801601a:	f000 fc07 	bl	801682c <__pow5mult>
 801601e:	9b06      	ldr	r3, [sp, #24]
 8016020:	2b01      	cmp	r3, #1
 8016022:	4604      	mov	r4, r0
 8016024:	dd7a      	ble.n	801611c <_dtoa_r+0x7cc>
 8016026:	2300      	movs	r3, #0
 8016028:	9309      	str	r3, [sp, #36]	; 0x24
 801602a:	6922      	ldr	r2, [r4, #16]
 801602c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016030:	6910      	ldr	r0, [r2, #16]
 8016032:	f000 faed 	bl	8016610 <__hi0bits>
 8016036:	f1c0 0020 	rsb	r0, r0, #32
 801603a:	9b05      	ldr	r3, [sp, #20]
 801603c:	4418      	add	r0, r3
 801603e:	f010 001f 	ands.w	r0, r0, #31
 8016042:	f000 8093 	beq.w	801616c <_dtoa_r+0x81c>
 8016046:	f1c0 0220 	rsb	r2, r0, #32
 801604a:	2a04      	cmp	r2, #4
 801604c:	f340 8085 	ble.w	801615a <_dtoa_r+0x80a>
 8016050:	9b04      	ldr	r3, [sp, #16]
 8016052:	f1c0 001c 	rsb	r0, r0, #28
 8016056:	4403      	add	r3, r0
 8016058:	9304      	str	r3, [sp, #16]
 801605a:	9b05      	ldr	r3, [sp, #20]
 801605c:	4480      	add	r8, r0
 801605e:	4403      	add	r3, r0
 8016060:	9305      	str	r3, [sp, #20]
 8016062:	9b04      	ldr	r3, [sp, #16]
 8016064:	2b00      	cmp	r3, #0
 8016066:	dd05      	ble.n	8016074 <_dtoa_r+0x724>
 8016068:	4629      	mov	r1, r5
 801606a:	461a      	mov	r2, r3
 801606c:	4630      	mov	r0, r6
 801606e:	f000 fc37 	bl	80168e0 <__lshift>
 8016072:	4605      	mov	r5, r0
 8016074:	9b05      	ldr	r3, [sp, #20]
 8016076:	2b00      	cmp	r3, #0
 8016078:	dd05      	ble.n	8016086 <_dtoa_r+0x736>
 801607a:	4621      	mov	r1, r4
 801607c:	461a      	mov	r2, r3
 801607e:	4630      	mov	r0, r6
 8016080:	f000 fc2e 	bl	80168e0 <__lshift>
 8016084:	4604      	mov	r4, r0
 8016086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016088:	2b00      	cmp	r3, #0
 801608a:	d071      	beq.n	8016170 <_dtoa_r+0x820>
 801608c:	4621      	mov	r1, r4
 801608e:	4628      	mov	r0, r5
 8016090:	f000 fc92 	bl	80169b8 <__mcmp>
 8016094:	2800      	cmp	r0, #0
 8016096:	da6b      	bge.n	8016170 <_dtoa_r+0x820>
 8016098:	2300      	movs	r3, #0
 801609a:	4629      	mov	r1, r5
 801609c:	220a      	movs	r2, #10
 801609e:	4630      	mov	r0, r6
 80160a0:	f000 fa70 	bl	8016584 <__multadd>
 80160a4:	9b07      	ldr	r3, [sp, #28]
 80160a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80160aa:	4605      	mov	r5, r0
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	f000 8197 	beq.w	80163e0 <_dtoa_r+0xa90>
 80160b2:	4639      	mov	r1, r7
 80160b4:	2300      	movs	r3, #0
 80160b6:	220a      	movs	r2, #10
 80160b8:	4630      	mov	r0, r6
 80160ba:	f000 fa63 	bl	8016584 <__multadd>
 80160be:	f1ba 0f00 	cmp.w	sl, #0
 80160c2:	4607      	mov	r7, r0
 80160c4:	f300 8093 	bgt.w	80161ee <_dtoa_r+0x89e>
 80160c8:	9b06      	ldr	r3, [sp, #24]
 80160ca:	2b02      	cmp	r3, #2
 80160cc:	dc57      	bgt.n	801617e <_dtoa_r+0x82e>
 80160ce:	e08e      	b.n	80161ee <_dtoa_r+0x89e>
 80160d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80160d6:	e751      	b.n	8015f7c <_dtoa_r+0x62c>
 80160d8:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 80160dc:	42a3      	cmp	r3, r4
 80160de:	bfbf      	itttt	lt
 80160e0:	1ae2      	sublt	r2, r4, r3
 80160e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80160e4:	189b      	addlt	r3, r3, r2
 80160e6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80160e8:	bfae      	itee	ge
 80160ea:	1b1c      	subge	r4, r3, r4
 80160ec:	4623      	movlt	r3, r4
 80160ee:	2400      	movlt	r4, #0
 80160f0:	f1b9 0f00 	cmp.w	r9, #0
 80160f4:	bfb5      	itete	lt
 80160f6:	9a04      	ldrlt	r2, [sp, #16]
 80160f8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80160fc:	eba2 0809 	sublt.w	r8, r2, r9
 8016100:	464a      	movge	r2, r9
 8016102:	bfb8      	it	lt
 8016104:	2200      	movlt	r2, #0
 8016106:	e73c      	b.n	8015f82 <_dtoa_r+0x632>
 8016108:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801610c:	9f07      	ldr	r7, [sp, #28]
 801610e:	461c      	mov	r4, r3
 8016110:	e744      	b.n	8015f9c <_dtoa_r+0x64c>
 8016112:	461a      	mov	r2, r3
 8016114:	e770      	b.n	8015ff8 <_dtoa_r+0x6a8>
 8016116:	9b06      	ldr	r3, [sp, #24]
 8016118:	2b01      	cmp	r3, #1
 801611a:	dc18      	bgt.n	801614e <_dtoa_r+0x7fe>
 801611c:	9b02      	ldr	r3, [sp, #8]
 801611e:	b9b3      	cbnz	r3, 801614e <_dtoa_r+0x7fe>
 8016120:	9b03      	ldr	r3, [sp, #12]
 8016122:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016126:	b9a2      	cbnz	r2, 8016152 <_dtoa_r+0x802>
 8016128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801612c:	0d12      	lsrs	r2, r2, #20
 801612e:	0512      	lsls	r2, r2, #20
 8016130:	b18a      	cbz	r2, 8016156 <_dtoa_r+0x806>
 8016132:	9b04      	ldr	r3, [sp, #16]
 8016134:	3301      	adds	r3, #1
 8016136:	9304      	str	r3, [sp, #16]
 8016138:	9b05      	ldr	r3, [sp, #20]
 801613a:	3301      	adds	r3, #1
 801613c:	9305      	str	r3, [sp, #20]
 801613e:	2301      	movs	r3, #1
 8016140:	9309      	str	r3, [sp, #36]	; 0x24
 8016142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016144:	2b00      	cmp	r3, #0
 8016146:	f47f af70 	bne.w	801602a <_dtoa_r+0x6da>
 801614a:	2001      	movs	r0, #1
 801614c:	e775      	b.n	801603a <_dtoa_r+0x6ea>
 801614e:	2300      	movs	r3, #0
 8016150:	e7f6      	b.n	8016140 <_dtoa_r+0x7f0>
 8016152:	9b02      	ldr	r3, [sp, #8]
 8016154:	e7f4      	b.n	8016140 <_dtoa_r+0x7f0>
 8016156:	9209      	str	r2, [sp, #36]	; 0x24
 8016158:	e7f3      	b.n	8016142 <_dtoa_r+0x7f2>
 801615a:	d082      	beq.n	8016062 <_dtoa_r+0x712>
 801615c:	9b04      	ldr	r3, [sp, #16]
 801615e:	321c      	adds	r2, #28
 8016160:	4413      	add	r3, r2
 8016162:	9304      	str	r3, [sp, #16]
 8016164:	9b05      	ldr	r3, [sp, #20]
 8016166:	4490      	add	r8, r2
 8016168:	4413      	add	r3, r2
 801616a:	e779      	b.n	8016060 <_dtoa_r+0x710>
 801616c:	4602      	mov	r2, r0
 801616e:	e7f5      	b.n	801615c <_dtoa_r+0x80c>
 8016170:	f1b9 0f00 	cmp.w	r9, #0
 8016174:	dc36      	bgt.n	80161e4 <_dtoa_r+0x894>
 8016176:	9b06      	ldr	r3, [sp, #24]
 8016178:	2b02      	cmp	r3, #2
 801617a:	dd33      	ble.n	80161e4 <_dtoa_r+0x894>
 801617c:	46ca      	mov	sl, r9
 801617e:	f1ba 0f00 	cmp.w	sl, #0
 8016182:	d10d      	bne.n	80161a0 <_dtoa_r+0x850>
 8016184:	4621      	mov	r1, r4
 8016186:	4653      	mov	r3, sl
 8016188:	2205      	movs	r2, #5
 801618a:	4630      	mov	r0, r6
 801618c:	f000 f9fa 	bl	8016584 <__multadd>
 8016190:	4601      	mov	r1, r0
 8016192:	4604      	mov	r4, r0
 8016194:	4628      	mov	r0, r5
 8016196:	f000 fc0f 	bl	80169b8 <__mcmp>
 801619a:	2800      	cmp	r0, #0
 801619c:	f73f ade4 	bgt.w	8015d68 <_dtoa_r+0x418>
 80161a0:	9b08      	ldr	r3, [sp, #32]
 80161a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80161a6:	ea6f 0b03 	mvn.w	fp, r3
 80161aa:	f04f 0900 	mov.w	r9, #0
 80161ae:	4621      	mov	r1, r4
 80161b0:	4630      	mov	r0, r6
 80161b2:	f000 f9c5 	bl	8016540 <_Bfree>
 80161b6:	2f00      	cmp	r7, #0
 80161b8:	f43f aea1 	beq.w	8015efe <_dtoa_r+0x5ae>
 80161bc:	f1b9 0f00 	cmp.w	r9, #0
 80161c0:	d005      	beq.n	80161ce <_dtoa_r+0x87e>
 80161c2:	45b9      	cmp	r9, r7
 80161c4:	d003      	beq.n	80161ce <_dtoa_r+0x87e>
 80161c6:	4649      	mov	r1, r9
 80161c8:	4630      	mov	r0, r6
 80161ca:	f000 f9b9 	bl	8016540 <_Bfree>
 80161ce:	4639      	mov	r1, r7
 80161d0:	4630      	mov	r0, r6
 80161d2:	f000 f9b5 	bl	8016540 <_Bfree>
 80161d6:	e692      	b.n	8015efe <_dtoa_r+0x5ae>
 80161d8:	2400      	movs	r4, #0
 80161da:	4627      	mov	r7, r4
 80161dc:	e7e0      	b.n	80161a0 <_dtoa_r+0x850>
 80161de:	4693      	mov	fp, r2
 80161e0:	4627      	mov	r7, r4
 80161e2:	e5c1      	b.n	8015d68 <_dtoa_r+0x418>
 80161e4:	9b07      	ldr	r3, [sp, #28]
 80161e6:	46ca      	mov	sl, r9
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f000 8100 	beq.w	80163ee <_dtoa_r+0xa9e>
 80161ee:	f1b8 0f00 	cmp.w	r8, #0
 80161f2:	dd05      	ble.n	8016200 <_dtoa_r+0x8b0>
 80161f4:	4639      	mov	r1, r7
 80161f6:	4642      	mov	r2, r8
 80161f8:	4630      	mov	r0, r6
 80161fa:	f000 fb71 	bl	80168e0 <__lshift>
 80161fe:	4607      	mov	r7, r0
 8016200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016202:	2b00      	cmp	r3, #0
 8016204:	d05d      	beq.n	80162c2 <_dtoa_r+0x972>
 8016206:	6879      	ldr	r1, [r7, #4]
 8016208:	4630      	mov	r0, r6
 801620a:	f000 f959 	bl	80164c0 <_Balloc>
 801620e:	4680      	mov	r8, r0
 8016210:	b928      	cbnz	r0, 801621e <_dtoa_r+0x8ce>
 8016212:	4b82      	ldr	r3, [pc, #520]	; (801641c <_dtoa_r+0xacc>)
 8016214:	4602      	mov	r2, r0
 8016216:	f240 21ef 	movw	r1, #751	; 0x2ef
 801621a:	f7ff bbb1 	b.w	8015980 <_dtoa_r+0x30>
 801621e:	693a      	ldr	r2, [r7, #16]
 8016220:	3202      	adds	r2, #2
 8016222:	0092      	lsls	r2, r2, #2
 8016224:	f107 010c 	add.w	r1, r7, #12
 8016228:	300c      	adds	r0, #12
 801622a:	f7ff fafa 	bl	8015822 <memcpy>
 801622e:	2201      	movs	r2, #1
 8016230:	4641      	mov	r1, r8
 8016232:	4630      	mov	r0, r6
 8016234:	f000 fb54 	bl	80168e0 <__lshift>
 8016238:	9b01      	ldr	r3, [sp, #4]
 801623a:	3301      	adds	r3, #1
 801623c:	9304      	str	r3, [sp, #16]
 801623e:	9b01      	ldr	r3, [sp, #4]
 8016240:	4453      	add	r3, sl
 8016242:	9308      	str	r3, [sp, #32]
 8016244:	9b02      	ldr	r3, [sp, #8]
 8016246:	f003 0301 	and.w	r3, r3, #1
 801624a:	46b9      	mov	r9, r7
 801624c:	9307      	str	r3, [sp, #28]
 801624e:	4607      	mov	r7, r0
 8016250:	9b04      	ldr	r3, [sp, #16]
 8016252:	4621      	mov	r1, r4
 8016254:	3b01      	subs	r3, #1
 8016256:	4628      	mov	r0, r5
 8016258:	9302      	str	r3, [sp, #8]
 801625a:	f7ff faf0 	bl	801583e <quorem>
 801625e:	4603      	mov	r3, r0
 8016260:	3330      	adds	r3, #48	; 0x30
 8016262:	9005      	str	r0, [sp, #20]
 8016264:	4649      	mov	r1, r9
 8016266:	4628      	mov	r0, r5
 8016268:	9309      	str	r3, [sp, #36]	; 0x24
 801626a:	f000 fba5 	bl	80169b8 <__mcmp>
 801626e:	463a      	mov	r2, r7
 8016270:	4682      	mov	sl, r0
 8016272:	4621      	mov	r1, r4
 8016274:	4630      	mov	r0, r6
 8016276:	f000 fbbb 	bl	80169f0 <__mdiff>
 801627a:	68c2      	ldr	r2, [r0, #12]
 801627c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801627e:	4680      	mov	r8, r0
 8016280:	bb0a      	cbnz	r2, 80162c6 <_dtoa_r+0x976>
 8016282:	4601      	mov	r1, r0
 8016284:	4628      	mov	r0, r5
 8016286:	f000 fb97 	bl	80169b8 <__mcmp>
 801628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801628c:	4602      	mov	r2, r0
 801628e:	4641      	mov	r1, r8
 8016290:	4630      	mov	r0, r6
 8016292:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8016296:	f000 f953 	bl	8016540 <_Bfree>
 801629a:	9b06      	ldr	r3, [sp, #24]
 801629c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801629e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80162a2:	ea43 0102 	orr.w	r1, r3, r2
 80162a6:	9b07      	ldr	r3, [sp, #28]
 80162a8:	4319      	orrs	r1, r3
 80162aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162ac:	d10d      	bne.n	80162ca <_dtoa_r+0x97a>
 80162ae:	2b39      	cmp	r3, #57	; 0x39
 80162b0:	d029      	beq.n	8016306 <_dtoa_r+0x9b6>
 80162b2:	f1ba 0f00 	cmp.w	sl, #0
 80162b6:	dd01      	ble.n	80162bc <_dtoa_r+0x96c>
 80162b8:	9b05      	ldr	r3, [sp, #20]
 80162ba:	3331      	adds	r3, #49	; 0x31
 80162bc:	9a02      	ldr	r2, [sp, #8]
 80162be:	7013      	strb	r3, [r2, #0]
 80162c0:	e775      	b.n	80161ae <_dtoa_r+0x85e>
 80162c2:	4638      	mov	r0, r7
 80162c4:	e7b8      	b.n	8016238 <_dtoa_r+0x8e8>
 80162c6:	2201      	movs	r2, #1
 80162c8:	e7e1      	b.n	801628e <_dtoa_r+0x93e>
 80162ca:	f1ba 0f00 	cmp.w	sl, #0
 80162ce:	db06      	blt.n	80162de <_dtoa_r+0x98e>
 80162d0:	9906      	ldr	r1, [sp, #24]
 80162d2:	ea41 0a0a 	orr.w	sl, r1, sl
 80162d6:	9907      	ldr	r1, [sp, #28]
 80162d8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80162dc:	d120      	bne.n	8016320 <_dtoa_r+0x9d0>
 80162de:	2a00      	cmp	r2, #0
 80162e0:	ddec      	ble.n	80162bc <_dtoa_r+0x96c>
 80162e2:	4629      	mov	r1, r5
 80162e4:	2201      	movs	r2, #1
 80162e6:	4630      	mov	r0, r6
 80162e8:	9304      	str	r3, [sp, #16]
 80162ea:	f000 faf9 	bl	80168e0 <__lshift>
 80162ee:	4621      	mov	r1, r4
 80162f0:	4605      	mov	r5, r0
 80162f2:	f000 fb61 	bl	80169b8 <__mcmp>
 80162f6:	2800      	cmp	r0, #0
 80162f8:	9b04      	ldr	r3, [sp, #16]
 80162fa:	dc02      	bgt.n	8016302 <_dtoa_r+0x9b2>
 80162fc:	d1de      	bne.n	80162bc <_dtoa_r+0x96c>
 80162fe:	07da      	lsls	r2, r3, #31
 8016300:	d5dc      	bpl.n	80162bc <_dtoa_r+0x96c>
 8016302:	2b39      	cmp	r3, #57	; 0x39
 8016304:	d1d8      	bne.n	80162b8 <_dtoa_r+0x968>
 8016306:	9a02      	ldr	r2, [sp, #8]
 8016308:	2339      	movs	r3, #57	; 0x39
 801630a:	7013      	strb	r3, [r2, #0]
 801630c:	4643      	mov	r3, r8
 801630e:	4698      	mov	r8, r3
 8016310:	3b01      	subs	r3, #1
 8016312:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8016316:	2a39      	cmp	r2, #57	; 0x39
 8016318:	d051      	beq.n	80163be <_dtoa_r+0xa6e>
 801631a:	3201      	adds	r2, #1
 801631c:	701a      	strb	r2, [r3, #0]
 801631e:	e746      	b.n	80161ae <_dtoa_r+0x85e>
 8016320:	2a00      	cmp	r2, #0
 8016322:	dd03      	ble.n	801632c <_dtoa_r+0x9dc>
 8016324:	2b39      	cmp	r3, #57	; 0x39
 8016326:	d0ee      	beq.n	8016306 <_dtoa_r+0x9b6>
 8016328:	3301      	adds	r3, #1
 801632a:	e7c7      	b.n	80162bc <_dtoa_r+0x96c>
 801632c:	9a04      	ldr	r2, [sp, #16]
 801632e:	9908      	ldr	r1, [sp, #32]
 8016330:	f802 3c01 	strb.w	r3, [r2, #-1]
 8016334:	428a      	cmp	r2, r1
 8016336:	d02b      	beq.n	8016390 <_dtoa_r+0xa40>
 8016338:	4629      	mov	r1, r5
 801633a:	2300      	movs	r3, #0
 801633c:	220a      	movs	r2, #10
 801633e:	4630      	mov	r0, r6
 8016340:	f000 f920 	bl	8016584 <__multadd>
 8016344:	45b9      	cmp	r9, r7
 8016346:	4605      	mov	r5, r0
 8016348:	f04f 0300 	mov.w	r3, #0
 801634c:	f04f 020a 	mov.w	r2, #10
 8016350:	4649      	mov	r1, r9
 8016352:	4630      	mov	r0, r6
 8016354:	d107      	bne.n	8016366 <_dtoa_r+0xa16>
 8016356:	f000 f915 	bl	8016584 <__multadd>
 801635a:	4681      	mov	r9, r0
 801635c:	4607      	mov	r7, r0
 801635e:	9b04      	ldr	r3, [sp, #16]
 8016360:	3301      	adds	r3, #1
 8016362:	9304      	str	r3, [sp, #16]
 8016364:	e774      	b.n	8016250 <_dtoa_r+0x900>
 8016366:	f000 f90d 	bl	8016584 <__multadd>
 801636a:	4639      	mov	r1, r7
 801636c:	4681      	mov	r9, r0
 801636e:	2300      	movs	r3, #0
 8016370:	220a      	movs	r2, #10
 8016372:	4630      	mov	r0, r6
 8016374:	f000 f906 	bl	8016584 <__multadd>
 8016378:	4607      	mov	r7, r0
 801637a:	e7f0      	b.n	801635e <_dtoa_r+0xa0e>
 801637c:	f1ba 0f00 	cmp.w	sl, #0
 8016380:	9a01      	ldr	r2, [sp, #4]
 8016382:	bfcc      	ite	gt
 8016384:	46d0      	movgt	r8, sl
 8016386:	f04f 0801 	movle.w	r8, #1
 801638a:	4490      	add	r8, r2
 801638c:	f04f 0900 	mov.w	r9, #0
 8016390:	4629      	mov	r1, r5
 8016392:	2201      	movs	r2, #1
 8016394:	4630      	mov	r0, r6
 8016396:	9302      	str	r3, [sp, #8]
 8016398:	f000 faa2 	bl	80168e0 <__lshift>
 801639c:	4621      	mov	r1, r4
 801639e:	4605      	mov	r5, r0
 80163a0:	f000 fb0a 	bl	80169b8 <__mcmp>
 80163a4:	2800      	cmp	r0, #0
 80163a6:	dcb1      	bgt.n	801630c <_dtoa_r+0x9bc>
 80163a8:	d102      	bne.n	80163b0 <_dtoa_r+0xa60>
 80163aa:	9b02      	ldr	r3, [sp, #8]
 80163ac:	07db      	lsls	r3, r3, #31
 80163ae:	d4ad      	bmi.n	801630c <_dtoa_r+0x9bc>
 80163b0:	4643      	mov	r3, r8
 80163b2:	4698      	mov	r8, r3
 80163b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80163b8:	2a30      	cmp	r2, #48	; 0x30
 80163ba:	d0fa      	beq.n	80163b2 <_dtoa_r+0xa62>
 80163bc:	e6f7      	b.n	80161ae <_dtoa_r+0x85e>
 80163be:	9a01      	ldr	r2, [sp, #4]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d1a4      	bne.n	801630e <_dtoa_r+0x9be>
 80163c4:	f10b 0b01 	add.w	fp, fp, #1
 80163c8:	2331      	movs	r3, #49	; 0x31
 80163ca:	e778      	b.n	80162be <_dtoa_r+0x96e>
 80163cc:	4b14      	ldr	r3, [pc, #80]	; (8016420 <_dtoa_r+0xad0>)
 80163ce:	f7ff bb2a 	b.w	8015a26 <_dtoa_r+0xd6>
 80163d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	f47f ab05 	bne.w	80159e4 <_dtoa_r+0x94>
 80163da:	4b12      	ldr	r3, [pc, #72]	; (8016424 <_dtoa_r+0xad4>)
 80163dc:	f7ff bb23 	b.w	8015a26 <_dtoa_r+0xd6>
 80163e0:	f1ba 0f00 	cmp.w	sl, #0
 80163e4:	dc03      	bgt.n	80163ee <_dtoa_r+0xa9e>
 80163e6:	9b06      	ldr	r3, [sp, #24]
 80163e8:	2b02      	cmp	r3, #2
 80163ea:	f73f aec8 	bgt.w	801617e <_dtoa_r+0x82e>
 80163ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80163f2:	4621      	mov	r1, r4
 80163f4:	4628      	mov	r0, r5
 80163f6:	f7ff fa22 	bl	801583e <quorem>
 80163fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80163fe:	f808 3b01 	strb.w	r3, [r8], #1
 8016402:	9a01      	ldr	r2, [sp, #4]
 8016404:	eba8 0202 	sub.w	r2, r8, r2
 8016408:	4592      	cmp	sl, r2
 801640a:	ddb7      	ble.n	801637c <_dtoa_r+0xa2c>
 801640c:	4629      	mov	r1, r5
 801640e:	2300      	movs	r3, #0
 8016410:	220a      	movs	r2, #10
 8016412:	4630      	mov	r0, r6
 8016414:	f000 f8b6 	bl	8016584 <__multadd>
 8016418:	4605      	mov	r5, r0
 801641a:	e7ea      	b.n	80163f2 <_dtoa_r+0xaa2>
 801641c:	080177b8 	.word	0x080177b8
 8016420:	08017718 	.word	0x08017718
 8016424:	0801773c 	.word	0x0801773c

08016428 <_free_r>:
 8016428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801642a:	2900      	cmp	r1, #0
 801642c:	d044      	beq.n	80164b8 <_free_r+0x90>
 801642e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016432:	9001      	str	r0, [sp, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	f1a1 0404 	sub.w	r4, r1, #4
 801643a:	bfb8      	it	lt
 801643c:	18e4      	addlt	r4, r4, r3
 801643e:	f7fe fa97 	bl	8014970 <__malloc_lock>
 8016442:	4a1e      	ldr	r2, [pc, #120]	; (80164bc <_free_r+0x94>)
 8016444:	9801      	ldr	r0, [sp, #4]
 8016446:	6813      	ldr	r3, [r2, #0]
 8016448:	b933      	cbnz	r3, 8016458 <_free_r+0x30>
 801644a:	6063      	str	r3, [r4, #4]
 801644c:	6014      	str	r4, [r2, #0]
 801644e:	b003      	add	sp, #12
 8016450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016454:	f7fe ba92 	b.w	801497c <__malloc_unlock>
 8016458:	42a3      	cmp	r3, r4
 801645a:	d908      	bls.n	801646e <_free_r+0x46>
 801645c:	6825      	ldr	r5, [r4, #0]
 801645e:	1961      	adds	r1, r4, r5
 8016460:	428b      	cmp	r3, r1
 8016462:	bf01      	itttt	eq
 8016464:	6819      	ldreq	r1, [r3, #0]
 8016466:	685b      	ldreq	r3, [r3, #4]
 8016468:	1949      	addeq	r1, r1, r5
 801646a:	6021      	streq	r1, [r4, #0]
 801646c:	e7ed      	b.n	801644a <_free_r+0x22>
 801646e:	461a      	mov	r2, r3
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	b10b      	cbz	r3, 8016478 <_free_r+0x50>
 8016474:	42a3      	cmp	r3, r4
 8016476:	d9fa      	bls.n	801646e <_free_r+0x46>
 8016478:	6811      	ldr	r1, [r2, #0]
 801647a:	1855      	adds	r5, r2, r1
 801647c:	42a5      	cmp	r5, r4
 801647e:	d10b      	bne.n	8016498 <_free_r+0x70>
 8016480:	6824      	ldr	r4, [r4, #0]
 8016482:	4421      	add	r1, r4
 8016484:	1854      	adds	r4, r2, r1
 8016486:	42a3      	cmp	r3, r4
 8016488:	6011      	str	r1, [r2, #0]
 801648a:	d1e0      	bne.n	801644e <_free_r+0x26>
 801648c:	681c      	ldr	r4, [r3, #0]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	6053      	str	r3, [r2, #4]
 8016492:	440c      	add	r4, r1
 8016494:	6014      	str	r4, [r2, #0]
 8016496:	e7da      	b.n	801644e <_free_r+0x26>
 8016498:	d902      	bls.n	80164a0 <_free_r+0x78>
 801649a:	230c      	movs	r3, #12
 801649c:	6003      	str	r3, [r0, #0]
 801649e:	e7d6      	b.n	801644e <_free_r+0x26>
 80164a0:	6825      	ldr	r5, [r4, #0]
 80164a2:	1961      	adds	r1, r4, r5
 80164a4:	428b      	cmp	r3, r1
 80164a6:	bf04      	itt	eq
 80164a8:	6819      	ldreq	r1, [r3, #0]
 80164aa:	685b      	ldreq	r3, [r3, #4]
 80164ac:	6063      	str	r3, [r4, #4]
 80164ae:	bf04      	itt	eq
 80164b0:	1949      	addeq	r1, r1, r5
 80164b2:	6021      	streq	r1, [r4, #0]
 80164b4:	6054      	str	r4, [r2, #4]
 80164b6:	e7ca      	b.n	801644e <_free_r+0x26>
 80164b8:	b003      	add	sp, #12
 80164ba:	bd30      	pop	{r4, r5, pc}
 80164bc:	24004650 	.word	0x24004650

080164c0 <_Balloc>:
 80164c0:	b570      	push	{r4, r5, r6, lr}
 80164c2:	69c6      	ldr	r6, [r0, #28]
 80164c4:	4604      	mov	r4, r0
 80164c6:	460d      	mov	r5, r1
 80164c8:	b976      	cbnz	r6, 80164e8 <_Balloc+0x28>
 80164ca:	2010      	movs	r0, #16
 80164cc:	f7fe f9a8 	bl	8014820 <malloc>
 80164d0:	4602      	mov	r2, r0
 80164d2:	61e0      	str	r0, [r4, #28]
 80164d4:	b920      	cbnz	r0, 80164e0 <_Balloc+0x20>
 80164d6:	4b18      	ldr	r3, [pc, #96]	; (8016538 <_Balloc+0x78>)
 80164d8:	4818      	ldr	r0, [pc, #96]	; (801653c <_Balloc+0x7c>)
 80164da:	216b      	movs	r1, #107	; 0x6b
 80164dc:	f000 fdea 	bl	80170b4 <__assert_func>
 80164e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164e4:	6006      	str	r6, [r0, #0]
 80164e6:	60c6      	str	r6, [r0, #12]
 80164e8:	69e6      	ldr	r6, [r4, #28]
 80164ea:	68f3      	ldr	r3, [r6, #12]
 80164ec:	b183      	cbz	r3, 8016510 <_Balloc+0x50>
 80164ee:	69e3      	ldr	r3, [r4, #28]
 80164f0:	68db      	ldr	r3, [r3, #12]
 80164f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80164f6:	b9b8      	cbnz	r0, 8016528 <_Balloc+0x68>
 80164f8:	2101      	movs	r1, #1
 80164fa:	fa01 f605 	lsl.w	r6, r1, r5
 80164fe:	1d72      	adds	r2, r6, #5
 8016500:	0092      	lsls	r2, r2, #2
 8016502:	4620      	mov	r0, r4
 8016504:	f000 fdf4 	bl	80170f0 <_calloc_r>
 8016508:	b160      	cbz	r0, 8016524 <_Balloc+0x64>
 801650a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801650e:	e00e      	b.n	801652e <_Balloc+0x6e>
 8016510:	2221      	movs	r2, #33	; 0x21
 8016512:	2104      	movs	r1, #4
 8016514:	4620      	mov	r0, r4
 8016516:	f000 fdeb 	bl	80170f0 <_calloc_r>
 801651a:	69e3      	ldr	r3, [r4, #28]
 801651c:	60f0      	str	r0, [r6, #12]
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d1e4      	bne.n	80164ee <_Balloc+0x2e>
 8016524:	2000      	movs	r0, #0
 8016526:	bd70      	pop	{r4, r5, r6, pc}
 8016528:	6802      	ldr	r2, [r0, #0]
 801652a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801652e:	2300      	movs	r3, #0
 8016530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016534:	e7f7      	b.n	8016526 <_Balloc+0x66>
 8016536:	bf00      	nop
 8016538:	08017749 	.word	0x08017749
 801653c:	080177c9 	.word	0x080177c9

08016540 <_Bfree>:
 8016540:	b570      	push	{r4, r5, r6, lr}
 8016542:	69c6      	ldr	r6, [r0, #28]
 8016544:	4605      	mov	r5, r0
 8016546:	460c      	mov	r4, r1
 8016548:	b976      	cbnz	r6, 8016568 <_Bfree+0x28>
 801654a:	2010      	movs	r0, #16
 801654c:	f7fe f968 	bl	8014820 <malloc>
 8016550:	4602      	mov	r2, r0
 8016552:	61e8      	str	r0, [r5, #28]
 8016554:	b920      	cbnz	r0, 8016560 <_Bfree+0x20>
 8016556:	4b09      	ldr	r3, [pc, #36]	; (801657c <_Bfree+0x3c>)
 8016558:	4809      	ldr	r0, [pc, #36]	; (8016580 <_Bfree+0x40>)
 801655a:	218f      	movs	r1, #143	; 0x8f
 801655c:	f000 fdaa 	bl	80170b4 <__assert_func>
 8016560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016564:	6006      	str	r6, [r0, #0]
 8016566:	60c6      	str	r6, [r0, #12]
 8016568:	b13c      	cbz	r4, 801657a <_Bfree+0x3a>
 801656a:	69eb      	ldr	r3, [r5, #28]
 801656c:	6862      	ldr	r2, [r4, #4]
 801656e:	68db      	ldr	r3, [r3, #12]
 8016570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016574:	6021      	str	r1, [r4, #0]
 8016576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801657a:	bd70      	pop	{r4, r5, r6, pc}
 801657c:	08017749 	.word	0x08017749
 8016580:	080177c9 	.word	0x080177c9

08016584 <__multadd>:
 8016584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016588:	690d      	ldr	r5, [r1, #16]
 801658a:	4607      	mov	r7, r0
 801658c:	460c      	mov	r4, r1
 801658e:	461e      	mov	r6, r3
 8016590:	f101 0c14 	add.w	ip, r1, #20
 8016594:	2000      	movs	r0, #0
 8016596:	f8dc 3000 	ldr.w	r3, [ip]
 801659a:	b299      	uxth	r1, r3
 801659c:	fb02 6101 	mla	r1, r2, r1, r6
 80165a0:	0c1e      	lsrs	r6, r3, #16
 80165a2:	0c0b      	lsrs	r3, r1, #16
 80165a4:	fb02 3306 	mla	r3, r2, r6, r3
 80165a8:	b289      	uxth	r1, r1
 80165aa:	3001      	adds	r0, #1
 80165ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80165b0:	4285      	cmp	r5, r0
 80165b2:	f84c 1b04 	str.w	r1, [ip], #4
 80165b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80165ba:	dcec      	bgt.n	8016596 <__multadd+0x12>
 80165bc:	b30e      	cbz	r6, 8016602 <__multadd+0x7e>
 80165be:	68a3      	ldr	r3, [r4, #8]
 80165c0:	42ab      	cmp	r3, r5
 80165c2:	dc19      	bgt.n	80165f8 <__multadd+0x74>
 80165c4:	6861      	ldr	r1, [r4, #4]
 80165c6:	4638      	mov	r0, r7
 80165c8:	3101      	adds	r1, #1
 80165ca:	f7ff ff79 	bl	80164c0 <_Balloc>
 80165ce:	4680      	mov	r8, r0
 80165d0:	b928      	cbnz	r0, 80165de <__multadd+0x5a>
 80165d2:	4602      	mov	r2, r0
 80165d4:	4b0c      	ldr	r3, [pc, #48]	; (8016608 <__multadd+0x84>)
 80165d6:	480d      	ldr	r0, [pc, #52]	; (801660c <__multadd+0x88>)
 80165d8:	21ba      	movs	r1, #186	; 0xba
 80165da:	f000 fd6b 	bl	80170b4 <__assert_func>
 80165de:	6922      	ldr	r2, [r4, #16]
 80165e0:	3202      	adds	r2, #2
 80165e2:	f104 010c 	add.w	r1, r4, #12
 80165e6:	0092      	lsls	r2, r2, #2
 80165e8:	300c      	adds	r0, #12
 80165ea:	f7ff f91a 	bl	8015822 <memcpy>
 80165ee:	4621      	mov	r1, r4
 80165f0:	4638      	mov	r0, r7
 80165f2:	f7ff ffa5 	bl	8016540 <_Bfree>
 80165f6:	4644      	mov	r4, r8
 80165f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80165fc:	3501      	adds	r5, #1
 80165fe:	615e      	str	r6, [r3, #20]
 8016600:	6125      	str	r5, [r4, #16]
 8016602:	4620      	mov	r0, r4
 8016604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016608:	080177b8 	.word	0x080177b8
 801660c:	080177c9 	.word	0x080177c9

08016610 <__hi0bits>:
 8016610:	0c03      	lsrs	r3, r0, #16
 8016612:	041b      	lsls	r3, r3, #16
 8016614:	b9d3      	cbnz	r3, 801664c <__hi0bits+0x3c>
 8016616:	0400      	lsls	r0, r0, #16
 8016618:	2310      	movs	r3, #16
 801661a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801661e:	bf04      	itt	eq
 8016620:	0200      	lsleq	r0, r0, #8
 8016622:	3308      	addeq	r3, #8
 8016624:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016628:	bf04      	itt	eq
 801662a:	0100      	lsleq	r0, r0, #4
 801662c:	3304      	addeq	r3, #4
 801662e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016632:	bf04      	itt	eq
 8016634:	0080      	lsleq	r0, r0, #2
 8016636:	3302      	addeq	r3, #2
 8016638:	2800      	cmp	r0, #0
 801663a:	db05      	blt.n	8016648 <__hi0bits+0x38>
 801663c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016640:	f103 0301 	add.w	r3, r3, #1
 8016644:	bf08      	it	eq
 8016646:	2320      	moveq	r3, #32
 8016648:	4618      	mov	r0, r3
 801664a:	4770      	bx	lr
 801664c:	2300      	movs	r3, #0
 801664e:	e7e4      	b.n	801661a <__hi0bits+0xa>

08016650 <__lo0bits>:
 8016650:	6803      	ldr	r3, [r0, #0]
 8016652:	f013 0207 	ands.w	r2, r3, #7
 8016656:	d00c      	beq.n	8016672 <__lo0bits+0x22>
 8016658:	07d9      	lsls	r1, r3, #31
 801665a:	d422      	bmi.n	80166a2 <__lo0bits+0x52>
 801665c:	079a      	lsls	r2, r3, #30
 801665e:	bf49      	itett	mi
 8016660:	085b      	lsrmi	r3, r3, #1
 8016662:	089b      	lsrpl	r3, r3, #2
 8016664:	6003      	strmi	r3, [r0, #0]
 8016666:	2201      	movmi	r2, #1
 8016668:	bf5c      	itt	pl
 801666a:	6003      	strpl	r3, [r0, #0]
 801666c:	2202      	movpl	r2, #2
 801666e:	4610      	mov	r0, r2
 8016670:	4770      	bx	lr
 8016672:	b299      	uxth	r1, r3
 8016674:	b909      	cbnz	r1, 801667a <__lo0bits+0x2a>
 8016676:	0c1b      	lsrs	r3, r3, #16
 8016678:	2210      	movs	r2, #16
 801667a:	b2d9      	uxtb	r1, r3
 801667c:	b909      	cbnz	r1, 8016682 <__lo0bits+0x32>
 801667e:	3208      	adds	r2, #8
 8016680:	0a1b      	lsrs	r3, r3, #8
 8016682:	0719      	lsls	r1, r3, #28
 8016684:	bf04      	itt	eq
 8016686:	091b      	lsreq	r3, r3, #4
 8016688:	3204      	addeq	r2, #4
 801668a:	0799      	lsls	r1, r3, #30
 801668c:	bf04      	itt	eq
 801668e:	089b      	lsreq	r3, r3, #2
 8016690:	3202      	addeq	r2, #2
 8016692:	07d9      	lsls	r1, r3, #31
 8016694:	d403      	bmi.n	801669e <__lo0bits+0x4e>
 8016696:	085b      	lsrs	r3, r3, #1
 8016698:	f102 0201 	add.w	r2, r2, #1
 801669c:	d003      	beq.n	80166a6 <__lo0bits+0x56>
 801669e:	6003      	str	r3, [r0, #0]
 80166a0:	e7e5      	b.n	801666e <__lo0bits+0x1e>
 80166a2:	2200      	movs	r2, #0
 80166a4:	e7e3      	b.n	801666e <__lo0bits+0x1e>
 80166a6:	2220      	movs	r2, #32
 80166a8:	e7e1      	b.n	801666e <__lo0bits+0x1e>
	...

080166ac <__i2b>:
 80166ac:	b510      	push	{r4, lr}
 80166ae:	460c      	mov	r4, r1
 80166b0:	2101      	movs	r1, #1
 80166b2:	f7ff ff05 	bl	80164c0 <_Balloc>
 80166b6:	4602      	mov	r2, r0
 80166b8:	b928      	cbnz	r0, 80166c6 <__i2b+0x1a>
 80166ba:	4b05      	ldr	r3, [pc, #20]	; (80166d0 <__i2b+0x24>)
 80166bc:	4805      	ldr	r0, [pc, #20]	; (80166d4 <__i2b+0x28>)
 80166be:	f240 1145 	movw	r1, #325	; 0x145
 80166c2:	f000 fcf7 	bl	80170b4 <__assert_func>
 80166c6:	2301      	movs	r3, #1
 80166c8:	6144      	str	r4, [r0, #20]
 80166ca:	6103      	str	r3, [r0, #16]
 80166cc:	bd10      	pop	{r4, pc}
 80166ce:	bf00      	nop
 80166d0:	080177b8 	.word	0x080177b8
 80166d4:	080177c9 	.word	0x080177c9

080166d8 <__multiply>:
 80166d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166dc:	4691      	mov	r9, r2
 80166de:	690a      	ldr	r2, [r1, #16]
 80166e0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80166e4:	429a      	cmp	r2, r3
 80166e6:	bfb8      	it	lt
 80166e8:	460b      	movlt	r3, r1
 80166ea:	460c      	mov	r4, r1
 80166ec:	bfbc      	itt	lt
 80166ee:	464c      	movlt	r4, r9
 80166f0:	4699      	movlt	r9, r3
 80166f2:	6927      	ldr	r7, [r4, #16]
 80166f4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80166f8:	68a3      	ldr	r3, [r4, #8]
 80166fa:	6861      	ldr	r1, [r4, #4]
 80166fc:	eb07 060a 	add.w	r6, r7, sl
 8016700:	42b3      	cmp	r3, r6
 8016702:	b085      	sub	sp, #20
 8016704:	bfb8      	it	lt
 8016706:	3101      	addlt	r1, #1
 8016708:	f7ff feda 	bl	80164c0 <_Balloc>
 801670c:	b930      	cbnz	r0, 801671c <__multiply+0x44>
 801670e:	4602      	mov	r2, r0
 8016710:	4b44      	ldr	r3, [pc, #272]	; (8016824 <__multiply+0x14c>)
 8016712:	4845      	ldr	r0, [pc, #276]	; (8016828 <__multiply+0x150>)
 8016714:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8016718:	f000 fccc 	bl	80170b4 <__assert_func>
 801671c:	f100 0514 	add.w	r5, r0, #20
 8016720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8016724:	462b      	mov	r3, r5
 8016726:	2200      	movs	r2, #0
 8016728:	4543      	cmp	r3, r8
 801672a:	d321      	bcc.n	8016770 <__multiply+0x98>
 801672c:	f104 0314 	add.w	r3, r4, #20
 8016730:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8016734:	f109 0314 	add.w	r3, r9, #20
 8016738:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801673c:	9202      	str	r2, [sp, #8]
 801673e:	1b3a      	subs	r2, r7, r4
 8016740:	3a15      	subs	r2, #21
 8016742:	f022 0203 	bic.w	r2, r2, #3
 8016746:	3204      	adds	r2, #4
 8016748:	f104 0115 	add.w	r1, r4, #21
 801674c:	428f      	cmp	r7, r1
 801674e:	bf38      	it	cc
 8016750:	2204      	movcc	r2, #4
 8016752:	9201      	str	r2, [sp, #4]
 8016754:	9a02      	ldr	r2, [sp, #8]
 8016756:	9303      	str	r3, [sp, #12]
 8016758:	429a      	cmp	r2, r3
 801675a:	d80c      	bhi.n	8016776 <__multiply+0x9e>
 801675c:	2e00      	cmp	r6, #0
 801675e:	dd03      	ble.n	8016768 <__multiply+0x90>
 8016760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016764:	2b00      	cmp	r3, #0
 8016766:	d05b      	beq.n	8016820 <__multiply+0x148>
 8016768:	6106      	str	r6, [r0, #16]
 801676a:	b005      	add	sp, #20
 801676c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016770:	f843 2b04 	str.w	r2, [r3], #4
 8016774:	e7d8      	b.n	8016728 <__multiply+0x50>
 8016776:	f8b3 a000 	ldrh.w	sl, [r3]
 801677a:	f1ba 0f00 	cmp.w	sl, #0
 801677e:	d024      	beq.n	80167ca <__multiply+0xf2>
 8016780:	f104 0e14 	add.w	lr, r4, #20
 8016784:	46a9      	mov	r9, r5
 8016786:	f04f 0c00 	mov.w	ip, #0
 801678a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801678e:	f8d9 1000 	ldr.w	r1, [r9]
 8016792:	fa1f fb82 	uxth.w	fp, r2
 8016796:	b289      	uxth	r1, r1
 8016798:	fb0a 110b 	mla	r1, sl, fp, r1
 801679c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80167a0:	f8d9 2000 	ldr.w	r2, [r9]
 80167a4:	4461      	add	r1, ip
 80167a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80167aa:	fb0a c20b 	mla	r2, sl, fp, ip
 80167ae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80167b2:	b289      	uxth	r1, r1
 80167b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80167b8:	4577      	cmp	r7, lr
 80167ba:	f849 1b04 	str.w	r1, [r9], #4
 80167be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80167c2:	d8e2      	bhi.n	801678a <__multiply+0xb2>
 80167c4:	9a01      	ldr	r2, [sp, #4]
 80167c6:	f845 c002 	str.w	ip, [r5, r2]
 80167ca:	9a03      	ldr	r2, [sp, #12]
 80167cc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80167d0:	3304      	adds	r3, #4
 80167d2:	f1b9 0f00 	cmp.w	r9, #0
 80167d6:	d021      	beq.n	801681c <__multiply+0x144>
 80167d8:	6829      	ldr	r1, [r5, #0]
 80167da:	f104 0c14 	add.w	ip, r4, #20
 80167de:	46ae      	mov	lr, r5
 80167e0:	f04f 0a00 	mov.w	sl, #0
 80167e4:	f8bc b000 	ldrh.w	fp, [ip]
 80167e8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80167ec:	fb09 220b 	mla	r2, r9, fp, r2
 80167f0:	4452      	add	r2, sl
 80167f2:	b289      	uxth	r1, r1
 80167f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80167f8:	f84e 1b04 	str.w	r1, [lr], #4
 80167fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016800:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016804:	f8be 1000 	ldrh.w	r1, [lr]
 8016808:	fb09 110a 	mla	r1, r9, sl, r1
 801680c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8016810:	4567      	cmp	r7, ip
 8016812:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8016816:	d8e5      	bhi.n	80167e4 <__multiply+0x10c>
 8016818:	9a01      	ldr	r2, [sp, #4]
 801681a:	50a9      	str	r1, [r5, r2]
 801681c:	3504      	adds	r5, #4
 801681e:	e799      	b.n	8016754 <__multiply+0x7c>
 8016820:	3e01      	subs	r6, #1
 8016822:	e79b      	b.n	801675c <__multiply+0x84>
 8016824:	080177b8 	.word	0x080177b8
 8016828:	080177c9 	.word	0x080177c9

0801682c <__pow5mult>:
 801682c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016830:	4615      	mov	r5, r2
 8016832:	f012 0203 	ands.w	r2, r2, #3
 8016836:	4606      	mov	r6, r0
 8016838:	460f      	mov	r7, r1
 801683a:	d007      	beq.n	801684c <__pow5mult+0x20>
 801683c:	4c25      	ldr	r4, [pc, #148]	; (80168d4 <__pow5mult+0xa8>)
 801683e:	3a01      	subs	r2, #1
 8016840:	2300      	movs	r3, #0
 8016842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016846:	f7ff fe9d 	bl	8016584 <__multadd>
 801684a:	4607      	mov	r7, r0
 801684c:	10ad      	asrs	r5, r5, #2
 801684e:	d03d      	beq.n	80168cc <__pow5mult+0xa0>
 8016850:	69f4      	ldr	r4, [r6, #28]
 8016852:	b97c      	cbnz	r4, 8016874 <__pow5mult+0x48>
 8016854:	2010      	movs	r0, #16
 8016856:	f7fd ffe3 	bl	8014820 <malloc>
 801685a:	4602      	mov	r2, r0
 801685c:	61f0      	str	r0, [r6, #28]
 801685e:	b928      	cbnz	r0, 801686c <__pow5mult+0x40>
 8016860:	4b1d      	ldr	r3, [pc, #116]	; (80168d8 <__pow5mult+0xac>)
 8016862:	481e      	ldr	r0, [pc, #120]	; (80168dc <__pow5mult+0xb0>)
 8016864:	f240 11b3 	movw	r1, #435	; 0x1b3
 8016868:	f000 fc24 	bl	80170b4 <__assert_func>
 801686c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016870:	6004      	str	r4, [r0, #0]
 8016872:	60c4      	str	r4, [r0, #12]
 8016874:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8016878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801687c:	b94c      	cbnz	r4, 8016892 <__pow5mult+0x66>
 801687e:	f240 2171 	movw	r1, #625	; 0x271
 8016882:	4630      	mov	r0, r6
 8016884:	f7ff ff12 	bl	80166ac <__i2b>
 8016888:	2300      	movs	r3, #0
 801688a:	f8c8 0008 	str.w	r0, [r8, #8]
 801688e:	4604      	mov	r4, r0
 8016890:	6003      	str	r3, [r0, #0]
 8016892:	f04f 0900 	mov.w	r9, #0
 8016896:	07eb      	lsls	r3, r5, #31
 8016898:	d50a      	bpl.n	80168b0 <__pow5mult+0x84>
 801689a:	4639      	mov	r1, r7
 801689c:	4622      	mov	r2, r4
 801689e:	4630      	mov	r0, r6
 80168a0:	f7ff ff1a 	bl	80166d8 <__multiply>
 80168a4:	4639      	mov	r1, r7
 80168a6:	4680      	mov	r8, r0
 80168a8:	4630      	mov	r0, r6
 80168aa:	f7ff fe49 	bl	8016540 <_Bfree>
 80168ae:	4647      	mov	r7, r8
 80168b0:	106d      	asrs	r5, r5, #1
 80168b2:	d00b      	beq.n	80168cc <__pow5mult+0xa0>
 80168b4:	6820      	ldr	r0, [r4, #0]
 80168b6:	b938      	cbnz	r0, 80168c8 <__pow5mult+0x9c>
 80168b8:	4622      	mov	r2, r4
 80168ba:	4621      	mov	r1, r4
 80168bc:	4630      	mov	r0, r6
 80168be:	f7ff ff0b 	bl	80166d8 <__multiply>
 80168c2:	6020      	str	r0, [r4, #0]
 80168c4:	f8c0 9000 	str.w	r9, [r0]
 80168c8:	4604      	mov	r4, r0
 80168ca:	e7e4      	b.n	8016896 <__pow5mult+0x6a>
 80168cc:	4638      	mov	r0, r7
 80168ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168d2:	bf00      	nop
 80168d4:	08017918 	.word	0x08017918
 80168d8:	08017749 	.word	0x08017749
 80168dc:	080177c9 	.word	0x080177c9

080168e0 <__lshift>:
 80168e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168e4:	460c      	mov	r4, r1
 80168e6:	6849      	ldr	r1, [r1, #4]
 80168e8:	6923      	ldr	r3, [r4, #16]
 80168ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80168ee:	68a3      	ldr	r3, [r4, #8]
 80168f0:	4607      	mov	r7, r0
 80168f2:	4691      	mov	r9, r2
 80168f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80168f8:	f108 0601 	add.w	r6, r8, #1
 80168fc:	42b3      	cmp	r3, r6
 80168fe:	db0b      	blt.n	8016918 <__lshift+0x38>
 8016900:	4638      	mov	r0, r7
 8016902:	f7ff fddd 	bl	80164c0 <_Balloc>
 8016906:	4605      	mov	r5, r0
 8016908:	b948      	cbnz	r0, 801691e <__lshift+0x3e>
 801690a:	4602      	mov	r2, r0
 801690c:	4b28      	ldr	r3, [pc, #160]	; (80169b0 <__lshift+0xd0>)
 801690e:	4829      	ldr	r0, [pc, #164]	; (80169b4 <__lshift+0xd4>)
 8016910:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8016914:	f000 fbce 	bl	80170b4 <__assert_func>
 8016918:	3101      	adds	r1, #1
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	e7ee      	b.n	80168fc <__lshift+0x1c>
 801691e:	2300      	movs	r3, #0
 8016920:	f100 0114 	add.w	r1, r0, #20
 8016924:	f100 0210 	add.w	r2, r0, #16
 8016928:	4618      	mov	r0, r3
 801692a:	4553      	cmp	r3, sl
 801692c:	db33      	blt.n	8016996 <__lshift+0xb6>
 801692e:	6920      	ldr	r0, [r4, #16]
 8016930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016934:	f104 0314 	add.w	r3, r4, #20
 8016938:	f019 091f 	ands.w	r9, r9, #31
 801693c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016944:	d02b      	beq.n	801699e <__lshift+0xbe>
 8016946:	f1c9 0e20 	rsb	lr, r9, #32
 801694a:	468a      	mov	sl, r1
 801694c:	2200      	movs	r2, #0
 801694e:	6818      	ldr	r0, [r3, #0]
 8016950:	fa00 f009 	lsl.w	r0, r0, r9
 8016954:	4310      	orrs	r0, r2
 8016956:	f84a 0b04 	str.w	r0, [sl], #4
 801695a:	f853 2b04 	ldr.w	r2, [r3], #4
 801695e:	459c      	cmp	ip, r3
 8016960:	fa22 f20e 	lsr.w	r2, r2, lr
 8016964:	d8f3      	bhi.n	801694e <__lshift+0x6e>
 8016966:	ebac 0304 	sub.w	r3, ip, r4
 801696a:	3b15      	subs	r3, #21
 801696c:	f023 0303 	bic.w	r3, r3, #3
 8016970:	3304      	adds	r3, #4
 8016972:	f104 0015 	add.w	r0, r4, #21
 8016976:	4584      	cmp	ip, r0
 8016978:	bf38      	it	cc
 801697a:	2304      	movcc	r3, #4
 801697c:	50ca      	str	r2, [r1, r3]
 801697e:	b10a      	cbz	r2, 8016984 <__lshift+0xa4>
 8016980:	f108 0602 	add.w	r6, r8, #2
 8016984:	3e01      	subs	r6, #1
 8016986:	4638      	mov	r0, r7
 8016988:	612e      	str	r6, [r5, #16]
 801698a:	4621      	mov	r1, r4
 801698c:	f7ff fdd8 	bl	8016540 <_Bfree>
 8016990:	4628      	mov	r0, r5
 8016992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016996:	f842 0f04 	str.w	r0, [r2, #4]!
 801699a:	3301      	adds	r3, #1
 801699c:	e7c5      	b.n	801692a <__lshift+0x4a>
 801699e:	3904      	subs	r1, #4
 80169a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80169a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80169a8:	459c      	cmp	ip, r3
 80169aa:	d8f9      	bhi.n	80169a0 <__lshift+0xc0>
 80169ac:	e7ea      	b.n	8016984 <__lshift+0xa4>
 80169ae:	bf00      	nop
 80169b0:	080177b8 	.word	0x080177b8
 80169b4:	080177c9 	.word	0x080177c9

080169b8 <__mcmp>:
 80169b8:	b530      	push	{r4, r5, lr}
 80169ba:	6902      	ldr	r2, [r0, #16]
 80169bc:	690c      	ldr	r4, [r1, #16]
 80169be:	1b12      	subs	r2, r2, r4
 80169c0:	d10e      	bne.n	80169e0 <__mcmp+0x28>
 80169c2:	f100 0314 	add.w	r3, r0, #20
 80169c6:	3114      	adds	r1, #20
 80169c8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80169cc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80169d0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80169d4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80169d8:	42a5      	cmp	r5, r4
 80169da:	d003      	beq.n	80169e4 <__mcmp+0x2c>
 80169dc:	d305      	bcc.n	80169ea <__mcmp+0x32>
 80169de:	2201      	movs	r2, #1
 80169e0:	4610      	mov	r0, r2
 80169e2:	bd30      	pop	{r4, r5, pc}
 80169e4:	4283      	cmp	r3, r0
 80169e6:	d3f3      	bcc.n	80169d0 <__mcmp+0x18>
 80169e8:	e7fa      	b.n	80169e0 <__mcmp+0x28>
 80169ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80169ee:	e7f7      	b.n	80169e0 <__mcmp+0x28>

080169f0 <__mdiff>:
 80169f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169f4:	460c      	mov	r4, r1
 80169f6:	4606      	mov	r6, r0
 80169f8:	4611      	mov	r1, r2
 80169fa:	4620      	mov	r0, r4
 80169fc:	4690      	mov	r8, r2
 80169fe:	f7ff ffdb 	bl	80169b8 <__mcmp>
 8016a02:	1e05      	subs	r5, r0, #0
 8016a04:	d110      	bne.n	8016a28 <__mdiff+0x38>
 8016a06:	4629      	mov	r1, r5
 8016a08:	4630      	mov	r0, r6
 8016a0a:	f7ff fd59 	bl	80164c0 <_Balloc>
 8016a0e:	b930      	cbnz	r0, 8016a1e <__mdiff+0x2e>
 8016a10:	4b3a      	ldr	r3, [pc, #232]	; (8016afc <__mdiff+0x10c>)
 8016a12:	4602      	mov	r2, r0
 8016a14:	f240 2137 	movw	r1, #567	; 0x237
 8016a18:	4839      	ldr	r0, [pc, #228]	; (8016b00 <__mdiff+0x110>)
 8016a1a:	f000 fb4b 	bl	80170b4 <__assert_func>
 8016a1e:	2301      	movs	r3, #1
 8016a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a28:	bfa4      	itt	ge
 8016a2a:	4643      	movge	r3, r8
 8016a2c:	46a0      	movge	r8, r4
 8016a2e:	4630      	mov	r0, r6
 8016a30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016a34:	bfa6      	itte	ge
 8016a36:	461c      	movge	r4, r3
 8016a38:	2500      	movge	r5, #0
 8016a3a:	2501      	movlt	r5, #1
 8016a3c:	f7ff fd40 	bl	80164c0 <_Balloc>
 8016a40:	b920      	cbnz	r0, 8016a4c <__mdiff+0x5c>
 8016a42:	4b2e      	ldr	r3, [pc, #184]	; (8016afc <__mdiff+0x10c>)
 8016a44:	4602      	mov	r2, r0
 8016a46:	f240 2145 	movw	r1, #581	; 0x245
 8016a4a:	e7e5      	b.n	8016a18 <__mdiff+0x28>
 8016a4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016a50:	6926      	ldr	r6, [r4, #16]
 8016a52:	60c5      	str	r5, [r0, #12]
 8016a54:	f104 0914 	add.w	r9, r4, #20
 8016a58:	f108 0514 	add.w	r5, r8, #20
 8016a5c:	f100 0e14 	add.w	lr, r0, #20
 8016a60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016a64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016a68:	f108 0210 	add.w	r2, r8, #16
 8016a6c:	46f2      	mov	sl, lr
 8016a6e:	2100      	movs	r1, #0
 8016a70:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016a78:	fa11 f88b 	uxtah	r8, r1, fp
 8016a7c:	b299      	uxth	r1, r3
 8016a7e:	0c1b      	lsrs	r3, r3, #16
 8016a80:	eba8 0801 	sub.w	r8, r8, r1
 8016a84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016a88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016a8c:	fa1f f888 	uxth.w	r8, r8
 8016a90:	1419      	asrs	r1, r3, #16
 8016a92:	454e      	cmp	r6, r9
 8016a94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016a98:	f84a 3b04 	str.w	r3, [sl], #4
 8016a9c:	d8e8      	bhi.n	8016a70 <__mdiff+0x80>
 8016a9e:	1b33      	subs	r3, r6, r4
 8016aa0:	3b15      	subs	r3, #21
 8016aa2:	f023 0303 	bic.w	r3, r3, #3
 8016aa6:	3304      	adds	r3, #4
 8016aa8:	3415      	adds	r4, #21
 8016aaa:	42a6      	cmp	r6, r4
 8016aac:	bf38      	it	cc
 8016aae:	2304      	movcc	r3, #4
 8016ab0:	441d      	add	r5, r3
 8016ab2:	4473      	add	r3, lr
 8016ab4:	469e      	mov	lr, r3
 8016ab6:	462e      	mov	r6, r5
 8016ab8:	4566      	cmp	r6, ip
 8016aba:	d30e      	bcc.n	8016ada <__mdiff+0xea>
 8016abc:	f10c 0203 	add.w	r2, ip, #3
 8016ac0:	1b52      	subs	r2, r2, r5
 8016ac2:	f022 0203 	bic.w	r2, r2, #3
 8016ac6:	3d03      	subs	r5, #3
 8016ac8:	45ac      	cmp	ip, r5
 8016aca:	bf38      	it	cc
 8016acc:	2200      	movcc	r2, #0
 8016ace:	4413      	add	r3, r2
 8016ad0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016ad4:	b17a      	cbz	r2, 8016af6 <__mdiff+0x106>
 8016ad6:	6107      	str	r7, [r0, #16]
 8016ad8:	e7a4      	b.n	8016a24 <__mdiff+0x34>
 8016ada:	f856 8b04 	ldr.w	r8, [r6], #4
 8016ade:	fa11 f288 	uxtah	r2, r1, r8
 8016ae2:	1414      	asrs	r4, r2, #16
 8016ae4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016ae8:	b292      	uxth	r2, r2
 8016aea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016aee:	f84e 2b04 	str.w	r2, [lr], #4
 8016af2:	1421      	asrs	r1, r4, #16
 8016af4:	e7e0      	b.n	8016ab8 <__mdiff+0xc8>
 8016af6:	3f01      	subs	r7, #1
 8016af8:	e7ea      	b.n	8016ad0 <__mdiff+0xe0>
 8016afa:	bf00      	nop
 8016afc:	080177b8 	.word	0x080177b8
 8016b00:	080177c9 	.word	0x080177c9

08016b04 <__d2b>:
 8016b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016b08:	460f      	mov	r7, r1
 8016b0a:	2101      	movs	r1, #1
 8016b0c:	ec59 8b10 	vmov	r8, r9, d0
 8016b10:	4616      	mov	r6, r2
 8016b12:	f7ff fcd5 	bl	80164c0 <_Balloc>
 8016b16:	4604      	mov	r4, r0
 8016b18:	b930      	cbnz	r0, 8016b28 <__d2b+0x24>
 8016b1a:	4602      	mov	r2, r0
 8016b1c:	4b24      	ldr	r3, [pc, #144]	; (8016bb0 <__d2b+0xac>)
 8016b1e:	4825      	ldr	r0, [pc, #148]	; (8016bb4 <__d2b+0xb0>)
 8016b20:	f240 310f 	movw	r1, #783	; 0x30f
 8016b24:	f000 fac6 	bl	80170b4 <__assert_func>
 8016b28:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016b2c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b30:	bb2d      	cbnz	r5, 8016b7e <__d2b+0x7a>
 8016b32:	9301      	str	r3, [sp, #4]
 8016b34:	f1b8 0300 	subs.w	r3, r8, #0
 8016b38:	d026      	beq.n	8016b88 <__d2b+0x84>
 8016b3a:	4668      	mov	r0, sp
 8016b3c:	9300      	str	r3, [sp, #0]
 8016b3e:	f7ff fd87 	bl	8016650 <__lo0bits>
 8016b42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016b46:	b1e8      	cbz	r0, 8016b84 <__d2b+0x80>
 8016b48:	f1c0 0320 	rsb	r3, r0, #32
 8016b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8016b50:	430b      	orrs	r3, r1
 8016b52:	40c2      	lsrs	r2, r0
 8016b54:	6163      	str	r3, [r4, #20]
 8016b56:	9201      	str	r2, [sp, #4]
 8016b58:	9b01      	ldr	r3, [sp, #4]
 8016b5a:	61a3      	str	r3, [r4, #24]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	bf14      	ite	ne
 8016b60:	2202      	movne	r2, #2
 8016b62:	2201      	moveq	r2, #1
 8016b64:	6122      	str	r2, [r4, #16]
 8016b66:	b1bd      	cbz	r5, 8016b98 <__d2b+0x94>
 8016b68:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016b6c:	4405      	add	r5, r0
 8016b6e:	603d      	str	r5, [r7, #0]
 8016b70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016b74:	6030      	str	r0, [r6, #0]
 8016b76:	4620      	mov	r0, r4
 8016b78:	b003      	add	sp, #12
 8016b7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b82:	e7d6      	b.n	8016b32 <__d2b+0x2e>
 8016b84:	6161      	str	r1, [r4, #20]
 8016b86:	e7e7      	b.n	8016b58 <__d2b+0x54>
 8016b88:	a801      	add	r0, sp, #4
 8016b8a:	f7ff fd61 	bl	8016650 <__lo0bits>
 8016b8e:	9b01      	ldr	r3, [sp, #4]
 8016b90:	6163      	str	r3, [r4, #20]
 8016b92:	3020      	adds	r0, #32
 8016b94:	2201      	movs	r2, #1
 8016b96:	e7e5      	b.n	8016b64 <__d2b+0x60>
 8016b98:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016ba0:	6038      	str	r0, [r7, #0]
 8016ba2:	6918      	ldr	r0, [r3, #16]
 8016ba4:	f7ff fd34 	bl	8016610 <__hi0bits>
 8016ba8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016bac:	e7e2      	b.n	8016b74 <__d2b+0x70>
 8016bae:	bf00      	nop
 8016bb0:	080177b8 	.word	0x080177b8
 8016bb4:	080177c9 	.word	0x080177c9

08016bb8 <_malloc_usable_size_r>:
 8016bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016bbc:	1f18      	subs	r0, r3, #4
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	bfbc      	itt	lt
 8016bc2:	580b      	ldrlt	r3, [r1, r0]
 8016bc4:	18c0      	addlt	r0, r0, r3
 8016bc6:	4770      	bx	lr

08016bc8 <__sfputc_r>:
 8016bc8:	6893      	ldr	r3, [r2, #8]
 8016bca:	3b01      	subs	r3, #1
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	b410      	push	{r4}
 8016bd0:	6093      	str	r3, [r2, #8]
 8016bd2:	da08      	bge.n	8016be6 <__sfputc_r+0x1e>
 8016bd4:	6994      	ldr	r4, [r2, #24]
 8016bd6:	42a3      	cmp	r3, r4
 8016bd8:	db01      	blt.n	8016bde <__sfputc_r+0x16>
 8016bda:	290a      	cmp	r1, #10
 8016bdc:	d103      	bne.n	8016be6 <__sfputc_r+0x1e>
 8016bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016be2:	f7fe bcb6 	b.w	8015552 <__swbuf_r>
 8016be6:	6813      	ldr	r3, [r2, #0]
 8016be8:	1c58      	adds	r0, r3, #1
 8016bea:	6010      	str	r0, [r2, #0]
 8016bec:	7019      	strb	r1, [r3, #0]
 8016bee:	4608      	mov	r0, r1
 8016bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bf4:	4770      	bx	lr

08016bf6 <__sfputs_r>:
 8016bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bf8:	4606      	mov	r6, r0
 8016bfa:	460f      	mov	r7, r1
 8016bfc:	4614      	mov	r4, r2
 8016bfe:	18d5      	adds	r5, r2, r3
 8016c00:	42ac      	cmp	r4, r5
 8016c02:	d101      	bne.n	8016c08 <__sfputs_r+0x12>
 8016c04:	2000      	movs	r0, #0
 8016c06:	e007      	b.n	8016c18 <__sfputs_r+0x22>
 8016c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c0c:	463a      	mov	r2, r7
 8016c0e:	4630      	mov	r0, r6
 8016c10:	f7ff ffda 	bl	8016bc8 <__sfputc_r>
 8016c14:	1c43      	adds	r3, r0, #1
 8016c16:	d1f3      	bne.n	8016c00 <__sfputs_r+0xa>
 8016c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c1c <_vfiprintf_r>:
 8016c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c20:	460d      	mov	r5, r1
 8016c22:	b09d      	sub	sp, #116	; 0x74
 8016c24:	4614      	mov	r4, r2
 8016c26:	4698      	mov	r8, r3
 8016c28:	4606      	mov	r6, r0
 8016c2a:	b118      	cbz	r0, 8016c34 <_vfiprintf_r+0x18>
 8016c2c:	6a03      	ldr	r3, [r0, #32]
 8016c2e:	b90b      	cbnz	r3, 8016c34 <_vfiprintf_r+0x18>
 8016c30:	f7fe fba8 	bl	8015384 <__sinit>
 8016c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c36:	07d9      	lsls	r1, r3, #31
 8016c38:	d405      	bmi.n	8016c46 <_vfiprintf_r+0x2a>
 8016c3a:	89ab      	ldrh	r3, [r5, #12]
 8016c3c:	059a      	lsls	r2, r3, #22
 8016c3e:	d402      	bmi.n	8016c46 <_vfiprintf_r+0x2a>
 8016c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c42:	f7fe fdec 	bl	801581e <__retarget_lock_acquire_recursive>
 8016c46:	89ab      	ldrh	r3, [r5, #12]
 8016c48:	071b      	lsls	r3, r3, #28
 8016c4a:	d501      	bpl.n	8016c50 <_vfiprintf_r+0x34>
 8016c4c:	692b      	ldr	r3, [r5, #16]
 8016c4e:	b99b      	cbnz	r3, 8016c78 <_vfiprintf_r+0x5c>
 8016c50:	4629      	mov	r1, r5
 8016c52:	4630      	mov	r0, r6
 8016c54:	f7fe fcba 	bl	80155cc <__swsetup_r>
 8016c58:	b170      	cbz	r0, 8016c78 <_vfiprintf_r+0x5c>
 8016c5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c5c:	07dc      	lsls	r4, r3, #31
 8016c5e:	d504      	bpl.n	8016c6a <_vfiprintf_r+0x4e>
 8016c60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016c64:	b01d      	add	sp, #116	; 0x74
 8016c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c6a:	89ab      	ldrh	r3, [r5, #12]
 8016c6c:	0598      	lsls	r0, r3, #22
 8016c6e:	d4f7      	bmi.n	8016c60 <_vfiprintf_r+0x44>
 8016c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016c72:	f7fe fdd5 	bl	8015820 <__retarget_lock_release_recursive>
 8016c76:	e7f3      	b.n	8016c60 <_vfiprintf_r+0x44>
 8016c78:	2300      	movs	r3, #0
 8016c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c7c:	2320      	movs	r3, #32
 8016c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8016c86:	2330      	movs	r3, #48	; 0x30
 8016c88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016e3c <_vfiprintf_r+0x220>
 8016c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c90:	f04f 0901 	mov.w	r9, #1
 8016c94:	4623      	mov	r3, r4
 8016c96:	469a      	mov	sl, r3
 8016c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c9c:	b10a      	cbz	r2, 8016ca2 <_vfiprintf_r+0x86>
 8016c9e:	2a25      	cmp	r2, #37	; 0x25
 8016ca0:	d1f9      	bne.n	8016c96 <_vfiprintf_r+0x7a>
 8016ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8016ca6:	d00b      	beq.n	8016cc0 <_vfiprintf_r+0xa4>
 8016ca8:	465b      	mov	r3, fp
 8016caa:	4622      	mov	r2, r4
 8016cac:	4629      	mov	r1, r5
 8016cae:	4630      	mov	r0, r6
 8016cb0:	f7ff ffa1 	bl	8016bf6 <__sfputs_r>
 8016cb4:	3001      	adds	r0, #1
 8016cb6:	f000 80a9 	beq.w	8016e0c <_vfiprintf_r+0x1f0>
 8016cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016cbc:	445a      	add	r2, fp
 8016cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8016cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	f000 80a1 	beq.w	8016e0c <_vfiprintf_r+0x1f0>
 8016cca:	2300      	movs	r3, #0
 8016ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016cd4:	f10a 0a01 	add.w	sl, sl, #1
 8016cd8:	9304      	str	r3, [sp, #16]
 8016cda:	9307      	str	r3, [sp, #28]
 8016cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8016ce2:	4654      	mov	r4, sl
 8016ce4:	2205      	movs	r2, #5
 8016ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cea:	4854      	ldr	r0, [pc, #336]	; (8016e3c <_vfiprintf_r+0x220>)
 8016cec:	f7e9 faf8 	bl	80002e0 <memchr>
 8016cf0:	9a04      	ldr	r2, [sp, #16]
 8016cf2:	b9d8      	cbnz	r0, 8016d2c <_vfiprintf_r+0x110>
 8016cf4:	06d1      	lsls	r1, r2, #27
 8016cf6:	bf44      	itt	mi
 8016cf8:	2320      	movmi	r3, #32
 8016cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016cfe:	0713      	lsls	r3, r2, #28
 8016d00:	bf44      	itt	mi
 8016d02:	232b      	movmi	r3, #43	; 0x2b
 8016d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d08:	f89a 3000 	ldrb.w	r3, [sl]
 8016d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8016d0e:	d015      	beq.n	8016d3c <_vfiprintf_r+0x120>
 8016d10:	9a07      	ldr	r2, [sp, #28]
 8016d12:	4654      	mov	r4, sl
 8016d14:	2000      	movs	r0, #0
 8016d16:	f04f 0c0a 	mov.w	ip, #10
 8016d1a:	4621      	mov	r1, r4
 8016d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d20:	3b30      	subs	r3, #48	; 0x30
 8016d22:	2b09      	cmp	r3, #9
 8016d24:	d94d      	bls.n	8016dc2 <_vfiprintf_r+0x1a6>
 8016d26:	b1b0      	cbz	r0, 8016d56 <_vfiprintf_r+0x13a>
 8016d28:	9207      	str	r2, [sp, #28]
 8016d2a:	e014      	b.n	8016d56 <_vfiprintf_r+0x13a>
 8016d2c:	eba0 0308 	sub.w	r3, r0, r8
 8016d30:	fa09 f303 	lsl.w	r3, r9, r3
 8016d34:	4313      	orrs	r3, r2
 8016d36:	9304      	str	r3, [sp, #16]
 8016d38:	46a2      	mov	sl, r4
 8016d3a:	e7d2      	b.n	8016ce2 <_vfiprintf_r+0xc6>
 8016d3c:	9b03      	ldr	r3, [sp, #12]
 8016d3e:	1d19      	adds	r1, r3, #4
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	9103      	str	r1, [sp, #12]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	bfbb      	ittet	lt
 8016d48:	425b      	neglt	r3, r3
 8016d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8016d4e:	9307      	strge	r3, [sp, #28]
 8016d50:	9307      	strlt	r3, [sp, #28]
 8016d52:	bfb8      	it	lt
 8016d54:	9204      	strlt	r2, [sp, #16]
 8016d56:	7823      	ldrb	r3, [r4, #0]
 8016d58:	2b2e      	cmp	r3, #46	; 0x2e
 8016d5a:	d10c      	bne.n	8016d76 <_vfiprintf_r+0x15a>
 8016d5c:	7863      	ldrb	r3, [r4, #1]
 8016d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8016d60:	d134      	bne.n	8016dcc <_vfiprintf_r+0x1b0>
 8016d62:	9b03      	ldr	r3, [sp, #12]
 8016d64:	1d1a      	adds	r2, r3, #4
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	9203      	str	r2, [sp, #12]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	bfb8      	it	lt
 8016d6e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016d72:	3402      	adds	r4, #2
 8016d74:	9305      	str	r3, [sp, #20]
 8016d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016e4c <_vfiprintf_r+0x230>
 8016d7a:	7821      	ldrb	r1, [r4, #0]
 8016d7c:	2203      	movs	r2, #3
 8016d7e:	4650      	mov	r0, sl
 8016d80:	f7e9 faae 	bl	80002e0 <memchr>
 8016d84:	b138      	cbz	r0, 8016d96 <_vfiprintf_r+0x17a>
 8016d86:	9b04      	ldr	r3, [sp, #16]
 8016d88:	eba0 000a 	sub.w	r0, r0, sl
 8016d8c:	2240      	movs	r2, #64	; 0x40
 8016d8e:	4082      	lsls	r2, r0
 8016d90:	4313      	orrs	r3, r2
 8016d92:	3401      	adds	r4, #1
 8016d94:	9304      	str	r3, [sp, #16]
 8016d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d9a:	4829      	ldr	r0, [pc, #164]	; (8016e40 <_vfiprintf_r+0x224>)
 8016d9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016da0:	2206      	movs	r2, #6
 8016da2:	f7e9 fa9d 	bl	80002e0 <memchr>
 8016da6:	2800      	cmp	r0, #0
 8016da8:	d03f      	beq.n	8016e2a <_vfiprintf_r+0x20e>
 8016daa:	4b26      	ldr	r3, [pc, #152]	; (8016e44 <_vfiprintf_r+0x228>)
 8016dac:	bb1b      	cbnz	r3, 8016df6 <_vfiprintf_r+0x1da>
 8016dae:	9b03      	ldr	r3, [sp, #12]
 8016db0:	3307      	adds	r3, #7
 8016db2:	f023 0307 	bic.w	r3, r3, #7
 8016db6:	3308      	adds	r3, #8
 8016db8:	9303      	str	r3, [sp, #12]
 8016dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dbc:	443b      	add	r3, r7
 8016dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016dc0:	e768      	b.n	8016c94 <_vfiprintf_r+0x78>
 8016dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8016dc6:	460c      	mov	r4, r1
 8016dc8:	2001      	movs	r0, #1
 8016dca:	e7a6      	b.n	8016d1a <_vfiprintf_r+0xfe>
 8016dcc:	2300      	movs	r3, #0
 8016dce:	3401      	adds	r4, #1
 8016dd0:	9305      	str	r3, [sp, #20]
 8016dd2:	4619      	mov	r1, r3
 8016dd4:	f04f 0c0a 	mov.w	ip, #10
 8016dd8:	4620      	mov	r0, r4
 8016dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dde:	3a30      	subs	r2, #48	; 0x30
 8016de0:	2a09      	cmp	r2, #9
 8016de2:	d903      	bls.n	8016dec <_vfiprintf_r+0x1d0>
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d0c6      	beq.n	8016d76 <_vfiprintf_r+0x15a>
 8016de8:	9105      	str	r1, [sp, #20]
 8016dea:	e7c4      	b.n	8016d76 <_vfiprintf_r+0x15a>
 8016dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8016df0:	4604      	mov	r4, r0
 8016df2:	2301      	movs	r3, #1
 8016df4:	e7f0      	b.n	8016dd8 <_vfiprintf_r+0x1bc>
 8016df6:	ab03      	add	r3, sp, #12
 8016df8:	9300      	str	r3, [sp, #0]
 8016dfa:	462a      	mov	r2, r5
 8016dfc:	4b12      	ldr	r3, [pc, #72]	; (8016e48 <_vfiprintf_r+0x22c>)
 8016dfe:	a904      	add	r1, sp, #16
 8016e00:	4630      	mov	r0, r6
 8016e02:	f7fd fe89 	bl	8014b18 <_printf_float>
 8016e06:	4607      	mov	r7, r0
 8016e08:	1c78      	adds	r0, r7, #1
 8016e0a:	d1d6      	bne.n	8016dba <_vfiprintf_r+0x19e>
 8016e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e0e:	07d9      	lsls	r1, r3, #31
 8016e10:	d405      	bmi.n	8016e1e <_vfiprintf_r+0x202>
 8016e12:	89ab      	ldrh	r3, [r5, #12]
 8016e14:	059a      	lsls	r2, r3, #22
 8016e16:	d402      	bmi.n	8016e1e <_vfiprintf_r+0x202>
 8016e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e1a:	f7fe fd01 	bl	8015820 <__retarget_lock_release_recursive>
 8016e1e:	89ab      	ldrh	r3, [r5, #12]
 8016e20:	065b      	lsls	r3, r3, #25
 8016e22:	f53f af1d 	bmi.w	8016c60 <_vfiprintf_r+0x44>
 8016e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e28:	e71c      	b.n	8016c64 <_vfiprintf_r+0x48>
 8016e2a:	ab03      	add	r3, sp, #12
 8016e2c:	9300      	str	r3, [sp, #0]
 8016e2e:	462a      	mov	r2, r5
 8016e30:	4b05      	ldr	r3, [pc, #20]	; (8016e48 <_vfiprintf_r+0x22c>)
 8016e32:	a904      	add	r1, sp, #16
 8016e34:	4630      	mov	r0, r6
 8016e36:	f7fe f8f7 	bl	8015028 <_printf_i>
 8016e3a:	e7e4      	b.n	8016e06 <_vfiprintf_r+0x1ea>
 8016e3c:	08017924 	.word	0x08017924
 8016e40:	0801792e 	.word	0x0801792e
 8016e44:	08014b19 	.word	0x08014b19
 8016e48:	08016bf7 	.word	0x08016bf7
 8016e4c:	0801792a 	.word	0x0801792a

08016e50 <__sflush_r>:
 8016e50:	898a      	ldrh	r2, [r1, #12]
 8016e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e56:	4605      	mov	r5, r0
 8016e58:	0710      	lsls	r0, r2, #28
 8016e5a:	460c      	mov	r4, r1
 8016e5c:	d458      	bmi.n	8016f10 <__sflush_r+0xc0>
 8016e5e:	684b      	ldr	r3, [r1, #4]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	dc05      	bgt.n	8016e70 <__sflush_r+0x20>
 8016e64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	dc02      	bgt.n	8016e70 <__sflush_r+0x20>
 8016e6a:	2000      	movs	r0, #0
 8016e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e72:	2e00      	cmp	r6, #0
 8016e74:	d0f9      	beq.n	8016e6a <__sflush_r+0x1a>
 8016e76:	2300      	movs	r3, #0
 8016e78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e7c:	682f      	ldr	r7, [r5, #0]
 8016e7e:	6a21      	ldr	r1, [r4, #32]
 8016e80:	602b      	str	r3, [r5, #0]
 8016e82:	d032      	beq.n	8016eea <__sflush_r+0x9a>
 8016e84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e86:	89a3      	ldrh	r3, [r4, #12]
 8016e88:	075a      	lsls	r2, r3, #29
 8016e8a:	d505      	bpl.n	8016e98 <__sflush_r+0x48>
 8016e8c:	6863      	ldr	r3, [r4, #4]
 8016e8e:	1ac0      	subs	r0, r0, r3
 8016e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e92:	b10b      	cbz	r3, 8016e98 <__sflush_r+0x48>
 8016e94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e96:	1ac0      	subs	r0, r0, r3
 8016e98:	2300      	movs	r3, #0
 8016e9a:	4602      	mov	r2, r0
 8016e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e9e:	6a21      	ldr	r1, [r4, #32]
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	47b0      	blx	r6
 8016ea4:	1c43      	adds	r3, r0, #1
 8016ea6:	89a3      	ldrh	r3, [r4, #12]
 8016ea8:	d106      	bne.n	8016eb8 <__sflush_r+0x68>
 8016eaa:	6829      	ldr	r1, [r5, #0]
 8016eac:	291d      	cmp	r1, #29
 8016eae:	d82b      	bhi.n	8016f08 <__sflush_r+0xb8>
 8016eb0:	4a29      	ldr	r2, [pc, #164]	; (8016f58 <__sflush_r+0x108>)
 8016eb2:	410a      	asrs	r2, r1
 8016eb4:	07d6      	lsls	r6, r2, #31
 8016eb6:	d427      	bmi.n	8016f08 <__sflush_r+0xb8>
 8016eb8:	2200      	movs	r2, #0
 8016eba:	6062      	str	r2, [r4, #4]
 8016ebc:	04d9      	lsls	r1, r3, #19
 8016ebe:	6922      	ldr	r2, [r4, #16]
 8016ec0:	6022      	str	r2, [r4, #0]
 8016ec2:	d504      	bpl.n	8016ece <__sflush_r+0x7e>
 8016ec4:	1c42      	adds	r2, r0, #1
 8016ec6:	d101      	bne.n	8016ecc <__sflush_r+0x7c>
 8016ec8:	682b      	ldr	r3, [r5, #0]
 8016eca:	b903      	cbnz	r3, 8016ece <__sflush_r+0x7e>
 8016ecc:	6560      	str	r0, [r4, #84]	; 0x54
 8016ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ed0:	602f      	str	r7, [r5, #0]
 8016ed2:	2900      	cmp	r1, #0
 8016ed4:	d0c9      	beq.n	8016e6a <__sflush_r+0x1a>
 8016ed6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016eda:	4299      	cmp	r1, r3
 8016edc:	d002      	beq.n	8016ee4 <__sflush_r+0x94>
 8016ede:	4628      	mov	r0, r5
 8016ee0:	f7ff faa2 	bl	8016428 <_free_r>
 8016ee4:	2000      	movs	r0, #0
 8016ee6:	6360      	str	r0, [r4, #52]	; 0x34
 8016ee8:	e7c0      	b.n	8016e6c <__sflush_r+0x1c>
 8016eea:	2301      	movs	r3, #1
 8016eec:	4628      	mov	r0, r5
 8016eee:	47b0      	blx	r6
 8016ef0:	1c41      	adds	r1, r0, #1
 8016ef2:	d1c8      	bne.n	8016e86 <__sflush_r+0x36>
 8016ef4:	682b      	ldr	r3, [r5, #0]
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	d0c5      	beq.n	8016e86 <__sflush_r+0x36>
 8016efa:	2b1d      	cmp	r3, #29
 8016efc:	d001      	beq.n	8016f02 <__sflush_r+0xb2>
 8016efe:	2b16      	cmp	r3, #22
 8016f00:	d101      	bne.n	8016f06 <__sflush_r+0xb6>
 8016f02:	602f      	str	r7, [r5, #0]
 8016f04:	e7b1      	b.n	8016e6a <__sflush_r+0x1a>
 8016f06:	89a3      	ldrh	r3, [r4, #12]
 8016f08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f0c:	81a3      	strh	r3, [r4, #12]
 8016f0e:	e7ad      	b.n	8016e6c <__sflush_r+0x1c>
 8016f10:	690f      	ldr	r7, [r1, #16]
 8016f12:	2f00      	cmp	r7, #0
 8016f14:	d0a9      	beq.n	8016e6a <__sflush_r+0x1a>
 8016f16:	0793      	lsls	r3, r2, #30
 8016f18:	680e      	ldr	r6, [r1, #0]
 8016f1a:	bf08      	it	eq
 8016f1c:	694b      	ldreq	r3, [r1, #20]
 8016f1e:	600f      	str	r7, [r1, #0]
 8016f20:	bf18      	it	ne
 8016f22:	2300      	movne	r3, #0
 8016f24:	eba6 0807 	sub.w	r8, r6, r7
 8016f28:	608b      	str	r3, [r1, #8]
 8016f2a:	f1b8 0f00 	cmp.w	r8, #0
 8016f2e:	dd9c      	ble.n	8016e6a <__sflush_r+0x1a>
 8016f30:	6a21      	ldr	r1, [r4, #32]
 8016f32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f34:	4643      	mov	r3, r8
 8016f36:	463a      	mov	r2, r7
 8016f38:	4628      	mov	r0, r5
 8016f3a:	47b0      	blx	r6
 8016f3c:	2800      	cmp	r0, #0
 8016f3e:	dc06      	bgt.n	8016f4e <__sflush_r+0xfe>
 8016f40:	89a3      	ldrh	r3, [r4, #12]
 8016f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f46:	81a3      	strh	r3, [r4, #12]
 8016f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f4c:	e78e      	b.n	8016e6c <__sflush_r+0x1c>
 8016f4e:	4407      	add	r7, r0
 8016f50:	eba8 0800 	sub.w	r8, r8, r0
 8016f54:	e7e9      	b.n	8016f2a <__sflush_r+0xda>
 8016f56:	bf00      	nop
 8016f58:	dfbffffe 	.word	0xdfbffffe

08016f5c <_fflush_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	690b      	ldr	r3, [r1, #16]
 8016f60:	4605      	mov	r5, r0
 8016f62:	460c      	mov	r4, r1
 8016f64:	b913      	cbnz	r3, 8016f6c <_fflush_r+0x10>
 8016f66:	2500      	movs	r5, #0
 8016f68:	4628      	mov	r0, r5
 8016f6a:	bd38      	pop	{r3, r4, r5, pc}
 8016f6c:	b118      	cbz	r0, 8016f76 <_fflush_r+0x1a>
 8016f6e:	6a03      	ldr	r3, [r0, #32]
 8016f70:	b90b      	cbnz	r3, 8016f76 <_fflush_r+0x1a>
 8016f72:	f7fe fa07 	bl	8015384 <__sinit>
 8016f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d0f3      	beq.n	8016f66 <_fflush_r+0xa>
 8016f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f80:	07d0      	lsls	r0, r2, #31
 8016f82:	d404      	bmi.n	8016f8e <_fflush_r+0x32>
 8016f84:	0599      	lsls	r1, r3, #22
 8016f86:	d402      	bmi.n	8016f8e <_fflush_r+0x32>
 8016f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f8a:	f7fe fc48 	bl	801581e <__retarget_lock_acquire_recursive>
 8016f8e:	4628      	mov	r0, r5
 8016f90:	4621      	mov	r1, r4
 8016f92:	f7ff ff5d 	bl	8016e50 <__sflush_r>
 8016f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f98:	07da      	lsls	r2, r3, #31
 8016f9a:	4605      	mov	r5, r0
 8016f9c:	d4e4      	bmi.n	8016f68 <_fflush_r+0xc>
 8016f9e:	89a3      	ldrh	r3, [r4, #12]
 8016fa0:	059b      	lsls	r3, r3, #22
 8016fa2:	d4e1      	bmi.n	8016f68 <_fflush_r+0xc>
 8016fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fa6:	f7fe fc3b 	bl	8015820 <__retarget_lock_release_recursive>
 8016faa:	e7dd      	b.n	8016f68 <_fflush_r+0xc>

08016fac <__swhatbuf_r>:
 8016fac:	b570      	push	{r4, r5, r6, lr}
 8016fae:	460c      	mov	r4, r1
 8016fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fb4:	2900      	cmp	r1, #0
 8016fb6:	b096      	sub	sp, #88	; 0x58
 8016fb8:	4615      	mov	r5, r2
 8016fba:	461e      	mov	r6, r3
 8016fbc:	da0d      	bge.n	8016fda <__swhatbuf_r+0x2e>
 8016fbe:	89a3      	ldrh	r3, [r4, #12]
 8016fc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016fc4:	f04f 0100 	mov.w	r1, #0
 8016fc8:	bf0c      	ite	eq
 8016fca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8016fce:	2340      	movne	r3, #64	; 0x40
 8016fd0:	2000      	movs	r0, #0
 8016fd2:	6031      	str	r1, [r6, #0]
 8016fd4:	602b      	str	r3, [r5, #0]
 8016fd6:	b016      	add	sp, #88	; 0x58
 8016fd8:	bd70      	pop	{r4, r5, r6, pc}
 8016fda:	466a      	mov	r2, sp
 8016fdc:	f000 f848 	bl	8017070 <_fstat_r>
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	dbec      	blt.n	8016fbe <__swhatbuf_r+0x12>
 8016fe4:	9901      	ldr	r1, [sp, #4]
 8016fe6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016fea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016fee:	4259      	negs	r1, r3
 8016ff0:	4159      	adcs	r1, r3
 8016ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016ff6:	e7eb      	b.n	8016fd0 <__swhatbuf_r+0x24>

08016ff8 <__smakebuf_r>:
 8016ff8:	898b      	ldrh	r3, [r1, #12]
 8016ffa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ffc:	079d      	lsls	r5, r3, #30
 8016ffe:	4606      	mov	r6, r0
 8017000:	460c      	mov	r4, r1
 8017002:	d507      	bpl.n	8017014 <__smakebuf_r+0x1c>
 8017004:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017008:	6023      	str	r3, [r4, #0]
 801700a:	6123      	str	r3, [r4, #16]
 801700c:	2301      	movs	r3, #1
 801700e:	6163      	str	r3, [r4, #20]
 8017010:	b002      	add	sp, #8
 8017012:	bd70      	pop	{r4, r5, r6, pc}
 8017014:	ab01      	add	r3, sp, #4
 8017016:	466a      	mov	r2, sp
 8017018:	f7ff ffc8 	bl	8016fac <__swhatbuf_r>
 801701c:	9900      	ldr	r1, [sp, #0]
 801701e:	4605      	mov	r5, r0
 8017020:	4630      	mov	r0, r6
 8017022:	f7fd fc25 	bl	8014870 <_malloc_r>
 8017026:	b948      	cbnz	r0, 801703c <__smakebuf_r+0x44>
 8017028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801702c:	059a      	lsls	r2, r3, #22
 801702e:	d4ef      	bmi.n	8017010 <__smakebuf_r+0x18>
 8017030:	f023 0303 	bic.w	r3, r3, #3
 8017034:	f043 0302 	orr.w	r3, r3, #2
 8017038:	81a3      	strh	r3, [r4, #12]
 801703a:	e7e3      	b.n	8017004 <__smakebuf_r+0xc>
 801703c:	89a3      	ldrh	r3, [r4, #12]
 801703e:	6020      	str	r0, [r4, #0]
 8017040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017044:	81a3      	strh	r3, [r4, #12]
 8017046:	9b00      	ldr	r3, [sp, #0]
 8017048:	6163      	str	r3, [r4, #20]
 801704a:	9b01      	ldr	r3, [sp, #4]
 801704c:	6120      	str	r0, [r4, #16]
 801704e:	b15b      	cbz	r3, 8017068 <__smakebuf_r+0x70>
 8017050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017054:	4630      	mov	r0, r6
 8017056:	f000 f81d 	bl	8017094 <_isatty_r>
 801705a:	b128      	cbz	r0, 8017068 <__smakebuf_r+0x70>
 801705c:	89a3      	ldrh	r3, [r4, #12]
 801705e:	f023 0303 	bic.w	r3, r3, #3
 8017062:	f043 0301 	orr.w	r3, r3, #1
 8017066:	81a3      	strh	r3, [r4, #12]
 8017068:	89a3      	ldrh	r3, [r4, #12]
 801706a:	431d      	orrs	r5, r3
 801706c:	81a5      	strh	r5, [r4, #12]
 801706e:	e7cf      	b.n	8017010 <__smakebuf_r+0x18>

08017070 <_fstat_r>:
 8017070:	b538      	push	{r3, r4, r5, lr}
 8017072:	4d07      	ldr	r5, [pc, #28]	; (8017090 <_fstat_r+0x20>)
 8017074:	2300      	movs	r3, #0
 8017076:	4604      	mov	r4, r0
 8017078:	4608      	mov	r0, r1
 801707a:	4611      	mov	r1, r2
 801707c:	602b      	str	r3, [r5, #0]
 801707e:	f7ef ffd0 	bl	8007022 <_fstat>
 8017082:	1c43      	adds	r3, r0, #1
 8017084:	d102      	bne.n	801708c <_fstat_r+0x1c>
 8017086:	682b      	ldr	r3, [r5, #0]
 8017088:	b103      	cbz	r3, 801708c <_fstat_r+0x1c>
 801708a:	6023      	str	r3, [r4, #0]
 801708c:	bd38      	pop	{r3, r4, r5, pc}
 801708e:	bf00      	nop
 8017090:	24004794 	.word	0x24004794

08017094 <_isatty_r>:
 8017094:	b538      	push	{r3, r4, r5, lr}
 8017096:	4d06      	ldr	r5, [pc, #24]	; (80170b0 <_isatty_r+0x1c>)
 8017098:	2300      	movs	r3, #0
 801709a:	4604      	mov	r4, r0
 801709c:	4608      	mov	r0, r1
 801709e:	602b      	str	r3, [r5, #0]
 80170a0:	f7ef ffcf 	bl	8007042 <_isatty>
 80170a4:	1c43      	adds	r3, r0, #1
 80170a6:	d102      	bne.n	80170ae <_isatty_r+0x1a>
 80170a8:	682b      	ldr	r3, [r5, #0]
 80170aa:	b103      	cbz	r3, 80170ae <_isatty_r+0x1a>
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	bd38      	pop	{r3, r4, r5, pc}
 80170b0:	24004794 	.word	0x24004794

080170b4 <__assert_func>:
 80170b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80170b6:	4614      	mov	r4, r2
 80170b8:	461a      	mov	r2, r3
 80170ba:	4b09      	ldr	r3, [pc, #36]	; (80170e0 <__assert_func+0x2c>)
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	4605      	mov	r5, r0
 80170c0:	68d8      	ldr	r0, [r3, #12]
 80170c2:	b14c      	cbz	r4, 80170d8 <__assert_func+0x24>
 80170c4:	4b07      	ldr	r3, [pc, #28]	; (80170e4 <__assert_func+0x30>)
 80170c6:	9100      	str	r1, [sp, #0]
 80170c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80170cc:	4906      	ldr	r1, [pc, #24]	; (80170e8 <__assert_func+0x34>)
 80170ce:	462b      	mov	r3, r5
 80170d0:	f000 f844 	bl	801715c <fiprintf>
 80170d4:	f7fd fb9c 	bl	8014810 <abort>
 80170d8:	4b04      	ldr	r3, [pc, #16]	; (80170ec <__assert_func+0x38>)
 80170da:	461c      	mov	r4, r3
 80170dc:	e7f3      	b.n	80170c6 <__assert_func+0x12>
 80170de:	bf00      	nop
 80170e0:	240000ac 	.word	0x240000ac
 80170e4:	0801793f 	.word	0x0801793f
 80170e8:	0801794c 	.word	0x0801794c
 80170ec:	0801797a 	.word	0x0801797a

080170f0 <_calloc_r>:
 80170f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170f2:	fba1 2402 	umull	r2, r4, r1, r2
 80170f6:	b94c      	cbnz	r4, 801710c <_calloc_r+0x1c>
 80170f8:	4611      	mov	r1, r2
 80170fa:	9201      	str	r2, [sp, #4]
 80170fc:	f7fd fbb8 	bl	8014870 <_malloc_r>
 8017100:	9a01      	ldr	r2, [sp, #4]
 8017102:	4605      	mov	r5, r0
 8017104:	b930      	cbnz	r0, 8017114 <_calloc_r+0x24>
 8017106:	4628      	mov	r0, r5
 8017108:	b003      	add	sp, #12
 801710a:	bd30      	pop	{r4, r5, pc}
 801710c:	220c      	movs	r2, #12
 801710e:	6002      	str	r2, [r0, #0]
 8017110:	2500      	movs	r5, #0
 8017112:	e7f8      	b.n	8017106 <_calloc_r+0x16>
 8017114:	4621      	mov	r1, r4
 8017116:	f7fe fab1 	bl	801567c <memset>
 801711a:	e7f4      	b.n	8017106 <_calloc_r+0x16>

0801711c <__ascii_mbtowc>:
 801711c:	b082      	sub	sp, #8
 801711e:	b901      	cbnz	r1, 8017122 <__ascii_mbtowc+0x6>
 8017120:	a901      	add	r1, sp, #4
 8017122:	b142      	cbz	r2, 8017136 <__ascii_mbtowc+0x1a>
 8017124:	b14b      	cbz	r3, 801713a <__ascii_mbtowc+0x1e>
 8017126:	7813      	ldrb	r3, [r2, #0]
 8017128:	600b      	str	r3, [r1, #0]
 801712a:	7812      	ldrb	r2, [r2, #0]
 801712c:	1e10      	subs	r0, r2, #0
 801712e:	bf18      	it	ne
 8017130:	2001      	movne	r0, #1
 8017132:	b002      	add	sp, #8
 8017134:	4770      	bx	lr
 8017136:	4610      	mov	r0, r2
 8017138:	e7fb      	b.n	8017132 <__ascii_mbtowc+0x16>
 801713a:	f06f 0001 	mvn.w	r0, #1
 801713e:	e7f8      	b.n	8017132 <__ascii_mbtowc+0x16>

08017140 <__ascii_wctomb>:
 8017140:	b149      	cbz	r1, 8017156 <__ascii_wctomb+0x16>
 8017142:	2aff      	cmp	r2, #255	; 0xff
 8017144:	bf85      	ittet	hi
 8017146:	238a      	movhi	r3, #138	; 0x8a
 8017148:	6003      	strhi	r3, [r0, #0]
 801714a:	700a      	strbls	r2, [r1, #0]
 801714c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8017150:	bf98      	it	ls
 8017152:	2001      	movls	r0, #1
 8017154:	4770      	bx	lr
 8017156:	4608      	mov	r0, r1
 8017158:	4770      	bx	lr
	...

0801715c <fiprintf>:
 801715c:	b40e      	push	{r1, r2, r3}
 801715e:	b503      	push	{r0, r1, lr}
 8017160:	4601      	mov	r1, r0
 8017162:	ab03      	add	r3, sp, #12
 8017164:	4805      	ldr	r0, [pc, #20]	; (801717c <fiprintf+0x20>)
 8017166:	f853 2b04 	ldr.w	r2, [r3], #4
 801716a:	6800      	ldr	r0, [r0, #0]
 801716c:	9301      	str	r3, [sp, #4]
 801716e:	f7ff fd55 	bl	8016c1c <_vfiprintf_r>
 8017172:	b002      	add	sp, #8
 8017174:	f85d eb04 	ldr.w	lr, [sp], #4
 8017178:	b003      	add	sp, #12
 801717a:	4770      	bx	lr
 801717c:	240000ac 	.word	0x240000ac

08017180 <_init>:
 8017180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017182:	bf00      	nop
 8017184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017186:	bc08      	pop	{r3}
 8017188:	469e      	mov	lr, r3
 801718a:	4770      	bx	lr

0801718c <_fini>:
 801718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801718e:	bf00      	nop
 8017190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017192:	bc08      	pop	{r3}
 8017194:	469e      	mov	lr, r3
 8017196:	4770      	bx	lr
